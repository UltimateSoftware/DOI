/*
    Target database:    DOI
    Target instance:    L08433SAMUELBE
    Generated date:     2020-06-30T11:31:13Z
    Generated on:       L08433SAMUELBE
    Package version:    
    Migration version:  (n/a)
    Baseline version:   (n/a)
    SQL Change Automation version:  4.2.20176.20875
    Migrations pending: 169

    IMPORTANT! "SQLCMD Mode" must be activated prior to execution (under the Query menu in SSMS).

    BEFORE EXECUTING THIS SCRIPT, WE STRONGLY RECOMMEND YOU TAKE A BACKUP OF YOUR DATABASE.

    This SQLCMD script is designed to be executed through MSBuild (via the .sqlproj Deploy target) however
    it can also be run manually using SQL Management Studio.

    It was generated by the SQL Change Automation build task and contains logic to deploy the database, ensuring that
    each of the incremental migrations is executed a single time only in alphabetical (filename)
    order. If any errors occur within those scripts, the deployment will be aborted and the transaction
    rolled-back.

    NOTE: Automatic transaction management is provided for incremental migrations, so you don't need to
          add any special BEGIN TRAN/COMMIT/ROLLBACK logic in those script files.
          However if you require transaction handling in your Pre/Post-Deployment scripts, you will
          need to add this logic to the source .sql files yourself.
*/

----====================================================================================================================
---- SQLCMD Variables
:setvar ReleaseVersion ""
:setvar ForceDeployWithoutBaseline "False"
:setvar DefaultFilePrefix "DOI"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultBackupPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\Backup\"
----====================================================================================================================

:on error exit -- Instructs SQLCMD to abort execution as soon as an erroneous batch is encountered

:setvar PackageVersion ""
:setvar IsShadowDeployment 0

GO
:setvar IsSqlCmdEnabled "True"
GO


GO

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
SET XACT_ABORT ON; -- Abort the current batch immediately if a statement raises a run-time error and rollback any open transaction(s)

IF N'$(IsSqlCmdEnabled)' <> N'True' -- Is SQLCMD mode not enabled within the execution context (eg. SSMS)
    BEGIN
        IF IS_SRVROLEMEMBER(N'sysadmin') = 1
            BEGIN -- User is sysadmin; abort execution by disconnect the script from the database server
                RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Aborting connection to suppress subsequent errors.', 20, 127, N'UNKNOWN') WITH LOG;
            END
        ELSE
            BEGIN -- User is not sysadmin; abort execution by switching off statement execution (script will continue to the end without performing any actual deployment work)
                RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Script execution has been halted.', 16, 127, N'UNKNOWN') WITH NOWAIT;
            END
    END
GO
IF @@ERROR != 0
    BEGIN
        SET NOEXEC ON; -- SQLCMD is NOT enabled so prevent any further statements from executing
    END
GO
-- Beyond this point, no further explicit error handling is required because it can be assumed that SQLCMD mode is enabled

IF SERVERPROPERTY('EngineEdition') = 5 AND DB_NAME() != N'$(DatabaseName)'
  RAISERROR(N'Azure SQL Database does not support switching between databases. Connect to [$(DatabaseName)] and then re-run the script.', 16, 127);








------------------------------------------------------------------------------------------------------------------------
------------------------------------------       PRE-DEPLOYMENT SCRIPTS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\01_Create_Database.sql" -----';
GO

------------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Create_Database.sql" ---------------------------
EXEC sp_configure 'contained database authentication', 1
RECONFIGURE WITH OVERRIDE
GO


IF (DB_ID(N'$(DatabaseName)') IS NULL)
BEGIN
	PRINT N'Creating $(DatabaseName)...';
END
GO

IF (DB_ID(N'$(DatabaseName)') IS NULL)
BEGIN
	CREATE DATABASE [$(DatabaseName)]
	 CONTAINMENT = PARTIAL
	 ON  PRIMARY 
	( NAME = N'$(DatabaseName)', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\$(DatabaseName).mdf' , SIZE = 8192KB , FILEGROWTH = 65536KB )
	 LOG ON 
	( NAME = N'$(DatabaseName)_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\$(DatabaseName)_log.ldf' , SIZE = 8192KB , FILEGROWTH = 65536KB )
END
GO



ALTER DATABASE [$(DatabaseName)] SET COMPATIBILITY_LEVEL = 130
ALTER DATABASE [$(DatabaseName)] SET ANSI_NULL_DEFAULT OFF 
ALTER DATABASE [$(DatabaseName)] SET ANSI_NULLS OFF 
ALTER DATABASE [$(DatabaseName)] SET ANSI_PADDING OFF 
ALTER DATABASE [$(DatabaseName)] SET ANSI_WARNINGS OFF 
ALTER DATABASE [$(DatabaseName)] SET ARITHABORT OFF 
ALTER DATABASE [$(DatabaseName)] SET AUTO_CLOSE OFF 
ALTER DATABASE [$(DatabaseName)] SET AUTO_SHRINK OFF 
ALTER DATABASE [$(DatabaseName)] SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF)
ALTER DATABASE [$(DatabaseName)] SET AUTO_UPDATE_STATISTICS ON 
ALTER DATABASE [$(DatabaseName)] SET CURSOR_CLOSE_ON_COMMIT OFF 
ALTER DATABASE [$(DatabaseName)] SET CURSOR_DEFAULT  GLOBAL 
ALTER DATABASE [$(DatabaseName)] SET CONCAT_NULL_YIELDS_NULL OFF 
ALTER DATABASE [$(DatabaseName)] SET NUMERIC_ROUNDABORT OFF 
ALTER DATABASE [$(DatabaseName)] SET QUOTED_IDENTIFIER OFF 
ALTER DATABASE [$(DatabaseName)] SET RECURSIVE_TRIGGERS OFF 
ALTER DATABASE [$(DatabaseName)] SET DISABLE_BROKER 
ALTER DATABASE [$(DatabaseName)] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
ALTER DATABASE [$(DatabaseName)] SET DATE_CORRELATION_OPTIMIZATION OFF 
ALTER DATABASE [$(DatabaseName)] SET PARAMETERIZATION SIMPLE 
ALTER DATABASE [$(DatabaseName)] SET READ_COMMITTED_SNAPSHOT OFF
ALTER DATABASE [$(DatabaseName)] SET READ_WRITE 
ALTER DATABASE [$(DatabaseName)] SET RECOVERY FULL 
ALTER DATABASE [$(DatabaseName)] SET MULTI_USER 
ALTER DATABASE [$(DatabaseName)] SET PAGE_VERIFY CHECKSUM  
ALTER DATABASE [$(DatabaseName)] SET TARGET_RECOVERY_TIME = 60 SECONDS 
ALTER DATABASE [$(DatabaseName)] SET DELAYED_DURABILITY = DISABLED 
--ALTER DATABASE [$(DatabaseName)] SET MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT
GO

ALTER DATABASE [$(DatabaseName)] SET DEFAULT_FULLTEXT_LANGUAGE = 1033 
ALTER DATABASE [$(DatabaseName)] SET TRANSFORM_NOISE_WORDS = OFF 
ALTER DATABASE [$(DatabaseName)] SET TWO_DIGIT_YEAR_CUTOFF = 2049 
ALTER DATABASE [$(DatabaseName)] SET DEFAULT_LANGUAGE = 1033 
ALTER DATABASE [$(DatabaseName)] SET NESTED_TRIGGERS = ON 
GO


USE [$(DatabaseName)]
GO
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;

IF NOT EXISTS (SELECT name FROM sys.filegroups WHERE is_default=1 AND name = N'PRIMARY') 
ALTER DATABASE [$(DatabaseName)] MODIFY FILEGROUP [PRIMARY] DEFAULT
GO


IF NOT EXISTS (SELECT name FROM sys.filegroups WHERE name = N'InMem') 
ALTER DATABASE [$(DatabaseName)] ADD FILEGROUP [InMem] CONTAINS MEMORY_OPTIMIZED_DATA;
GO

IF NOT EXISTS (SELECT 'True' FROM sys.database_files WHERE name = N'$(DatabaseName)_InMem')
ALTER DATABASE [$(DatabaseName)] 
    ADD FILE ( NAME = N'$(DatabaseName)_InMem', 
               FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\$(DatabaseName)_InMem.ndf'  ) 
        TO FILEGROUP [InMem]
GO
GO
-------------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Create_Database.sql" ----------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\02_Create Schemas.sql" -----';
GO

-------------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\02_Create Schemas.sql" ---------------------------
IF NOT EXISTS(SELECT 'True' FROM sys.schemas WHERE name = 'DOI')
EXEC('CREATE SCHEMA DOI AUTHORIZATION dbo')
GO
GO
--------------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\02_Create Schemas.sql" ----------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\02_Create_Schemas.sql" -----';
GO

-------------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\02_Create_Schemas.sql" ---------------------------
PRINT N'Creating schemas'
GO
IF SCHEMA_ID(N'DOI') IS NULL
EXEC sp_executesql N'CREATE SCHEMA [DOI]
AUTHORIZATION [dbo]'
GO
IF SCHEMA_ID(N'Utility') IS NULL
EXEC sp_executesql N'CREATE SCHEMA [Utility]
AUTHORIZATION [dbo]'
GO
GO
--------------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\02_Create_Schemas.sql" ----------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\03_Query_Store.sql" -----';
GO

--------------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\03_Query_Store.sql" -----------------------------
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
USE DOI
GO

IF (SELECT is_query_store_on FROM SYS.databases WHERE NAME = 'DOI') <> 1
BEGIN
	ALTER DATABASE DOI SET QUERY_STORE = ON;

	PRINT 'Set DOI QUERY_STORE to ON.'
END
GO


IF EXISTS(	SELECT 'True'
			FROM sys.database_query_store_options 
			WHERE actual_state_desc <> 'READ_WRITE'
				OR max_storage_size_mb <> 10000
				OR query_capture_mode_desc <> 'ALL'
				OR size_based_cleanup_mode_desc <> 'AUTO'
				OR STALE_QUERY_THRESHOLD_DAYS <> 120)
BEGIN
	ALTER DATABASE DOI SET QUERY_STORE
		(
			OPERATION_MODE = READ_WRITE,
			MAX_STORAGE_SIZE_MB = 10000,
			QUERY_CAPTURE_MODE = ALL,
			SIZE_BASED_CLEANUP_MODE = AUTO,
			CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 120)
		);

	PRINT 'Fixed QUERY_STORE settings.'
END		
GO
GO
---------------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\03_Query_Store.sql" ------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\03_Resource Governor Setup.sql" -----';
GO

--------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\03_Resource Governor Setup.sql" -----------------------
USE master
GO

IF EXISTS(SELECT 'True' FROM sys.resource_governor_configuration rgc WHERE rgc.is_enabled = 0)
BEGIN
	ALTER RESOURCE GOVERNOR RECONFIGURE;   --enables resource governor

	PRINT 'Enabled Resource Governor.'
END

IF NOT EXISTS(SELECT 'True' FROM sys.resource_governor_configuration rgc WHERE rgc.is_enabled = 1)
BEGIN
	RAISERROR('Resource Governor was not enabled.', 16, 1)
END

GO  

IF EXISTS (SELECT 'True' FROM sys.resource_governor_workload_groups WHERE name = 'IndexMaintenanceGroup')
BEGIN
	DROP WORKLOAD GROUP IndexMaintenanceGroup

	PRINT 'Dropped IndexMaintenanceGroup.'
END
GO

IF EXISTS(SELECT 'True' FROM sys.resource_governor_resource_pools WHERE name = 'IndexMaintenancePool')
BEGIN
	DROP RESOURCE POOL IndexMaintenancePool

	PRINT 'Dropped IndexMaintenancePool.'
END
GO

IF NOT EXISTS(SELECT 'True' FROM sys.resource_governor_resource_pools WHERE name = 'IndexMaintenancePool')
BEGIN
	CREATE RESOURCE POOL IndexMaintenancePool WITH
	(
		MAX_IOPS_PER_VOLUME = 500, --what is the right number?  run test rebuilds and watch max value SQL Server:Resource Pool Stats:Disk Write IO/Sec perfmon counter to get # IOPS consumed.
		MIN_IOPS_PER_VOLUME = 1, 
		MAX_MEMORY_PERCENT = 20, 
		CAP_CPU_PERCENT = 20, --hard cap on MAXIMUM cpu bandwidth
		MAX_CPU_PERCENT = 20 --max AVERAGE CPU bandwidth WHEN THERE IS CPU CONTENTION.
		--AFFINITY {SCHEDULER =  
	 --                 AUTO 
	 --               | ( <scheduler_range_spec> )   
	 --               | NUMANODE = ( <NUMA_node_range_spec> )
	 --               } ]   
	)

	PRINT 'Created IndexMaintenancePool Resource Governor Resource Pool.'
END
GO
 
-- Create a new Workload Group for the Index Maintenance process
IF NOT EXISTS (SELECT 'True' FROM sys.resource_governor_workload_groups WHERE name = 'IndexMaintenanceGroup')
BEGIN
	CREATE WORKLOAD GROUP IndexMaintenanceGroup
	--WITH (MAX_DOP = 1, IMPORTANCE = LOW)
	USING IndexMaintenancePool

	PRINT 'Created IndexMaintenanceGroup Resource Governor Workload Group.'
END
GO

IF EXISTS(	SELECT 'True'
			FROM sys.resource_governor_configuration rgc 
				INNER JOIN sys.objects o ON rgc.classifier_function_id = o.object_id
			WHERE o.name = 'fnClassifier')
BEGIN
	ALTER RESOURCE GOVERNOR WITH (CLASSIFIER_FUNCTION = null)

	PRINT 'Changed Resource Gov Classifier Function to NULL.'

	IF EXISTS(SELECT 'True' FROM sys.dm_resource_governor_configuration WHERE is_reconfiguration_pending = 1)
	BEGIN
		ALTER RESOURCE GOVERNOR RECONFIGURE

		PRINT 'Ran Resource Gov Reconfigure.'
	END
	ELSE
	BEGIN
		RAISERROR('Resource Governor change to ClassifierFunction = NULL did not take.', 16, 1)
	END
END

GO

--DROP OLD CLASSIFIER FUNCTION.
IF OBJECT_ID('dbo.fnLoginClassifier') IS NOT NULL
BEGIN
	IF EXISTS(	SELECT 'True'
				FROM sys.resource_governor_configuration rgc 
					INNER JOIN sys.objects o ON rgc.classifier_function_id = o.object_id
				WHERE o.name = 'fnLoginClassifier')
	BEGIN
		ALTER RESOURCE GOVERNOR WITH (CLASSIFIER_FUNCTION = null)

		PRINT 'Changed Resource Gov Classifier Function to NULL.'

		IF EXISTS(SELECT 'True' FROM sys.dm_resource_governor_configuration WHERE is_reconfiguration_pending = 1)
		BEGIN
			ALTER RESOURCE GOVERNOR RECONFIGURE

			PRINT 'Ran Resource Gov Reconfigure.'
		END
		ELSE
		BEGIN
			RAISERROR('Resource Governor change to ClassifierFunction = NULL did not take.', 16, 1)
		END
	END

	DROP FUNCTION dbo.fnLoginClassifier

	PRINT 'Dropped dbo.fnLoginClassifier.'
END
GO


CREATE OR ALTER FUNCTION dbo.fnClassifier()
RETURNS SYSNAME WITH SCHEMABINDING
AS
BEGIN
	DECLARE @app		NVARCHAR(256) = APP_NAME(),
			@GroupName	SYSNAME = N'default';
	
	IF @app LIKE N'SQLAgent - TSQL JobStep%'
	BEGIN
		IF EXISTS (	SELECT 1 FROM dbo.JobsToGovern WHERE @app LIKE MatchString)
		BEGIN
			SET @GroupName = 'IndexMaintenanceGroup'
		END
	END
	
	RETURN @GroupName;
END
GO

-- Register the Classifier Function within Resource Governor
IF EXISTS(	SELECT 'True'
			FROM sys.resource_governor_configuration rgc 
			WHERE rgc.classifier_function_id = 0)
BEGIN
	ALTER RESOURCE GOVERNOR WITH(CLASSIFIER_FUNCTION = dbo.fnClassifier)

	PRINT 'Changed Resource Gov Classifier Function to dbo.fnClassifier.'

	IF EXISTS(SELECT 'True' FROM sys.dm_resource_governor_configuration WHERE is_reconfiguration_pending = 1)
	BEGIN
		ALTER RESOURCE GOVERNOR RECONFIGURE

		PRINT 'Ran Resource Gov Reconfigure.'
	END
	ELSE
	BEGIN
		RAISERROR('Resource Governor change to ClassifierFunction = fnClassifier did not take.', 16, 1)
	END
END

GO 

GO
---------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\03_Resource Governor Setup.sql" ------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;









------------------------------------------------------------------------------------------------------------------------
------------------------------------------       INCREMENTAL MIGRATIONS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
PRINT '# Setting up migration log table';
IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__MigrationLog]') AND [type] = 'U'))
  BEGIN
    IF OBJECT_ID(N'[dbo].[__MigrationLogCurrent]', 'V') IS NOT NULL
      DROP VIEW [dbo].[__MigrationLogCurrent];
    PRINT '# Creating a new migration log table';
    CREATE TABLE [dbo].[__MigrationLog] (
      [migration_id] UNIQUEIDENTIFIER NOT NULL,
      [script_checksum] NVARCHAR (64) NOT NULL,
      [script_filename] NVARCHAR (255) NOT NULL,
      [complete_dt] DATETIME2 NOT NULL,
      [applied_by] NVARCHAR (100) NOT NULL,
      [deployed] TINYINT CONSTRAINT [DF___MigrationLog_deployed] DEFAULT (1) NOT NULL,
      [version] VARCHAR (255) NULL,
      [package_version] VARCHAR (255) NULL,
      [release_version] VARCHAR (255) NULL,
      [sequence_no] INT IDENTITY (1, 1) NOT NULL CONSTRAINT [PK___MigrationLog] PRIMARY KEY CLUSTERED ([migration_id], [complete_dt], [script_checksum]));
    CREATE NONCLUSTERED INDEX [IX___MigrationLog_CompleteDt]
      ON [dbo].[__MigrationLog]([complete_dt]);
    CREATE NONCLUSTERED INDEX [IX___MigrationLog_Version]
      ON [dbo].[__MigrationLog]([version]);
    CREATE UNIQUE NONCLUSTERED INDEX [UX___MigrationLog_SequenceNo]
      ON [dbo].[__MigrationLog]([sequence_no]);
    EXECUTE ('
	CREATE VIEW [dbo].[__MigrationLogCurrent]
			AS
			WITH currentMigration AS
			(
			  SELECT
				 migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed, ROW_NUMBER() OVER(PARTITION BY migration_id ORDER BY sequence_no DESC) AS RowNumber
			  FROM [dbo].[__MigrationLog]
			)
			SELECT  migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed
			FROM currentMigration
			WHERE RowNumber = 1
	');
    IF OBJECT_ID(N'sp_addextendedproperty', 'P') IS NOT NULL
      BEGIN
        PRINT N'Creating extended properties';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This table is required by SQL Change Automation projects to keep track of which migrations have been executed during deployment. Please do not alter or remove this table from the database.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', NULL, NULL;
        EXECUTE sp_addextendedproperty N'MS_Description', N'The executing user at the time of deployment (populated using the SYSTEM_USER function).', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'applied_by';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The date/time that the migration finished executing. This value is populated using the SYSDATETIME function.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'complete_dt';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This column contains a number of potential states:

0 - Marked As Deployed: The migration was not executed.
1- Deployed: The migration was executed successfully.
2- Imported: The migration was generated by importing from this DB.

"Marked As Deployed" and "Imported" are similar in that the migration was not executed on this database; it was was only marked as such to prevent it from executing during subsequent deployments.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'deployed';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The unique identifier of a migration script file. This value is stored within the <Migration /> Xml fragment within the header of the file itself.

Note that it is possible for this value to repeat in the [__MigrationLog] table. In the case of programmable object scripts, a record will be inserted with a particular ID each time a change is made to the source file and subsequently deployed.

In the case of a migration, you may see the same [migration_id] repeated, but only in the scenario where the "Mark As Deployed" button/command has been run.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'migration_id';
        EXECUTE sp_addextendedproperty N'MS_Description', N'If you have enabled SQLCMD Packaging in your SQL Change Automation project, or if you are using Octopus Deploy, this will be the version number that your database package was stamped with at build-time.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'package_version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'If you are using Octopus Deploy, you can use the value in this column to look-up which release was responsible for deploying this migration.
If deploying via PowerShell, set the $ReleaseVersion variable to populate this column.
If deploying via Visual Studio, this column will always be NULL.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'release_version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'A SHA256 representation of the migration script file at the time of build.  This value is used to determine whether a migration has been changed since it was deployed. In the case of a programmable object script, a different checksum will cause the migration to be redeployed.
Note: if any variables have been specified as part of a deployment, this will not affect the checksum value.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'script_checksum';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The name of the migration script file on disk, at the time of build.
If Semantic Versioning has been enabled, then this value will contain the full relative path from the root of the project folder. If it is not enabled, then it will simply contain the filename itself.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'script_filename';
        EXECUTE sp_addextendedproperty N'MS_Description', N'An auto-seeded numeric identifier that can be used to determine the order in which migrations were deployed.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'sequence_no';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The semantic version that this migration was created under. In SQL Change Automation projects, a folder can be given a version number, e.g. 1.0.0, and one or more migration scripts can be stored within that folder to provide logical grouping of related database changes.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This view is required by SQL Change Automation projects to determine whether a migration should be executed during a deployment. The view lists the most recent [__MigrationLog] entry for a given [migration_id], which is needed to determine whether a particular programmable object script needs to be (re)executed: a non-matching checksum on the current [__MigrationLog] entry will trigger the execution of a programmable object script. Please do not alter or remove this table from the database.', N'SCHEMA', N'dbo', N'VIEW', N'__MigrationLogCurrent', NULL, NULL;
      END
  END

IF NOT EXISTS (SELECT col.COLUMN_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS tab, INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE AS col WHERE col.CONSTRAINT_NAME = tab.CONSTRAINT_NAME AND col.TABLE_NAME = tab.TABLE_NAME AND col.TABLE_SCHEMA = tab.TABLE_SCHEMA AND tab.CONSTRAINT_TYPE = 'PRIMARY KEY' AND col.TABLE_SCHEMA = 'dbo' AND col.TABLE_NAME = '__MigrationLog' AND col.COLUMN_NAME = 'complete_dt')
  BEGIN
    RAISERROR (N'The SQL Change Automation [dbo].[__MigrationLog] table has an incorrect primary key specification. This may be due to the fact that the <SqlChangeAutomationSchemaVersion/> element in your .sqlproj file contains the wrong version number for your database. Please check earlier versions of your .sqlproj file to determine what is the appropriate version for your database (possibly 1.7 or 1.3.1).', 16, 127, N'UNKNOWN')
      WITH NOWAIT;
    RETURN;
  END

IF COL_LENGTH(N'[dbo].[__MigrationLog]', N'sequence_no') IS NULL
  BEGIN
    RAISERROR (N'The SQL Change Automation [dbo].[__MigrationLog] table is missing the [sequence_no] column. This may be due to the fact that the <SqlChangeAutomationSchemaVersion/> element in your .sqlproj file contains the wrong version number for your database. Please check earlier versions of your .sqlproj file to determine what is the appropriate version for your database (possibly 1.7 or 1.3.1).', 16, 127, N'UNKNOWN')
      WITH NOWAIT;
    RETURN;
  END

IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__MigrationLogCurrent]') AND [type] = 'V'))
  BEGIN
    EXECUTE ('
	CREATE VIEW [dbo].[__MigrationLogCurrent]
			AS
			WITH currentMigration AS
			(
			  SELECT
				 migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed, ROW_NUMBER() OVER(PARTITION BY migration_id ORDER BY sequence_no DESC) AS RowNumber
			  FROM [dbo].[__MigrationLog]
			)
			SELECT  migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed
			FROM currentMigration
			WHERE RowNumber = 1
	');
  END

GO
PRINT '# Setting up __SchemaSnapshot table';
IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__SchemaSnapshot]')))
  BEGIN
    CREATE TABLE [dbo].[__SchemaSnapshot] (
      [Snapshot] VARBINARY (MAX),
      [LastUpdateDate] DATETIME2 CONSTRAINT [__SchemaSnapshotDateDefault] DEFAULT SYSDATETIME());
    IF OBJECT_ID(N'sp_addextendedproperty', 'P') IS NOT NULL
      BEGIN
        EXECUTE sp_addextendedproperty N'MS_Description', N'This table is used by SQL Change Automation projects to store a snapshot of the schema at the time of the last deployment. Please do not alter or remove this table from the database.', 'SCHEMA', N'dbo', 'TABLE', N'__SchemaSnapshot', NULL, NULL;
      END
  END

GO
PRINT '# Truncating __SchemaSnapshot';
TRUNCATE TABLE [dbo].[__SchemaSnapshot];

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('34c17dd7-07bb-4639-9759-e17109d3ebbc' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\001_Metadata_System_Tables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\001_Metadata_System_Tables.sql", ID: {34c17dd7-07bb-4639-9759-e17109d3ebbc} *****';

GO


----------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\001_Metadata_System_Tables.sql" -------------------------
GO
-- <Migration ID="34c17dd7-07bb-4639-9759-e17109d3ebbc" TransactionHandling="Custom" />
IF OBJECT_ID('[DOI].[MappingSqlServerDMVToDOITables]') IS NULL
CREATE TABLE [DOI].[MappingSqlServerDMVToDOITables]
(
[DOITableName] [sys].[sysname] NOT NULL,
[SQLServerObjectName] [sys].[sysname] NOT NULL,
[SQLServerObjectType] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[HasDatabaseIdInOutput] [bit] NOT NULL,
[DatabaseOutputString] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[FunctionParameterList] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[FunctionParentDMV] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
CONSTRAINT [PK_MappingSqlServerDMVToDOITables] PRIMARY KEY NONCLUSTERED  ([DOITableName], [SQLServerObjectName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysDatabases]') IS NULL
CREATE TABLE [DOI].[SysDatabases]
(
[name] [sys].[sysname] NOT NULL,
[database_id] [int] NOT NULL,
[source_database_id] [int] NULL,
[owner_sid] [varbinary] (85) NULL,
[create_date] [datetime] NOT NULL,
[compatibility_level] [tinyint] NOT NULL,
[collation_name] [sys].[sysname] NOT NULL,
[user_access] [tinyint] NULL,
[user_access_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_read_only] [bit] NULL,
[is_auto_close_on] [bit] NOT NULL,
[is_auto_shrink_on] [bit] NULL,
[state] [tinyint] NULL,
[state_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_in_standby] [bit] NULL,
[is_cleanly_shutdown] [bit] NULL,
[is_supplemental_logging_enabled] [bit] NULL,
[snapshot_isolation_state] [tinyint] NULL,
[snapshot_isolation_state_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_read_committed_snapshot_on] [bit] NULL,
[recovery_model] [tinyint] NULL,
[recovery_model_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[page_verify_option] [tinyint] NULL,
[page_verify_option_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_auto_create_stats_on] [bit] NULL,
[is_auto_create_stats_incremental_on] [bit] NULL,
[is_auto_update_stats_on] [bit] NULL,
[is_auto_update_stats_async_on] [bit] NULL,
[is_ansi_null_default_on] [bit] NULL,
[is_ansi_nulls_on] [bit] NULL,
[is_ANSI_PADDING_on] [bit] NULL,
[is_ansi_warnings_on] [bit] NULL,
[is_arithabort_on] [bit] NULL,
[is_concat_null_yields_null_on] [bit] NULL,
[is_numeric_roundabort_on] [bit] NULL,
[is_quoted_identifier_on] [bit] NULL,
[is_recursive_triggers_on] [bit] NULL,
[is_cursor_close_on_commit_on] [bit] NULL,
[is_local_cursor_default] [bit] NULL,
[is_fulltext_enabled] [bit] NULL,
[is_trustworthy_on] [bit] NULL,
[is_db_chaining_on] [bit] NULL,
[is_parameterization_forced] [bit] NULL,
[is_master_key_encrypted_by_server] [bit] NOT NULL,
[is_query_store_on] [bit] NULL,
[is_published] [bit] NOT NULL,
[is_subscribed] [bit] NOT NULL,
[is_merge_published] [bit] NOT NULL,
[is_distributor] [bit] NOT NULL,
[is_sync_with_backup] [bit] NOT NULL,
[service_broker_guid] [uniqueidentifier] NOT NULL,
[is_broker_enabled] [bit] NOT NULL,
[log_reuse_wait] [tinyint] NULL,
[log_reuse_wait_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_date_correlation_on] [bit] NOT NULL,
[is_cdc_enabled] [bit] NOT NULL,
[is_encrypted] [bit] NULL,
[is_honor_broker_priority_on] [bit] NULL,
[replica_id] [uniqueidentifier] NULL,
[group_database_id] [uniqueidentifier] NULL,
[resource_pool_id] [int] NULL,
[default_language_lcid] [smallint] NULL,
[default_language_name] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[default_fulltext_language_lcid] [int] NULL,
[default_fulltext_language_name] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_nested_triggers_on] [bit] NULL,
[is_transform_noise_words_on] [bit] NULL,
[two_digit_year_cutoff] [smallint] NULL,
[containment] [tinyint] NULL,
[containment_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[target_recovery_time_in_seconds] [int] NULL,
[delayed_durability] [int] NULL,
[delayed_durability_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_memory_optimized_elevate_to_snapshot_on] [bit] NULL,
[is_federation_member] [bit] NULL,
[is_remote_data_archive_enabled] [bit] NULL,
[is_mixed_page_allocation_on] [bit] NULL,
CONSTRAINT [PK_SysDatabases] PRIMARY KEY NONCLUSTERED  ([database_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysDatabaseFiles]') IS NULL
CREATE TABLE [DOI].[SysDatabaseFiles]
(
[database_id] [int] NOT NULL,
[file_id] [int] NOT NULL,
[file_guid] [uniqueidentifier] NULL,
[type] [tinyint] NOT NULL,
[type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[data_space_id] [int] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[physical_name] [nvarchar] (260) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[state] [tinyint] NULL,
[state_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[size] [int] NOT NULL,
[max_size] [int] NOT NULL,
[growth] [int] NOT NULL,
[is_media_read_only] [bit] NOT NULL,
[is_read_only] [bit] NOT NULL,
[is_sparse] [bit] NOT NULL,
[is_percent_growth] [bit] NOT NULL,
[is_name_reserved] [bit] NOT NULL,
[create_lsn] [numeric] (25, 0) NULL,
[drop_lsn] [numeric] (25, 0) NULL,
[read_only_lsn] [numeric] (25, 0) NULL,
[read_write_lsn] [numeric] (25, 0) NULL,
[differential_base_lsn] [numeric] (25, 0) NULL,
[differential_base_guid] [uniqueidentifier] NULL,
[differential_base_time] [datetime] NULL,
[redo_start_lsn] [numeric] (25, 0) NULL,
[redo_start_fork_guid] [uniqueidentifier] NULL,
[redo_target_lsn] [numeric] (25, 0) NULL,
[redo_target_fork_guid] [uniqueidentifier] NULL,
[backup_lsn] [numeric] (25, 0) NULL,
CONSTRAINT [PK_SysDatabaseFiles] PRIMARY KEY NONCLUSTERED  ([database_id], [file_id]),
CONSTRAINT [UQ_SysDatabaseFiles_Name] UNIQUE NONCLUSTERED  ([database_id], [name]),
CONSTRAINT [UQ_SysDatabaseFiles_PhysicalName] UNIQUE NONCLUSTERED  ([database_id], [physical_name])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysDataSpaces]') IS NULL
CREATE TABLE [DOI].[SysDataSpaces]
(
[database_id] [int] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[data_space_id] [int] NOT NULL,
[type] [char] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[type_desc] [nvarchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_default] [bit] NOT NULL,
[is_system] [bit] NULL,
CONSTRAINT [PK_SysDataSpaces] PRIMARY KEY NONCLUSTERED  ([database_id], [data_space_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysDefaultConstraints]') IS NULL
CREATE TABLE [DOI].[SysDefaultConstraints]
(
[database_id] [int] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[object_id] [int] NOT NULL,
[principal_id] [int] NULL,
[parent_object_id] [int] NOT NULL,
[schema_id] [int] NOT NULL,
[type] [char] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[create_date] [datetime] NOT NULL,
[modify_date] [datetime] NOT NULL,
[is_ms_shipped] [bit] NOT NULL,
[is_published] [bit] NOT NULL,
[is_schema_published] [bit] NOT NULL,
[parent_column_id] [int] NOT NULL,
[definition] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_system_named] [bit] NOT NULL,
CONSTRAINT [PK_SysDefaultConstraints] PRIMARY KEY NONCLUSTERED  ([database_id], [object_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysDestinationDataSpaces]') IS NULL
CREATE TABLE [DOI].[SysDestinationDataSpaces]
(
[database_id] [int] NOT NULL,
[partition_scheme_id] [int] NOT NULL,
[destination_id] [int] NOT NULL,
[data_space_id] [int] NOT NULL,
CONSTRAINT [PK_SysDestinationDataSpaces] PRIMARY KEY NONCLUSTERED  ([database_id], [partition_scheme_id], [destination_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysDmDbStatsProperties]') IS NULL
CREATE TABLE [DOI].[SysDmDbStatsProperties]
(
[database_id] [int] NOT NULL,
[object_id] [int] NOT NULL,
[stats_id] [int] NOT NULL,
[last_updated] [datetime2] NULL,
[rows] [bigint] NULL,
[rows_sampled] [bigint] NULL,
[steps] [int] NULL,
[unfiltered_rows] [bigint] NULL,
[modification_counter] [bigint] NULL,
[persisted_sample_percent] [float] NULL,
CONSTRAINT [PK_SysDmDbStatsProperties] PRIMARY KEY NONCLUSTERED  ([database_id], [object_id], [stats_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysDmOsVolumeStats]') IS NULL
CREATE TABLE [DOI].[SysDmOsVolumeStats]
(
[database_id] [int] NOT NULL,
[file_id] [int] NOT NULL,
[volume_mount_point] [nvarchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[volume_id] [nvarchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[logical_volume_name] [nvarchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[file_system_type] [nvarchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[total_bytes] [bigint] NOT NULL,
[available_bytes] [bigint] NOT NULL,
[supports_compression] [tinyint] NULL,
[supports_alternate_streams] [tinyint] NULL,
[supports_sparse_files] [tinyint] NULL,
[is_read_only] [tinyint] NULL,
[is_compressed] [tinyint] NULL,
CONSTRAINT [PK_SysDmOsVolumeStats] PRIMARY KEY NONCLUSTERED  ([database_id], [file_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysFilegroups]') IS NULL
CREATE TABLE [DOI].[SysFilegroups]
(
[database_id] [int] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[data_space_id] [int] NOT NULL,
[type] [char] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_default] [bit] NULL,
[is_system] [bit] NULL,
[filegroup_guid] [uniqueidentifier] NULL,
[log_filegroup_id] [int] NULL,
[is_read_only] [bit] NULL,
[is_autogrow_all_files] [bit] NULL,
CONSTRAINT [PK_SysFilegroups] PRIMARY KEY NONCLUSTERED  ([database_id], [data_space_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysForeignKeyColumns]') IS NULL
CREATE TABLE [DOI].[SysForeignKeyColumns]
(
[database_id] [int] NOT NULL,
[constraint_object_id] [int] NOT NULL,
[constraint_column_id] [int] NOT NULL,
[parent_object_id] [int] NOT NULL,
[parent_column_id] [int] NOT NULL,
[referenced_object_id] [int] NOT NULL,
[referenced_column_id] [int] NOT NULL,
CONSTRAINT [PK_SysForeignKeyColumns] PRIMARY KEY NONCLUSTERED  ([database_id], [constraint_object_id], [constraint_column_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysForeignKeys]') IS NULL
CREATE TABLE [DOI].[SysForeignKeys]
(
[database_id] [int] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[object_id] [int] NOT NULL,
[principal_id] [int] NULL,
[schema_id] [int] NOT NULL,
[parent_object_id] [int] NOT NULL,
[type] [char] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[type_desc] [nvarchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[create_date] [datetime] NOT NULL,
[modify_date] [datetime] NOT NULL,
[is_ms_shipped] [bit] NOT NULL,
[is_published] [bit] NOT NULL,
[is_schema_published] [bit] NOT NULL,
[referenced_object_id] [int] NULL,
[key_index_id] [int] NULL,
[is_disabled] [bit] NOT NULL,
[is_not_for_replication] [bit] NOT NULL,
[is_not_trusted] [bit] NOT NULL,
[delete_referential_action] [tinyint] NULL,
[delete_referential_action_desc] [nvarchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[update_referential_action] [tinyint] NULL,
[update_referential_action_desc] [nvarchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_system_named] [bit] NOT NULL,
[ParentColumnList_Actual] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[ReferencedColumnList_Actual] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[DeploymentTime] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
CONSTRAINT [PK_SysForeignKeys] PRIMARY KEY NONCLUSTERED  ([database_id], [name])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('DOI.Chk_SysForeignKeys_DeploymentTime','C') IS NULL
ALTER TABLE [DOI].[SysForeignKeys] ADD CONSTRAINT [Chk_SysForeignKeys_DeploymentTime] CHECK (([DeploymentTime]='Deployment' OR [DeploymentTime]='Job'))
GO
IF OBJECT_ID('[DOI].[SysIndexColumns]') IS NULL
CREATE TABLE [DOI].[SysIndexColumns]
(
[database_id] [int] NOT NULL,
[object_id] [int] NOT NULL,
[index_id] [int] NOT NULL,
[index_column_id] [int] NOT NULL,
[column_id] [int] NOT NULL,
[key_ordinal] [tinyint] NOT NULL,
[partition_ordinal] [tinyint] NOT NULL,
[is_descending_key] [bit] NULL,
[is_included_column] [bit] NULL,
CONSTRAINT [PK_SysIndexColumns] PRIMARY KEY NONCLUSTERED  ([database_id], [object_id], [index_id], [index_column_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysIndexes]') IS NULL
CREATE TABLE [DOI].[SysIndexes]
(
[database_id] [int] NOT NULL,
[object_id] [int] NOT NULL,
[name] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[index_id] [int] NOT NULL,
[type] [tinyint] NOT NULL,
[type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[is_unique] [bit] NOT NULL,
[data_space_id] [int] NULL,
[ignore_dup_key] [bit] NOT NULL,
[is_primary_key] [bit] NOT NULL,
[is_unique_constraint] [bit] NOT NULL,
[fill_factor] [tinyint] NOT NULL,
[is_padded] [bit] NOT NULL,
[is_disabled] [bit] NOT NULL,
[is_hypothetical] [bit] NOT NULL,
[allow_row_locks] [bit] NOT NULL,
[allow_page_locks] [bit] NOT NULL,
[has_filter] [bit] NOT NULL,
[filter_definition] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[compression_delay] [int] NULL,
[key_column_list] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[included_column_list] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[has_LOB_columns] [bit] NULL,
CONSTRAINT [PK_SysIndexes] PRIMARY KEY NONCLUSTERED  ([database_id], [object_id], [index_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysIndexPhysicalStats]') IS NULL
CREATE TABLE [DOI].[SysIndexPhysicalStats]
(
[database_id] [smallint] NOT NULL,
[object_id] [int] NOT NULL,
[index_id] [int] NOT NULL,
[partition_number] [int] NOT NULL,
[index_type_desc] [nvarchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[alloc_unit_type_desc] [nvarchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[index_depth] [tinyint] NULL,
[index_level] [tinyint] NULL,
[avg_fragmentation_in_percent] [float] NULL,
[fragment_count] [bigint] NULL,
[avg_fragment_size_in_pages] [float] NULL,
[page_count] [bigint] NULL,
[avg_page_space_used_in_percent] [float] NULL,
[record_count] [bigint] NULL,
[ghost_record_count] [bigint] NULL,
[version_ghost_record_count] [bigint] NULL,
[min_record_size_in_bytes] [int] NULL,
[max_record_size_in_bytes] [int] NULL,
[avg_record_size_in_bytes] [float] NULL,
[forwarded_record_count] [bigint] NULL,
[compressed_page_count] [bigint] NULL,
[hobt_id] [bigint] NOT NULL,
[columnstore_delete_buffer_state] [tinyint] NULL,
[columnstore_delete_buffer_state_desc] [nvarchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
CONSTRAINT [PK_SysIndexPhysicalStats] PRIMARY KEY NONCLUSTERED  ([database_id], [object_id], [index_id], [partition_number], [hobt_id], [alloc_unit_type_desc])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysMasterFiles]') IS NULL
CREATE TABLE [DOI].[SysMasterFiles]
(
[database_id] [int] NOT NULL,
[file_id] [int] NOT NULL,
[file_guid] [uniqueidentifier] NULL,
[type] [tinyint] NOT NULL,
[type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[data_space_id] [int] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[physical_name] [nvarchar] (260) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[state] [tinyint] NULL,
[state_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[size] [int] NOT NULL,
[max_size] [int] NOT NULL,
[growth] [int] NOT NULL,
[is_media_read_only] [bit] NOT NULL,
[is_read_only] [bit] NOT NULL,
[is_sparse] [bit] NOT NULL,
[is_percent_growth] [bit] NOT NULL,
[is_name_reserved] [bit] NOT NULL,
[create_lsn] [numeric] (25, 0) NULL,
[drop_lsn] [numeric] (25, 0) NULL,
[read_only_lsn] [numeric] (25, 0) NULL,
[read_write_lsn] [numeric] (25, 0) NULL,
[differential_base_lsn] [numeric] (25, 0) NULL,
[differential_base_guid] [uniqueidentifier] NULL,
[differential_base_time] [datetime] NULL,
[redo_start_lsn] [numeric] (25, 0) NULL,
[redo_start_fork_guid] [uniqueidentifier] NULL,
[redo_target_lsn] [numeric] (25, 0) NULL,
[redo_target_fork_guid] [uniqueidentifier] NULL,
[backup_lsn] [numeric] (25, 0) NULL,
[credential_id] [int] NULL,
CONSTRAINT [PK_SysMasterFiles] PRIMARY KEY NONCLUSTERED  ([database_id], [file_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysPartitionFunctions]') IS NULL
CREATE TABLE [DOI].[SysPartitionFunctions]
(
[database_id] [sys].[sysname] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[function_id] [int] NOT NULL,
[type] [char] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[fanout] [int] NOT NULL,
[boundary_value_on_right] [bit] NOT NULL,
[is_system] [bit] NOT NULL,
[create_date] [datetime] NOT NULL,
[modify_date] [datetime] NOT NULL,
CONSTRAINT [PK_SysPartitionFunctions] PRIMARY KEY NONCLUSTERED  ([database_id], [function_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysPartitionRangeValues]') IS NULL
CREATE TABLE [DOI].[SysPartitionRangeValues]
(
[database_id] [sys].[sysname] NOT NULL,
[function_id] [int] NOT NULL,
[boundary_id] [int] NOT NULL,
[parameter_id] [int] NOT NULL,
[value] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
CONSTRAINT [PK_SysPartitionRangeValues] PRIMARY KEY NONCLUSTERED  ([database_id], [function_id], [boundary_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysPartitions]') IS NULL
CREATE TABLE [DOI].[SysPartitions]
(
[database_id] [int] NOT NULL,
[partition_id] [bigint] NOT NULL,
[object_id] [int] NOT NULL,
[index_id] [int] NOT NULL,
[partition_number] [int] NOT NULL,
[hobt_id] [bigint] NOT NULL,
[rows] [bigint] NULL,
[filestream_filegroup_id] [smallint] NOT NULL,
[data_compression] [tinyint] NOT NULL,
[data_compression_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
CONSTRAINT [PK_SysPartitions] PRIMARY KEY NONCLUSTERED  ([database_id], [partition_id]),
CONSTRAINT [UQ_SysPartitions] UNIQUE NONCLUSTERED  ([database_id], [object_id], [index_id], [partition_number])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysPartitionSchemes]') IS NULL
CREATE TABLE [DOI].[SysPartitionSchemes]
(
[database_id] [sys].[sysname] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[data_space_id] [int] NOT NULL,
[type] [char] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_default] [bit] NULL,
[is_system] [bit] NULL,
[function_id] [int] NOT NULL,
CONSTRAINT [PK_SysPartitionSchemes] PRIMARY KEY NONCLUSTERED  ([function_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysSchemas]') IS NULL
CREATE TABLE [DOI].[SysSchemas]
(
[database_id] [int] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[schema_id] [int] NOT NULL,
[principal_id] [int] NULL,
CONSTRAINT [PK_SysSchemas] PRIMARY KEY NONCLUSTERED  ([database_id], [schema_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysStats]') IS NULL
CREATE TABLE [DOI].[SysStats]
(
[database_id] [int] NOT NULL,
[object_id] [int] NOT NULL,
[name] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[stats_id] [int] NOT NULL,
[auto_created] [bit] NULL,
[user_created] [bit] NULL,
[no_recompute] [bit] NULL,
[has_filter] [bit] NULL,
[filter_definition] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_temporary] [bit] NULL,
[is_incremental] [bit] NULL,
[column_list] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
CONSTRAINT [PK_SysStats] PRIMARY KEY NONCLUSTERED  ([database_id], [object_id], [stats_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysStatsColumns]') IS NULL
CREATE TABLE [DOI].[SysStatsColumns]
(
[database_id] [int] NOT NULL,
[object_id] [int] NOT NULL,
[stats_id] [int] NOT NULL,
[stats_column_id] [int] NOT NULL,
[column_id] [int] NOT NULL,
CONSTRAINT [PK_SysStatsColumns] PRIMARY KEY NONCLUSTERED  ([database_id], [object_id], [stats_id], [stats_column_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysTables]') IS NULL
CREATE TABLE [DOI].[SysTables]
(
[database_id] [int] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[object_id] [int] NOT NULL,
[principal_id] [int] NULL,
[schema_id] [int] NOT NULL,
[parent_object_id] [int] NOT NULL,
[type] [char] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[create_date] [datetime] NOT NULL,
[modify_date] [datetime] NOT NULL,
[is_ms_shipped] [bit] NOT NULL,
[is_published] [bit] NOT NULL,
[is_schema_published] [bit] NOT NULL,
[lob_data_space_id] [int] NOT NULL,
[filestream_data_space_id] [int] NULL,
[max_column_id_used] [int] NOT NULL,
[lock_on_bulk_load] [bit] NOT NULL,
[uses_ansi_nulls] [bit] NULL,
[is_replicated] [bit] NULL,
[has_replication_filter] [bit] NULL,
[is_merge_published] [bit] NULL,
[is_sync_tran_subscribed] [bit] NULL,
[has_unchecked_assembly_data] [bit] NOT NULL,
[text_in_row_limit] [int] NULL,
[large_value_types_out_of_row] [bit] NULL,
[is_tracked_by_cdc] [bit] NULL,
[lock_escalation] [tinyint] NULL,
[lock_escalation_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_filetable] [bit] NULL,
[is_memory_optimized] [bit] NULL,
[durability] [tinyint] NULL,
[durability_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[temporal_type] [tinyint] NULL,
[temporal_type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[history_table_id] [int] NULL,
[is_remote_data_archive_enabled] [bit] NULL,
[is_external] [bit] NOT NULL,
CONSTRAINT [PK_SysTables] PRIMARY KEY NONCLUSTERED  ([database_id], [schema_id], [object_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysTriggers]') IS NULL
CREATE TABLE [DOI].[SysTriggers]
(
[database_id] [int] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[object_id] [int] NOT NULL,
[parent_class] [tinyint] NOT NULL,
[parent_class_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[parent_id] [int] NOT NULL,
[type] [char] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[create_date] [datetime] NOT NULL,
[modify_date] [datetime] NOT NULL,
[is_ms_shipped] [bit] NOT NULL,
[is_disabled] [bit] NOT NULL,
[is_not_for_replication] [bit] NOT NULL,
[is_instead_of_trigger] [bit] NOT NULL,
CONSTRAINT [PK_SysTriggers] PRIMARY KEY NONCLUSTERED  ([database_id], [parent_id], [object_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysTypes]') IS NULL
CREATE TABLE [DOI].[SysTypes]
(
[DatabaseName] [sys].[sysname] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[system_type_id] [tinyint] NOT NULL,
[user_type_id] [int] NOT NULL,
[schema_id] [int] NOT NULL,
[principal_id] [int] NULL,
[max_length] [smallint] NOT NULL,
[precision] [tinyint] NOT NULL,
[scale] [tinyint] NOT NULL,
[collation_name] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_nullable] [bit] NULL,
[is_user_defined] [bit] NOT NULL,
[is_assembly_type] [bit] NOT NULL,
[default_object_id] [int] NOT NULL,
[rule_object_id] [int] NOT NULL,
[is_table_type] [bit] NOT NULL,
CONSTRAINT [PK_SysTypes] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [user_type_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysColumns]') IS NULL
CREATE TABLE [DOI].[SysColumns]
(
[database_id] [int] NOT NULL,
[object_id] [int] NOT NULL,
[name] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[column_id] [int] NOT NULL,
[system_type_id] [tinyint] NOT NULL,
[user_type_id] [int] NOT NULL,
[max_length] [smallint] NOT NULL,
[precision] [tinyint] NOT NULL,
[scale] [tinyint] NOT NULL,
[collation_name] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_nullable] [bit] NULL,
[is_ansi_padded] [bit] NOT NULL,
[is_rowguidcol] [bit] NOT NULL,
[is_identity] [bit] NOT NULL,
[is_computed] [bit] NOT NULL,
[is_filestream] [bit] NOT NULL,
[is_replicated] [bit] NULL,
[is_non_sql_subscribed] [bit] NULL,
[is_merge_published] [bit] NULL,
[is_dts_replicated] [bit] NULL,
[is_xml_document] [bit] NOT NULL,
[xml_collection_id] [int] NOT NULL,
[default_object_id] [int] NOT NULL,
[rule_object_id] [int] NOT NULL,
[is_sparse] [bit] NULL,
[is_column_set] [bit] NULL,
[generated_always_type] [tinyint] NULL,
[generated_always_type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[encryption_type] [int] NULL,
[encryption_type_desc] [nvarchar] (64) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[encryption_algorithm_name] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[column_encryption_key_id] [int] NULL,
[column_encryption_key_database_name] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[is_hidden] [bit] NULL,
[is_masked] [bit] NULL,
CONSTRAINT [PK_SysColumns] PRIMARY KEY NONCLUSTERED  ([database_id], [object_id], [column_id]),
INDEX [IDX_SysColumns_object_id] NONCLUSTERED ([object_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysAllocationUnits]') IS NULL
CREATE TABLE [DOI].[SysAllocationUnits]
(
[database_id] [int] NOT NULL,
[allocation_unit_id] [bigint] NOT NULL,
[type] [tinyint] NOT NULL,
[type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[container_id] [bigint] NOT NULL,
[data_space_id] [int] NULL,
[total_pages] [bigint] NOT NULL,
[used_pages] [bigint] NOT NULL,
[data_pages] [bigint] NOT NULL,
CONSTRAINT [PK_SysAllocationUnits] PRIMARY KEY NONCLUSTERED  ([database_id], [allocation_unit_id]),
CONSTRAINT [UQ_SysAllocationUnits] UNIQUE NONCLUSTERED  ([container_id], [data_space_id], [type])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[SysCheckConstraints]') IS NULL
CREATE TABLE [DOI].[SysCheckConstraints]
(
[database_id] [int] NOT NULL,
[name] [sys].[sysname] NOT NULL,
[object_id] [int] NOT NULL,
[principal_id] [int] NULL,
[schema_id] [int] NOT NULL,
[parent_object_id] [int] NOT NULL,
[type] [char] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[type_desc] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[create_date] [datetime] NOT NULL,
[modify_date] [datetime] NOT NULL,
[is_ms_shipped] [bit] NOT NULL,
[is_published] [bit] NOT NULL,
[is_schema_published] [bit] NOT NULL,
[is_disabled] [bit] NOT NULL,
[is_not_for_replication] [bit] NOT NULL,
[is_not_trusted] [bit] NOT NULL,
[parent_column_id] [int] NOT NULL,
[definition] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[uses_database_collation] [bit] NULL,
[is_system_named] [bit] NOT NULL,
CONSTRAINT [PK_SysCheckConstraints] PRIMARY KEY NONCLUSTERED  ([database_id], [object_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO

GO
------------------------ END INCREMENTAL MIGRATION: "Migrations\001_Metadata_System_Tables.sql" --------------------------


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\001_Metadata_System_Tables.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('34c17dd7-07bb-4639-9759-e17109d3ebbc' AS UNIQUEIDENTIFIER), 'DD7A330A7ABC30F14457B995FB3AA47FDF583689C17830D4D12E6CCBA177BB7A', 'Migrations\001_Metadata_System_Tables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\001_Metadata_System_Tables.sql", ID: {34c17dd7-07bb-4639-9759-e17109d3ebbc} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('18878c81-4559-467b-9b75-11e9da703880' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\002_Metadata_User_Tables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\002_Metadata_User_Tables.sql", ID: {18878c81-4559-467b-9b75-11e9da703880} *****';

GO


------------------------ BEGIN INCREMENTAL MIGRATION: "Migrations\002_Metadata_User_Tables.sql" --------------------------
GO
-- <Migration ID="18878c81-4559-467b-9b75-11e9da703880" TransactionHandling="Custom" />
GO
IF OBJECT_ID('[DOI].[Databases]') IS NULL
CREATE TABLE [DOI].[Databases]
(
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
CONSTRAINT [PK_Databases] PRIMARY KEY NONCLUSTERED  ([DatabaseName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[PartitionFunctions]') IS NULL
CREATE TABLE [DOI].[PartitionFunctions]
(
[DatabaseName] [sys].[sysname] NOT NULL,
[PartitionFunctionName] [sys].[sysname] NOT NULL,
[PartitionFunctionDataType] [sys].[sysname] NOT NULL,
[BoundaryInterval] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[NumOfFutureIntervals] [tinyint] NOT NULL,
[InitialDate] [date] NOT NULL,
[UsesSlidingWindow] [bit] NOT NULL,
[SlidingWindowSize] [smallint] NULL,
[IsDeprecated] [bit] NOT NULL,
[PartitionSchemeName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[NumOfCharsInSuffix] [tinyint] NULL,
[LastBoundaryDate] [date] NULL,
[NumOfTotalPartitionFunctionIntervals] [smallint] NULL,
[NumOfTotalPartitionSchemeIntervals] [smallint] NULL,
[MinValueOfDataType] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
CONSTRAINT [PK_PartitionFunctions] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [PartitionFunctionName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[Chk_PartitionFunctions_BoundaryInterval]') IS NULL
ALTER TABLE [DOI].[PartitionFunctions] ADD CONSTRAINT [Chk_PartitionFunctions_BoundaryInterval] CHECK (([BoundaryInterval]='Monthly' OR [BoundaryInterval]='Yearly'))
GO
IF OBJECT_ID('[DOI].[Chk_PartitionFunctions_SlidingWindow]') IS NULL
ALTER TABLE [DOI].[PartitionFunctions] ADD CONSTRAINT [Chk_PartitionFunctions_SlidingWindow] CHECK (([UsesSlidingWindow]=(1) AND [SlidingWindowSize] IS NOT NULL OR [UsesSlidingWindow]=(0) AND [SlidingWindowSize] IS NULL))
GO
IF OBJECT_ID('[DOI].[FK_PartitionFunctions_Databases]') IS NULL
ALTER TABLE [DOI].[PartitionFunctions] ADD CONSTRAINT [FK_PartitionFunctions_Databases] FOREIGN KEY ([DatabaseName]) REFERENCES [DOI].[Databases] ([DatabaseName])
GO
IF OBJECT_ID('[DOI].[FK_PartitionFunctions_Databases]') IS NOT NULL
ALTER TABLE [DOI].[PartitionFunctions] NOCHECK CONSTRAINT [FK_PartitionFunctions_Databases]
GO
IF OBJECT_ID('[DOI].[Tables]') IS NULL
CREATE TABLE [DOI].[Tables]
(
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[PartitionColumn] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Storage_Desired] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Storage_Actual] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[StorageType_Desired] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[StorageType_Actual] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[IntendToPartition] [bit] NOT NULL CONSTRAINT [Def_Tables_IntendToPartition] DEFAULT ((0)),
[ReadyToQueue] [bit] NOT NULL CONSTRAINT [Def_Tables_ReadyToQueue] DEFAULT ((0)),
[AreIndexesFragmented] [bit] NOT NULL CONSTRAINT [Def_Tables_AreIndexesFragmented] DEFAULT ((0)),
[AreIndexesBeingUpdated] [bit] NOT NULL CONSTRAINT [Def_Tables_AreIndexesBeingUpdated] DEFAULT ((0)),
[AreIndexesMissing] [bit] NOT NULL CONSTRAINT [Def_Tables_AreIndexesMissing] DEFAULT ((0)),
[IsClusteredIndexBeingDropped] [bit] NOT NULL CONSTRAINT [Def_Tables_IsClusteredIndexBeingDropped] DEFAULT ((0)),
[WhichUniqueConstraintIsBeingDropped] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_Tables_WhichUniqueConstraintIsBeingDropped] DEFAULT ('None'),
[IsStorageChanging] [bit] NOT NULL CONSTRAINT [Def_Tables_IsStorageChanging] DEFAULT ((0)),
[NeedsTransaction] [bit] NOT NULL CONSTRAINT [Def_Tables_NeedsTransaction] DEFAULT ((0)),
[AreStatisticsChanging] [bit] NOT NULL CONSTRAINT [Def_Tables_AreStatisticsChanging] DEFAULT ((0)),
[DSTriggerSQL] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[PKColumnList] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[PKColumnListJoinClause] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[ColumnListNoTypes] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[ColumnListWithTypes] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[UpdateColumnList] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[NewPartitionedPrepTableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[PartitionFunctionName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
CONSTRAINT [PK_Tables] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[Chk_Tables_PartitioningSetup]') IS NULL
ALTER TABLE [DOI].[Tables] ADD CONSTRAINT [Chk_Tables_PartitioningSetup] CHECK (([IntendToPartition]=(1) AND [PartitionColumn] IS NOT NULL OR [IntendToPartition]=(0) AND [PartitionColumn] IS NULL))
GO
IF OBJECT_ID('[DOI].[FK_Tables_Databases]') IS NULL
ALTER TABLE [DOI].[Tables] ADD CONSTRAINT [FK_Tables_Databases] FOREIGN KEY ([DatabaseName]) REFERENCES [DOI].[Databases] ([DatabaseName])
GO
IF OBJECT_ID('[DOI].[FK_Tables_Databases]') IS NOT NULL
ALTER TABLE [DOI].[Tables] NOCHECK CONSTRAINT [FK_Tables_Databases]
GO

IF OBJECT_ID('[DOI].[CheckConstraints]') IS NULL
CREATE TABLE [DOI].[CheckConstraints]
(
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[ColumnName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[CheckDefinition] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IsDisabled] [bit] NOT NULL,
[CheckConstraintName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
CONSTRAINT [PK_CheckConstraints] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [CheckConstraintName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[FK_CheckConstraints_Tables]') IS NULL
ALTER TABLE [DOI].[CheckConstraints] ADD CONSTRAINT [FK_CheckConstraints_Tables] FOREIGN KEY ([DatabaseName], [SchemaName], [TableName]) REFERENCES [DOI].[Tables] ([DatabaseName], [SchemaName], [TableName])
GO
IF OBJECT_ID('[DOI].[FK_CheckConstraints_Tables]') IS NOT NULL
ALTER TABLE [DOI].[CheckConstraints] NOCHECK CONSTRAINT [FK_CheckConstraints_Tables]
GO
IF OBJECT_ID('[DOI].[DefaultConstraints]') IS NULL
CREATE TABLE [DOI].[DefaultConstraints]
(
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[ColumnName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[DefaultDefinition] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[DefaultConstraintName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
CONSTRAINT [PK_DefaultConstraints] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [ColumnName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[FK_DefaultConstraints_Tables]') IS NULL
ALTER TABLE [DOI].[DefaultConstraints] ADD CONSTRAINT [FK_DefaultConstraints_Tables] FOREIGN KEY ([DatabaseName], [SchemaName], [TableName]) REFERENCES [DOI].[Tables] ([DatabaseName], [SchemaName], [TableName])
GO
IF OBJECT_ID('[DOI].[FK_DefaultConstraints_Tables]') IS NOT NULL
ALTER TABLE [DOI].[DefaultConstraints] NOCHECK CONSTRAINT [FK_DefaultConstraints_Tables]
GO
IF OBJECT_ID('[DOI].[ForeignKeys]') IS NULL
CREATE TABLE [DOI].[ForeignKeys]
(
[DatabaseName] [sys].[sysname] NOT NULL,
[ParentSchemaName] [sys].[sysname] NOT NULL,
[ParentTableName] [sys].[sysname] NOT NULL,
[ParentColumnList_Desired] [sys].[sysname] NOT NULL,
[ReferencedSchemaName] [sys].[sysname] NOT NULL,
[ReferencedTableName] [sys].[sysname] NOT NULL,
[ReferencedColumnList_Desired] [sys].[sysname] NOT NULL,
[ParentColumnList_Actual] [varchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[ReferencedColumnList_Actual] [varchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[DeploymentTime] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
CONSTRAINT [PK_ForeignKeys] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [ParentSchemaName], [ParentTableName], [ParentColumnList_Desired], [ReferencedSchemaName], [ReferencedTableName], [ReferencedColumnList_Desired])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[FK_ForeignKeys_ParentTables]') IS NULL
ALTER TABLE [DOI].[ForeignKeys] ADD CONSTRAINT [FK_ForeignKeys_ParentTables] FOREIGN KEY ([DatabaseName], [ParentSchemaName], [ParentTableName]) REFERENCES [DOI].[Tables] ([DatabaseName], [SchemaName], [TableName])
GO
IF OBJECT_ID('[DOI].[FK_ForeignKeys_ReferencedTables]') IS NULL
ALTER TABLE [DOI].[ForeignKeys] ADD CONSTRAINT [FK_ForeignKeys_ReferencedTables] FOREIGN KEY ([DatabaseName], [ReferencedSchemaName], [ReferencedTableName]) REFERENCES [DOI].[Tables] ([DatabaseName], [SchemaName], [TableName])
GO
IF OBJECT_ID('[DOI].[FK_ForeignKeys_ParentTables]') IS NOT NULL
ALTER TABLE [DOI].[ForeignKeys] NOCHECK CONSTRAINT [FK_ForeignKeys_ParentTables]
GO
IF OBJECT_ID('[DOI].[FK_ForeignKeys_ReferencedTables]') IS NOT NULL
ALTER TABLE [DOI].[ForeignKeys] NOCHECK CONSTRAINT [FK_ForeignKeys_ReferencedTables]
GO
IF OBJECT_ID('[DOI].[IndexesColumnStore]') IS NULL
CREATE TABLE [DOI].[IndexesColumnStore]
(
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IndexName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IsIndexMissingFromSQLServer] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_IsIndexMissingFromSQLServer] DEFAULT ((0)),
[IsClustered_Desired] [bit] NOT NULL,
[IsClustered_Actual] [bit] NULL,
[ColumnList_Desired] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[ColumnList_Actual] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[IsFiltered_Desired] [bit] NOT NULL,
[IsFiltered_Actual] [bit] NULL,
[FilterPredicate_Desired] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[FilterPredicate_Actual] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[OptionDataCompression_Desired] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_IndexesColumnStore_OptionDataCompression] DEFAULT ('COLUMNSTORE'),
[OptionDataCompression_Actual] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[OptionDataCompressionDelay_Desired] [int] NOT NULL,
[OptionDataCompressionDelay_Actual] [int] NULL,
[Storage_Desired] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Storage_Actual] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[StorageType_Desired] [nvarchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[StorageType_Actual] [nvarchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[PartitionFunction_Desired] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[PartitionFunction_Actual] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[PartitionColumn_Desired] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[PartitionColumn_Actual] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[AllColsInTableSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesColumnStore_AllColsInTableSize_Estimated] DEFAULT ((0)),
[NumFixedCols_Estimated] [smallint] NOT NULL CONSTRAINT [Def_IndexesColumnStore_NumFixedCols_Estimated] DEFAULT ((0)),
[NumVarCols_Estimated] [smallint] NOT NULL CONSTRAINT [Def_IndexesColumnStore_NumVarCols_Estimated] DEFAULT ((0)),
[NumCols_Estimated] [smallint] NOT NULL CONSTRAINT [Def_IndexesColumnStore_NumCols_Estimated] DEFAULT ((0)),
[FixedColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesColumnStore_FixedColsSize_Estimated] DEFAULT ((0)),
[VarColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesColumnStore_VarColsSize_Estimated] DEFAULT ((0)),
[ColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesColumnStore_ColsSize_Estimated] DEFAULT ((0)),
[NumRows_Actual] [bigint] NOT NULL CONSTRAINT [Def_IndexesColumnStore_NumRows_Actual] DEFAULT ((0)),
[IndexSizeMB_Actual] [decimal] (10, 2) NOT NULL CONSTRAINT [Def_IndexesColumnStore_IndexSizeMB_Actual] DEFAULT ((0)),
[DriveLetter] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[IsIndexLarge] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_IsIndexLarge] DEFAULT ((0)),
[IndexMeetsMinimumSize] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_IndexMeetsMinimumSize] DEFAULT ((0)),
[Fragmentation] [float] NOT NULL CONSTRAINT [Def_IndexesColumnStore_Fragmentation] DEFAULT ((0)),
[FragmentationType] [varchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_IndexesColumnStore_FragmentationType] DEFAULT ('None'),
[AreDropRecreateOptionsChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_AreDropRecreateOptionsChanging] DEFAULT ((0)),
[AreRebuildOptionsChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_AreRebuildOptionsChanging] DEFAULT ((0)),
[AreRebuildOnlyOptionsChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_AreRebuildOnlyOptionsChanging] DEFAULT ((0)),
[AreReorgOptionsChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_AreReorgOptionsChanging] DEFAULT ((0)),
[AreSetOptionsChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_AreSetOptionsChanging] DEFAULT ((0)),
[IsColumnListChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_IsColumnListChanging] DEFAULT ((0)),
[IsFilterChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_IsFilterChanging] DEFAULT ((0)),
[IsClusteredChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_IsClusteredChanging] DEFAULT ((0)),
[IsPartitioningChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_IsPartitioningChanging] DEFAULT ((0)),
[IsDataCompressionChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_IsDataCompressionChanging] DEFAULT ((0)),
[IsDataCompressionDelayChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_IsDataCompressionDelayChanging] DEFAULT ((0)),
[IsStorageChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_IsStorageChanging] DEFAULT ((0)),
[NumPages_Actual] [int] NULL CONSTRAINT [Def_IndexesColumnStore_NumPages_Actual] DEFAULT ((0)),
[TotalPartitionsInIndex] [int] NOT NULL CONSTRAINT [Def_IndexesColumnStore_TotalPartitionsInIndex] DEFAULT ((0)),
[NeedsPartitionLevelOperations] [bit] NOT NULL CONSTRAINT [Def_IndexesColumnStore_NeedsPartitionLevelOperations] DEFAULT ((0)),
CONSTRAINT [PK_IndexesColumnStore] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [IndexName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[Chk_IndexesColumnStore_AreReorgOptionsChanging]') IS NULL
ALTER TABLE [DOI].[IndexesColumnStore] ADD CONSTRAINT [Chk_IndexesColumnStore_AreReorgOptionsChanging] CHECK (([AreReorgOptionsChanging]=(0)))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesColumnStore_AreSetOptionsChanging]') IS NULL
ALTER TABLE [DOI].[IndexesColumnStore] ADD CONSTRAINT [Chk_IndexesColumnStore_AreSetOptionsChanging] CHECK (([AreSetOptionsChanging]=(0)))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesColumnStore_Filter]') IS NULL
ALTER TABLE [DOI].[IndexesColumnStore] ADD CONSTRAINT [Chk_IndexesColumnStore_Filter] CHECK (([IsFiltered_Desired]=(1) AND [FilterPredicate_Desired] IS NOT NULL AND [IsClustered_Desired]=(0) OR [IsFiltered_Desired]=(0) AND [FilterPredicate_Desired] IS NULL))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesColumnStore_FragmentationType]') IS NULL
ALTER TABLE [DOI].[IndexesColumnStore] ADD CONSTRAINT [Chk_IndexesColumnStore_FragmentationType] CHECK (([FragmentationType]='Heavy' OR [FragmentationType]='Light' OR [FragmentationType]='None'))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesColumnStore_OptionDataCompression]') IS NULL
ALTER TABLE [DOI].[IndexesColumnStore] ADD CONSTRAINT [Chk_IndexesColumnStore_OptionDataCompression] CHECK (([OptionDataCompression_Desired]='COLUMNSTORE_ARCHIVE' OR [OptionDataCompression_Desired]='COLUMNSTORE'))
GO
IF OBJECT_ID('[DOI].[Def_IndexesColumnStore_StorageType_Actual]') IS NULL
ALTER TABLE [DOI].[IndexesColumnStore] ADD CONSTRAINT [Def_IndexesColumnStore_StorageType_Actual] CHECK (([StorageType_Actual]='PARTITION_SCHEME' OR [StorageType_Actual]='ROWS_FILEGROUP'))
GO
IF OBJECT_ID('[DOI].[Def_IndexesColumnStore_StorageType_Desired]') IS NULL
ALTER TABLE [DOI].[IndexesColumnStore] ADD CONSTRAINT [Def_IndexesColumnStore_StorageType_Desired] CHECK (([StorageType_Desired]='PARTITION_SCHEME' OR [StorageType_Desired]='ROWS_FILEGROUP'))
GO
IF OBJECT_ID('[DOI].[FK_IndexesColumnStore_Tables]') IS NULL
ALTER TABLE [DOI].[IndexesColumnStore] ADD CONSTRAINT [FK_IndexesColumnStore_Tables] FOREIGN KEY ([DatabaseName], [SchemaName], [TableName]) REFERENCES [DOI].[Tables] ([DatabaseName], [SchemaName], [TableName])
GO
IF OBJECT_ID('[DOI].[FK_IndexesColumnStore_Tables]') IS NOT NULL
ALTER TABLE [DOI].[IndexesColumnStore] NOCHECK CONSTRAINT [FK_IndexesColumnStore_Tables]
GO


IF OBJECT_ID('[DOI].[IndexesRowStore]') IS NULL
CREATE TABLE [DOI].[IndexesRowStore]
(
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IndexName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IsIndexMissingFromSQLServer] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsIndexMissingFromSQLServer] DEFAULT ((0)),
[IsUnique_Desired] [bit] NOT NULL,
[IsUnique_Actual] [bit] NULL,
[IsPrimaryKey_Desired] [bit] NOT NULL,
[IsPrimaryKey_Actual] [bit] NULL,
[IsUniqueConstraint_Desired] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsUniqueConstraint_Desired] DEFAULT ((0)),
[IsUniqueConstraint_Actual] [bit] NULL,
[IsClustered_Desired] [bit] NOT NULL,
[IsClustered_Actual] [bit] NULL,
[KeyColumnList_Desired] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[KeyColumnList_Actual] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[IncludedColumnList_Desired] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[IncludedColumnList_Actual] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[IsFiltered_Desired] [bit] NOT NULL,
[IsFiltered_Actual] [bit] NULL,
[FilterPredicate_Desired] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[FilterPredicate_Actual] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Fillfactor_Desired] [tinyint] NOT NULL CONSTRAINT [Def_Indexes_FillFactor_Desired] DEFAULT ((90)),
[Fillfactor_Actual] [tinyint] NULL,
[OptionPadIndex_Desired] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_OptionPadIndex_Desired] DEFAULT ((1)),
[OptionPadIndex_Actual] [bit] NULL,
[OptionStatisticsNoRecompute_Desired] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_OptionStatisticsNoRecompute_Desired] DEFAULT ((0)),
[OptionStatisticsNoRecompute_Actual] [bit] NULL,
[OptionStatisticsIncremental_Desired] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_OptionStatisticsIncremental_Desired] DEFAULT ((0)),
[OptionStatisticsIncremental_Actual] [bit] NULL,
[OptionIgnoreDupKey_Desired] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_OptionIgnoreDupKey_Desired] DEFAULT ((0)),
[OptionIgnoreDupKey_Actual] [bit] NULL,
[OptionResumable_Desired] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_OptionResumable_Desired] DEFAULT ((0)),
[OptionResumable_Actual] [bit] NULL,
[OptionMaxDuration_Desired] [smallint] NOT NULL CONSTRAINT [Def_IndexesRowStore_OptionMaxDuration_Desired] DEFAULT ((0)),
[OptionMaxDuration_Actual] [smallint] NULL,
[OptionAllowRowLocks_Desired] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_OptionAllowRowLocks_Desired] DEFAULT ((1)),
[OptionAllowRowLocks_Actual] [bit] NULL,
[OptionAllowPageLocks_Desired] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_OptionAllowPageLocks_Desired] DEFAULT ((1)),
[OptionAllowPageLocks_Actual] [bit] NULL,
[OptionDataCompression_Desired] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_IndexesRowStore_OptionDataCompression_Desired] DEFAULT ('PAGE'),
[OptionDataCompression_Actual] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[OptionDataCompressionDelay_Desired] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_OptionDataCompressionDelay_Desired] DEFAULT ((0)),
[OptionDataCompressionDelay_Actual] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_OptionDataCompressionDelay_Actual] DEFAULT ((0)),
[Storage_Desired] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Storage_Actual] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[StorageType_Desired] [nvarchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[StorageType_Actual] [nvarchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[PartitionFunction_Desired] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[PartitionFunction_Actual] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[PartitionColumn_Desired] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[PartitionColumn_Actual] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[NumRows_Actual] [bigint] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumRows_Actual] DEFAULT ((0)),
[AllColsInTableSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_AllColsInTableSize_Estimated] DEFAULT ((0)),
[NumFixedKeyCols_Estimated] [smallint] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumFixedKeyCols_Estimated] DEFAULT ((0)),
[NumVarKeyCols_Estimated] [smallint] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumVarKeyCols_Estimated] DEFAULT ((0)),
[NumKeyCols_Estimated] [smallint] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumKeyCols_Estimated] DEFAULT ((0)),
[NumFixedInclCols_Estimated] [smallint] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumFixedInclCols_Estimated] DEFAULT ((0)),
[NumVarInclCols_Estimated] [smallint] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumVarInclCols_Estimated] DEFAULT ((0)),
[NumInclCols_Estimated] [smallint] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumInclCols_Estimated] DEFAULT ((0)),
[NumFixedCols_Estimated] [smallint] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumFixedCols_Estimated] DEFAULT ((0)),
[NumVarCols_Estimated] [smallint] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumVarCols_Estimated] DEFAULT ((0)),
[NumCols_Estimated] [smallint] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumCols_Estimated] DEFAULT ((0)),
[FixedKeyColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_FixedKeyColsSize_Estimated] DEFAULT ((0)),
[VarKeyColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_VarKeyColsSize_Estimated] DEFAULT ((0)),
[KeyColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_KeyColsSize_Estimated] DEFAULT ((0)),
[FixedInclColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_FixedInclColsSize_Estimated] DEFAULT ((0)),
[VarInclColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_VarInclColsSize_Estimated] DEFAULT ((0)),
[InclColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_InclColsSize_Estimated] DEFAULT ((0)),
[FixedColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_FixedColsSize_Estimated] DEFAULT ((0)),
[VarColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_VarColsSize_Estimated] DEFAULT ((0)),
[ColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_ColsSize_Estimated] DEFAULT ((0)),
[PKColsSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_PKColsSize_Estimated] DEFAULT ((0)),
[NullBitmap_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_NullBitmap_Estimated] DEFAULT ((0)),
[Uniqueifier_Estimated] [tinyint] NOT NULL CONSTRAINT [Def_IndexesRowStore_Uniqueifier_Estimated] DEFAULT ((0)),
[TotalRowSize_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_TotalRowSize_Estimated] DEFAULT ((0)),
[NonClusteredIndexRowLocator_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_NonClusteredIndexRowLocator_Estimated] DEFAULT ((0)),
[NumRowsPerPage_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumRowsPerPage_Estimated] DEFAULT ((0)),
[NumFreeRowsPerPage_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumFreeRowsPerPage_Estimated] DEFAULT ((0)),
[NumLeafPages_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumLeafPages_Estimated] DEFAULT ((0)),
[LeafSpaceUsed_Estimated] [decimal] (18, 2) NOT NULL CONSTRAINT [Def_IndexesRowStore_LeafSpaceUsed_Estimated] DEFAULT ((0)),
[LeafSpaceUsedMB_Estimated] [decimal] (10, 2) NOT NULL CONSTRAINT [Def_IndexesRowStore_LeafSpaceUsedMB_Estimated] DEFAULT ((0)),
[NumNonLeafLevelsInIndex_Estimated] [tinyint] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumNonLeafLevelsInIndex_Estimated] DEFAULT ((0)),
[NumIndexPages_Estimated] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumIndexPages_Estimated] DEFAULT ((0)),
[IndexSizeMB_Estimated] [decimal] (10, 2) NOT NULL CONSTRAINT [Def_IndexesRowStore_IndexSizeMB_Estimated] DEFAULT ((0)),
[IndexSizeMB_Actual] [decimal] (10, 2) NOT NULL CONSTRAINT [Def_IndexesRowStore_IndexSizeMB_Actual] DEFAULT ((0)),
[DriveLetter] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[IsIndexLarge] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsIndexLarge] DEFAULT ((0)),
[IndexMeetsMinimumSize] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IndexMeetsMinimumSize] DEFAULT ((0)),
[Fragmentation] [float] NOT NULL CONSTRAINT [Def_IndexesRowStore_Fragmentation] DEFAULT ((0)),
[FragmentationType] [varchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_IndexesRowStore_FragmentationType] DEFAULT ('None'),
[AreDropRecreateOptionsChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_AreDropRecreateOptionsChanging] DEFAULT ((0)),
[AreRebuildOptionsChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_AreRebuildOptionsChanging] DEFAULT ((0)),
[AreRebuildOnlyOptionsChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_AreRebuildOnlyOptionsChanging] DEFAULT ((0)),
[AreReorgOptionsChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_AreReorgOptionsChanging] DEFAULT ((0)),
[AreSetOptionsChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_AreSetOptionsChanging] DEFAULT ((0)),
[IsUniquenessChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsUniquenessChanging] DEFAULT ((0)),
[IsPrimaryKeyChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsPrimaryKeyChanging] DEFAULT ((0)),
[IsKeyColumnListChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsKeyColumnListChanging] DEFAULT ((0)),
[IsIncludedColumnListChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsIncludedColumnListChanging] DEFAULT ((0)),
[IsFilterChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsFilterChanging] DEFAULT ((0)),
[IsClusteredChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsClusteredChanging] DEFAULT ((0)),
[IsPartitioningChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsPartitioningChanging] DEFAULT ((0)),
[IsPadIndexChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsPadIndexChanging] DEFAULT ((0)),
[IsFillfactorChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsFillfactorChanging] DEFAULT ((0)),
[IsIgnoreDupKeyChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsIgnoreDupKeyChanging] DEFAULT ((0)),
[IsStatisticsNoRecomputeChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsStatisticsNoRecomputeChanging] DEFAULT ((0)),
[IsStatisticsIncrementalChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsStatisticsIncrementalChanging] DEFAULT ((0)),
[IsAllowRowLocksChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsAllowRowLocksChanging] DEFAULT ((0)),
[IsAllowPageLocksChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsAllowPageLocksChanging] DEFAULT ((0)),
[IsDataCompressionChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsDataCompressionChanging] DEFAULT ((0)),
[IsDataCompressionDelayChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsDataCompressionDelayChanging] DEFAULT ((0)),
[IsStorageChanging] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IsStorageChanging] DEFAULT ((0)),
[IndexHasLOBColumns] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_IndexHasLOBColumns] DEFAULT ((0)),
[NumPages_Actual] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_NumPages_Actual] DEFAULT ((0)),
[TotalPartitionsInIndex] [int] NOT NULL CONSTRAINT [Def_IndexesRowStore_TotalPartitionsInIndex] DEFAULT ((0)),
[NeedsPartitionLevelOperations] [bit] NOT NULL CONSTRAINT [Def_IndexesRowStore_NeedsPartitionLevelOperations] DEFAULT ((0)),
CONSTRAINT [PK_IndexesRowStore] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [IndexName]),
INDEX [IDX_IndexesRowStore_IndexName] NONCLUSTERED ([IndexName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[Chk_IndexesRowStore_Filter]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Chk_IndexesRowStore_Filter] CHECK (([IsFiltered_Desired]=(1) AND [FilterPredicate_Desired] IS NOT NULL AND [IsPrimaryKey_Desired]=(0) AND [IsUniqueConstraint_Desired]=(0) AND [IsClustered_Desired]=(0) AND [OptionStatisticsIncremental_Desired]=(0) OR [IsFiltered_Desired]=(0) AND [FilterPredicate_Desired] IS NULL))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesRowStore_FragmentationType]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Chk_IndexesRowStore_FragmentationType] CHECK (([FragmentationType]='Heavy' OR [FragmentationType]='Light' OR [FragmentationType]='None'))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesRowStore_IncludedColumnsNotAllowed]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Chk_IndexesRowStore_IncludedColumnsNotAllowed] CHECK ((([IncludedColumnList_Desired] IS NOT NULL AND [IsClustered_Desired]=(0) AND [IsPrimaryKey_Desired]=(0) AND [IsUniqueConstraint_Desired]=(0)) OR [IncludedColumnList_Desired] IS NULL))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesRowStore_IsUniqueConstraint_Desired]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Chk_IndexesRowStore_IsUniqueConstraint_Desired] CHECK (([IsUniqueConstraint_Desired]=(0)))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesRowStore_OptionDataCompressionDelay_Actual]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Chk_IndexesRowStore_OptionDataCompressionDelay_Actual] CHECK (([OptionDataCompressionDelay_Actual]=(0)))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesRowStore_OptionDataCompressionDelay_Desired]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Chk_IndexesRowStore_OptionDataCompressionDelay_Desired] CHECK (([OptionDataCompressionDelay_Desired]=(0)))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesRowStore_OptionDataCompression_Desired]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Chk_IndexesRowStore_OptionDataCompression_Desired] CHECK (([OptionDataCompression_Desired]='PAGE' OR [OptionDataCompression_Desired]='ROW' OR [OptionDataCompression_Desired]='NONE'))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesRowStore_PKvsUQ]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Chk_IndexesRowStore_PKvsUQ] CHECK (([IsPrimaryKey_Desired]=(1) AND [IsUniqueConstraint_Desired]=(0) OR [IsPrimaryKey_Desired]=(0) AND [IsUniqueConstraint_Desired]=(1) OR [IsPrimaryKey_Desired]=(0) AND [IsUniqueConstraint_Desired]=(0)))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesRowStore_PrimaryKeyIsUnique]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Chk_IndexesRowStore_PrimaryKeyIsUnique] CHECK ((([IsPrimaryKey_Desired]=(1) AND [IsUnique_Desired]=(1)) OR [IsPrimaryKey_Desired]=(0)))
GO
IF OBJECT_ID('[DOI].[Chk_IndexesRowStore_UniqueConstraintIsUnique]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Chk_IndexesRowStore_UniqueConstraintIsUnique] CHECK ((([IsUniqueConstraint_Desired]=(1) AND [IsUnique_Desired]=(1)) OR [IsUniqueConstraint_Desired]=(0)))
GO
IF OBJECT_ID('[DOI].[Chk_Indexes_FillFactor_Desired]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Chk_Indexes_FillFactor_Desired] CHECK (([Fillfactor_Desired]>=(0) AND [Fillfactor_Desired]<=(100)))
GO
IF OBJECT_ID('[DOI].[Def_IndexesRowStore_StorageType_Actual]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Def_IndexesRowStore_StorageType_Actual] CHECK (([StorageType_Actual]='PARTITION_SCHEME' OR [StorageType_Actual]='ROWS_FILEGROUP'))
GO
IF OBJECT_ID('[DOI].[Def_IndexesRowStore_StorageType_Desired]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [Def_IndexesRowStore_StorageType_Desired] CHECK (([StorageType_Desired]='PARTITION_SCHEME' OR [StorageType_Desired]='ROWS_FILEGROUP'))
GO
IF OBJECT_ID('[DOI].[FK_IndexesRowStore_Tables]') IS NULL
ALTER TABLE [DOI].[IndexesRowStore] ADD CONSTRAINT [FK_IndexesRowStore_Tables] FOREIGN KEY ([DatabaseName], [SchemaName], [TableName]) REFERENCES [DOI].[Tables] ([DatabaseName], [SchemaName], [TableName])
GO
IF OBJECT_ID('[DOI].[FK_IndexesRowStore_Tables]') IS NOT NULL
ALTER TABLE [DOI].[IndexesRowStore] NOCHECK CONSTRAINT [FK_IndexesRowStore_Tables]
GO
IF OBJECT_ID('[DOI].[IndexColumnStorePartitions]') IS NULL
CREATE TABLE [DOI].[IndexColumnStorePartitions]
(
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IndexName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[PartitionNumber] [smallint] NOT NULL,
[OptionDataCompression] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_IndexColumnStorePartitions_OptionDataCompression] DEFAULT ('COLUMNSTORE'),
CONSTRAINT [PK_IndexColumnStorePartitions] PRIMARY KEY NONCLUSTERED  ([SchemaName], [TableName], [IndexName], [PartitionNumber])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[Chk_IndexColumnStorePartitions_OptionDataCompression]') IS NULL
ALTER TABLE [DOI].[IndexColumnStorePartitions] ADD CONSTRAINT [Chk_IndexColumnStorePartitions_OptionDataCompression] CHECK (([OptionDataCompression]='COLUMNSTORE_ARCHIVE' OR [OptionDataCompression]='COLUMNSTORE'))
GO
IF OBJECT_ID('[DOI].[FK_IndexColumnStorePartitions_IndexesColumnStore]') IS NULL
ALTER TABLE [DOI].[IndexColumnStorePartitions] ADD CONSTRAINT [FK_IndexColumnStorePartitions_IndexesColumnStore] FOREIGN KEY ([DatabaseName], [SchemaName], [TableName], [IndexName]) REFERENCES [DOI].[IndexesColumnStore] ([DatabaseName], [SchemaName], [TableName], [IndexName])
GO
IF OBJECT_ID('[DOI].[FK_IndexColumnStorePartitions_IndexesColumnStore]') IS NOT NULL
ALTER TABLE [DOI].[IndexColumnStorePartitions] NOCHECK CONSTRAINT [FK_IndexColumnStorePartitions_IndexesColumnStore]
GO
IF OBJECT_ID('[DOI].[IndexRowStorePartitions]') IS NULL
CREATE TABLE [DOI].[IndexRowStorePartitions]
(
[DatabaseName] [NVARCHAR] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [NVARCHAR] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [NVARCHAR] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IndexName] [NVARCHAR] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[PartitionNumber] [SMALLINT] NOT NULL,
[OptionResumable] [BIT] NOT NULL CONSTRAINT [Def_IndexRowStorePartitions_OptionResumable] DEFAULT ((0)),
[OptionMaxDuration] [SMALLINT] NOT NULL CONSTRAINT [Def_IndexRowStorePartitions_OptionMaxDuration] DEFAULT ((0)),
[OptionDataCompression] [NVARCHAR] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_IndexRowStorePartitions_OptionDataCompression] DEFAULT ('PAGE'),
[NumRows] [BIGINT] NOT NULL CONSTRAINT [Def_IndexRowStorePartitions_NumRows] DEFAULT ((0)),
[TotalPages] [BIGINT] NOT NULL CONSTRAINT [Def_IndexRowStorePartitions_TotalPages] DEFAULT ((0)),
[PartitionType] [VARCHAR] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_IndexRowStorePartitions_PartitionType] DEFAULT ('RowStore'),
[TotalIndexPartitionSizeInMB] [DECIMAL] (10, 2) NOT NULL CONSTRAINT [Def_IndexRowStorePartitions_TotalIndexPartitionSizeInMB] DEFAULT ((0.00)),
[Fragmentation] [FLOAT] NOT NULL CONSTRAINT [Def_IndexRowStorePartitions_Fragmentation] DEFAULT ((0)),
[DataFileName] [NVARCHAR] (260) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_IndexRowStorePartitions_DataFileName] DEFAULT (''),
[DriveLetter] [CHAR] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_IndexRowStorePartitions_DriveLetter] DEFAULT (''),
[PartitionUpdateType] [VARCHAR] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_IndexRowStorePartitions_PartitionUpdateType] DEFAULT ('None'),
CONSTRAINT [PK_IndexRowStorePartitions] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [IndexName], [PartitionNumber])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[Chk_IndexRowStorePartitions_OptionDataCompression]') IS NULL
ALTER TABLE [DOI].[IndexRowStorePartitions] ADD CONSTRAINT [Chk_IndexRowStorePartitions_OptionDataCompression] CHECK (([OptionDataCompression]='PAGE' OR [OptionDataCompression]='ROW' OR [OptionDataCompression]='NONE'))
GO
IF OBJECT_ID('[DOI].[Chk_IndexRowStorePartitions_PartitionType]') IS NULL
ALTER TABLE [DOI].[IndexRowStorePartitions] ADD CONSTRAINT [Chk_IndexRowStorePartitions_PartitionType] CHECK (([PartitionType]='RowStore'))
GO
IF OBJECT_ID('[DOI].[FK_IndexRowStorePartitions_IndexesRowStore]') IS NULL
ALTER TABLE [DOI].[IndexRowStorePartitions] ADD CONSTRAINT [FK_IndexRowStorePartitions_IndexesRowStore] FOREIGN KEY ([DatabaseName], [SchemaName], [TableName], [IndexName]) REFERENCES [DOI].[IndexesRowStore] ([DatabaseName], [SchemaName], [TableName], [IndexName])
GO
IF OBJECT_ID('[DOI].[FK_IndexRowStorePartitions_IndexesRowStore]') IS NOT NULL
ALTER TABLE [DOI].[IndexRowStorePartitions] NOCHECK CONSTRAINT [FK_IndexRowStorePartitions_IndexesRowStore]
GO
IF OBJECT_ID('[DOI].[Statistics]') IS NULL
CREATE TABLE [DOI].[Statistics]
(
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[StatisticsName] [sys].[sysname] NOT NULL,
[IsStatisticsMissingFromSQLServer] [bit] NOT NULL CONSTRAINT [Def_Statistics_IsStatisticsMissingFromSQLServer] DEFAULT ((0)),
[StatisticsColumnList_Desired] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[StatisticsColumnList_Actual] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[SampleSizePct_Desired] [tinyint] NOT NULL,
[SampleSizePct_Actual] [tinyint] NOT NULL CONSTRAINT [Def_Statistics_SampleSize_Actual] DEFAULT ((0)),
[IsFiltered_Desired] [bit] NOT NULL,
[IsFiltered_Actual] [bit] NOT NULL CONSTRAINT [Def_Statistics_IsFiltered_Actual] DEFAULT ((0)),
[FilterPredicate_Desired] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[FilterPredicate_Actual] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[IsIncremental_Desired] [bit] NOT NULL,
[IsIncremental_Actual] [bit] NOT NULL CONSTRAINT [Def_Statistics_IsIncremental_Actual] DEFAULT ((0)),
[NoRecompute_Desired] [bit] NOT NULL,
[NoRecompute_Actual] [bit] NOT NULL CONSTRAINT [Def_Statistics_NoRecompute_Actual] DEFAULT ((0)),
[LowerSampleSizeToDesired] [bit] NOT NULL,
[ReadyToQueue] [bit] NOT NULL CONSTRAINT [Def_Statistics_ReadyToQueue] DEFAULT ((0)),
[DoesSampleSizeNeedUpdate] [bit] NOT NULL CONSTRAINT [Def_Statistics_DoesSampleSizeNeedUpdate] DEFAULT ((0)),
[IsStatisticsMissing] [bit] NOT NULL CONSTRAINT [Def_Statistics_IsStatisticsMissing] DEFAULT ((0)),
[HasFilterChanged] [bit] NOT NULL CONSTRAINT [Def_Statistics_HasFilterChanged] DEFAULT ((0)),
[HasIncrementalChanged] [bit] NOT NULL CONSTRAINT [Def_Statistics_HasIncrementalChanged] DEFAULT ((0)),
[HasNoRecomputeChanged] [bit] NOT NULL CONSTRAINT [Def_Statistics_HasNoRecomputeChanged] DEFAULT ((0)),
[NumRowsInTableUnfiltered] [bigint] NULL,
[NumRowsInTableFiltered] [bigint] NULL,
[NumRowsSampled] [bigint] NULL,
[StatisticsLastUpdated] [datetime2] NULL,
[HistogramSteps] [int] NULL,
[StatisticsModCounter] [bigint] NULL,
[PersistedSamplePct] [float] NULL,
[StatisticsUpdateType] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_Statistics_StatisticsUpdateType] DEFAULT ('None'),
[ListOfChanges] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[IsOnlineOperation] [bit] NOT NULL CONSTRAINT [Def_Statistics_IsOnlineOperation] DEFAULT ((0)),
CONSTRAINT [PK_Statistics] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [StatisticsName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[Chk_Statistics_Filter]','C') IS NULL
ALTER TABLE [DOI].[Statistics] ADD CONSTRAINT [Chk_Statistics_Filter] CHECK (([IsFiltered_Desired]=(1) AND [FilterPredicate_Desired] IS NOT NULL OR [IsFiltered_Desired]=(0) AND [FilterPredicate_Desired] IS NULL))
GO
IF OBJECT_ID('[DOI].[Chk_Statistics_SampleSize_Actual]','C') IS NULL
ALTER TABLE [DOI].[Statistics] ADD CONSTRAINT [Chk_Statistics_SampleSize_Actual] CHECK (([SampleSizePct_Actual]>=(0) AND [SampleSizePct_Actual]<=(100)))
GO
IF OBJECT_ID('[DOI].[Chk_Statistics_SampleSize_Desired]','C') IS NULL
ALTER TABLE [DOI].[Statistics] ADD CONSTRAINT [Chk_Statistics_SampleSize_Desired] CHECK (([SampleSizePct_Desired]>=(0) AND [SampleSizePct_Desired]<=(100)))
GO
IF OBJECT_ID('[DOI].[FK_Statistics_Databases]','F') IS NULL
ALTER TABLE [DOI].[Statistics] ADD CONSTRAINT [FK_Statistics_Databases] FOREIGN KEY ([DatabaseName]) REFERENCES [DOI].[Databases] ([DatabaseName])
GO
IF OBJECT_ID('[DOI].[FK_Statistics_Databases]','F') IS NOT NULL
ALTER TABLE [DOI].[Statistics] NOCHECK CONSTRAINT [FK_Statistics_Databases]
GO
IF OBJECT_ID('[DOI].[IndexColumns]') IS NULL
CREATE TABLE [DOI].[IndexColumns]
(
[DatabaseName] [sys].[sysname] NOT NULL,
[SchemaName] [sys].[sysname] NOT NULL,
[TableName] [sys].[sysname] NOT NULL,
[IndexName] [sys].[sysname] NOT NULL,
[ColumnName] [sys].[sysname] NOT NULL,
[IsKeyColumn] [bit] NOT NULL,
[KeyColumnPosition] [smallint] NULL,
[IsIncludedColumn] [bit] NOT NULL,
[IncludedColumnPosition] [smallint] NULL,
[IsFixedSize] [bit] NOT NULL CONSTRAINT [Def_IndexColumns_IsFixedSize] DEFAULT ((0)),
[ColumnSize] [decimal] (10, 2) NOT NULL CONSTRAINT [Def_IndexColumns_ColumnSize] DEFAULT ((0)),
CONSTRAINT [PK_IndexColumns] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [IndexName], [ColumnName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
GO
------------------------- END INCREMENTAL MIGRATION: "Migrations\002_Metadata_User_Tables.sql" ---------------------------


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\002_Metadata_User_Tables.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('18878c81-4559-467b-9b75-11e9da703880' AS UNIQUEIDENTIFIER), 'BBF678579B9318CDFDC34146C5B0AE40E19EB8E1137CD133715FBAA4B1A935F1', 'Migrations\002_Metadata_User_Tables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\002_Metadata_User_Tables.sql", ID: {18878c81-4559-467b-9b75-11e9da703880} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b24fe523-c6f3-4b5c-b70c-b41d635e0248' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\003_NotInMetadata_Tables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\003_NotInMetadata_Tables.sql", ID: {b24fe523-c6f3-4b5c-b70c-b41d635e0248} *****';

GO


------------------------ BEGIN INCREMENTAL MIGRATION: "Migrations\003_NotInMetadata_Tables.sql" --------------------------
GO
-- <Migration ID="b24fe523-c6f3-4b5c-b70c-b41d635e0248" TransactionHandling="Custom" />
IF OBJECT_ID('[DOI].[IndexesNotInMetadata]') IS NULL
CREATE TABLE [DOI].[IndexesNotInMetadata]
(
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IndexName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[DateInserted] [datetime] NOT NULL CONSTRAINT [Def_IndexesNotInMetadata_DateInserted] DEFAULT (getdate()),
[DropSQLScript] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Ignore] [bit] NOT NULL CONSTRAINT [Def_IndexesNotInMetadata_Ignore] DEFAULT ((0)),
CONSTRAINT [PK_IndexesNotInMetadata] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [IndexName], [DateInserted])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF OBJECT_ID('[DOI].[DefaultConstraintsNotInMetadata]') IS NULL
CREATE TABLE [DOI].[DefaultConstraintsNotInMetadata]
(
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[ColumnName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[DefaultDefinition] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[DefaultConstraintName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
CONSTRAINT [PK_DefaultConstraintsNotInMetadata] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [ColumnName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO

IF OBJECT_ID('[DOI].[CheckConstraintsNotInMetadata]') IS NULL
CREATE TABLE [DOI].[CheckConstraintsNotInMetadata]
(
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[ColumnName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[CheckDefinition] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IsDisabled] [bit] NOT NULL,
[CheckConstraintName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
CONSTRAINT [PK_CheckConstraintsNotInMetadata] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [CheckConstraintName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO

GO
------------------------- END INCREMENTAL MIGRATION: "Migrations\003_NotInMetadata_Tables.sql" ---------------------------


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\003_NotInMetadata_Tables.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('b24fe523-c6f3-4b5c-b70c-b41d635e0248' AS UNIQUEIDENTIFIER), 'BDFC9ADFD1EA431C78C273A3B4F17C4D3DD6233A4B3783699E3811E808347D10', 'Migrations\003_NotInMetadata_Tables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\003_NotInMetadata_Tables.sql", ID: {b24fe523-c6f3-4b5c-b70c-b41d635e0248} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a554310f-9be4-40a7-8d38-9daace3f094c' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\004_DOISettings_Table.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\004_DOISettings_Table.sql", ID: {a554310f-9be4-40a7-8d38-9daace3f094c} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\004_DOISettings_Table.sql" ---------------------------
GO
-- <Migration ID="a554310f-9be4-40a7-8d38-9daace3f094c" TransactionHandling="Custom" />
IF OBJECT_ID('[DOI].[DOISettings]') IS NULL
CREATE TABLE [DOI].[DOISettings]
(
[DatabaseName] [sys].[sysname] NOT NULL,
[SettingName] [sys].[sysname] NOT NULL,
[SettingValue] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
CONSTRAINT [PK_DOISettings] PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SettingName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\004_DOISettings_Table.sql" ----------------------------


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\004_DOISettings_Table.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('a554310f-9be4-40a7-8d38-9daace3f094c' AS UNIQUEIDENTIFIER), '380F0F64C22D92C3D796A93E2D956439C0638EAB38A180B2BEEDBFF1E47E365F', 'Migrations\004_DOISettings_Table.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\004_DOISettings_Table.sql", ID: {a554310f-9be4-40a7-8d38-9daace3f094c} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('141260d1-5e71-4da3-b392-f8106a4568d5' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\005_Queue_and_Run_Tables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\005_Queue_and_Run_Tables.sql", ID: {141260d1-5e71-4da3-b392-f8106a4568d5} *****';

GO


------------------------ BEGIN INCREMENTAL MIGRATION: "Migrations\005_Queue_and_Run_Tables.sql" --------------------------
GO
-- <Migration ID="141260d1-5e71-4da3-b392-f8106a4568d5" TransactionHandling="Custom" />
GO
IF OBJECT_ID('[DOI].[Queue]') IS NULL
CREATE TABLE [DOI].[Queue]
(
[DatabaseName] [NVARCHAR] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [NVARCHAR] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [NVARCHAR] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IndexName] [NVARCHAR] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[PartitionNumber] [SMALLINT] NOT NULL CONSTRAINT [Def_Queue_PartitionNumber] DEFAULT ((1)),
[IndexSizeInMB] [INT] NOT NULL,
[ParentSchemaName] [NVARCHAR] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[ParentTableName] [NVARCHAR] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[ParentIndexName] [NVARCHAR] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[IndexOperation] [VARCHAR] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IsOnlineOperation] [BIT] NOT NULL,
[TableChildOperationId] [SMALLINT] NOT NULL CONSTRAINT [Def_Queue_TableChildOperationId] DEFAULT ((0)),
[SQLStatement] [VARCHAR] (MAX) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SeqNo] [INT] NOT NULL,
[DateTimeInserted] [DATETIME2] NOT NULL CONSTRAINT [Def_Queue_DateTimeInserted] DEFAULT (SYSDATETIME()),
[InProgress] [BIT] NOT NULL CONSTRAINT [Def_Queue_InProgress] DEFAULT ((0)),
[RunStatus] [VARCHAR] (7) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [Def_Queue_RunStatus] DEFAULT ('Running'),
[ErrorMessage] [VARCHAR] (MAX) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[TransactionId] [UNIQUEIDENTIFIER] NULL,
[BatchId] [UNIQUEIDENTIFIER] NOT NULL,
[ExitTableLoopOnError] [BIT] NOT NULL CONSTRAINT [Def_Queue_ExitTableLoopOnError] DEFAULT ((0)),
CONSTRAINT [PK_Queue] PRIMARY KEY CLUSTERED  ([SchemaName], [TableName], [IndexName], [PartitionNumber], [IndexOperation], [TableChildOperationId])
)
GO
IF OBJECT_ID('[DOI].[Chk_Queue_IndexOperation]') IS NULL
ALTER TABLE [DOI].[Queue] ADD CONSTRAINT [Chk_Queue_IndexOperation] CHECK (([IndexOperation]='Delay' OR [IndexOperation]='Update Statistics' OR [IndexOperation]='Create Statistics' OR [IndexOperation]='Drop Statistics' OR [IndexOperation]='Delete PartitionState Metadata' OR [IndexOperation]='Partition State Metadata Validation' OR [IndexOperation]='Resource Governor Settings' OR [IndexOperation]='Release Application Lock' OR [IndexOperation]='Get Application Lock' OR [IndexOperation]='Kill' OR [IndexOperation]='Clean Up Tables' OR [IndexOperation]='Turn Off DataSynch' OR [IndexOperation]='Turn On DataSynch' OR [IndexOperation]='Clear Queue of Other Tables' OR [IndexOperation]='Data Synch Trigger Revert Rename' OR [IndexOperation]='Free TempDB Space Validation' OR [IndexOperation]='Free Log Space Validation' OR [IndexOperation]='Free Data Space Validation' OR [IndexOperation]='Stop Processing' OR [IndexOperation]='Table Revert Rename' OR [IndexOperation]='Constraint Revert Rename' OR [IndexOperation]='Index Revert Rename' OR [IndexOperation]='Prior Error Validation SQL' OR [IndexOperation]='Partition Data Validation SQL' OR [IndexOperation]='Drop Data Synch Table' OR [IndexOperation]='Drop Data Synch Trigger' OR [IndexOperation]='Rename Data Synch Table' OR [IndexOperation]='Delete from Queue' OR [IndexOperation]='Update to In-Progress' OR [IndexOperation]='FinalValidation' OR [IndexOperation]='Temp Table SQL' OR [IndexOperation]='Drop Parent Old Table FKs' OR [IndexOperation]='Drop Ref Old Table FKs' OR [IndexOperation]='Add back Parent Table FKs' OR [IndexOperation]='Add back Ref Table FKs' OR [IndexOperation]='Disable CmdShell' OR [IndexOperation]='Enable CmdShell' OR [IndexOperation]='Rollback DDL' OR [IndexOperation]='Synch Updates' OR [IndexOperation]='Synch Inserts' OR [IndexOperation]='Synch Deletes' OR [IndexOperation]='Rename Existing Table Constraint' OR [IndexOperation]='Rename Existing Table Index' OR [IndexOperation]='Rename New Partitioned Prep Table Constraint' OR [IndexOperation]='Rename New Partitioned Prep Table Index' OR [IndexOperation]='Rename Existing Table' OR [IndexOperation]='Rename New Partitioned Prep Table' OR [IndexOperation]='Drop Table SQL' OR [IndexOperation]='Check Constraint SQL' OR [IndexOperation]='Commit Tran' OR [IndexOperation]='Begin Tran' OR [IndexOperation]='Switch Partitions SQL' OR [IndexOperation]='Partition Prep Table SQL' OR [IndexOperation]='Drop Ref FKs' OR [IndexOperation]='Recreate All FKs' OR [IndexOperation]='Loading Data' OR [IndexOperation]='Create Final Data Synch Trigger' OR [IndexOperation]='Create Final Data Synch Table' OR [IndexOperation]='Create Data Synch Trigger' OR [IndexOperation]='Prep Table SQL' OR [IndexOperation]='Alter Index' OR [IndexOperation]='Create Constraint' OR [IndexOperation]='Create Index' OR [IndexOperation]='Drop Index' OR [IndexOperation]='Change DB' OR [IndexOperation]='Create BCP View' OR [IndexOperation]='Drop BCP View' OR [IndexOperation]='Rename Existing Statistic' OR [IndexOperation]='Create Missing Table Statistic' OR [IndexOperation]='Statistics Revert Rename'))
GO

IF OBJECT_ID('[DOI].[Chk_Queue_RunStatus]') IS NULL
ALTER TABLE [DOI].[Queue] ADD CONSTRAINT [Chk_Queue_RunStatus] CHECK (([RunStatus]='Finish' OR [RunStatus]='Running' OR [RunStatus]='Start'))
GO

IF OBJECT_ID('[DOI].[Log]') IS NULL
CREATE TABLE [DOI].[Log]
(
[LogID] [int] NOT NULL IDENTITY(1, 1),
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IndexName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[PartitionNumber] [smallint] NOT NULL CONSTRAINT [Def_Log_PartitionNumber] DEFAULT ((1)),
[IndexSizeInMB] [int] NOT NULL,
[LoginName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[UserName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[LogDateTime] [datetime2] NOT NULL CONSTRAINT [Def_Log_LogDateTime] DEFAULT (sysdatetime()),
[SQLStatement] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[IndexOperation] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IsOnlineOperation] [bit] NOT NULL,
[RowCount] [int] NOT NULL,
[TableChildOperationId] [smallint] NOT NULL,
[RunStatus] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[ErrorText] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[InfoMessage] [VARCHAR] (MAX) NULL,
[TransactionId] [uniqueidentifier] NULL,
[BatchId] [uniqueidentifier] NOT NULL,
[SeqNo] [int] NOT NULL,
[ExitTableLoopOnError] [bit] NOT NULL,
CONSTRAINT [PK_Log] PRIMARY KEY CLUSTERED  ([LogID]),
CONSTRAINT [UQ_Log] UNIQUE NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [IndexName], [PartitionNumber], [IndexOperation], [RunStatus], [TableChildOperationId], [LogDateTime])
)
GO
IF OBJECT_ID('[DOI].[Chk_Log_RunStatus]') IS NULL
ALTER TABLE [DOI].[Log] ADD CONSTRAINT [Chk_Log_RunStatus] CHECK (([RunStatus]='Error - Skipping...' OR [RunStatus]='Error - Retrying...' OR [RunStatus]='Error' OR [RunStatus]='Finish' OR [RunStatus]='Running' OR [RunStatus]='Start' OR [RunStatus]='Info'))
GO
IF OBJECT_ID('[DOI].[Run_PartitionState]') IS NULL
CREATE TABLE [DOI].[Run_PartitionState]
(
[DatabaseName] [sys].[sysname] NOT NULL,
[SchemaName] [sys].[sysname] NOT NULL,
[ParentTableName] [sys].[sysname] NOT NULL,
[PrepTableName] [sys].[sysname] NOT NULL,
[PartitionFromValue] [date] NOT NULL,
[PartitionToValue] [date] NOT NULL,
[DataSynchState] [bit] NOT NULL,
[LastUpdateDateTime] [datetime] NULL CONSTRAINT [Def_Run_PartitionState_LastUpdateDateTime] DEFAULT (getdate()),
CONSTRAINT [PK_Run_PartitionState] PRIMARY KEY CLUSTERED  ([DatabaseName], [SchemaName], [ParentTableName], [PrepTableName], [PartitionFromValue])
)
GO
GO
------------------------- END INCREMENTAL MIGRATION: "Migrations\005_Queue_and_Run_Tables.sql" ---------------------------


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\005_Queue_and_Run_Tables.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('141260d1-5e71-4da3-b392-f8106a4568d5' AS UNIQUEIDENTIFIER), '3D003B2EEFABFC36D6B4DA8FC3F233BE67266C0055C895978E8089E25640850C', 'Migrations\005_Queue_and_Run_Tables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\005_Queue_and_Run_Tables.sql", ID: {141260d1-5e71-4da3-b392-f8106a4568d5} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('098d132d-e1a3-4798-92cb-4bddd4abef30' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\006_Table_Types.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\006_Table_Types.sql", ID: {098d132d-e1a3-4798-92cb-4bddd4abef30} *****';

GO


----------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\006_Table_Types.sql" ------------------------------
GO
-- <Migration ID="098d132d-e1a3-4798-92cb-4bddd4abef30" TransactionHandling="Custom" />
GO

PRINT N'Creating types'
GO
IF TYPE_ID(N'[DOI].[LogTT]') IS NULL
CREATE TYPE [DOI].[LogTT] AS TABLE
(
[LogID] [int] NOT NULL,
[DatabaseName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[SchemaName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[TableName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IndexName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[PartitionNumber] [smallint] NOT NULL,
[IndexSizeInMB] [int] NOT NULL,
[LoginName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[UserName] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[LogDateTime] [datetime2] NOT NULL,
[SQLStatement] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[IndexOperation] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[IsOnlineOperation] [bit] NOT NULL,
[RowCount] [int] NOT NULL,
[TableChildOperationId] [smallint] NOT NULL,
[RunStatus] [varchar] (6) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[ErrorText] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[TransactionId] [uniqueidentifier] NULL,
[BatchId] [uniqueidentifier] NOT NULL,
[SeqNo] [int] NOT NULL,
[ExitTableLoopOnError] [bit] NOT NULL,
PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [IndexName], [PartitionNumber], [IndexOperation], [RunStatus], [TableChildOperationId], [LogDateTime])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
PRINT N'Creating types'
GO
IF TYPE_ID(N'[DOI].[FilteredRowCountsTT]') IS NULL
CREATE TYPE [DOI].[FilteredRowCountsTT] AS TABLE
(
[DatabaseName] [sys].[sysname] NOT NULL,
[SchemaName] [sys].[sysname] NOT NULL,
[TableName] [sys].[sysname] NOT NULL,
[IndexName] [sys].[sysname] NOT NULL,
[NumRows] [bigint] NOT NULL,
PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [IndexName])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
IF TYPE_ID(N'[DOI].[IndexColumnsTT]') IS NULL
CREATE TYPE [DOI].[IndexColumnsTT] AS TABLE
(
[DatabaseName] [sys].[sysname] NOT NULL,
[SchemaName] [sys].[sysname] NOT NULL,
[TableName] [sys].[sysname] NOT NULL,
[IndexName] [sys].[sysname] NOT NULL,
[KeyColumnList_Desired] [varchar] (max) NOT NULL,
[IncludedColumnList_Desired] [varchar] (max) NULL,
PRIMARY KEY NONCLUSTERED  ([DatabaseName], [SchemaName], [TableName], [IndexName])
)
GO
IF TYPE_ID(N'[DOI].[SysPartitionRangeValuesTT]') IS NULL
CREATE TYPE [DOI].[SysPartitionRangeValuesTT] AS TABLE
(
[database_id] [sys].[sysname] NOT NULL,
[function_id] [int] NOT NULL,
[boundary_id] [int] NOT NULL,
[parameter_id] [int] NOT NULL,
[value] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
PRIMARY KEY NONCLUSTERED  ([database_id], [function_id], [boundary_id])
)
WITH
(
MEMORY_OPTIMIZED = ON
)
GO
GO
------------------------------ END INCREMENTAL MIGRATION: "Migrations\006_Table_Types.sql" -------------------------------


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\006_Table_Types.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('098d132d-e1a3-4798-92cb-4bddd4abef30' AS UNIQUEIDENTIFIER), 'F7E4305C21882992ACFAFA7782F757572B3852B49627925A87823F996BDAD60C', 'Migrations\006_Table_Types.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\006_Table_Types.sql", ID: {098d132d-e1a3-4798-92cb-4bddd4abef30} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e414f66a-f152-4976-8486-d7d611d85811' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\007_BusinessHoursSchedule_Table.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\007_BusinessHoursSchedule_Table.sql", ID: {e414f66a-f152-4976-8486-d7d611d85811} *****';

GO


--------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\007_BusinessHoursSchedule_Table.sql" ----------------------
GO
-- <Migration ID="e414f66a-f152-4976-8486-d7d611d85811" TransactionHandling="Custom" />
IF OBJECT_ID(N'[DOI].[BusinessHoursSchedule]', 'U') IS NULL
CREATE TABLE [DOI].[BusinessHoursSchedule]
(
[DatabaseName] [sys].[sysname] NOT NULL,
[DayOfWeekId] [tinyint] NOT NULL,
[DayOfWeekName] AS (case [DayOfWeekId] when (1) then 'Sunday' when (2) then 'Monday' when (3) then 'Tuesday' when (4) then 'Wednesday' when (5) then 'Thursday' when (6) then 'Friday' when (7) then 'Saturday' end),
[StartUtcMilitaryTime] [time] NOT NULL,
[IsBusinessHours] [bit] NOT NULL,
[IsEnabled] [bit] NOT NULL
)
GO
PRINT N'Creating primary key [PK_BusinessHoursSchedule] on [DOI].[BusinessHoursSchedule]'
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[DOI].[PK_BusinessHoursSchedule]', 'PK') AND parent_object_id = OBJECT_ID(N'[DOI].[BusinessHoursSchedule]', 'U'))
ALTER TABLE [DOI].[BusinessHoursSchedule] ADD CONSTRAINT [PK_BusinessHoursSchedule] PRIMARY KEY CLUSTERED  ([DatabaseName], [DayOfWeekId], [StartUtcMilitaryTime])
GO
GO
---------------------- END INCREMENTAL MIGRATION: "Migrations\007_BusinessHoursSchedule_Table.sql" -----------------------


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\007_BusinessHoursSchedule_Table.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('e414f66a-f152-4976-8486-d7d611d85811' AS UNIQUEIDENTIFIER), '189CF5576880CC47C1F9488B88A46C1C4D0F98712D36B221CD1DF29DF4078191', 'Migrations\007_BusinessHoursSchedule_Table.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\007_BusinessHoursSchedule_Table.sql", ID: {e414f66a-f152-4976-8486-d7d611d85811} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7caa18b5-2f16-4aa2-b72c-869a09b5542b' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\008_20200303-1721_SamuelBe.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\008_20200303-1721_SamuelBe.sql", ID: {7caa18b5-2f16-4aa2-b72c-869a09b5542b} *****';

GO


----------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\008_20200303-1721_SamuelBe.sql" -------------------------
GO
-- <Migration ID="7caa18b5-2f16-4aa2-b72c-869a09b5542b" />
GO

PRINT N'Dropping [DOI].[fnRefreshMetadataForView]'
GO
IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[DOI].[fnRefreshMetadataForView]') AND (type = 'IF' OR type = 'FN' OR type = 'TF'))
DROP FUNCTION [DOI].[fnRefreshMetadataForView]
GO
PRINT N'Dropping [DOI].[fnGetRefreshMetadataSPsForView]'
GO
IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[DOI].[fnGetRefreshMetadataSPsForView]') AND (type = 'IF' OR type = 'FN' OR type = 'TF'))
DROP FUNCTION [DOI].[fnGetRefreshMetadataSPsForView]
GO

GO
------------------------ END INCREMENTAL MIGRATION: "Migrations\008_20200303-1721_SamuelBe.sql" --------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\008_20200303-1721_SamuelBe.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('7caa18b5-2f16-4aa2-b72c-869a09b5542b' AS UNIQUEIDENTIFIER), '64EEF88E4AB6983D4F342C62251A65647AFCDA8E4465FE56D6153C7C0E42D1D1', 'Migrations\008_20200303-1721_SamuelBe.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\008_20200303-1721_SamuelBe.sql", ID: {7caa18b5-2f16-4aa2-b72c-869a09b5542b} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('af0886f5-4861-530f-aa3f-4795a7cab331' AS UNIQUEIDENTIFIER) AND [script_checksum] = '43E326B9271090569BB96524F8018DF069C2F34BC357DB6E9AF47DEB436701B4')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnIndexesColumnStore.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnIndexesColumnStore.sql", ID: {af0886f5-4861-530f-aa3f-4795a7cab331} *****';

GO


---------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnIndexesColumnStore.sql" ------------
GO
IF OBJECT_ID('[DOI].[fnIndexesColumnStore]') IS NOT NULL
	DROP FUNCTION [DOI].[fnIndexesColumnStore];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   FUNCTION [DOI].[fnIndexesColumnStore]()

RETURNS TABLE
WITH NATIVE_COMPILATION, SCHEMABINDING 

AS

/*
    select * from DOI.fnIndexesColumnStore()
*/

RETURN(
            SELECT	 ICS.DatabaseName
                    ,ICS.SchemaName 
				    ,ICS.TableName
				    ,ICS.IndexName
                    ,ICS.IsIndexMissingFromSQLServer
				    ,NULL AS IsUnique_Desired
                    ,NULL AS IsUnique_Actual
                    ,NULL AS IsPrimaryKey_Desired
                    ,NULL AS IsPrimaryKey_Actual
                    ,NULL AS IsUniqueConstraint_Desired
                    ,NULL AS IsUniqueConstraint_Actual
                    ,ICS.IsClustered_Desired
				    ,ICS.IsClustered_Actual
				    ,ICS.ColumnList_Desired AS KeyColumnList_Desired
				    ,ICS.ColumnList_Actual AS KeyColumnList_Actual
					,CAST(NULL AS VARCHAR(MAX)) AS IncludedColumnList_Desired
					,CAST(NULL AS VARCHAR(MAX)) AS IncludedColumnList_Actual
				    ,ICS.IsFiltered_Desired
				    ,ICS.IsFiltered_Actual
				    ,ICS.FilterPredicate_Desired
				    ,ICS.FilterPredicate_Actual
					,NULL AS Fillfactor_Desired
					,NULL AS Fillfactor_Actual
					,NULL AS OptionPadIndex_Desired
					,NULL AS OptionPadIndex_Actual
					,NULL AS OptionStatisticsNoRecompute_Desired
					,NULL AS OptionStatisticsNoRecompute_Actual
					,NULL AS OptionStatisticsIncremental_Desired
					,NULL AS OptionStatisticsIncremental_Actual
					,NULL AS OptionIgnoreDupKey_Desired
					,NULL AS OptionIgnoreDupKey_Actual
				    ,ICS.OptionDataCompression_Desired
				    ,ICS.OptionDataCompression_Actual
				    ,ICS.OptionDataCompressionDelay_Desired
				    ,ICS.OptionDataCompressionDelay_Actual
					,NULL AS OptionAllowRowLocks_Desired
					,NULL AS OptionAllowRowLocks_Actual
					,NULL AS OptionAllowPageLocks_Desired
					,NULL AS OptionAllowPageLocks_Actual
					,NULL AS OptionResumable_Desired
--					,ICS.OptionResumable_Actual
--					,ICS.OptionMaxDuration_Desired
					,NULL AS OptionMaxDuration_Actual
					,ICS.PartitionFunction_Desired
					,ICS.PartitionFunction_Actual
				    ,ICS.Storage_Desired
				    ,ICS.Storage_Actual
				    ,ICS.IsStorageChanging
				    ,ICS.StorageType_Desired
				    ,ICS.StorageType_Actual
				    ,ICS.PartitionColumn_Desired
                    ,ICS.IndexSizeMB_Actual
				    ,ICS.Fragmentation
				    ,TTP.IntendToPartition
				    ,ICS.NeedsPartitionLevelOperations
                    ,ICS.TotalPartitionsInIndex
				    ,ICS.IndexMeetsMinimumSize
				    ,ICS.FragmentationType
				    ,ICS.AreDropRecreateOptionsChanging
				    ,ICS.AreRebuildOptionsChanging
				    ,ICS.AreRebuildOnlyOptionsChanging
				    ,ICS.AreReorgOptionsChanging
				    ,ICS.AreSetOptionsChanging
				    ,0 AS IsUniquenessChanging
				    ,0 AS IsPrimaryKeyChanging
				    ,ICS.IsColumnListChanging AS IsKeyColumnListChanging
				    ,0 AS IsIncludedColumnListChanging
				    ,ICS.IsFilterChanging
				    ,ICS.IsClusteredChanging
				    ,ICS.IsPartitioningChanging
				    ,0 AS IsPadIndexChanging
				    ,0 AS IsFillfactorChanging
				    ,0 AS IsIgnoreDupKeyChanging
				    ,0 AS IsStatisticsNoRecomputeChanging
				    ,0 AS IsStatisticsIncrementalChanging
				    ,0 AS IsAllowRowLocksChanging
				    ,0 AS IsAllowPageLocksChanging
				    ,ICS.IsDataCompressionChanging
				    ,ICS.IsDataCompressionDelayChanging
				    ,0 AS IndexHasLOBColumns
				    ,ICS.NumPages_Actual
                    ,'ColumnStore' AS IndexType
                    ,ICS.IsIndexLarge
                    ,ICS.DriveLetter
			FROM DOI.Tables TTP
                INNER JOIN DOI.SysDatabases d on d.name = TTP.DatabaseName
				INNER JOIN DOI.IndexesColumnStore ICS ON TTP.SchemaName = ICS.SchemaName
					AND TTP.TableName = ICS.TableName
        )

























































































GO

GO
----------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnIndexesColumnStore.sql" -------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnIndexesColumnStore.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('af0886f5-4861-530f-aa3f-4795a7cab331' AS UNIQUEIDENTIFIER), '43E326B9271090569BB96524F8018DF069C2F34BC357DB6E9AF47DEB436701B4', 'Programmable Objects\Functions\DOI.fnIndexesColumnStore.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnIndexesColumnStore.sql", ID: {af0886f5-4861-530f-aa3f-4795a7cab331} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e4ef2172-5e4c-59fc-af4d-1a03c62ab0fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = '647EE1F9A0C0A04D97C810B3FD9052323A549B129ADC57E7363540D0D9DC44C1')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnIndexesRowStore.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnIndexesRowStore.sql", ID: {e4ef2172-5e4c-59fc-af4d-1a03c62ab0fe} *****';

GO


------------ BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnIndexesRowStore.sql" -------------
GO
IF OBJECT_ID('[DOI].[fnIndexesRowStore]') IS NOT NULL
	DROP FUNCTION [DOI].[fnIndexesRowStore];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO








CREATE   FUNCTION [DOI].[fnIndexesRowStore]()   

RETURNS TABLE 
WITH NATIVE_COMPILATION, SCHEMABINDING 
 
AS   

/*
    SELECT * FROM DOI.fnIndexesRowStore()
*/

RETURN  (
            SELECT	IRS.DatabaseName
                    ,IRS.SchemaName 
					,IRS.TableName
					,IRS.IndexName
                    ,IRS.IsIndexMissingFromSQLServer
					,IRS.IsUnique_Desired
					,IRS.IsUnique_Actual
					,IRS.IsPrimaryKey_Desired
					,IRS.IsPrimaryKey_Actual
					,IRS.IsUniqueConstraint_Desired
					,IRS.IsUniqueConstraint_Actual
					,IRS.IsClustered_Desired
					,IRS.IsClustered_Actual
					,IRS.KeyColumnList_Desired
					,IRS.KeyColumnList_Actual
					,IRS.IncludedColumnList_Desired
					,IRS.IncludedColumnList_Actual
					,IRS.IsFiltered_Desired
					,IRS.IsFiltered_Actual
					,IRS.FilterPredicate_Desired
					,IRS.FilterPredicate_Actual
					,IRS.Fillfactor_Desired
					,IRS.Fillfactor_Actual
					,IRS.OptionPadIndex_Desired
					,IRS.OptionPadIndex_Actual
					,IRS.OptionStatisticsNoRecompute_Desired
					,IRS.OptionStatisticsNoRecompute_Actual
					,IRS.OptionStatisticsIncremental_Desired
					,IRS.OptionStatisticsIncremental_Actual
					,IRS.OptionIgnoreDupKey_Desired
					,IRS.OptionIgnoreDupKey_Actual
					,IRS.OptionDataCompression_Desired
					,IRS.OptionDataCompression_Actual
					,IRS.OptionDataCompressionDelay_Desired
					,IRS.OptionDataCompressionDelay_Actual
					,IRS.OptionAllowRowLocks_Desired
					,IRS.OptionAllowRowLocks_Actual
					,IRS.OptionAllowPageLocks_Desired
					,IRS.OptionAllowPageLocks_Actual
					,IRS.OptionResumable_Desired
--					,IRS.OptionResumable_Actual
--					,IRS.OptionMaxDuration_Desired
					,IRS.OptionMaxDuration_Actual
					,IRS.PartitionFunction_Desired
					,IRS.PartitionFunction_Actual
					,IRS.Storage_Desired
					,IRS.Storage_Actual
					,IRS.IsStorageChanging
					,IRS.StorageType_Desired
					,IRS.StorageType_Actual
					,IRS.PartitionColumn_Desired
                    ,IRS.IndexSizeMB_Actual
					,IRS.Fragmentation
					,TTP.IntendToPartition
					,IRS.NeedsPartitionLevelOperations
                    ,IRS.TotalPartitionsInIndex
					,IRS.IndexMeetsMinimumSize
					,IRS.FragmentationType
					,IRS.AreDropRecreateOptionsChanging
					,IRS.AreRebuildOptionsChanging
					,IRS.AreRebuildOnlyOptionsChanging
					,IRS.AreReorgOptionsChanging
					,IRS.AreSetOptionsChanging
					,IRS.IsUniquenessChanging
					,IRS.IsPrimaryKeyChanging
					,IRS.IsKeyColumnListChanging
					,IRS.IsIncludedColumnListChanging
					,IRS.IsFilterChanging
					,IRS.IsClusteredChanging
					,IRS.IsPartitioningChanging
					,IRS.IsPadIndexChanging
					,IRS.IsFillfactorChanging
					,IRS.IsIgnoreDupKeyChanging
					,IRS.IsStatisticsNoRecomputeChanging
					,IRS.IsStatisticsIncrementalChanging --if the table is partitioned, ignore this check.
					,IRS.IsAllowRowLocksChanging
					,IRS.IsAllowPageLocksChanging
					,IRS.IsDataCompressionChanging
					,IRS.IsDataCompressionDelayChanging
					,IRS.IndexHasLOBColumns
					,IRS.NumPages_Actual
                    ,'RowStore' AS IndexType
                    ,IRS.IsIndexLarge
                    ,IRS.DriveLetter
			--SELECT COUNT(*)
			FROM DOI.Tables TTP
                INNER JOIN DOI.SysDatabases d on d.name = TTP.DatabaseName
				INNER JOIN DOI.IndexesRowStore IRS ON TTP.DatabaseName = IRS.DatabaseName
                    AND TTP.SchemaName = IRS.SchemaName
					AND TTP.TableName = IRS.TableName
        )
















GO

GO
------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnIndexesRowStore.sql" --------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnIndexesRowStore.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('e4ef2172-5e4c-59fc-af4d-1a03c62ab0fe' AS UNIQUEIDENTIFIER), '647EE1F9A0C0A04D97C810B3FD9052323A549B129ADC57E7363540D0D9DC44C1', 'Programmable Objects\Functions\DOI.fnIndexesRowStore.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnIndexesRowStore.sql", ID: {e4ef2172-5e4c-59fc-af4d-1a03c62ab0fe} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('88756793-118b-5c80-819f-ffa0fbd105be' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8D95B431F65471BF42472012D1A1360F436FEF262AF5DA57DC56EFA858369FF5')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwIndexes.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwIndexes.sql", ID: {88756793-118b-5c80-819f-ffa0fbd105be} *****';

GO


------------------ BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwIndexes.sql" -------------------
GO
IF OBJECT_ID('[DOI].[vwIndexes]') IS NOT NULL
	DROP VIEW [DOI].[vwIndexes];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO




CREATE   VIEW [DOI].[vwIndexes]
AS

/*
    SELECT * FROM DOI.vwIndexes
*/

SELECT	AllIdx.* 
        ,CASE
            WHEN AllIdx.IndexUpdateType IN ('CreateMissing', 'AlterRebuild')
                    OR (AllIdx.IndexUpdateType = 'DropRecreate' AND AllIdx.IsClustered_Desired = 1)
            THEN 1
			ELSE 0
         END AS NeedsSpaceOnTempDBDrive
		,CASE 
			WHEN AllIdx.IndexUpdateType IN ('AlterSet', 'AlterReorganize', 'AlterReorganize-PartitionLevel')
				OR (AllIdx.IndexUpdateType IN ('AlterRebuild', 'AlterRebuild-PartitionLevel') 
					AND (AllIdx.IndexType = 'RowStore' AND AllIdx.IndexHasLOBColumns = 0))
			THEN 1
			WHEN AllIdx.IndexUpdateType IN ('DropRecreate')
				OR (AllIdx.IndexUpdateType IN ('AlterRebuild', 'AlterRebuild-PartitionLevel') 
					AND ((AllIdx.IndexType = 'RowStore' AND AllIdx.IndexHasLOBColumns = 1)
							OR (AllIdx.IndexType = 'ColumnStore')))
			THEN 0
			ELSE 0
        END AS IsOnlineOperation
		--KEEP THE ORDER OF THE CASE STATEMENTS BELOW IN ALPHABETICAL ORDER!!!
		,STUFF(CASE WHEN AllIdx.IsAllowPageLocksChanging			= 1						THEN	', AllowPageLocks'								ELSE '' END
				+ CASE WHEN AllIdx.IsAllowRowLocksChanging			= 1						THEN	', AllowRowLocks'									ELSE '' END
				+ CASE WHEN AllIdx.IsClusteredChanging				= 1						THEN	', Clustered'									ELSE '' END
				+ CASE WHEN AllIdx.IsDataCompressionDelayChanging	= 1						THEN	', CompressionDelay'							ELSE '' END
				+ CASE WHEN AllIdx.IsDataCompressionChanging		= 1						THEN	', DataCompression'								ELSE '' END
				+ CASE WHEN AllIdx.IsFillfactorChanging				= 1						THEN	', FillFactor'									ELSE '' END
				+ CASE WHEN AllIdx.IsFilterChanging					= 1						THEN	', Filter'										ELSE '' END
				+ CASE WHEN AllIdx.FragmentationType				IN ('Heavy', 'Light')	THEN	', Fragmentation:  ' + AllIdx.FragmentationType	ELSE '' END 
				+ CASE WHEN AllIdx.IsIgnoreDupKeyChanging			= 1						THEN	', IgnoreDupKey'								ELSE '' END
				+ CASE WHEN AllIdx.IsIncludedColumnListChanging		= 1						THEN	', IncludedColumnList'							ELSE '' END
				+ CASE WHEN AllIdx.IsPrimaryKeyChanging				= 1						THEN	', IsPrimaryKey'								ELSE '' END
				+ CASE WHEN AllIdx.IsKeyColumnListChanging			= 1						THEN	', KeyColumnList'								ELSE '' END
				+ CASE WHEN AllIdx.IsPadIndexChanging				= 1						THEN	', PadIndex'									ELSE '' END
				+ CASE WHEN AllIdx.IsPartitioningChanging			= 1						THEN	', Partitioning'								ELSE '' END
				+ CASE WHEN AllIdx.IsStatisticsNoRecomputeChanging	= 1						THEN	', StatisticsNoRecompute'						ELSE '' END
				+ CASE WHEN AllIdx.IsStatisticsIncrementalChanging	= 1						THEN	', StatisticsIncremental'						ELSE '' END
				+ CASE WHEN AllIdx.IsUniquenessChanging				= 1						THEN	', Uniqueness'									ELSE '' END, 1, 2, SPACE(0)) AS ListOfChanges
FROM (	SELECT	 IRS.*
				,CASE
					WHEN IRS.IsIndexMissingFromSQLServer = 1
					THEN 'CreateMissing'
					WHEN IRS.IsIndexMissingFromSQLServer = 0
						AND IRS.AreDropRecreateOptionsChanging = 1
					THEN 'DropRecreate'
					WHEN (IRS.IsIndexMissingFromSQLServer = 0
						AND IRS.NeedsPartitionLevelOperations = 0 
						AND IRS.AreDropRecreateOptionsChanging = 0 )
							AND ((IRS.FragmentationType = 'Heavy' OR IRS.AreRebuildOnlyOptionsChanging = 1)
								OR (IRS.FragmentationType = 'Light' AND IRS.AreSetOptionsChanging = 1))
					THEN 'AlterRebuild'	
					WHEN (IRS.IsIndexMissingFromSQLServer = 0
						AND IRS.NeedsPartitionLevelOperations = 1 
						AND IRS.AreDropRecreateOptionsChanging = 0 )
							AND (IRS.FragmentationType = 'Heavy' OR IRS.IsDataCompressionChanging = 1)
					THEN 'AlterRebuild-PartitionLevel'
					WHEN IRS.IsIndexMissingFromSQLServer = 0
						AND IRS.FragmentationType = 'None'
						AND IRS.AreSetOptionsChanging = 1
						AND IRS.NeedsPartitionLevelOperations = 0 
						AND IRS.AreDropRecreateOptionsChanging = 0 
						AND IRS.AreRebuildOnlyOptionsChanging = 0
					THEN 'AlterSet'
					WHEN (IRS.IsIndexMissingFromSQLServer = 0
						AND IRS.AreDropRecreateOptionsChanging = 0 
						AND IRS.AreRebuildOptionsChanging = 0
						AND IRS.FragmentationType = 'Light'
						AND IRS.AreSetOptionsChanging = 0)
					THEN	CASE IRS.NeedsPartitionLevelOperations
								WHEN 0 THEN 'AlterReorganize'
								WHEN 1 THEN 'AlterReorganize-PartitionLevel'
							END
					ELSE 'None'
				END AS IndexUpdateType 
				
				,CASE 
					WHEN ISNULL(IRS.IsPrimaryKey_Actual, IRS.IsPrimaryKey_Desired) = 1 OR ISNULL(IRS.IsUniqueConstraint_Actual, IRS.IsUniqueConstraint_Desired) = 1 
					THEN 'ALTER TABLE ' + IRS.SchemaName + '.' + IRS.TableName + ' DROP CONSTRAINT IF EXISTS ' + IRS.IndexName
					ELSE 'DROP INDEX IF EXISTS '+ IRS.SchemaName + '.' + IRS.TableName + '.' + IRS.IndexName
				END AS DropStatement
				,
'IF NOT EXISTS (SELECT ''True'' FROM sys.indexes i INNER JOIN sys.tables t ON i.object_id = t.object_id INNER JOIN sys.schemas s ON s.schema_id = t.schema_id WHERE s.name = ''' + IRS.SchemaName + ''' AND t.name = ''' + IRS.TableName + ''' AND i.name = ''' + IRS.IndexName + ''')
BEGIN' + 	CASE 
				WHEN (IRS.IsPrimaryKey_Desired = 1 OR IRS.IsUniqueConstraint_Desired = 1)
				THEN '
ALTER TABLE ' + IRS.SchemaName + '.' + IRS.TableName + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
'	ADD CONSTRAINT ' + IRS.IndexName + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
'		' + CASE WHEN IRS.IsPrimaryKey_Desired = 1 THEN 'PRIMARY KEY ' WHEN IRS.IsUniqueConstraint_Desired = 1 THEN ' UNIQUE ' ELSE '' END + CASE WHEN IRS.IsClustered_Desired = 0 THEN ' NON' ELSE ' ' END + 'CLUSTERED (' + IRS.KeyColumnList_Desired + ') ' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
'				WITH (	
						PAD_INDEX = ' + CASE WHEN IRS.OptionPadIndex_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
						FILLFACTOR = ' + CAST(CASE WHEN IRS.Fillfactor_Desired = 0 THEN 100 ELSE IRS.Fillfactor_Desired END AS VARCHAR(3)) + ',
						IGNORE_DUP_KEY = ' + CASE WHEN IRS.OptionIgnoreDupKey_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
						STATISTICS_NORECOMPUTE = ' + CASE WHEN IRS.OptionStatisticsNoRecompute_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
						STATISTICS_INCREMENTAL = ' + CASE WHEN IRS.OptionStatisticsIncremental_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
						ALLOW_ROW_LOCKS = ' + CASE WHEN IRS.OptionAllowRowLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
						ALLOW_PAGE_LOCKS = ' + CASE WHEN IRS.OptionAllowPageLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
						DATA_COMPRESSION = ' + IRS.OptionDataCompression_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) + CHAR(9) +
'			ON ' +	CASE 
						WHEN IRS.IntendToPartition = 1
						THEN ISNULL(IRS.Storage_Desired, '[' + IRS.Storage_Actual + ']')
						ELSE '[' + ISNULL(IRS.Storage_Desired, IRS.Storage_Actual) + ']'
					END +	CASE 
								WHEN IRS.StorageType_Desired = 'PARTITION_SCHEME'
								THEN '(' + IRS.PartitionColumn_Desired + ')' 
								ELSE '' 
							END + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9)
					ELSE '
CREATE' +	CASE IRS.IsUnique_Desired WHEN 1 THEN ' UNIQUE ' ELSE ' ' END + CASE WHEN IRS.IsClustered_Desired = 0 THEN ' NON' ELSE ' ' END + 'CLUSTERED INDEX ' + IRS.IndexName + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
										'	ON ' + IRS.SchemaName + '.' + IRS.TableName + '(' + IRS.KeyColumnList_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
										CASE 
											WHEN IRS.IncludedColumnList_Desired IS NULL 
											THEN '' 
											ELSE '		INCLUDE(' + IRS.IncludedColumnList_Desired + ')'
										END + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
										CASE
											WHEN IRS.IsFiltered_Desired = 0
											THEN ''
											ELSE '		WHERE ' + IRS.FilterPredicate_Desired
										END + CHAR(13) + CHAR(10) +
										'					WITH (	
							PAD_INDEX = ' + CASE WHEN IRS.OptionPadIndex_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
							FILLFACTOR = ' + CAST(CASE WHEN IRS.Fillfactor_Desired = 0 THEN 100 ELSE IRS.Fillfactor_Desired END AS VARCHAR(3)) + ',
							SORT_IN_TEMPDB = ON,
							IGNORE_DUP_KEY = ' + CASE WHEN IRS.OptionIgnoreDupKey_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
							STATISTICS_NORECOMPUTE = ' + CASE WHEN IRS.OptionStatisticsNoRecompute_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
							STATISTICS_INCREMENTAL = ' + CASE WHEN IRS.OptionStatisticsIncremental_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
							DROP_EXISTING = OFF,
							ONLINE = OFF,
							ALLOW_ROW_LOCKS = ' + CASE WHEN IRS.OptionAllowRowLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
							ALLOW_PAGE_LOCKS = ' + CASE WHEN IRS.OptionAllowPageLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
							MAXDOP = 0,
							DATA_COMPRESSION = ' + IRS.OptionDataCompression_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
										'		ON ' +	CASE 
															WHEN IRS.IntendToPartition = 1
															THEN ISNULL(IRS.Storage_Desired, '[' + IRS.Storage_Actual + ']')
															ELSE '[' + ISNULL(IRS.Storage_Desired, IRS.Storage_Actual) + ']'
														END +	CASE 
																	WHEN IRS.StorageType_Desired = 'PARTITION_SCHEME'
																	THEN '(' + IRS.PartitionColumn_Desired + ')' 
																	ELSE '' 
																END + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9)
		END + 
'END' AS CreateStatement
				,'
ALTER INDEX ' + IRS.IndexName + ' ON ' + IRS.SchemaName + '.' + IRS.TableName + CHAR(13) + CHAR(10) + 
'	SET (	IGNORE_DUP_KEY = ' + CASE WHEN IRS.OptionIgnoreDupKey_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
			STATISTICS_NORECOMPUTE = ' + CASE WHEN IRS.OptionStatisticsNoRecompute_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
			ALLOW_ROW_LOCKS = ' + CASE WHEN IRS.OptionAllowRowLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
			ALLOW_PAGE_LOCKS = ' + CASE WHEN IRS.OptionAllowPageLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) 
AS AlterSetStatement
				,	CASE 
						WHEN ISNULL(IRS.NeedsPartitionLevelOperations, 0) = 0
						THEN '
ALTER INDEX ' + IRS.IndexName + ' ON ' + IRS.SchemaName + '.' + IRS.TableName + CHAR(13) + CHAR(10) + 
'	REBUILD PARTITION = ALL' + CHAR(13) + CHAR(10) + 
'		WITH (	
				PAD_INDEX = ' + CASE WHEN IRS.OptionPadIndex_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
				FILLFACTOR = ' + CAST(CASE WHEN IRS.Fillfactor_Desired = 0 THEN 100 ELSE IRS.Fillfactor_Desired END AS VARCHAR(3)) + ',
				SORT_IN_TEMPDB = ON' + 
				CASE WHEN IRS.IsPrimaryKey_Desired = 1 THEN '' ELSE ',
				IGNORE_DUP_KEY = ' + CASE WHEN IRS.OptionIgnoreDupKey_Desired = 1 THEN 'ON' ELSE 'OFF' END END + ',
				STATISTICS_NORECOMPUTE = ' + CASE WHEN IRS.OptionStatisticsNoRecompute_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
				STATISTICS_INCREMENTAL = ' + CASE WHEN IRS.OptionStatisticsIncremental_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
				ONLINE = ' + CASE WHEN IndexHasLOBColumns = 1 THEN 'OFF' ELSE ' ON(WAIT_AT_LOW_PRIORITY (MAX_DURATION = 0 MINUTES, ABORT_AFTER_WAIT = NONE))' END + ',
				ALLOW_ROW_LOCKS = ' + CASE WHEN IRS.OptionAllowRowLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
				ALLOW_PAGE_LOCKS = ' + CASE WHEN IRS.OptionAllowPageLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
				MAXDOP = 0,
				DATA_COMPRESSION = ' + IRS.OptionDataCompression_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) 
						ELSE 'Needs Partition Level Statements'
END AS AlterRebuildStatement
				,	CASE
						WHEN ISNULL(IRS.NeedsPartitionLevelOperations, 0) = 0
						THEN '
ALTER INDEX ' + IRS.IndexName + ' ON ' + IRS.SchemaName + '.' + IRS.TableName + CHAR(13) + CHAR(10) + 
'	REORGANIZE PARTITION = ALL' + CHAR(13) + CHAR(10) + 
'		WITH (	LOB_COMPACTION = ON)' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) 
						ELSE 'Needs Partition Level Statements'
END AS AlterReorganizeStatement,
'
SET DEADLOCK_PRIORITY 10
EXEC sp_rename
	@objname = ''' + IRS.SchemaName + '.' + IRS.TableName + '.' + IRS.IndexName + ''',
	@newname = ''' + REPLACE(IRS.IndexName, IRS.TableName, IRS.TableName + '_OLD') + ''',
	@objtype = ''INDEX''' AS RenameIndexSQL,
'
SET DEADLOCK_PRIORITY 10
EXEC sp_rename
	@objname = ''' + IRS.SchemaName + '.' + IRS.TableName + '.' + REPLACE(IRS.IndexName, IRS.TableName, IRS.TableName + '_OLD') + ''',
	@newname = ''' + IRS.IndexName + ''',
	@objtype = ''INDEX''' AS RevertRenameIndexSQL,
CASE WHEN IsPrimaryKey_Desired = 0 THEN '' ELSE 
'IF NOT EXISTS (SELECT ''True'' FROM sys.indexes i INNER JOIN sys.tables t ON i.object_id = t.object_id INNER JOIN sys.schemas s ON s.schema_id = t.schema_id WHERE s.name = ''' + IRS.SchemaName + ''' AND t.name = ''' + IRS.TableName + ''' AND i.name = ''' + IRS.IndexName + ''')
BEGIN
	CREATE UNIQUE ' + CASE WHEN IRS.IsClustered_Desired = 0 THEN ' NON' ELSE ' ' END + 'CLUSTERED INDEX ' + IRS.IndexName + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
											'	ON ' + IRS.SchemaName + '.' + IRS.TableName + '(' + IRS.KeyColumnList_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
											CASE 
												WHEN IRS.IncludedColumnList_Desired IS NULL 
												THEN '' 
												ELSE '		INCLUDE(' + IRS.IncludedColumnList_Desired + ')'
											END + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
											CASE
												WHEN IRS.IsFiltered_Desired = 0
												THEN ''
												ELSE '		WHERE ' + IRS.FilterPredicate_Desired
											END + CHAR(13) + CHAR(10) +
											'					WITH (	
								PAD_INDEX = ' + CASE WHEN IRS.OptionPadIndex_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
								FILLFACTOR = ' + CAST(CASE WHEN IRS.Fillfactor_Desired = 0 THEN 100 ELSE IRS.Fillfactor_Desired END AS VARCHAR(3)) + ',
								SORT_IN_TEMPDB = ON,
								IGNORE_DUP_KEY = ' + CASE WHEN IRS.OptionIgnoreDupKey_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
								STATISTICS_NORECOMPUTE = ' + CASE WHEN IRS.OptionStatisticsNoRecompute_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
								STATISTICS_INCREMENTAL = ' + CASE WHEN IRS.OptionStatisticsIncremental_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
								DROP_EXISTING = OFF,
								ONLINE = OFF,
								ALLOW_ROW_LOCKS = ' + CASE WHEN IRS.OptionAllowRowLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
								ALLOW_PAGE_LOCKS = ' + CASE WHEN IRS.OptionAllowPageLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
								MAXDOP = 0,
								DATA_COMPRESSION = ' + IRS.OptionDataCompression_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
											'		ON ' +	CASE 
																WHEN IRS.IntendToPartition = 1
																THEN ISNULL(IRS.Storage_Desired, '[' + IRS.Storage_Actual + ']')
																ELSE '[' + ISNULL(IRS.Storage_Desired, IRS.Storage_Actual) + ']'
															END +	CASE 
																		WHEN IRS.StorageType_Desired = 'PARTITION_SCHEME'
																		THEN '(' + IRS.PartitionColumn_Desired + ')' 
																		ELSE '' 
																	END + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) + 
'END'
END AS CreatePKAsUniqueIndexSQL,
CASE WHEN IsPrimaryKey_Desired = 0 THEN '' ELSE 
'DROP INDEX IF EXISTS '+ IRS.SchemaName + '.' + IRS.TableName + '.' + IRS.IndexName 
END AS DropPKAsUniqueIndexSQL
		--select count(*)
		FROM DOI.fnIndexesRowStore() IRS
		UNION ALL
		SELECT	 ICS.*
				,CASE
					WHEN ICS.IsIndexMissingFromSQLServer = 1
					THEN 'CreateMissing'
					WHEN ICS.IsIndexMissingFromSQLServer = 0
						AND ICS.AreDropRecreateOptionsChanging = 1
					THEN 'DropRecreate'
					WHEN (ICS.IsIndexMissingFromSQLServer = 0
						AND ICS.NeedsPartitionLevelOperations = 0 
						AND ICS.AreDropRecreateOptionsChanging = 0 )
							AND ((ICS.FragmentationType = 'Heavy' OR ICS.AreRebuildOnlyOptionsChanging = 1)
								OR (ICS.FragmentationType = 'Light' AND ICS.AreSetOptionsChanging = 1))
					THEN 'AlterRebuild'	
					WHEN (ICS.IsIndexMissingFromSQLServer = 0
						AND ICS.NeedsPartitionLevelOperations = 1 
						AND ICS.AreDropRecreateOptionsChanging = 0 )
							AND (ICS.FragmentationType = 'Heavy' OR ICS.IsDataCompressionChanging = 1)
					THEN 'AlterRebuild-PartitionLevel'
					WHEN (ICS.IsIndexMissingFromSQLServer = 0
						AND ICS.NeedsPartitionLevelOperations = 0 
						AND ICS.AreDropRecreateOptionsChanging = 0 
						AND ICS.AreRebuildOptionsChanging = 0
						AND ICS.FragmentationType = 'None')
						AND ICS.AreSetOptionsChanging = 1
					THEN 'AlterSet'
					WHEN (ICS.IsIndexMissingFromSQLServer = 0
						AND ICS.AreDropRecreateOptionsChanging = 0 
						AND ICS.AreRebuildOptionsChanging = 0
						AND ICS.FragmentationType = 'Light'
						AND ICS.AreSetOptionsChanging = 0)
					THEN	CASE ICS.NeedsPartitionLevelOperations
								WHEN 0 THEN 'AlterReorganize'
								WHEN 1 THEN 'AlterReorganize-PartitionLevel'
							END
					ELSE 'None'
				END AS IndexUpdateType 
				,'
DROP INDEX IF EXISTS '+ ICS.SchemaName + '.' + ICS.TableName + '.' + ICS.IndexName AS DropStatement
				,
'IF NOT EXISTS (SELECT ''True'' FROM sys.indexes i INNER JOIN sys.tables t ON i.object_id = t.object_id INNER JOIN sys.schemas s ON s.schema_id = t.schema_id WHERE s.name = ''' + ICS.SchemaName + ''' AND t.name = ''' + ICS.TableName + ''' AND i.name = ''' + ICS.IndexName + ''')
BEGIN
	CREATE' + CASE WHEN ICS.IsClustered_Desired = 0 THEN ' NON' ELSE ' ' END + 'CLUSTERED COLUMNSTORE INDEX ' + ICS.IndexName + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
										'	ON ' + ICS.SchemaName + '.' + ICS.TableName + CASE WHEN ICS.IsClustered_Desired = 1 THEN '' ELSE '(' + ICS.KeyColumnList_Desired + ')' END + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
										CASE
											WHEN ICS.IsFiltered_Desired = 0
											THEN ''
											ELSE '			WHERE ' + ICS.FilterPredicate_Desired
										END + CHAR(13) + CHAR(10) +
										'				WITH (	
						DROP_EXISTING = OFF,
						COMPRESSION_DELAY = ' + CAST(ICS.OptionDataCompressionDelay_Desired AS VARCHAR(20)) + ',
						MAXDOP = 0,
						DATA_COMPRESSION = ' + ICS.OptionDataCompression_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
										'		ON ' +	CASE 
															WHEN ICS.IntendToPartition = 1 
															THEN ISNULL(ICS.Storage_Desired, '[' + ICS.Storage_Actual + ']')
															ELSE '[' + ISNULL(ICS.Storage_Desired, ICS.Storage_Actual) + ']'
														END +	CASE 
																	WHEN ICS.StorageType_Desired = 'PARTITION_SCHEME'
																	THEN '(' + ICS.PartitionColumn_Desired + ')' 
																	ELSE '' 
																END + CHAR(13) + CHAR(10) + '
END' AS CreateStatement
				,'
ALTER INDEX ' + ICS.IndexName + ' ON ' + ICS.SchemaName + '.' + ICS.TableName + CHAR(13) + CHAR(10) + 
'	SET (COMPRESSION_DELAY = ' + ICS.OptionDataCompression_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) 
AS AlterSetStatement
				,'
ALTER INDEX ' + ICS.IndexName + ' ON ' + ICS.SchemaName + '.' + ICS.TableName + CHAR(13) + CHAR(10) + 
'	REBUILD PARTITION = ALL' + CHAR(13) + CHAR(10) + 
'		WITH (	DATA_COMPRESSION = ' + ICS.OptionDataCompression_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(10) --COMPRESSION_DELAY errors out...not available yet?
AS AlterRebuildStatement
				,'
ALTER INDEX ' + ICS.IndexName + ' ON ' + ICS.SchemaName + '.' + ICS.TableName + CHAR(13) + CHAR(10) + 
'	REORGANIZE PARTITION = ALL' + CHAR(13) + CHAR(10) + 
'		WITH (COMPRESS_ALL_ROW_GROUPS = OFF)' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) 
AS AlterReorganizeStatement,
'
SET DEADLOCK_PRIORITY 10
EXEC sp_rename
	@objname = ''' + ICS.SchemaName + '.' + ICS.TableName + '.' + ICS.IndexName + ''',
	@newname = ''' + REPLACE(ICS.IndexName, ICS.TableName, ICS.TableName + '_OLD') + ''',
	@objtype = ''INDEX''' AS RenameIndexSQL,
'
SET DEADLOCK_PRIORITY 10
EXEC sp_rename
	@objname = ''' + ICS.SchemaName + '.' + ICS.TableName + '.' + REPLACE(ICS.IndexName, ICS.TableName, ICS.TableName + '_OLD') + ''',
	@newname = ''' + ICS.IndexName + ''',
	@objtype = ''INDEX''' AS RevertRenameIndexSQL,
'' AS CreatePKAsUniqueIndexSQL,
'' AS DropPKAsUniqueIndexSQL
		--select count(*)
		FROM DOI.fnIndexesColumnStore() AS ICS ) AS AllIdx



GO

GO
------------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwIndexes.sql" --------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwIndexes.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('88756793-118b-5c80-819f-ffa0fbd105be' AS UNIQUEIDENTIFIER), '8D95B431F65471BF42472012D1A1360F436FEF262AF5DA57DC56EFA858369FF5', 'Programmable Objects\Views\DOI.vwIndexes.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwIndexes.sql", ID: {88756793-118b-5c80-819f-ffa0fbd105be} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7773bdc6-e4de-5581-a821-e12c8b8370f7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8ABA094032B464CB10B0B9F0F78462106A175DC5C006A5855C0E77F877770CC5')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnFreeSpaceNeededForTableIndexOperations.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnFreeSpaceNeededForTableIndexOperations.sql", ID: {7773bdc6-e4de-5581-a821-e12c8b8370f7} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnFreeSpaceNeededForTableIndexOperations.sql" 
GO
IF OBJECT_ID('[DOI].[fnFreeSpaceNeededForTableIndexOperations]') IS NOT NULL
	DROP FUNCTION [DOI].[fnFreeSpaceNeededForTableIndexOperations];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE     FUNCTION [DOI].[fnFreeSpaceNeededForTableIndexOperations](
    @DatabaseName SYSNAME,
    @SchemaName SYSNAME, 
    @TableName SYSNAME, 
    @FileType VARCHAR(6))
RETURNS TABLE
AS RETURN

/*
    SELECT * FROM DOI.fnFreeSpaceNeededForTableIndexOperations('PaymentReporting', 'dbo', 'PayTaxes', 'data')
    SELECT * FROM DOI.fnFreeSpaceNeededForTableIndexOperations('PaymentReporting', 'dbo', 'PayTaxes', 'log')
    SELECT * FROM DOI.fnFreeSpaceNeededForTableIndexOperations('PaymentReporting', 'dbo', 'PayTaxes', 'TempDB')
*/


(
	SELECT	V.DatabaseName,
			V.SchemaName,
            V.TableName,
            DriveLetter, 
            @FileType AS FileType,
		    --SUM(V.UsedSpaceMB) AS UsedSpaceMB,
            ISNULL(CASE @FileType
                WHEN 'Data'
                THEN SUM(V.IndexSizeMB_Actual) * MAX(SSD.FreeSpaceMultiplier)
                WHEN 'Log'
                THEN SUM(V.IndexSizeMB_Actual) * MAX(SSL.FreeSpaceMultiplier)
                WHEN 'TempDB'
                THEN    CASE 
                            --in DOI we always assume that SORT_IN_TEMPDB = ON.
                            WHEN MAX(V.NeedsSpaceOnTempDBDrive) = 1 --if at least 1 index needs sort space
                            THEN MAX(V.IndexSizeMB_Actual) + ( SELECT CAST(value_in_use AS INT) AS IndexCreateMemoryKB
                                                        FROM sys.configurations 
                                                        WHERE name = 'index create memory (KB)') --then take size of largest index + IndexCreateMemoryKB value
                            ELSE 0
                        END * MAX(SST.FreeSpaceMultiplier)
            END, 0) AS SpaceNeededOnDrive
    FROM DOI.vwIndexes V
        CROSS JOIN (SELECT CAST(SettingValue AS INT) AS FreeSpaceMultiplier 
                    FROM DOI.DOISettings 
                    WHERE SettingName = 'FreeSpaceCheckerTestMultiplierForDataFiles') SSD
        CROSS JOIN (SELECT CAST(SettingValue AS INT) AS FreeSpaceMultiplier 
                    FROM DOI.DOISettings 
                    WHERE SettingName = 'FreeSpaceCheckerTestMultiplierForLogFiles') SSL
        CROSS JOIN (SELECT CAST(SettingValue AS INT) AS FreeSpaceMultiplier 
                    FROM DOI.DOISettings 
                    WHERE SettingName = 'FreeSpaceCheckerTestMultiplierForTempDBFiles') SST
    WHERE V.DatabaseName = @DatabaseName
        AND V.SchemaName = @SchemaName
        AND V.TableName = @TableName
    GROUP BY V.DatabaseName, V.SchemaName, V.TableName, DriveLetter
)
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnFreeSpaceNeededForTableIndexOperations.sql" --


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnFreeSpaceNeededForTableIndexOperations.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('7773bdc6-e4de-5581-a821-e12c8b8370f7' AS UNIQUEIDENTIFIER), '8ABA094032B464CB10B0B9F0F78462106A175DC5C006A5855C0E77F877770CC5', 'Programmable Objects\Functions\DOI.fnFreeSpaceNeededForTableIndexOperations.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnFreeSpaceNeededForTableIndexOperations.sql", ID: {7773bdc6-e4de-5581-a821-e12c8b8370f7} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('271d2afd-90b9-5db5-8530-c8885d0891e7' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AAF2ACA4669148748D1B7151E12CFD197DEBEDF9CF5806F5B8CD3B862B2C41EF')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spPrintOutLongSQL.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spPrintOutLongSQL.sql", ID: {271d2afd-90b9-5db5-8530-c8885d0891e7} *****';

GO


-------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spPrintOutLongSQL.sql" ---------
GO
IF OBJECT_ID('[DOI].[spPrintOutLongSQL]') IS NOT NULL
	DROP PROCEDURE [DOI].[spPrintOutLongSQL];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spPrintOutLongSQL]
        @SQLInput NVARCHAR(MAX),
        @VariableName NVARCHAR(128),
        @Debug BIT = 0
AS

/******************************************************************************************************
**    Name: spPrintOutLongSQL.sql
**          Script Type: Stored Procedure
**    Desc: Description
**
**    Auth: Sam Bendayan
**    Database:        HRMS_GLOBALDATA
**          Scrum Team Name: Sherpas
**          VersionOne Story #: ''
**    Resync Parent Node: ''
*******************************************************************************************************
**          USAGE:
        DECLARE @SQLInput NVARCHAR(MAX)

        --SET @SQLInput = ''
        SET @SQLInput = (select replicate('a', 4000))+ char(13)+ char(10)
        SET @SQLInput = @SQLInput +        (select replicate('b', 4000))+ char(13) + char(10)
        SET @SQLInput = @SQLInput +        (select replicate('C', 4000))+ char(13) + char(10)
        SET @SQLInput = @SQLInput +        (select replicate('D', 4000))+ char(13) + char(10)
        SET @SQLInput = @SQLInput +        (select replicate('E', 4000))+ char(13) + char(10)
        SET @SQLInput = @SQLInput +        (select replicate('F', 4000))+ char(13) + char(10)
        SET @SQLInput = @SQLInput +        (select replicate('G', 4000))+ char(13) + char(10)
        SET @SQLInput = @SQLInput +        (select replicate('H', 4000))+ char(13) + char(10)
        --SET @Sqlinput = @SQLInput +  ')'

DECLARE @v_PrintSQL VARCHAR(MAX)
SET @v_PrintSQL = 'PRINT ''' + REPLACE(REPLACE(@SQLInput, '''', ''''''), CHAR(13) + CHAR(10), ''' PRINT ''') + ''''
EXEC(@v_PrintSQL)


        EXEC dbo.spPrintOutLongSQL
                @SQLInput = @SQLInput,
                @VariableName = '@SQL',
                @Debug = 0


                 SELECT ASCII('     ')
                 SELECT ASCII('     ')
                THE PROBLEM WE'RE TRYING TO SOLVE HERE IS THAT A PRINT COMMAND CAN ONLY PRINT 8,000 CHARACTERS.
                SO WE HAVE TO HAVE MULTIPLE PRINT COMMANDS TO PRINT OUT A STRING LONGER THAN THAT.
                BUT, EVERY PRINT COMMAND STARTS ON A NEW LINE (ADDS A CRLF)...THIS IS THE PROBLEM.
                HOW CAN WE REMOVE THIS CRLF THAT THE PRINT COMMAND GENERATES?
*******************************************************************************************************/
SET NOCOUNT ON

BEGIN TRY
--get length of @SQLInput
--loop through it and print out each 4,000 character chunk.
    DECLARE @VariableLength NUMERIC(10,2),
            @PrintSQL                NVARCHAR(MAX),
            @ParmDefinition NVARCHAR(500),
            @Chunk          NVARCHAR(4000),
            @SubstringStart INT,
            @SubstringEnd   INT

    SET @VariableLength = LEN(@SQLInput)
    SET @ParmDefinition = N'@SQLInput NVARCHAR(MAX)'
    SET @PrintSQL = 'PRINT ''--' + @VariableName + ':  ''' + CHAR(10)
    SET @SubstringStart = 0
    SET @SubstringEnd = 4000
        SET @SQLInput = @SQLInput + CHAR(13) + CHAR(10)

        IF (@SubstringStart + @SubstringEnd) < @VariableLength
        BEGIN
                WHILE (@SubstringStart + @SubstringEnd) < @VariableLength
                BEGIN
                        --FIX "BROKEN LINE AT 4,000 CHARACTER POSITION" PROBLEM.
                        SELECT @SubstringStart = @SubstringStart + CASE @SubstringStart WHEN 0 THEN 1 ELSE @SubstringEnd END

                        SET @Chunk = SUBSTRING(@SQLInput, @SubstringStart, 4000)
                        IF RIGHT(@Chunk, 1) NOT IN ('', CHAR(10), CHAR(32), CHAR(9), CHAR(13))--IF THERE IS A LETTER IN THE 4,000th POSITION, ASSUME THAT IT'S A BROKEN LINE...
                        BEGIN
                                SET @SubstringEnd = LEN(@Chunk) - (CHARINDEX(CHAR(10), REVERSE(@Chunk))) --...AND STOP THE PRINT AT THE END OF THE PREVIOUS LINE.
                        END
                        ELSE
                        BEGIN
                                SET @SubstringEnd = LEN(@Chunk) --OTHERWISE, END POSITION IS OK.
                        END

                        IF @Debug = 1
                        BEGIN
                           PRINT 'PRINT SUBSTRING(@SQLInput, ' + CAST(@SubstringStart AS NVARCHAR(10)) + ', ' + CAST(@SubstringEnd AS NVARCHAR(10)) + ')'
                        END

                        SET @PrintSQL = @PrintSQL + 'PRINT SUBSTRING(@SQLInput, ' + CAST(@SubstringStart AS NVARCHAR(10)) + ', ' + CAST(@SubstringEnd AS NVARCHAR(10)) + ')'
                END
        END
        ELSE
        BEGIN
                SET @PrintSQL = @PrintSQL + 'PRINT @SQLInput'
        END

    IF @Debug = 1
    BEGIN
       PRINT @VariableLength
    END

    IF @Debug = 0
    BEGIN
        EXEC sp_executeSQL
            @PrintSQL,
            @ParmDefinition,
            @SQLInput = @SQLInput
    END
    ELSE
    BEGIN
            SET @PrintSQL = @PrintSQL + 'PRINT ''--' + CAST(@VariableLength AS VARCHAR(20)) + ' characters.'''
    END
END TRY

--ERROR HANDLING
BEGIN CATCH
        --Call central error handling proc.
        THROW;
END CATCH
GO

GO
--------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spPrintOutLongSQL.sql" ----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spPrintOutLongSQL.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('271d2afd-90b9-5db5-8530-c8885d0891e7' AS UNIQUEIDENTIFIER), 'AAF2ACA4669148748D1B7151E12CFD197DEBEDF9CF5806F5B8CD3B862B2C41EF', 'Programmable Objects\Stored Procedures\DOI.spPrintOutLongSQL.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spPrintOutLongSQL.sql", ID: {271d2afd-90b9-5db5-8530-c8885d0891e7} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ccb70d27-fb98-54e4-a033-ad1ed0914a0e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0246FDD63DE04E734115B24316BEAD1A9DFAD501450B7B224EF5AFA9147BC483')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\dbo.spEnableDisableAllFKs.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\dbo.spEnableDisableAllFKs.sql", ID: {ccb70d27-fb98-54e4-a033-ad1ed0914a0e} *****';

GO


------ BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\dbo.spEnableDisableAllFKs.sql" -------
GO
IF OBJECT_ID('[dbo].[spEnableDisableAllFKs]') IS NOT NULL
	DROP PROCEDURE [dbo].[spEnableDisableAllFKs];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   PROCEDURE [dbo].[spEnableDisableAllFKs]
	@Action VARCHAR(10) ,
	@Debug BIT = 0

AS

/*
	exec dbo.spEnableDisableAllFKs 'enable', 1

*/
BEGIN TRY 
	DECLARE @SQL NVARCHAR(MAX) = ''

	select @SQL += 'ALTER TABLE ' + s.name + '.[' + t.name + ']' + CASE WHEN @Action = 'Enable' THEN ' ' ELSE ' NO' END + 'CHECK CONSTRAINT ' + FK.name + CHAR(13) + CHAR(10)
	from sys.foreign_keys fk
		INNER JOIN sys.tables t on fk.parent_object_id = t.object_id
		INNER JOIN sys.schemas s on t.schema_id = s.schema_id
	where s.name <> 'Utility' 
        AND is_disabled = CASE WHEN @Action = 'Disable' THEN 0 ELSE 1 END

	IF @Debug = 1
	BEGIN
		EXEC DOI.spPrintOutLongSQL
			@SQLInput = @SQL,
			@VariableName = '@SQL'
	END
	ELSE
	BEGIN
		EXEC(@SQL)
	END
END TRY
BEGIN CATCH
	THROW;
END CATCH
GO

GO
------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\dbo.spEnableDisableAllFKs.sql" --------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\dbo.spEnableDisableAllFKs.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('ccb70d27-fb98-54e4-a033-ad1ed0914a0e' AS UNIQUEIDENTIFIER), '0246FDD63DE04E734115B24316BEAD1A9DFAD501450B7B224EF5AFA9147BC483', 'Programmable Objects\Stored Procedures\dbo.spEnableDisableAllFKs.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\dbo.spEnableDisableAllFKs.sql", ID: {ccb70d27-fb98-54e4-a033-ad1ed0914a0e} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8ec09b54-3bbb-5770-93b4-0378bf46ff3f' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B8FA77F367E34B074D586ED538DF51F949D95BDDA32938DA15969C805230D21F')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.sp_ExecuteSQLByBatch.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.sp_ExecuteSQLByBatch.sql", ID: {8ec09b54-3bbb-5770-93b4-0378bf46ff3f} *****';

GO


------ BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.sp_ExecuteSQLByBatch.sql" --------
GO
IF OBJECT_ID('[DOI].[sp_ExecuteSQLByBatch]') IS NOT NULL
	DROP PROCEDURE [DOI].[sp_ExecuteSQLByBatch];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[sp_ExecuteSQLByBatch]
        @SQL NVARCHAR(MAX),
        @Debug BIT = 0
AS

SET NOCOUNT ON

BEGIN TRY
        --TAKE SQL STRING AND EXECUTE ONE BATCH AT A TIME (THE CODE IN BETWEEN 'GO' STATEMENTS.
        DECLARE @SQLBatch NVARCHAR(MAX),
                @SQLLength INT,
                @CurrentPosition INT,
                @GOString NVARCHAR(20),
                @GOPosition INT

        SET @GOString = '%[' + CHAR(10) + CHAR(13) + SPACE(1) + CHAR(9) + ']GO[' + CHAR(10) + CHAR(13) + SPACE(1) + CHAR(9) + ']%'
        SET @SQL = RTRIM(@SQL)--LEN FUNCTION DOESN'T COUNT TRAILING BLANKS, SO WE REMOVE THEM.
        SET @SQL = @SQL + CHAR(13) + CHAR(10) --IF THE SQL DOESN'T HAVE A CRLF AT THE END THIS CODE BREAKS.
        SET @SQLLength = LEN(@SQL)
        SET @CurrentPosition = 0

        WHILE (@CurrentPosition <= @SQLLength)
        BEGIN
                SET @GOPosition =   CASE
                                        WHEN PATINDEX(@GOString, @SQL) = 0 --IF NO MORE 'GO' STATEMENTS ARE FOUND...
                                        THEN @SQLLength + 1--GO TO THE END OF THE STRING.
                                        ELSE PATINDEX(@GOString, @SQL)
                                    END

                --SELECT THE SQL BATCH BETWEEN THE 'GO' STATEMENTS...
                SELECT @SQLBatch = SUBSTRING(@SQL, @CurrentPosition, @GOPosition - @CurrentPosition)

                --COMMENT OUT THE 'GO' SO THE PATINDEX DOESN'T FIND IT AGAIN.
                IF @GOPosition <> @SQLLength + 1 --IF IT'S AN ACTUAL 'GO' STRING...
                BEGIN
                    SELECT @SQL = STUFF(@SQL, @GOPosition, 2, '--')
                                END

                --SET CURRENT POSITION TO SKIP 'GO' STMT AND GET READY FOR NEXT BATCH.
                SET @CurrentPosition = @CurrentPosition + (@GOPosition - @CurrentPosition) + 4

                IF @Debug = 1
                BEGIN
                        --PRINT '@SQL ' + @SQL
                        PRINT '/****************************        BATCH        ***********************************/'
                        PRINT '--@SQLLength ' + CAST(@SQLLength AS NVARCHAR(20))
                        PRINT '--@GOPosition ' +  CAST(@GOPosition AS NVARCHAR(20))
                        IF (LEN(@SQLBatch) <= 4000)
                        BEGIN
                                                        PRINT @SQLBatch
                                                END
                                                ELSE
                                                BEGIN
                            EXEC DOI.spPrintOutLongSQL
                                        @SQLInput = @SQLBatch,
                                        @VariableName = '@SQLBatch',
                                        @Debug = 0
                                                END
                        PRINT '--Length of SQL Batch ' + CAST(LEN(@SQLBatch) AS NVARCHAR(20))
                        PRINT '--@CurrentPosition ' +  CAST(@CurrentPosition AS NVARCHAR(20))
                END
                ELSE
                BEGIN
                        EXEC dbo.sp_ExecuteSQL @SQLBatch
                END
        END
END TRY

--ERROR HANDLING
BEGIN CATCH
        --Call central error handling proc.
        THROW;
END CATCH

GO

GO
------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.sp_ExecuteSQLByBatch.sql" ---------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.sp_ExecuteSQLByBatch.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('8ec09b54-3bbb-5770-93b4-0378bf46ff3f' AS UNIQUEIDENTIFIER), 'B8FA77F367E34B074D586ED538DF51F949D95BDDA32938DA15969C805230D21F', 'Programmable Objects\Stored Procedures\DOI.sp_ExecuteSQLByBatch.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.sp_ExecuteSQLByBatch.sql", ID: {8ec09b54-3bbb-5770-93b4-0378bf46ff3f} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cc2058db-b346-5474-864f-e07e20ea5b8a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BBA85783F5F94B75703841B3234B00D6BAF51571576DF7F77DAF44B604C95880')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spBackupTableWithDateName.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spBackupTableWithDateName.sql", ID: {cc2058db-b346-5474-864f-e07e20ea5b8a} *****';

GO


---- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spBackupTableWithDateName.sql" -----
GO
IF OBJECT_ID('[DOI].[spBackupTableWithDateName]') IS NOT NULL
	DROP PROCEDURE [DOI].[spBackupTableWithDateName];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   PROCEDURE [DOI].[spBackupTableWithDateName]
	@SchemaName SYSNAME,
	@TableName SYSNAME,
	@Debug BIT = 0

AS

/*
	EXEC Utility.spBackupTableWithDateName 
		@SchemaName = 'Utility',
		@TableName = 'IndexesNotInMetadata',
		@Debug = 1
*/

DECLARE @SQL NVARCHAR(MAX) = ''

DECLARE @now VARCHAR(30) = CONVERT(VARCHAR(30), SYSDATETIME(),112)

SELECT @SQL += '
IF OBJECT_ID(''' + @SchemaName + '.' + @TableName + ''') IS NOT NULL
BEGIN
	--IF TABLE HAS DATA, BACK IT UP BEFORE DROPPING.
	IF EXISTS (SELECT ''True'' FROM ' + @SchemaName + '.' + @TableName + ')
	BEGIN
		IF OBJECT_ID(''' + @SchemaName + '.' + @TableName + '_' + @now + ''') IS NOT NULL
		BEGIN	
			DROP TABLE ' + @SchemaName + '.' + @TableName + '_' + @now + '
		END

		SELECT * INTO ' + @SchemaName + '.' + @TableName + '_' + @now + ' FROM ' + @SchemaName + '.' + @TableName + '
	END
END'

IF @Debug = 1
BEGIN
	EXEC DOI.spPrintOutLongSQL 
		@SQLInput = @SQL ,
	    @VariableName = N'@SQL'
END
ELSE
BEGIN
	EXEC dbo.sp_ExecuteSQL 
		@SQL = @SQL
END
GO

GO
----- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spBackupTableWithDateName.sql" ------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spBackupTableWithDateName.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('cc2058db-b346-5474-864f-e07e20ea5b8a' AS UNIQUEIDENTIFIER), 'BBA85783F5F94B75703841B3234B00D6BAF51571576DF7F77DAF44B604C95880', 'Programmable Objects\Stored Procedures\DOI.spBackupTableWithDateName.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spBackupTableWithDateName.sql", ID: {cc2058db-b346-5474-864f-e07e20ea5b8a} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7cf1bb60-e56b-5514-af41-ff394684c079' AS UNIQUEIDENTIFIER) AND [script_checksum] = '40EE4FAD7A9E792ACE0335498F1E34AF53A7F3AF14AA1EF2838FF16D88C9BBF8')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spEnableDisableAllFKs.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spEnableDisableAllFKs.sql", ID: {7cf1bb60-e56b-5514-af41-ff394684c079} *****';

GO


------ BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spEnableDisableAllFKs.sql" -------
GO
IF OBJECT_ID('[DOI].[spEnableDisableAllFKs]') IS NOT NULL
	DROP PROCEDURE [DOI].[spEnableDisableAllFKs];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE     PROCEDURE [DOI].[spEnableDisableAllFKs]
    @DatabaseName SYSNAME,
	@Action VARCHAR(10) ,
	@Debug BIT = 0

AS

/*
	exec dbo.spEnableDisableAllFKs 
    'enable', 1

*/
BEGIN TRY 
	DECLARE @SQL NVARCHAR(MAX) = 'USE ' + @DatabaseName + CHAR(13) + CHAR(10)

	SELECT @SQL += 'ALTER TABLE ' + ps.name + '.[' + pt.name + ']' + CASE WHEN @Action = 'Enable' THEN ' ' ELSE ' NO' END + 'CHECK CONSTRAINT ' + FK.name + CHAR(13) + CHAR(10)
    --SELECT fk.*
	FROM DOI.SysForeignKeys fk
        INNER JOIN DOI.SysDatabases D ON D.database_id = fk.database_id
		INNER JOIN DOI.SysTables pt ON pt.database_id = fk.database_id
            AND pt.object_id = fk.parent_object_id
		INNER JOIN DOI.SysSchemas ps ON ps.database_id = pt.database_id
            AND pt.schema_id = ps.schema_id
	WHERE is_disabled = CASE WHEN @Action = 'Disable' THEN 0 ELSE 1 END
        AND D.name = @DatabaseName

	IF @Debug = 1
	BEGIN
		EXEC DOI.spPrintOutLongSQL
			@SQLInput = @SQL,
			@VariableName = '@SQL'
	END
	ELSE
	BEGIN
		EXEC(@SQL)
	END
END TRY
BEGIN CATCH
	THROW;
END CATCH
GO

GO
------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spEnableDisableAllFKs.sql" --------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spEnableDisableAllFKs.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('7cf1bb60-e56b-5514-af41-ff394684c079' AS UNIQUEIDENTIFIER), '40EE4FAD7A9E792ACE0335498F1E34AF53A7F3AF14AA1EF2838FF16D88C9BBF8', 'Programmable Objects\Stored Procedures\DOI.spEnableDisableAllFKs.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spEnableDisableAllFKs.sql", ID: {7cf1bb60-e56b-5514-af41-ff394684c079} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f92424a4-dbd0-5283-b1b0-1ecfcff8ff2b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '442316FCC7E0782767DAB79DE04E27C989C6F91824431E27A17C9DFC3908F465')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwForeignKeys.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwForeignKeys.sql", ID: {f92424a4-dbd0-5283-b1b0-1ecfcff8ff2b} *****';

GO


---------------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwForeignKeys.sql" -----------------
GO
IF OBJECT_ID('[DOI].[vwForeignKeys]') IS NOT NULL
	DROP VIEW [DOI].[vwForeignKeys];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   VIEW [DOI].[vwForeignKeys]

/*
    select * from DOI.vwForeignKeys
    
*/

AS

SELECT  FK.*,
		('FK_' + ParentTableName + '_' + ReferencedTableName + '_' + REPLACE(FK.ParentColumnList_Desired, ',', '_')) AS FKName,
        ('
USE ' + DatabaseName + ';
ALTER TABLE ' + FK.DatabaseName + '.' + ParentSchemaName + '.[' + ParentTableName + '] WITH NOCHECK ADD 
	CONSTRAINT ' + 'FK_' + ParentTableName + '_' + ReferencedTableName + '_' + REPLACE(ParentColumnList_Desired, ',', '_') + ' 
	    FOREIGN KEY (' + ParentColumnList_Desired + ') 
	    	REFERENCES ' + FK.DatabaseName + '.' + ReferencedSchemaName + '.[' + ReferencedTableName + '](' + ParentColumnList_Desired + ')') 
AS CreateFKSQL,
		('
USE ' + DatabaseName + ';
IF NOT EXISTS(  SELECT ''True''
                FROM DOI.SysForeignKeys fku
                    INNER JOIN DOI.SysForeignKeys fks ON fk.parent_object_id = pt.object_id
                WHERE fku.ParentSchemaName = ''' + ParentSchemaName + '''
                    AND fku.ParentTableName = ''' + ParentTableName + '''
                    AND fku.ReferencedSchemaName = ''' + ReferencedSchemaName + '''
                    AND fku.ReferencedTableName = ''' + ReferencedTableName + '''
                    AND fku.ParentColumnList_Desired = ''' + ParentColumnList_Actual + '''
                    AND fku.ReferencedColumnList_Desired = ''' + ReferencedColumnList_Actual + ''')
    AND EXISTS( SELECT ''True''
                FROM DOI.SysTables t
                    INNER JOIN DOI.SysDatabases d ON d.database_id = t.database_id
                    INNER JOIN DOI.SysSchemas s ON t.schema_id = s.schema_id
                WHERE d.name = ''' + DatabaseName + '''
                    AND s.name = ''' + ParentSchemaName + '''
                    AND t.name = ''' + ParentTableName + ''')
    AND EXISTS( SELECT ''True''
                FROM DOI.SysTables t
                    INNER JOIN DOI.SysDatabases d ON d.database_id = t.database_id
                    INNER JOIN DOI.SysSchemas s ON t.schema_id = s.schema_id
                WHERE d.name = ''' + DatabaseName + '''
                    AND s.name = ''' + ReferencedSchemaName + '''
                    AND t.name = ''' + ReferencedTableName + ''')
BEGIN
    ALTER TABLE ' + FK.DatabaseName + '.' + ParentSchemaName + '.[' + ParentTableName + '] WITH NOCHECK ADD 
	    CONSTRAINT ' + 'FK_' + ParentTableName + '_' + ReferencedTableName + '_' + REPLACE(ParentColumnList_Desired, ',', '_') + ' 
	    	FOREIGN KEY (' + ParentColumnList_Desired + ') 
	    		REFERENCES ' + ReferencedSchemaName + '.[' + ReferencedTableName + '](' + ReferencedColumnList_Desired + ')
END') AS CreateFKWithExistenceCheckSQL,
        ('
USE ' + DatabaseName + ';
IF EXISTS(  SELECT ''True''
            FROM DOI.SysForeignKeys fku
                INNER JOIN DOI.SysForeignKeys fks ON fk.parent_object_id = pt.object_id
            WHERE fku.ParentSchemaName = ''' + ParentSchemaName + '''
                AND fku.ParentTableName = ''' + ParentTableName + '''
                AND fku.ReferencedSchemaName = ''' + ReferencedSchemaName + '''
                AND fku.ReferencedTableName = ''' + ReferencedTableName + '''
                AND fku.ParentColumnList_Desired = ''' + ParentColumnList_Actual + '''
                AND fku.ReferencedColumnList_Desired = ''' + ReferencedColumnList_Actual + ''')
    AND EXISTS( SELECT ''True''
                FROM DOI.SysTables t
                    INNER JOIN DOI.SysDatabases d ON d.database_id = t.database_id
                    INNER JOIN DOI.SysSchemas s ON t.schema_id = s.schema_id
                WHERE d.name = ''' + DatabaseName + '''
                    AND s.name = ''' + ParentSchemaName + '''
                    AND t.name = ''' + ParentTableName + ''')
    AND EXISTS( SELECT ''True''
                FROM DOI.SysTables t
                    INNER JOIN DOI.SysDatabases d ON d.database_id = t.database_id
                    INNER JOIN DOI.SysSchemas s ON t.schema_id = s.schema_id
                WHERE d.name = ''' + DatabaseName + '''
                    AND s.name = ''' + ReferencedSchemaName + '''
                    AND t.name = ''' + ReferencedTableName + ''')
BEGIN
    ALTER TABLE ' + FK.DatabaseName + '.' + ParentSchemaName + '.[' + ParentTableName + '] DROP CONSTRAINT ' + 'FK_' + ParentTableName + '_' + ReferencedTableName + '_' + REPLACE(ParentColumnList_Desired, ',', '_') + '
END') AS DropFKSQL,
	   ('
USE ' + DatabaseName + ';
ALTER TABLE ' + FK.DatabaseName + '.' + ParentSchemaName + '.[' + ParentTableName + '] NOCHECK CONSTRAINT FK_' + ParentTableName + '_' + ReferencedTableName + '_' + REPLACE(ParentColumnList_Desired, ',', '_')) 
AS DisableFKSQL


FROM DOI.ForeignKeys FK
    --OUTER APPLY (   SELECT  CASE 
				--		  WHEN ISNULL(NewPf.name, '') <> ISNULL(ExistingPf.name, '') 
				--			 AND TTP.IntendToPartition = 1 
				--		  THEN 1 
				--		  ELSE 0 
				--	   END AS IsPartitioningChanging
    --                FROM DOI.Tables TTP
				--    INNER JOIN ' + DatabaseName + '.sys.schemas s ON TTP.SchemaName = s.name
				--    INNER JOIN ' + DatabaseName + '.sys.tables t ON s.schema_id = t.schema_id
				--	   AND t.name = TTP.TableName
				--    INNER JOIN ' + DatabaseName + '.sys.indexes i ON i.object_id = t.object_id
				--    INNER JOIN DOI.IndexesRowStore IRS ON s.name = IRS.SchemaName
				--	   AND t.name = IRS.TableName
				--	   AND i.name = IRS.IndexName 
				--    INNER JOIN (SELECT name AS ExistingStorage, data_space_id, type_desc COLLATE DATABASE_DEFAULT AS ExistingStorageType
				--			 FROM ' + DatabaseName + '.sys.data_spaces) ExistingDS 
				--	   ON ExistingDS.data_space_id = I.data_space_id
				--    INNER JOIN (SELECT name AS NewStorage, data_space_id, type_desc COLLATE DATABASE_DEFAULT AS NewStorageType
				--			 FROM ' + DatabaseName + '.sys.data_spaces) NewDS 
				--	   ON NewDS.NewStorage = IRS.NewStorage
				--    LEFT JOIN ' + DatabaseName + '.sys.partition_schemes ExistingPs ON ExistingDS.ExistingStorage = ExistingPs.name
				--    LEFT JOIN ' + DatabaseName + '.sys.partition_functions ExistingPf ON ExistingPs.function_id = ExistingPf.function_id
				--    LEFT JOIN ' + DatabaseName + '.sys.partition_schemes NewPs ON NewPs.name = NewDS.NewStorage
				--    LEFT JOIN ' + DatabaseName + '.sys.partition_functions NewPf ON NewPf.function_id = NewPs.function_id
    --                WHERE s.name = FK.ParentSchemaName
    --                    AND t.name = FK.ParentTableName
    --                    AND s.name  <> 'DOI'
    --                    AND (ISNULL(NewPf.name, '') <> ISNULL(ExistingPf.name, '')))ipc2



GO

GO
----------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwForeignKeys.sql" ------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwForeignKeys.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('f92424a4-dbd0-5283-b1b0-1ecfcff8ff2b' AS UNIQUEIDENTIFIER), '442316FCC7E0782767DAB79DE04E27C989C6F91824431E27A17C9DFC3908F465', 'Programmable Objects\Views\DOI.vwForeignKeys.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwForeignKeys.sql", ID: {f92424a4-dbd0-5283-b1b0-1ecfcff8ff2b} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('56cb04b5-a134-5cac-bf77-c8d6b2363b86' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7EF6C917189453F8A33C5EDD78A2B7E5CAF801FC6DD6543799A67BC13E5E1708')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spForeignKeysDrop.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spForeignKeysDrop.sql", ID: {56cb04b5-a134-5cac-bf77-c8d6b2363b86} *****';

GO


-------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spForeignKeysDrop.sql" ---------
GO
IF OBJECT_ID('[DOI].[spForeignKeysDrop]') IS NOT NULL
	DROP PROCEDURE [DOI].[spForeignKeysDrop];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spForeignKeysDrop]
    @DatabaseName           SYSNAME,
	@ReferencedSchemaName	SYSNAME = NULL,
	@ReferencedTableName	SYSNAME = NULL,
	@ParentSchemaName		SYSNAME = NULL,
	@ParentTableName		SYSNAME = NULL,
	@Debug BIT = 0
AS

/*
	EXEC DOI.spForeignKeysDrop
        @DatabaseName = 'PaymentReporting',
		@ReferencedSchemaName	= 'dbo',
		@ReferencedTableName	= 'Pays',
		@Debug = 1

	EXEC DOI.spForeignKeysDrop
		@ForMetadataTablesOnly = 0,
        @Debug = 1

	EXEC DOI.spForeignKeysDrop
        @DatabaseName = 'PaymentReporting',
		@ParentSchemaName		= 'dbo',
		@ParentTableName		= 'Pays',
		@Debug = 1
*/
BEGIN TRY 
	DECLARE @SQL NVARCHAR(MAX) = 'USE ' + @DatabaseName + CHAR(13) + CHAR(10)

	SELECT @SQL += '
IF EXISTS(  SELECT ''True''
            FROM sys.foreign_keys fk 
            WHERE fk.name = ''' + FK.name + ''')
BEGIN    
    ALTER TABLE ' + ps.name + '.[' + pt.name + '] DROP CONSTRAINT ' + FK.NAME + '
END'
    --SELECT fk.*
	FROM DOI.SysForeignKeys fk
        INNER JOIN DOI.SysDatabases D ON D.database_id = fk.database_id
		INNER JOIN DOI.SysTables pt ON pt.database_id = fk.database_id
            AND pt.object_id = fk.parent_object_id
		INNER JOIN DOI.SysSchemas ps ON ps.database_id = pt.database_id
            AND pt.schema_id = ps.schema_id
		INNER JOIN DOI.SysTables rt ON rt.database_id = fk.database_id
            AND rt.object_id = fk.referenced_object_id
		INNER JOIN DOI.SysSchemas rs ON rs.database_id = rt.database_id
            AND rt.schema_id = rs.schema_id
	WHERE D.NAME = @DatabaseName
        AND rs.name = CASE WHEN @ReferencedSchemaName IS NOT NULL THEN @ReferencedSchemaName ELSE rs.name END
		AND rt.name = CASE WHEN @ReferencedTableName IS NOT NULL THEN @ReferencedTableName ELSE rt.name END
		AND ps.name = CASE WHEN @ParentSchemaName IS NOT NULL THEN @ParentSchemaName ELSE ps.name END 
		AND pt.name = CASE WHEN @ParentTableName IS NOT NULL THEN @ParentTableName ELSE pt.name END

	IF @Debug = 1
	BEGIN
		EXEC DOI.spPrintOutLongSQL 
			@SQLInput = @SQL ,
			@VariableName = N'@SQL'
	
	END
	ELSE
	BEGIN
		EXEC(@SQL)
	END
END TRY

BEGIN CATCH
	THROW;
END CATCH 
GO

GO
--------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spForeignKeysDrop.sql" ----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spForeignKeysDrop.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('56cb04b5-a134-5cac-bf77-c8d6b2363b86' AS UNIQUEIDENTIFIER), '7EF6C917189453F8A33C5EDD78A2B7E5CAF801FC6DD6543799A67BC13E5E1708', 'Programmable Objects\Stored Procedures\DOI.spForeignKeysDrop.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spForeignKeysDrop.sql", ID: {56cb04b5-a134-5cac-bf77-c8d6b2363b86} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('81b6abe6-9847-5909-b19b-a49cd2aa86e8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '31B88E8952A80541D2FEE33EC5FBFCF46B97BB66DE0EFA4FFDAFF9397A45EDB5')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spForeignKeysAdd.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spForeignKeysAdd.sql", ID: {81b6abe6-9847-5909-b19b-a49cd2aa86e8} *****';

GO


-------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spForeignKeysAdd.sql" ----------
GO
IF OBJECT_ID('[DOI].[spForeignKeysAdd]') IS NOT NULL
	DROP PROCEDURE [DOI].[spForeignKeysAdd];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   PROCEDURE [DOI].[spForeignKeysAdd]
    @DatabaseName           SYSNAME,
	@ReferencedSchemaName	SYSNAME = NULL,
	@ReferencedTableName	SYSNAME = NULL,
	@ParentSchemaName		SYSNAME = NULL,
	@ParentTableName		SYSNAME = NULL,
    @UseExistenceCheck      BIT = 0,
    @CallingProcess         VARCHAR(20) = 'Deployment',
	@Debug BIT = 0
AS

/*
	EXEC DOI.spForeignKeysAdd
        @DatabaseName = 'PaymentReporting',
		@ReferencedSchemaName = 'dbo',
		@ReferencedTableName = 'PayGarnishments',
		@Debug = 1

	EXEC DOI.spForeignKeysAdd
		@ReferencedSchemaName = NULL,
		@ReferencedTableName = NULL,
		@Debug = 1

	EXEC DOI.spForeignKeysAdd
		@ParentSchemaName = 'dbo',
		@ParentTableName = 'Pays',
		@Debug = 1

	EXEC DOI.spForeignKeysAdd
		@ForMetadataTablesOnly = 1,
		@Debug = 1

*/
BEGIN TRY 
    IF @CallingProcess NOT IN ('Deployment', 'Job')
    BEGIN
        RAISERROR('Invalid value for @CallingProcess.', 16, 1)
    END
    
	EXEC DOI.spForeignKeysDrop
        @DatabaseName = @DatabaseName,
		@ReferencedSchemaName = @ReferencedSchemaName,
		@ReferencedTableName = @ReferencedTableName

	DECLARE @AddFKsSQL VARCHAR(MAX) = 'USE ' + @DatabaseName + CHAR(13) + CHAR(10)

	SELECT @AddFKsSQL += CASE WHEN @UseExistenceCheck = 1 THEN CreateFKWithExistenceCheckSQL ELSE CreateFKSQL END + CHAR(13) + CHAR(10)
	--select *
	FROM DOI.vwForeignKeys
	WHERE DatabaseName = @DatabaseName
        AND ParentSchemaName <> 'DOI'
        AND ReferencedSchemaName <> 'DOI'
        AND ReferencedSchemaName = CASE WHEN @ReferencedSchemaName IS NOT NULL THEN @ReferencedSchemaName ELSE ReferencedSchemaName END
		AND ReferencedTableName = CASE WHEN @ReferencedTableName IS NOT NULL THEN @ReferencedTableName ELSE ReferencedTableName END
		AND ParentSchemaName = CASE WHEN @ParentSchemaName IS NOT NULL THEN @ParentSchemaName ELSE ParentSchemaName END
		AND ParentTableName = CASE WHEN @ParentTableName IS NOT NULL THEN @ParentTableName ELSE ParentTableName END
        AND DeploymentTime = @CallingProcess
	ORDER BY ReferencedTableName

    SELECT @AddFKsSQL += '
    EXEC dbo.spEnableDisableAllFKs 
	   @Action = ''DISABLE'''

    IF @Debug = 1
    BEGIN
	   EXEC DOI.spPrintOutLongSQL 
		  @SQLInput = @AddFKsSQL ,
		  @VariableName = N'@AddFKsSQL'
    END
    ELSE
    BEGIN
	   EXEC(@AddFKsSQL)
    END
END TRY

BEGIN CATCH
	THROW;
END CATCH 
GO

GO
--------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spForeignKeysAdd.sql" -----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spForeignKeysAdd.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('81b6abe6-9847-5909-b19b-a49cd2aa86e8' AS UNIQUEIDENTIFIER), '31B88E8952A80541D2FEE33EC5FBFCF46B97BB66DE0EFA4FFDAFF9397A45EDB5', 'Programmable Objects\Stored Procedures\DOI.spForeignKeysAdd.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spForeignKeysAdd.sql", ID: {81b6abe6-9847-5909-b19b-a49cd2aa86e8} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c382ae0d-9905-5d6e-b435-6fb7d1b2b74f' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8EF6EAAD4581F19A8E4D746F5F83E785A9BC31969FAA14AD60E2DEDCE03D6257')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnGetJoinClauseForTable.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnGetJoinClauseForTable.sql", ID: {c382ae0d-9905-5d6e-b435-6fb7d1b2b74f} *****';

GO


--------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnGetJoinClauseForTable.sql" ----------
GO
IF OBJECT_ID('[DOI].[fnGetJoinClauseForTable]') IS NOT NULL
	DROP FUNCTION [DOI].[fnGetJoinClauseForTable];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   FUNCTION [DOI].[fnGetJoinClauseForTable](
    @DatabaseName               SYSNAME,
	@SchemaName					SYSNAME, 
	@TableName					SYSNAME, 
	@NumberOfTabs				TINYINT = 1,
	@SourceTableAlias			VARCHAR(50) = '',
	@DestinationTableAlias		VARCHAR(50) = '')

RETURNS NVARCHAR(MAX)
AS

/*
	select [DOI].[fnGetJoinClauseForTable]('DBO', 'Pays', 1, 'S', 'D')
    select [DOI].[fnGetJoinClauseForTable]('DBO', 'Pays', 1)
*/

BEGIN
	DECLARE @ColumnList NVARCHAR(MAX) = '',
            @TabString NVARCHAR(50) = REPLICATE(CHAR(9), @NumberOfTabs)
    
    SELECT @ColumnList += CASE WHEN @ColumnList = '' THEN '' ELSE @TabString + 'AND ' END + @SourceTableAlias + '.' + c.name + ' = ' + @DestinationTableAlias + '.' + c.name + CHAR(13) + CHAR(10)
    FROM DOI.SysIndexes i
        INNER JOIN DOI.SysDatabases d ON d.database_id = i.database_id
        INNER JOIN DOI.SysIndexColumns ic ON ic.index_id = i.index_id
            AND ic.object_id = i.object_id
        INNER JOIN DOI.SysColumns c ON c.column_id = ic.column_id
            AND c.object_id = ic.object_id
        INNER JOIN DOI.SysTables t ON t.object_id = c.object_id
        INNER JOIN DOI.SysSchemas s ON s.schema_id = t.schema_id
    WHERE i.is_primary_key = 1
        AND s.name = @SchemaName
        AND t.name = @TableName
    ORDER BY ic.key_ordinal asc

    RETURN @ColumnList
END

GO

GO
---------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnGetJoinClauseForTable.sql" -----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnGetJoinClauseForTable.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('c382ae0d-9905-5d6e-b435-6fb7d1b2b74f' AS UNIQUEIDENTIFIER), '8EF6EAAD4581F19A8E4D746F5F83E785A9BC31969FAA14AD60E2DEDCE03D6257', 'Programmable Objects\Functions\DOI.fnGetJoinClauseForTable.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnGetJoinClauseForTable.sql", ID: {c382ae0d-9905-5d6e-b435-6fb7d1b2b74f} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ef595868-a757-5324-ac59-27a4f0a84cde' AS UNIQUEIDENTIFIER) AND [script_checksum] = '68A836527F70355F7D46353484B61A0A5A93797AB3A71F98D4F38D1B5C30D91B')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnGetColumnListForTable.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnGetColumnListForTable.sql", ID: {ef595868-a757-5324-ac59-27a4f0a84cde} *****';

GO


--------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnGetColumnListForTable.sql" ----------
GO
IF OBJECT_ID('[DOI].[fnGetColumnListForTable]') IS NOT NULL
	DROP FUNCTION [DOI].[fnGetColumnListForTable];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   FUNCTION [DOI].[fnGetColumnListForTable](
	@SchemaName					SYSNAME, 
	@TableName					SYSNAME, 
	@ListType					VARCHAR(50),
	@NumberOfTabs				TINYINT = 1,
	@SourceTableAlias			VARCHAR(50) = NULL,
	@DestinationTableAlias		VARCHAR(50) = NULL)

RETURNS NVARCHAR(MAX)
AS

/*
	select DOI.[fnGetColumnListForTable]('DBO', 'Pays', 'CREATETABLE', 1, NULL, NULL)
	select DOI.[fnGetColumnListForTable]('DBO', 'Pays', 'insert', 1, 'S', 'D')
*/

BEGIN
	DECLARE @ColumnList NVARCHAR(MAX) = CHAR(13) + CHAR(10),
			@ShowNullability BIT = CASE WHEN @ListType IN ('CREATETABLE') THEN 1 ELSE 0 END,
			@ShowDataTypes BIT = CASE WHEN @ListType IN ('CREATETABLE', 'DECLARE') THEN 1 ELSE 0 END,
			@ShowParameterMarker BIT = CASE WHEN @ListType IN ('DECLARE', 'SELECTPARAMASSIGN') THEN 1 ELSE 0 END,
			@TabString NVARCHAR(20) = REPLICATE(CHAR(9), @NumberOfTabs)

	
	DECLARE
			@NameDelimiterBeginMarker CHAR(1) = CASE WHEN @ShowParameterMarker = 1 THEN '' ELSE '[' END,
			@NameDelimiterEndMarker CHAR(1) = CASE WHEN @ShowParameterMarker = 1 THEN '' ELSE ']' END       

	SELECT @ColumnList += @TabString + 
		CASE 
			WHEN @ColumnList = CHAR(13) + CHAR(10) THEN '  ' 
			ELSE ', ' 
		END + 
		CASE 
			WHEN @SourceTableAlias IS NULL 
			THEN '' 
			ELSE @SourceTableAlias + '.' 
		END +
		@NameDelimiterBeginMarker + 
		CASE WHEN @ShowParameterMarker = 1 
			THEN '@' 
			ELSE '' 
		END + c.name + @NameDelimiterEndMarker + 
		CASE	
			WHEN @ListType = 'SELECTPARAMASSIGN'
			THEN ' = ' + '[' + c.name + ']'
			WHEN @ListType = 'UPDATE'
			THEN ' = ' + @DestinationTableAlias + '.[' + c.name + ']'
			ELSE ''
		END + SPACE(1) +
		CASE 
			WHEN @ShowDataTypes = 1
			THEN UPPER(ty.name) + 
				CASE 
					WHEN ty.NAME LIKE '%CHAR%' 
					THEN '(' + CASE WHEN c.max_length = -1 THEN 'MAX' ELSE CAST(CASE WHEN c.user_type_id IN (231, 239) THEN c.max_length/2 ELSE c.max_length END AS NVARCHAR(10)) END  + ')' 
					WHEN ty.NAME IN ('DECIMAL', 'NUMERIC')
					THEN '(' + CAST(c.precision AS NVARCHAR(10)) + ', ' + CAST(c.scale AS NVARCHAR(10)) + ')' 
					ELSE '' 
				END + 
				CASE 
					WHEN @ShowNullability = 1 
					THEN CASE c.is_nullable WHEN 0 THEN ' NOT' ELSE SPACE(0) END + ' NULL' 
					ELSE '' 
				END
			ELSE ''
		END + CHAR(13) + CHAR(10)
	FROM DOI.SysTables t
        INNER JOIN DOI.SysDatabases d ON T.database_id = d.database_id
		INNER JOIN DOI.SysColumns c ON c.database_id = t.database_id
            AND c.object_id = t.object_id
		INNER JOIN DOI.SysSchemas s ON s.database_id = t.database_id
            AND s.schema_id = t.schema_id
		INNER JOIN DOI.SysTypes ty ON c.user_type_id = ty.user_type_id
	WHERE s.name = @SchemaName
		AND t.name = @TableName
        AND C.is_computed = CASE WHEN @ListType = 'INSERT' THEN 0 ELSE C.is_computed END 
	ORDER BY c.column_id
	RETURN @ColumnList
END

GO

GO
---------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnGetColumnListForTable.sql" -----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnGetColumnListForTable.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('ef595868-a757-5324-ac59-27a4f0a84cde' AS UNIQUEIDENTIFIER), '68A836527F70355F7D46353484B61A0A5A93797AB3A71F98D4F38D1B5C30D91B', 'Programmable Objects\Functions\DOI.fnGetColumnListForTable.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnGetColumnListForTable.sql", ID: {ef595868-a757-5324-ac59-27a4f0a84cde} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da60b90f-7d71-5391-8182-5b16418dead0' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7C587601D90F63FC7CE6A8F2F5F17C3128E60287E4D53BEC23E31B67CC0C598B')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spLoadDataFromBackupTableWithDateName.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spLoadDataFromBackupTableWithDateName.sql", ID: {da60b90f-7d71-5391-8182-5b16418dead0} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spLoadDataFromBackupTableWithDateName.sql" 
GO
IF OBJECT_ID('[DOI].[spLoadDataFromBackupTableWithDateName]') IS NOT NULL
	DROP PROCEDURE [DOI].[spLoadDataFromBackupTableWithDateName];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   PROCEDURE [DOI].[spLoadDataFromBackupTableWithDateName]
    @DatabaseName SYSNAME,
	@SchemaName SYSNAME,
	@TableName SYSNAME,
	@Debug BIT = 0

AS

/*
	EXEC DOI.spLoadDataFromBackupTableWithDatename 
		@SchemaName = 'DOI',
		@TableName = 'ReportTraceFlags',
		@Debug = 1
*/

DECLARE @SQL NVARCHAR(MAX) = '',
        @ColumnList NVARCHAR(MAX) = '',
        @JoinClause NVARCHAR(MAX) = ''

DECLARE @now VARCHAR(30) = CONVERT(VARCHAR(30), SYSDATETIME(),112)

DECLARE @BackupTableName sysname = @TableName + '_' + @now

SET @ColumnList += (SELECT DOI.fnGetColumnListForTable(@SchemaName, @TableName, 'INSERT', 1, 'B', 'O'))
SET @JoinClause += (SELECT DOI.fnGetJoinClauseForTable(@DatabaseName, @SchemaName, @TableName, 7, 'B', 'O'))

SELECT @SQL += '
IF OBJECT_ID(''' + @SchemaName + '.' + @TableName + ''') IS NOT NULL
    AND OBJECT_ID(''' + @SchemaName + '.' + @BackupTableName + ''') IS NOT NULL
BEGIN
    INSERT INTO ' + @SchemaName + '.' + @TableName + '(' + @ColumnList + ')
    SELECT ' + @ColumnList + '
    FROM ' + @SchemaName + '.' + @BackupTableName + ' B
    WHERE NOT EXISTS(   SELECT ''True'' 
                        FROM ' + @SchemaName + '.' + @TableName + ' O
                        WHERE ' + @JoinClause + ')
END'

IF @Debug = 1
BEGIN
	EXEC DOI.spPrintOutLongSQL 
		@SQLInput = @SQL ,
	    @VariableName = N'@SQL'
END
ELSE
BEGIN
	EXEC dbo.sp_ExecuteSQL 
		@SQL = @SQL
END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spLoadDataFromBackupTableWithDateName.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spLoadDataFromBackupTableWithDateName.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('da60b90f-7d71-5391-8182-5b16418dead0' AS UNIQUEIDENTIFIER), '7C587601D90F63FC7CE6A8F2F5F17C3128E60287E4D53BEC23E31B67CC0C598B', 'Programmable Objects\Stored Procedures\DOI.spLoadDataFromBackupTableWithDateName.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spLoadDataFromBackupTableWithDateName.sql", ID: {da60b90f-7d71-5391-8182-5b16418dead0} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0c57c425-db95-51a3-88a0-fe5bb26e4d58' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1E96B76C31CEC02FC4C8D3BAAE3854A55299EAE71280F2F5B20D77033DEC6CBD')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spQueue_Insert.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue_Insert.sql", ID: {0c57c425-db95-51a3-88a0-fe5bb26e4d58} *****';

GO


--------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue_Insert.sql" -----------
GO
-- <Migration ID="0c57c425-db95-51a3-88a0-fe5bb26e4d58" TransactionHandling="Custom" />
IF OBJECT_ID('[DOI].[spQueue_Insert]') IS NOT NULL
	DROP PROCEDURE [DOI].[spQueue_Insert];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

create   PROCEDURE [DOI].[spQueue_Insert]
			@CurrentDatabaseName			NVARCHAR(128),
			@CurrentSchemaName				NVARCHAR(128),
			@CurrentTableName				NVARCHAR(128),
			@CurrentIndexName				NVARCHAR(128),
			@CurrentPartitionNumber			SMALLINT,
			@IndexSizeInMB					INT,
			@CurrentParentSchemaName		NVARCHAR(128),
			@CurrentParentTableName 		NVARCHAR(128),
			@CurrentParentIndexName			NVARCHAR(128),
			@IndexOperation					VARCHAR(50),
			@IsOnlineOperation				BIT,
			@TableChildOperationId			SMALLINT = 0,
			@SQLStatement					VARCHAR(MAX),
			@TransactionId					UNIQUEIDENTIFIER,
			@BatchId						UNIQUEIDENTIFIER,
			@ExitTableLoopOnError			BIT 

--WITH NATIVE_COMPILATION, SCHEMABINDING 

AS
--BEGIN ATOMIC WITH  ( TRANSACTION ISOLATION LEVEL = SNAPSHOT, LANGUAGE = N'us_english')
    BEGIN TRY 
	    DECLARE @SeqNo SMALLINT = ISNULL((	SELECT MAX(SeqNo)
										    FROM DOI.Queue
										    WHERE DatabaseName = @CurrentDatabaseName
												AND ParentSchemaName = @CurrentParentSchemaName
											    AND ParentTableName = @CurrentParentTableName), 0) + 1 

    	DELETE 
		FROM DOI.Queue 
		WHERE DatabaseName = @CurrentDatabaseName
			AND SchemaName = @CurrentSchemaName 
			AND TableName = @CurrentTableName 
			AND IndexName = @CurrentIndexName
			AND PartitionNumber = @CurrentPartitionNumber
			AND IndexOperation = @IndexOperation
			AND TableChildOperationId = @TableChildOperationId

	    INSERT INTO DOI.Queue ( DatabaseName, SchemaName ,TableName ,IndexName , PartitionNumber, IndexSizeInMB, ParentSchemaName, ParentTableName, ParentIndexName, IndexOperation, IsOnlineOperation, TableChildOperationId, SQLStatement , SeqNo, /*RunAutomaticallyOnDeployment, RunAutomaticallyOnSQLJob,*/ RunStatus, TransactionId, BatchId, ExitTableLoopOnError)
	    VALUES ( @CurrentDatabaseName, @CurrentSchemaName, @CurrentTableName, @CurrentIndexName , @CurrentPartitionNumber, @IndexSizeInMB, @CurrentParentSchemaName, @CurrentParentTableName, @CurrentParentIndexName, @IndexOperation, @IsOnlineOperation, @TableChildOperationId, @SQLStatement, @SeqNo, /*@RunAutomaticallyOnDeployment, @RunAutomaticallyOnSQLJob,*/ 'Running', @TransactionId, @BatchId, @ExitTableLoopOnError)
    END TRY

    BEGIN CATCH
--	    IF @@TRANCOUNT > 0 ROLLBACK TRAN

	    SELECT	@CurrentDatabaseName, 
			    @CurrentSchemaName, 
			    @CurrentTableName, 
			    @CurrentIndexName, 
			    @CurrentPartitionNumber,
			    @IndexSizeInMB,
			    @CurrentParentSchemaName, 
			    @CurrentParentTableName, 
			    @CurrentParentIndexName,
			    @IndexOperation, 
			    @IsOnlineOperation,
			    @TableChildOperationId,
			    @TransactionId,
			    ERROR_MESSAGE()
	    THROW;
    END CATCH 
--END
GO

GO
---------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue_Insert.sql" ------------


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spQueue_Insert.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('0c57c425-db95-51a3-88a0-fe5bb26e4d58' AS UNIQUEIDENTIFIER), '1E96B76C31CEC02FC4C8D3BAAE3854A55299EAE71280F2F5B20D77033DEC6CBD', 'Programmable Objects\Stored Procedures\DOI.spQueue_Insert.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue_Insert.sql", ID: {0c57c425-db95-51a3-88a0-fe5bb26e4d58} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4bdcbd29-031f-51de-9a05-3a2c6ca736f9' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E63BAFDCCA963267ED43F457D1D988E2483127E0D0405567B534AABA0F920318')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwStatistics.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwStatistics.sql", ID: {4bdcbd29-031f-51de-9a05-3a2c6ca736f9} *****';

GO


---------------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwStatistics.sql" ------------------
GO
IF OBJECT_ID('[DOI].[vwStatistics]') IS NOT NULL
	DROP VIEW [DOI].[vwStatistics];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO





CREATE   VIEW [DOI].[vwStatistics]
AS 

/*
    select * from DOI.vwStatistics
*/
SELECT  *,         
        '
UPDATE STATISTICS ' + S.DatabaseName + '.' + S.SchemaName + '.' + S.TableName + '(' + S.StatisticsName + ') 
WITH SAMPLE ' + CAST(S.SampleSizePct_Desired AS VARCHAR(3)) + ' PERCENT
    /*, PERSIST_SAMPLE_PERCENT = ON  this has to wait until 2016 SP2.
    , MAXDOP = 0*/
' + CASE WHEN S.NoRecompute_Desired = 1 THEN ', NORECOMPUTE' ELSE '' END +
', INCREMENTAL = ' + CASE WHEN S.IsIncremental_Desired = 1 THEN 'ON' ELSE 'OFF' END 
AS UpdateStatisticsSQL,
                '
IF NOT EXISTS(SELECT ''True'' FROM sys.stats WHERE NAME = ''' + S.StatisticsName + ''')
BEGIN
    CREATE STATISTICS ' + S.StatisticsName + '
    ON ' + S.DatabaseName + '.' + S.SchemaName + '.' + S.TableName + '(' + S.StatisticsColumnList_Desired + ')' + 
        CASE 
            WHEN S.IsFiltered_Desired = 1 
            THEN '
    WHERE ' + S.FilterPredicate_Desired
            ELSE '' 
        END + '
    WITH SAMPLE ' + CAST(S.SampleSizePct_Desired AS VARCHAR(3)) + ' PERCENT
        /*, PERSIST_SAMPLE_PERCENT = ON  this has to wait until 2016 SP2.
        , MAXDOP = 0*/
    ' + CASE WHEN S.NoRecompute_Desired = 1 THEN ', NORECOMPUTE' ELSE '' END +
    ', INCREMENTAL = ' + CASE WHEN S.IsIncremental_Desired = 1 THEN 'ON' ELSE 'OFF' END + '
END' 
AS CreateStatisticsSQL,
        '
DROP STATISTICS ' + S.TableName + '.' + S.StatisticsName AS DropStatisticsSQL,
        '   
EXEC sys.sp_rename 
    @objname = N''' + S.SchemaName + '.' + S.TableName + '.' + S.StatisticsName + ''', 
    @newname = N''ST_' + REPLACE(S.StatisticsName, S.TableName, S.TableName + '_OLD') + ''',
    @objtype = N''STATISTICS'';' + CHAR(13) + CHAR(10) AS RenameStatisticsSQL,
        '
IF EXISTS ( SELECT ''True''
            FROM SYS.stats st 
                INNER JOIN SYS.TABLES t ON t.object_id = st.object_id 
                INNER JOIN sys.schemas s ON s.schema_id = t.schema_id
            WHERE s.name = ''' + S.SchemaName + '''
                AND t.name = ''' + S.TableName + '''
                AND st.name = ''' + REPLACE(S.StatisticsName, S.TableName, S.TableName + '_OLD') + ''')
BEGIN
    SET DEADLOCK_PRIORITY 10
    EXEC sys.sp_rename 
        @objname = ''' + S.SchemaName + '.' + S.TableName + '.' + REPLACE(S.StatisticsName, S.TableName, S.TableName + '_OLD') + '''
        ,@newname = ''' + S.StatisticsName + '''
        ,@objtype = ''STATISTICS''
END' AS RevertRenameStatisticsSQL

FROM DOI.[Statistics] S





GO

GO
----------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwStatistics.sql" -------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwStatistics.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('4bdcbd29-031f-51de-9a05-3a2c6ca736f9' AS UNIQUEIDENTIFIER), 'E63BAFDCCA963267ED43F457D1D988E2483127E0D0405567B534AABA0F920318', 'Programmable Objects\Views\DOI.vwStatistics.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwStatistics.sql", ID: {4bdcbd29-031f-51de-9a05-3a2c6ca736f9} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c44c9be7-01ea-5818-ac3f-9b9491b9d2dd' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8EF63F6BD80AD0C6651856B9742C1EDCA688E0745C63FC5AAF5B5022293E485F')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwIndexPartitions.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwIndexPartitions.sql", ID: {c44c9be7-01ea-5818-ac3f-9b9491b9d2dd} *****';

GO


-------------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwIndexPartitions.sql" ---------------
GO
IF OBJECT_ID('[DOI].[vwIndexPartitions]') IS NOT NULL
	DROP VIEW [DOI].[vwIndexPartitions];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO



CREATE   VIEW [DOI].[vwIndexPartitions]
AS

/*
	SELECT * 
    FROM DOI.vwIndexPartitions 
    ORDER BY SchemaName, TableName, IndexName, PartitionNumber
*/
SELECT	SchemaName,
		TableName,
		IndexName, 
		PartitionNumber, 
		TotalIndexPartitionSizeInMB, 
		DataFileName, 
		DriveLetter,
		NumRows, 
		TotalPages,
		Fragmentation,
		CASE
			WHEN Fragmentation > 30
				OR OptionDataCompression <> OptionDataCompression --certain options or frag over 30%.
			THEN 'AlterRebuild-PartitionLevel' --can be done on a partition level
			WHEN (OptionDataCompression = OptionDataCompression)--NO OPTIONS CHANGES, 5-30% frag, needs LOB compaction
				AND Fragmentation BETWEEN 5 AND 30
			THEN 'AlterReorganize-PartitionLevel' --this always happens online, can be done on a partition level
			ELSE 'None'
		END AS PartitionUpdateType,
		PartitionType,
		OptionDataCompression,
		'
TRUNCATE TABLE ' + SchemaName + '.' + TableName + 'WITH (PARTITIONS (' + CAST(PartitionNumber AS VARCHAR(5)) + '))' AS TruncateStatement,
'USE ' + DatabaseName + ';
ALTER INDEX ' + IndexName + ' ON ' + SchemaName + '.' + TableName + CHAR(13) + CHAR(10) + 
'	REBUILD PARTITION = ' + CAST(PartitionNumber AS VARCHAR(5)) + CHAR(13) + CHAR(10) + 
'		WITH (	' + CASE WHEN PartitionType = 'RowStore' THEN '
				SORT_IN_TEMPDB = ON,' ELSE '' END + '
				ONLINE = ' + CASE WHEN PartitionType = 'RowStore' THEN 'ON(WAIT_AT_LOW_PRIORITY (MAX_DURATION = 0 MINUTES, ABORT_AFTER_WAIT = NONE))' ELSE 'OFF' END + ',
				MAXDOP = 0,
				DATA_COMPRESSION = ' + OptionDataCompression COLLATE DATABASE_DEFAULT + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) 
AS AlterRebuildStatement
				,'
ALTER INDEX ' + IndexName + ' ON ' + SchemaName + '.' + TableName + CHAR(13) + CHAR(10) + 
'	REORGANIZE PARTITION = ' + CAST(PartitionNumber AS VARCHAR(5)) + CHAR(13) + CHAR(10) + 
'		WITH (	LOB_COMPACTION = ON)' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) AS AlterReorganizeStatement
--select count(*)
FROM DOI.IndexRowStorePartitions 


GO

GO
--------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwIndexPartitions.sql" ----------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwIndexPartitions.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('c44c9be7-01ea-5818-ac3f-9b9491b9d2dd' AS UNIQUEIDENTIFIER), '8EF63F6BD80AD0C6651856B9742C1EDCA688E0745C63FC5AAF5B5022293E485F', 'Programmable Objects\Views\DOI.vwIndexPartitions.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwIndexPartitions.sql", ID: {c44c9be7-01ea-5818-ac3f-9b9491b9d2dd} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('29f5c519-54ee-501d-9b29-6029088d8c4c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '96CC2D4839C015D78F51AF6D5312543BB92F4FCA529BFF1E908A0BE0D23C3C21')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwTables.sql", ID: {29f5c519-54ee-501d-9b29-6029088d8c4c} *****';

GO


------------------ BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwTables.sql" --------------------
GO
IF OBJECT_ID('[DOI].[vwTables]') IS NOT NULL
	DROP VIEW [DOI].[vwTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO








CREATE   VIEW [DOI].[vwTables]

AS

/*
    SELECT * FROM DOI.vwTables
*/

SELECT	T.*,
'
CREATE OR ALTER TRIGGER ' + T.SchemaName + '.tr' + T.TableName + '_DataSynch
ON ' + T.SchemaName + '.' + T.TableName + '
AFTER INSERT, UPDATE, DELETE
AS
' + 		T.DSTriggerSQL AS CreateDataSynchTriggerSQL,

'IF OBJECT_ID(''' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + '_DataSynch'') IS NOT NULL
BEGIN
	DROP TABLE ' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + '_DataSynch
END

IF OBJECT_ID(''' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + '_DataSynch'') IS NULL
BEGIN
	CREATE TABLE ' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + '_DataSynch (' + CHAR(13) + CHAR(10) + T.ColumnListWithTypes + CHAR(13) + CHAR(10) + ' ,DMLType CHAR(1) NOT NULL) ON [' + T.Storage_Desired + '] (' + T.PartitionColumn + ')
END
'		AS CreateFinalDataSynchTableSQL,
		'
CREATE OR ALTER TRIGGER ' + T.SchemaName + '.tr' + T.TableName + '_DataSynch
ON ' + T.SchemaName + '.' + T.TableName + '
AFTER INSERT, UPDATE, DELETE
AS

INSERT INTO ' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + '_DataSynch (' + T.ColumnListNoTypes + ', DMLType)
SELECT ' + T.ColumnListNoTypes + ', ''I''
FROM inserted T
WHERE NOT EXISTS(SELECT ''True'' FROM deleted PT WHERE ' + T.PKColumnListJoinClause + ')

INSERT INTO ' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + '_DataSynch (' + T.ColumnListNoTypes + ', DMLType)
SELECT ' + T.ColumnListNoTypes + ', ''U''
FROM inserted T
WHERE EXISTS (SELECT * FROM deleted PT WHERE ' + T.PKColumnListJoinClause + ')

INSERT INTO ' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + '_DataSynch (' + T.ColumnListNoTypes + ', DMLType)
SELECT ' + T.ColumnListNoTypes + ', ''D''
FROM deleted T
WHERE NOT EXISTS(SELECT ''True'' FROM inserted PT WHERE ' + T.PKColumnListJoinClause + ')
'		AS CreateFinalDataSynchTriggerSQL,

'UPDATE DOI.DOI.Run_PartitionState
SET DataSynchState = 0
WHERE DatabaseName = ''' + T.DatabaseName + '''
	AND SchemaName = ''' + T.SchemaName + '''
	AND ParentTableName = ''' + T.TableName + '''
'		AS TurnOffDataSynchSQL,

		'
IF EXISTS(SELECT * FROM DOI.DOI.SysTriggers tr INNER JOIN DOI.SysDatabases d ON tr.database_id = d.database_id WHERE d.name = ' + T.DatabaseName + ' AND tr.name = ''tr' + T.TableName + '_DataSynch'' AND OBJECT_NAME(parent_id) = ''' + T.TableName + '_OLD'')
BEGIN
	DROP TRIGGER tr' + T.TableName + '_DataSynch
END' 
		AS DropDataSynchTriggerSQL,

		'
IF OBJECT_ID(''' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + '_DataSynch'') IS NOT NULL
	AND OBJECT_ID(''' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + ''') IS NOT NULL
BEGIN
	IF (SELECT SUM(Counts)
		FROM (
				SELECT ''Inserts Left'' AS Type, COUNT(*) AS Counts
				FROM ' + T.DatabaseName + T.SchemaName + '.' + T.TableName + '_DataSynch PT
				WHERE PT.DMLType = ''I''
					AND NOT EXISTS (SELECT ''True'' 
									FROM ' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + ' T
									WHERE ' + T.PKColumnListJoinClause + ')
				UNION ALL
				SELECT ''Updates Left'' AS Type, COUNT(*)
				FROM ' + T.DatabaseName + T.SchemaName + '.' + T.TableName + '_DataSynch PT
				WHERE PT.DMLType = ''U''
					AND EXISTS (SELECT ''True'' 
								FROM ' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + ' T
								WHERE ' + T.PKColumnListJoinClause + '
									AND T.UpdatedUtcDt < PT.UpdatedUtcDt)
				UNION ALL
				SELECT ''Deletes Left'' AS Type, COUNT(*)
				FROM ' + T.DatabaseName + T.SchemaName + '.' + T.TableName + '_DataSynch PT
				WHERE PT.DMLType = ''D''
					AND EXISTS (SELECT ''True'' 
								FROM ' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + ' T
								WHERE ' + T.PKColumnListJoinClause + '))c) = 0
	BEGIN
		DROP TABLE ' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + '_DataSynch
	END
	ELSE
	BEGIN
		RAISERROR(''Not all data was synched to the new table.  ' + T.DatabaseName + '.' + T.SchemaName + '.' + T.TableName + '_DataSynch Table was not dropped'', 10, 1)
	END
END
ELSE
BEGIN
	RAISERROR(''Not all necessary tables have been created.'' , 16 , 1);
END'
AS DropDataSynchTableSQL,
'
DELETE DOI.DOI.Run_PartitionState 
WHERE DatabaseName = ''' + T.DatabaseName + '''
	AND SchemaName = ''' + T.SchemaName + ''' 
    AND ParentTableName = ''' + T.TableName + '''' 
AS DeletePartitionStateMetadataSQL,

        '
DECLARE @ErrorMessage NVARCHAR(500),
        @DataSpaceNeeded BIGINT,
        @DataSpaceAvailable BIGINT,
        @DriveLetter CHAR(1)  

SELECT @DataSpaceAvailable = available_MB, 
        @DataSpaceNeeded = FSI.SpaceNeededOnDrive,
        @DriveLetter = FS.DriveLetter
FROM DOI.DOI.vwFreeSpaceOnDisk FS
    INNER JOIN DOI.DOI.fnFreeSpaceNeededForTableIndexOperations(''' + T.DatabaseName + ''', ''' + T.SchemaName + ''', ''' + T.TableName + ''', ''data'') FSI ON FSI.DriveLetter = FS.DriveLetter
WHERE DBName = ''PaymentReporting''
    AND FS.FileType = ''DATA''
    AND EXISTS(	SELECT ''True''
				FROM DOI.DOI.Queue Q 
				WHERE Q.DatabaseName = FSI.DatabaseName
					AND Q.ParentSchemaName = FSI.SchemaName
					AND Q.ParentTableName = FSI.TableName)

IF @DataSpaceAvailable <= @DataSpaceNeeded
BEGIN
    SET @ErrorMessage = ''NOT ENOUGH FREE SPACE ON DATA DRIVE '' + @DriveLetter + '':  TO REFRESH INDEX STRUCTURES.  NEED '' + CAST(@DataSpaceNeeded AS NVARCHAR(50)) + ''MB AND ONLY HAVE '' + CAST(@DataSpaceAvailable AS NVARCHAR(50)) + ''MB AVAILABLE.''
    
	RAISERROR(@ErrorMessage, 16, 1)
END
ELSE 
BEGIN
    SET @ErrorMessage = ''THERE IS ENOUGH FREE SPACE ON DATA DRIVE '' + @DriveLetter + '':  TO REFRESH INDEX STRUCTURES.  NEED '' + CAST(@DataSpaceNeeded AS NVARCHAR(50)) + ''MB AND HAVE '' + CAST(@DataSpaceAvailable AS NVARCHAR(50)) + ''MB AVAILABLE.''
    
	RAISERROR(@ErrorMessage, 10, 1)
END' AS FreeDataSpaceCheckSQL,

        '
DECLARE @ErrorMessage NVARCHAR(500),
        @LogSpaceNeeded BIGINT,
        @LogSpaceAvailable BIGINT,
        @DriveLetter CHAR(1)  

SELECT @LogSpaceAvailable = available_MB, 
        @LogSpaceNeeded = FSI.SpaceNeededOnDrive,
        @DriveLetter = FS.DriveLetter
FROM DOI.DOI.vwFreeSpaceOnDisk FS
    INNER JOIN DOI.DOI.fnFreeSpaceNeededForTableIndexOperations(''' + T.DatabaseName + ''', ''' + T.SchemaName + ''', ''' + T.TableName + ''', ''log'') FSI ON FSI.DriveLetter = FS.DriveLetter
WHERE DBName = ''PaymentReporting''
    AND FS.FileType = ''LOG''
    AND EXISTS(	SELECT ''True''
				FROM DOI.DOI.Queue Q 
				WHERE Q.ParentSchemaName = FSI.SchemaName
					AND Q.ParentTableName = FSI.TableName)

IF @LogSpaceAvailable <= @LogSpaceNeeded
BEGIN
    SET @ErrorMessage = ''NOT ENOUGH FREE SPACE ON LOG DRIVE '' + @DriveLetter + '':  TO REFRESH INDEX STRUCTURES.  NEED '' + CAST(@LogSpaceNeeded AS NVARCHAR(50)) + ''MB AND ONLY HAVE '' + CAST(@LogSpaceAvailable AS NVARCHAR(50)) + ''MB AVAILABLE.''
    
	RAISERROR(@ErrorMessage, 16, 1)
END
ELSE 
BEGIN
    SET @ErrorMessage = ''THERE IS ENOUGH FREE SPACE ON LOG DRIVE '' + @DriveLetter + '':  TO REFRESH INDEX STRUCTURES.  NEED '' + CAST(@LogSpaceNeeded AS NVARCHAR(50)) + ''MB AND HAVE '' + CAST(@LogSpaceAvailable AS NVARCHAR(50)) + ''MB AVAILABLE.''
    
	RAISERROR(@ErrorMessage, 10, 1)
END
' AS FreeLogSpaceCheckSQL,

        '
DECLARE @ErrorMessage NVARCHAR(500),
        @LogSpaceNeeded BIGINT,
        @LogSpaceAvailable BIGINT,
        @DriveLetter CHAR(1)  

SELECT @LogSpaceAvailable = available_MB, 
        @LogSpaceNeeded = FSI.SpaceNeededOnDrive,
        @DriveLetter = FS.DriveLetter
FROM DOI.DOI.vwFreeSpaceOnDisk FS
    INNER JOIN DOI.DOI.fnFreeSpaceNeededForTableIndexOperations(''' + T.DatabaseName + ''', ''' + T.SchemaName + ''', ''' + T.TableName + ''', ''TempDB'') FSI ON FSI.DriveLetter = FS.DriveLetter
WHERE DBName = ''TempDB''
    AND FS.FileType = ''DATA''
    AND EXISTS(	SELECT ''True''
				FROM DOI.DOI.Queue Q 
				WHERE Q.ParentSchemaName = FSI.SchemaName
					AND Q.ParentTableName = FSI.TableName)

IF @LogSpaceAvailable <= @LogSpaceNeeded
BEGIN
    SET @ErrorMessage = ''NOT ENOUGH FREE SPACE ON TEMPDB DRIVE '' + @DriveLetter + '':  TO REFRESH INDEX STRUCTURES.  NEED '' + CAST(@LogSpaceNeeded AS NVARCHAR(50)) + ''MB AND ONLY HAVE '' + CAST(@LogSpaceAvailable AS NVARCHAR(50)) + ''MB AVAILABLE.''
    
	RAISERROR(@ErrorMessage, 16, 1)
END
ELSE 
BEGIN
    SET @ErrorMessage = ''THERE IS ENOUGH FREE SPACE ON TEMPDB DRIVE '' + @DriveLetter + '':  TO REFRESH INDEX STRUCTURES.  NEED '' + CAST(@LogSpaceNeeded AS NVARCHAR(50)) + ''MB AND HAVE '' + CAST(@LogSpaceAvailable AS NVARCHAR(50)) + ''MB AVAILABLE.''
    
	RAISERROR(@ErrorMessage, 10, 1)
END
' AS FreeTempDBSpaceCheckSQL
--select count(*)
FROM DOI.Tables T








GO

GO
------------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwTables.sql" ---------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('29f5c519-54ee-501d-9b29-6029088d8c4c' AS UNIQUEIDENTIFIER), '96CC2D4839C015D78F51AF6D5312543BB92F4FCA529BFF1E908A0BE0D23C3C21', 'Programmable Objects\Views\DOI.vwTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwTables.sql", ID: {29f5c519-54ee-501d-9b29-6029088d8c4c} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('91122278-bd09-5944-97a0-f8f4c01684f9' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F41A726B9FA864B7D377229B6A6C1304C4588B6A7DF2A9F93DCF77EFF932277E')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spQueue_BCPTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue_BCPTables.sql", ID: {91122278-bd09-5944-97a0-f8f4c01684f9} *****';

GO


-------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue_BCPTables.sql" ---------
GO
IF OBJECT_ID('[DOI].[spQueue_BCPTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spQueue_BCPTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spQueue_BCPTables]
    @DatabaseName NVARCHAR(128),
	@SchemaName NVARCHAR(128),
	@TableName NVARCHAR(128),
	@BatchId UNIQUEIDENTIFIER


AS

/*
select newid()

	EXEC DOI.[spQueue_BCPTables]
        @DatabaseName = 'PaymentReporting',
		@SchemaName = 'dbo',
		@TableName = 'Pays',
		@BatchId = '63F397D3-824B-47C2-A8CF-CED62565D2A2'
*/
SET NOCOUNT ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
SET ARITHABORT ON
SET CONCAT_NULL_YIELDS_NULL ON
SET NUMERIC_ROUNDABORT OFF
SET QUOTED_IDENTIFIER ON

BEGIN TRY
	DECLARE @CurrentDatabaseName						NVARCHAR(128),
			@CurrentSchemaName							NVARCHAR(128),
			@CurrentTableName							NVARCHAR(128),
			@CurrentParentIndexName						NVARCHAR(128),
			@CurrentPartitionColumn						NVARCHAR(128),
            @CurrentStatisticsName                      NVARCHAR(128),
			@PrepTableName								NVARCHAR(128),
			@IndexName									NVARCHAR(128),
			@CreatePrepTableSQL							NVARCHAR(MAX) = '',
			@CreateDataSynchTriggerSQL					NVARCHAR(MAX) = '',
			@CreateFinalDataSynchTableSQL				NVARCHAR(MAX) = '',
			@CreateFinalDataSynchTriggerSQL				NVARCHAR(MAX) = '',
			@TurnOnDataSynchSQL							NVARCHAR(MAX) = '',
			@TurnOffDataSynchSQL						NVARCHAR(MAX) = '',
            @CreateBCPViewSQL                           NVARCHAR(MAX) = '',
			@BCPCmd										NVARCHAR(MAX) = '',
			@CreateIndexStatement						NVARCHAR(MAX) = '',
			@CreateConstraintStatement					NVARCHAR(MAX) = '',
			@NewStorage									NVARCHAR(128),
			@NewStorageType								NVARCHAR(128),
			@IsNewPartitionedPrepTable					BIT ,
			@CheckConstraintSQL							NVARCHAR(MAX) = '',
			@PartitionDataValidationSQL					NVARCHAR(MAX) = '',
			@FinalRepartitioningValidationSQL			NVARCHAR(MAX) = '',
			@RenameNewPartitionedPrepTableSQL			NVARCHAR(MAX) = '',
			@RenameExistingTableIndexSQL				NVARCHAR(MAX) = '',
			@RenameNewPartitionedPrepTableIndexSQL		NVARCHAR(MAX) = '',
			@RenameExistingTableSQL						NVARCHAR(MAX) = '',
			@RenameExistingTableConstraintSQL			NVARCHAR(MAX) = '',
   			@RenameExistingTableStatisticsSQL    		NVARCHAR(MAX) = '',
            @CreateMissingTableStatisticsSQL            NVARCHAR(MAX) = '',
			@RenameNewPartitionedPrepTableConstraintSQL	NVARCHAR(MAX) = '',
			@DropDataSynchTableSQL						NVARCHAR(MAX) = '',
			@DropDataSynchTriggerSQL					NVARCHAR(MAX) = '',
			@DropParentOldTableFKs						NVARCHAR(MAX) = '',
			@DropRefOldTableFKs							NVARCHAR(MAX) = '',
			@AddBackParentTableFKs						NVARCHAR(MAX) = '',
			@AddBackRefTableFKs							NVARCHAR(MAX) = '',
            @SwitchPartitionsSQL						NVARCHAR(MAX) = '',
			@DropTableSQL								NVARCHAR(MAX) = '',
			@NewPartitionedPrepTableName				SYSNAME,
			@UnPartitionedPrepTableName					SYSNAME,
			@TableChildOperationId						SMALLINT,
			@IndexSizeInMB								INT,
			@SynchDeletesSQL							NVARCHAR(MAX) = '',
			@SynchInsertsSQL							NVARCHAR(MAX) = '',
			@SynchUpdatesSQL							NVARCHAR(MAX) = '',
			@CRLF										CHAR(2) = CHAR(13) + CHAR(10),
			@TransactionId								UNIQUEIDENTIFIER = NULL,
            @DeletePartitionStateMetadataSQL            NVARCHAR(500) = '',
			@PriorErrorValidationSQL					NVARCHAR(MAX) = '
IF EXISTS(	SELECT ''True''
			FROM DOI.DOI.Log 
			WHERE BatchId = ''' + CAST(@BatchId AS VARCHAR(40)) + '''
				AND TableName LIKE ''%' + @TableName + '%''
				AND ErrorText IS NOT NULL ) /*ONLY PROCEED IF NOTHING HAS FAILED IN THIS BATCH.*/
BEGIN
	RAISERROR(''At least 1 step failed in the BCP process.  Aborting partition switch and rename.'', 16, 1)  
END'

	DECLARE @EnableCmdShellSQL					NVARCHAR(MAX) = '
EXEC sp_configure ''allow updates'', 0
RECONFIGURE
EXEC sp_configure ''show advanced options'', 1
RECONFIGURE
EXEC sp_configure ''xp_cmdshell'', 1
RECONFIGURE
',
			@DisableCmdShellSQL					NVARCHAR(MAX) = '
EXEC sp_configure ''allow updates'', 0
RECONFIGURE
EXEC sp_configure ''show advanced options'', 1
RECONFIGURE
EXEC sp_configure ''xp_cmdshell'', 0
RECONFIGURE
'

	IF OBJECT_ID('tempdb..#Indexes') IS NOT NULL
    BEGIN
		DROP TABLE #Indexes
	END
    
	CREATE TABLE #Indexes (
        DatabaseName                            SYSNAME,
		SchemaName                              SYSNAME,
		ParentTableName                         SYSNAME,
		IndexName                               SYSNAME,
		ParentIndexName                         SYSNAME,
		CreateIndexStatement                    NVARCHAR(MAX),
		RenameExistingTableIndexSQL             NVARCHAR(MAX),
		RenameNewPartitionedPrepTableIndexSQL   NVARCHAR(MAX),
		RowNum                                  BIGINT,
		PrepTableName                           SYSNAME,
		IndexSizeInMB                           INT
		PRIMARY KEY CLUSTERED (DatabaseName, SchemaName, PrepTableName, IndexName)) 
        --this clust index is too large a row size.  if it's a problem, change columns to varchar?


	INSERT INTO #Indexes ( DatabaseName, SchemaName ,ParentTableName ,IndexName , ParentIndexName, CreateIndexStatement ,RenameExistingTableIndexSQL ,RenameNewPartitionedPrepTableIndexSQL ,RowNum ,PrepTableName, IndexSizeInMB )		
	SELECT	PTI.DatabaseName,
            PTI.SchemaName,
			PTI.ParentTableName,
			PTI.PrepTableIndexName, 
			PTI.ParentIndexName,
			PTI.PrepTableIndexCreateSQL,
			PTI.RenameExistingTableIndexSQL,
			PTI.RenameNewPartitionedPrepTableIndexSQL,
			PTI.RowNum,
			PTI.PrepTableName,
			PTI.IndexSizeMB_Actual
	FROM  DOI.vwTables_PrepTables_Indexes PTI
	WHERE PTI.SchemaName = @SchemaName
		AND PTI.ParentTableName = @TableName
								
	DECLARE PrepTable_Cur CURSOR LOCAL FAST_FORWARD FOR
		SELECT	TTP.DatabaseName,
                TTP.SchemaName, 
				TTP.TableName,
				TTP.PartitionColumn,
				PT.PrepTableName,
				PT.CreatePrepTableSQL,
				TTP.CreateDataSynchTriggerSQL,
				TTP.CreateFinalDataSynchTableSQL,
				TTP.CreateFinalDataSynchTriggerSQL,
				PT.TurnOnDataSynchSQL,
				TTP.TurnOffDataSynchSQL,
                PT.CreateViewForBCPSQL,
				PT.BCPSQL,
				PT.Storage_Desired,
				PT.StorageType_Desired,
				PT.IsNewPartitionedPrepTable,
				PT.NewPartitionedPrepTableName,
				PT.CheckConstraintSQL,
				PT.RenameNewPartitionedPrepTableSQL,
				PT.RenameExistingTableSQL,
				TTP.DropDataSynchTriggerSQL,
				TTP.DropDataSynchTableSQL,
				PT.SynchDeletesPrepTableSQL,
				PT.SynchInsertsPrepTableSQL,
				PT.SynchUpdatesPrepTableSQL,
				PT.FinalRepartitioningValidationSQL,
                TTP.DeletePartitionStateMetadataSQL
		FROM DOI.vwTables TTP
			INNER JOIN DOI.vwTables_PrepTables PT ON PT.SchemaName = TTP.SchemaName
				AND PT.TableName = TTP.TableName
		WHERE TTP.IntendToPartition = 1
			AND PT.PrepTableName IS NOT NULL
			AND TTP.IsStorageChanging = 1
			AND TTP.SchemaName = @SchemaName
			AND TTP.TableName = @TableName
		ORDER BY PT.IsNewPartitionedPrepTable, PT.PartitionNumber
	
	OPEN PrepTable_Cur

	FETCH NEXT FROM PrepTable_Cur INTO @CurrentDatabaseName, @CurrentSchemaName, @CurrentTableName, @CurrentPartitionColumn, @PrepTableName, @CreatePrepTableSQL, @CreateDataSynchTriggerSQL, @CreateFinalDataSynchTableSQL, @CreateFinalDataSynchTriggerSQL, @TurnOnDataSynchSQL, @TurnOffDataSynchSQL, @CreateBCPViewSQL, @BCPCmd, @NewStorage, @NewStorageType, @IsNewPartitionedPrepTable, @NewPartitionedPrepTableName, @CheckConstraintSQL, @RenameNewPartitionedPrepTableSQL, @RenameExistingTableSQL, @DropDataSynchTriggerSQL, @DropDataSynchTableSQL, @SynchDeletesSQL, @SynchInsertsSQL, @SynchUpdatesSQL, @FinalRepartitioningValidationSQL, @DeletePartitionStateMetadataSQL

	IF @@FETCH_STATUS NOT IN (-1, -2)
	BEGIN
		EXEC DOI.spQueue_Insert
            @CurrentDatabaseName            = @CurrentDatabaseName,
			@CurrentSchemaName				= @CurrentSchemaName,
			@CurrentTableName				= @PrepTableName, 
			@CurrentIndexName				= 'N/A',
			@CurrentPartitionNumber			= 0,
			@IndexSizeInMB					= 0,
			@CurrentParentSchemaName		= @CurrentSchemaName,
			@CurrentParentTableName			= @CurrentTableName,
			@CurrentParentIndexName			= 'N/A',
			@IndexOperation					= 'Create Data Synch Trigger', 
			@IsOnlineOperation				= 1,
			@SQLStatement					= @CreateDataSynchTriggerSQL,
			@TransactionId					= @TransactionId,
			@BatchId						= @BatchId,
			@ExitTableLoopOnError			= 1
	END 

	WHILE @@FETCH_STATUS <> -1
	BEGIN
		IF @@FETCH_STATUS <> -2
		BEGIN
			EXEC DOI.spQueue_Insert
                @CurrentDatabaseName            = @CurrentDatabaseName,
				@CurrentSchemaName				= @CurrentSchemaName ,
                @CurrentTableName				= @PrepTableName, 
                @CurrentIndexName				= 'N/A',
				@CurrentPartitionNumber			= 1,
				@IndexSizeInMB					= 0,
				@CurrentParentSchemaName		= @CurrentSchemaName,
				@CurrentParentTableName			= @CurrentTableName,
				@CurrentParentIndexName			= 'N/A',
				@IndexOperation					= 'Prep Table SQL', 
				@IsOnlineOperation				= 1,
                @SQLStatement					= @CreatePrepTableSQL,
				@TransactionId					= @TransactionId,
				@BatchId						= @BatchId,
				@ExitTableLoopOnError			= 1

			IF @IsNewPartitionedPrepTable = 0
			BEGIN
				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName,
					@CurrentTableName				= @PrepTableName, 
					@CurrentIndexName				= 'N/A', 
					@CurrentPartitionNumber			= 0,
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName, 
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Turn On DataSynch',
					@IsOnlineOperation				= 1,
					@TableChildOperationId			= 0,
					@SQLStatement					= @TurnOnDataSynchSQL, 
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName,
					@CurrentTableName				= @PrepTableName, 
					@CurrentIndexName				= 'N/A', 
					@CurrentPartitionNumber			= 0,
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName, 
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Enable CmdShell',
					@IsOnlineOperation				= 1,
					@TableChildOperationId			= 0,
					@SQLStatement					= @EnableCmdShellSQL, 
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1

            	EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @PrepTableName, 
					@CurrentIndexName				= 'N/A',
					@CurrentPartitionNumber			= 1,
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Create BCP View', 
					@IsOnlineOperation				= 1,
					@SQLStatement					= @CreateBCPViewSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1

            	EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @PrepTableName, 
					@CurrentIndexName				= 'N/A',
					@CurrentPartitionNumber			= 1,
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Loading Data', 
					@IsOnlineOperation				= 1,
					@SQLStatement					= @BCPCmd,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @PrepTableName, 
					@CurrentIndexName				= 'N/A', 
					@CurrentPartitionNumber			= 1,
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Check Constraint SQL',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @CheckConstraintSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1
			END
			            
			--create all indexes
			DECLARE CreateAllIndexes_Cur CURSOR LOCAL FAST_FORWARD FOR
				SELECT	ParentIndexName,
						IndexName, 
						CreateIndexStatement,
						RowNum,
						IndexSizeInMB
				FROM  #Indexes
				WHERE PrepTableName = @PrepTableName

			OPEN CreateAllIndexes_Cur

			FETCH NEXT FROM CreateAllIndexes_Cur INTO @CurrentParentIndexName, @IndexName, @CreateIndexStatement, @TableChildOperationId, @IndexSizeInMB

			WHILE @@FETCH_STATUS <> -1
			BEGIN
				IF @@FETCH_STATUS <> -2
				BEGIN
					EXEC DOI.spQueue_Insert
                        @CurrentDatabaseName            = @CurrentDatabaseName,
						@CurrentSchemaName				= @CurrentSchemaName ,
						@CurrentTableName				= @PrepTableName, 
						@CurrentIndexName				= @IndexName, 
						@CurrentPartitionNumber			= 1,
						@IndexSizeInMB					= @IndexSizeInMB,
						@CurrentParentSchemaName		= @CurrentSchemaName,
						@CurrentParentTableName			= @CurrentTableName,
						@CurrentParentIndexName			= @CurrentParentIndexName,
						@IndexOperation					= 'Create Index',
						@IsOnlineOperation				= 1,
						@SQLStatement					= @CreateIndexStatement,
						@TableChildOperationId			= @TableChildOperationId,
						@TransactionId					= @TransactionId,
						@BatchId						= @BatchId,
						@ExitTableLoopOnError			= 1
				END

				FETCH NEXT FROM CreateAllIndexes_Cur INTO @CurrentParentIndexName, @IndexName, @CreateIndexStatement, @TableChildOperationId, @IndexSizeInMB
			END

			CLOSE CreateAllIndexes_Cur
			DEALLOCATE CreateAllIndexes_Cur

			--create all Constraints
			DECLARE CreateAllConstraints_Cur CURSOR LOCAL FAST_FORWARD FOR
				SELECT	PTC.CreateConstraintStatement, RowNum
				FROM  DOI.vwTables_PrepTables_Constraints PTC
				WHERE PTC.SchemaName = @CurrentSchemaName
					AND PTC.ParentTableName = @CurrentTableName
					AND PTC.PrepTableName = @PrepTableName

			OPEN CreateAllConstraints_Cur

			FETCH NEXT FROM CreateAllConstraints_Cur INTO @CreateConstraintStatement, @TableChildOperationId

			WHILE @@FETCH_STATUS <> -1
			BEGIN
				IF @@FETCH_STATUS <> -2
				BEGIN
					EXEC DOI.spQueue_Insert
                        @CurrentDatabaseName            = @CurrentDatabaseName,
						@CurrentSchemaName				= @CurrentSchemaName ,
						@CurrentTableName				= @PrepTableName, 
						@CurrentIndexName				= 'N/A',
						@CurrentPartitionNumber			= 0,
						@IndexSizeInMB					= 0, 
						@CurrentParentSchemaName		= @CurrentSchemaName,
						@CurrentParentTableName			= @CurrentTableName,
						@CurrentParentIndexName			= 'N/A',
						@IndexOperation					= 'Create Constraint',
						@IsOnlineOperation				= 1,
						@SQLStatement					= @CreateConstraintStatement,
						@TableChildOperationId			= @TableChildOperationId,
						@TransactionId					= @TransactionId,
						@BatchId						= @BatchId,
						@ExitTableLoopOnError			= 1
				END

				FETCH NEXT FROM CreateAllConstraints_Cur INTO @CreateConstraintStatement, @TableChildOperationId
			END

			CLOSE CreateAllConstraints_Cur
			DEALLOCATE CreateAllConstraints_Cur

			IF @IsNewPartitionedPrepTable = 1
            BEGIN
				--MAKE SURE NOTHING HAS ERRORED OUT UP UNTIL THIS POINT BEFORE CONTINUING....
				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @SchemaName ,
					@CurrentTableName				= @TableName, 
					@CurrentIndexName				= 'N/A', 
					@CurrentPartitionNumber			= 0,
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @SchemaName,
					@CurrentParentTableName			= @TableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Prior Error Validation SQL',
					@IsOnlineOperation				= 1,
					@TableChildOperationId			= 0,
					@SQLStatement					= @PriorErrorValidationSQL,
					@TransactionId					= NULL,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1 
					
				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @PrepTableName, 
					@CurrentIndexName				= 'N/A',
					@CurrentPartitionNumber			= 0,
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Create Final Data Synch Table', 
					@IsOnlineOperation				= 1,
					@SQLStatement					= @CreateFinalDataSynchTableSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @PrepTableName, 
					@CurrentIndexName				= 'N/A',
					@CurrentPartitionNumber			= 0,
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Create Final Data Synch Trigger', 
					@IsOnlineOperation				= 1,
					@SQLStatement					= @CreateFinalDataSynchTriggerSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @CurrentTableName, 
					@CurrentIndexName				= 'N/A', 
					@CurrentPartitionNumber			= 0,
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Turn Off DataSynch',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @TurnOffDataSynchSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1

				DECLARE Partitions_Cur CURSOR LOCAL FAST_FORWARD FOR
					SELECT	NewPartitionedPrepTableName,
							UnPartitionedPrepTableName,
							PartitionDataValidationSQL,
							PartitionSwitchSQL,
							DropTableSQL,
							PartitionNumber
					FROM DOI.vwTables_PrepTables_Partitions
					WHERE SchemaName = @CurrentSchemaName
						AND ParentTableName = @CurrentTableName
					ORDER BY PartitionNumber ASC
				OPEN Partitions_Cur

				FETCH NEXT FROM Partitions_Cur INTO @NewPartitionedPrepTableName, @UnPartitionedPrepTableName, @PartitionDataValidationSQL, @SwitchPartitionsSQL, @DropTableSQL, @TableChildOperationId

				WHILE @@FETCH_STATUS <> -1
				BEGIN
					IF @@FETCH_STATUS <> -2
					BEGIN
						EXEC DOI.spQueue_Insert
                            @CurrentDatabaseName            = @CurrentDatabaseName,
							@CurrentSchemaName				= @CurrentSchemaName ,
							@CurrentTableName				= @NewPartitionedPrepTableName, 
							@CurrentIndexName				= 'N/A', 
							@CurrentPartitionNumber			= @TableChildOperationId,
							@IndexSizeInMB					= 0,
							@CurrentParentSchemaName		= @CurrentSchemaName,
							@CurrentParentTableName			= @CurrentTableName,
							@CurrentParentIndexName			= 'N/A',
							@IndexOperation					= 'Partition Data Validation SQL',
							@IsOnlineOperation				= 1,
							@TableChildOperationId			= @TableChildOperationId,
							@SQLStatement					= @PartitionDataValidationSQL,
							@TransactionId					= @TransactionId,
							@BatchId						= @BatchId,
							@ExitTableLoopOnError			= 1                    
					END

					FETCH NEXT FROM Partitions_Cur INTO @NewPartitionedPrepTableName, @UnPartitionedPrepTableName, @PartitionDataValidationSQL, @SwitchPartitionsSQL, @DropTableSQL, @TableChildOperationId
				END

				CLOSE Partitions_Cur

				OPEN Partitions_Cur

				FETCH NEXT FROM Partitions_Cur INTO @NewPartitionedPrepTableName, @UnPartitionedPrepTableName, @PartitionDataValidationSQL, @SwitchPartitionsSQL, @DropTableSQL, @TableChildOperationId

				--do partition switches, in a transaction
				SET @TransactionId = NEWID()

				IF @NewPartitionedPrepTableName IS NOT NULL
                BEGIN
                	EXEC DOI.spQueue_Insert
                        @CurrentDatabaseName            = @CurrentDatabaseName,
						@CurrentSchemaName				= @CurrentSchemaName ,
						@CurrentTableName				= @NewPartitionedPrepTableName, 
						@CurrentIndexName				= 'N/A', 
						@CurrentPartitionNumber			= 0, 
						@IndexSizeInMB					= 0,
						@CurrentParentSchemaName		= @CurrentSchemaName,
						@CurrentParentTableName			= @CurrentTableName,
						@CurrentParentIndexName			= 'N/A',
						@IndexOperation					= 'Begin Tran',
						@IsOnlineOperation				= 1,
						@TableChildOperationId				= 0,
						@SQLStatement					= 'SET TRANSACTION ISOLATION LEVEL SERIALIZABLE 
BEGIN TRAN',
						@TransactionId					= @TransactionId,
						@BatchId						= @BatchId,
						@ExitTableLoopOnError			= 1
				END
                
				WHILE @@FETCH_STATUS <> -1
				BEGIN
					IF @@FETCH_STATUS <> -2
					BEGIN
						EXEC DOI.spQueue_Insert
                            @CurrentDatabaseName            = @CurrentDatabaseName,
							@CurrentSchemaName				= @CurrentSchemaName ,
							@CurrentTableName				= @NewPartitionedPrepTableName, 
							@CurrentIndexName				= 'N/A',
							@CurrentPartitionNumber			= @TableChildOperationId,  
							@IndexSizeInMB					= 0,
							@CurrentParentSchemaName		= @CurrentSchemaName,
							@CurrentParentTableName			= @CurrentTableName,
							@CurrentParentIndexName			= 'N/A',
							@IndexOperation					= 'Switch Partitions SQL',
							@IsOnlineOperation				= 1,
							@TableChildOperationId			= @TableChildOperationId,
							@SQLStatement					= @SwitchPartitionsSQL,
							@TransactionId					= @TransactionId,
							@BatchId						= @BatchId,
							@ExitTableLoopOnError			= 1

						EXEC DOI.spQueue_Insert
                            @CurrentDatabaseName            = @CurrentDatabaseName,
							@CurrentSchemaName				= @CurrentSchemaName ,
							@CurrentTableName				= @UnPartitionedPrepTableName, 
							@CurrentIndexName				= 'N/A', 
							@CurrentPartitionNumber			= 0, 
							@IndexSizeInMB					= 0,
							@CurrentParentSchemaName		= @CurrentSchemaName,
							@CurrentParentTableName			= @CurrentTableName,
							@CurrentParentIndexName			= 'N/A',
							@IndexOperation					= 'Drop Table SQL',
							@IsOnlineOperation				= 1,
							@TableChildOperationId			= @TableChildOperationId,
							@SQLStatement					= @DropTableSQL,
							@TransactionId					= @TransactionId,
							@BatchId						= @BatchId,
							@ExitTableLoopOnError			= 1
					END

					FETCH NEXT FROM Partitions_Cur INTO @NewPartitionedPrepTableName, @UnPartitionedPrepTableName, @PartitionDataValidationSQL, @SwitchPartitionsSQL, @DropTableSQL, @TableChildOperationId
				END

				CLOSE Partitions_Cur
				DEALLOCATE Partitions_Cur

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @NewPartitionedPrepTableName, 
					@CurrentIndexName				= 'N/A', 
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Commit Tran',
					@IsOnlineOperation				= 1,
					@TableChildOperationId				= 0,
					@SQLStatement					= 'COMMIT TRAN',
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1

				SET @TransactionId = NULL 

				--validate if all has gone well:  do both tables exist, with the right structure, and are their rowcounts within a certain % of each other?
				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @NewPartitionedPrepTableName, 
					@CurrentIndexName				= 'N/A', 
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'FinalValidation',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @FinalRepartitioningValidationSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1

				--rename tables, in a transaction
				SET @TransactionId = NEWID()

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @NewPartitionedPrepTableName, 
					@CurrentIndexName				= 'N/A', 
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Begin Tran',
					@IsOnlineOperation				= 1,
					@TableChildOperationId				= 1,
					@SQLStatement					= 'SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
BEGIN TRAN',
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1

				--Rename all indexes  
                DECLARE RenameAllIndexes_Cur CURSOR LOCAL FAST_FORWARD FOR
					SELECT	ParentIndexName,
							IndexName, 
							RenameExistingTableIndexSQL,
							RenameNewPartitionedPrepTableIndexSQL,
							RowNum
					FROM  #Indexes
					WHERE PrepTableName = @PrepTableName

				OPEN RenameAllIndexes_Cur

				FETCH NEXT FROM RenameAllIndexes_Cur INTO @CurrentParentIndexName, @IndexName, @RenameExistingTableIndexSQL, @RenameNewPartitionedPrepTableIndexSQL, @TableChildOperationId

				WHILE @@FETCH_STATUS <> -1
				BEGIN
					IF @@FETCH_STATUS <> -2
					BEGIN
						IF NULLIF(LTRIM(RTRIM(@RenameExistingTableIndexSQL)), '') IS NOT NULL --MISSING INDEXES WON'T EXIST IN THE 'EXISTING' TABLE.
                        BEGIN
							EXEC DOI.spQueue_Insert
                                @CurrentDatabaseName            = @CurrentDatabaseName,
								@CurrentSchemaName				= @CurrentSchemaName ,
								@CurrentTableName				= @CurrentTableName, 
								@CurrentIndexName				= @IndexName, 
								@CurrentPartitionNumber			= 0,  
								@IndexSizeInMB					= 0,
								@CurrentParentSchemaName		= @CurrentSchemaName,
								@CurrentParentTableName			= @CurrentTableName,
								@CurrentParentIndexName			= @CurrentParentIndexName,
								@IndexOperation					= 'Rename Existing Table Index',
								@IsOnlineOperation				= 1,
								@TableChildOperationId			= @TableChildOperationId,
								@SQLStatement					= @RenameExistingTableIndexSQL,
								@TransactionId					= @TransactionId,
								@BatchId						= @BatchId,
								@ExitTableLoopOnError			= 1
						END

						EXEC DOI.spQueue_Insert
                            @CurrentDatabaseName            = @CurrentDatabaseName,
							@CurrentSchemaName				= @CurrentSchemaName ,
							@CurrentTableName				= @PrepTableName, 
							@CurrentIndexName				= @IndexName, 
							@CurrentPartitionNumber			= 0, 
							@IndexSizeInMB					= 0,
							@CurrentParentSchemaName		= @CurrentSchemaName,
							@CurrentParentTableName			= @CurrentTableName,
							@CurrentParentIndexName			= @CurrentParentIndexName,
							@IndexOperation					= 'Rename New Partitioned Prep Table Index',
							@IsOnlineOperation				= 1,
							@TableChildOperationId			= @TableChildOperationId,
							@SQLStatement					= @RenameNewPartitionedPrepTableIndexSQL,
							@TransactionId					= @TransactionId,
							@BatchId						= @BatchId,
							@ExitTableLoopOnError			= 1
					END

					FETCH NEXT FROM RenameAllIndexes_Cur INTO @CurrentParentIndexName, @IndexName, @RenameExistingTableIndexSQL, @RenameNewPartitionedPrepTableIndexSQL, @TableChildOperationId
				END

				CLOSE RenameAllIndexes_Cur
				DEALLOCATE RenameAllIndexes_Cur

				--Rename all Constraints  
				DECLARE RenameAllConstraints_Cur CURSOR LOCAL FAST_FORWARD for
					SELECT	PTC.RenameExistingTableConstraintSQL,
							PTC.RenameNewPartitionedPrepTableConstraintSQL,
							PTC.RowNum
					FROM  DOI.vwTables_PrepTables_Constraints PTC
					WHERE PTC.SchemaName = @CurrentSchemaName
						AND PTC.ParentTableName = @CurrentTableName
						AND PTC.PrepTableName = @PrepTableName

				OPEN RenameAllConstraints_Cur

				FETCH NEXT FROM RenameAllConstraints_Cur INTO @RenameExistingTableConstraintSQL, @RenameNewPartitionedPrepTableConstraintSQL, @TableChildOperationId

				WHILE @@FETCH_STATUS <> -1
				BEGIN
					IF @@FETCH_STATUS <> -2
					BEGIN
						EXEC DOI.spQueue_Insert
                            @CurrentDatabaseName            = @CurrentDatabaseName,
							@CurrentSchemaName				= @CurrentSchemaName ,
							@CurrentTableName				= @CurrentTableName, 
							@CurrentIndexName				= 'N/A', 
							@CurrentPartitionNumber			= 1, 
							@IndexSizeInMB					= 0,
							@CurrentParentSchemaName		= @CurrentSchemaName,
							@CurrentParentTableName			= @CurrentTableName,
							@CurrentParentIndexName			= 'N/A',
							@IndexOperation					= 'Rename Existing Table Constraint',
							@IsOnlineOperation				= 1,
							@TableChildOperationId			= @TableChildOperationId,
							@SQLStatement					= @RenameExistingTableConstraintSQL,
							@TransactionId					= @TransactionId,
							@BatchId						= @BatchId,
							@ExitTableLoopOnError			= 1

						EXEC DOI.spQueue_Insert
                            @CurrentDatabaseName            = @CurrentDatabaseName,
							@CurrentSchemaName				= @CurrentSchemaName ,
							@CurrentTableName				= @PrepTableName, 
							@CurrentIndexName				= 'N/A', 
							@CurrentPartitionNumber			= 0, 
							@IndexSizeInMB					= 0,
							@CurrentParentSchemaName		= @CurrentSchemaName,
							@CurrentParentTableName			= @CurrentTableName,
							@CurrentParentIndexName			= 'N/A',
							@IndexOperation					= 'Rename New Partitioned Prep Table Constraint',
							@IsOnlineOperation				= 1,
							@TableChildOperationId			= @TableChildOperationId,
							@SQLStatement					= @RenameNewPartitionedPrepTableConstraintSQL,
							@TransactionId					= @TransactionId,
							@BatchId						= @BatchId,
							@ExitTableLoopOnError			= 1
					END

					FETCH NEXT FROM RenameAllConstraints_Cur INTO @RenameExistingTableConstraintSQL, @RenameNewPartitionedPrepTableConstraintSQL, @TableChildOperationId
				END

				CLOSE RenameAllConstraints_Cur
				DEALLOCATE RenameAllConstraints_Cur

                --rename statistics from _OLD table
				DECLARE RenameAllStatistics_Cur CURSOR LOCAL FAST_FORWARD for
					SELECT	S.StatisticsName,
                            S.RenameExistingTableStatisticsSQL,
							S.RowNum
					FROM  DOI.vwTables_PrepTables_Statistics S
					WHERE S.SchemaName = @CurrentSchemaName
						AND S.ParentTableName = @CurrentTableName

				OPEN RenameAllStatistics_Cur

				FETCH NEXT FROM RenameAllStatistics_Cur INTO @CurrentStatisticsName, @RenameExistingTableStatisticsSQL, @TableChildOperationId

				WHILE @@FETCH_STATUS <> -1
				BEGIN
					IF @@FETCH_STATUS <> -2
					BEGIN
						EXEC DOI.spQueue_Insert
                            @CurrentDatabaseName            = @CurrentDatabaseName,
							@CurrentSchemaName				= @CurrentSchemaName ,
							@CurrentTableName				= @CurrentTableName, 
							@CurrentIndexName				= @CurrentStatisticsName, 
							@CurrentPartitionNumber			= 1, 
							@IndexSizeInMB					= 0,
							@CurrentParentSchemaName		= @CurrentSchemaName,
							@CurrentParentTableName			= @CurrentTableName,
							@CurrentParentIndexName			= 'N/A',
							@IndexOperation					= 'Rename Existing Statistic',
							@IsOnlineOperation				= 1,
							@TableChildOperationId			= @TableChildOperationId,
							@SQLStatement					= @RenameExistingTableStatisticsSQL,
							@TransactionId					= @TransactionId,
							@BatchId						= @BatchId,
							@ExitTableLoopOnError			= 1
					END

					FETCH NEXT FROM RenameAllStatistics_Cur INTO @CurrentStatisticsName, @RenameExistingTableStatisticsSQL, @TableChildOperationId
				END

				CLOSE RenameAllStatistics_Cur
				DEALLOCATE RenameAllStatistics_Cur

                --rename tables

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @CurrentTableName, 
					@CurrentIndexName				= 'N/A', 
					@CurrentPartitionNumber			= 1, 
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Rename Existing Table',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @RenameExistingTableSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @NewPartitionedPrepTableName, 
					@CurrentIndexName				= 'N/A', 
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Rename New Partitioned Prep Table',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @RenameNewPartitionedPrepTableSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1
                
				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @CurrentTableName, 
					@CurrentIndexName				= 'N/A',
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0, 
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Commit Tran',
					@IsOnlineOperation				= 1,
					@TableChildOperationId			= 1,
					@SQLStatement					= 'COMMIT TRAN',
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 1

				SET @TransactionId = NULL 
				--data synch
				--AT THIS POINT, WE HAVE ALREADY RENAMED, SO NO MORE ERRORS SHOULD EXIT THE LOOP.

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @CurrentTableName, 
					@CurrentIndexName				= 'N/A',
					@CurrentPartitionNumber			= 0,  
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Synch Deletes',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @SynchDeletesSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 0

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @CurrentTableName, 
					@CurrentIndexName				= 'N/A',
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0, 
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Synch Inserts',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @SynchInsertsSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 0

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @CurrentTableName, 
					@CurrentIndexName				= 'N/A',
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0, 
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Synch Updates',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @SynchUpdatesSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 0

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @CurrentTableName, 
					@CurrentIndexName				= 'N/A',
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0, 
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Drop Data Synch Trigger',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @DropDataSynchTriggerSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 0

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @CurrentTableName, 
					@CurrentIndexName				= 'N/A',
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0, 
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Drop Data Synch Table',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @DropDataSynchTableSQL,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 0

                --rename all statistics, before we check for any missing....
                EXEC DOI.spQueue_RenameStatistics 
                    @SchemaName = @CurrentSchemaName,
                    @TableName = @CurrentTableName

                --create any missing stats on the newly renamed table
				DECLARE CreateMissingStatistics_Cur CURSOR LOCAL FAST_FORWARD for
					SELECT	s.StatisticsName,
                            s.CreateStatisticsSQL,
                            ROW_NUMBER() OVER(ORDER BY S.StatisticsName) AS RowNum
					FROM  DOI.vwStatistics S
					WHERE s.SchemaName = @CurrentSchemaName
						AND s.TableName = @CurrentTableName

				OPEN CreateMissingStatistics_Cur

				FETCH NEXT FROM CreateMissingStatistics_Cur INTO @CurrentStatisticsName, @CreateMissingTableStatisticsSQL, @TableChildOperationId

				WHILE @@FETCH_STATUS <> -1
				BEGIN
					IF @@FETCH_STATUS <> -2
					BEGIN
						EXEC DOI.spQueue_Insert
                            @CurrentDatabaseName            = @CurrentDatabaseName,
							@CurrentSchemaName				= @CurrentSchemaName ,
							@CurrentTableName				= @CurrentTableName, 
							@CurrentIndexName				= @CurrentStatisticsName, 
							@CurrentPartitionNumber			= 1, 
							@IndexSizeInMB					= 0,
							@CurrentParentSchemaName		= @CurrentSchemaName,
							@CurrentParentTableName			= @CurrentTableName,
							@CurrentParentIndexName			= 'N/A',
							@IndexOperation					= 'Create Missing Table Statistic',
							@IsOnlineOperation				= 1,
							@TableChildOperationId			= @TableChildOperationId,
							@SQLStatement					= @CreateMissingTableStatisticsSQL,
							@TransactionId					= @TransactionId,
							@BatchId						= @BatchId,
							@ExitTableLoopOnError			= 1
					END

					FETCH NEXT FROM CreateMissingStatistics_Cur INTO @CurrentStatisticsName, @CreateMissingTableStatisticsSQL, @TableChildOperationId
				END

				CLOSE CreateMissingStatistics_Cur
				DEALLOCATE CreateMissingStatistics_Cur

				SET @DropParentOldTableFKs = '
EXEC DOI.DOI.spForeignKeysDrop
	@ParentSchemaName = ''' + @CurrentSchemaName + ''',
	@ParentTableName = ''' + @CurrentTableName + ''''
				
				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @CurrentTableName, 
					@CurrentIndexName				= 'N/A',
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0, 
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Drop Parent Old Table FKs',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @DropParentOldTableFKs,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 0

				SET @DropRefOldTableFKs = '
EXEC DOI.DOI.spForeignKeysDrop
	@ReferencedSchemaName = ''' + @CurrentSchemaName + ''',
	@ReferencedTableName = ''' + @CurrentTableName + ''''

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @CurrentTableName, 
					@CurrentIndexName				= 'N/A', 
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Drop Ref Old Table FKs',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @DropRefOldTableFKs,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 0

				SET @AddBackParentTableFKs = '
EXEC DOI.DOI.spForeignKeysAdd
	@ParentSchemaName = ''' + @CurrentSchemaName + ''',
	@ParentTableName = ''' + @CurrentTableName + ''''
				
				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @CurrentTableName, 
					@CurrentIndexName				= 'N/A', 
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0,
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Add back Parent Table FKs',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @AddBackParentTableFKs,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 0

				SET @AddBackRefTableFKs = '
EXEC DOI.DOI.spForeignKeysAdd
	@ReferencedSchemaName = ''' + @CurrentSchemaName + ''',
	@ReferencedTableName = ''' + @CurrentTableName + ''''

				EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
					@CurrentSchemaName				= @CurrentSchemaName ,
					@CurrentTableName				= @CurrentTableName, 
					@CurrentIndexName				= 'N/A',
					@CurrentPartitionNumber			= 0, 
					@IndexSizeInMB					= 0, 
					@CurrentParentSchemaName		= @CurrentSchemaName,
					@CurrentParentTableName			= @CurrentTableName,
					@CurrentParentIndexName			= 'N/A',
					@IndexOperation					= 'Add back Ref Table FKs',
					@IsOnlineOperation				= 1,
					@SQLStatement					= @AddBackRefTableFKs,
					@TransactionId					= @TransactionId,
					@BatchId						= @BatchId,
					@ExitTableLoopOnError			= 0

                EXEC DOI.spQueue_Insert
                    @CurrentDatabaseName            = @CurrentDatabaseName,
		            @CurrentSchemaName				= @SchemaName,
		            @CurrentTableName				= @TableName, 
		            @CurrentIndexName				= 'N/A',
		            @CurrentPartitionNumber			= 0,  
		            @IndexSizeInMB					= 0,
		            @CurrentParentSchemaName		= @SchemaName,
		            @CurrentParentTableName			= @TableName, 
		            @CurrentParentIndexName			= 'N/A',
		            @IndexOperation					= 'Delete PartitionState Metadata',
		            @IsOnlineOperation				= 1,
		            @TableChildOperationId			= 0,
		            @SQLStatement					= @DeletePartitionStateMetadataSQL, 
		            @TransactionId					= @TransactionId,
		            @BatchId						= @BatchId,
		            @ExitTableLoopOnError			= 0
			END --if @IsNewPartitionedTable = 1
		END --IF @@FETCH_STATUS <> -2
		FETCH NEXT FROM PrepTable_Cur INTO @CurrentDatabaseName, @CurrentSchemaName, @CurrentTableName, @CurrentPartitionColumn, @PrepTableName, @CreatePrepTableSQL, @CreateDataSynchTriggerSQL, @CreateFinalDataSynchTableSQL, @CreateFinalDataSynchTriggerSQL, @TurnOnDataSynchSQL, @TurnOffDataSynchSQL, @CreateBCPViewSQL, @BCPCmd, @NewStorage, @NewStorageType, @IsNewPartitionedPrepTable, @NewPartitionedPrepTableName, @CheckConstraintSQL, @RenameNewPartitionedPrepTableSQL, @RenameExistingTableSQL, @DropDataSynchTriggerSQL, @DropDataSynchTableSQL, @SynchDeletesSQL, @SynchInsertsSQL, @SynchUpdatesSQL, @FinalRepartitioningValidationSQL, @DeletePartitionStateMetadataSQL
	END  --IF @@FETCH_STATUS <> -1

	CLOSE PrepTable_Cur
	DEALLOCATE PrepTable_Cur

END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0 ROLLBACK TRAN;

	/*CLOSE CURSORS IF THEY ARE STILL OPEN*/
	IF (SELECT CURSOR_STATUS('local','PrepTable_Cur')) >= -1
	BEGIN
		IF (SELECT CURSOR_STATUS('local','PrepTable_Cur')) > -1
		BEGIN
			CLOSE PrepTable_Cur
		END

		DEALLOCATE PrepTable_Cur
	END;

	IF (SELECT CURSOR_STATUS('local','CreateAllIndexes_Cur')) >= -1
	BEGIN
		IF (SELECT CURSOR_STATUS('local','CreateAllIndexes_Cur')) > -1
		BEGIN
			CLOSE CreateAllIndexes_Cur
		END

		DEALLOCATE CreateAllIndexes_Cur
	END;

	IF (SELECT CURSOR_STATUS('local','CreateAllConstraints_Cur')) >= -1
	BEGIN
		IF (SELECT CURSOR_STATUS('local','CreateAllConstraints_Cur')) > -1
		BEGIN
			CLOSE CreateAllConstraints_Cur
		END

		DEALLOCATE CreateAllConstraints_Cur
	END;
	
	IF (SELECT CURSOR_STATUS('local','Partitions_Cur')) >= -1
	BEGIN
		IF (SELECT CURSOR_STATUS('local','Partitions_Cur')) > -1
		BEGIN
			CLOSE SwitchPartitions_Cur
		END

		DEALLOCATE SwitchPartitions_Cur
	END;

	IF (SELECT CURSOR_STATUS('local','RenameAllIndexes_Cur')) >= -1
	BEGIN
		IF (SELECT CURSOR_STATUS('local','RenameAllIndexes_Cur')) > -1
		BEGIN
			CLOSE RenameAllIndexes_Cur
		END

		DEALLOCATE RenameAllIndexes_Cur
	END;

	IF (SELECT CURSOR_STATUS('local','RenameAllConstraints_Cur')) >= -1
	BEGIN
		IF (SELECT CURSOR_STATUS('local','RenameAllConstraints_Cur')) > -1
		BEGIN
			CLOSE RenameAllConstraints_Cur
		END

		DEALLOCATE RenameAllConstraints_Cur
	END;
    IF (SELECT CURSOR_STATUS('local','RenameAllStatistics_Cur')) >= -1
	BEGIN
		IF (SELECT CURSOR_STATUS('local','RenameAllStatistics_Cur')) > -1
		BEGIN
			CLOSE RenameAllStatistics_Cur
		END

		DEALLOCATE RenameAllStatistics_Cur
	END;

	IF (SELECT CURSOR_STATUS('local','CreateMissingStatistics_Cur')) >= -1
	BEGIN
		IF (SELECT CURSOR_STATUS('local','CreateMissingStatistics_Cur')) > -1
		BEGIN
			CLOSE CreateMissingStatistics_Cur
		END

		DEALLOCATE CreateMissingStatistics_Cur
	END;
    
	THROW;
END CATCH

GO

GO
--------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue_BCPTables.sql" ----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spQueue_BCPTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('91122278-bd09-5944-97a0-f8f4c01684f9' AS UNIQUEIDENTIFIER), 'F41A726B9FA864B7D377229B6A6C1304C4588B6A7DF2A9F93DCF77EFF932277E', 'Programmable Objects\Stored Procedures\DOI.spQueue_BCPTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue_BCPTables.sql", ID: {91122278-bd09-5944-97a0-f8f4c01684f9} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f09c2548-bafe-56b9-a079-1c6adf490df5' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1F143E3057E14AA42AF31A95879E457B04DCD6CCAA4F90A083A6AACC0315D5E8')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRun_LogInsert.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_LogInsert.sql", ID: {f09c2548-bafe-56b9-a079-1c6adf490df5} *****';

GO


--------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_LogInsert.sql" ----------
GO
IF OBJECT_ID('[DOI].[spRun_LogInsert]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRun_LogInsert];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRun_LogInsert]
			@CurrentDatabaseName	NVARCHAR(128),
			@CurrentSchemaName		NVARCHAR(128),
			@CurrentTableName		NVARCHAR(128) ,
			@CurrentIndexName		NVARCHAR(128) ,
			@CurrentPartitionNumber	SMALLINT,
			@IndexSizeInMB			INT,
			@SQLStatement			VARCHAR(MAX),
			@IndexOperation			VARCHAR(50),
			@IsOnlineOperation		BIT,
			@RowCount				INT,
			@TableChildOperationId	SMALLINT,
			@RunStatus				VARCHAR(20),
			@TransactionId			UNIQUEIDENTIFIER,
			@BatchId				UNIQUEIDENTIFIER,
			@ErrorText				VARCHAR(4000) = NULL,
            @InfoMessage            VARCHAR(4000) = NULL,
			@SeqNo					INT,
			@ExitTableLoopOnError	BIT 
AS

/*
	DECLARE @Now datetime2 = sysdatetime()

	exec DOI.spRunLogInsert
		@CurrentDatabaseName = 'test',
		@CurrentSchemaName = 'test',
		@CurrentTableName = 'test',
		@CurrentIndexName = 'test',
		@CurrentDateTime = @Now output,
		@SQLStatement = 'bla',
		@ErrorText = NULL

	select @Now
*/

BEGIN TRY 
	IF @IndexSizeInMB IS NULL
	BEGIN
		SET @IndexSizeInMB = 0
	END
    
	INSERT INTO DOI.Log ( DatabaseName, SchemaName ,TableName ,IndexName, IndexSizeInMB, LoginName, UserName, LogDateTime, SQLStatement, IndexOperation, IsOnlineOperation, [RowCount], TableChildOperationId, RunStatus, ErrorText, InfoMessage, TransactionId, BatchId, SeqNo, ExitTableLoopOnError)
	VALUES ( @CurrentDatabaseName, @CurrentSchemaName, @CurrentTableName, @CurrentIndexName, @IndexSizeInMB, SUSER_NAME(), USER_NAME(), SYSDATETIME(), @SQLStatement, @IndexOperation, @IsOnlineOperation, @RowCount, @TableChildOperationId, @RunStatus, @ErrorText, @InfoMessage, @TransactionId, @BatchId, @SeqNo, @ExitTableLoopOnError)
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0 ROLLBACK TRAN;
	THROW;
END CATCH 
GO

GO
---------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_LogInsert.sql" -----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRun_LogInsert.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('f09c2548-bafe-56b9-a079-1c6adf490df5' AS UNIQUEIDENTIFIER), '1F143E3057E14AA42AF31A95879E457B04DCD6CCAA4F90A083A6AACC0315D5E8', 'Programmable Objects\Stored Procedures\DOI.spRun_LogInsert.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_LogInsert.sql", ID: {f09c2548-bafe-56b9-a079-1c6adf490df5} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('af8c7f24-aa5c-57f7-8b59-17069557cf4d' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'EF948FC983BDF71E3B548AC542CD1E2162656AB29CCF56B67C7ED73C380BE3F3')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRun_RefreshPartitionState.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_RefreshPartitionState.sql", ID: {af8c7f24-aa5c-57f7-8b59-17069557cf4d} *****';

GO


--- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_RefreshPartitionState.sql" ----
GO
IF OBJECT_ID('[DOI].[spRun_RefreshPartitionState]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRun_RefreshPartitionState];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRun_RefreshPartitionState]

AS

SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
SET ARITHABORT ON
SET CONCAT_NULL_YIELDS_NULL ON
SET NUMERIC_ROUNDABORT OFF
SET QUOTED_IDENTIFIER ON

--DELETE ANY ROWS FOR TABLES THAT ARE NOT GOING TO BE PARTITIONED NOW
DELETE PS
FROM DOI.Run_PartitionState PS
WHERE NOT EXISTS(	SELECT 'True'
					FROM DOI.vwTables T
					WHERE T.DatabaseName = PS.DatabaseName 
                        AND T.SchemaName = PS.SchemaName
						AND T.TableName = PS.ParentTableName
						AND T.ReadyToQueue = 1
						AND T.IntendToPartition = 1
						AND T.IsStorageChanging = 1)

--INSERT ROWS FOR TABLES THAT ARE GOING TO BE PARTITIONED NOW
INSERT INTO DOI.Run_PartitionState ( DatabaseName, SchemaName ,ParentTableName , PrepTableName, PartitionFromValue ,PartitionToValue ,DataSynchState ,LastUpdateDateTime )
SELECT DISTINCT DatabaseName, SchemaName, TableName, PrepTableName, PT.BoundaryValue, PT.NextBoundaryValue, 0, GETDATE()
FROM DOI.vwTables_PrepTables PT
WHERE EXISTS (	SELECT 'True' 
				FROM DOI.vwTables T 
				WHERE T.DatabaseName = PT.DatabaseName 
                    AND T.SchemaName = PT.SchemaName
					AND T.TableName = PT.TableName
					AND T.ReadyToQueue = 1
					AND T.IntendToPartition = 1
					AND T.IsStorageChanging = 1)
	AND NOT EXISTS (SELECT 'True' 
					FROM DOI.Run_PartitionState PS 
					WHERE PS.DatabaseName = PT.DatabaseName 
                        AND PS.SchemaName = PT.SchemaName
						AND PS.ParentTableName = PT.TableName
						AND PS.PrepTableName = PT.PrepTableName)

--IN CASE THE PARTITIONING STRATEGY CHANGES FOR A TABLE, DELETE THE OLD PARTITIONS THAT NO LONGER EXIST.
DELETE PS
FROM DOI.Run_PartitionState PS
WHERE NOT EXISTS(	SELECT 'True' 
					FROM DOI.Run_PartitionState PS2
					WHERE PS.DatabaseName = PS2.DatabaseName 
                        AND PS.SchemaName = PS2.SchemaName
						AND PS.ParentTableName = PS2.ParentTableName
						AND PS.PrepTableName = PS2.PrepTableName)
GO

GO
---- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_RefreshPartitionState.sql" -----


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRun_RefreshPartitionState.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('af8c7f24-aa5c-57f7-8b59-17069557cf4d' AS UNIQUEIDENTIFIER), 'EF948FC983BDF71E3B548AC542CD1E2162656AB29CCF56B67C7ED73C380BE3F3', 'Programmable Objects\Stored Procedures\DOI.spRun_RefreshPartitionState.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_RefreshPartitionState.sql", ID: {af8c7f24-aa5c-57f7-8b59-17069557cf4d} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7bae4560-738c-55c7-8184-275057456b24' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F17F01EB563C02F89BCCD75A27E7152295010CE4EE28A728490E54A4E1863EF7')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spQueue_ConstraintsNotInMetadata.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue_ConstraintsNotInMetadata.sql", ID: {7bae4560-738c-55c7-8184-275057456b24} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue_ConstraintsNotInMetadata.sql" 
GO
IF OBJECT_ID('[DOI].[spQueue_ConstraintsNotInMetadata]') IS NOT NULL
	DROP PROCEDURE [DOI].[spQueue_ConstraintsNotInMetadata];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   PROCEDURE [DOI].[spQueue_ConstraintsNotInMetadata]

AS

/*
	EXEC DOI.spQueue_ConstraintsNotInMetadata

	SELECT * FROM DOI.DefaultConstraints
*/

DELETE DOI.CheckConstraintsNotInMetadata
DELETE DOI.DefaultConstraintsNotInMetadata

INSERT INTO DOI.CheckConstraintsNotInMetadata ( DatabaseName, SchemaName ,TableName ,ColumnName , CheckDefinition ,IsDisabled ,CheckConstraintName )
SELECT d.name, s.name, t.name, c.name, ch.definition, ch.is_disabled, ch.name
FROM DOI.SysCheckConstraints ch
    INNER JOIN DOI.SysDatabases d ON d.database_id = ch.database_id 
	INNER JOIN DOI.SysSchemas s ON s.schema_id = ch.schema_id
	INNER JOIN (SELECT	name, 
						object_id 
				FROM DOI.SysTables) t ON t.object_id = ch.parent_object_id
	LEFT JOIN DOI.SysColumns c ON c.object_id = t.object_id
		AND ch.parent_column_id = c.column_id
WHERE t.name NOT LIKE '%|_OLD' ESCAPE '|'
	AND t.name NOT IN ('DBDefragLog')
	AND NOT EXISTS (SELECT 'True' 
					FROM DOI.CheckConstraints CC 
					WHERE s.name = cc.SchemaName COLLATE DATABASE_DEFAULT
						AND t.name = cc.TableName COLLATE DATABASE_DEFAULT 
						AND ch.name = cc.CheckConstraintName COLLATE DATABASE_DEFAULT)
	AND NOT EXISTS(	SELECT 'True' 
					FROM DOI.CheckConstraintsNotInMetadata CH2 
					WHERE s.Name = CH2.SchemaName COLLATE DATABASE_DEFAULT
						AND t.Name = CH2.TableName COLLATE DATABASE_DEFAULT 
						AND ch.NAME = CH2.CheckConstraintName COLLATE DATABASE_DEFAULT)
																		
INSERT INTO DOI.DefaultConstraintsNotInMetadata ( DatabaseName, SchemaName ,TableName ,ColumnName ,DefaultDefinition )
SELECT d2.name, s.name, t.name, c.name, d.definition
FROM DOI.SysDefaultConstraints d 
    INNER JOIN DOI.SysDatabases d2 ON d2.database_id = d.database_id 
	INNER JOIN DOI.SysSchemas s ON s.schema_id = d.schema_id
	INNER JOIN (SELECT	name , 
						object_id 
				FROM DOI.SysTables) t ON t.object_id = d.parent_object_id
	INNER JOIN DOI.SysColumns c ON c.object_id = t.object_id
		AND d.parent_column_id = c.column_id
WHERE t.name NOT LIKE '%|_OLD' ESCAPE '|'
	AND t.name NOT IN ('DBDefragLog')
	AND NOT EXISTS (SELECT 'True' 
					FROM DOI.DefaultConstraints CC 
					WHERE s.name = cc.SchemaName COLLATE DATABASE_DEFAULT 
						AND t.name = cc.TableName COLLATE DATABASE_DEFAULT 
						AND d.name = cc.DefaultConstraintName COLLATE DATABASE_DEFAULT)
	AND NOT EXISTS(	SELECT 'True' 
					FROM DOI.DefaultConstraintsNotInMetadata D2 
					WHERE s.Name = D2.SchemaName COLLATE DATABASE_DEFAULT 
						AND t.Name = D2.TableName COLLATE DATABASE_DEFAULT 
						AND c.Name = D2.ColumnName COLLATE DATABASE_DEFAULT )--check definition here as well.
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue_ConstraintsNotInMetadata.sql" --


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spQueue_ConstraintsNotInMetadata.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('7bae4560-738c-55c7-8184-275057456b24' AS UNIQUEIDENTIFIER), 'F17F01EB563C02F89BCCD75A27E7152295010CE4EE28A728490E54A4E1863EF7', 'Programmable Objects\Stored Procedures\DOI.spQueue_ConstraintsNotInMetadata.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue_ConstraintsNotInMetadata.sql", ID: {7bae4560-738c-55c7-8184-275057456b24} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a1347716-ca10-5662-9005-9a4ad607583e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6FA3B34EB7A5C74AC2981BA8E8609CB173DB3D277988566A45587F34637FAD4A')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spQueue_IndexesNotInMetadata.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue_IndexesNotInMetadata.sql", ID: {a1347716-ca10-5662-9005-9a4ad607583e} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue_IndexesNotInMetadata.sql" ----
GO
IF OBJECT_ID('[DOI].[spQueue_IndexesNotInMetadata]') IS NOT NULL
	DROP PROCEDURE [DOI].[spQueue_IndexesNotInMetadata];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spQueue_IndexesNotInMetadata]


AS

/*
	EXEC DOI.spRun_IndexesNotInMetadata
*/

	DELETE INIM
	FROM DOI.IndexesNotInMetadata INIM
	WHERE EXISTS  (	SELECT 'T' 
					FROM DOI.IndexesRowStore IRS 
					WHERE IRS.SchemaName = INIM.SchemaName
						AND IRS.TableName = INIM.TableName
						AND IRS.IndexName = INIM.IndexName
					UNION ALL 
					SELECT 'T' 
					FROM DOI.IndexesColumnStore ICS 
					WHERE ICS.SchemaName = INIM.SchemaName 
						AND ICS.TableName = INIM.TableName
						AND ICS.IndexName = INIM.IndexName)
		OR (INIM.TableName LIKE '%|_OLD' ESCAPE '|'
				OR INIM.TableName LIKE '%|_NewPartitionedTableFromPrep' ESCAPE '|')

	INSERT INTO DOI.IndexesNotInMetadata ( SchemaName ,TableName ,IndexName ,DropSQLScript )
	SELECT S.NAME AS SchemaName, T.NAME AS TableName, I.NAME AS IndexName, 'DROP INDEX ' + S.NAME + '.' + T.NAME + '.' + I.NAME AS ScriptToDropIndex
	FROM SYS.INDEXES I
		INNER JOIN SYS.TABLES T ON T.object_id = I.object_id
		INNER JOIN SYS.SCHEMAS S ON S.schema_id = T.schema_id
		INNER JOIN DOI.Tables T2 ON T2.SchemaName = s.name	COLLATE DATABASE_DEFAULT
			AND T2.TableName = t.name	COLLATE DATABASE_DEFAULT
	WHERE NOT EXISTS (	SELECT 'T' 
						FROM DOI.IndexesRowStore IRS 
						WHERE IRS.SchemaName = S.NAME 	COLLATE DATABASE_DEFAULT
							AND IRS.TableName = T.NAME 	COLLATE DATABASE_DEFAULT
							AND IRS.IndexName = I.NAME	COLLATE DATABASE_DEFAULT
						UNION ALL 
						SELECT 'T' 
						FROM DOI.IndexesColumnStore ICS 
						WHERE ICS.SchemaName = S.NAME 	COLLATE DATABASE_DEFAULT
							AND ICS.TableName = T.NAME 	COLLATE DATABASE_DEFAULT
							AND ICS.IndexName = I.NAME	COLLATE DATABASE_DEFAULT)
		AND NOT EXISTS (SELECT 'True' 
						FROM DOI.IndexesNotInMetadata INIM 
						WHERE INIM.SchemaName = s.name 	COLLATE DATABASE_DEFAULT
							AND INIM.TableName = t.name COLLATE DATABASE_DEFAULT
							AND INIM.IndexName = i.name	COLLATE DATABASE_DEFAULT)
		AND S.NAME IN ('dbo', 'DataMart')
		AND I.type_desc <> 'HEAP'
		AND t.name NOT LIKE '%|_OLD' ESCAPE '|'
		AND t.name NOT LIKE '%|_NewPartitionedTableFromPrep' ESCAPE '|'

	UPDATE INIM
	SET ignore = 1
	--SELECT *
	FROM DOI.IndexesNotInMetadata INIM
	WHERE IndexName = 'IDX_Pays_CheckSummaryReportCover2'

GO

GO
--- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue_IndexesNotInMetadata.sql" -----


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spQueue_IndexesNotInMetadata.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('a1347716-ca10-5662-9005-9a4ad607583e' AS UNIQUEIDENTIFIER), '6FA3B34EB7A5C74AC2981BA8E8609CB173DB3D277988566A45587F34637FAD4A', 'Programmable Objects\Stored Procedures\DOI.spQueue_IndexesNotInMetadata.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue_IndexesNotInMetadata.sql", ID: {a1347716-ca10-5662-9005-9a4ad607583e} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2c85b2aa-d6a5-5063-9164-451eb1e5190c' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B43F2C3132543C58C34F379601F2545050C9357A12828B276C0FF7D3C8DF8479')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spQueue.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue.sql", ID: {2c85b2aa-d6a5-5063-9164-451eb1e5190c} *****';

GO


------------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue.sql" --------------
GO
IF OBJECT_ID('[DOI].[spQueue]') IS NOT NULL
	DROP PROCEDURE [DOI].[spQueue];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spQueue]
	@OnlineOperations BIT,
	@IsBeingRunDuringADeployment BIT,
	@BatchIdOUT UNIQUEIDENTIFIER OUTPUT 

AS

/*
    declare @BatchId uniqueidentifier

	EXEC DOI.spQueue 
		@OnlineOperations = 0,
		@IsBeingRunDuringADeployment = 0,
        @BatchIdOUT = @BatchId

*/
SET NOCOUNT ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
SET ARITHABORT ON
SET CONCAT_NULL_YIELDS_NULL ON
SET NUMERIC_ROUNDABORT OFF
SET QUOTED_IDENTIFIER ON


BEGIN TRY
	SET @BatchIdOUT = NEWID()

    EXEC DOI.spRefreshMetadata_Run_All

	--TRACK INDEXES NOT IN METADATA...DO THIS LATER
	EXEC DOI.spQueue_IndexesNotInMetadata

	EXEC DOI.spQueue_ConstraintsNotInMetadata

	DECLARE @CRLF CHAR(2) = CHAR(13) + CHAR(10)

	DECLARE @CurrentDatabaseName					NVARCHAR(128),
			@CurrentSchemaName						NVARCHAR(128),
			@CurrentTableName						NVARCHAR(128),
			@CurrentIndexName						NVARCHAR(128),
            @CurrentStatisticsName                  NVARCHAR(128),
			@CurrentPartitionNumber					SMALLINT,
            @FreeDataSpaceValidationSQL             VARCHAR(MAX) = '',
            @FreeLogSpaceValidationSQL              VARCHAR(MAX) = '',
            @FreeTempDBSpaceValidationSQL           VARCHAR(MAX) = '',
            @GetApplicationLockSQL					NVARCHAR(300),
            @ReleaseApplicationLockSQL				NVARCHAR(300),
			@DropSingleIndexSQL						VARCHAR(MAX) = '',
			@CreateSingleIndexSQL					VARCHAR(MAX) = '',
            @StatisticsUpdateType					VARCHAR(MAX) = '',
            @OriginalStatisticsUpdateType           VARCHAR(MAX) = '',
            @IsStatisticsOnlineOperation            BIT,
            @StatisticsSQL                          VARCHAR(MAX) = '',
            @DropStatisticsSQL                      VARCHAR(MAX) = '',
			@IsClusteredIndexBeingDroppedForTable	BIT = 0,
			@IsOnlineOperation						BIT,
			@IsBCPTable								BIT,
			@IsStorageChanging						BIT,
			@WhichUniqueConstraintIsBeingDropped	VARCHAR(5),
			@HasMissingIndexes						BIT,
			@DropRefFKs								VARCHAR(MAX) ,
			@RecreateRefFKSQL						VARCHAR(MAX),
			@IndexUpdateType						VARCHAR(20),
			@OriginalIndexUpdateType				VARCHAR(20),
			@TransactionId							UNIQUEIDENTIFIER = NULL,
			@IndexSizeInMB							INT,
			@NeedsTransaction						BIT,
            @ChangeDBSQL                            VARCHAR(MAX) = 'USE '

    DROP TABLE IF EXISTS #TablesWithPendingConstraintsTable

    CREATE TABLE #TablesWithPendingConstraintsTable  (	DatabaseName SYSNAME, 
														SchemaName SYSNAME, 
														TableName SYSNAME
                                                        PRIMARY KEY NONCLUSTERED (SchemaName, TableName))

	INSERT INTO #TablesWithPendingConstraintsTable ( DatabaseName, SchemaName, TableName )
	SELECT	X.DatabaseName,
			X.SchemaName, 
			X.TableName
	FROM DOI.Tables T
		INNER JOIN (SELECT DatabaseName, SchemaName, TableName
					FROM DOI.CheckConstraintsNotInMetadata 			
					UNION
					SELECT DatabaseName, SchemaName, TableName
					FROM DOI.DefaultConstraintsNotInMetadata
					UNION
					SELECT DatabaseName, SchemaName, TableName
					FROM DOI.IndexesNotInMetadata
					WHERE Ignore = 0) X
			ON X.DatabaseName = T.DatabaseName
				AND X.SchemaName = T.SchemaName
				AND X.TableName = T.TableName
	WHERE T.ReadyToQueue = 1

	WHILE @@FETCH_STATUS <> -1
	BEGIN
		IF @@FETCH_STATUS <> -2
		BEGIN
	        DECLARE Tables_Queued_Cur CURSOR LOCAL FAST_FORWARD FOR
		        SELECT	FN.DatabaseName,
				        FN.SchemaName, 
				        FN.TableName, 
				        FN.IsClusteredIndexBeingDropped,
				        FN.WhichUniqueConstraintIsBeingDropped,
				        FN.AreIndexesMissing,
				        FN.IntendToPartition,
				        FN.IsStorageChanging,
				        FN.NeedsTransaction,
                        FN.FreeDataSpaceCheckSQL,
                        FN.FreeLogSpaceCheckSQL,
                        FN.FreeTempDBSpaceCheckSQL
		        FROM DOI.vwTables FN
		        WHERE (FN.AreIndexesBeingUpdated = 1 
				        OR FN.AreIndexesMissing = 1 
				        OR FN.AreIndexesFragmented = 1
				        OR FN.IsStorageChanging = 1
                        OR FN.AreStatisticsChanging = 1) --any indexes to add or update?
			        AND ReadyToQueue = 1
			        AND NOT EXISTS (SELECT 'True' 
							        FROM #TablesWithPendingConstraintsTable TV 
							        WHERE TV.SchemaName = FN.SchemaName 
								        AND TV.TableName = FN.TableName)
    
	        OPEN Tables_Queued_Cur

	        FETCH NEXT FROM Tables_Queued_Cur INTO @CurrentDatabaseName, @CurrentSchemaName, @CurrentTableName, @IsClusteredIndexBeingDroppedForTable, @WhichUniqueConstraintIsBeingDropped, @HasMissingIndexes, @IsBCPTable, @IsStorageChanging, /*@RunAutomaticallyOnDeployment, @RunAutomaticallyOnSQLJob,*/ @NeedsTransaction, @FreeDataSpaceValidationSQL, @FreeLogSpaceValidationSQL, @FreeTempDBSpaceValidationSQL

	        WHILE @@FETCH_STATUS <> -1
	        BEGIN
		        IF @@FETCH_STATUS <> -2
		        BEGIN
                    BEGIN TRY
			            SELECT  @GetApplicationLockSQL	    = '
EXEC DOI.DOI.spRun_GetApplicationLock
    @DatabaseName + ''' + @CurrentDatabaseName + ''',
    @BatchId = ''' + CAST(@BatchIdOUT AS VARCHAR(40)) + ''',
    @IsOnlineOperation = ' + CAST(@OnlineOperations AS VARCHAR(1)),
			                    @ReleaseApplicationLockSQL	= '
EXEC DOI.DOI.spRun_ReleaseApplicationLock
    @DatabaseName + ''' + @CurrentDatabaseName + ''',
    @BatchId = ''' + CAST(@BatchIdOUT AS VARCHAR(40)) + ''',
    @IsOnlineOperation = ' + CAST(@OnlineOperations AS VARCHAR(1))

		                --APPLICATION LOCK, SO OTHER PROCESSES CAN SEE IF THIS IS RUNNING...
		                EXEC DOI.spQueue_Insert
			                @CurrentDatabaseName			= @CurrentDatabaseName ,
			                @CurrentSchemaName				= '1', 
			                @CurrentTableName				= '1', 
			                @CurrentIndexName				= '1', 
			                @CurrentPartitionNumber			= 0, 
			                @IndexSizeInMB					= 0,
			                @CurrentParentSchemaName		= '1', 
			                @CurrentParentTableName			= '1', 
			                @CurrentParentIndexName			= '1',
			                @IndexOperation					= 'Get Application Lock',
			                @IsOnlineOperation				= @OnlineOperations, --RUNS FOR BOTH ONLINE AND OFFLINE OPERATIONS
			                @TableChildOperationId			= 0,
			                @SQLStatement					= @GetApplicationLockSQL,
			                @TransactionId					= NULL,
			                @BatchId						= @BatchIdOUT,
			                @ExitTableLoopOnError			= 1
                
                		IF EXISTS (	SELECT 'True' 
							        FROM #TablesWithPendingConstraintsTable 
							        WHERE DatabaseName = @CurrentDatabaseName
								        AND SchemaName = @CurrentSchemaName 
								        AND TableName = @CurrentTableName)
				        BEGIN
					        DECLARE @ErrorMessage VARCHAR(MAX) = @CurrentDatabaseName + '.' + @CurrentSchemaName + '.' + @CurrentTableName + ' has pending constraint or index changes and will NOT be queued for refreshing of Index Structures.'
					        RAISERROR(@ErrorMessage, 10, 1)

					        EXEC DOI.spRun_LogInsert 
						        @CurrentDatabaseName	= @CurrentDatabaseName ,
						        @CurrentSchemaName		= @CurrentSchemaName ,   
						        @CurrentTableName		= @CurrentTableName ,    
						        @CurrentIndexName		= N'N/A' , 
						        @CurrentPartitionNumber	= 0, 
						        @IndexSizeInMB			= 0,   
						        @SQLStatement			= @ErrorMessage ,
						        @IndexOperation			= 'PendingConstraintValidation' ,  
						        @IsOnlineOperation		= @OnlineOperations, --RUNS FOR BOTH ONLINE AND OFFLINE OPERATIONS
						        @RowCount				= 0 ,     
						        @TableChildOperationId	= 0 , 
						        @RunStatus				= 'Error' , 
						        @TransactionId			= NULL ,      
						        @BatchId				= @BatchIdOUT ,    
						        @SeqNo					= 0,        
						        @ErrorText				= @ErrorMessage ,            
						        @ExitTableLoopOnError	= 0  
				        END

				        --GET THE INDEX SIZE, THE LOCATION OF THE INDEX, AND CHECK THE FREE DISK SPACE ON THAT DRIVE.
				        EXEC DOI.spQueue_Insert
					        @CurrentDatabaseName			= @CurrentDatabaseName ,
					        @CurrentSchemaName				= @CurrentSchemaName ,
					        @CurrentTableName				= @CurrentTableName, 
					        @CurrentIndexName				= 'N/A', 
					        @CurrentPartitionNumber			= 0, 
					        @IndexSizeInMB					= 0,
					        @CurrentParentSchemaName		= @CurrentSchemaName ,
					        @CurrentParentTableName			= @CurrentTableName, 
					        @CurrentParentIndexName			= 'N/A',
					        @IndexOperation					= 'Free Data Space Validation',
					        @IsOnlineOperation				= @OnlineOperations, --RUNS FOR BOTH ONLINE AND OFFLINE OPERATIONS
					        @TableChildOperationId			= 0,
					        @SQLStatement					= @FreeDataSpaceValidationSQL,
					        @TransactionId					= NULL,
					        @BatchId						= @BatchIdOUT,
					        @ExitTableLoopOnError			= 0

				        EXEC DOI.spQueue_Insert
					        @CurrentDatabaseName			= @CurrentDatabaseName ,
					        @CurrentSchemaName				= @CurrentSchemaName ,
					        @CurrentTableName				= @CurrentTableName, 
					        @CurrentIndexName				= 'N/A', 
					        @CurrentPartitionNumber			= 0, 
					        @IndexSizeInMB					= 0,
					        @CurrentParentSchemaName		= @CurrentSchemaName ,
					        @CurrentParentTableName			= @CurrentTableName, 
					        @CurrentParentIndexName			= 'N/A',
					        @IndexOperation					= 'Free Log Space Validation',
					        @IsOnlineOperation				= @OnlineOperations, --RUNS FOR BOTH ONLINE AND OFFLINE OPERATIONS
					        @TableChildOperationId			= 0,
					        @SQLStatement					= @FreeLogSpaceValidationSQL,
					        @TransactionId					= NULL,
					        @BatchId						= @BatchIdOUT,
					        @ExitTableLoopOnError			= 0

				        EXEC DOI.spQueue_Insert
					        @CurrentDatabaseName			= @CurrentDatabaseName ,
					        @CurrentSchemaName				= @CurrentSchemaName ,
					        @CurrentTableName				= @CurrentTableName, 
					        @CurrentIndexName				= 'N/A', 
					        @CurrentPartitionNumber			= 0, 
					        @IndexSizeInMB					= 0,
					        @CurrentParentSchemaName		= @CurrentSchemaName ,
					        @CurrentParentTableName			= @CurrentTableName, 
					        @CurrentParentIndexName			= 'N/A',
					        @IndexOperation					= 'Free TempDB Space Validation',
					        @IsOnlineOperation				= @OnlineOperations, --RUNS FOR BOTH ONLINE AND OFFLINE OPERATIONS
					        @TableChildOperationId			= 0,
					        @SQLStatement					= @FreeTempDBSpaceValidationSQL,
					        @TransactionId					= NULL,
					        @BatchId						= @BatchIdOUT,
					        @ExitTableLoopOnError			= 0

				        IF (@OnlineOperations = 1)
					        AND (@IsBCPTable = 1 AND @IsStorageChanging = 1 )
				        BEGIN
					        EXEC DOI.spRun_RefreshPartitionState

					        IF NOT EXISTS(	SELECT 'True' 
									        FROM DOI.Run_PartitionState 
									        WHERE DatabaseName = @CurrentDatabaseName
										        AND SchemaName = @CurrentSchemaName
										        AND ParentTableName = @CurrentTableName)
					        BEGIN
						        SET @ErrorMessage = 'The ' + @CurrentDatabaseName + '.' + @CurrentSchemaName + '.' + @CurrentTableName + ' has no PartitionState Metadata.  Execute spDataDrivenIndexes_RefreshPartitionState for this table.'
						        RAISERROR(@ErrorMessage, 16, 1)

						        EXEC DOI.spRun_LogInsert 
							        @CurrentDatabaseName	= @CurrentDatabaseName ,
							        @CurrentDatabaseName	= @CurrentDatabaseName ,
							        @CurrentSchemaName		= @CurrentSchemaName ,   
							        @CurrentTableName		= @CurrentTableName ,    
							        @CurrentIndexName		= N'N/A' , 
							        @CurrentPartitionNumber	= 0, 
							        @IndexSizeInMB			= 0,   
							        @SQLStatement			= @ErrorMessage ,
							        @IndexOperation			= 'Partition State Metadata Validation' , 
							        @IsOnlineOperation		= @OnlineOperations, 
							        @RowCount				= 0 ,     
							        @TableChildOperationId	= 0 , 
							        @RunStatus				= 'Error' ,            
							        @TransactionId			= NULL ,      
							        @BatchId				= @BatchIdOUT ,    
							        @SeqNo					= 0,        
							        @ErrorText				= @ErrorMessage ,            
							        @ExitTableLoopOnError	= 0  
					        END	

					        EXEC DOI.spQueue_BCPTables 
						        @DatabaseName	        = @CurrentDatabaseName ,
						        @SchemaName				= @CurrentSchemaName,
						        @TableName				= @CurrentTableName,
						        @BatchId				= @BatchIdOUT
				        END
                
				        IF (@OnlineOperations = 0)
					        AND NOT (@IsBCPTable = 1 AND @IsStorageChanging = 1) --IF WE'RE DOING BCP ON A TABLE THEN DO NOTHING ELSE.
				        BEGIN
					        IF @NeedsTransaction = 1
					        BEGIN
						        SET @TransactionId = NEWID()

						        EXEC DOI.spQueue_Insert
							        @CurrentDatabaseName			= @CurrentDatabaseName ,
							        @CurrentSchemaName				= @CurrentSchemaName ,
							        @CurrentTableName				= @CurrentTableName, 
							        @CurrentIndexName				= 'N/A', 
							        @CurrentPartitionNumber			= 0, 
							        @IndexSizeInMB					= 0,
							        @CurrentParentSchemaName		= @CurrentSchemaName ,
							        @CurrentParentTableName			= @CurrentTableName, 
							        @CurrentParentIndexName			= 'N/A',
							        @IndexOperation					= 'Begin Tran',
							        @IsOnlineOperation				= @OnlineOperations, 
							        @SQLStatement					= 'SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
        BEGIN TRAN', 
							        @TransactionId					= @TransactionId,
							        @BatchId						= @BatchIdOUT,
							        @ExitTableLoopOnError			= 1
					        END

					        IF (@WhichUniqueConstraintIsBeingDropped <> 'None' OR @IsClusteredIndexBeingDroppedForTable = 1) --DROP REF FKs IF PK OR UQ CONSTRAINTS ARE BEING UPDATED.
					        BEGIN
						        SET @DropRefFKs = '
        EXEC DOI.spForeignKeysDrop	
	        @DatabaseName = ''' + @CurrentDatabaseName + ''',
	        @ReferencedSchemaName = ''' + @CurrentSchemaName + ''' , 
	        @ReferencedTableName = ''' + @CurrentTableName + ''''

						        EXEC DOI.spQueue_Insert
							        @CurrentDatabaseName			= @CurrentDatabaseName ,
							        @CurrentSchemaName				= @CurrentSchemaName ,
							        @CurrentTableName				= @CurrentTableName, 
							        @CurrentIndexName				= 'N/A',
							        @CurrentPartitionNumber			= 0, 
							        @IndexSizeInMB					= 0,
							        @CurrentParentSchemaName		= @CurrentSchemaName ,
							        @CurrentParentTableName			= @CurrentTableName, 
							        @CurrentParentIndexName			= 'N/A',
							        @IndexOperation					= 'Drop Ref FKs', 
							        @IsOnlineOperation				= @OnlineOperations, 
							        @SQLStatement					= @DropRefFKs,
							        @TransactionId					= @TransactionId,
							        @BatchId						= @BatchIdOUT,
							        @ExitTableLoopOnError			= 1
					        END

					        IF @IsClusteredIndexBeingDroppedForTable = 1 --DROP ALL NC INDEXES IF CLUSTERED INDEX IS UPDATED
					        BEGIN
						        DECLARE DropIndexes_Cur CURSOR LOCAL FAST_FORWARD FOR 

							        SELECT IndexName, DropStatement, IndexSizeMB_Actual
							        FROM DOI.vwIndexes
							        WHERE DatabaseName = @CurrentDatabaseName
								        AND SchemaName = @CurrentSchemaName
								        AND TableName = @CurrentTableName
								        AND IsClustered_Desired = 0
							        ORDER BY IndexSizeMB_Actual ASC

						        OPEN DropIndexes_Cur

						        FETCH NEXT FROM DropIndexes_Cur INTO @CurrentIndexName, @DropSingleIndexSQL, @IndexSizeInMB
						        WHILE @@FETCH_STATUS <> -1
						        BEGIN
							        IF @@FETCH_STATUS <> -2
							        BEGIN
								        --DROP INDEX
								        EXEC DOI.spQueue_Insert
									        @CurrentDatabaseName			= @CurrentDatabaseName ,
									        @CurrentSchemaName				= @CurrentSchemaName ,
									        @CurrentTableName				= @CurrentTableName, 
									        @CurrentIndexName				= @CurrentIndexName, 
									        @CurrentPartitionNumber			= 0, 
									        @IndexSizeInMB					= 0,
									        @CurrentParentSchemaName		= @CurrentSchemaName ,
									        @CurrentParentTableName			= @CurrentTableName, 
									        @CurrentParentIndexName			= @CurrentIndexName,
									        @IndexOperation					= 'Drop Index',
									        @IsOnlineOperation				= 0 ,
									        @SQLStatement					= @DropSingleIndexSQL,
									        @TransactionId					= @TransactionId,
									        @BatchId						= @BatchIdOUT,
									        @ExitTableLoopOnError			= 0
							        END
							        FETCH NEXT FROM DropIndexes_Cur INTO @CurrentIndexName, @DropSingleIndexSQL, @IndexSizeInMB
						        END
						        CLOSE DropIndexes_Cur
							        DEALLOCATE DropIndexes_Cur
					        END --@IsClusteredIndexUpdated = 1
				        END --@OnlineOperations = 0

				        IF NOT (@IsBCPTable = 1 AND @IsStorageChanging = 1) --if we are doing BCP strategy, then do nothing else on the table.
				        BEGIN 
					        DECLARE UpdateAllIndexes_Cur CURSOR LOCAL FAST_FORWARD FOR
						        SELECT	I.IndexName, 
								        ISNULL(IP.PartitionNumber, 0),
								        I.DropStatement AS DropSingleIndexSQL, 
								        CASE 
									        WHEN (I.IndexUpdateType IN ('DropRecreate', 'CreateMissing')
											        OR @IsClusteredIndexBeingDroppedForTable = 1) 
									        THEN 'Create Index'
									        WHEN I.IndexUpdateType LIKE 'Alter%' 
									        THEN 'Alter Index'
									        WHEN I.IndexUpdateType = 'None' 
									        THEN 'None'
									        ELSE ''
								        END AS IndexUpdateType,
								        I.IndexUpdateType AS OriginalIndexUpdateType,
								        CASE 
									        WHEN (I.IndexUpdateType IN ('DropRecreate', 'CreateMissing')
											        OR @IsClusteredIndexBeingDroppedForTable = 1)
									        THEN I.CreateStatement
									        WHEN I.IndexUpdateType = 'AlterRebuild'
									        THEN I.AlterRebuildStatement
									        WHEN I.IndexUpdateType = 'AlterRebuild-PartitionLevel'
									        THEN IP.AlterRebuildStatement
									        WHEN I.IndexUpdateType = 'AlterSet'
									        THEN I.AlterSetStatement
									        WHEN I.IndexUpdateType = 'AlterReorganize'
									        THEN I.AlterReorganizeStatement
									        WHEN I.IndexUpdateType = 'AlterReorganize-PartitionLevel'
									        THEN IP.AlterReorganizeStatement
									        ELSE 'Error'
								        END AS CreateSingleIndexSQL,
								        I.IndexSizeMB_Actual,
								        I.IsOnlineOperation
						        FROM DOI.vwIndexes I
							        LEFT OUTER JOIN DOI.vwIndexPartitions IP ON IP.SchemaName = I.SchemaName
								        AND IP.TableName = I.TableName
								        AND IP.IndexName = I.IndexName
								        AND IP.PartitionUpdateType <> 'None'
						        WHERE (IndexUpdateType <> 'None' OR @IsClusteredIndexBeingDroppedForTable = 1)
							        AND I.DatabaseName = @CurrentDatabaseName
							        AND I.SchemaName = @CurrentSchemaName
							        AND I.TableName = @CurrentTableName
							        AND (I.IsOnlineOperation = @OnlineOperations OR @IsClusteredIndexBeingDroppedForTable = 1)
						        ORDER BY I.IsClustered_Desired DESC, I.IndexName, ISNULL(IP.PartitionNumber, 0) --do the clustered indexes first, now that all the NC indexes have been dropped.
						
					        OPEN UpdateAllIndexes_Cur
					
					        FETCH NEXT FROM UpdateAllIndexes_Cur INTO @CurrentIndexName, @CurrentPartitionNumber, @DropSingleIndexSQL, @IndexUpdateType, @OriginalIndexUpdateType, @CreateSingleIndexSQL, @IndexSizeInMB, @IsOnlineOperation
					
					        WHILE @@FETCH_STATUS <> -1
					        BEGIN
						        IF @@FETCH_STATUS <> -2
						        BEGIN
							        IF @OnlineOperations = 0
							        BEGIN 
								        --DROP THE INDEX IF IT EXISTS....IT MAY HAVE ALREADY BEEN DROPPED ABOVE IF ITS CLUSTERED INDEX WAS UPDATED.
								        IF ((@OriginalIndexUpdateType = 'DropRecreate' 
										        OR @IsClusteredIndexBeingDroppedForTable = 1  
										        OR @WhichUniqueConstraintIsBeingDropped <> 'None'))
								        BEGIN
									        EXEC DOI.spQueue_Insert
										        @CurrentDatabaseName			= @CurrentDatabaseName ,
										        @CurrentSchemaName				= @CurrentSchemaName ,
										        @CurrentTableName				= @CurrentTableName, 
										        @CurrentIndexName				= @CurrentIndexName, 
										        @CurrentPartitionNumber			= @CurrentPartitionNumber, 
										        @IndexSizeInMB					= 0,
										        @CurrentParentSchemaName		= @CurrentSchemaName ,
										        @CurrentParentTableName			= @CurrentTableName, 
										        @CurrentParentIndexName			= @CurrentIndexName,
										        @IndexOperation					= 'Drop Index',
										        @IsOnlineOperation				= @OnlineOperations ,
										        @SQLStatement					= @DropSingleIndexSQL, 
										        @TransactionId					= @TransactionId,
										        @BatchId						= @BatchIdOUT,
										        @ExitTableLoopOnError			= 0
								        END
							        END
                        
							        --RECREATE OR OTHERWISE UPDATE THE INDEX  
							        EXEC DOI.spQueue_Insert
								        @CurrentDatabaseName			= @CurrentDatabaseName ,
								        @CurrentSchemaName				= @CurrentSchemaName ,
								        @CurrentTableName				= @CurrentTableName, 
								        @CurrentIndexName				= @CurrentIndexName, 
								        @CurrentPartitionNumber			= @CurrentPartitionNumber, 
								        @IndexSizeInMB					= @IndexSizeInMB,
								        @CurrentParentSchemaName		= @CurrentSchemaName ,
								        @CurrentParentTableName			= @CurrentTableName, 
								        @CurrentParentIndexName			= @CurrentIndexName,
								        @IndexOperation					= @IndexUpdateType,
								        @IsOnlineOperation				= @OnlineOperations ,
								        @SQLStatement					= @CreateSingleIndexSQL, 
								        @TransactionId					= @TransactionId,
								        @BatchId						= @BatchIdOUT,
								        @ExitTableLoopOnError			= 0
						        END --@@fetch_status <> -2

						        FETCH NEXT FROM UpdateAllIndexes_Cur INTO @CurrentIndexName, @CurrentPartitionNumber, @DropSingleIndexSQL, @IndexUpdateType, @OriginalIndexUpdateType, @CreateSingleIndexSQL, @IndexSizeInMB, @IsOnlineOperation
					        END --fetch_status <> -1
            
					        CLOSE UpdateAllIndexes_Cur
					        DEALLOCATE UpdateAllIndexes_Cur

                            --STATISTICS UPDATES
                            --rename any stats
                            EXEC DOI.spQueue_RenameStatistics
                
                            DECLARE CreateOrUpdateStatistics_Cur CURSOR LOCAL FAST_FORWARD FOR 
                                SELECT  StatisticsName, 
                                        CASE
                                            WHEN StatisticsUpdateType IN ('Create Statistics', 'DropRecreate Statistics')
                                            THEN CreateStatisticsSQL
                                            WHEN StatisticsUpdateType = 'Update Statistics'
                                            THEN UpdateStatisticsSQL
                                        END , 
                                        StatisticsUpdateType AS OriginalStatisticsUpdateType,
                                        CASE
                                            WHEN StatisticsUpdateType = 'DropRecreate Statistics'
                                            THEN 'Create Statistics'
                                            ELSE StatisticsUpdateType
                                        END AS StatisticsUpdateType,
                                        IsOnlineOperation,
                                        DropStatisticsSQL
                                FROM DOI.vwStatistics
                                WHERE DatabaseName = @CurrentDatabaseName
							        AND SchemaName = @CurrentSchemaName
                                    AND TableName = @CurrentTableName
                                    AND StatisticsUpdateType <> 'None'
                                    AND IsOnlineOperation = @OnlineOperations
                                    AND ReadyToQueue = 1
                
				            OPEN CreateOrUpdateStatistics_Cur

				            FETCH NEXT FROM CreateOrUpdateStatistics_Cur INTO @CurrentStatisticsName, @StatisticsSQL, @OriginalStatisticsUpdateType, @StatisticsUpdateType, @IsStatisticsOnlineOperation, @DropStatisticsSQL
				            WHILE @@FETCH_STATUS <> -1
				            BEGIN
					            IF @@FETCH_STATUS <> -2
					            BEGIN
                                    IF @OnlineOperations = 0
                                    BEGIN
                        	            IF @OriginalStatisticsUpdateType = 'DropRecreate Statistics'
							            BEGIN
								            EXEC DOI.spQueue_Insert
										        @CurrentDatabaseName			= @CurrentDatabaseName ,
									            @CurrentSchemaName				= @CurrentSchemaName ,
									            @CurrentTableName				= @CurrentTableName, 
									            @CurrentIndexName				= @CurrentStatisticsName, 
									            @CurrentPartitionNumber			= 0, 
									            @IndexSizeInMB					= 0,
									            @CurrentParentSchemaName		= @CurrentSchemaName ,
									            @CurrentParentTableName			= @CurrentTableName, 
									            @CurrentParentIndexName			= @CurrentStatisticsName,
									            @IndexOperation					= 'Drop Statistics',
									            @IsOnlineOperation				= @IsStatisticsOnlineOperation ,
									            @SQLStatement					= @DropStatisticsSQL, 
									            @TransactionId					= @TransactionId,
									            @BatchId						= @BatchIdOUT,
									            @ExitTableLoopOnError			= 0
							            END
                                    END
                        
						            EXEC DOI.spQueue_Insert
								        @CurrentDatabaseName			= @CurrentDatabaseName ,
							            @CurrentSchemaName				= @CurrentSchemaName ,
							            @CurrentTableName				= @CurrentTableName, 
							            @CurrentIndexName				= @CurrentStatisticsName, 
							            @CurrentPartitionNumber			= 0, 
							            @IndexSizeInMB					= 0,
							            @CurrentParentSchemaName		= @CurrentSchemaName ,
							            @CurrentParentTableName			= @CurrentTableName, 
							            @CurrentParentIndexName			= @CurrentStatisticsName,
							            @IndexOperation					= @StatisticsUpdateType,
							            @IsOnlineOperation				= @IsStatisticsOnlineOperation ,
							            @SQLStatement					= @StatisticsSQL, 
							            @TransactionId					= @TransactionId,
							            @BatchId						= @BatchIdOUT,
							            @ExitTableLoopOnError			= 0                        
                                END
                    
                                FETCH NEXT FROM CreateOrUpdateStatistics_Cur INTO @CurrentStatisticsName, @StatisticsSQL, @OriginalStatisticsUpdateType, @StatisticsUpdateType, @IsStatisticsOnlineOperation, @DropStatisticsSQL
                            END

                            CLOSE CreateOrUpdateStatistics_Cur
                            DEALLOCATE CreateOrUpdateStatistics_Cur
				        END  --if we are doing BCP strategy, then do nothing else on the table.       
                                
				        IF (@OnlineOperations = 0)
					        AND NOT (@IsBCPTable = 1 AND @IsStorageChanging = 1)
					        AND @IsBeingRunDuringADeployment = 0 --IF THIS IS RUNNING DURING A DEPLOYMENT, LET THE ALWAYSRUN SCRIPT ADD THE FKs BACK.
					        AND (@WhichUniqueConstraintIsBeingDropped <> 'None' OR @IsClusteredIndexBeingDroppedForTable = 1) --RECREATE REF FKs
				        BEGIN
					        SET @RecreateRefFKSQL = '
        EXEC DOI.spForeignKeysAdd	
	        @DatabaseName = ''' + @CurrentDatabaseName + ''',
	        @ReferencedSchemaName = ''' + @CurrentSchemaName + ''' , 
	        @ReferencedTableName = ''' + @CurrentTableName + ''''
			                    
					        EXEC DOI.spQueue_Insert
						        @CurrentDatabaseName			= @CurrentDatabaseName ,
						        @CurrentSchemaName				= @CurrentSchemaName ,
						        @CurrentTableName				= @CurrentTableName, 
						        @CurrentIndexName				= 'N/A', 
						        @CurrentPartitionNumber			= 0, 
						        @IndexSizeInMB					= 0,
						        @CurrentParentSchemaName		= @CurrentSchemaName ,
						        @CurrentParentTableName			= @CurrentTableName, 
						        @CurrentParentIndexName			= 'N/A',
						        @IndexOperation					= 'Recreate All FKs',
						        @IsOnlineOperation				= @OnlineOperations ,
						        @SQLStatement					= @RecreateRefFKSQL,  
						        @TransactionId					= @TransactionId,
						        @BatchId						= @BatchIdOUT,
						        @ExitTableLoopOnError			= 0
				        END

			        IF (@OnlineOperations = 0)
				        AND NOT (@IsBCPTable = 1 AND @IsStorageChanging = 1)
			        BEGIN
				        IF @NeedsTransaction = 1
				        BEGIN 
					        EXEC DOI.spQueue_Insert
						        @CurrentDatabaseName			= @CurrentDatabaseName ,
						        @CurrentSchemaName				= @CurrentSchemaName ,
						        @CurrentTableName				= @CurrentTableName, 
						        @CurrentIndexName				= 'N/A',  
						        @CurrentPartitionNumber			= 0, 
						        @IndexSizeInMB					= 0,
						        @CurrentParentSchemaName		= @CurrentSchemaName ,
						        @CurrentParentTableName			= @CurrentTableName, 
						        @CurrentParentIndexName			= 'N/A',
						        @IndexOperation					= 'Commit Tran',
						        @IsOnlineOperation				= @OnlineOperations ,
						        @TableChildOperationId			= 2,
						        @SQLStatement					= 'COMMIT TRAN', 
						        @TransactionId					= @TransactionId,
						        @BatchId						= @BatchIdOUT,
						        @ExitTableLoopOnError			= 0
				        END 
			        END

			        EXEC DOI.spQueue_Insert
				        @CurrentDatabaseName			= @CurrentDatabaseName ,
				        @CurrentSchemaName				= @CurrentSchemaName ,
				        @CurrentTableName				= @CurrentTableName, 
				        @CurrentIndexName				= 'N/A',  
				        @CurrentPartitionNumber			= 0, 
				        @IndexSizeInMB					= 0,
				        @CurrentParentSchemaName		= @CurrentSchemaName ,
				        @CurrentParentTableName			= @CurrentTableName, 
				        @CurrentParentIndexName			= 'N/A',
				        @IndexOperation					= 'Release Application Lock',
				        @IsOnlineOperation				= @OnlineOperations ,
				        @TableChildOperationId			= 0,
				        @SQLStatement					= @ReleaseApplicationLockSQL, 
				        @TransactionId					= @TransactionId,
				        @BatchId						= @BatchIdOUT,
				        @ExitTableLoopOnError			= 0

			        --IF NOTHING OF SUBSTANCE WAS INSERTED, DELETE THE FEW USELESS MAINTENANCE TASKS THAT WERE INSERTED.
			        IF EXISTS (	SELECT 'True' 
						        FROM DOI.Queue 
						        WHERE DatabaseName = @CurrentDatabaseName
							        AND ParentTableName = @CurrentTableName
							        AND IndexOperation IN ('Free TempDB Space Validation', 'Free Log Space Validation', 'Free Data Space Validation', 'Disable CmdShell', 'Get Application Lock', 'Release Application Lock'))
				        AND NOT EXISTS (SELECT 'True' 
								        FROM DOI.Queue 
								        WHERE DatabaseName = @CurrentDatabaseName
									        AND ParentTableName = @CurrentTableName
									        AND IndexOperation NOT IN ('Free TempDB Space Validation', 'Free Log Space Validation', 'Free Data Space Validation', 'Disable CmdShell', 'Get Application Lock', 'Release Application Lock'))
			        BEGIN
				        DELETE FROM DOI.Queue 
				        WHERE DatabaseName = @CurrentDatabaseName
					        AND ParentTableName = @CurrentTableName
					        AND IndexOperation IN ('Free TempDB Space Validation', 'Free Log Space Validation', 'Free Data Space Validation', 'Disable CmdShell', 'Get Application Lock', 'Release Application Lock')
			        END
				
			        END TRY
			        BEGIN CATCH
				        IF @@TRANCOUNT > 0 ROLLBACK TRAN 
				        --CLOSE CURSORS IF OPEN
				        IF (SELECT CURSOR_STATUS('local','PrepTables_Cur')) >= -1
				        BEGIN
					        IF (SELECT CURSOR_STATUS('local','PrepTables_Cur')) > -1
					        BEGIN
						        CLOSE PrepTables_Cur
					        END

					        DEALLOCATE PrepTables_Cur
				        END

				        IF (SELECT CURSOR_STATUS('local','DropIndexes_Cur')) >= -1
				        BEGIN
					        IF (SELECT CURSOR_STATUS('local','DropIndexes_Cur')) > -1
					        BEGIN
						        CLOSE DropIndexes_Cur
					        END

					        DEALLOCATE DropIndexes_Cur
				        END

				        IF (SELECT CURSOR_STATUS('local','UpdateAllIndexes_Cur')) >= -1
				        BEGIN
					        IF (SELECT CURSOR_STATUS('local','UpdateAllIndexes_Cur')) > -1
					        BEGIN
						        CLOSE UpdateAllIndexes_Cur
					        END

					        DEALLOCATE UpdateAllIndexes_Cur
				        END;

				        IF (SELECT CURSOR_STATUS('local','CreateOrUpdateStatistics_Cur')) >= -1
				        BEGIN
					        IF (SELECT CURSOR_STATUS('local','CreateOrUpdateStatistics_Cur')) > -1
					        BEGIN
						        CLOSE CreateOrUpdateStatistics_Cur
					        END

					        DEALLOCATE CreateOrUpdateStatistics_Cur
				        END;

				        THROW;
			        END CATCH

		        END --@@fetch_status <> -2

		        FETCH NEXT FROM Tables_Queued_Cur INTO @CurrentDatabaseName, @CurrentSchemaName, @CurrentTableName, @IsClusteredIndexBeingDroppedForTable, @WhichUniqueConstraintIsBeingDropped, @HasMissingIndexes, @IsBCPTable, @IsStorageChanging, /*@RunAutomaticallyOnDeployment, @RunAutomaticallyOnSQLJob,*/ @NeedsTransaction, @FreeDataSpaceValidationSQL, @FreeLogSpaceValidationSQL, @FreeTempDBSpaceValidationSQL
	        END --@@fetch_status <> -1
        END
    END 
END TRY
BEGIN CATCH
	
	IF @@TRANCOUNT > 0 ROLLBACK TRAN 
	--CLOSE CURSORS IF OPEN
	IF (SELECT CURSOR_STATUS('local','Tables_Queued_Cur')) >= -1
	BEGIN
		IF (SELECT CURSOR_STATUS('local','Tables_Queued_Cur')) > -1
		BEGIN
			CLOSE Tables_Queued_Cur
		END

		DEALLOCATE Tables_Queued_Cur
	END;

	THROW;
END CATCH


--CLOSE CURSORS IF OPEN
IF (SELECT CURSOR_STATUS('local','Tables_Queued_Cur')) >= -1
BEGIN
	IF (SELECT CURSOR_STATUS('local','Tables_Queued_Cur')) > -1
	BEGIN
		CLOSE Tables_Queued_Cur
	END

	DEALLOCATE Tables_Queued_Cur
END

IF (SELECT CURSOR_STATUS('local','Databases_Queued_Cur')) >= -1
BEGIN
	IF (SELECT CURSOR_STATUS('local','Databases_Queued_Cur')) > -1
	BEGIN
		CLOSE Databases_Queued_Cur
	END

	DEALLOCATE Databases_Queued_Cur
END
GO

GO
-------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue.sql" ---------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spQueue.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('2c85b2aa-d6a5-5063-9164-451eb1e5190c' AS UNIQUEIDENTIFIER), 'B43F2C3132543C58C34F379601F2545050C9357A12828B276C0FF7D3C8DF8479', 'Programmable Objects\Stored Procedures\DOI.spQueue.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue.sql", ID: {2c85b2aa-d6a5-5063-9164-451eb1e5190c} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('11b4456c-b791-5c47-a157-172a4c7e6333' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0789C9F0D68F72FA82FDB8B12084FF903073D4C21B9BB11B24B590E1DBFD4275')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs.sql", ID: {11b4456c-b791-5c47-a157-172a4c7e6333} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs]
    @TableName SYSNAME,
    @Debug BIT = 0
AS

/*
    EXEC DOI.[spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs]
        @TableName = 'SysDatabaseFiles', @Debug = 1
*/

DECLARE @SQL VARCHAR(MAX) = ''

IF @TableName IN ('SysDmDbStatsProperties')
BEGIN
    SELECT @SQL += '
    SELECT ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE 'DB_ID(''' + DatabaseName + ''') AS database_id,' END + ' FN.*
    INTO #' + @TableName + '
    FROM DOI.' + M.FunctionParentDMV + ' p
        CROSS APPLY ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE DatabaseName + '.' END + M.SQLServerObjectName + CASE WHEN M.SQLServerObjectType = 'FN' THEN '(' + REPLACE(FunctionParameterList, '{DatabaseName}', DatabaseName) + ')' ELSE '' END + ' FN  

    INSERT INTO DOI.' + @TableName + '
    SELECT * FROM #' + @TableName + CHAR(13) + CHAR(10) 
    --select count(*)
    FROM DOI.Databases D
        INNER JOIN DOI.MappingSqlServerDMVToDOITables M ON M.DOITableName = @TableName
END
ELSE
IF @TableName IN ('SysDatabaseFiles')
BEGIN
    SELECT @SQL += '
    SELECT ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE 'DB_ID(''' + D.DatabaseName + ''') AS database_id,' END + ' FN.*
    INTO #' + @TableName + '
    FROM ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE d.DatabaseName + '.' END + M.SQLServerObjectName + CASE WHEN M.SQLServerObjectType = 'FN' THEN '(' + REPLACE(FunctionParameterList, '{DatabaseName}', d.DatabaseName) + ')' ELSE '' END + ' FN'
    --select count(*)
    FROM DOI.Databases D
        INNER JOIN DOI.MappingSqlServerDMVToDOITables M ON M.DOITableName = @TableName

    SELECT @SQL += '
    INSERT INTO #' + @TableName + '
    SELECT ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE 'DB_ID(''TempDB'') AS database_id,' END + ' FN.*
    FROM ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE 'TempDB' + '.' END + M.SQLServerObjectName + CASE WHEN M.SQLServerObjectType = 'FN' THEN '(' + REPLACE(FunctionParameterList, '{DatabaseName}', 'TempDB') + ')' ELSE '' END + ' FN'
    FROM DOI.MappingSqlServerDMVToDOITables M 
    WHERE M.DOITableName = @TableName

    SET @SQL += '
    INSERT INTO DOI.' + @TableName + '
    SELECT * FROM #' + @TableName 
END
ELSE
IF @TableName IN ('SysDmOsVolumeStats')
BEGIN
    SELECT @SQL += '
    SELECT ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE 'DB_ID(''' + d.DatabaseName + ''') AS database_id,' END + ' FN.*
    INTO #' + @TableName + '
    FROM DOI.' + M.FunctionParentDMV + ' p
        CROSS APPLY ' + M.SQLServerObjectName + CASE WHEN M.SQLServerObjectType = 'FN' THEN '(' + REPLACE(FunctionParameterList, '{DatabaseName}', d.DatabaseName) + ')' ELSE '' END + ' FN ' + CHAR(13) + CHAR(10) 
    --select count(*)
    FROM DOI.Databases D
        INNER JOIN DOI.MappingSqlServerDMVToDOITables M ON M.DOITableName = @TableName

    SELECT @SQL += '
    INSERT INTO #' + @TableName + '
    SELECT ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE 'DB_ID(''TempDB'') AS database_id,' END + ' FN.*
    FROM DOI.' + M.FunctionParentDMV + ' p
        CROSS APPLY ' + M.SQLServerObjectName + CASE WHEN M.SQLServerObjectType = 'FN' THEN '(' + REPLACE(FunctionParameterList, '{DatabaseName}', 'TempDB') + ')' ELSE '' END + ' FN ' + CHAR(13) + CHAR(10) 
    FROM DOI.MappingSqlServerDMVToDOITables M 
    WHERE M.DOITableName = @TableName

    SET @SQL += '
    INSERT INTO DOI.' + @TableName + '
    SELECT * FROM #' + @TableName 
END
ELSE
IF @TableName IN ('SysIndexes', 'SysForeignKeys')
BEGIN
    SELECT @SQL += '
    SELECT ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE 'DB_ID(''' + DatabaseName + ''') AS database_id,' END + ' *
    INTO #' + @TableName + '
    FROM ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE DatabaseName + '.' END + M.SQLServerObjectName + CASE WHEN M.SQLServerObjectType = 'FN' THEN '(' + REPLACE(FunctionParameterList, '{DatabaseName}', DatabaseName) + ')' ELSE '' END + '

    INSERT INTO DOI.' + @TableName + '
    SELECT *, NULL, NULL, NULL FROM #' + @TableName + CHAR(13) + CHAR(10) 
    --select count(*)
    FROM DOI.Databases D
        INNER JOIN DOI.MappingSqlServerDMVToDOITables M ON M.DOITableName = @TableName
END
ELSE
IF @TableName = 'SysStats'
BEGIN
    SELECT @SQL += '
    SELECT ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE 'DB_ID(''' + DatabaseName + ''') AS database_id,' END + ' *
    INTO #' + @TableName + '
    FROM ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE DatabaseName + '.' END + M.SQLServerObjectName + CASE WHEN M.SQLServerObjectType = 'FN' THEN '(' + REPLACE(FunctionParameterList, '{DatabaseName}', DatabaseName) + ')' ELSE '' END + '

    INSERT INTO DOI.' + @TableName + '
    SELECT *, NULL FROM #' + @TableName + CHAR(13) + CHAR(10) 
    --select count(*)
    FROM DOI.Databases D
        INNER JOIN DOI.MappingSqlServerDMVToDOITables M ON M.DOITableName = @TableName
END
ELSE
IF @TableName = 'SysPartitionRangeValues'
BEGIN
    SELECT @SQL += '
    SELECT DB_ID(''' + D.DatabaseName + ''') AS database_id, function_id, boundary_id, parameter_id, CAST(value AS VARCHAR(100)) AS value
    INTO #' + @TableName + '
    FROM ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE DatabaseName + '.' END + M.SQLServerObjectName + CASE WHEN M.SQLServerObjectType = 'FN' THEN '(' + REPLACE(FunctionParameterList, '{DatabaseName}', DatabaseName) + ')' ELSE '' END + '

    INSERT INTO DOI.' + @TableName + '
    SELECT * FROM #' + @TableName + CHAR(13) + CHAR(10) 
    --select count(*)
    FROM DOI.Databases D
        INNER JOIN DOI.MappingSqlServerDMVToDOITables M ON M.DOITableName = @TableName
END
ELSE
BEGIN
    SELECT @SQL += '
    SELECT ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE 'DB_ID(''' + DatabaseName + ''') AS database_id,' END + ' *
    INTO #' + @TableName + '
    FROM ' + CASE HasDatabaseIdInOutput WHEN 1 THEN '' ELSE DatabaseName + '.' END + M.SQLServerObjectName + CASE WHEN M.SQLServerObjectType = 'FN' THEN '(' + REPLACE(FunctionParameterList, '{DatabaseName}', DatabaseName) + ')' ELSE '' END + '

    INSERT INTO DOI.' + @TableName + '
    SELECT * FROM #' + @TableName + CHAR(13) + CHAR(10) 
    --select count(*)
    FROM DOI.Databases D
        INNER JOIN DOI.MappingSqlServerDMVToDOITables M ON M.DOITableName = @TableName
END

IF @Debug = 1
BEGIN
    EXEC DOI.spPrintOutLongSQL
        @SQLInput = @SQL,
        @VariableName = '@SQL'
END
ELSE
BEGIN
    EXEC(@SQL)
END

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('11b4456c-b791-5c47-a157-172a4c7e6333' AS UNIQUEIDENTIFIER), '0789C9F0D68F72FA82FDB8B12084FF903073D4C21B9BB11B24B590E1DBFD4275', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs.sql", ID: {11b4456c-b791-5c47-a157-172a4c7e6333} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a3d84fcf-5e36-5c81-a6ad-e85723f3d410' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'FD42F6B7D7B0A4FF3886808BF000C3E126330134982630105B3516FAB88465C0')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_User.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_User.sql", ID: {a3d84fcf-5e36-5c81-a6ad-e85723f3d410} *****';

GO


--- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_User.sql" -----
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_Run_User]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_Run_User];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_Run_User]
    @Debug BIT = 0
AS

/*
        EXEC DOI.spRefreshMetadata_Run_User 
        @Debug = 1
*/

DECLARE @SQL NVARCHAR(MAX) = ''

SELECT @SQL += 'EXEC ' + s.name + '.' + p.name + CHAR(13) + CHAR(10) + 'GO' + CHAR(13) + CHAR(10)
FROM SYS.procedures P
    INNER JOIN sys.schemas s ON p.schema_id = s.schema_id
WHERE p.NAME LIKE 'spRefreshMetadata_User%'
    AND ISNUMERIC(SUBSTRING(p.NAME, 24, 1)) = 1
	AND p.name NOT LIKE '%CreateTables'
ORDER BY p.name

IF @Debug = 1
BEGIN
    PRINT @SQL
END
ELSE
BEGIN
    EXEC DOI.sp_ExecuteSQLByBatch 
        @SQL = @SQL
END

GO

GO
---- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_User.sql" ------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_User.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('a3d84fcf-5e36-5c81-a6ad-e85723f3d410' AS UNIQUEIDENTIFIER), 'FD42F6B7D7B0A4FF3886808BF000C3E126330134982630105B3516FAB88465C0', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_User.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_User.sql", ID: {a3d84fcf-5e36-5c81-a6ad-e85723f3d410} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d4a8b60f-b4be-5a17-9de3-b03f95de3f0d' AS UNIQUEIDENTIFIER) AND [script_checksum] = '87BFBDE62E3AEC34827334C55B5B2C14EBBBB3A79A4ECC04E40F363979BA0443')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_System.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_System.sql", ID: {d4a8b60f-b4be-5a17-9de3-b03f95de3f0d} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_System.sql" ----
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_Run_System]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_Run_System];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_Run_System]
    @Debug BIT = 0
AS

/*
    EXEC DOI.spRefreshMetadata_Run_System
        @Debug = 1
*/

DECLARE @SQL VARCHAR(MAX) = ''

SELECT @SQL += 'EXEC ' + s.name + '.' + p.name + CHAR(13) + CHAR(10)
FROM SYS.procedures P
    INNER JOIN sys.schemas s ON p.schema_id = s.schema_id
WHERE p.NAME LIKE 'spRefreshMetadata_System%'
    AND p.name NOT LIKE '%CreateTables'

SELECT @SQL += 'EXEC ' + s.name + '.' + p.name + CHAR(13) + CHAR(10)
FROM SYS.procedures P
    INNER JOIN sys.schemas s ON p.schema_id = s.schema_id
WHERE p.NAME LIKE 'spRefreshMetadata_User%_UpdateData'
    AND ISNUMERIC(SUBSTRING(p.name, CHARINDEX('User_', p.name, 1) + 5, 1)) = 0

IF @Debug = 1
BEGIN
    PRINT @SQL
END
ELSE
BEGIN
    EXEC(@SQL)
END
GO

GO
--- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_System.sql" -----


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_System.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('d4a8b60f-b4be-5a17-9de3-b03f95de3f0d' AS UNIQUEIDENTIFIER), '87BFBDE62E3AEC34827334C55B5B2C14EBBBB3A79A4ECC04E40F363979BA0443', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_System.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_System.sql", ID: {d4a8b60f-b4be-5a17-9de3-b03f95de3f0d} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a05a51b2-f4a8-59a2-9d73-b9c42fca9ee7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9662654D90BE8C71DBA0FA3C6FD7A037EA9A178F712A72DC98E5B5EB1F8E85FD')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_All.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_All.sql", ID: {a05a51b2-f4a8-59a2-9d73-b9c42fca9ee7} *****';

GO


---- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_All.sql" -----
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_Run_All]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_Run_All];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_Run_All]

AS

/*
    EXEC DOI.spRefreshMetadata_Run_All
*/

BEGIN TRY
    --BEGIN TRAN
        EXEC [DOI].[spRefreshMetadata_Run_System]
        EXEC [DOI].[spRefreshMetadata_Run_User]
    --COMMIT TRAN
END TRY
BEGIN CATCH
    IF @@TRANCOUNT > 0 ROLLBACK TRAN;
    THROW;
END CATCH
GO

GO
----- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_All.sql" ------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_All.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('a05a51b2-f4a8-59a2-9d73-b9c42fca9ee7' AS UNIQUEIDENTIFIER), '9662654D90BE8C71DBA0FA3C6FD7A037EA9A178F712A72DC98E5B5EB1F8E85FD', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_All.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_Run_All.sql", ID: {a05a51b2-f4a8-59a2-9d73-b9c42fca9ee7} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('bea046e0-8530-5ede-bb32-bcc087dc94a9' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'FFA9DB8E83E6FFF3CD11CC28587F3AE3348347DED371FB278B821B8DA155AB61')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysAllocationUnits.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysAllocationUnits.sql", ID: {bea046e0-8530-5ede-bb32-bcc087dc94a9} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysAllocationUnits.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysAllocationUnits]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysAllocationUnits];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysAllocationUnits]

AS

DELETE DOI.SysAllocationUnits

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysAllocationUnits'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysAllocationUnits.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysAllocationUnits.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('bea046e0-8530-5ede-bb32-bcc087dc94a9' AS UNIQUEIDENTIFIER), 'FFA9DB8E83E6FFF3CD11CC28587F3AE3348347DED371FB278B821B8DA155AB61', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysAllocationUnits.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysAllocationUnits.sql", ID: {bea046e0-8530-5ede-bb32-bcc087dc94a9} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('bb22bd7b-4d6b-59bb-9774-50a11a6333c4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '31F72BB219E9F4A9526D24931FDC05D32C559C8E0E26B8E276173546B5BAA134')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints.sql", ID: {bb22bd7b-4d6b-59bb-9774-50a11a6333c4} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysCheckConstraints]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysCheckConstraints];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysCheckConstraints]

AS

DELETE DOI.SysCheckConstraints


EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysCheckConstraints'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('bb22bd7b-4d6b-59bb-9774-50a11a6333c4' AS UNIQUEIDENTIFIER), '31F72BB219E9F4A9526D24931FDC05D32C559C8E0E26B8E276173546B5BAA134', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints.sql", ID: {bb22bd7b-4d6b-59bb-9774-50a11a6333c4} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d4227edd-4b88-5653-bb92-0139a7090f40' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7BF6D6DF36FBB8F1FC4C61974B534754B2CC86F85BEE9DEEB7179786C559DFEC')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spDropRecreateSchemaBoundObjectsOnTable.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spDropRecreateSchemaBoundObjectsOnTable.sql", ID: {d4227edd-4b88-5653-bb92-0139a7090f40} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spDropRecreateSchemaBoundObjectsOnTable.sql" 
GO
IF OBJECT_ID('[DOI].[spDropRecreateSchemaBoundObjectsOnTable]') IS NOT NULL
	DROP PROCEDURE [DOI].[spDropRecreateSchemaBoundObjectsOnTable];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spDropRecreateSchemaBoundObjectsOnTable]
    @SchemaName SYSNAME,
    @TableName SYSNAME,
    @DropSQL VARCHAR(MAX) OUTPUT,
    @RecreateSQL VARCHAR(MAX) OUTPUT

AS

/*
    DECLARE @DropSQL VARCHAR(MAX) = '',
            @RecreateSQL VARCHAR(MAX) = ''

    EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
        @SchemaName = 'DOI',
        @TableName = 'IndexesRowStore',
        @DropSQL = @DropSQL OUTPUT,
        @RecreateSQL = @RecreateSQL OUTPUT

    PRINT @DropSQL
    PRINT @RecreateSQL

*/
SELECT  @DropSQL = '',
        @RecreateSQL = ''


SELECT  @DropSQL +=     CASE
                            WHEN type IN ('IF', 'FN', 'TF')
                            THEN 'DROP FUNCTION ' + s.name + '.' + o.name 
                            WHEN type = 'P'
                            THEN 'DROP PROCEDURE ' + s.name + '.' + o.name 
                            WHEN type = 'TR'
                            THEN 'DROP TRIGGER ' + s.name + '.' + o.name 
                            ELSE ''
                        END + CHAR(13) + CHAR(10) + 'GO' + CHAR(13) + CHAR(10), 
        @RecreateSQL +=  CASE
                            WHEN type IN ('IF', 'FN', 'P', 'TR', 'TF')
                            THEN m.definition
                            ELSE ''
                        END + CHAR(13) + CHAR(10) + 'GO' + CHAR(13) + CHAR(10)
FROM sys.sql_expression_dependencies d
    INNER JOIN sys.objects o on o.object_id = d.referencing_id
    INNER JOIN sys.schemas s on o.schema_id = s.schema_id
    INNER JOIN sys.sql_modules m on m.object_id = o.object_id
WHERE s.name = @SchemaName
    AND referenced_entity_name = @TableName
    AND is_schema_bound_reference = 1
    AND type NOT IN ('C', 'D', 'FK')
    AND referenced_minor_id = 0

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spDropRecreateSchemaBoundObjectsOnTable.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spDropRecreateSchemaBoundObjectsOnTable.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('d4227edd-4b88-5653-bb92-0139a7090f40' AS UNIQUEIDENTIFIER), '7BF6D6DF36FBB8F1FC4C61974B534754B2CC86F85BEE9DEEB7179786C559DFEC', 'Programmable Objects\Stored Procedures\DOI.spDropRecreateSchemaBoundObjectsOnTable.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spDropRecreateSchemaBoundObjectsOnTable.sql", ID: {d4227edd-4b88-5653-bb92-0139a7090f40} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28e3c73b-103b-5308-ad7f-e80378a7e4b6' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'EF19EF5A7510DA19F49466743DED8567F1477D3FC6683BECDA932FB520B21F5A')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints_CreateTables.sql", ID: {28e3c73b-103b-5308-ad7f-e80378a7e4b6} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysCheckConstraints_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysCheckConstraints_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysCheckConstraints_CreateTables]

AS

DROP TABLE IF EXISTS #SysCheckConstraints

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'SysCheckConstraints',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS DOI.SysCheckConstraints


CREATE TABLE DOI.SysCheckConstraints(
    database_id                 INT NOT NULL,
    name	                    sysname,
    object_id	                int	NOT NULL,
    principal_id	            INT	NULL,
    schema_id	                INT	NOT NULL,
    parent_object_id	        INT	NOT NULL,
    type	                    CHAR(2) NULL,
    type_desc	                NVARCHAR(60) NULL,
    create_date	                DATETIME NOT NULL,
    modify_date	                DATETIME NOT NULL,
    is_ms_shipped	            BIT	NOT NULL,
    is_published	            BIT	NOT NULL,
    is_schema_published	        BIT	NOT NULL,
    is_disabled	                BIT	NOT NULL,
    is_not_for_replication	    BIT	NOT NULL,
    is_not_trusted	            BIT	NOT NULL,
    parent_column_id	        INT	NOT NULL,
    definition	                NVARCHAR(MAX) NULL,
    uses_database_collation	    BIT	NULL,
    is_system_named	            BIT	NOT NULL
    
    CONSTRAINT PK_SysCheckConstraints
        PRIMARY KEY NONCLUSTERED (database_id, object_id))
WITH (MEMORY_OPTIMIZED = ON)

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('28e3c73b-103b-5308-ad7f-e80378a7e4b6' AS UNIQUEIDENTIFIER), 'EF19EF5A7510DA19F49466743DED8567F1477D3FC6683BECDA932FB520B21F5A', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysCheckConstraints_CreateTables.sql", ID: {28e3c73b-103b-5308-ad7f-e80378a7e4b6} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ce314bcf-4ea3-5825-8030-bcd7e869339b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '99F79047FD0105D32B56F3D28E4EA7FE0707BA39D3DE5306687999406B9F426B')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysColumns.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysColumns.sql", ID: {ce314bcf-4ea3-5825-8030-bcd7e869339b} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysColumns.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysColumns]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysColumns];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysColumns]

AS

DELETE DOI.SysColumns

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysColumns'


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysColumns.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysColumns.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('ce314bcf-4ea3-5825-8030-bcd7e869339b' AS UNIQUEIDENTIFIER), '99F79047FD0105D32B56F3D28E4EA7FE0707BA39D3DE5306687999406B9F426B', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysColumns.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysColumns.sql", ID: {ce314bcf-4ea3-5825-8030-bcd7e869339b} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b0514b53-13cb-54c5-8086-186fce666809' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1539FFCE5F86ADC321E8521A2B857175428343A4C654654E44D2B86F5320B865')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabaseFiles.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabaseFiles.sql", ID: {b0514b53-13cb-54c5-8086-186fce666809} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabaseFiles.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysDatabaseFiles]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysDatabaseFiles];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysDatabaseFiles]

AS

DELETE DOI.SysDatabaseFiles

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysDatabaseFiles'

GO
GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabaseFiles.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabaseFiles.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('b0514b53-13cb-54c5-8086-186fce666809' AS UNIQUEIDENTIFIER), '1539FFCE5F86ADC321E8521A2B857175428343A4C654654E44D2B86F5320B865', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabaseFiles.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabaseFiles.sql", ID: {b0514b53-13cb-54c5-8086-186fce666809} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d0e7abab-833e-5cd1-8309-b700d4491ff7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0F6C28063EB2C08A74076D1D2DA069A427F22C24CE59958C0E9BAE3AC15C531B')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabases.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabases.sql", ID: {d0e7abab-833e-5cd1-8309-b700d4491ff7} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabases.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysDatabases]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysDatabases];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysDatabases]

AS

DELETE DOI.SysDatabases

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysDatabases'

GO
GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabases.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabases.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('d0e7abab-833e-5cd1-8309-b700d4491ff7' AS UNIQUEIDENTIFIER), '0F6C28063EB2C08A74076D1D2DA069A427F22C24CE59958C0E9BAE3AC15C531B', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabases.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDatabases.sql", ID: {d0e7abab-833e-5cd1-8309-b700d4491ff7} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8ac7b213-8fe0-599c-847c-fd90e15ea0dc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0F38C24657B1B2B3A14CE1E91C13C3EF32B47CA05B9AB951723A3F2E5AEDDD70')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDataSpaces.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDataSpaces.sql", ID: {8ac7b213-8fe0-599c-847c-fd90e15ea0dc} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDataSpaces.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysDataSpaces]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysDataSpaces];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysDataSpaces]
AS

DELETE DOI.SysDataSpaces

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysDataSpaces'

GO
GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDataSpaces.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDataSpaces.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('8ac7b213-8fe0-599c-847c-fd90e15ea0dc' AS UNIQUEIDENTIFIER), '0F38C24657B1B2B3A14CE1E91C13C3EF32B47CA05B9AB951723A3F2E5AEDDD70', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDataSpaces.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDataSpaces.sql", ID: {8ac7b213-8fe0-599c-847c-fd90e15ea0dc} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d1f6bd36-ee54-59b0-b33f-1bec0297af9f' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6C90A6BFB3F15FA02CA414533B033222E81072FE499E7B62E86A9C871B525F12')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints.sql", ID: {d1f6bd36-ee54-59b0-b33f-1bec0297af9f} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysDefaultConstraints]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysDefaultConstraints];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysDefaultConstraints]

AS

DELETE DOI.SysDefaultConstraints


EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysDefaultConstraints'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('d1f6bd36-ee54-59b0-b33f-1bec0297af9f' AS UNIQUEIDENTIFIER), '6C90A6BFB3F15FA02CA414533B033222E81072FE499E7B62E86A9C871B525F12', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints.sql", ID: {d1f6bd36-ee54-59b0-b33f-1bec0297af9f} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d4708b06-684d-581b-a215-cfcee8a32938' AS UNIQUEIDENTIFIER) AND [script_checksum] = '70840A21A761E0594602FE0DC74521A89040509A63ED7961C4DB2575FFEF11C4')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints_CreateTables.sql", ID: {d4708b06-684d-581b-a215-cfcee8a32938} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysDefaultConstraints_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysDefaultConstraints_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysDefaultConstraints_CreateTables]

AS

DROP TABLE IF EXISTS #SysDefaultConstraints

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'SysDefaultConstraints',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS DOI.SysDefaultConstraints


CREATE TABLE DOI.SysDefaultConstraints(
    database_id                 INT NOT NULL,
    name	            SYSNAME,
    object_id	        INT NOT NULL,
    principal_id	    INT NULL,
    parent_object_id	INT NOT NULL, 
    schema_id	        INT NOT NULL, 
    type	            CHAR(2) NULL,
    type_desc	        NVARCHAR(60) NULL,
    create_date	        DATETIME NOT NULL,
    modify_date	        DATETIME NOT NULL,
    is_ms_shipped	    BIT NOT NULL,
    is_published	    BIT NOT NULL,
    is_schema_published	BIT NOT NULL,
    parent_column_id	INT NOT NULL,
    definition	        NVARCHAR(MAX) NULL,
    is_system_named	    BIT NOT NULL
    
    CONSTRAINT PK_SysDefaultConstraints
        PRIMARY KEY NONCLUSTERED (database_id, object_id))
WITH (MEMORY_OPTIMIZED = ON)

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('d4708b06-684d-581b-a215-cfcee8a32938' AS UNIQUEIDENTIFIER), '70840A21A761E0594602FE0DC74521A89040509A63ED7961C4DB2575FFEF11C4', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDefaultConstraints_CreateTables.sql", ID: {d4708b06-684d-581b-a215-cfcee8a32938} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a08385c2-2163-58cc-b19c-29d4124c97af' AS UNIQUEIDENTIFIER) AND [script_checksum] = '39F0CB83E757EE2348C7F12C8043D2ED21E1F83A93F7D1BAD3364C5B902FA2EA')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDestinationDataSpaces.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDestinationDataSpaces.sql", ID: {a08385c2-2163-58cc-b19c-29d4124c97af} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDestinationDataSpaces.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysDestinationDataSpaces]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysDestinationDataSpaces];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysDestinationDataSpaces]

AS

DELETE DOI.SysDestinationDataSpaces

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysDestinationDataSpaces'

GO
GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDestinationDataSpaces.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDestinationDataSpaces.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('a08385c2-2163-58cc-b19c-29d4124c97af' AS UNIQUEIDENTIFIER), '39F0CB83E757EE2348C7F12C8043D2ED21E1F83A93F7D1BAD3364C5B902FA2EA', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDestinationDataSpaces.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDestinationDataSpaces.sql", ID: {a08385c2-2163-58cc-b19c-29d4124c97af} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1dc4c3f5-93fd-5b7a-beb8-efbda1eadba7' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'FA97E9EDF2D7EFAE2851CD4C2B580CA780D329D01F204216121F0C9E60105383')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmDbStatsProperties.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmDbStatsProperties.sql", ID: {1dc4c3f5-93fd-5b7a-beb8-efbda1eadba7} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmDbStatsProperties.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysDmDbStatsProperties]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysDmDbStatsProperties];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysDmDbStatsProperties]

AS

DELETE DOI.SysDmDbStatsProperties

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysDmDbStatsProperties'

GO
GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmDbStatsProperties.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmDbStatsProperties.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('1dc4c3f5-93fd-5b7a-beb8-efbda1eadba7' AS UNIQUEIDENTIFIER), 'FA97E9EDF2D7EFAE2851CD4C2B580CA780D329D01F204216121F0C9E60105383', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmDbStatsProperties.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmDbStatsProperties.sql", ID: {1dc4c3f5-93fd-5b7a-beb8-efbda1eadba7} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8c544eb5-07cb-586e-97a8-34c2d2be5e71' AS UNIQUEIDENTIFIER) AND [script_checksum] = '3B519248CB3DC5BA3AEDE747B12A636184807657E9F289D2C9277248E9FA454A')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmOsVolumeStats.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmOsVolumeStats.sql", ID: {8c544eb5-07cb-586e-97a8-34c2d2be5e71} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmOsVolumeStats.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysDmOsVolumeStats]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysDmOsVolumeStats];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysDmOsVolumeStats]

AS


/*
    set statistics io on
    EXEC DOI.spRefreshMetadata_System_SysDmOsVolumeStats
*/

DELETE DOI.SysDmOsVolumeStats

    SELECT  FN.*
    INTO #SysDmOsVolumeStats
    FROM DOI.SysDatabaseFiles p 
        CROSS APPLY sys.dm_os_volume_stats(p.database_id, p.file_id) FN 
    WHERE p.database_id = DB_ID('PaymentReporting')

    INSERT INTO #SysDmOsVolumeStats
    SELECT  FN.*
    FROM DOI.SysDatabaseFiles p
        CROSS APPLY sys.dm_os_volume_stats(p.database_id, file_id) FN 
    WHERE p.database_id = DB_ID('TempDB')    

    INSERT INTO DOI.SysDmOsVolumeStats
    SELECT * FROM #SysDmOsVolumeStats

DROP TABLE #SysDmOsVolumeStats
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmOsVolumeStats.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmOsVolumeStats.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('8c544eb5-07cb-586e-97a8-34c2d2be5e71' AS UNIQUEIDENTIFIER), '3B519248CB3DC5BA3AEDE747B12A636184807657E9F289D2C9277248E9FA454A', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmOsVolumeStats.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysDmOsVolumeStats.sql", ID: {8c544eb5-07cb-586e-97a8-34c2d2be5e71} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b3b96efa-58c6-595c-9a36-6d9bd473fdca' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2E9BC0E027032B66F070223230FF643B1C0C7DD9067F0D420F3D8309CC4A73C0')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysFileGroups.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysFileGroups.sql", ID: {b3b96efa-58c6-595c-9a36-6d9bd473fdca} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysFileGroups.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysFileGroups]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysFileGroups];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysFileGroups]

AS  
 
DELETE DOI.SysFilegroups

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysFilegroups'

GO
GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysFileGroups.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysFileGroups.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('b3b96efa-58c6-595c-9a36-6d9bd473fdca' AS UNIQUEIDENTIFIER), '2E9BC0E027032B66F070223230FF643B1C0C7DD9067F0D420F3D8309CC4A73C0', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysFileGroups.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysFileGroups.sql", ID: {b3b96efa-58c6-595c-9a36-6d9bd473fdca} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e6c97a5a-352f-5964-9f48-ec2480596a3b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '41ED828F320D31A04F755020B6DC3571C365A5A49750EA3BE0F51AA25794D9F5')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_CreateTables.sql", ID: {e6c97a5a-352f-5964-9f48-ec2480596a3b} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysForeignKeyColumns_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysForeignKeyColumns_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE     PROCEDURE [DOI].[spRefreshMetadata_System_SysForeignKeyColumns_CreateTables]
AS

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'SysForeignKeyColumns',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS #SysForeignKeyColumns

DROP TABLE IF EXISTS DOI.SysForeignKeyColumns


CREATE TABLE DOI.SysForeignKeyColumns (
    database_id INT NOT null,
    constraint_object_id	int	NOT NULL,
    constraint_column_id	int	NOT NULL,
    parent_object_id	    INT	NOT NULL,
    parent_column_id	    int	NOT NULL,
    referenced_object_id	int	NOT NULL,
    referenced_column_id	int	NOT NULL,

    CONSTRAINT PK_SysForeignKeyColumns
        PRIMARY KEY NONCLUSTERED (database_id, constraint_object_id, constraint_column_id)
    )

    WITH (MEMORY_OPTIMIZED = ON)


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('e6c97a5a-352f-5964-9f48-ec2480596a3b' AS UNIQUEIDENTIFIER), '41ED828F320D31A04F755020B6DC3571C365A5A49750EA3BE0F51AA25794D9F5', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_CreateTables.sql", ID: {e6c97a5a-352f-5964-9f48-ec2480596a3b} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2b99ad9c-7f01-5f82-b46a-4e9ae0c3811a' AS UNIQUEIDENTIFIER) AND [script_checksum] = '294CE6ABAE7F82E6D1F98A76F3686D3669F49B79F4E70BCFE48F02654880F593')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_InsertData.sql", ID: {2b99ad9c-7f01-5f82-b46a-4e9ae0c3811a} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_InsertData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysForeignKeyColumns_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysForeignKeyColumns_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE     PROCEDURE [DOI].[spRefreshMetadata_System_SysForeignKeyColumns_InsertData]
AS

DELETE DOI.SysForeignKeyColumns

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysForeignKeyColumns'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_InsertData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_InsertData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('2b99ad9c-7f01-5f82-b46a-4e9ae0c3811a' AS UNIQUEIDENTIFIER), '294CE6ABAE7F82E6D1F98A76F3686D3669F49B79F4E70BCFE48F02654880F593', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeyColumns_InsertData.sql", ID: {2b99ad9c-7f01-5f82-b46a-4e9ae0c3811a} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('17af945a-aebd-5e0c-a773-8c592278f172' AS UNIQUEIDENTIFIER) AND [script_checksum] = '93502069FBB4E6E162339B20F5A9A170AEBF40CF9FE861913B14AE291CD222AC')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_UpdateData.sql", ID: {17af945a-aebd-5e0c-a773-8c592278f172} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_UpdateData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysForeignKeys_UpdateData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysForeignKeys_UpdateData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysForeignKeys_UpdateData]
AS

UPDATE FKS
SET FKS.ParentColumnList_Actual = STUFF(FKParentColumnList,LEN(FKParentColumnList),1,''),
    FKS.ReferencedColumnList_Actual = STUFF(FKReferencedColumnList,LEN(FKReferencedColumnList),1,''),
    FKS.DeploymentTime =     CASE 
                                WHEN ptu.IsStorageChanging = 1
                                THEN 'Job'
                                ELSE 'Deployment'
                            END 
--SELECT pts.name,ptu.*
FROM DOI.SysForeignKeys FKS
    INNER JOIN DOI.SysDatabases d ON d.database_id = FKS.database_id
    INNER JOIN DOI.SysTables pts ON pts.database_id = d.database_id
        AND FKS.parent_object_id = pts.object_id
    INNER JOIN DOI.SysSchemas s ON pts.schema_id = s.schema_id
    INNER JOIN DOI.Tables ptu ON d.name = ptu.DatabaseName
        AND ptu.SchemaName = s.name
        AND pts.name = ptu.TableName
    CROSS APPLY (	SELECT c.name + ',' 
					FROM DOI.SysForeignKeyColumns FKC
						INNER JOIN DOI.SysColumns c ON FKC.parent_object_id = c.object_id
							AND FKC.parent_column_id = c.column_id
					WHERE FKC.constraint_object_id = FKS.object_id 
                    ORDER BY FKC.constraint_column_id ASC
					FOR XML PATH('')) FKParentColumns(FKParentColumnList)
    CROSS APPLY (	SELECT c.name + ',' 
					FROM DOI.SysForeignKeyColumns FKC
						INNER JOIN DOI.SysColumns c ON FKC.referenced_object_id = c.object_id
							AND FKC.parent_column_id = c.column_id
					WHERE FKC.constraint_object_id = FKS.object_id 
                    ORDER BY FKC.constraint_column_id ASC
					FOR XML PATH('')) FKReferencedColumns(FKReferencedColumnList)


GO
GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_UpdateData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('17af945a-aebd-5e0c-a773-8c592278f172' AS UNIQUEIDENTIFIER), '93502069FBB4E6E162339B20F5A9A170AEBF40CF9FE861913B14AE291CD222AC', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_UpdateData.sql", ID: {17af945a-aebd-5e0c-a773-8c592278f172} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dce080b6-baaa-5171-8c81-26f3f3bdb4b5' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0B460E64BE26D2D628C1AD88461783EF076711B8CB3A9E8A665B57DE63C9273F')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_InsertData.sql", ID: {dce080b6-baaa-5171-8c81-26f3f3bdb4b5} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_InsertData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysForeignKeys_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysForeignKeys_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysForeignKeys_InsertData]
AS

DELETE DOI.SysForeignKeys

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysForeignKeys'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_InsertData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_InsertData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('dce080b6-baaa-5171-8c81-26f3f3bdb4b5' AS UNIQUEIDENTIFIER), '0B460E64BE26D2D628C1AD88461783EF076711B8CB3A9E8A665B57DE63C9273F', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_InsertData.sql", ID: {dce080b6-baaa-5171-8c81-26f3f3bdb4b5} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6057abdf-b2e5-5d3a-8e9b-e69d926f45e7' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D6DC2C332688DE294949A443E55C2447F8D417B9ADA5842F2F79CC094B6A0012')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys.sql", ID: {6057abdf-b2e5-5d3a-8e9b-e69d926f45e7} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysForeignKeys]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysForeignKeys];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE     PROCEDURE [DOI].[spRefreshMetadata_System_SysForeignKeys]

AS


EXEC DOI.spRefreshMetadata_System_SysForeignKeys_InsertData
EXEC DOI.spRefreshMetadata_System_SysForeignKeys_UpdateData
EXEC DOI.spRefreshMetadata_System_SysForeignKeyColumns_InsertData

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('6057abdf-b2e5-5d3a-8e9b-e69d926f45e7' AS UNIQUEIDENTIFIER), 'D6DC2C332688DE294949A443E55C2447F8D417B9ADA5842F2F79CC094B6A0012', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys.sql", ID: {6057abdf-b2e5-5d3a-8e9b-e69d926f45e7} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('542e8cf2-82c7-51e5-984e-9c47ed4867da' AS UNIQUEIDENTIFIER) AND [script_checksum] = '689B99C9ECBBE4AFD734524836862B839848C24300251A9337AF5576022B9EC0')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_CreateTables.sql", ID: {542e8cf2-82c7-51e5-984e-9c47ed4867da} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysForeignKeys_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysForeignKeys_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysForeignKeys_CreateTables]
AS

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'SysForeignKeys',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS #SysForeignKeys

DROP TABLE IF EXISTS DOI.SysForeignKeys


CREATE TABLE DOI.SysForeignKeys (
    database_id INT NOT null,
    name	sysname,
    object_id	int NOT NULL,
    principal_id	int	NULL,
    schema_id	int	NOT NULL,
    parent_object_id	int	NOT NULL,
    type	char(2) NULL,
    type_desc	nvarchar(120) NULL,
    create_date	datetime NOT NULL,
    modify_date	datetime NOT NULL,
    is_ms_shipped	bit NOT NULL,
    is_published	bit NOT NULL,
    is_schema_published	bit NOT NULL,
    referenced_object_id	int NULL,
    key_index_id	int NULL,
    is_disabled	bit NOT NULL,
    is_not_for_replication	bit NOT NULL,
    is_not_trusted	bit NOT NULL,
    delete_referential_action	tinyint NULL,
    delete_referential_action_desc	nvarchar(120) NULL,
    update_referential_action	tinyint NULL,
    update_referential_action_desc	nvarchar(120) NULL,
    is_system_named	bit NOT NULL,
    ParentColumnList_Actual VARCHAR(MAX) NULL,
    ReferencedColumnList_Actual VARCHAR(MAX) NULL,
    DeploymentTime VARCHAR(10) NULL
        CONSTRAINT Chk_SysForeignKeys_DeploymentTime
            CHECK (DeploymentTime IN ('Job', 'Deployment')),
    
    CONSTRAINT PK_SysForeignKeys
        PRIMARY KEY NONCLUSTERED (database_id, name)/*,
    CONSTRAINT UQ_SysForeignKeys
        UNIQUE NONCLUSTERED (database_id, parent_object_id, ParentColumnList_Actual, referenced_object_id, ReferencedColumnList_Actual)*/
    )

    WITH (MEMORY_OPTIMIZED = ON)

--SELECT database_id, parent_object_id, ParentColumnList_Actual, referenced_object_id, ReferencedColumnList_Actual, COUNT(*)
--FROM DOI.SysForeignKeys
--GROUP BY database_id, parent_object_id, ParentColumnList_Actual, referenced_object_id, ReferencedColumnList_Actual
--HAVING COUNT(*) > 1
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('542e8cf2-82c7-51e5-984e-9c47ed4867da' AS UNIQUEIDENTIFIER), '689B99C9ECBBE4AFD734524836862B839848C24300251A9337AF5576022B9EC0', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysForeignKeys_CreateTables.sql", ID: {542e8cf2-82c7-51e5-984e-9c47ed4867da} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4f60b82d-ed3d-5879-b3a3-d9bcd24e9354' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A7103EE660FC53B3A80D2F165927DA05CE4ED0E83BB6655E4DB6888FC14A4A67')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexColumns.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexColumns.sql", ID: {4f60b82d-ed3d-5879-b3a3-d9bcd24e9354} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexColumns.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysIndexColumns]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysIndexColumns];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysIndexColumns]

AS

DELETE DOI.SysIndexColumns

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysIndexColumns'

GO
GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexColumns.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexColumns.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('4f60b82d-ed3d-5879-b3a3-d9bcd24e9354' AS UNIQUEIDENTIFIER), 'A7103EE660FC53B3A80D2F165927DA05CE4ED0E83BB6655E4DB6888FC14A4A67', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexColumns.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexColumns.sql", ID: {4f60b82d-ed3d-5879-b3a3-d9bcd24e9354} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cfad256b-7c75-584b-a043-e6bf7261f13b' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'FC0ED7A5B0A39FB3C7D83EAD1C413149597EBC2AC09532E3326BE80193C1C447')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes.sql", ID: {cfad256b-7c75-584b-a043-e6bf7261f13b} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysIndexes]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysIndexes];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysIndexes]

AS

DELETE DOI.SysIndexes


EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysIndexes'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('cfad256b-7c75-584b-a043-e6bf7261f13b' AS UNIQUEIDENTIFIER), 'FC0ED7A5B0A39FB3C7D83EAD1C413149597EBC2AC09532E3326BE80193C1C447', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes.sql", ID: {cfad256b-7c75-584b-a043-e6bf7261f13b} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8f44ae30-44b8-5115-9f19-e12480de629f' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AE2AE49F9A70F763DBA43CB8F59C761CCFCF8045561BB7CD8B7C126426F5E96F')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_CreateTables.sql", ID: {8f44ae30-44b8-5115-9f19-e12480de629f} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysIndexes_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysIndexes_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysIndexes_CreateTables]

AS

DROP TABLE IF EXISTS #SysIndexes

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'SysIndexes',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS DOI.SysIndexes


CREATE TABLE DOI.SysIndexes(
    database_id INT NOT NULL,
    object_id INT NOT NULL,
    name NVARCHAR(128) NULL ,
    index_id INT NOT NULL,
    type TINYINT NOT NULL ,
    type_desc NVARCHAR(60) NOT NULL ,
    is_unique BIT NOT NULL ,
    data_space_id INT NULL, 
    ignore_dup_key BIT NOT NULL ,
    is_primary_key BIT NOT NULL ,
    is_unique_constraint BIT NOT NULL ,
    fill_factor TINYINT NOT NULL ,
    is_padded BIT NOT NULL ,
    is_disabled BIT NOT NULL ,
    is_hypothetical BIT NOT NULL ,
    allow_row_locks BIT NOT NULL ,
    allow_page_locks BIT NOT NULL ,
    has_filter BIT NOT NULL ,
    filter_definition NVARCHAR(MAX) NULL ,
    compression_delay INT NULL
    
    CONSTRAINT PK_SysIndexes 
        PRIMARY KEY NONCLUSTERED (database_id, object_id, index_id))
WITH (MEMORY_OPTIMIZED = ON)




--ADD DERIVED COLUMNS
ALTER TABLE DOI.SysIndexes ADD 
    key_column_list NVARCHAR(MAX) NULL,
    included_column_list NVARCHAR(MAX) NULL,
    has_LOB_columns BIT NULL

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('8f44ae30-44b8-5115-9f19-e12480de629f' AS UNIQUEIDENTIFIER), 'AE2AE49F9A70F763DBA43CB8F59C761CCFCF8045561BB7CD8B7C126426F5E96F', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_CreateTables.sql", ID: {8f44ae30-44b8-5115-9f19-e12480de629f} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('de7b12c4-f197-5e43-8882-d7525074a5da' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0BA357A31DC6E196DE71CEB055F93E441AC3EF173AB385B51DB6E29BB74DAAF8')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexPhysicalStats.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexPhysicalStats.sql", ID: {de7b12c4-f197-5e43-8882-d7525074a5da} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexPhysicalStats.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysIndexPhysicalStats]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysIndexPhysicalStats];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysIndexPhysicalStats]

AS

DELETE DOI.SysIndexPhysicalStats

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysIndexPhysicalStats'

GO
GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexPhysicalStats.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexPhysicalStats.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('de7b12c4-f197-5e43-8882-d7525074a5da' AS UNIQUEIDENTIFIER), '0BA357A31DC6E196DE71CEB055F93E441AC3EF173AB385B51DB6E29BB74DAAF8', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexPhysicalStats.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexPhysicalStats.sql", ID: {de7b12c4-f197-5e43-8882-d7525074a5da} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a44103-e4e0-550c-a5d9-663f68e48ba0' AS UNIQUEIDENTIFIER) AND [script_checksum] = '155C3E0338A5512245391AD8D4BE63933B6231762DC699060A5B2015DF7C347E')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles.sql", ID: {f8a44103-e4e0-550c-a5d9-663f68e48ba0} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysMasterFiles]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysMasterFiles];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysMasterFiles]

AS

DELETE DOI.SysMasterFiles


EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysMasterFiles'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('f8a44103-e4e0-550c-a5d9-663f68e48ba0' AS UNIQUEIDENTIFIER), '155C3E0338A5512245391AD8D4BE63933B6231762DC699060A5B2015DF7C347E', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles.sql", ID: {f8a44103-e4e0-550c-a5d9-663f68e48ba0} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd9ba0a7-c8e3-560e-b61d-147c4e58f781' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AA7BB4725CF38B488CAD88EDAE6AFE58A4252CF89DCAB8726EC3646188AF5D51')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles_CreateTables.sql", ID: {cd9ba0a7-c8e3-560e-b61d-147c4e58f781} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysMasterFiles_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysMasterFiles_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysMasterFiles_CreateTables]

AS

DROP TABLE IF EXISTS #SysMasterFiles

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'SysMasterFiles',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS DOI.SysMasterFiles


CREATE TABLE DOI.SysMasterFiles(
    database_id	            INT NOT NULL,
    file_id	                INT NOT NULL,
    file_guid	            UNIQUEIDENTIFIER NULL,
    type	                TINYINT NOT NULL,
    type_desc	            NVARCHAR(60) NULL,
    data_space_id	        INT NOT NULL,
    name	                SYSNAME,
    physical_name	        NVARCHAR(260) NOT NULL,
    state	                TINYINT NULL,
    state_desc	            NVARCHAR(60) NULL,
    size	                INT NOT NULL,
    max_size	            INT NOT NULL,
    growth	                INT NOT NULL,
    is_media_read_only	    BIT NOT NULL,
    is_read_only	        BIT NOT NULL,
    is_sparse	            BIT NOT NULL,
    is_percent_growth	    BIT NOT NULL,
    is_name_reserved	    BIT NOT NULL,
    create_lsn	            NUMERIC(25,0) NULL,
    drop_lsn	            NUMERIC(25,0) NULL,
    read_only_lsn	        NUMERIC(25,0) NULL,
    read_write_lsn	        NUMERIC(25,0) NULL,
    differential_base_lsn	NUMERIC(25,0) NULL,
    differential_base_guid	UNIQUEIDENTIFIER NULL,
    differential_base_time	DATETIME NULL,
    redo_start_lsn	        NUMERIC(25,0) NULL,
    redo_start_fork_guid	UNIQUEIDENTIFIER NULL,
    redo_target_lsn	        NUMERIC(25,0) NULL,
    redo_target_fork_guid	UNIQUEIDENTIFIER NULL,
    backup_lsn	            NUMERIC(25,0) NULL,
    credential_id	        INT NULL
    
    CONSTRAINT PK_SysMasterFiles 
        PRIMARY KEY NONCLUSTERED (database_id, file_id))
WITH (MEMORY_OPTIMIZED = ON)

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('cd9ba0a7-c8e3-560e-b61d-147c4e58f781' AS UNIQUEIDENTIFIER), 'AA7BB4725CF38B488CAD88EDAE6AFE58A4252CF89DCAB8726EC3646188AF5D51', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysMasterFiles_CreateTables.sql", ID: {cd9ba0a7-c8e3-560e-b61d-147c4e58f781} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ec6b58a6-1b78-5b2b-8292-6d82d92efff6' AS UNIQUEIDENTIFIER) AND [script_checksum] = '5502D7A322F9D1CA6D6F70DB9EBA3C8440C7A1402DD21E6F1496ECACD95C44E4')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionFunctions.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionFunctions.sql", ID: {ec6b58a6-1b78-5b2b-8292-6d82d92efff6} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionFunctions.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysPartitionFunctions]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysPartitionFunctions];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysPartitionFunctions]

AS

DELETE DOI.SysPartitionFunctions

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysPartitionFunctions'
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionFunctions.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionFunctions.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('ec6b58a6-1b78-5b2b-8292-6d82d92efff6' AS UNIQUEIDENTIFIER), '5502D7A322F9D1CA6D6F70DB9EBA3C8440C7A1402DD21E6F1496ECACD95C44E4', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionFunctions.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionFunctions.sql", ID: {ec6b58a6-1b78-5b2b-8292-6d82d92efff6} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9f88fbf9-49ad-5b35-a500-328981cf6b4e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7F4FA8468B062C7C593C0C9CBDB1D3486835C808BA8F1F87E04DD5D3F5FA3E64')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionRangeValues.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionRangeValues.sql", ID: {9f88fbf9-49ad-5b35-a500-328981cf6b4e} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionRangeValues.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysPartitionRangeValues]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysPartitionRangeValues];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysPartitionRangeValues]

AS

DELETE DOI.SysPartitionRangeValues

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysPartitionRangeValues'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionRangeValues.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionRangeValues.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('9f88fbf9-49ad-5b35-a500-328981cf6b4e' AS UNIQUEIDENTIFIER), '7F4FA8468B062C7C593C0C9CBDB1D3486835C808BA8F1F87E04DD5D3F5FA3E64', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionRangeValues.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionRangeValues.sql", ID: {9f88fbf9-49ad-5b35-a500-328981cf6b4e} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a35a4a20-5d73-55ee-be0d-dcb1c76c7466' AS UNIQUEIDENTIFIER) AND [script_checksum] = '565A7889E7E2014E47809C7535A796EE402183231C2A51043E8AF9E9415C7198')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitions.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitions.sql", ID: {a35a4a20-5d73-55ee-be0d-dcb1c76c7466} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitions.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysPartitions]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysPartitions];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysPartitions]

AS

DELETE DOI.SysPartitions

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysPartitions'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitions.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitions.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('a35a4a20-5d73-55ee-be0d-dcb1c76c7466' AS UNIQUEIDENTIFIER), '565A7889E7E2014E47809C7535A796EE402183231C2A51043E8AF9E9415C7198', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitions.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitions.sql", ID: {a35a4a20-5d73-55ee-be0d-dcb1c76c7466} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e66506fc-62f2-56ad-b31a-339ea26fc79c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '848CD60525331D60D96A98A7F6004EE0251F2E41AC59732F9B25456EE465E2DD')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionSchemes.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionSchemes.sql", ID: {e66506fc-62f2-56ad-b31a-339ea26fc79c} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionSchemes.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysPartitionSchemes]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysPartitionSchemes];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysPartitionSchemes]

AS

DELETE DOI.SysPartitionSchemes

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysPartitionSchemes'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionSchemes.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionSchemes.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('e66506fc-62f2-56ad-b31a-339ea26fc79c' AS UNIQUEIDENTIFIER), '848CD60525331D60D96A98A7F6004EE0251F2E41AC59732F9B25456EE465E2DD', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionSchemes.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysPartitionSchemes.sql", ID: {e66506fc-62f2-56ad-b31a-339ea26fc79c} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('02eb4290-712d-555e-b937-21b1b9520719' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6DF4127B6ABDAC72470F585A22BA38E286F8FF89BCCE4B205120B55188326634')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysSchemas.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysSchemas.sql", ID: {02eb4290-712d-555e-b937-21b1b9520719} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysSchemas.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysSchemas]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysSchemas];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysSchemas]

AS

DELETE DOI.SysSchemas

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysSchemas'


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysSchemas.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysSchemas.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('02eb4290-712d-555e-b937-21b1b9520719' AS UNIQUEIDENTIFIER), '6DF4127B6ABDAC72470F585A22BA38E286F8FF89BCCE4B205120B55188326634', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysSchemas.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysSchemas.sql", ID: {02eb4290-712d-555e-b937-21b1b9520719} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b7f555e1-8eae-5731-a69d-4dfdf0dc2e02' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F8DEB8632D34B4D0D8B02AF2C42A87DF3DDCF41739549A3D19355A69A136C342')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_UpdateData.sql", ID: {b7f555e1-8eae-5731-a69d-4dfdf0dc2e02} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_UpdateData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysStats_UpdateData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysStats_UpdateData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysStats_UpdateData]
AS

UPDATE ST
SET ST.column_list = StatsColumnList
--SELECT *
FROM DOI.SysStats ST
    INNER JOIN DOI.SysDatabases d ON d.database_id = ST.database_id
    INNER JOIN DOI.SysTables t ON t.database_id = d.database_id
        AND st.object_id = t.object_id
    INNER JOIN DOI.SysSchemas s ON t.schema_id = s.schema_id
    CROSS APPLY (	SELECT c.name + ',' 
					FROM DOI.SysStatsColumns stc 
						INNER JOIN DOI.SysColumns c ON stc.object_id = c.object_id
							AND stc.column_id = c.column_id
					WHERE stc.object_id = st.object_id 
						AND stc.stats_id = st.stats_id
                    ORDER BY stc.stats_column_id ASC
					FOR XML PATH('')) StatsColumns(StatsColumnList)
GO
GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_UpdateData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('b7f555e1-8eae-5731-a69d-4dfdf0dc2e02' AS UNIQUEIDENTIFIER), 'F8DEB8632D34B4D0D8B02AF2C42A87DF3DDCF41739549A3D19355A69A136C342', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_UpdateData.sql", ID: {b7f555e1-8eae-5731-a69d-4dfdf0dc2e02} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ad3992c6-b094-50eb-b1bf-04348578f61b' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D6C685C20B50104935CDB03610501056914A12AFE182E8F4727F846D272DDD73')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_InsertData.sql", ID: {ad3992c6-b094-50eb-b1bf-04348578f61b} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_InsertData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysStats_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysStats_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysStats_InsertData]
AS

DELETE DOI.SysStats

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysStats'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_InsertData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_InsertData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('ad3992c6-b094-50eb-b1bf-04348578f61b' AS UNIQUEIDENTIFIER), 'D6C685C20B50104935CDB03610501056914A12AFE182E8F4727F846D272DDD73', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_InsertData.sql", ID: {ad3992c6-b094-50eb-b1bf-04348578f61b} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d397bc62-2dde-58dc-a21b-8a23d424a7cf' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4B4B3BFFBCF1DD08472247CC151160942092A072BD8F8933CF8491C1EE8B67FD')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats.sql", ID: {d397bc62-2dde-58dc-a21b-8a23d424a7cf} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysStats]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysStats];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysStats]

AS


EXEC DOI.spRefreshMetadata_System_SysStats_InsertData
EXEC DOI.spRefreshMetadata_System_SysStats_UpdateData

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats.sql" -


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('d397bc62-2dde-58dc-a21b-8a23d424a7cf' AS UNIQUEIDENTIFIER), '4B4B3BFFBCF1DD08472247CC151160942092A072BD8F8933CF8491C1EE8B67FD', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats.sql", ID: {d397bc62-2dde-58dc-a21b-8a23d424a7cf} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('db036b5b-b306-5170-9bf3-34447c515083' AS UNIQUEIDENTIFIER) AND [script_checksum] = '92304ECFAF1E0BE1A18162489E9DF5155723A91C6FDB56A4749BF46946640C38')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_CreateTables.sql", ID: {db036b5b-b306-5170-9bf3-34447c515083} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysStats_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysStats_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysStats_CreateTables]
AS

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'SysStats',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS #SysStats

DROP TABLE IF EXISTS DOI.SysStats

CREATE TABLE DOI.SysStats (
    database_id         INT NOT NULL,
    object_id	        INT NOT NULL,
    name	            NVARCHAR(128) NULL,
    stats_id	        INT NOT NULL,
    auto_created	    BIT NULL,
    user_created	    BIT NULL,
    no_recompute	    BIT NULL,
    has_filter	        BIT NULL,
    filter_definition	NVARCHAR(MAX) NULL,
    is_temporary	    BIT NULL,
    is_incremental	    BIT NULL,
    column_list         NVARCHAR(max) NULL

    CONSTRAINT PK_SysStats
        PRIMARY KEY NONCLUSTERED (database_id, object_id, stats_id))
WITH (MEMORY_OPTIMIZED = ON)


SELECT DB_ID('PaymentReporting') AS database_id, *, null AS column_list
INTO #SysStats
FROM PaymentReporting.sys.stats

INSERT INTO DOI.SysStats 
SELECT * FROM #SysStats

DROP TABLE #SysStats

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('db036b5b-b306-5170-9bf3-34447c515083' AS UNIQUEIDENTIFIER), '92304ECFAF1E0BE1A18162489E9DF5155723A91C6FDB56A4749BF46946640C38', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStats_CreateTables.sql", ID: {db036b5b-b306-5170-9bf3-34447c515083} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2c22337d-bdfb-58a0-86c0-4fb6923066a3' AS UNIQUEIDENTIFIER) AND [script_checksum] = '304E470017B5889A39B3C6C166D82E722D2BCCD013B7798788E3D7830AE18EFD')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_CreateTables.sql", ID: {2c22337d-bdfb-58a0-86c0-4fb6923066a3} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysStatsColumns_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysStatsColumns_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysStatsColumns_CreateTables]
AS

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'SysStatsColumns',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS #SysStatsColumns

DROP TABLE IF EXISTS DOI.SysStatsColumns

CREATE TABLE DOI.SysStatsColumns (
    database_id     INT NOT NULL,
    object_id	    INT NOT NULL,
    stats_id	    INT NOT NULL,
    stats_column_id	INT NOT NULL,
    column_id	    INT NOT NULL

    CONSTRAINT PK_SysStatsColumns
        PRIMARY KEY NONCLUSTERED (database_id, object_id, stats_id, stats_column_id))
WITH (MEMORY_OPTIMIZED = ON)


EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysStatsColumns'

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('2c22337d-bdfb-58a0-86c0-4fb6923066a3' AS UNIQUEIDENTIFIER), '304E470017B5889A39B3C6C166D82E722D2BCCD013B7798788E3D7830AE18EFD', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_CreateTables.sql", ID: {2c22337d-bdfb-58a0-86c0-4fb6923066a3} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8c518143-6464-527d-954e-65dd5ef68a7c' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A74335E2223DBF12A262CF019E1CB78FA55BD48BA898EB3687FC3A8B6641C57D')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_InsertData.sql", ID: {8c518143-6464-527d-954e-65dd5ef68a7c} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_InsertData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysStatsColumns_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysStatsColumns_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysStatsColumns_InsertData]
AS

DELETE DOI.SysStatsColumns

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysStatsColumns'


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_InsertData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_InsertData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('8c518143-6464-527d-954e-65dd5ef68a7c' AS UNIQUEIDENTIFIER), 'A74335E2223DBF12A262CF019E1CB78FA55BD48BA898EB3687FC3A8B6641C57D', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysStatsColumns_InsertData.sql", ID: {8c518143-6464-527d-954e-65dd5ef68a7c} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6832be52-f14c-5430-810b-7ec2bb86f829' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8FC3C869162693166B3B144E8C30CD3ED89E44DA13B442A1B61640DE3C8813E2')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTables.sql", ID: {6832be52-f14c-5430-810b-7ec2bb86f829} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysTables]

AS

DELETE DOI.SysTables


EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysTables'


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('6832be52-f14c-5430-810b-7ec2bb86f829' AS UNIQUEIDENTIFIER), '8FC3C869162693166B3B144E8C30CD3ED89E44DA13B442A1B61640DE3C8813E2', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTables.sql", ID: {6832be52-f14c-5430-810b-7ec2bb86f829} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2f3b95bb-b6cc-5286-a9cc-320828331ff2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'EA528AC5798C9FBA3B79351B6BE24ED6E1C83130395821E9A6A14E22DFDAE22C')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers.sql", ID: {2f3b95bb-b6cc-5286-a9cc-320828331ff2} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysTriggers]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysTriggers];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysTriggers]

AS

DELETE DOI.SysTriggers


EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysTriggers'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('2f3b95bb-b6cc-5286-a9cc-320828331ff2' AS UNIQUEIDENTIFIER), 'EA528AC5798C9FBA3B79351B6BE24ED6E1C83130395821E9A6A14E22DFDAE22C', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers.sql", ID: {2f3b95bb-b6cc-5286-a9cc-320828331ff2} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f08426e8-3bd6-5ea4-88d9-e5a2e8486019' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7C11FC211B35D89C5F819D6EE99DD2E01AD5CF776872450F9481071152154745')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers_CreateTables.sql", ID: {f08426e8-3bd6-5ea4-88d9-e5a2e8486019} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysTriggers_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysTriggers_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysTriggers_CreateTables]

AS

DROP TABLE IF EXISTS #SysTriggers

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'SysTriggers',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS DOI.SysTriggers


CREATE TABLE DOI.SysTriggers(
    database_id             INT NOT NULL,
    name	                SYSNAME,
    object_id	            INT NOT NULL,
    parent_class	        TINYINT NOT NULL,
    parent_class_desc	    NVARCHAR(60) NULL,
    parent_id	            INT NOT NULL,
    type	                CHAR(2) NULL,
    type_desc	            NVARCHAR(60) NULL,
    create_date	            DATETIME NOT NULL,
    modify_date	            DATETIME NOT NULL,
    is_ms_shipped	        BIT NOT NULL,
    is_disabled	            BIT NOT NULL,
    is_not_for_replication	BIT NOT NULL,
    is_instead_of_trigger	BIT NOT NULL,
   
    CONSTRAINT PK_SysTriggers 
        PRIMARY KEY NONCLUSTERED (database_id, parent_id, object_id))
WITH (MEMORY_OPTIMIZED = ON)

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('f08426e8-3bd6-5ea4-88d9-e5a2e8486019' AS UNIQUEIDENTIFIER), '7C11FC211B35D89C5F819D6EE99DD2E01AD5CF776872450F9481071152154745', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTriggers_CreateTables.sql", ID: {f08426e8-3bd6-5ea4-88d9-e5a2e8486019} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a403c07-a328-5a6d-9eaa-768cb9435ec7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0F540E6CD8D688DFC96035DE4AC1E9D57A28CFEAA22B28E0A2638F857CF091D2')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTypes.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTypes.sql", ID: {1a403c07-a328-5a6d-9eaa-768cb9435ec7} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTypes.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysTypes]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysTypes];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysTypes]

AS

DELETE DOI.SysTypes

EXEC DOI.spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs
    @TableName = 'SysTypes'


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTypes.sql" -


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTypes.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('1a403c07-a328-5a6d-9eaa-768cb9435ec7' AS UNIQUEIDENTIFIER), '0F540E6CD8D688DFC96035DE4AC1E9D57A28CFEAA22B28E0A2638F857CF091D2', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTypes.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysTypes.sql", ID: {1a403c07-a328-5a6d-9eaa-768cb9435ec7} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6a92f07d-eb33-548c-9be6-fb834ef39594' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6741EBB3855F635F246D05660B5282C45FA056EB03DB6D4B289D727E980634A7')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Databases_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Databases_InsertData.sql", ID: {6a92f07d-eb33-548c-9be6-fb834ef39594} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Databases_InsertData.sql" 
GO
-- <Migration ID="6a92f07d-eb33-548c-9be6-fb834ef39594" TransactionHandling="Custom" />
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_Databases_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Databases_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE     PROCEDURE [DOI].[spRefreshMetadata_User_Databases_InsertData]

WITH NATIVE_COMPILATION, SCHEMABINDING
AS

/*
    EXEC DOI.spRefreshMetadata_User_Databases_InsertData
*/

BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)
    DELETE DOI.Databases

    INSERT INTO DOI.Databases ( DatabaseName )
    VALUES ( N'PaymentReporting')
END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Databases_InsertData.sql" 


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Databases_InsertData.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('6a92f07d-eb33-548c-9be6-fb834ef39594' AS UNIQUEIDENTIFIER), '6741EBB3855F635F246D05660B5282C45FA056EB03DB6D4B289D727E980634A7', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Databases_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Databases_InsertData.sql", ID: {6a92f07d-eb33-548c-9be6-fb834ef39594} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ebe0a54c-6fb5-5dbc-bc07-1d2b12481ea4' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'DBEC4DA9FF92B970FA66E0CC65C009474602F0489326A0026A8711BCCFF23BA4')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_0_Databases.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_0_Databases.sql", ID: {ebe0a54c-6fb5-5dbc-bc07-1d2b12481ea4} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_0_Databases.sql" 
GO
-- <Migration ID="ebe0a54c-6fb5-5dbc-bc07-1d2b12481ea4" TransactionHandling="Custom" />
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_0_Databases]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_0_Databases];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE     PROCEDURE [DOI].[spRefreshMetadata_User_0_Databases]

WITH NATIVE_COMPILATION, SCHEMABINDING
AS

/*
    EXEC DOI.spRefreshMetadata_User_0_Databases
*/

BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)
    EXEC [DOI].[spRefreshMetadata_User_Databases_InsertData]
END

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_0_Databases.sql" 


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_0_Databases.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('ebe0a54c-6fb5-5dbc-bc07-1d2b12481ea4' AS UNIQUEIDENTIFIER), 'DBEC4DA9FF92B970FA66E0CC65C009474602F0489326A0026A8711BCCFF23BA4', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_0_Databases.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_0_Databases.sql", ID: {ebe0a54c-6fb5-5dbc-bc07-1d2b12481ea4} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed17ec4a-4a31-53da-82c8-3f2e3acdf564' AS UNIQUEIDENTIFIER) AND [script_checksum] = '11C3757F2F8B1F34D952410561EB34C456C6061BFDBB4DF8A94DC03DD5EE83D1')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_UpdateData.sql", ID: {ed17ec4a-4a31-53da-82c8-3f2e3acdf564} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_UpdateData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_PartitionFunctions_UpdateData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_PartitionFunctions_UpdateData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE PROCEDURE [DOI].[spRefreshMetadata_User_PartitionFunctions_UpdateData]

AS

/*
    EXEC DOI.[spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs]
        @TableName = 'SysTables', @Debug = 1
*/

    UPDATE DOI.PartitionFunctions
    SET PartitionSchemeName = REPLACE(PartitionFunctionName, 'pf', 'ps'),
        NumOfCharsInSuffix =    CASE BoundaryInterval 
								    WHEN 'Monthly' 
								    THEN 6
								    WHEN 'Yearly' 
								    THEN 4
							    END,
        LastBoundaryDate = CASE 
							    WHEN UsesSlidingWindow = 0
							    THEN	CASE BoundaryInterval 
										    WHEN 'Monthly' 
										    THEN DATEFROMPARTS(DATEPART(YEAR, DATEADD(MONTH, NumOfFutureIntervals, SYSDATETIME())), DATEPART(MONTH, DATEADD(MONTH, NumOfFutureIntervals, SYSDATETIME())), 1)
										    WHEN 'Yearly' 
										    THEN DATEFROMPARTS(DATEPART(YEAR, DATEADD(YEAR, NumOfFutureIntervals, SYSDATETIME())), 1, 1)
									    END
							    ELSE	CASE
										    /*IF IT'S THE 101st DAY OF THE YEAR, LEAVE THE LAST DATE AS 12/31 SO IT WON'T BREAK 
										    PARTITION FUNCTION WITH DUPLICATE DATE BOUNDARIES.*/
										    WHEN MONTH(CAST(DATEADD(DAY, -1*SlidingWindowSize,SYSDATETIME()) AS DATE)) = 1
												    AND DAY(CAST(DATEADD(DAY, -1*SlidingWindowSize,SYSDATETIME()) AS DATE)) = 1
										    THEN DATEADD(DAY, -1, CAST(DATEADD(DAY, -1*SlidingWindowSize,SYSDATETIME()) AS DATE))
										    ELSE CAST(DATEADD(DAY, -1*SlidingWindowSize,SYSDATETIME()) AS DATE)
									    END 
						    END,
         NumOfTotalPartitionFunctionIntervals = CASE --DIFF BETWEEN INITIAL DATE AND LAST BOUNDARY DATE.
												    WHEN BoundaryInterval = 'Monthly'
												    THEN DATEDIFF(MONTH, InitialDate,	CASE 
																						    WHEN UsesSlidingWindow = 0
																						    THEN DATEFROMPARTS(DATEPART(YEAR, DATEADD(MONTH, NumOfFutureIntervals, SYSDATETIME())), DATEPART(MONTH, DATEADD(MONTH, NumOfFutureIntervals, SYSDATETIME())), 1)
																						    ELSE CAST(DATEADD(DAY, -1*SlidingWindowSize,SYSDATETIME()) AS DATE)
																					    END) + 1 --datediff clips 1 month off the end, so we add it back.
												    WHEN BoundaryInterval = 'Yearly'
												    THEN DATEDIFF(YEAR, InitialDate,	CASE 
																						    WHEN UsesSlidingWindow = 0
																						    THEN DATEFROMPARTS(DATEPART(YEAR, DATEADD(YEAR, NumOfFutureIntervals, SYSDATETIME())), 1, 1)
																						    ELSE CAST(DATEADD(DAY, -1*SlidingWindowSize,SYSDATETIME()) AS DATE)
																					    END) + 1 --datediff clips 1 month off the end, so we add it back.
											    END + CASE WHEN UsesSlidingWindow = 1 THEN 1 ELSE 0 END, --one interval for the sliding window
                                            
        NumOfTotalPartitionSchemeIntervals =    CASE
											        WHEN BoundaryInterval = 'Monthly'
											        THEN DATEDIFF(MONTH, InitialDate,	CASE 
																					        WHEN UsesSlidingWindow = 0
																					        THEN DATEFROMPARTS(DATEPART(YEAR, DATEADD(MONTH, NumOfFutureIntervals, SYSDATETIME())), DATEPART(MONTH, DATEADD(MONTH, NumOfFutureIntervals, SYSDATETIME())), 1)
																					        ELSE CAST(DATEADD(DAY, -1*SlidingWindowSize,SYSDATETIME()) AS DATE)
																				        END) + 1 --datediff clips 1 month off the end, so we add it back.
											        WHEN BoundaryInterval = 'Yearly'
											        THEN DATEDIFF(YEAR, InitialDate,	CASE 
																					        WHEN UsesSlidingWindow = 0
																					        THEN DATEFROMPARTS(DATEPART(YEAR, DATEADD(YEAR, NumOfFutureIntervals, SYSDATETIME())), 1, 1)
																					        ELSE CAST(DATEADD(DAY, -1*SlidingWindowSize,SYSDATETIME()) AS DATE)
																				        END) + 1 --datediff clips 1 month off the end, so we add it back.
										        END + CASE WHEN UsesSlidingWindow = 1 THEN 2 ELSE 1 END, --one interval for historical and one for the sliding window
        MinValueOfDataType = CASE WHEN PartitionFunctionDataType = 'DATETIME2' THEN '0001-01-01' ELSE 'Error' END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_UpdateData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('ed17ec4a-4a31-53da-82c8-3f2e3acdf564' AS UNIQUEIDENTIFIER), '11C3757F2F8B1F34D952410561EB34C456C6061BFDBB4DF8A94DC03DD5EE83D1', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_UpdateData.sql", ID: {ed17ec4a-4a31-53da-82c8-3f2e3acdf564} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ea410dfe-2053-50dc-ac7d-aa067dfd4f0d' AS UNIQUEIDENTIFIER) AND [script_checksum] = '3E050A3465755C6BE9E5A431FA660DC32BB91F6339D85CD058A5F67D679F8B5A')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_InsertData.sql", ID: {ea410dfe-2053-50dc-ac7d-aa067dfd4f0d} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_InsertData.sql" 
GO
-- <Migration ID="ea410dfe-2053-50dc-ac7d-aa067dfd4f0d" TransactionHandling="Custom" />
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_PartitionFunctions_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_PartitionFunctions_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE    PROCEDURE [DOI].[spRefreshMetadata_User_PartitionFunctions_InsertData]

WITH NATIVE_COMPILATION, SCHEMABINDING
AS

/*
    EXEC DOI.[spRefreshMetadata_LoadSQLMetadataFromTableForAllDBs]
        @TableName = 'SysTables', @Debug = 1
*/

BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)
    DELETE DOI.PartitionFunctions

    INSERT INTO DOI.PartitionFunctions ( DatabaseName, PartitionFunctionName,PartitionFunctionDataType ,BoundaryInterval ,NumOfFutureIntervals , InitialDate , UsesSlidingWindow , SlidingWindowSize , IsDeprecated)    VALUES	(	'PaymentReporting'              ,'pfMonthly'						, 'DATETIME2'				, 'Monthly'			, 13					, '2018-01-01'	, 0					, NULL				, 0           )
    INSERT INTO DOI.PartitionFunctions ( DatabaseName, PartitionFunctionName,PartitionFunctionDataType ,BoundaryInterval ,NumOfFutureIntervals , InitialDate , UsesSlidingWindow , SlidingWindowSize , IsDeprecated)    VALUES  (	'PaymentReporting'              ,'pfYearlyNoSlidingWindow'		    , 'DATETIME2'				, 'Yearly'			, 1						, '2016-01-01'	, 0					, NULL				, 0           )
    INSERT INTO DOI.PartitionFunctions ( DatabaseName, PartitionFunctionName,PartitionFunctionDataType ,BoundaryInterval ,NumOfFutureIntervals , InitialDate , UsesSlidingWindow , SlidingWindowSize , IsDeprecated)    VALUES  (	'PaymentReporting'              ,'pf100DaysToYearlySlidingWindow'   , 'DATETIME2'				, 'Yearly'			, 1						, '2016-01-01'	, 1					, 100				, 1           )
    INSERT INTO DOI.PartitionFunctions ( DatabaseName, PartitionFunctionName,PartitionFunctionDataType ,BoundaryInterval ,NumOfFutureIntervals , InitialDate , UsesSlidingWindow , SlidingWindowSize , IsDeprecated)    VALUES  (	'PaymentReporting'              ,'pfYearlyPlusSlidingWindow'		, 'DATETIME2'				, 'Yearly'			, 1						, '2016-01-01'	, 1					, 100				, 1           )
    INSERT INTO DOI.PartitionFunctions ( DatabaseName, PartitionFunctionName,PartitionFunctionDataType ,BoundaryInterval ,NumOfFutureIntervals , InitialDate , UsesSlidingWindow , SlidingWindowSize , IsDeprecated)    VALUES  (	'PaymentReporting'              ,'pfYearly'						    , 'DATETIME2'				, 'Yearly'			, 1						, '2016-01-01'	, 1					, 100				, 1           )
    INSERT INTO DOI.PartitionFunctions ( DatabaseName, PartitionFunctionName,PartitionFunctionDataType ,BoundaryInterval ,NumOfFutureIntervals , InitialDate , UsesSlidingWindow , SlidingWindowSize , IsDeprecated)    VALUES  (	'PaymentReporting'              ,'pfTest'						    , 'DATETIME2'				, 'Yearly'			, 1						, '2016-01-01'	, 1					, 100				, 1           )
END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_InsertData.sql" 


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_InsertData.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('ea410dfe-2053-50dc-ac7d-aa067dfd4f0d' AS UNIQUEIDENTIFIER), '3E050A3465755C6BE9E5A431FA660DC32BB91F6339D85CD058A5F67D679F8B5A', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_InsertData.sql", ID: {ea410dfe-2053-50dc-ac7d-aa067dfd4f0d} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9f507f55-cfe6-5ccd-bf53-8618d5f294be' AS UNIQUEIDENTIFIER) AND [script_checksum] = '85A85DA751896907328BF2750CB858E889C6F07E9D4403DE69B39F6888D7F6B0')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_1_PartitionFunctions.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_1_PartitionFunctions.sql", ID: {9f507f55-cfe6-5ccd-bf53-8618d5f294be} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_1_PartitionFunctions.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_1_PartitionFunctions]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_1_PartitionFunctions];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_1_PartitionFunctions]

AS
    DROP TRIGGER IF EXISTS DOI.trUpdPartitionFunctions

    --EXEC DOI.spRefreshMetadata_User_PartitionFunctions_CreateTables
    EXEC DOI.spRefreshMetadata_User_PartitionFunctions_InsertData
    EXEC DOI.spRefreshMetadata_User_PartitionFunctions_UpdateData

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_1_PartitionFunctions.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_1_PartitionFunctions.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('9f507f55-cfe6-5ccd-bf53-8618d5f294be' AS UNIQUEIDENTIFIER), '85A85DA751896907328BF2750CB858E889C6F07E9D4403DE69B39F6888D7F6B0', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_1_PartitionFunctions.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_1_PartitionFunctions.sql", ID: {9f507f55-cfe6-5ccd-bf53-8618d5f294be} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0f5f2171-aa3f-5085-a64c-7a35ece9898f' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'FACB8BF3F8C45B19F967CDC0A9C18CD69F22E381AD4F4794B8ED6A2F87186B9C')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_UpdateData.sql", ID: {0f5f2171-aa3f-5085-a64c-7a35ece9898f} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_UpdateData.sql" 
GO
-- <Migration ID="0f5f2171-aa3f-5085-a64c-7a35ece9898f" TransactionHandling="Custom" />
IF OBJECT_ID('DOI.spRefreshMetadata_User_Constraints_UpdateData') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Constraints_UpdateData];
GO

CREATE OR ALTER PROCEDURE [DOI].[spRefreshMetadata_User_Constraints_UpdateData]

WITH NATIVE_COMPILATION, SCHEMABINDING
AS

/*
    EXEC DOI.[spRefreshMetadata_User_Constraints_UpdateData]
*/

BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)
    UPDATE DOI.DefaultConstraints
    SET DefaultConstraintName = 'Def_' + TableName + '_' + ColumnName 
END
GO
GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_UpdateData.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('0f5f2171-aa3f-5085-a64c-7a35ece9898f' AS UNIQUEIDENTIFIER), 'FACB8BF3F8C45B19F967CDC0A9C18CD69F22E381AD4F4794B8ED6A2F87186B9C', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_UpdateData.sql", ID: {0f5f2171-aa3f-5085-a64c-7a35ece9898f} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('de9ce8ee-16d3-5400-b81e-621715bcca54' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A156A25070E11DF406101681D346857CDEC024A903362E5114B20B6226AE4180')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_InsertData.sql", ID: {de9ce8ee-16d3-5400-b81e-621715bcca54} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_InsertData.sql" 
GO
-- <Migration ID="de9ce8ee-16d3-5400-b81e-621715bcca54" TransactionHandling="Custom" />
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_Constraints_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Constraints_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE PROCEDURE [DOI].[spRefreshMetadata_User_Constraints_InsertData]

WITH NATIVE_COMPILATION, SCHEMABINDING
AS

/*
    EXEC [DOI].[spRefreshMetadata_User_Constraints_InsertData]
*/

BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)

    DELETE DOI.DefaultConstraints

    INSERT DOI.[DefaultConstraints]	(DatabaseName        , [SchemaName]	, [TableName]		 , [ColumnName]		   , [DefaultDefinition]) VALUES ('PaymentReporting'  ,N'DataMart'	, N'GarnishmentTypeDim'						, N'GarnishmentTypeCode'					, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Bai2BankTransactions'					, N'TransactionSysUtcDt'					, N'(''1900-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'BankTransactions'						, N'GarnishmentId'							, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'BankTransactions'						, N'TenantId'								, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'        , N'BankTransactions'                       , N'IsNetType'                              , N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Company_Tax'							, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Company_Tax'							, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Company_Tax'							, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Company_Tax'							, N'LegacyCompanyStartDate'					, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyTaxAgency'						, N'TaxScheduleGUID'						, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyTaxAgency'						, N'NextTaxScheduleGUID'					, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyTaxAgency'						, N'StartDate'								, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyTaxAgency'						, N'NextTaxScheduleEffectiveDate'			, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyTaxAgency'						, N'NextTaxRateEffectiveDate'				, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyTaxAgency'						, N'InputDate'								, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyTaxAgency'						, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyTaxAgency'						, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyTaxAgency'						, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyTaxAgency'						, N'ReceivedPOA'							, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyTaxAgency_Audit'					, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyTaxAgency_Audit'					, N'Aedt'									, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyProduct'							, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyProduct'							, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CompanyProduct'							, N'Version'								, N'((1))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'CustomerBankAccounts'					, N'AccountActiveDateTime'					, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'DBDefragLog'							, N'RunDateTime'							, N'(getdate())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'EFilingAcknowledgments'					, N'ErrorCount'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'EFilingAcknowledgments'					, N'IsAccepted'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'EFilingAcknowledgments'					, N'IsValid'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'EFilingAcknowledgments'					, N'WarningCount'							, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'GarnishmentLiabilities'					, N'GarnishmentLiabilityStatusKey'			, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'GarnishmentLiabilities'					, N'GarnishmentLiabilityTypeKey'			, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'GarnishmentLiabilities'					, N'PayrollInstanceId'						, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'GarnishmentLiabilities'					, N'TotalCount'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'JournalEntries'							, N'Aedt'									, N'(getdate())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'JournalEntries'							, N'Aesn'									, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'JournalEntries'							, N'ClearedByBank'							, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'JournalEntries'							, N'ClearedByBankUtcDateTime'				, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'JournalEntries'							, N'CreatedUtcDt'							, N'(getdate())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'JournalEntries'							, N'DocumentNumber'							, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'JournalEntries'							, N'GLSegment'								, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'JournalEntries'							, N'ProductCode'							, N'((-1))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'JournalEntries'							, N'TenantAlias'							, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'JournalEntries'							, N'UpdatedUtcDt'							, N'(getdate())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'JournalEntries'							, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Liabilities'							, N'PositiveLiabilityId'					, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Liabilities'							, N'RunNumber'								, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Liabilities'							, N'SourceCreatedByUserId'					, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Liabilities'							, N'SourceCreatedByUserName'				, N'(''system'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Liabilities'							, N'SourceCreatedUtcDt'						, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Liabilities'							, N'SourceModifiedByUserId'					, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Liabilities'							, N'SourceModifiedByUserName'				, N'(''system'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Liabilities'							, N'SourceModifiedUtcDt'					, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'LiabilityCollections'					, N'TimeStamp'								, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'LiabilityCollections'					, N'UserId'									, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'LiabilityCollections'					, N'NettedCollectionId'						, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'LiabilityCollectionComments'			, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'LiabilityCollectionComments'			, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'LiabilityCollectionComments'			, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'LiabilityCollectionConfirmationInfos'	, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'LiabilityCollectionConfirmationInfos'	, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'LiabilityCollectionConfirmationInfos'	, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'NettedCollections'						, N'UnderlyingCollectionIds'				, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'NettedCollections'						, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'NettedCollections'						, N'Status'									, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'NettedCollections'						, N'TenantId'								, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'NettedCollections'						, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'NettedCollections'						, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'NettedCollectionsLiabilityCollections'	, N'CollectionId'							, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'NettedCollectionsLiabilityCollections'	, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'NettedCollectionsLiabilityCollections'	, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'NettedCollectionsLiabilityCollections'	, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayActions'								, N'FromState'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayActions'								, N'IsUndo'									, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayActions'								, N'Portion'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayActions'								, N'ToState'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayGarnishmentActions'					, N'PaymentLiabilityId'						, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayGarnishmentExceptions'				, N'DateCleared'							, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayGarnishmentLiabilities'				, N'ActionId'								, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayGarnishmentLiabilities'				, N'Refunded'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayGarnishmentLiabilities'				, N'Removed'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayGarnishments'						, N'GarnishmentActionReasonKey'				, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayGarnishments'						, N'GarnishmentExceptionList'				, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayGarnishments'						, N'GarnishmentLiabilityId'					, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayGarnishments'						, N'GarnishmentPaymentLiabilityId'			, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayGarnishments'						, N'GarnishmentRecollectLiabilityId'		, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayGarnishments'						, N'GarnishmentRefundLiabilityId'			, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayGarnishments'						, N'HasBeenPaid'							, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayLiabilities'							, N'ActionId'								, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayLiabilities'							, N'IsActive'								, N'((1))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayLiabilities'							, N'IsRefund'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayrollInstances'						, N'EndProcessAfterCloseUtcDt'				, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayrollInstances'						, N'PayrollTypeKey'							, N'(''0'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayrollInstances'						, N'StartProcessAfterCloseUtcDt'			, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Pays'									, N'PayUtcDate'								, N'(''1900-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayTaxes'								, N'DuplicatedLineNumber'					, N'((1))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'PayTaxes'								, N'PayUtcDate'								, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportFileInformation'					, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportFileInformation'					, N'FileLength'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportFileInformation'					, N'ReportOutputType'						, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportFileInformation'					, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportFileInformation'					, N'UserFileName'							, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportFileInformation'					, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportFileInformation'					, N'WasGenerated'							, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportObjectStoreInfo'					, N'ContainerName'							, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportObjectStoreInfo'					, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportObjectStoreInfo'					, N'ExpirationUtcDateTime'					, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportObjectStoreInfo'					, N'IsCompressed'							, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportObjectStoreInfo'					, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportObjectStoreInfo'					, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportParameters'						, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportParameters'						, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportParameters'						, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportRequests'							, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportRequests'							, N'ReportRequestorType'					, N'((1))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportRequests'							, N'Status'									, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportRequests'							, N'TenantId'								, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportRequests'							, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportRequests'							, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportStatistics'						, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportStatistics'						, N'FileUploadTime'							, N'(''00:00:00.0000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportStatistics'						, N'QueryTime'								, N'(''00:00:00.0000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportStatistics'						, N'RenderTime'								, N'(''00:00:00.0000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportStatistics'						, N'RowCount'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportStatistics'						, N'TotalTime'								, N'(''00:00:00.0000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportStatistics'						, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'ReportStatistics'						, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'        , N'ReportStatistics'						, N'ColumnInfoTime'							, N'(''00:00:00.0000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'        , N'ReportStatistics'						, N'DataTableLoadTime'						, N'(''00:00:00.0000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'        , N'ReportStatistics'						, N'ExecuteReaderTime'						, N'(''00:00:00.0000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgency'								, N'Aedt'									, N'(getdate())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgency'								, N'Aesn'									, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgency'								, N'ReportingSortId'						, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgency_Audit'	  					, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgency_Audit'	  					, N'Aedt'									, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgencyTransactionAmounts'			, N'IsTax'									, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgencyTransactionAmounts'			, N'PayeeId'								, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgencyTransactionAmounts'			, N'TaxCode'								, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgencyTransactionAmounts'			, N'TaxCodeUltiPro'							, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgencyTransactionAmounts'			, N'TaxId'									, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgencyTransactions'					, N'PaymentType'							, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgencyTransactions'					, N'FileRequestId'							, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgencyTransactions'					, N'TransactionInitiatedUtcDateTime'		, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAgencyTransactions'					, N'WireId'									, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxAmounts'								, N'PayUtcDate'								, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxCodes'								, N'ActiveStatus'							, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxCodes'								, N'AuthorityLevel'							, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxCodes'								, N'IsTax'									, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxCodes'								, N'LocalCode'								, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxCodes'								, N'SortId'									, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxCodes'								, N'StateCode'								, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxCodes'								, N'SupplementalCode'						, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxCodes'								, N'TaxAgencyCode'							, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxCodes'								, N'TaxAgencyId'							, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxCodes'								, N'TaxAgencyParentCode'					, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxCodes'								, N'TaxGUID'								, N'(CONVERT([uniqueidentifier],CONVERT([binary]INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES (0))))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxCodes'								, N'UltiproTaxCodeList'						, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxLiabilities'							, N'CollectionId'							, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxLiabilities'							, N'TaxLiabilityOriginTypeKey'				, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxPaymentCredits'						, N'CheckDate'								, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxPayrolls'							, N'PayrollId'								, N'(''00000000-0000-0000-0000-000000000000'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxPayrolls'							, N'PayrollType'							, N'(''REGULAR'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxPayrolls'							, N'PayUtcDate'								, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxPayrolls'							, N'PostPayrollGUID'						, N'(CONVERT([uniqueidentifier],CONVERT([binary]INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES (0))))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxPayrolls'							, N'PostPayrollId'							, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxSchedules'							, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxSchedules'							, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TaxSchedules'							, N'Version'								, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TenantProduct'							, N'CreatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TenantProduct'							, N'UpdatedUtcDt'							, N'(sysdatetime())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'TenantProduct'							, N'Version'								, N'((1))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Tenants'								, N'CustomerBankAccountId'					, N'(CONVERT([uniqueidentifier],CONVERT([binary]INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES (0))))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Tenants'								, N'CustomerGarnishmentsBankAccountId'		, N'(CONVERT([uniqueidentifier],CONVERT([binary]INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES (0))))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Tenants'								, N'CustomerTaxBankAccountId'				, N'(CONVERT([uniqueidentifier],CONVERT([binary]INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES (0))))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Tenants'								, N'DcEnvironmentName'						, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Tenants'								, N'HasNewHireReporting'					, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Tenants'								, N'MarketType'								, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Tenants'								, N'NetPayDraftDays'						, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Tenants'								, N'PodId'									, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'Tenants'								, N'SiteDbServerName'						, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'UltiProTaxCodeMapping'					, N'Aedt'									, N'(''0001-01-01'')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'UltiProTaxCodeMapping'					, N'Aesn'									, N'((0))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'UltiProTaxCodeMapping'					, N'CreatedUtcDt'							, N'(getdate())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'UltiProTaxCodeMapping'					, N'UpdatedUtcDt'							, N'(getdate())')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'UltiProTaxCodeMapping'					, N'Version'								, N'((1))')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'YEProcessing'							, N'ClientId'								, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'YEProcessingFiles'						, N'Agency'									, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'YEProcessingFiles'						, N'FileName'								, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'YEProcessingFiles'						, N'UltiProAgency'							, N'('''')')
    INSERT DOI.[DefaultConstraints] (DatabaseName        , [SchemaName] , [TableName]        , [ColumnName]        , [DefaultDefinition]) VALUES ('PaymentReporting' ,N'dbo'		, N'YEProcessingFiles'						, N'YEIngestionTypeKey'						, N'((0))')
END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_InsertData.sql" 


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_InsertData.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('de9ce8ee-16d3-5400-b81e-621715bcca54' AS UNIQUEIDENTIFIER), 'A156A25070E11DF406101681D346857CDEC024A903362E5114B20B6226AE4180', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_InsertData.sql", ID: {de9ce8ee-16d3-5400-b81e-621715bcca54} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7703d514-09ff-5239-92ce-5564ce421d2e' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B75ED85F56D310B7B23CCAEEBC14072A4579FFBCE242BBF7E3E72D726D7402FD')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_InsertData.sql", ID: {7703d514-09ff-5239-92ce-5564ce421d2e} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_InsertData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_DOISettings_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_DOISettings_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_DOISettings_InsertData]
AS

DELETE DOI.DOISettings

INSERT INTO DOI.DOISettings 
         ( DatabaseName         , SettingName                                      , SettingValue )
VALUES   ( 'PaymentReporting'   , 'LargeTableCutoffValue'                          , '1000')
        ,( 'PaymentReporting'   , 'ReindexingMilitaryTimeToStopJob'                , '10:00:00.0000000') --this is in UTC
        ,( 'PaymentReporting'   , 'DBFileInitialSizeMB'                            , '100') 
        ,( 'PaymentReporting'   , 'DBFileGrowthMB'                                 , '10') 
        ,( 'PaymentReporting'   , 'UTEBCP Filepath'                                , 'c:\tmp\user-management\utebcp\')
        ,( 'PaymentReporting'   , 'DefaultStatsSampleSizePct'                      , '20') 
        ,( 'PaymentReporting'   , 'FreeSpaceCheckerTestMultiplierForDataFiles'     , '1') 
        ,( 'PaymentReporting'   , 'FreeSpaceCheckerTestMultiplierForLogFiles'      , '1') 
        ,( 'PaymentReporting'   , 'FreeSpaceCheckerTestMultiplierForTempDBFiles'   , '1') 
        ,( 'PaymentReporting'   , 'MinNumPagesForIndexDefrag'                      , '500') 
        ,( 'PaymentReporting'   , 'FreeSpaceCheckerPercentBuffer'                  , '10') 

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_InsertData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_InsertData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('7703d514-09ff-5239-92ce-5564ce421d2e' AS UNIQUEIDENTIFIER), 'B75ED85F56D310B7B23CCAEEBC14072A4579FFBCE242BBF7E3E72D726D7402FD', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_InsertData.sql", ID: {7703d514-09ff-5239-92ce-5564ce421d2e} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('26581667-3fb2-5ff4-9233-b4dec5ee8a9a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AC3D4591BBFDE7F971EAF202F89619CF73614DEB143CA4FA4D345CB830943A8F')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_3_DOISettings.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_3_DOISettings.sql", ID: {26581667-3fb2-5ff4-9233-b4dec5ee8a9a} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_3_DOISettings.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_3_DOISettings]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_3_DOISettings];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_3_DOISettings]
AS

--EXEC DOI.spRefreshMetadata_User_DOISettings_CreateTables
EXEC DOI.spRefreshMetadata_User_DOISettings_InsertData
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_3_DOISettings.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_3_DOISettings.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('26581667-3fb2-5ff4-9233-b4dec5ee8a9a' AS UNIQUEIDENTIFIER), 'AC3D4591BBFDE7F971EAF202F89619CF73614DEB143CA4FA4D345CB830943A8F', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_3_DOISettings.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_3_DOISettings.sql", ID: {26581667-3fb2-5ff4-9233-b4dec5ee8a9a} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('336888ca-dd13-5c22-a91b-fb4a45c479ad' AS UNIQUEIDENTIFIER) AND [script_checksum] = '5885A288DC156B5A4F9D7E1AA7D52840F86271D45C18C4BD7AD5767FB59146E9')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnNumberTable.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnNumberTable.sql", ID: {336888ca-dd13-5c22-a91b-fb4a45c479ad} *****';

GO


-------------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnNumberTable.sql" ---------------
GO
IF OBJECT_ID('[DOI].[fnNumberTable]') IS NOT NULL
	DROP FUNCTION [DOI].[fnNumberTable];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   FUNCTION [DOI].[fnNumberTable](
	@NumRows INT)

RETURNS TABLE

/*
	SELECT * FROM DOI.fnNumberTable(10)
*/

AS
RETURN
(
	SELECT TOP (@NumRows) ROW_NUMBER() OVER(ORDER BY object_id) AS RowNum
	FROM SYS.OBJECTS
)
GO

GO
--------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnNumberTable.sql" ----------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnNumberTable.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('336888ca-dd13-5c22-a91b-fb4a45c479ad' AS UNIQUEIDENTIFIER), '5885A288DC156B5A4F9D7E1AA7D52840F86271D45C18C4BD7AD5767FB59146E9', 'Programmable Objects\Functions\DOI.fnNumberTable.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnNumberTable.sql", ID: {336888ca-dd13-5c22-a91b-fb4a45c479ad} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('01b7350c-82ec-5159-86cf-e4fefa62d9b6' AS UNIQUEIDENTIFIER) AND [script_checksum] = '049C192B988B33069E052D61A724EF1DD8F6F50DB9D4C75884CEA416087ADBF9')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwPartitionFunctionPartitions.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwPartitionFunctionPartitions.sql", ID: {01b7350c-82ec-5159-86cf-e4fefa62d9b6} *****';

GO


-------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwPartitionFunctionPartitions.sql" ---------
GO
IF OBJECT_ID('[DOI].[vwPartitionFunctionPartitions]') IS NOT NULL
	DROP VIEW [DOI].[vwPartitionFunctionPartitions];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO






CREATE   VIEW [DOI].[vwPartitionFunctionPartitions]
AS

/*
	select addfilesql from DOI.vwPartitionFunctionPartitions where partitionfunctionname = 'PfMonthlyUnitTest'
*/

SELECT  *,         
        CASE 
			WHEN DateDiffs IN (365, 366) 
			THEN CAST(YEAR(CONVERT(DATE, BoundaryValue, 112)) AS VARCHAR(4))-- 'Yearly' 
			WHEN DateDiffs IN (28, 29, 30, 31) 
			THEN CAST(YEAR(CONVERT(DATE, BoundaryValue, 112)) AS VARCHAR(4))
					+ CASE WHEN LEN(CAST(MONTH(CONVERT(DATE, BoundaryValue, 112)) AS VARCHAR(2))) < 2 THEN '0' ELSE '' END 
					+ CAST(MONTH(CONVERT(DATE, BoundaryValue, 112)) AS VARCHAR(4)) --'Monthly' 
			WHEN DateDiffs = 1
			THEN 'Daily'
			WHEN BoundaryValue = '0001-01-01'
			THEN 'Historical' 
			WHEN NextBoundaryValue = '9999-12-31'
			THEN 'LastPartition'
			ELSE ''
		END + '_PartitionPrep' AS PrepTableNameSuffix
FROM (  SELECT	PFI.DatabaseName,
				PFI.PartitionFunctionName,
                PFI.PartitionSchemeName,
                PFI.BoundaryInterval,
                PFI.UsesSlidingWindow,
                PFI.SlidingWindowSize,
                PFI.IsDeprecated,
                NUF.NextUsedFileGroupName,
                PFI.BoundaryValue,
                CAST(LEAD(BoundaryValue, 1, '9999-12-31') OVER (PARTITION BY PartitionFunctionName ORDER BY BoundaryValue) AS DATE) AS NextBoundaryValue,
                DATEDIFF(DAY, PFI.BoundaryValue, CAST(LEAD(BoundaryValue, 1, '9999-12-31') OVER (PARTITION BY PartitionFunctionName ORDER BY BoundaryValue) AS DATE)) AS DateDiffs,
                ROW_NUMBER() OVER(PARTITION BY PartitionFunctionName ORDER BY BoundaryValue) AS PartitionNumber,
		        DBFilePath.DatabaseName + '_' + PFI.Suffix AS FileGroupName,
                PFI.IsSlidingWindowActivePartition,
                PFI.IncludeInPartitionFunction,
                PFI.IncludeInPartitionScheme,
		        CASE  PFI.IncludeInPartitionFunction
			        WHEN 0
			        THEN 0
			        ELSE CASE WHEN ISNULL(ExistingPartitions.DoesPartitionExist, 0) = 0 THEN 1 ELSE 0 END
		        END AS IsPartitionMissing,
'IF NOT EXISTS(SELECT ''True'' FROM ' + DBFilePath.DatabaseName + '.sys.filegroups WHERE NAME = ''' + DBFilePath.DatabaseName + '_' + PFI.Suffix + ''')
BEGIN
	ALTER DATABASE ' + DBFilePath.DatabaseName + ' ADD FILEGROUP [' + DBFilePath.DatabaseName + '_' + PFI.Suffix + ']
END' AS AddFileGroupSQL,
'IF NOT EXISTS(SELECT * FROM ' + DBFilePath.DatabaseName + '.sys.database_files WHERE name = ''' + DBFilePath.DatabaseName + '_' + PFI.Suffix + ''')
BEGIN
	ALTER DATABASE ' + DBFilePath.DatabaseName + '
		ADD FILE 
		(
    		NAME = ' + DBFilePath.DatabaseName + '_' + PFI.Suffix + ', 
    		FILENAME = ''' + DBFilePath.DBFilePath + '' + DBFilePath.DatabaseName + '_' +  PFI.Suffix + '.ndf'', 
			SIZE = ' + CAST(DBFilePath.InitialSizeMB AS NVARCHAR(20)) + ' MB, 
			MAXSIZE = UNLIMITED, 
			FILEGROWTH = ' + CAST(DBFilePath.FileGrowth AS NVARCHAR(20)) + '
		) 
			TO FILEGROUP ' + DBFilePath.DatabaseName + '_' + PFI.Suffix + '
END' AS AddFileSQL,
'USE ' + DBFilePath.DatabaseName + '
BEGIN TRY
	BEGIN TRAN
		ALTER PARTITION SCHEME ' + PFI.PartitionSchemeName + ' NEXT USED [' + DBFilePath.DatabaseName + '_' + PFI.Suffix + ']

		ALTER PARTITION FUNCTION ' + PFI.PartitionFunctionName + ' () SPLIT RANGE (N''' + CAST(PFI.BoundaryValue AS NVARCHAR(20)) + ''')
	COMMIT TRAN
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0 ROLLBACK TRAN;
	THROW;
END CATCH' AS PartitionFunctionSplitSQL,
'USE ' + DBFilePath.DatabaseName + '
		ALTER PARTITION SCHEME ' + PFI.PartitionSchemeName + ' NEXT USED [' + DBFilePath.DatabaseName + '_' + PFI.Suffix + ']' 
AS SetFilegroupToNextUsedSQL
        --SELECT count(*)
        FROM (  SELECT	TOP (1234567890987) *
                FROM (SELECT DISTINCT
		                PFM.*,
		                CASE  
			                WHEN BoundaryInterval = 'Monthly' AND (DATEADD(MONTH, RowNum-1, InitialDate) > PFM.LastBoundaryDate) 
			                THEN PFM.LastBoundaryDate
			                WHEN BoundaryInterval = 'Monthly' AND (DATEADD(MONTH, RowNum-1, InitialDate) <= PFM.LastBoundaryDate) 
			                THEN DATEADD(MONTH, RowNum-1, InitialDate)
			                WHEN BoundaryInterval = 'Yearly' AND (DATEADD(YEAR, RowNum-1, InitialDate) > PFM.LastBoundaryDate)
			                THEN PFM.LastBoundaryDate
			                WHEN BoundaryInterval = 'Yearly' AND (DATEADD(YEAR, RowNum-1, InitialDate) <= PFM.LastBoundaryDate)
			                THEN DATEADD(YEAR, RowNum-1, InitialDate)
		                END AS BoundaryValue,
		                CASE 
			                WHEN BoundaryInterval = 'Monthly' AND (DATEADD(MONTH, RowNum-1, InitialDate) > PFM.LastBoundaryDate) 
			                THEN 'Active'
			                WHEN BoundaryInterval = 'Monthly' AND (DATEADD(MONTH, RowNum-1, InitialDate) <= PFM.LastBoundaryDate) 
			                THEN LEFT(CONVERT(VARCHAR(20), DATEADD(MONTH, RowNum-1, InitialDate), 112), NumOfCharsInSuffix) 
			                WHEN BoundaryInterval = 'Yearly'  AND (DATEADD(YEAR, RowNum-1, InitialDate) > PFM.LastBoundaryDate)
			                THEN 'Active'
			                WHEN BoundaryInterval = 'Yearly'  AND (DATEADD(YEAR, RowNum-1, InitialDate) <= PFM.LastBoundaryDate)
			                THEN LEFT(CONVERT(VARCHAR(20), DATEADD(YEAR, RowNum-1, InitialDate), 112), NumOfCharsInSuffix) 
		                END AS Suffix,
		                CASE 
			                WHEN (PFM.BoundaryInterval = 'Yearly' AND PFM.UsesSlidingWindow = 1 AND (DATEADD(YEAR, RowNum-1, InitialDate) > PFM.LastBoundaryDate))
					                OR (PFM.BoundaryInterval = 'Monthly' AND PFM.UsesSlidingWindow = 1 AND (DATEADD(MONTH, RowNum-1, InitialDate) > PFM.LastBoundaryDate))
			                THEN 1
			                ELSE 0
		                END AS IsSlidingWindowActivePartition,
		                1 AS IncludeInPartitionFunction,
		                1 AS IncludeInPartitionScheme
                --select count(*)
                FROM DOI.PartitionFunctions PFM
	                CROSS APPLY DOI.fnNumberTable(ISNULL(NumOfTotalPartitionFunctionIntervals, 0)) PSN
                UNION ALL
                SELECT	PFM.*,
		                MinInterval.MinValueOfDataType AS BoundaryValue,
		                'Historical' AS Suffix,
		                0 AS IsSlidingWindowActivePartition,
		                0 AS IncludeInPartitionFunction,
		                1 AS IncludeInPartitionScheme
                FROM DOI.PartitionFunctions PFM
	                CROSS APPLY (   SELECT PFM2.MinValueOfDataType 
                                    FROM DOI.PartitionFunctions PFM2 
                                    WHERE PFM2.PartitionFunctionName = PFM.PartitionFunctionName) MinInterval)V
                ORDER BY PartitionFunctionName, BoundaryValue)PFI
	        CROSS APPLY (	SELECT	d.database_id, 
                                    d.name AS DatabaseName, 
                                    (df.size*8)/1024 AS InitialSizeMB, 
                                    CASE 
                                        WHEN df.is_percent_growth = 1
                                        THEN CAST(df.growth AS VARCHAR(50)) + ' PERCENT'
                                        ELSE CAST((df.growth*8)/1024 AS VARCHAR(50)) + ' MB'
                                    END AS FileGrowth,
                                    SUBSTRING(physical_name, 1, CHARINDEX(d.name + N'.mdf', LOWER(physical_name)) - 1) AS DBFilePath
					        FROM DOI.SysDatabaseFiles df
                                INNER JOIN DOI.SysDatabases d ON d.database_id = df.database_id
					        WHERE df.physical_name LIKE '%.mdf'
                                AND d.name = PFI.DatabaseName) DBFilePath
	        OUTER APPLY (	SELECT 1 AS DoesPartitionExist, pf.function_id, ps.data_space_id, ps.name, PRV.boundary_id
					        FROM DOI.SysPartitionFunctions pf
						        INNER JOIN DOI.SysPartitionRangeValues prv ON prv.function_id = pf.function_id
                                INNER JOIN DOI.SysPartitionSchemes ps ON ps.function_id = pf.function_id
					        WHERE pf.name = PFI.PartitionFunctionName
						        AND CAST(prv.value AS DATE) = PFI.BoundaryValue) ExistingPartitions
	        OUTER APPLY (	SELECT *
					        FROM (	SELECT	FG.Name AS NextUsedFileGroupName,
									        prv.value, 
									        ExistingPartitions.Name,
									        ExistingPartitions.function_id,
									        RANK() OVER (PARTITION BY ExistingPartitions.name ORDER BY dds.destination_Id) AS dest_rank
							        FROM DOI.SysDestinationDataSpaces AS DDS 
								        INNER JOIN DOI.SysFilegroups AS FG ON FG.data_space_id = DDS.data_space_ID 
								        LEFT JOIN DOI.SysPartitionRangeValues AS PRV ON PRV.Boundary_ID = DDS.destination_id 
									        AND prv.function_id=ExistingPartitions.function_id 
							        WHERE DDS.partition_scheme_id = ExistingPartitions.data_space_id
								        AND prv.Value IS NULL) x
					        WHERE x.dest_rank = 2) AS NUF
    )X





GO

GO
--------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwPartitionFunctionPartitions.sql" ----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwPartitionFunctionPartitions.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('01b7350c-82ec-5159-86cf-e4fefa62d9b6' AS UNIQUEIDENTIFIER), '049C192B988B33069E052D61A724EF1DD8F6F50DB9D4C75884CEA416087ADBF9', 'Programmable Objects\Views\DOI.vwPartitionFunctionPartitions.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwPartitionFunctionPartitions.sql", ID: {01b7350c-82ec-5159-86cf-e4fefa62d9b6} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cb5859fe-37fe-5c6e-b873-16a0b9304ec1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '79B631416DFC48F3E1B8F249CA572BFD109FB04D05EFDDDF41784D348597C09E')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwTables_PrepTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwTables_PrepTables.sql", ID: {cb5859fe-37fe-5c6e-b873-16a0b9304ec1} *****';

GO


------------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwTables_PrepTables.sql" --------------
GO
IF OBJECT_ID('[DOI].[vwTables_PrepTables]') IS NOT NULL
	DROP VIEW [DOI].[vwTables_PrepTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO




















CREATE     VIEW [DOI].[vwTables_PrepTables]

/*
	select top 10 CreateViewForBCPSQL
	from DOI.vwTables_PrepTables
    where tablename = 'BAI2BANKTRANSACTIONS'
	order by tablename, partitionnumber

    --to get the PrepTableFilegroup:
SELECT t.TableName, t.Storage_Desired, ds_desired.name, DDS_Desired.data_space_id, UFG_Desired.name
FROM DOI.Tables T
    INNER JOIN DOI.SysDataSpaces DS_Desired ON T.Storage_Desired = DS_Desired.name
    INNER JOIN DOI.SysDestinationDataSpaces DDS_Desired ON DDS_Desired.database_id = DS_Desired.database_id
        AND DDS_Desired.partition_scheme_id = DS_Desired.data_space_id
    INNER JOIN DOI.SysDataSpaces UFG_Desired ON DDS_Desired.database_id = UFG_Desired.database_id
        AND DDS_Desired.data_space_id = UFG_Desired.data_space_id
 */ 
AS

SELECT  AllTables.DatabaseName,
        AllTables.SchemaName,
        AllTables.TableName,
        AllTables.DateDiffs,
        AllTables.PrepTableName,
		AllTables.NewPartitionedPrepTableName,
        AllTables.PartitionFunctionName,
        AllTables.BoundaryValue, 
        AllTables.NextBoundaryValue,
        AllTables.PartitionColumn,
        AllTables.IsNewPartitionedPrepTable,
        AllTables.PKColumnList,
        AllTables.PKColumnListJoinClause,
        AllTables.UpdateColumnList,
        Storage_Desired,
        StorageType_Desired,
        AllTables.PrepTableFilegroup,
        PartitionNumber,
        '
IF OBJECT_ID(''' + AllTables.DatabaseName + '.' + AllTables.SchemaName + '.' + AllTables.PrepTableName + ''') IS NOT NULL
BEGIN
	DROP TABLE ' + AllTables.DatabaseName + '.' + AllTables.SchemaName + '.' + AllTables.PrepTableName + '
END

IF OBJECT_ID(''' + AllTables.DatabaseName + '.' + AllTables.SchemaName + '.' + AllTables.PrepTableName + ''') IS NULL
BEGIN
	CREATE TABLE ' + AllTables.SchemaName + '.' + AllTables.PrepTableName + ' (' + CHAR(13) + CHAR(10) + AllTables.ColumnListWithTypes + ') ON ' + CASE WHEN AllTables.IsNewPartitionedPrepTable = 1 THEN '[' + AllTables.Storage_Desired + '](' + AllTables.PartitionColumn + ')' ELSE '[' + AllTables.PrepTableFilegroup + ']' END + '
END' AS CreatePrepTableSQL,
--CREATE VIEW FOR BCP QUERY BECAUSE SQL STRING IS TOO LONG FOR XP_CMDSHELL.
CASE WHEN AllTables.IsNewPartitionedPrepTable = 1 THEN '' ELSE 
'CREATE OR ALTER VIEW dbo.vwCurrentBCPQuery AS 
SELECT * 
FROM ' + AllTables.DatabaseName + '.' + AllTables.SchemaName + '.' + AllTables.TableName + ' T 
WHERE ' + CASE WHEN AllTables.BoundaryValue = '0001-01-01' THEN '' ELSE AllTables.PartitionColumn + ' >= ''' + CONVERT(VARCHAR(30), AllTables.BoundaryValue, 120) + '''' + ' AND ' END + AllTables.PartitionColumn + ' < ''' + CONVERT(VARCHAR(50), ISNULL(AllTables.NextBoundaryValue, '9999-12-31'), 120) + ''' AND NOT EXISTS (SELECT 1 FROM ' + AllTables.SchemaName + '.' + AllTables.PrepTableName + ' PT WHERE ' + AllTables.PKColumnListJoinClause + ')'
END AS CreateViewForBCPSQL,
CASE WHEN AllTables.IsNewPartitionedPrepTable = 1 THEN '' ELSE 
'
IF NOT EXISTS(  SELECT ''True''
                FROM ' + AllTables.DatabaseName + '.sys.triggers tr
                    INNER JOIN ' + AllTables.DatabaseName + '.sys.tables t ON tr.parent_id = t.object_id
                WHERE tr.name = ''tr' + AllTables.TableName + '_DataSynch'' 
                    AND t.name = ''' + AllTables.TableName + ''')
BEGIN
	RAISERROR (''Data Synch Trigger has not been created!!'', 16, 1)
END
ELSE
BEGIN
	DECLARE @T TABLE (XpCmdShellOutput VARCHAR(1000))

    DECLARE @bcpString VARCHAR(8000) = ''' + SS.SettingValue + 'utebcp.exe -queryout="SELECT * FROM dbo.vwCurrentBCPQuery" -destinationtable="' + AllTables.SchemaName + '.' + AllTables.PrepTableName + '" -database=' + AllTables.DatabaseName + ' -batch=1000000''
	
    INSERT INTO @T ( XpCmdShellOutput )
	EXEC xp_cmdshell @bcpString

	IF EXISTS(SELECT ''True'' FROM @T where TRY_CAST(XpCmdShellOutput AS INT) IS NULL)
	BEGIN
		DECLARE @ErrorMessage VARCHAR(1000) = ''''

		SELECT @ErrorMessage += XpCmdShellOutput + CHAR(13) + CHAR(10) FROM @T WHERE XpCmdShellOutput IS NOT NULL 

		RAISERROR(@ErrorMessage, 16, 1)
	END
	ELSE
	BEGIN
       SELECT TOP 1 @RowCountOUT = CASE WHEN TRY_CAST(XpCmdShellOutput AS INT) IS NOT NULL THEN CAST(XpCmdShellOutput AS INT) ELSE 0 END
	   FROM @T
     END
END'
END AS BCPSQL,
CASE WHEN AllTables.IsNewPartitionedPrepTable = 1 THEN '' ELSE 
'
IF OBJECT_ID(''' + AllTables.DatabaseName + '.' + AllTables.SchemaName + '.Chk_' + AllTables.PrepTableName + ''') IS NULL
BEGIN
	ALTER TABLE ' + AllTables.SchemaName + '.' + AllTables.PrepTableName + ' WITH CHECK ADD
		CONSTRAINT Chk_' + AllTables.PrepTableName + '
			CHECK (' + AllTables.PartitionColumn + ' IS NOT NULL 
					AND ' + AllTables.PartitionColumn + ' >= ''' + CONVERT(VARCHAR(30), AllTables.BoundaryValue , 120) + '''  
					AND ' + AllTables.PartitionColumn + ' < ''' + CONVERT(VARCHAR(50), ISNULL(AllTables.NextBoundaryValue, '9999-12-31'), 120) + ''')
END' END AS CheckConstraintSQL,
'
CREATE OR ALTER FUNCTION [dbo].[fnActualIndexesForTable](
	@SchemaName SYSNAME,
	@TableName SYSNAME,
	@NameStringReplace SYSNAME = NULL,
	@PartitionColumnToReplace SYSNAME = NULL)
RETURNS TABLE
AS RETURN
(

/*
SELECT * 
FROM DOI.fnActualIndexStructuresForTable(''' + AllTables.SchemaName + ''',''' + AllTables.TableName + ''', ''_NewPartitionedTableFromPrep'', ''' + AllTables.PartitionColumn + ''')

SELECT *
FROM DOI.fnActualIndexStructuresForTable(''' + AllTables.SchemaName + ''',''' + AllTables.TableName + ''', ''_NewPartitionedTableFromPrep'', ''' + AllTables.PartitionColumn + ''')
*/
SELECT 
    d.name AS DatabaseName
    ,s.name AS SchemaName
    ,REPLACE(t.name, @NameStringReplace, SPACE(0)) AS TableName
	,REPLACE(i.name, @NameStringReplace, SPACE(0)) AS IndexName
	--,i.type
	,i.type_desc
	,i.is_unique
	,i.ignore_dup_key
	,i.is_primary_key
	,i.is_unique_constraint
	,i.is_disabled
	,i.is_hypothetical
	,i.has_filter
	,i.filter_definition
    ,i.key_column_list AS IndexKeys
    ,i.included_column_list AS IncludedColumns 
FROM sys.indexes i
	INNER JOIN sys.tables t ON t.object_id = i.object_id
	INNER JOIN sys.schemas s ON s.schema_id = t.schema_id
WHERE s.name = @SchemaName
	AND t.name = @TableName)
' AS FinalRepartitioningValidation_CreateActualIndexesForTableFunctionSQL,
'
CREATE OR ALTER FUNCTION [dbo].[fnActualConstraintsForTable](
	@SchemaName SYSNAME,
	@TableName SYSNAME,
	@NameStringReplace SYSNAME = NULL)
RETURNS TABLE
AS RETURN
(

/*
SELECT * 
FROM DOI.fnActualConstraintsForTable((''' + AllTables.SchemaName + ''',''' + AllTables.TableName + ''', ''_NewPartitionedTableFromPrep'', '' '')
--order by ConstraintName	
except
SELECT *
FROM DOI.fnActualConstraintsForTable((''' + AllTables.SchemaName + ''',''' + AllTables.TableName + ''', ''_NewPartitionedTableFromPrep'', ''_OLD'')
order by ConstraintName	
*/

SELECT	REPLACE(cc.name, @NameStringReplace, SPACE(0)) AS ConstraintName, 
		cc.type_desc, 
		c.name AS ColumnName, 
		cc.definition
FROM DOI.SysCheckConstraints cc
	INNER JOIN sys.tables t ON t.object_id = i.object_id
	INNER JOIN sys.columns c ON c.object_id = t.object_id
		AND c.column_id = cc.parent_column_id
	INNER JOIN sys.schemas s ON s.schema_id = t.schema_id
WHERE s.name = @SchemaName
	AND t.name = @TableName
UNION ALL
SELECT	REPLACE(dc.name, @NameStringReplace, SPACE(0)) AS ConstraintName, 
		dc.type_desc, 
		c.name AS ColumnName, 
		dc.definition
FROM DOI.SysDefaultConstraints dc
	INNER JOIN sys.tables t ON t.object_id = i.object_id
	INNER JOIN sys.columns c ON c.object_id = t.object_id
		AND c.column_id = cc.parent_column_id
	INNER JOIN sys.schemas s ON s.schema_id = t.schema_id
WHERE s.name = @SchemaName
	AND t.name = @TableName)
' AS FinalRepartitioningValidation_CreateActualConstraintsForTableFunctionSQL,
'
CREATE OR ALTER FUNCTION [dbo].[fnCompareTableStructuresDetails](
    @DatabaseName SYSNAME,
	@SchemaName1 SYSNAME,
	@TableName1 SYSNAME,
	@SchemaName2 SYSNAME,
	@TableName2 SYSNAME,
	@DiffBetTableNames SYSNAME,
	@PartitionColumnToReplaceInPK SYSNAME)
RETURNS TABLE

AS

/*
    select * from dbo.fnCompareTableStructuresDetails(
    ''PaymentReporting'',
    ''dbo'',
    ''Bai2BankTransactions'',
    ''dbo'',
    ''Bai2BankTransactions_NewPartitionedTableFromPrep'',
    ''_NewPartitionedTableFromPrep'',
    ''TransactionSysUtcDt'')
*/
RETURN (
        SELECT *
        FROM (  SELECT  AT.DatabaseName,
                        ISNULL(AT.TableName, NPT.TableName) AS TableName,
                        ISNULL(AT.IndexName, NPT.IndexName) AS IndexName,
                        CASE 
                            WHEN ISNULL(AT.type_desc, '''') <> ISNULL(NPT.type_desc, '''') 
                            THEN ''TypeDiff:  Actual Table:  '' + ISNULL(AT.type_desc, '''') + ''// New Table:  '' + ISNULL(NPT.type_desc, '''') 
                            ELSE ''''
                        END + 
                        CASE 
                            WHEN ISNULL(CAST(AT.is_unique AS CHAR(1)), '''') <> ISNULL(CAST(NPT.is_unique AS CHAR(1)), '''') 
                            THEN ''IsUniqueDiff:  Actual Table:  '' + ISNULL(CAST(AT.is_unique AS CHAR(1)), '''') + ''// New Table:  '' + ISNULL(CAST(NPT.is_unique AS CHAR(1)), '''') 
                            ELSE ''''
                        END +
                        CASE 
                            WHEN ISNULL(CAST(AT.ignore_dup_key AS CHAR(1)), '''') <> ISNULL(CAST(NPT.ignore_dup_key AS CHAR(1)), '''') 
                            THEN ''OptionIgnoreDupKeyDiff:  Actual Table:  '' + ISNULL(CAST(AT.ignore_dup_key AS CHAR(1)), '''') + ''// New Table:  '' + ISNULL(CAST(NPT.ignore_dup_key AS CHAR(1)), '''') 
                            ELSE ''''
                        END +
                        CASE 
                            WHEN ISNULL(CAST(AT.is_primary_key AS CHAR(1)), '''') <> ISNULL(CAST(NPT.is_primary_key AS CHAR(1)), '''') 
                            THEN ''IsPrimaryKeyDiff:  Actual Table:  '' + ISNULL(CAST(AT.is_primary_key AS CHAR(1)), '''') + ''// New Table:  '' + ISNULL(CAST(NPT.is_primary_key AS CHAR(1)), '''') 
                            ELSE ''''
                        END +
                        CASE 
                            WHEN ISNULL(CAST(AT.is_unique_constraint AS CHAR(1)), '''') <> ISNULL(CAST(NPT.is_unique_constraint AS CHAR(1)), '''') 
                            THEN ''IsUniqueConstraintDiff:  Actual Table:  '' + ISNULL(CAST(AT.is_unique_constraint AS CHAR(1)), '''') + ''// New Table:  '' + ISNULL(CAST(NPT.is_unique_constraint AS CHAR(1)), '''') 
                            ELSE ''''
                        END +
                        CASE 
                            WHEN ISNULL(CAST(AT.is_disabled AS CHAR(1)), '''') <> ISNULL(CAST(NPT.is_disabled AS CHAR(1)), '''') 
                            THEN ''IsDisableDOIff:  Actual Table:  '' + ISNULL(CAST(AT.is_disabled AS CHAR(1)), '''') + ''// New Table:  '' + ISNULL(CAST(NPT.is_disabled AS CHAR(1)), '''') 
                            ELSE ''''
                        END +
                        CASE 
                            WHEN ISNULL(CAST(AT.is_hypothetical AS CHAR(1)), '''') <> ISNULL(CAST(NPT.is_hypothetical AS CHAR(1)), '''') 
                            THEN ''IsHypotheticalDiff:  Actual Table:  '' + ISNULL(CAST(AT.is_hypothetical AS CHAR(1)), '''') + ''// New Table:  '' + ISNULL(CAST(NPT.is_hypothetical AS CHAR(1)), '''') 
                            ELSE ''''
                        END +
                        CASE 
                            WHEN ISNULL(CAST(AT.has_filter AS CHAR(1)), '''') <> ISNULL(CAST(NPT.has_filter AS CHAR(1)), '''') 
                            THEN ''IsFiltereDOIff:  Actual Table:  '' + ISNULL(CAST(AT.has_filter AS CHAR(1)), '''') + ''// New Table:  '' + ISNULL(CAST(NPT.has_filter AS CHAR(1)), '''') 
                            ELSE ''''
                        END +
                        CASE 
                            WHEN ISNULL(AT.filter_definition, '''') <> ISNULL(NPT.filter_definition, '''') 
                            THEN ''FilterPredicateDiff:  Actual Table:  '' + ISNULL(AT.filter_definition, '''') + ''// New Table:  '' + ISNULL(NPT.filter_definition, '''') 
                            ELSE ''''
                        END +
                        CASE 
                            WHEN ISNULL(AT.IndexKeys, '''') <> ISNULL(NPT.IndexKeys, '''') 
                            THEN ''KeyColumnListDiff:  Actual Table:  '' + ISNULL(AT.IndexKeys, '''') + ''// New Table:  '' + ISNULL(NPT.IndexKeys, '''') 
                            ELSE ''''
                        END +
                        CASE 
                            WHEN ISNULL(AT.IncludedColumns, '''') <> ISNULL(NPT.IncludedColumns, '''') 
                            THEN ''IncludedColumnListDiff:  Actual Table:  '' + ISNULL(AT.IncludedColumns, '''') + ''// New Table:  '' + ISNULL(NPT.IncludedColumns, '''') 
                            ELSE ''''
                        END COLLATE DATABASE_DEFAULT AS SchemaDifferences
                FROM dbo.fnActualIndexesForTable(@SchemaName1,@TableName1, @DiffBetTableNames, @PartitionColumnToReplaceInPK) AT
                    FULL OUTER JOIN dbo.fnActualIndexesForTable(@SchemaName2,@TableName2, @DiffBetTableNames, @PartitionColumnToReplaceInPK) NPT
                        ON AT.TableName = NPT.TableName
                            AND AT.IndexName = NPT.IndexName) x
        WHERE EXISTS (  SELECT *
                        FROM (
                                SELECT * 
                                FROM dbo.fnActualIndexesForTable(@SchemaName1,@TableName1, @DiffBetTableNames, @PartitionColumnToReplaceInPK)
                                WHERE TableName = @TableName1
                                EXCEPT
                                SELECT *
                                FROM dbo.fnActualIndexesForTable(@SchemaName2,@TableName2, @DiffBetTableNames, @PartitionColumnToReplaceInPK)
                                WHERE TableName = @TableName1)Diff
                        WHERE Diff.TableName = x.TableName
                            AND Diff.IndexName = x.IndexName))
' AS FinalRepartitioningValidation_CreateCompareTableStructuresDetailsFunctionSQL,
'

CREATE OR ALTER FUNCTION [dbo].[fnCompareTableStructures](
    @DatabaseName SYSNAME,
	@SchemaName1 SYSNAME,
	@TableName1 SYSNAME,
	@SchemaName2 SYSNAME,
	@TableName2 SYSNAME,
	@DiffBetTableNames SYSNAME,
	@PartitionColumnToReplaceInPK SYSNAME)
RETURNS TABLE
AS RETURN
(

/*

SELECT * FROM dbo.fnCompareTableStructures(
    ''PaymentReporting'',
    ''dbo'',
    ''Liabilities'',
    ''dbo'',
    ''Liabilities_NewPartitionedTableFromPrep'',
    ''_NewPartitionedTableFromPrep'',
    ''PayDate'')	
*/


SELECT 
(SELECT	COUNT(*) AS Counts
FROM (	SELECT * 
		FROM sys.dm_exec_describe_first_result_set (N''SELECT * FROM '' + @SchemaName1 + ''.'' + @TableName1 , NULL, 0) 
		WHERE name NOT IN (''DMLType'')) Live 
	FULL OUTER JOIN (	SELECT * 
						FROM sys.dm_exec_describe_first_result_set (N''SELECT * FROM '' + @SchemaName2 + ''.'' + @TableName2, NULL, 0) 
						WHERE name NOT IN (''DMLType'')) Prep 
		ON Live.name = Prep.name 
WHERE (Live.is_nullable <> Prep.is_nullable
		OR live.system_type_name <> prep.system_type_name
		OR live.is_identity_column <> prep.is_identity_column
		OR Live.max_length <> Prep.max_length
		OR Live.precision <> Prep.precision
		OR Live.collation_name <> Prep.collation_name
		OR Live.scale <> Prep.scale
		OR Live.is_part_of_unique_key <> Prep.is_part_of_unique_key
		OR Live.name IS NULL
		OR Prep.name IS NULL))
+ --indexes
(SELECT COUNT(*)
FROM (
		SELECT * 
		FROM dbo.fnActualIndexStructuresForTable(@SchemaName1,@TableName1, @DiffBetTableNames, @PartitionColumnToReplaceInPK)
		WHERE NOT EXISTS (  SELECT ''True''
                            FROM DOI.IndexesNotInMetadata INIM 
                            WHERE DatabaseName = INIM.DatabaseName
                                AND SchemaName = INIM.SchemaName
                                AND TableName = INIM.TableName
                                AND INIM.IndexName = IndexName)
		EXCEPT
		SELECT *
		FROM dbo.fnActualIndexStructuresForTable(@SchemaName2,@TableName2, @DiffBetTableNames, @PartitionColumnToReplaceInPK)
		WHERE NOT EXISTS (  SELECT ''True'' 
                            FROM DOI.IndexesNotInMetadata INIM 
                            WHERE DatabaseName = INIM.DatabaseName
                                AND SchemaName = INIM.SchemaName
                                AND TableName = INIM.TableName
                                AND INIM.IndexName = IndexName))x)
+ --constraints
(SELECT COUNT(*)
FROM (
		SELECT * 
		FROM dbo.fnActualConstraintsForTable(@SchemaName1,@TableName1, @DiffBetTableNames)
		EXCEPT
		SELECT *
		FROM dbo.fnActualConstraintsForTable(@SchemaName2,@TableName2, @DiffBetTableNames))x) AS Counts
)
' AS FinalRepartitioningValidation_CreateCompareTableStructuresFunctionSQL,

CASE WHEN AllTables.IsNewPartitionedPrepTable = 0 THEN '' ELSE '
IF (SELECT * FROM dbo.fnCompareTableStructures(''' + AllTables.SchemaName + ''',''' + AllTables.TableName + ''',''' + AllTables.SchemaName + ''',''' + AllTables.NewPartitionedPrepTableName + ''', ''_NewPartitionedTableFromPrep'',''' + AllTables.PartitionColumn + ''')) > 0
BEGIN
    DECLARE @ErrorMessage VARCHAR(MAX) = ''Schemas from the 2 tables do not match!!''

    SELECT @ErrorMessage += CHAR(13) + CHAR(10) + ''***'' + IndexName + space(1) + SchemaDifferences + ''***'' + CHAR(13) + CHAR(10)
    FROM dbo.fnCompareTableStructuresDetails(''' + AllTables.SchemaName + ''',''' + AllTables.TableName + ''',''' + AllTables.SchemaName + ''',''' + AllTables.NewPartitionedPrepTableName + ''', ''_NewPartitionedTableFromPrep'',''' + AllTables.PartitionColumn + ''')

	RAISERROR(@ErrorMessage, 16, 1)
END

IF NOT EXISTS(	 SELECT * 
		  	     FROM sys.schemas s 
				    INNER JOIN sys.tables t ON s.schema_id = t.schema_id 
			     WHERE s.name = ''' + AllTables.SchemaName + ''' 
				    AND t.name = ''' + AllTables.NewPartitionedPrepTableName + ''') 
BEGIN
	RAISERROR(''NewPartitionedPrepTable does not exist!!'', 16, 1)
END

IF NOT EXISTS(	 SELECT * 
		  	     FROM sys.schemas s 
		  		    INNER JOIN sys.tables t ON s.schema_id = t.schema_id 
			     WHERE s.name = ''' + AllTables.SchemaName + ''' 
				    AND t.name = ''' + AllTables.TableName + ''')
BEGIN
	RAISERROR(''Live table does not exist!!'', 16, 1)
END

IF EXISTS(  SELECT *
		    FROM sys.tables t 
		    WHERE name <> ''' + AllTables.NewPartitionedPrepTableName + ''' 
		        AND name LIKE ''%' + AllTables.TableName + '%Prep%'')
BEGIN
	RAISERROR(''Some Prep tables still exist!!'', 16, 1)
END

DECLARE @RowCount_NewPrepTable int = (SELECT SUM(ROWS)
									  FROM sys.partitions 
									  WHERE object_id = OBJECT_ID(''' + AllTables.SchemaName + '.' + AllTables.NewPartitionedPrepTableName + ''') 
										 AND index_id in (0,1))

DECLARE @RowCount_OldTable int = (SELECT SUM(ROWS) 
								  FROM sys.partitions 
								  WHERE object_id = OBJECT_ID(''' + AllTables.SchemaName + '.' + AllTables.TableName + ''') 
									 AND index_id in (0,1))

DECLARE @MaximumAllowedRowsDifference DECIMAL(18,4) =  (	SELECT SUM(ROWS) * 0.1 
															FROM sys.partitions 
															WHERE object_id = OBJECT_ID(''' + AllTables.SchemaName + '.' + AllTables.TableName + ''') 
																AND index_id in (0,1))

IF ABS( @RowCount_NewPrepTable - @RowCount_OldTable ) > @MaximumAllowedRowsDifference 
BEGIN
	RAISERROR(''RowCounts from 2 tables are too far apart!!'', 16, 1)
END'
END AS FinalRepartitioningValidationSQL,

CASE WHEN AllTables.IsNewPartitionedPrepTable = 0 THEN '' ELSE '
SET DEADLOCK_PRIORITY 10
EXEC sp_rename
	@objname = ''' + AllTables.SchemaName + '.' + AllTables.PrepTableName + ''',
	@newname = ''' + AllTables.TableName + ''',
	@objtype = ''OBJECT''' 
END AS RenameNewPartitionedPrepTableSQL,
CASE WHEN AllTables.IsNewPartitionedPrepTable = 0 THEN '' ELSE 
'SET DEADLOCK_PRIORITY 10
EXEC sp_rename
	@objname = ''' + AllTables.SchemaName + '.' + AllTables.TableName + ''',
	@newname = ''' + AllTables.TableName + '_OLD'',
	@objtype = ''OBJECT''' 
END AS RenameExistingTableSQL,

CASE WHEN AllTables.IsNewPartitionedPrepTable = 1 THEN '' ELSE 
'UPDATE DOI.DOI.Run_PartitionState
SET DataSynchState = 1
WHERE SchemaName = ''' + AllTables.SchemaName + '''
	AND PrepTableName = ''' + AllTables.PrepTableName + '''
	AND PartitionFromValue = ''' + CAST(AllTables.BoundaryValue AS VARCHAR(20)) + '''
'
END AS TurnOnDataSynchSQL,

CASE WHEN AllTables.IsNewPartitionedPrepTable = 1 THEN '' ELSE 
'
IF EXISTS (	SELECT ''True''
			FROM DOI.DOI.Run_PartitionState WITH (NOLOCK)
			WHERE SchemaName = ''' + AllTables.SchemaName + '''
				AND PrepTableName = ''' + AllTables.PrepTableName + '''
				AND DataSynchState = 1)
	AND EXISTS (SELECT ''True''
				FROM inserted
				WHERE ' + CASE WHEN AllTables.BoundaryValue = '0001-01-01' THEN '' ELSE AllTables.PartitionColumn + ' >= ''' + CONVERT(VARCHAR(30), AllTables.BoundaryValue, 120) + '''' + ' AND ' END + AllTables.PartitionColumn + ' < ''' + CONVERT(VARCHAR(50), ISNULL(AllTables.NextBoundaryValue, '9999-12-31'), 120) + ''' 
				UNION ALL
				SELECT ''True''
				FROM deleted
				WHERE ' + CASE WHEN AllTables.BoundaryValue = '0001-01-01' THEN '' ELSE AllTables.PartitionColumn + ' >= ''' + CONVERT(VARCHAR(30), AllTables.BoundaryValue, 120) + '''' + ' AND ' END + AllTables.PartitionColumn + ' < ''' + CONVERT(VARCHAR(50), ISNULL(AllTables.NextBoundaryValue, '9999-12-31'), 120) + ''' )
BEGIN
	INSERT INTO ' + AllTables.SchemaName + '.' + AllTables.PrepTableName + '
	SELECT * 
	FROM inserted T
	WHERE ' + CASE WHEN AllTables.BoundaryValue = '0001-01-01' THEN '' ELSE 'T.' + AllTables.PartitionColumn + ' >= ''' + CONVERT(VARCHAR(30), AllTables.BoundaryValue, 120) + '''' + ' AND ' END + 'T.' + AllTables.PartitionColumn + ' < ''' + CONVERT(VARCHAR(50), ISNULL(AllTables.NextBoundaryValue, '9999-12-31'), 120) + ''' 
		AND NOT EXISTS (SELECT ''True''
						FROM deleted PT 
						WHERE ' + AllTables.PKColumnListJoinClause + ')

	UPDATE PT
	SET ' + AllTables.UpdateColumnList + '
	FROM ' + AllTables.SchemaName + '.' + AllTables.PrepTableName + ' PT
		INNER JOIN inserted T ON ' + AllTables.PKColumnListJoinClause + '
		INNER JOIN deleted d ON ' + REPLACE(AllTables.PKColumnListJoinClause, 'PT.', 'd.') + '
	WHERE ' + CASE WHEN AllTables.BoundaryValue = '0001-01-01' THEN '' ELSE 'T.' +AllTables.PartitionColumn + ' >= ''' + CONVERT(VARCHAR(30), AllTables.BoundaryValue, 120) + '''' + ' AND ' END + 'T.' + AllTables.PartitionColumn + ' < ''' + CONVERT(VARCHAR(50), ISNULL(AllTables.NextBoundaryValue, '9999-12-31'), 120) + ''' 

	DELETE PT
	FROM ' + AllTables.SchemaName + '.' + AllTables.PrepTableName + ' PT
		INNER JOIN deleted T ON ' + AllTables.PKColumnListJoinClause + '
	WHERE ' + CASE WHEN AllTables.BoundaryValue = '0001-01-01' THEN '' ELSE 'T.' + AllTables.PartitionColumn + ' >= ''' + CONVERT(VARCHAR(30), AllTables.BoundaryValue, 120) + '''' + ' AND ' END + 'T.' + AllTables.PartitionColumn + ' < ''' + CONVERT(VARCHAR(50), ISNULL(AllTables.NextBoundaryValue, '9999-12-31'), 120) + ''' 
		AND NOT EXISTS (SELECT ''True''
						FROM inserted i 
						WHERE ' + REPLACE(AllTables.PKColumnListJoinClause, 'PT.', 'i.') + ')
END' END AS PrepTableTriggerSQLFragment,

CASE WHEN AllTables.IsNewPartitionedPrepTable = 0 THEN '' ELSE 
'
INSERT INTO ' + AllTables.SchemaName + '.' + AllTables.TableName + '
SELECT ' + AllTables.ColumnListNoTypes + '
FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_DataSynch O
WHERE O.DMLType = ''I''
	AND NOT EXISTS (SELECT ''True'' 
					FROM ' + + AllTables.SchemaName + '.' + AllTables.TableName + ' PT WITH (TABLOCKX, XLOCK)
					WHERE ' + AllTables.PKColumnListJoinClause + ')

SET @RowCountOUT = @@ROWCOUNT

IF EXISTS(	SELECT ''True''
			FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_DataSynch O
			WHERE O.DMLType = ''I''
				AND NOT EXISTS (SELECT ''True'' 
								FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + ' PT WITH (TABLOCKX, XLOCK) 
								WHERE ' + AllTables.PKColumnListJoinClause + '))
BEGIN
	RAISERROR(''Not all INSERTs were synched to the new table for ' + AllTables.SchemaName + '.' + AllTables.TableName + '.'', 10, 1)
END' 
END AS SynchInsertsPrepTableSQL,
CASE WHEN AllTables.IsNewPartitionedPrepTable = 0 THEN '' ELSE 
'
UPDATE PT
SET ' + AllTables.UpdateColumnList + '
FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_DataSynch O
	INNER JOIN ' + + AllTables.SchemaName + '.' + AllTables.TableName + ' PT WITH (TABLOCKX, XLOCK) ON ' + AllTables.PKColumnListJoinClause + '
	INNER JOIN (SELECT ' + AllTables.PKColumnList + ', MAX(UpdatedUtcDt) AS UpdatedUtcDt 
				FROM ' + + AllTables.SchemaName + '.' + AllTables.TableName + '_DataSynch
				WHERE  DMLType = ''U''
				GROUP BY ' + AllTables.PKColumnList + ') O2
		ON ' + REPLACE(AllTables.PKColumnListJoinClause, 'PT.', 'O2.') + '
			AND O2.UpdatedUtcDt = O.UpdatedUtcDt
WHERE O.DMLType = ''U''
	AND O.UpdatedUtcDt > PT.UpdatedUtcDt

SET @RowCountOUT = @@ROWCOUNT

IF EXISTS(	SELECT ''True'' 
			FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_DataSynch O
				INNER JOIN ' + AllTables.SchemaName + '.' + AllTables.TableName + ' PT WITH (TABLOCKX, XLOCK) ON ' + AllTables.PKColumnListJoinClause + '
				INNER JOIN (SELECT ' + AllTables.PKColumnList + ', MAX(UpdatedUtcDt) AS UpdatedUtcDt 
							FROM ' + + AllTables.SchemaName + '.' + AllTables.TableName + '_DataSynch
							WHERE  DMLType = ''U''
							GROUP BY ' + AllTables.PKColumnList + ') O2
					ON ' + REPLACE(AllTables.PKColumnListJoinClause, 'PT.', 'O2.') + '
						AND O2.UpdatedUtcDt = O.UpdatedUtcDt
			WHERE O.DMLType = ''U''
				AND O.UpdatedUtcDt > PT.UpdatedUtcDt)
BEGIN
	RAISERROR(''Not all UPDATEs were synched to the new table for ' + AllTables.SchemaName + '.' + AllTables.TableName + '.'', 10, 1)
END' 
END AS SynchUpdatesPrepTableSQL,
CASE WHEN AllTables.IsNewPartitionedPrepTable = 0 THEN '' ELSE 
'
DELETE PT
FROM ' + + AllTables.SchemaName + '.' + AllTables.TableName + ' PT WITH (TABLOCKX, XLOCK)
WHERE EXISTS (	SELECT ''True'' 
				FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_DataSynch O
				WHERE O.DMLType = ''D'' 
					AND ' + AllTables.PKColumnListJoinClause + ')

SET @RowCountOUT = @@ROWCOUNT

IF EXISTS(	SELECT ''True''
			FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_DataSynch O
			WHERE O.DMLType = ''D''
				AND EXISTS (SELECT ''True'' 
							FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + ' PT WITH (TABLOCKX, XLOCK) 
							WHERE ' + AllTables.PKColumnListJoinClause + '))
BEGIN
	RAISERROR(''Not all DELETEs were synched to the new table for ' + AllTables.SchemaName + '.' + AllTables.TableName + '.'', 10, 1)
END' 
END AS SynchDeletesPrepTableSQL,

CASE WHEN AllTables.IsNewPartitionedPrepTable = 0 THEN '' ELSE '
SET DEADLOCK_PRIORITY 10
EXEC sp_rename
	@objname = ''' + AllTables.SchemaName + '.' + AllTables.TableName + ''',
	@newname = ''' + AllTables.PrepTableName + ''',
	@objtype = ''OBJECT''' 
END AS RevertRenameNewPartitionedPrepTableSQL,

CASE WHEN AllTables.IsNewPartitionedPrepTable = 0 THEN '' ELSE '
SET DEADLOCK_PRIORITY 10
EXEC sp_rename
	@objname = ''' + AllTables.SchemaName + '.' + AllTables.TableName + '_OLD'',
	@newname = ''' + AllTables.TableName + ''',
	@objtype = ''OBJECT''' 
END AS RevertRenameExistingTableSQL,

CASE WHEN AllTables.IsNewPartitionedPrepTable = 0 THEN '' ELSE 
'
SELECT *
FROM (

		SELECT ''Inserts Left'' AS Type, COUNT(*) AS Counts
		FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_DataSynch PT WITH (NOLOCK)
		WHERE PT.DMLType = ''I''
			AND NOT EXISTS (SELECT ''True'' 
							FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + ' O WITH (NOLOCK)
							WHERE ' + AllTables.PKColumnListJoinClause + ')
		UNION ALL
		SELECT ''Updates Left'' AS Type, COUNT(*)
		FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_DataSynch PT WITH (NOLOCK)
		WHERE PT.DMLType = ''U''
			AND EXISTS (SELECT ''True'' 
						FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + ' O WITH (NOLOCK)
						WHERE ' + AllTables.PKColumnListJoinClause + '
							AND O.UpdatedUtcDt = PT.UpdatedUtcDt)
		UNION ALL
		SELECT ''Deletes Left'' AS Type, COUNT(*)
		FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_DataSynch PT WITH (NOLOCK)
		WHERE PT.DMLType = ''D''
			AND EXISTS (SELECT ''True'' 
						FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + ' O WITH (NOLOCK)
						WHERE ' + AllTables.PKColumnListJoinClause + '))c
' END AS DataSynchProgressSQL,
'
SELECT COUNT(*), ''MissingInserts''
FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_OLD O
WHERE NOT EXISTS (	SELECT ''True''
					FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + ' PT 
					WHERE ' + AllTables.PKColumnListJoinClause + ')
UNION ALL
SELECT COUNT(*), ''MissingUpdates''
FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + ' PT
	INNER JOIN ' + AllTables.SchemaName + '.' + AllTables.TableName + '_OLD O ON ' + AllTables.PKColumnListJoinClause + '
WHERE O.UpdatedUtcDt > PT.UpdatedUtcDt
UNION ALL
--missing deletes
SELECT COUNT(*), ''Missing Deletes'' 
FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + ' PT
WHERE NOT EXISTS(	SELECT ''True'' 
					FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_OLD O 
					WHERE ' + AllTables.PKColumnListJoinClause + ')
	AND PT.UpdatedUtcDt < (SELECT MAX(UpdatedUtcDt) FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_OLD)' AS PostDataValidationMissingEventsSQL,
'
SELECT NewTable.DatePeriod, ISNULL(OldTable.NumRows, 0) AS OldTableNumRows, NewTable.NumRows AS NewTableNumRows, (NewTable.NumRows - ISNULL(OldTable.NumRows, 0)) AS Diff 
FROM (	SELECT CAST(YEAR(' + AllTables.PartitionColumn + ') AS CHAR(4)) + ''-'' + CASE WHEN MONTH(' + AllTables.PartitionColumn + ') < 10 THEN ''0'' ELSE SPACE(0) END + CAST(MONTH(' + AllTables.PartitionColumn + ') AS VARCHAR(2)) AS DatePeriod, COUNT(*) AS NumRows
		FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '
		GROUP BY CAST(YEAR(' + AllTables.PartitionColumn + ') AS CHAR(4)) + ''-'' + CASE WHEN MONTH(' + AllTables.PartitionColumn + ') < 10 THEN ''0'' ELSE SPACE(0) END + CAST(MONTH(' + AllTables.PartitionColumn + ') AS VARCHAR(2))) NewTable
	LEFT JOIN (	SELECT CAST(YEAR(' + AllTables.PartitionColumn + ') AS CHAR(4)) + ''-'' + CASE WHEN MONTH(' + AllTables.PartitionColumn + ') < 10 THEN ''0'' ELSE SPACE(0) END + CAST(MONTH(' + AllTables.PartitionColumn + ') AS VARCHAR(2)) AS DatePeriod, COUNT(*) AS NumRows
				FROM ' + AllTables.SchemaName + '.' + AllTables.TableName + '_OLD
				GROUP BY CAST(YEAR(' + AllTables.PartitionColumn + ') AS CHAR(4)) + ''-'' + CASE WHEN MONTH(' + AllTables.PartitionColumn + ') < 10 THEN ''0'' ELSE SPACE(0) END + CAST(MONTH(' + AllTables.PartitionColumn + ') AS VARCHAR(2))) OldTable
		ON OldTable.DatePeriod = NewTable.DatePeriod
WHERE (NewTable.NumRows - ISNULL(OldTable.NumRows, 0)) <> 0
ORDER BY NewTable.DatePeriod' AS PostDataValidationCompareByPartitionSQL
FROM (  SELECT T.DatabaseName
                ,T.SchemaName
				,T.TableName
				,P.DateDiffs
				,P.PrepTableName
				,T.NewPartitionedPrepTableName
				,T.PartitionFunctionName
				,P.NextBoundaryValue
				,P.BoundaryValue
				,DOI.fnGetColumnListForTable (T.SchemaName, T.TableName, 'CREATETABLE', 1, NULL, NULL) AS ColumnListWithTypes
				,DOI.fnGetColumnListForTable (T.SchemaName, T.TableName, 'INSERT', 1, NULL, NULL) AS ColumnListNoTypes
				,DOI.fnGetColumnListForTable (T.SchemaName, T.TableName, 'UPDATE', 1, 'PT', 'T') AS UpdateColumnList
    			,T.PartitionColumn
    			,T.PKColumnList
				,T.PKColumnListJoinClause
				,T.Storage_Desired
				,T.StorageType_Desired
				,P.PartitionNumber
                ,UFG_Desired.name AS PrepTableFilegroup
				,0 AS IsNewPartitionedPrepTable
        --SELECT COUNT(*)
        FROM DOI.Tables T
            CROSS APPLY (   SELECT *, T.TableName + P.PrepTableNameSuffix AS PrepTableName, 0 AS IsNewPartitionedPrepTable
                            FROM DOI.vwPartitionFunctionPartitions P 
                            WHERE T.Storage_Desired = PartitionSchemeName) P
                INNER JOIN DOI.SysDataSpaces DS_Desired ON T.Storage_Desired = DS_Desired.name
                INNER JOIN DOI.SysDestinationDataSpaces DDS_Desired ON DDS_Desired.database_id = DS_Desired.database_id
                    AND DDS_Desired.partition_scheme_id = DS_Desired.data_space_id
                    AND P.PartitionNumber = DDS_Desired.destination_id
                INNER JOIN DOI.SysDataSpaces UFG_Desired ON DDS_Desired.database_id = UFG_Desired.database_id
                    AND DDS_Desired.data_space_id = UFG_Desired.data_space_id
        WHERE IntendToPartition = 1
        UNION ALL
        SELECT	T.DatabaseName
                ,T.SchemaName
				,T.TableName
				,0 AS DateDiffs
				,T.TableName + '_NewPartitionedTableFromPrep' AS PrepTableName
				,T.TableName + '_NewPartitionedTableFromPrep' AS NewPartitionedPrepTableName
				,T.PartitionFunctionName
				,'9999-12-31' AS NextBoundaryValue
				,'0001-01-01' AS BoundaryValue
				,DOI.fnGetColumnListForTable (T.SchemaName, T.TableName, 'CREATETABLE', 1, NULL, NULL) AS ColumnListWithTypes
				,DOI.fnGetColumnListForTable (T.SchemaName, T.TableName, 'INSERT', 1, NULL, NULL) AS ColumnListNoTypes
				,DOI.fnGetColumnListForTable (T.SchemaName, T.TableName, 'UPDATE', 1, 'PT', 'T') AS UpdateColumnList
    			,T.PartitionColumn
    			,T.PKColumnList
				,T.PKColumnListJoinClause
				,T.Storage_Desired
				,T.StorageType_Desired
				,0 AS PartitionNumber
                ,NULL AS PrepTableFilegroup
				,1 AS IsNewPartitionedPrepTable
        FROM DOI.Tables T
        WHERE IntendToPartition = 1) AllTables
    CROSS JOIN (SELECT * FROM DOI.DOISettings WHERE SettingName = 'UTEBCP Filepath') SS




















GO

GO
-------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwTables_PrepTables.sql" ---------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwTables_PrepTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('cb5859fe-37fe-5c6e-b873-16a0b9304ec1' AS UNIQUEIDENTIFIER), '79B631416DFC48F3E1B8F249CA572BFD109FB04D05EFDDDF41784D348597C09E', 'Programmable Objects\Views\DOI.vwTables_PrepTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwTables_PrepTables.sql", ID: {cb5859fe-37fe-5c6e-b873-16a0b9304ec1} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('70bb0aff-5d6b-553f-bae6-5ef5e7d28e80' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AB6AD37FEC4D6976225AC2C761EBF9A6D23EFB988DA35838E9E8B37A9999F4F9')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnGetPKColumnListForTable.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnGetPKColumnListForTable.sql", ID: {70bb0aff-5d6b-553f-bae6-5ef5e7d28e80} *****';

GO


-------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnGetPKColumnListForTable.sql" ---------
GO
IF OBJECT_ID('[DOI].[fnGetPKColumnListForTable]') IS NOT NULL
	DROP FUNCTION [DOI].[fnGetPKColumnListForTable];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   FUNCTION [DOI].[fnGetPKColumnListForTable](
    @DatabaseName               SYSNAME,
	@SchemaName					SYSNAME, 
	@TableName					SYSNAME)

RETURNS NVARCHAR(MAX)
AS

/*
	select DOI.[fnGetPKColumnListForTable]('PaymentReporting', 'dbo', 'Pays')
*/

BEGIN
	DECLARE @ColumnList NVARCHAR(MAX) = ''
    
    SELECT @ColumnList += CASE WHEN @ColumnList = '' THEN '' ELSE ',' END + c.name
    --select *
    FROM DOI.SysIndexes i
        INNER JOIN DOI.SysDatabases d ON d.database_id = i.database_id
        INNER JOIN DOI.SysIndexColumns ic ON ic.database_id = i.database_id
            AND ic.object_id = i.object_id
            AND ic.index_id = i.index_id
        INNER JOIN DOI.SysColumns c ON c.database_id = ic.database_id
            AND c.column_id = ic.column_id
            AND c.object_id = ic.object_id
        left JOIN DOI.SysTables t ON t.database_id = c.database_id
            AND t.object_id = c.object_id
        INNER JOIN DOI.SysSchemas s ON s.database_id = t.database_id
            AND s.schema_id = t.schema_id
    WHERE i.is_primary_key = 1
        AND d.name = @DatabaseName
        AND s.name = @SchemaName
        AND t.name = @TableName
    ORDER BY ic.key_ordinal asc

    RETURN @ColumnList
END

GO

GO
--------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnGetPKColumnListForTable.sql" ----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnGetPKColumnListForTable.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('70bb0aff-5d6b-553f-bae6-5ef5e7d28e80' AS UNIQUEIDENTIFIER), 'AB6AD37FEC4D6976225AC2C761EBF9A6D23EFB988DA35838E9E8B37A9999F4F9', 'Programmable Objects\Functions\DOI.fnGetPKColumnListForTable.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnGetPKColumnListForTable.sql", ID: {70bb0aff-5d6b-553f-bae6-5ef5e7d28e80} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6377b5ee-c0da-593d-91e7-76f3708d6c5a' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4DF48162A7322B0B9653E7E59C2DDC0D3748CEA7F7529E9B955FBF51C2AA3FA1')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_UpdateData.sql", ID: {6377b5ee-c0da-593d-91e7-76f3708d6c5a} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_UpdateData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_Tables_UpdateData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Tables_UpdateData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

--EXEC DOI.spForeignKeysAdd
--    @ForMetadataTablesOnly = 1,
--	@ReferencedSchemaName	= 'DOI',
--	@ReferencedTableName	= 'Tables',
--    @UseExistenceCheck  = 1
--GO
CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_Tables_UpdateData]

AS

UPDATE T
SET ColumnListNoTypes = DOI.fnGetColumnListForTable (T.SchemaName, T.TableName, 'INSERT', 1, NULL, NULL),
	ColumnListWithTypes = DOI.fnGetColumnListForTable (T.SchemaName, T.TableName, 'CREATETABLE', 1, NULL, NULL),
	UpdateColumnList = DOI.fnGetColumnListForTable (T.SchemaName, T.TableName, 'UPDATE', 1, 'PT', 'T'),
    NewPartitionedPrepTableName = TableName + '_NewPartitionedTableFromPrep',
    Storage_Actual = DS_Actual.name,
    StorageType_Actual = DS_Actual.type_desc,
    PKColumnList = DOI.fnGetPKColumnListForTable(T.DatabaseName, T.SchemaName, T.TableName),
    PKColumnListJoinClause = DOI.fnGetJoinClauseForTable(T.DatabaseName, T.SchemaName, T.TableName, 1, 'T', 'PT')
FROM DOI.Tables T
    INNER JOIN DOI.SysDatabases d ON T.DatabaseName = d.name
    INNER JOIN DOI.SysTables T2 ON T2.database_id = d.database_id
        AND T.TableName = T2.name
    INNER JOIN DOI.SysSchemas s ON s.name = T.SchemaName
    INNER JOIN DOI.SysIndexes I ON d.database_id = i.database_id
        AND T2.object_id = I.object_id
        AND I.type_desc IN ('CLUSTERED', 'HEAP')
    INNER JOIN DOI.SysDataSpaces DS_Actual ON i.database_id = DS_Actual.database_id
        AND i.data_space_id = DS_Actual.data_space_id

UPDATE T
SET PartitionFunctionName = PF.PartitionFunctionName
FROM DOI.Tables T
    LEFT JOIN DOI.PartitionFunctions PF ON PF.PartitionSchemeName = T.Storage_Actual

UPDATE T
SET StorageType_Desired = DS_Desired.type_desc
FROM DOI.Tables T
    INNER JOIN DOI.SysDataSpaces DS_Desired ON T.Storage_Desired = DS_Desired.name

UPDATE T
SET T.DSTriggerSQL = DSTrigger.DSTriggerSQL
FROM DOI.Tables T
	CROSS APPLY(SELECT STUFF((  SELECT PT.PrepTableTriggerSQLFragment
								FROM DOI.vwTables_PrepTables PT
								WHERE PT.SchemaName = T.SchemaName
									AND PT.TableName = T.TableName
								FOR XML PATH(''), TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 1, '')) DSTrigger(DSTriggerSQL)


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_UpdateData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('6377b5ee-c0da-593d-91e7-76f3708d6c5a' AS UNIQUEIDENTIFIER), '4DF48162A7322B0B9653E7E59C2DDC0D3748CEA7F7529E9B955FBF51C2AA3FA1', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_UpdateData.sql", ID: {6377b5ee-c0da-593d-91e7-76f3708d6c5a} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('bab1d4e0-df52-5dc1-825a-0c43c107ac28' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D3BE9319965484B1EC96747AC83F730972044CDB80E0576D9BB3325B53947557')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_InsertData.sql", ID: {bab1d4e0-df52-5dc1-825a-0c43c107ac28} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_InsertData.sql" 
GO
-- <Migration ID="bab1d4e0-df52-5dc1-825a-0c43c107ac28" TransactionHandling="Custom"/>
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_Tables_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Tables_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE     PROCEDURE [DOI].[spRefreshMetadata_User_Tables_InsertData]

WITH NATIVE_COMPILATION, SCHEMABINDING
AS

/*
    EXEC DOI.spRefreshMetadata_User_Tables_InsertData
*/

BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)
    DELETE DOI.Tables

    --SELECT '(''' + SchemaName + ''', ''' + TableName + ''', ' + CASE WHEN X.PartitionColumn IS NULL THEN 'NULL' ELSE '''' + X.PartitionColumn + '''' END + ', ''' + NewTableStorage + ''', ' + CAST(0 AS VARCHAR(1)) + ', '+ CAST(0 AS VARCHAR(1)) + ')' + CHAR(13) + CHAR(10)
    --FROM (SELECT DISTINCT SchemaName, TableName, PartitionColumn, NewTableStorage FROM DOI.IndexesRowStore)X
    --The following tables are not in our metadata: dbo.NettedCollectionConfirmationInfos,dbo.NettedCollections,dbo.NettedCollectionsLiabilityCollections,DataMart.NettedCollectionStatusDim,
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName									,PartitionColumn			,Storage_Desired					, IntendToPartition	,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'AgencyLocalityTypeDim'					, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'Bai2BankTransactionTypeDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'BankAccountPurposeDim'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'BankAccountStatusDim'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'BankAccountTypeDim'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'BankTransactionTypeDim'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'CheckAddModeDim'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'CheckStatusDim'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'Company_TaxStatusDim'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'CompanyTaxAgencyStatusDim'				, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'CompanyStatusDim'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'CompanyTypeDim'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'CreditEffectOnLiabilityDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'FileRequestProcessingStatusDim'			, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentActionTypeDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentActionReasonDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentExceptionDim'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentIsInArrearsDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentLiabilityStatusDim'			, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentLiabilityTypeDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentMedIndicatorDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentPayableStatusDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentPaymentTypeDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentPayrollInstanceReconStatusDim', NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentsSupportsOthersDim'			, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentStatusDim'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GarnishmentTypeDim'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GLAccountClassificationDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GLAccountStatusDim'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'GLAccountTypeDim'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'InboundFileTypeDim'						, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'JournalEntryTransactionTypeDim'			, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'LiabilityCollectionPaymentMethoDOIm'		, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'LiabilityCollectionStatusDim'			, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'LiabilityCollectionTypeDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'LiabilityStatusDim'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'LiabilityTypeDim'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'    , 'NettedCollectionStatusDim'				, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'PayExceptionTypeDim'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'PayPortionStateDim'						, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'PayProcessingStatusDim'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'PayrollPaymentStatusDim'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'PayrollPaymentTypeDim'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'PayrollTypeDim'							, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'ProductActivationStatus'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'ProductCodeDim'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'ProductStatus'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'QEADJFilterOptions'						, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'RefundPortionDim'						, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'ReportRequestorTypeDim'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'ReportRequestStatusDim'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'TaxAgencyTransactionStatusDim'			, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'TaxCodeActiveStatus'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'TaxCodeProcessingFrequencyDim'			, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'TaxLiabilityOriginTypeDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'TaxPaymentCreditStatusDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'TaxPaymentStatusDim'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'TaxPaymentTypeDim'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'TenantStatusDim'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'UTETaxDataSourceTableSetDim'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'YEProcessingStatusDim'					, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'YEFileStatusDim'							, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'DataMart'	, 'YEIngestionTypeDim'						, NULL						, 'PRIMARY'							, 0					,  1)
    --	 DatabaseName       , SchemaName	,TableName									,PartitionColumn			,NewStorage							, IntendToPartition	,  ReadyToQueue
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'Bai2BankTransactions'					, 'TransactionSysUtcDt'		, 'psMonthly'			, 1					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'BankAccountDays'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'BankTransactions'						, 'TransactionUtcDateTime'	, 'psYearlyNoSlidingWindow'			, 1					,  1)  
    --,	('PaymentReporting' , 'dbo'		    , 'changelog'								, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'Companies'								, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'Company_Tax'								, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'CompanyTaxAgency'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'CompanyTaxAgency_Audit'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'CompanyProduct'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'CustomerBankAccounts'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'DBDefragLog'								, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'EFilingAcknowledgmentAlerts'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'EFilingAcknowledgments'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'FileRequestPayments'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'FileRequests'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'GarnishmentLiabilities'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'GarnishmentPayrollInstances'				, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'GeneralLedgerAccounts'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'JournalEntries'							, 'TransactionUtcDt'		, 'psMonthly'						, 1					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'Liabilities'								, 'PayDate'					, 'psYearlyNoSlidingWindow'			, 1					,  0)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'LiabilityCollectionComments'				, NULL      				, 'PRIMARY' 						, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'LiabilityCollectionConfirmationInfos'	, NULL      				, 'PRIMARY' 						, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'LiabilityCollections'					, 'PayUtcDt'				, 'psYearlyNoSlidingWindow'			, 1					,  0)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'LiabilityPayments'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'NettedCollections'						, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'NettedCollectionsLiabilityCollections'   , NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayActions'								, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayGarnishment_Deductions'				, 'PayUtcDate'				, 'psYearlyNoSlidingWindow'			, 1					,  0)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayGarnishment_Employees'				, 'PayUtcDate'				, 'psYearlyNoSlidingWindow'			, 1					,  0)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayGarnishment_Payees'					, 'PayUtcDate'				, 'psYearlyNoSlidingWindow'			, 1					,  0)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayGarnishmentActions'					, 'PayUtcDate'				, 'psYearlyNoSlidingWindow'			, 1					,  0)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayGarnishmentExceptions'				, 'PayUtcDate'				, 'psYearlyNoSlidingWindow'			, 1					,  0)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayGarnishmentLiabilities'				, 'PayUtcDate'				, 'psYearlyNoSlidingWindow'			, 1					,  0)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayGarnishments'							, 'PayUtcDate'				, 'psYearlyNoSlidingWindow'			, 1					,  0)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayLiabilities'							, 'PayUtcDate'				, 'psMonthly'						, 1					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayrollInstances'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayrollPayments'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayrollUnits'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'Pays'									, 'PayUtcDate'				, 'psMonthly'						, 1					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'PayTaxes'								, 'PayUtcDate'				, 'psMonthly'						, 1					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'ReportFileInformation'					, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'ReportObjectStoreInfo'					, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'ReportParameters'						, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'ReportRequests'							, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'ReportStatistics'						, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'States'									, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'SystemSettings'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TaxAgency'								, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TaxAgency_Audit'						    , NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TaxAgencyTransactions'					, NULL      				, 'PRIMARY'			                , 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TaxAgencyTransactionAmounts'				, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TaxAmounts'								, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TaxAmountsUltiTaxCodes'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TaxCodes'								, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TaxLiabilities'							, 'PayUtcDate'				, 'psYearlyNoSlidingWindow'	        , 1					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TaxPaymentCredits'						, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TaxPayrolls'							    , NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TaxSchedules'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TenantProduct'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'Tenants'								    , NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'TenantStatus'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'UltiProTaxCodeMapping'					, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'UsgBankAccounts'							, NULL						, 'PRIMARY'							, 0					,  1)  
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'YEProcessing'							, NULL						, 'PRIMARY'							, 0					,  1)
    INSERT INTO DOI.Tables (DatabaseName       , SchemaName    ,TableName         ,PartitionColumn   ,Storage_Desired     , IntendToPartition ,  ReadyToQueue) VALUES ('PaymentReporting' , 'dbo'		    , 'YEProcessingFiles'						, NULL						, 'PRIMARY'							, 0					,  1)
    --	 DatabaseName       , SchemaName	,TableName									,PartitionColumn			,NewStorage							, IntendToPartition	,  ReadyToQueue

END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_InsertData.sql" 


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_InsertData.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('bab1d4e0-df52-5dc1-825a-0c43c107ac28' AS UNIQUEIDENTIFIER), 'D3BE9319965484B1EC96747AC83F730972044CDB80E0576D9BB3325B53947557', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_InsertData.sql", ID: {bab1d4e0-df52-5dc1-825a-0c43c107ac28} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0c088849-9187-5f01-be89-408b1407e21b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '077C645AB58339C00CDD1B8D46DEA760CE03FE9745277F90BF197F1DE26874D2')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_4_Tables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_4_Tables.sql", ID: {0c088849-9187-5f01-be89-408b1407e21b} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_4_Tables.sql" -
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_4_Tables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_4_Tables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_4_Tables]

AS
    --EXEC DOI.spRefreshMetadata_User_Tables_CreateTables
    EXEC DOI.spRefreshMetadata_User_Tables_InsertData
    EXEC DOI.spRefreshMetadata_User_Tables_UpdateData
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_4_Tables.sql" ---


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_4_Tables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('0c088849-9187-5f01-be89-408b1407e21b' AS UNIQUEIDENTIFIER), '077C645AB58339C00CDD1B8D46DEA760CE03FE9745277F90BF197F1DE26874D2', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_4_Tables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_4_Tables.sql", ID: {0c088849-9187-5f01-be89-408b1407e21b} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7efa5017-6a04-55b3-abbc-2a2d4734f5d0' AS UNIQUEIDENTIFIER) AND [script_checksum] = '84C6DC206CDBA4C47780D6C4A648819F00735D150790FE93CB39F10A7B165720')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnActualIndex_Frag.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnActualIndex_Frag.sql", ID: {7efa5017-6a04-55b3-abbc-2a2d4734f5d0} *****';

GO


----------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnActualIndex_Frag.sql" -------------
GO
IF OBJECT_ID('[DOI].[fnActualIndex_Frag]') IS NOT NULL
	DROP FUNCTION [DOI].[fnActualIndex_Frag];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   FUNCTION [DOI].[fnActualIndex_Frag]()   

RETURNS TABLE 
WITH NATIVE_COMPILATION, SCHEMABINDING  
AS   

/*
    SELECT * FROM DOI.fnActualIndex_Frag()   
*/

RETURN  (
            SELECT  d.name AS DatabaseName,
                    s.name AS SchemaName,
                    t.name AS TableName, 
                    i.name AS IndexName, 
                    MAX(avg_fragmentation_in_percent) AS Fragmentation
			FROM DOI.SysIndexPhysicalStats p
                INNER JOIN DOI.SysDatabases d on p.database_id = d.database_id
                INNER JOIN DOI.SysSchemas s ON s.database_id = d.database_id
                INNER JOIN DOI.SysTables t ON t.database_id = d.database_id
                    AND t.schema_id = s.schema_id
                    AND t.object_id = p.object_id
                INNER JOIN DOI.SysIndexes i ON d.database_id = i.database_id
                    AND p.object_id = i.object_id
				    AND p.index_id = i.index_id	
			GROUP BY d.name, s.name, t.name, i.name
        )
GO

GO
------------ END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnActualIndex_Frag.sql" --------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnActualIndex_Frag.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('7efa5017-6a04-55b3-abbc-2a2d4734f5d0' AS UNIQUEIDENTIFIER), '84C6DC206CDBA4C47780D6C4A648819F00735D150790FE93CB39F10A7B165720', 'Programmable Objects\Functions\DOI.fnActualIndex_Frag.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnActualIndex_Frag.sql", ID: {7efa5017-6a04-55b3-abbc-2a2d4734f5d0} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('16e59ca5-b542-5d99-a9ea-68cc01410d2c' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E097767DE2AE0DD5B2ACEB1FD4394226C6815549720A12DD241F79AADE56C0CE')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_UpdateData.sql", ID: {16e59ca5-b542-5d99-a9ea-68cc01410d2c} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_UpdateData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexesColumnStore_UpdateData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexesColumnStore_UpdateData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_IndexesColumnStore_UpdateData]

--WITH NATIVE_COMPILATION, SCHEMABINDING
AS

--BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)

/************************************************   SQL SERVER METADATA (START) *******************************************/

--ROW COUNTS
    DECLARE @FilteredRowCounts FilteredRowCountsTT

    DECLARE @SQL VARCHAR(MAX) = ''

    SELECT @SQL += CASE @SQL WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + 'UNION ALL' + CHAR(13) + CHAR(10) END + 'SELECT ''' + DatabaseName + ''' AS DatabaseName, ''' + SchemaName + ''' AS SchemaName, ''' + TableName + ''' AS TableName, ''' + IndexName + ''' AS IndexName, COUNT(*) as NumRows FROM ' + DatabaseName + '.' + SchemaName + '.' + TableName + ' WHERE ' + FilterPredicate_Desired
    FROM (  SELECT ICS.DatabaseName, ICS.SchemaName, ICS.TableName, ICS.IndexName, ICS.FilterPredicate_Desired
            FROM DOI.IndexesColumnStore ICS
            WHERE IsFiltered_Desired = 1)x

    INSERT @FilteredRowCounts        
    EXEC(@SQL)

    UPDATE ICS
    SET IsIndexMissingFromSQLServer = 1
    FROM DOI.IndexesColumnStore ICS
    WHERE NOT EXISTS(	SELECT 'True' 
					    FROM DOI.SysSchemas s 
                            INNER JOIN DOI.SysDatabases d ON s.database_id = d.database_id
						    INNER JOIN DOI.SysTables t ON d.database_id = t.database_id
                                AND t.schema_id = s.schema_id 
						    INNER JOIN DOI.SysIndexes i ON i.database_id = d.database_id
                                AND i.object_id = t.object_id
					    WHERE d.name = ICS.DatabaseName
                            AND s.name = ICS.SchemaName
						    AND t.name = ICS.TableName
						    AND i.name = ICS.IndexName)

    UPDATE ICS
    SET NumRows_Actual = T.NumRows
    FROM DOI.IndexesColumnStore ICS
        INNER JOIN @FilteredRowCounts T ON ICS.DatabaseName = T.DatabaseName
            AND ICS.SchemaName = T.SchemaName
            AND ICS.TableName = T.TableName
            AND ICS.IndexName = T.IndexName
    WHERE IsFiltered_Desired = 1

    UPDATE ICS
    SET NumRows_Actual = p.NumRows
    --SELECT p.*
    FROM DOI.IndexesColumnStore ICS
        CROSS APPLY (   SELECT s.name AS SchemaName, t.name AS TableName, SUM(p.rows) AS NumRows
                        FROM DOI.SysSchemas s 
                            INNER JOIN DOI.SysTables t ON s.schema_id = t.schema_id
                            INNER JOIN DOI.SysPartitions p ON p.object_id = t.object_id
                        WHERE p.index_id IN (0,1)
                            AND s.name = ICS.SchemaName COLLATE DATABASE_DEFAULT
                            AND t.name = ICS.TableName COLLATE DATABASE_DEFAULT
                        GROUP BY s.name , t.name)p
    WHERE IsFiltered_Desired = 0

    --INDEX SIZING
    UPDATE ICS
    SET IndexSizeMB_Actual = ISNULL(TS.TotalSpaceMBDec,0),
        DriveLetter = TS.DriveLetter,
        IsIndexLarge =  CASE 
                            WHEN TS.TotalSpaceMBDec > TS.SizeCutoffValue
                            THEN 1
                            ELSE 0
                        END,
        NumPages_Actual = TS.NumPages,
        IndexMeetsMinimumSize = ISNULL(TS.IndexMeetsMinimumSize,0),
        OptionDataCompression_Actual = TS.data_compression_desc
    FROM DOI.IndexesColumnStore ICS
        OUTER APPLY (   SELECT  s.NAME AS SchemaName,
                                t.NAME AS TableName,
                                i.NAME AS IndexName,
                                MAX(df.physical_name) AS FilePath, 
		                        MAX(LEFT(vs.volume_mount_point, 1)) AS DriveLetter,
                                SUM(a.total_pages) AS NumPages,
                                CAST(((SUM(a.total_pages) * 8) / 1024.00) AS DECIMAL(10,2)) AS TotalSpaceMBDec,
			                    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS INT) AS UsedSpaceMB, 
			                    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS INT) AS UsedSpaceMBDec, 
			                    CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB,
			                    MAX(SS1.SizeCutoffValue ) AS SizeCutoffValue,
                                --SUM(p.rows) AS NumRows,  this is done above....
                                MAX(p.data_compression_desc) COLLATE DATABASE_DEFAULT AS data_compression_desc,
                                CASE WHEN SUM(a.total_pages) > MAX(SS2.MinNumPages) THEN 1 ELSE 0 END AS IndexMeetsMinimumSize
		                FROM DOI.systables t 
                            INNER JOIN DOI.SysSchemas s ON t.SCHEMA_ID = s.SCHEMA_ID
                            INNER JOIN DOI.SysIndexes i ON i.OBJECT_ID = t.object_id
                            INNER JOIN DOI.SysPartitions p ON p.OBJECT_ID = t.OBJECT_ID
                                AND p.index_id = I.index_id
                            INNER JOIN DOI.SysAllocationUnits a ON p.hobt_id = a.container_id
                            INNER JOIN DOI.SysDatabaseFiles df ON df.data_space_id = a.data_space_id
			                CROSS JOIN (SELECT CAST(SettingValue AS INT) AS SizeCutoffValue
						                FROM DOI.DOISettings 
						                WHERE SettingName = 'LargeTableCutoffValue')SS1
                            CROSS JOIN (SELECT CAST(SettingValue AS INT) AS MinNumPages
                                        FROM DOI.DOISettings 
                                        WHERE SettingName = 'MinNumPagesForIndexDefrag')SS2
                            CROSS JOIN (SELECT database_id FROM DOI.SysDatabases WHERE name = ICS.DatabaseName) DB
			                INNER JOIN DOI.SysDmOsVolumeStats vs ON vs.database_id = DB.database_id
                                AND vs.FILE_ID = df.FILE_ID
		                WHERE s.NAME = ICS.SchemaName
                            AND t.NAME = ICS.TableName
                            AND i.NAME = ICS.IndexName
		                GROUP BY s.name, t.name, i.name) TS
    --FRAG
    UPDATE ICS
    SET Fragmentation = F.Fragmentation,
        FragmentationType = CASE
                                WHEN ICS.NumPages_Actual > SS.MinNumPages AND F.Fragmentation > 30 
				                THEN 'Heavy' 
				                WHEN ICS.NumPages_Actual > SS.MinNumPages AND F.Fragmentation BETWEEN 5 AND 30 
                                THEN 'Light' 
				                ELSE 'None' 
                            END 
    FROM DOI.IndexesColumnStore ICS
        CROSS JOIN (SELECT CAST(SettingValue AS INT) AS MinNumPages
                    FROM DOI.DOISettings 
                    WHERE SettingName = 'MinNumPagesForIndexDefrag')SS
        CROSS APPLY (   SELECT  Fragmentation
                        FROM DOI.fnActualIndex_Frag() FN
                        WHERE FN.DatabaseName = ICS.DatabaseName
                            AND FN.SchemaName = ICS.SchemaName
                            AND FN.TableName = ICS.TableName
                            AND FN.IndexName = ICS.IndexName) F

    --SysIndexes, and friends...
    UPDATE ICS
    SET IsClustered_Actual      = CASE WHEN i.type_desc = 'CLUSTERED' THEN 1 ELSE 0 END,
        ColumnList_Actual       = i.included_column_list,
        IsFiltered_Actual       = i.has_filter,
        FilterPredicate_Actual  = i.filter_definition,
        Storage_Actual          = ActualDS.name,
        StorageType_Actual      = ActualDS.type_desc,
        StorageType_Desired     = DesiredDS.type_desc,
        IsStorageChanging       = CASE WHEN ActualDS.name <> DesiredDS.name THEN 1 ELSE 0 END
    --SELECT i.*
    FROM DOI.Tables TTP
        INNER JOIN DOI.SysDatabases d on d.name = TTP.DatabaseName
	    INNER JOIN DOI.SysSchemas s ON D.database_id = s.database_id
            AND TTP.SchemaName = s.name
	    INNER JOIN DOI.SysTables t ON s.database_id = t.database_id
            AND TTP.TableName = t.name
		    AND s.schema_id = t.schema_id
	    INNER JOIN DOI.SysIndexes i ON t.database_id = i.database_id
            AND i.object_id = t.object_id
	    INNER JOIN DOI.IndexesColumnStore ICS ON TTP.DatabaseName = ICS.DatabaseName
            AND TTP.SchemaName = ICS.SchemaName
		    AND TTP.TableName = ICS.TableName
		    AND ICS.IndexName = i.name	
	    INNER JOIN DOI.SysDataSpaces ActualDS ON ActualDS.database_id = i.database_id
            AND ActualDS.data_space_id = I.data_space_id
	    INNER JOIN DOI.SysDataSpaces DesiredDS ON DesiredDS.database_id = d.database_id
            AND DesiredDS.name = ICS.Storage_Desired

    --Partition Functions
    UPDATE ICS
    SET     PartitionFunction_Desired   = NewPf.name,
            PartitionFunction_Actual    = ExistingPf.name
    FROM DOI.IndexesColumnStore ICS 
        INNER JOIN DOI.SysDatabases d on d.name = ICS.DatabaseName
	    LEFT JOIN DOI.SysPartitionSchemes ExistingPs ON d.database_id = ExistingPs.database_id
            AND ICS.Storage_Actual = ExistingPs.name
	    LEFT JOIN DOI.SysPartitionFunctions ExistingPf ON d.database_id = ExistingPf.database_id
            AND ExistingPs.function_id = ExistingPf.function_id
	    LEFT JOIN DOI.SysPartitionSchemes NewPs ON NewPs.database_id = D.database_id
            AND NewPs.name = ICS.Storage_Desired
	    LEFT JOIN DOI.SysPartitionFunctions NewPf ON NewPf.database_id = NewPs.database_id
            AND NewPf.function_id = NewPs.function_id

    --CHANGE BITS
    UPDATE ICS
    SET IsColumnListChanging	        = CASE WHEN ICS.ColumnList_Desired <> ICS.ColumnList_Actual THEN 1 ELSE 0 END, 
	    IsFilterChanging                = CASE WHEN ISNULL(ICS.FilterPredicate_Desired, '') <> ISNULL(ICS.FilterPredicate_Actual, '') THEN 1 ELSE 0 END, 
	    IsClusteredChanging             = CASE WHEN ICS.IsClustered_Desired <> CASE ICS.IsClustered_Actual WHEN 1 THEN 1 ELSE 0 END  THEN 1 ELSE 0 END, 
	    IsPartitioningChanging          = CASE WHEN ICS.IsStorageChanging = 1 AND T.IntendToPartition = 1 THEN 1 ELSE 0 END, 
	    IsDataCompressionChanging       = CASE WHEN ICS.OptionDataCompression_Desired <> ICS.OptionDataCompression_Actual THEN 1 ELSE 0 END,
	    IsDataCompressionDelayChanging  = CASE WHEN ICS.OptionDataCompressionDelay_Desired <> ICS.OptionDataCompressionDelay_Actual THEN 1 ELSE 0 END
    FROM DOI.IndexesColumnStore ICS
        INNER JOIN DOI.Tables T ON ICS.DatabaseName = T.DatabaseName
            AND ICS.SchemaName = T.SchemaName
            AND ICS.TableName = T.TableName

    /*			
			    ,ISNULL(i.has_LOB_columns, 0) AS IndexHasLOBColumns
    */

    UPDATE DOI.IndexesColumnStore
    SET AreDropRecreateOptionsChanging  =   CASE
                                                WHEN (IsColumnListChanging = 1
                                                        OR IsFilterChanging = 1
                                                        OR IsClusteredChanging = 1
                                                        OR IsPartitioningChanging = 1)
                                                THEN 1
                                                ELSE 0
                                            END,
        AreRebuildOptionsChanging       =   CASE    
                                                WHEN (IsDataCompressionChanging = 1)
                                                THEN 1
                                                ELSE 0
                                            END,
        AreRebuildOnlyOptionsChanging   =   CASE    
                                                WHEN (IsDataCompressionChanging = 1)
                                                THEN 1
                                                ELSE 0
                                            END

    /*******************************        FOR ESTIMATING INDEX SIZE (START) *******************************************/
    /*******************************        FOR ESTIMATING INDEX SIZE (END) *******************************************/
--END

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_UpdateData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('16e59ca5-b542-5d99-a9ea-68cc01410d2c' AS UNIQUEIDENTIFIER), 'E097767DE2AE0DD5B2ACEB1FD4394226C6815549720A12DD241F79AADE56C0CE', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_UpdateData.sql", ID: {16e59ca5-b542-5d99-a9ea-68cc01410d2c} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd92c30f-297f-555a-bf09-fc215de9a168' AS UNIQUEIDENTIFIER) AND [script_checksum] = '631E43ADE714F0D1833FFB1BC05342E7C4BB313792BC3F527FEE0522103A5313')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclVarColSize.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclVarColSize.sql", ID: {cd92c30f-297f-555a-bf09-fc215de9a168} *****';

GO


--- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclVarColSize.sql" -----
GO
IF OBJECT_ID('[DOI].[fnEstimateIndexSize_InclVarColSize]') IS NOT NULL
	DROP FUNCTION [DOI].[fnEstimateIndexSize_InclVarColSize];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   FUNCTION [DOI].[fnEstimateIndexSize_InclVarColSize]()

RETURNS TABLE 
WITH NATIVE_COMPILATION, SCHEMABINDING  
AS   

/*
    SELECT * FROM DOI.fnEstimateIndexSize_InclVarColSize()   
*/

RETURN  (
            SELECT  IRS.DatabaseName,
                    IRS.SchemaName,
                    IRS.TableName,
                    IRS.IndexName,
                    COUNT(*) AS NumInclVarCols,
                    SUM(c.max_length) AS VarInclColSize
--select count(*)
            FROM DOI.IndexesRowStore IRS
                INNER JOIN DOI.IndexColumns IRSC ON IRS.DatabaseName = IRSC.DatabaseName
                    AND IRS.SchemaName = IRSC.SchemaName
                    AND IRS.TableName = IRSC.TableName
                    AND IRS.IndexName = IRSC.IndexName
                INNER JOIN DOI.SysSchemas s ON IRS.SchemaName = s.name
                INNER JOIN DOI.SysTables t ON IRS.TableName = t.name
                    AND t.schema_id = s.schema_id
                INNER JOIN DOI.SysColumns c ON c.object_id = t.OBJECT_ID
                    AND IRSC.ColumnName = c.name
                INNER JOIN DOI.SysTypes ty ON ty.user_type_id = c.user_type_id
            WHERE c.object_id = t.object_id
                AND ty.name IN ('VARCHAR', 'NVARCHAR', 'TEXT', 'NTEXT', 'VARBINARY', 'FLOAT', 'DECIMAL', 'NUMERIC')
                AND IRSC.IsIncludedColumn = 1
            GROUP BY    IRS.DatabaseName,
                        IRS.SchemaName,
                        IRS.TableName,
                        IRS.IndexName
        )
GO

GO
---- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclVarColSize.sql" ------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclVarColSize.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('cd92c30f-297f-555a-bf09-fc215de9a168' AS UNIQUEIDENTIFIER), '631E43ADE714F0D1833FFB1BC05342E7C4BB313792BC3F527FEE0522103A5313', 'Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclVarColSize.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclVarColSize.sql", ID: {cd92c30f-297f-555a-bf09-fc215de9a168} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d65d737d-542e-59a3-b6c0-b947a6d6a8f0' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'EDABD2F25659A8EFB1C184AB5AFDB69BCB5DB769A2B93CC727EE39987D2FDC95')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclFixedColSize.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclFixedColSize.sql", ID: {d65d737d-542e-59a3-b6c0-b947a6d6a8f0} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclFixedColSize.sql" ----
GO
IF OBJECT_ID('[DOI].[fnEstimateIndexSize_InclFixedColSize]') IS NOT NULL
	DROP FUNCTION [DOI].[fnEstimateIndexSize_InclFixedColSize];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   FUNCTION [DOI].[fnEstimateIndexSize_InclFixedColSize]()   

RETURNS TABLE 
WITH NATIVE_COMPILATION, SCHEMABINDING  
AS   

/*
    SELECT * FROM DOI.fnEstimateIndexSize_InclFixedColSize()   
*/

RETURN  (
            SELECT  IRS.DatabaseName,
                    IRS.SchemaName,
                    IRS.TableName,
                    IRS.IndexName,
                    COUNT(*) AS NumInclFixedCols,
                    SUM(c.max_length) AS FixedInclColSize
--select count(*)
            FROM DOI.IndexesRowStore IRS
                INNER JOIN DOI.IndexColumns IRSC ON IRS.DatabaseName = IRSC.DatabaseName
                    AND IRS.SchemaName = IRSC.SchemaName
                    AND IRS.TableName = IRSC.TableName
                    AND IRS.IndexName = IRSC.IndexName
                INNER JOIN DOI.SysSchemas s ON IRS.SchemaName = s.name
                INNER JOIN DOI.SysTables t ON IRS.TableName = t.name
                    AND t.schema_id = s.schema_id
                INNER JOIN DOI.SysColumns c ON c.object_id = t.OBJECT_ID
                    AND IRSC.ColumnName = c.name
                INNER JOIN DOI.SysTypes ty ON ty.user_type_id = c.user_type_id
            WHERE c.object_id = t.object_id
                AND ty.name NOT IN ('VARCHAR', 'NVARCHAR', 'TEXT', 'NTEXT', 'VARBINARY', 'FLOAT', 'DECIMAL', 'NUMERIC')
                AND IRSC.IsIncludedColumn = 1
            GROUP BY    IRS.DatabaseName,
                        IRS.SchemaName,
                        IRS.TableName,
                        IRS.IndexName
        )
GO

GO
--- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclFixedColSize.sql" -----


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclFixedColSize.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('d65d737d-542e-59a3-b6c0-b947a6d6a8f0' AS UNIQUEIDENTIFIER), 'EDABD2F25659A8EFB1C184AB5AFDB69BCB5DB769A2B93CC727EE39987D2FDC95', 'Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclFixedColSize.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnEstimateIndexSize_InclFixedColSize.sql", ID: {d65d737d-542e-59a3-b6c0-b947a6d6a8f0} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3b7b9424-6baa-594a-92e2-8ba2f8800786' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4C12E5BCB5817445A53C8160202D008248BE0C95F5838BC1BDA76DC5798BADB0')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyVarColSize.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyVarColSize.sql", ID: {3b7b9424-6baa-594a-92e2-8ba2f8800786} *****';

GO


---- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyVarColSize.sql" -----
GO
IF OBJECT_ID('[DOI].[fnEstimateIndexSize_KeyVarColSize]') IS NOT NULL
	DROP FUNCTION [DOI].[fnEstimateIndexSize_KeyVarColSize];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   FUNCTION [DOI].[fnEstimateIndexSize_KeyVarColSize]()   

RETURNS TABLE 
WITH NATIVE_COMPILATION, SCHEMABINDING  
AS   

/*
    SELECT * FROM DOI.fnEstimateIndexSize_KeyVarColSize()   
*/

RETURN  (
            SELECT  IRS.DatabaseName,
                    IRS.SchemaName,
                    IRS.TableName,
                    IRS.IndexName,
                    COUNT(*) AS NumVarCols,
                    SUM(c.max_length) AS VarColSize
            FROM DOI.IndexesRowStore IRS
                INNER JOIN DOI.IndexColumns IRSC ON IRS.DatabaseName = IRSC.DatabaseName
                    AND IRS.SchemaName = IRSC.SchemaName
                    AND IRS.TableName = IRSC.TableName
                    AND IRS.IndexName = IRSC.IndexName
                INNER JOIN DOI.SysSchemas s ON IRS.SchemaName = s.name
                INNER JOIN DOI.SysTables t ON IRS.TableName = t.name
                    AND t.schema_id = s.schema_id
                INNER JOIN DOI.SysColumns c ON c.object_id = t.OBJECT_ID
                    AND IRSC.ColumnName = c.name
                INNER JOIN DOI.SysTypes ty ON ty.user_type_id = c.user_type_id
            WHERE c.object_id = t.object_id
                AND ty.name IN ('VARCHAR', 'NVARCHAR', 'TEXT', 'NTEXT', 'VARBINARY', 'FLOAT', 'DECIMAL', 'NUMERIC')
                AND IRSC.IsKeyColumn = 1
            GROUP BY    IRS.DatabaseName,
                        IRS.SchemaName,
                        IRS.TableName,
                        IRS.IndexName
        )
GO

GO
----- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyVarColSize.sql" ------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyVarColSize.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('3b7b9424-6baa-594a-92e2-8ba2f8800786' AS UNIQUEIDENTIFIER), '4C12E5BCB5817445A53C8160202D008248BE0C95F5838BC1BDA76DC5798BADB0', 'Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyVarColSize.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyVarColSize.sql", ID: {3b7b9424-6baa-594a-92e2-8ba2f8800786} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('29bb594b-3e21-5e73-b2e9-4860b0244853' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'C87CF3A01C98BED8D94C00370FD0040DA7F4D7180D8BC0289C905375AF5B0284')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyFixedColSize.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyFixedColSize.sql", ID: {29bb594b-3e21-5e73-b2e9-4860b0244853} *****';

GO


--- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyFixedColSize.sql" ----
GO
IF OBJECT_ID('[DOI].[fnEstimateIndexSize_KeyFixedColSize]') IS NOT NULL
	DROP FUNCTION [DOI].[fnEstimateIndexSize_KeyFixedColSize];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   FUNCTION [DOI].[fnEstimateIndexSize_KeyFixedColSize]()   

RETURNS TABLE 
WITH NATIVE_COMPILATION, SCHEMABINDING  
AS   

/*
    SELECT * FROM DOI.fnEstimateIndexSize_KeyFixedColSize()   
*/

RETURN  (
            SELECT  IRS.DatabaseName,
                    IRS.SchemaName,
                    IRS.TableName,
                    IRS.IndexName,
                    COUNT(*) AS NumFixedCols,
                    SUM(c.max_length) AS FixedColSize
            FROM DOI.IndexesRowStore IRS
                INNER JOIN DOI.IndexColumns IRSC ON IRS.DatabaseName = IRSC.DatabaseName
                    AND IRS.SchemaName = IRSC.SchemaName
                    AND IRS.TableName = IRSC.TableName
                    AND IRS.IndexName = IRSC.IndexName
                INNER JOIN DOI.SysSchemas s ON IRS.SchemaName = s.name
                INNER JOIN DOI.SysTables t ON IRS.TableName = t.name
                    AND t.schema_id = s.schema_id
                INNER JOIN DOI.SysColumns c ON c.object_id = t.OBJECT_ID
                    AND IRSC.ColumnName = c.name
                INNER JOIN DOI.SysTypes ty ON ty.user_type_id = c.user_type_id
            WHERE c.object_id = t.object_id
                AND ty.name NOT IN ('VARCHAR', 'NVARCHAR', 'TEXT', 'NTEXT', 'VARBINARY', 'FLOAT', 'DECIMAL', 'NUMERIC')
                AND IRSC.IsKeyColumn = 1
            GROUP BY    IRS.DatabaseName,
                        IRS.SchemaName,
                        IRS.TableName,
                        IRS.IndexName
        )
GO

GO
---- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyFixedColSize.sql" -----


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyFixedColSize.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('29bb594b-3e21-5e73-b2e9-4860b0244853' AS UNIQUEIDENTIFIER), 'C87CF3A01C98BED8D94C00370FD0040DA7F4D7180D8BC0289C905375AF5B0284', 'Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyFixedColSize.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnEstimateIndexSize_KeyFixedColSize.sql", ID: {29bb594b-3e21-5e73-b2e9-4860b0244853} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0110741a-4233-558c-95cb-a48ab650cbbe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'DCB4D061235664A4B7243065D351DB45C08EBD9C2E8AB7889A572D13A78E72F8')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnEstimateIndexSize_AllColSize.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnEstimateIndexSize_AllColSize.sql", ID: {0110741a-4233-558c-95cb-a48ab650cbbe} *****';

GO


----- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnEstimateIndexSize_AllColSize.sql" -------
GO
-- <Migration ID="0110741a-4233-558c-95cb-a48ab650cbbe" TransactionHandling="Custom" />
IF OBJECT_ID('[DOI].[fnEstimateIndexSize_AllColSize]') IS NOT NULL
	DROP FUNCTION [DOI].[fnEstimateIndexSize_AllColSize];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE OR ALTER FUNCTION [DOI].[fnEstimateIndexSize_AllColSize](
    @DatabaseName SYSNAME,
    @SchemaName SYSNAME, 
    @TableName SYSNAME)  
    
/*
    set statistics io on
    set statistics time on

    SELECT *, DOI.fnEstimateIndexSize_AllColSize(DatabaseName, schemaname, tablename)
    from DOI.Tables

*/     

RETURNS INT
WITH NATIVE_COMPILATION, SCHEMABINDING  
AS   
BEGIN ATOMIC WITH (TRANSACTION ISOLATION LEVEL = SNAPSHOT, LANGUAGE = N'English')  
  
    DECLARE @IndexAllColSize SYSNAME;
  
    SELECT @IndexAllColSize = CAST(avg_record_size_in_bytes AS INT)
    FROM DOI.SysIndexPhysicalStats IPS
        INNER JOIN DOI.SysDatabases d ON IPS.database_id = d.database_id
        INNER JOIN DOI.systables t ON IPS.OBJECT_ID = t.object_id
        INNER JOIN DOI.sysschemas s ON t.SCHEMA_ID = s.schema_id
    WHERE d.NAME = @DatabaseName
        AND S.NAME = @SchemaName
        AND t.name = @TableName
    AND IPS.index_type_desc IN ('CLUSTERED INDEX', 'HEAP')
                                                             
    RETURN (@IndexAllColSize);  
  
END  
GO

GO
------ END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnEstimateIndexSize_AllColSize.sql" --------


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnEstimateIndexSize_AllColSize.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('0110741a-4233-558c-95cb-a48ab650cbbe' AS UNIQUEIDENTIFIER), 'DCB4D061235664A4B7243065D351DB45C08EBD9C2E8AB7889A572D13A78E72F8', 'Programmable Objects\Functions\DOI.fnEstimateIndexSize_AllColSize.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnEstimateIndexSize_AllColSize.sql", ID: {0110741a-4233-558c-95cb-a48ab650cbbe} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0903bb42-c2c2-5007-b5b3-71ff1e8b1351' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2EDF4CFC08FF4FD2AEB0D0C048ED088C035AB1A718E9093121F0F5684D6573E6')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_UpdateData.sql", ID: {0903bb42-c2c2-5007-b5b3-71ff1e8b1351} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_UpdateData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexesRowStore_UpdateData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexesRowStore_UpdateData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

--DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexesRowStore_UpdateData]
--go

CREATE PROCEDURE [DOI].[spRefreshMetadata_User_IndexesRowStore_UpdateData]

--WITH NATIVE_COMPILATION, SCHEMABINDING
AS

--BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)
    /************************************************   SQL SERVER METADATA (START) *******************************************/

    --ROW COUNTS
    DECLARE @FilteredRowCounts FilteredRowCountsTT


    DECLARE @SQL VARCHAR(MAX) = ''

    SELECT @SQL += CASE @SQL WHEN '' THEN '' ELSE CHAR(13) + CHAR(10) + 'UNION ALL' + CHAR(13) + CHAR(10) END + 'SELECT ''' + DatabaseName + ''' AS DatabaseName, ''' + SchemaName + ''' AS SchemaName, ''' + TableName + ''' AS TableName, ''' + IndexName + ''' AS IndexName, COUNT(*) as NumRows FROM ' + DatabaseName + '.' + SchemaName + '.' + TableName + ' WHERE ' + FilterPredicate_Desired
    FROM (  SELECT IRS.DatabaseName, IRS.SchemaName, IRS.TableName, IRS.IndexName, IRS.FilterPredicate_Desired
            FROM DOI.IndexesRowStore IRS
            WHERE IsFiltered_Desired = 1)x

    INSERT @FilteredRowCounts        
    EXEC(@SQL)


    UPDATE IRS
    SET IsIndexMissingFromSQLServer = 1
    FROM DOI.IndexesRowStore IRS
    WHERE NOT EXISTS(	SELECT 'True' 
					    FROM DOI.SysSchemas s 
                            INNER JOIN DOI.SysDatabases d ON s.database_id = d.database_id
						    INNER JOIN DOI.SysTables t ON d.database_id = t.database_id
                                AND t.schema_id = s.schema_id 
						    INNER JOIN DOI.SysIndexes i ON i.database_id = d.database_id
                                AND i.object_id = t.object_id
					    WHERE d.name = IRS.DatabaseName
                            AND s.name = IRS.SchemaName
						    AND t.name = IRS.TableName
						    AND i.name = IRS.IndexName)

    UPDATE IRS
    SET NumRows_Actual = T.NumRows
    FROM DOI.IndexesRowStore IRS
        INNER JOIN @FilteredRowCounts T ON IRS.DatabaseName = T.DatabaseName
            AND IRS.SchemaName = T.SchemaName
            AND IRS.TableName = T.TableName
            AND IRS.IndexName = T.IndexName
    WHERE IsFiltered_Desired = 1

    UPDATE IRS
    SET NumRows_Actual = p.NumRows
    --SELECT p.*
    FROM DOI.IndexesRowStore IRS
        CROSS APPLY (SELECT s.name AS SchemaName, t.name AS TableName, SUM(p.rows) AS NumRows
                    FROM DOI.SysSchemas s 
                        INNER JOIN DOI.SysTables t ON s.schema_id = t.schema_id
                        INNER JOIN DOI.SysPartitions p ON p.object_id = t.object_id
                    WHERE p.index_id IN (0,1)
                        AND s.name = IRS.SchemaName COLLATE DATABASE_DEFAULT
                        AND t.name = IRS.TableName COLLATE DATABASE_DEFAULT
                    GROUP BY s.name , t.name)p
    WHERE IsFiltered_Desired = 0



    --INDEX SIZING
    UPDATE IRS
    SET IndexSizeMB_Actual = ISNULL(TS.TotalSpaceMBDec,0),
        DriveLetter = TS.DriveLetter,
        IsIndexLarge =  CASE 
                            WHEN TS.TotalSpaceMBDec > TS.SizeCutoffValue
                            THEN 1
                            ELSE 0
                        END,
        NumPages_Actual = ISNULL(TS.NumPages,0),
        IndexMeetsMinimumSize = ISNULL(TS.IndexMeetsMinimumSize,0),
        OptionDataCompression_Actual = TS.data_compression_desc
    FROM DOI.IndexesRowStore IRS
        OUTER APPLY (   SELECT  s.NAME AS SchemaName,
                                t.NAME AS TableName,
                                i.NAME AS IndexName,
                                MAX(df.physical_name) AS FilePath, 
		                        MAX(LEFT(vs.volume_mount_point, 1)) AS DriveLetter,
                                SUM(a.total_pages) AS NumPages,
                                CAST(((SUM(a.total_pages) * 8) / 1024.00) AS DECIMAL(10,2)) AS TotalSpaceMBDec,
			                    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS INT) AS UsedSpaceMB, 
			                    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS INT) AS UsedSpaceMBDec, 
			                    CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB,
			                    MAX(SS1.SizeCutoffValue ) AS SizeCutoffValue,
                                --SUM(p.rows) AS NumRows,  this is done above....
                                MAX(p.data_compression_desc) COLLATE DATABASE_DEFAULT AS data_compression_desc,
                                CASE WHEN SUM(a.total_pages) > MAX(SS2.MinNumPages) THEN 1 ELSE 0 END AS IndexMeetsMinimumSize
		                FROM DOI.systables t 
                            INNER JOIN DOI.SysSchemas s ON t.SCHEMA_ID = s.SCHEMA_ID
                            INNER JOIN DOI.SysIndexes i ON i.OBJECT_ID = t.object_id
                            INNER JOIN DOI.SysPartitions p ON p.OBJECT_ID = t.OBJECT_ID
                                AND p.index_id = I.index_id
                            INNER JOIN DOI.SysAllocationUnits a ON p.hobt_id = a.container_id
                            INNER JOIN DOI.SysDatabaseFiles df ON df.data_space_id = a.data_space_id
			                CROSS JOIN (SELECT CAST(SettingValue AS INT) AS SizeCutoffValue
						                FROM DOI.DOISettings 
						                WHERE SettingName = 'LargeTableCutoffValue')SS1
                            CROSS JOIN (SELECT CAST(SettingValue AS INT) AS MinNumPages
                                        FROM DOI.DOISettings 
                                        WHERE SettingName = 'MinNumPagesForIndexDefrag')SS2
                            CROSS JOIN (SELECT database_id FROM DOI.SysDatabases WHERE name = IRS.DatabaseName) DB
			                INNER JOIN DOI.SysDmOsVolumeStats vs ON vs.database_id = DB.database_id
                                AND vs.FILE_ID = df.FILE_ID
		                WHERE s.NAME = IRS.SchemaName
                            AND t.NAME = IRS.TableName
                            AND i.NAME = IRS.IndexName
		                GROUP BY s.name, t.name, i.name) TS

    --FRAG
    UPDATE IRS
    SET Fragmentation = F.Fragmentation,
        FragmentationType = CASE
                                WHEN IRS.NumPages_Actual > SS.MinNumPages AND F.Fragmentation > 30 
				                THEN 'Heavy' 
				                WHEN IRS.NumPages_Actual > SS.MinNumPages AND F.Fragmentation BETWEEN 5 AND 30 
                                THEN 'Light' 
				                ELSE 'None' 
                            END 
    FROM DOI.IndexesRowStore IRS
        CROSS JOIN (SELECT CAST(SettingValue AS INT) AS MinNumPages
                    FROM DOI.DOISettings 
                    WHERE SettingName = 'MinNumPagesForIndexDefrag')SS
        CROSS APPLY (   SELECT  Fragmentation
                        FROM DOI.fnActualIndex_Frag() FN
                        WHERE FN.DatabaseName = IRS.DatabaseName
                            AND FN.SchemaName = IRS.SchemaName
                            AND FN.TableName = IRS.TableName
                            AND FN.IndexName = IRS.IndexName) F

    --SysIndexes, and friends...
    UPDATE IRS
    SET IsUnique_Actual = i.is_unique,
        IsPrimaryKey_Actual = i.is_primary_key,
        IsUniqueConstraint_Actual = i.is_unique_constraint,
        IsClustered_Actual = CASE WHEN i.type_desc = 'CLUSTERED' THEN 1 ELSE 0 END,
        KeyColumnList_Actual = i.key_column_list,
        IncludedColumnList_Actual = i.included_column_list,
        IsFiltered_Actual = i.has_filter,
        FilterPredicate_Actual = i.filter_definition,
        FillFactor_Actual = i.fill_factor,
        OptionPadIndex_Actual = i.is_padded,
        OptionIgnoreDupKey_Actual = i.ignore_dup_key,
        OptionAllowRowLocks_Actual = i.allow_row_locks,
        OptionAllowPageLocks_Actual = i.allow_page_locks,
        Storage_Actual = ActualDS.name,
        StorageType_Actual = ActualDS.type_desc,
        StorageType_Desired = DesiredDS.type_desc,
        IsStorageChanging = CASE WHEN ActualDS.name <> DesiredDS.name THEN 1 ELSE 0 END,
        IndexHasLOBColumns = i.has_LOB_columns,
        OptionStatisticsIncremental_Actual = s2.is_incremental,
        OptionStatisticsNoRecompute_Actual = s2.no_recompute
    FROM DOI.Tables TTP
        INNER JOIN DOI.SysDatabases d on d.name = TTP.DatabaseName
	    INNER JOIN DOI.SysSchemas s ON D.database_id = s.database_id
            AND TTP.SchemaName = s.name
	    INNER JOIN DOI.SysTables t ON s.database_id = t.database_id
            AND TTP.TableName = t.name
		    AND s.schema_id = t.schema_id
	    INNER JOIN DOI.SysIndexes i ON t.database_id = i.database_id
            AND i.object_id = t.object_id
        INNER JOIN DOI.SysStats s2 ON s2.database_id = i.database_id
            AND s2.object_id = I.object_id
		    AND s2.stats_id = i.index_id
	    INNER JOIN DOI.IndexesRowStore IRS ON TTP.DatabaseName = IRS.DatabaseName
            AND TTP.SchemaName = IRS.SchemaName
		    AND TTP.TableName = IRS.TableName
		    AND IRS.IndexName = i.name	
	    INNER JOIN DOI.SysDataSpaces ActualDS ON ActualDS.database_id = i.database_id
            AND ActualDS.data_space_id = I.data_space_id
	    INNER JOIN DOI.SysDataSpaces DesiredDS ON DesiredDS.database_id = d.database_id
            AND DesiredDS.name = IRS.Storage_Desired

    UPDATE IRS
    SET     PartitionFunction_Desired = NewPf.name,
            PartitionFunction_Actual = ExistingPf.name
    FROM DOI.IndexesRowStore IRS 
        INNER JOIN DOI.SysDatabases d on d.name = IRS.DatabaseName
	    LEFT JOIN DOI.SysPartitionSchemes ExistingPs ON d.database_id = ExistingPs.database_id
            AND IRS.Storage_Actual = ExistingPs.name
	    LEFT JOIN DOI.SysPartitionFunctions ExistingPf ON d.database_id = ExistingPf.database_id
            AND ExistingPs.function_id = ExistingPf.function_id
	    LEFT JOIN DOI.SysPartitionSchemes NewPs ON NewPs.database_id = D.database_id
            AND NewPs.name = IRS.Storage_Desired
	    LEFT JOIN DOI.SysPartitionFunctions NewPf ON NewPf.database_id = NewPs.database_id
            AND NewPf.function_id = NewPs.function_id

    --CHANGE BITS

    UPDATE IRS
    SET IsUniquenessChanging = CASE WHEN IRS.IsUnique_Desired <> IRS.IsUnique_Actual THEN 1 ELSE 0 END, 
	    IsPrimaryKeyChanging =	CASE WHEN IRS.IsPrimaryKey_Desired <> IRS.IsPrimaryKey_Actual THEN 1 ELSE 0 END,
	    IsKeyColumnListChanging	= CASE WHEN IRS.KeyColumnList_Desired <>IRS.KeyColumnList_Actual THEN 1 ELSE 0 END, 
	    IsIncludedColumnListChanging = CASE WHEN ISNULL(IRS.IncludedColumnList_Desired, '') <> ISNULL(IRS.IncludedColumnList_Actual, '') THEN 1 ELSE 0 END, 
	    IsFilterChanging = CASE WHEN ISNULL(IRS.FilterPredicate_Desired, '') <> ISNULL(IRS.FilterPredicate_Actual, '') THEN 1 ELSE 0 END, 
	    IsClusteredChanging = CASE WHEN IRS.IsClustered_Desired <> CASE IRS.IsClustered_Actual WHEN 1 THEN 1 ELSE 0 END  THEN 1 ELSE 0 END, 
	    IsPartitioningChanging =    CASE 
				                        WHEN IRS.IsStorageChanging = 1 AND T.IntendToPartition = 1 
				                        THEN 1 
				                        ELSE 0 
			                        END, 
	    IsPadIndexChanging = CASE WHEN IRS.OptionPadIndex_Desired <> IRS.OptionPadIndex_Actual THEN 1 ELSE 0 END, 
        IsFillfactorChanging = CASE WHEN IRS.Fillfactor_Desired <> IRS.Fillfactor_Actual THEN 1 ELSE 0 END, 
	    IsIgnoreDupKeyChanging = CASE WHEN IRS.OptionIgnoreDupKey_Desired <> IRS.OptionIgnoreDupKey_Actual THEN 1 ELSE 0 END, 
	    IsStatisticsNoRecomputeChanging = CASE WHEN IRS.OptionStatisticsNoRecompute_Desired <> IRS.OptionStatisticsNoRecompute_Actual THEN 1 ELSE 0 END, 
	    IsStatisticsIncrementalChanging = CASE WHEN IRS.OptionStatisticsIncremental_Desired <> IRS.OptionStatisticsIncremental_Actual THEN 1 ELSE 0 END,  --if the table is partitioned, ignore this check.
	    IsAllowRowLocksChanging	= CASE WHEN IRS.OptionAllowRowLocks_Desired <> IRS.OptionAllowRowLocks_Actual THEN 1 ELSE 0 END, 
	    IsAllowPageLocksChanging = CASE WHEN IRS.OptionAllowPageLocks_Desired <> IRS.OptionAllowPageLocks_Actual THEN 1 ELSE 0 END, 
	    IsDataCompressionChanging = CASE WHEN IRS.OptionDataCompression_Desired <> IRS.OptionDataCompression_Actual THEN 1 ELSE 0 END
    FROM DOI.IndexesRowStore IRS
        INNER JOIN DOI.Tables T ON IRS.DatabaseName = T.DatabaseName
            AND IRS.SchemaName = T.SchemaName
            AND IRS.TableName = T.TableName

    /*			
			    ,ISNULL(i.has_LOB_columns, 0) AS IndexHasLOBColumns
    */

    UPDATE DOI.IndexesRowStore
    SET AreDropRecreateOptionsChanging =    CASE
                                                WHEN (IsUniquenessChanging = 1
                                                        OR IsKeyColumnListChanging = 1
                                                        OR IsIncludedColumnListChanging = 1
                                                        OR IsFilterChanging = 1
                                                        OR IsClusteredChanging = 1
                                                        OR IsPartitioningChanging = 1)
                                                THEN 1
                                                ELSE 0
                                            END,
        AreRebuildOptionsChanging =         CASE    
                                                WHEN (IsPadIndexChanging = 1
                                                        OR IsFillfactorChanging = 1
                                                        OR IsIgnoreDupKeyChanging = 1
                                                        OR IsStatisticsNoRecomputeChanging = 1
                                                        OR IsStatisticsIncrementalChanging = 1
                                                        OR IsAllowRowLocksChanging = 1
                                                        OR IsAllowPageLocksChanging = 1
                                                        OR IsDataCompressionChanging = 1)
                                                THEN 1
                                                ELSE 0
                                            END,
        AreRebuildOnlyOptionsChanging =     CASE    
                                                WHEN (IsPadIndexChanging = 1
                                                        OR IsFillfactorChanging = 1
                                                        OR IsStatisticsIncrementalChanging = 1
                                                        OR IsDataCompressionChanging = 1)
                                                THEN 1
                                                ELSE 0
                                            END,
        AreSetOptionsChanging =             CASE
                                                WHEN (IsIgnoreDupKeyChanging = 1
                                                        OR IsStatisticsNoRecomputeChanging = 1
                                                        OR IsAllowRowLocksChanging = 1
                                                        OR IsAllowPageLocksChanging = 1)
                                                THEN 1
                                                ELSE 0
                                            END              
    FROM DOI.IndexesRowStore IRS


    /*******************************        FOR ESTIMATING INDEX SIZE (START) *******************************************/
    UPDATE DOI.IndexesRowStore
    SET AllColsInTableSize_Estimated = ISNULL(DOI.fnEstimateIndexSize_AllColSize(DatabaseName, schemaname, tablename), 0)
    --NEED TO HANDLE THIS NULL VALUE INSIDE OF FUNCTION!!!

    UPDATE IRS
    SET IRS.NumFixedKeyCols_Estimated = FN.NumFixedCols,
        IRS.FixedKeyColsSize_Estimated = FN.FixedColSize
    FROM DOI.IndexesRowStore IRS
        CROSS APPLY (   SELECT * 
                        FROM DOI.fnEstimateIndexSize_KeyFixedColSize() FN
                        WHERE IRS.DatabaseName = FN.DatabaseName
                            AND IRS.SchemaName = FN.SchemaName
                            AND IRS.TableName = FN.TableName
                            AND IRS.IndexName = FN.IndexName) FN

    UPDATE IRS
    SET IRS.NumVarKeyCols_Estimated = FN.NumVarCols,
        IRS.VarKeyColsSize_Estimated = FN.VarColSize
    FROM DOI.IndexesRowStore IRS
        CROSS APPLY (   SELECT * 
                        FROM DOI.fnEstimateIndexSize_KeyVarColSize() FN
                        WHERE IRS.DatabaseName = FN.DatabaseName
                            AND IRS.SchemaName = FN.SchemaName
                            AND IRS.TableName = FN.TableName
                            AND IRS.IndexName = FN.IndexName) FN

    UPDATE IRS
    SET IRS.NumFixedInclCols_Estimated = FN.NumInclFixedCols,
        IRS.FixedInclColsSize_Estimated = FN.FixedInclColSize
    FROM DOI.IndexesRowStore IRS
        CROSS APPLY (   SELECT * 
                        FROM DOI.fnEstimateIndexSize_InclFixedColSize() FN
                        WHERE IRS.DatabaseName = FN.DatabaseName
                            AND IRS.SchemaName = FN.SchemaName
                            AND IRS.TableName = FN.TableName
                            AND IRS.IndexName = FN.IndexName) FN

    UPDATE IRS
    SET IRS.NumVarInclCols_Estimated = FN.NumInclVarCols,
        IRS.VarInclColsSize_Estimated = FN.VarInclColSize
    FROM DOI.IndexesRowStore IRS
        CROSS APPLY (   SELECT * 
                        FROM DOI.fnEstimateIndexSize_InclVarColSize() FN
                        WHERE IRS.DatabaseName = FN.DatabaseName
                            AND IRS.SchemaName = FN.SchemaName
                            AND IRS.TableName = FN.TableName
                            AND IRS.IndexName = FN.IndexName) FN


    UPDATE DOI.IndexesRowStore
    SET KeyColsSize_Estimated   = FixedKeyColsSize_Estimated  + VarKeyColsSize_Estimated,
        InclColsSize_Estimated  = FixedInclColsSize_Estimated + VarInclColsSize_Estimated,
        FixedColsSize_Estimated = FixedKeyColsSize_Estimated  + FixedInclColsSize_Estimated,
        VarColsSize_Estimated   = VarKeyColsSize_Estimated    + VarInclColsSize_Estimated,
        NumKeyCols_Estimated    = NumFixedKeyCols_Estimated   + NumVarKeyCols_Estimated,
        NumInclCols_Estimated   = NumFixedInclCols_Estimated  + NumVarInclCols_Estimated,
        NumFixedCols_Estimated  = NumFixedKeyCols_Estimated   + NumFixedInclCols_Estimated,
        NumVarCols_Estimated    = NumVarKeyCols_Estimated     + NumVarInclCols_Estimated

    UPDATE DOI.IndexesRowStore
    SET ColsSize_Estimated = KeyColsSize_Estimated + InclColsSize_Estimated,
        NumCols_Estimated = NumKeyCols_Estimated + NumInclCols_Estimated,
        NullBitmap_Estimated = CAST((((ISNULL(NumKeyCols_Estimated,0) + ISNULL(NumInclCols_Estimated, 0)) + 7)/8) + 2 AS INT),
        Uniqueifier_Estimated =   CASE 
                            WHEN IsClustered_Desired = 1 
                                AND IsUnique_Desired = 0 
                            THEN 4 
                            ELSE 0 
                        END
                             
    UPDATE DOI.IndexesRowStore
    SET TotalRowSize_Estimated =  CASE
                            WHEN IsClustered_Desired = 1
                            THEN FixedKeyColsSize_Estimated + VarKeyColsSize_Estimated + NullBitmap_Estimated + 1 + 6
                            WHEN IsClustered_Desired = 0
                            THEN FixedColsSize_Estimated + VarColsSize_Estimated
                        END + NullBitmap_Estimated + 4,
        NonClusteredIndexRowLocator_Estimated =   CASE
                                            WHEN IsClustered_Desired = 0 AND IsUnique_Desired = 0
                                            THEN 0 --when NC index is over a CDX, it's the clustering key.  If it's over a heap, it's the heap RID.
                                            ELSE 0 
                                        END

    UPDATE DOI.IndexesRowStore 
    SET NumFreeRowsPerPage_Estimated = FLOOR(8096 * ((100 - [Fillfactor_Desired]) / 100.00)) / (TotalRowSize_Estimated),
        NumRowsPerPage_Estimated = FLOOR(8096 / (TotalRowSize_Estimated + 2)) * 1.00

    UPDATE DOI.IndexesRowStore 
    SET NumLeafPages_Estimated = CEILING(NumRows_Actual / (NumRowsPerPage_Estimated - NumFreeRowsPerPage_Estimated))

    UPDATE DOI.IndexesRowStore
    SET LeafSpaceUsed_Estimated = (NumLeafPages_Estimated) * 8192.00,
        LeafSpaceUsedMB_Estimated = CAST((((NumLeafPages_Estimated * 8192.00)/ 1024.00)/ 1024.00) AS DECIMAL(10,2)),
        NumNonLeafLevelsInIndex_Estimated = CASE
                                                WHEN CEILING((NumRows_Actual / (NumRowsPerPage_Estimated * 1.00)) - NumFreeRowsPerPage_Estimated) > 1
                                                THEN CEILING(1 + CAST(LOG((NumLeafPages_Estimated/(NumRowsPerPage_Estimated * 1.00)), NumRowsPerPage_Estimated) AS DECIMAL(10,2)))
                                                ELSE 1
                                            END

    UPDATE IRS
    SET PKColsSize_Estimated = PKColsSize.PKColsSize
    FROM DOI.IndexesRowStore IRS
        CROSS APPLY (   SELECT ISNULL(SUM(c.max_length + c.precision + scale), 0) AS PKColsSize
                        FROM DOI.SysIndexes i
                            INNER JOIN DOI.SysIndexColumns ic ON ic.object_id = i.object_id
                                AND ic.index_id = i.index_id
                            INNER JOIN DOI.SysColumns c ON c.object_id = ic.object_id
                                AND c.column_id = ic.column_id
                            INNER JOIN DOI.SysTables t ON i.object_id = t.object_id
                            INNER JOIN DOI.SysSchemas s ON t.schema_id = s.schema_id
                        WHERE s.name = IRS.SchemaName
                            AND t.name = IRS.TableName
                            AND i.is_primary_key = 1) PKColsSize


    UPDATE DOI.IndexesRowStore
    SET  NumIndexPages_Estimated =  CASE NumNonLeafLevelsInIndex_Estimated
                                        WHEN 1 --for tables up to 133 rows
                                        THEN CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)
                                        WHEN 2 --for tables up to 17.6K rows
                                        THEN CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated) --leaf level
                                                + CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated) --first non-leaf
                                                + CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated) --second non-leaf
                                        WHEN 3 --for tables up to 2.3M rows
                                        THEN CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated) --leaf level
                                                + CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated) --first non-leaf
                                                + CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated) --second non-leaf
                                                + CEILING(CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)
                                        WHEN 4 --for tables up to 312M rows
                                        THEN CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated) --leaf level
                                                + CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated) --first non-leaf
                                                + CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated) --second non-leaf
                                                + CEILING(CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)
                                                + CEILING(CEILING(CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)
                                        WHEN 5 --for tables up to 41.6B rows
                                        THEN CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated) --leaf level
                                                + CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated) --first non-leaf
                                                + CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated) --second non-leaf
                                                + CEILING(CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)
                                                + CEILING(CEILING(CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)
                                                + CEILING(CEILING(CEILING(CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)
                                        WHEN 6 --for tables up to 5.5T rows
                                        THEN CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated) --leaf level
                                                + CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated) --first non-leaf
                                                + CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated) --second non-leaf
                                                + CEILING(CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)
                                                + CEILING(CEILING(CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)
                                                + CEILING(CEILING(CEILING(CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)
                                                + CEILING(CEILING(CEILING(CEILING(CEILING(CEILING(CEILING(NumLeafPages_Estimated/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)/NumRowsPerPage_Estimated)
                                        ELSE 0
                                    END + 1  --we add 1 for the root page.

    UPDATE DOI.IndexesRowStore
    SET IndexSizeMB_Estimated = CAST(CASE
                                        WHEN IsClustered_Desired = 1
                                        THEN (((LeafSpaceUsed_Estimated + (NumIndexPages_Estimated * 8192.00))/1024.00)/1024.00)
                                        ELSE ((((ColsSize_Estimated
                                                +   CASE 
                                                        WHEN IsPrimaryKey_Desired = 0 
                                                        THEN PKColsSize_Estimated 
                                                        ELSE 0 
                                                    END) * NumRows_Actual)/ 1024.00)/ 1024.00) 
                                    END AS DECIMAL(10,2))

    /*******************************        FOR ESTIMATING INDEX SIZE (END) *******************************************/
--END

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_UpdateData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('0903bb42-c2c2-5007-b5b3-71ff1e8b1351' AS UNIQUEIDENTIFIER), '2EDF4CFC08FF4FD2AEB0D0C048ED088C035AB1A718E9093121F0F5684D6573E6', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_UpdateData.sql", ID: {0903bb42-c2c2-5007-b5b3-71ff1e8b1351} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67d29018-b4a4-5d34-ae44-104246c90891' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B054B1ACE66275E434725C87AFBB2970FDFC25D4A9A3EBDBD3D0E984E98C5210')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_InsertData.sql", ID: {67d29018-b4a4-5d34-ae44-104246c90891} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_InsertData.sql" 
GO
-- <Migration ID="67d29018-b4a4-5d34-ae44-104246c90891" TransactionHandling="Custom"/>
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexesColumnStore_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexesColumnStore_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE PROCEDURE [DOI].[spRefreshMetadata_User_IndexesColumnStore_InsertData]

WITH NATIVE_COMPILATION, SCHEMABINDING
AS

BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)
    DELETE DOI.IndexesColumnStore
                                                                                                                                                                                                                                                                                                                                                                                                          --(DatabaseName        ,[SchemaName]	, [TableName]				, [IndexName]									, [IsClustered_Desired]	, [ColumnList_Desired]                                                                                                                                                                                  , [IsFiltered_Desired]	, [FilterPredicate_Desired]	, [OptionDataCompression_Desired]	, [OptionDataCompressionDelay_Desired]	, Storage_Desired				, PartitionColumn_Desired	)           
    INSERT DOI.[IndexesColumnStore] (DatabaseName        , [SchemaName]	, [TableName]				, [IndexName]									, [IsClustered_Desired]	, [ColumnList_Desired] , [IsFiltered_Desired]	, [FilterPredicate_Desired]	, [OptionDataCompression_Desired]	, [OptionDataCompressionDelay_Desired]	, Storage_Desired				, PartitionColumn_Desired	) VALUES	(N'PaymentReporting', N'dbo'		, N'JournalEntries'			, N'NCCI_JournalEntries_LedgerBalanceReport'	, 0				        , 'JournalEntryId,LiabilityId,TransactionType,Amount,TenantId,AccountId,AccountNumber,TransactionUtcDt,GLSegment,TenantAlias,CompanyId,CompanyCode,PayrollId,PayGroup,ProductCode,StateCode,AgencyCode' , 0				        , NULL				        , N'COLUMNSTORE'			        , 0							            , 'psMonthly'				    , 'TransactionUtcDt'	    )
    INSERT DOI.[IndexesColumnStore] (DatabaseName        , [SchemaName]	, [TableName]				, [IndexName]									, [IsClustered_Desired]	, [ColumnList_Desired] , [IsFiltered_Desired]	, [FilterPredicate_Desired]	, [OptionDataCompression_Desired]	, [OptionDataCompressionDelay_Desired]	, Storage_Desired				, PartitionColumn_Desired	) VALUES	(N'PaymentReporting', N'dbo'		, N'Liabilities'			, N'NCCI_Liabilities_CheckDateCover'	        , 0				        , 'CollectionId,PayDate'                                                                                                                                                                                , 0				        , NULL				        , N'COLUMNSTORE'			        , 0							            , 'psYearly'			        , 'PayDate'                 )
    INSERT DOI.[IndexesColumnStore] (DatabaseName        , [SchemaName]	, [TableName]				, [IndexName]									, [IsClustered_Desired]	, [ColumnList_Desired] , [IsFiltered_Desired]	, [FilterPredicate_Desired]	, [OptionDataCompression_Desired]	, [OptionDataCompressionDelay_Desired]	, Storage_Desired				, PartitionColumn_Desired	) VALUES	(N'PaymentReporting', N'dbo'		, N'TaxAgencyTransactions'	, N'NCCI_TaxAgencyTransactions_PaymentsCount'	, 0				        , 'TaxAgencyId,PostPayrollGUID'                                                                                                                                                                         , 0				        , NULL				        , N'COLUMNSTORE'			        , 0							            , 'PRIMARY'					    , NULL					    )
    INSERT DOI.[IndexesColumnStore] (DatabaseName        , [SchemaName]	, [TableName]				, [IndexName]									, [IsClustered_Desired]	, [ColumnList_Desired] , [IsFiltered_Desired]	, [FilterPredicate_Desired]	, [OptionDataCompression_Desired]	, [OptionDataCompressionDelay_Desired]	, Storage_Desired				, PartitionColumn_Desired	) VALUES	(N'PaymentReporting', N'dbo'		, N'TaxAmounts'				, N'NCCI_TaxAmounts_SumByPayroll'				, 0				        , 'TenantId,TaxPayrollGUID,UTETaxDataSourceTableSetKey,CurrentAmount'                                                                                                                                   , 0				        , NULL				        , N'COLUMNSTORE'			        , 0							            , 'PRIMARY'					    , NULL					    )
    INSERT DOI.[IndexesColumnStore] (DatabaseName        , [SchemaName]	, [TableName]				, [IndexName]									, [IsClustered_Desired]	, [ColumnList_Desired] , [IsFiltered_Desired]	, [FilterPredicate_Desired]	, [OptionDataCompression_Desired]	, [OptionDataCompressionDelay_Desired]	, Storage_Desired				, PartitionColumn_Desired	) VALUES	(N'PaymentReporting', N'dbo'		, N'TaxPayrolls'			, N'NCCI_TaxPayrolls_CheckDateCover'	        , 0				        , 'LiabilityId,PayUtcDate'                                                                                                                                                                              , 0				        , NULL				        , N'COLUMNSTORE'			        , 0							            , 'PRIMARY'				        , NULL	                    )
END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_InsertData.sql" 


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_InsertData.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('67d29018-b4a4-5d34-ae44-104246c90891' AS UNIQUEIDENTIFIER), 'B054B1ACE66275E434725C87AFBB2970FDFC25D4A9A3EBDBD3D0E984E98C5210', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_InsertData.sql", ID: {67d29018-b4a4-5d34-ae44-104246c90891} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0633efff-e170-5b71-a02b-8845ac86ec45' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6C31DE15F383F76B5D2C11F6CF5330D4FE7D798A55E0EE69760987560E3DAE62')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_InsertData.sql", ID: {0633efff-e170-5b71-a02b-8845ac86ec45} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_InsertData.sql" 
GO
-- <Migration ID="0633efff-e170-5b71-a02b-8845ac86ec45" TransactionHandling="Custom"/>
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexesRowStore_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexesRowStore_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE PROCEDURE [DOI].[spRefreshMetadata_User_IndexesRowStore_InsertData]

WITH NATIVE_COMPILATION, SCHEMABINDING
AS

BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)

    DELETE DOI.IndexesRowStore

    INSERT INTO DOI.IndexesRowStore (	DatabaseName        , SchemaName	,TableName										,IndexName															,IsUnique_Desired	,IsPrimaryKey_Desired	, IsUniqueConstraint_Desired, IsClustered_Desired	,KeyColumnList_Desired																											,IncludedColumnList_Desired																																											,IsFiltered_Desired ,FilterPredicate_Desired	                                            ,Fillfactor_Desired	,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired	,OptionStatisticsIncremental_Desired	,OptionIgnoreDupKey_Desired ,OptionResumable_Desired	,OptionMaxDuration_Desired	,OptionAllowRowLocks_Desired	,OptionAllowPageLocks_Desired	,OptionDataCompression_Desired	, Storage_Desired					, PartitionColumn_Desired	)    VALUES	 (	N'PaymentReporting' , N'DataMart'	, N'AgencyLocalityTypeDim'						, N'PK_AgencyLocalityTypeDim'										, 1			        , 1				        , 0					        , 1				        , N'AgencyLocalityTypeKey ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore (	DatabaseName        , SchemaName	,TableName										,IndexName															,IsUnique_Desired	,IsPrimaryKey_Desired	, IsUniqueConstraint_Desired, IsClustered_Desired	,KeyColumnList_Desired																											,IncludedColumnList_Desired																																											,IsFiltered_Desired ,FilterPredicate_Desired	                                            ,Fillfactor_Desired	,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired	,OptionStatisticsIncremental_Desired	,OptionIgnoreDupKey_Desired ,OptionResumable_Desired	,OptionMaxDuration_Desired	,OptionAllowRowLocks_Desired	,OptionAllowPageLocks_Desired	,OptionDataCompression_Desired	, Storage_Desired					, PartitionColumn_Desired	)    VALUES	 (	N'PaymentReporting' , N'DataMart'	, N'AgencyLocalityTypeDim'						, N'UQ_AgencyLocalityTypeDim'										, 1			        , 0				        , 0					        , 0				        , N'AgencyLocalityTypeDesc ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'Bai2BankTransactionTypeDim'					, N'PK_Bai2BankTransactionTypeDim'									, 1			        , 1				        , 0					        , 1				        , N'Bai2BankTransactionTypeKey ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'Bai2BankTransactionTypeDim'					, N'UQ_Bai2BankTransactionTypeDim'									, 1			        , 0				        , 0					        , 0				        , N'Bai2BankTransactionTypeDesc ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'BankAccountPurposeDim'						, N'PK_BankAccountPurposeDim'										, 1			        , 1				        , 0					        , 1				        , N'BankAccountPurposeKey ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'BankAccountStatusDim'						, N'PK_BankAccountStatusDim'										, 1			        , 1				        , 0					        , 1				        , N'BankAccountStatusKey ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'BankAccountStatusDim'						, N'UQ_BankAccountStatusDim'										, 1			        , 0				        , 0					        , 0				        , N'BankAccountStatusDesc ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'BankAccountTypeDim'							, N'PK_BankAccountTypeDim'											, 1			        , 1				        , 0					        , 1				        , N'BankAccountTypeKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'BankAccountTypeDim'							, N'UQ_BankAccountTypeDim'											, 1			        , 0				        , 0					        , 0				        , N'BankAccountTypeDesc ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'BankTransactionTypeDim'						, N'PK_BankTransactionTypeDim'										, 1			        , 1				        , 0					        , 1				        , N'BankTransactionTypeKey ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'CheckAddModeDim'							, N'PK_CheckAddModeDim'												, 1			        , 1				        , 0					        , 1				        , N'checkAddModeKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'CheckAddModeDim'							, N'UQ_CheckAddModeDim'												, 1			        , 0				        , 0					        , 0				        , N'checkAddModeDesc ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'CheckStatusDim'								, N'PK_CheckStatusDim'												, 1			        , 1				        , 0					        , 1				        , N'CheckStatusKey ASC'																									        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'CheckStatusDim'								, N'UQ_CheckStatusDim'												, 1			        , 0				        , 0					        , 0				        , N'CheckStatusDesc ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'Company_TaxStatusDim'						, N'PK_Company_TaxStatusDim'										, 1			        , 1				        , 0					        , 1				        , N'Company_TaxStatusKey ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'Company_TaxStatusDim'						, N'UDX_Company_TaxStatusDim'										, 1			        , 0				        , 0					        , 0				        , N'Company_TaxStatusDesc ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'CompanyTaxAgencyStatusDim'					, N'PK_CompanyTaxAgencyStatusDim'									, 1			        , 1				        , 0					        , 1				        , N'CompanyTaxAgencyStatusKey ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'CompanyTaxAgencyStatusDim'					, N'UDX_CompanyTaxAgencyStatusDim'									, 1			        , 0				        , 0					        , 0				        , N'CompanyTaxAgencyStatusDesc ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'CompanyStatusDim'							, N'PK_CompanyStatusDim'											, 1			        , 1				        , 0					        , 1				        , N'CompanyStatusKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'CompanyStatusDim'							, N'UQ_CompanyStatusDim'											, 1			        , 0				        , 0					        , 0				        , N'CompanyStatusDesc ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'CompanyTypeDim'								, N'PK_CompanyTypeDim'												, 1			        , 1				        , 0					        , 1				        , N'CompanyTypeKey ASC'																									        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'CompanyTypeDim'								, N'UQ_CompanyTypeDim'												, 1			        , 0				        , 0					        , 0				        , N'CompanyTypeDesc ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'CreditEffectOnLiabilityDim'					, N'PK_CreditEffectOnLiabilityDim'									, 1			        , 1				        , 0					        , 1				        , N'CreditEffectOnLiabilityKey ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'CreditEffectOnLiabilityDim'					, N'UQ_CreditEffectOnLiabilityDim'									, 1			        , 0				        , 0					        , 0				        , N'CreditEffectOnLiabilityDesc ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'FileRequestProcessingStatusDim'				, N'PK_FileRequestProcessingStatusDim'								, 1			        , 1				        , 0					        , 1				        , N'FileRequestProcessingStatusKey ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentActionTypeDim'					, N'PK_GarnishmentActionDim'										, 1			        , 1				        , 0					        , 1				        , N'GarnishmentActionTypeKey ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentActionTypeDim'					, N'UQ_GarnishmentActionDim'										, 1			        , 0				        , 0					        , 0				        , N'GarnishmentActionTypeDesc ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentExceptionDim'					, N'PK_GarnishmentExceptionDim'										, 1			        , 1				        , 0					        , 1				        , N'GarnishmentExceptionKey ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentExceptionDim'					, N'UQ_GarnishmentExceptionDim'										, 1			        , 0				        , 0					        , 0				        , N'GarnishmentExceptionDesc ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentIsInArrearsDim'					, N'PK_GarnishmentIsInArrearsDim'									, 1			        , 1				        , 0					        , 1				        , N'IsInArrearsKey ASC'																									        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentIsInArrearsDim'					, N'UQ_GarnishmentIsInArrearsDim'									, 1			        , 0				        , 0					        , 0				        , N'IsInArrearsDesc ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentLiabilityStatusDim'				, N'PK_GarnishmentLiabilityStatusDim'								, 1			        , 1				        , 0					        , 1				        , N'GarnishmentLiabilityStatusKey ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentLiabilityStatusDim'				, N'UQ_GarnishmentLiabilityStatusDim'								, 1			        , 0				        , 0					        , 0				        , N'GarnishmentLiabilityStatusDesc ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentLiabilityTypeDim'				, N'PK_GarnishmentLiabilityTypeDim'									, 1			        , 1				        , 0					        , 1				        , N'GarnishmentLiabilityTypeKey ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentMedIndicatorDim'					, N'PK_GarnishmentMedIndicatorDim'									, 1			        , 1				        , 0					        , 1				        , N'MedIndicatorKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentMedIndicatorDim'					, N'UQ_GarnishmentMedIndicatorDim'									, 1			        , 0				        , 0					        , 0				        , N'MedIndicatorDesc ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentPayableStatusDim'				, N'PK_GarnishmentPayableStatusDim'									, 1			        , 1				        , 0					        , 1				        , N'GarnishmentPayableStatusKey ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentPayableStatusDim'				, N'UQ_GarnishmentPayableStatusDim'									, 1			        , 0				        , 0					        , 0				        , N'GarnishmentPayableStatusDesc ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentPaymentTypeDim'					, N'PK_GarnishmentPaymentTypeDim'									, 1			        , 1				        , 0					        , 1				        , N'GarnishmentPaymentTypeKey ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentPaymentTypeDim'					, N'UQ_GarnishmentPaymentTypeDim'									, 1			        , 0				        , 0					        , 0				        , N'GarnishmentPaymentTypeDesc ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentPayrollInstanceReconStatusDim'	, N'PK_GarnishmentPayrollInstanceReconStatusDim'					, 1			        , 1				        , 0					        , 1				        , N'GarnishmentPayrollInstanceReconStatusKey ASC'																		        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentPayrollInstanceReconStatusDim'	, N'UQ_GarnishmentPayrollInstanceReconStatusDim'					, 1			        , 0				        , 0					        , 0				        , N'GarnishmentPayrollInstanceReconStatusDesc ASC'																		        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentsSupportsOthersDim'				, N'PK_GarnishmentsSupportsOthersDim'								, 1			        , 1				        , 0					        , 1				        , N'SupportsOthersKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentsSupportsOthersDim'				, N'UQ_GarnishmentsSupportsOthersCode'								, 1			        , 0				        , 0					        , 0				        , N'SupportsOthersDesc ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentStatusDim'						, N'PK_GarnishmentStatusDim'										, 1			        , 1				        , 0					        , 1				        , N'GarnishmentStatusKey ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentStatusDim'						, N'UQ_GarnishmentsStatusDim'										, 1			        , 0				        , 0					        , 0				        , N'GarnishmentStatusDesc ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentTypeDim'							, N'PK_GarnishmentTypeDim'											, 1			        , 1				        , 0					        , 1				        , N'GarnishmentTypeKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentTypeDim'							, N'UQ_GarnishmentTypeDim'											, 1			        , 0				        , 0					        , 0				        , N'GarnishmentTypeDesc ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GLAccountClassificationDim'					, N'PK_GLAccountClassificationDim'									, 1			        , 1				        , 0					        , 1				        , N'GLAccountClassificationKey ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GLAccountClassificationDim'					, N'UQ_GLAccountClassificationDim'									, 1			        , 0				        , 0					        , 0				        , N'GLAccountClassificationDesc ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GLAccountStatusDim'							, N'PK_GLAccountStatusDim'											, 1			        , 1				        , 0					        , 1				        , N'GLAccountStatusKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GLAccountStatusDim'							, N'UQ_GLAccountStatusDim'											, 1			        , 0				        , 0					        , 0				        , N'GLAccountStatusDesc ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GLAccountTypeDim'							, N'PK_GLAccountTypeDim'											, 1			        , 1				        , 0					        , 1				        , N'GLAccountTypeKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GLAccountTypeDim'							, N'UQ_GLAccountTypeDim'											, 1			        , 0				        , 0					        , 0				        , N'GLAccountTypeDesc ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'InboundFileTypeDim'							, N'PK_InboundFileTypeDim'											, 1			        , 1				        , 0					        , 1				        , N'InboundFileTypeKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'InboundFileTypeDim'							, N'UQ_InboundFileTypeDim'											, 1			        , 0				        , 0					        , 0				        , N'InboundFileTypeDesc ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'JournalEntryTransactionTypeDim'				, N'PK_JournalEntryTransactionTypeDim'								, 1			        , 1				        , 0					        , 1				        , N'JournalEntryTransactionTypeDimKey ASC'																				        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'JournalEntryTransactionTypeDim'				, N'UQ_JournalEntryTransactionTypeDim'								, 1			        , 0				        , 0					        , 0				        , N'JournalEntryTransactionTypeDimDescription ASC'																		        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'LiabilityCollectionPaymentMethoDOIm'		, N'PK_LiabilityCollectionPaymentMethoDOIm'							, 1			        , 1				        , 0					        , 1				        , N'LiabilityCollectionPaymentMethodKey ASC'																			        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'LiabilityCollectionPaymentMethoDOIm'		, N'UQ_LiabilityCollectionPaymentMethoDOIm'							, 1			        , 0				        , 0					        , 0				        , N'LiabilityCollectionPaymentMethodDesc ASC'																			        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'LiabilityCollectionStatusDim'				, N'PK_LiabilityCollectionStatusDim'								, 1			        , 1				        , 0					        , 1				        , N'LiabilityCollectionStatusKey ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'LiabilityCollectionStatusDim'				, N'UQ_LiabilityCollectionStatusDim'								, 1			        , 0				        , 0					        , 0				        , N'LiabilityCollectionStatusDesc ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'LiabilityCollectionTypeDim'					, N'PK_LiabilityCollectionTypeDim'									, 1			        , 1				        , 0					        , 1				        , N'LiabilityCollectionTypeKey ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'LiabilityStatusDim'							, N'PK_LiabilityStatusDim'											, 1			        , 1				        , 0					        , 1				        , N'LiabilityStatusKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'LiabilityStatusDim'							, N'UQ_LiabilityStatusDim'											, 1			        , 0				        , 0					        , 0				        , N'LiabilityStatusDesc ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'LiabilityTypeDim'							, N'PK_LiabilityTypeDim'											, 1			        , 1				        , 0					        , 1				        , N'LiabilityTypeKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'NettedCollectionStatusDim'					, N'PK_NettedCollectionStatusDim'									, 1			        , 1				        , 0					        , 1				        , N'NettedCollectionStatusKey ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, 0				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'PayExceptionTypeDim'						, N'PK_PayExceptionTypeDim'											, 1			        , 1				        , 0					        , 1				        , N'PayExceptionTypeKey ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'PayExceptionTypeDim'						, N'UQ_PayExceptionTypeDim'											, 1			        , 0				        , 0					        , 0				        , N'PayExceptionTypeDesc ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'PayPortionStateDim'							, N'PK_PayPortionStateDim'											, 1			        , 1				        , 0					        , 1				        , N'PayPortionStateKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'PayPortionStateDim'							, N'UQ_PayPortionStateDim'											, 1			        , 0				        , 0					        , 0				        , N'PayPortionStateDesc ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'PayProcessingStatusDim'						, N'PK_PayProcessingStatusDim'										, 1			        , 1				        , 0					        , 1				        , N'PayProcessingStatusKey ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'PayProcessingStatusDim'						, N'UQ_PayProcessingStatusDim'										, 1			        , 0				        , 0					        , 0				        , N'PayProcessingStatusDesc ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'PayrollPaymentStatusDim'					, N'PK_PayrollPaymentStatusDim'										, 1			        , 1				        , 0					        , 1				        , N'PayrollPaymentStatusKey ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'PayrollPaymentTypeDim'						, N'PK_PayrollPaymentTypeDim'										, 1			        , 1				        , 0					        , 1				        , N'PayrollPaymentTypeKey ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'PayrollTypeDim'								, N'PK_PayrollTypeDim'												, 1			        , 1				        , 0					        , 1				        , N'PayrollTypeKey ASC'																									        , NULL																																																, 0			        , NULL						                                            , 100				, 0				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'PayrollTypeDim'								, N'UQ_PayrollTypeDim'												, 1			        , 0				        , 0					        , 0				        , N'PayrollTypeDesc ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'ProductActivationStatus'					, N'PK_TenantProductActivationStatus'								, 1			        , 1				        , 0					        , 1				        , N'ProductActivationStatusKey ASC'																						        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'ProductActivationStatus'					, N'UQ_TenantProductActivationStatus'								, 1			        , 0				        , 0					        , 0				        , N'ProductActivationStatusDesc ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'ProductCodeDim'								, N'PK_ProductCodeDim'												, 1			        , 1				        , 0					        , 1				        , N'ProductCodeKey ASC'																									        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'ProductCodeDim'								, N'UQ_ProductCodeDim'												, 1			        , 0				        , 0					        , 0				        , N'ProductCodeDesc ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'ProductStatus'								, N'PK_TenantProductStatus'											, 1			        , 1				        , 0					        , 1				        , N'ProductStatusKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'ProductStatus'								, N'UQ_TenantProductStatus'											, 1			        , 0				        , 0					        , 0				        , N'ProductStatusDesc ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES   (N'PaymentReporting' , N'DataMart'   , N'QEADJFilterOptions'                         , N'PK_QEADJFilterOptions'                                          , 1                 , 1                     , 0                         , 1                     , N'QEADJFilterOptionKey ASC'                                                                                                   , NULL                                                                                                                                                                                              , 0                 , NULL                                                                  , 100               , 0                     , 0                                     , 0                                     , 0                         , DEFAULT                   , 0                         , 1                             , 1                             , DEFAULT                       , 'PRIMARY'                         , NULL                      )
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES   (N'PaymentReporting' , N'DataMart'   , N'QEADJFilterOptions'                         , N'UDX_QEADJFilterOption'                                          , 1                 , 0                     , 0                         , 0                     , N'QEADJFilterOptionDesc ASC'                                                                                                  , NULL                                                                                                                                                                                              , 0                 , NULL                                                                  , 100               , 0                     , 0                                     , 0                                     , 0                         , DEFAULT                   , 0                         , 1                             , 1                             , DEFAULT                       , 'PRIMARY'                         , NULL                      )
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'RefundPortionDim'							, N'PK_RefundPortionDim'											, 1			        , 1				        , 0					        , 1				        , N'RefundPortionKey ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'RefundPortionDim'							, N'UQ_RefundPortionDim'											, 1			        , 0				        , 0					        , 0				        , N'RefundPortionDesc ASC'																								        , NULL																																																, 0			        , NULL						                                            , 100				, 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'ReportRequestorTypeDim'						, N'PK_ReportSourceSystemDim'										, 1			        , 1				        , 0					        , 1				        , N'ReportSourceSystemName ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'ReportRequestStatusDim'						, N'PK_ReportRequestStatusDim'										, 1			        , 1				        , 0					        , 1				        , N'ReportRequestStatusKey ASC'																							        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxAgencyTransactionStatusDim'				, N'PK_TaxAgencyTransactionStatusDim'								, 1			        , 1				        , 0					        , 1				        , N'TaxAgencyTransactionStatusKey ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'CheckDate'				)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxAgencyTransactionStatusDim'				, N'UQ_TaxAgencyTransactionStatusDim'								, 1			        , 0				        , 0					        , 0				        , N'TaxAgencyTransactionStatusDesc ASC'																					        , NULL																																																, 0			        , NULL						                                            , 100				, DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'CheckDate'				)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxCodeActiveStatus'						, N'PK_TaxCodeActiveStatus'											, 1			        , 1				        , 0					        , 1				        , N'TaxCodeActiveStatusKey ASC'																							        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxCodeActiveStatus'						, N'UQ_TaxCodeActiveStatus'											, 1			        , 0				        , 0					        , 0				        , N'TaxCodeActiveStatusDesc ASC'																						        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxCodeProcessingFrequencyDim'				, N'PK_TaxCodeProcessingFrequencyDim'								, 1			        , 1				        , 0					        , 1				        , N'TaxCodeProcessingFrequencyKey ASC'																					        , NULL																																																, 0			        , NULL																    , 100				, 0				        , 0								        , 100                                   , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxCodeProcessingFrequencyDim'				, N'UQ_TaxCodeProcessingFrequencyDim'								, 1			        , 0				        , 0					        , 0				        , N'TaxCodeProcessingFrequencyDesc ASC'																					        , NULL																																																, 0			        , NULL																    , 100				, 1				        , 0								        , 100                                   , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxPaymentCreditStatusDim'					, N'PK_TaxPaymentCreditStatusDim'									, 1			        , 1				        , 0					        , 1				        , N'TaxPaymentCreditStatusKey ASC'																						        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxPaymentCreditStatusDim'					, N'UQ_TaxPaymentCreditStatusDim'									, 1			        , 0				        , 0					        , 0				        , N'TaxPaymentCreditStatusDesc ASC'																						        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxPaymentStatusDim'						, N'PK_TaxPaymentStatusDim'											, 1			        , 1				        , 0					        , 1				        , N'TaxPaymentStatusKey ASC'																							        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxPaymentStatusDim'						, N'UQ_TaxPaymentStatusDim'											, 1			        , 0				        , 0					        , 0				        , N'TaxPaymentStatusDesc ASC'																							        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxPaymentTypeDim'							, N'PK_TaxPaymentTypeDim'											, 1			        , 1				        , 0					        , 1				        , N'TaxPaymentTypeKey ASC'																								        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxPaymentTypeDim'							, N'UQ_TaxPaymentTypeDim'											, 1			        , 0				        , 0					        , 0				        , N'TaxPaymentTypeDesc ASC'																								        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TenantStatusDim'							, N'PK_TenantStatusDim'												, 1			        , 1				        , 0					        , 1				        , N'TenantStatusCode ASC'																								        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TenantStatusDim'							, N'UQ_TenantStatusDim'												, 1			        , 0				        , 0					        , 0				        , N'TenantStatusDesc ASC'																								        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'UTETaxDataSourceTableSetDim'				, N'PkUTETaxDataSourceTableSetDim'									, 1			        , 1				        , 0					        , 1				        , N'UTETaxDataSourceTableSetKey ASC'																					        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentActionReasonDim'					, N'PK_GarnishmentActionReasonDim'									, 1			        , 1				        , 0					        , 1				        , N'GarnishmentActionReasonKey ASC'																						        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'GarnishmentActionReasonDim'					, N'UQ_GarnishmentActionReasonDim'									, 1			        , 0				        , 0					        , 0				        , N'GarnishmentActionReasonDesc ASC'																					        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxLiabilityOriginTypeDim'					, N'PK_TaxLiabilityOriginTypeDim'									, 1			        , 1				        , 0					        , 1				        , N'TaxLiabilityOriginTypeKey ASC'																						        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'TaxLiabilityOriginTypeDim'					, N'UQ_TaxLiabilityOriginTypeDim'									, 1			        , 0				        , 0					        , 0				        , N'TaxLiabilityOriginTypeDesc ASC'																						        , NULL																																																, 0			        , NULL																    , 100				, DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'YEFileStatusDim'							, N'PK_YEFileStatusDim'												, 1			        , 1				        , 0					        , 1				        , N'YEFileStatusKey ASC'																								        , NULL																																																, 0			        , NULL																    , 100				, 1				        , 0								        , 100							        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'YEFileStatusDim'							, N'UQ_YEFileStatusDim'												, 1			        , 0				        , 0					        , 0				        , N'YEFileStatusDesc ASC'																								        , NULL																																																, 0			        , NULL																    , 100				, 1				        , 0								        , 100							        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'YEIngestionTypeDim'							, N'PK_YEIngestionTypeDim'											, 1			        , 1				        , 0					        , 1				        , N'YEIngestionTypeKey ASC'																								        , NULL																																																, 0			        , NULL																    , 100				, 1				        , 0								        , 100							        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'YEIngestionTypeDim'							, N'UQ_YEIngestionTypeDim'											, 1			        , 0				        , 0					        , 0				        , N'YEIngestionTypeDesc ASC'																							        , NULL																																																, 0			        , NULL																    , 100				, 1				        , 0								        , 100							        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'YEProcessingStatusDim'						, N'PK_YEProcessingStatusDim'										, 1			        , 1				        , 0					        , 1				        , N'YEProcessingStatusKey ASC'																							        , NULL																																																, 0			        , NULL																    , 100				, 1				        , 0								        , 100							        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'DataMart'	, N'YEProcessingStatusDim'						, N'UQ_YEProcessingStatusDim'										, 1			        , 0				        , 0					        , 0				        , N'YEProcessingStatusDesc ASC'																							        , NULL																																																, 0			        , NULL																    , 100				, 1				        , 0								        , 100							        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
	(	DatabaseName     , SchemaName	,TableName									    ,IndexName												            ,IsUnique	         ,IsPrimaryKey	        , IsUniqueConstraint        , IsClustered	        ,KeyColumnList				                                                                                                    ,IncludedColumnList	                                                                                                                                                                                ,IsFiltered         ,FilterPredicate                                                        ,[Fillfactor]	    ,OptionPadIndex         ,OptionStatisticsNoRecompute	        ,OptionStatisticsIncremental	        ,OptionIgnoreDupKey	        ,OptionResumable	        ,OptionMaxDuration	        ,OptionAllowRowLocks	        ,OptionAllowPageLocks	        ,OptionDataCompression	        , NewStorage						, PartitionColumn			)		
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Bai2BankTransactions'						, N'CDX_Bai2BankTransactions'										, 0			        , 0				        , 0					        , 1				        , N'TransactionSysUtcDt ASC'																							        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'         , 'TransactionSysUtcDt'		)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Bai2BankTransactions'						, N'PK_Bai2BankTransactions'										, 1			        , 1				        , 0					        , 0				        , N'BankTransactionId ASC,TransactionSysUtcDt ASC'																		        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'         , 'TransactionSysUtcDt'		)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'BankAccountDays'							, N'PK_BankAccountDays'												, 1			        , 1				        , 0					        , 0				        , N'BankAccountDayId ASC'																								        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'BankTransactions'							, N'CDX_BankTransactions'											, 0			        , 0				        , 0					        , 1				        , N'TransactionUtcDateTime ASC'																							        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'TransactionUtcDateTime'	)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'BankTransactions'							, N'IDX_BankTransactions_BankAcctCover'								, 0			        , 0				        , 0					        , 0				        , N'CollectionId ASC,UpdatedUtcDt ASC,TransactionUtcDateTime ASC'														        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'TransactionUtcDateTime'	)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'BankTransactions'							, N'IDX_BankTransactions_GarnishmentPDCover'						, 0			        , 0				        , 0					        , 0				        , N'TenantId ASC,GarnishmentId ASC,TransactionUtcDateTime ASC'															        , N'CbaRoutingNumber4,CbaAccountNumber4,CheckNumber,FileRequestId'																																	, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'TransactionUtcDateTime'	)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'BankTransactions'							, N'PK_BankTransactions'											, 1			        , 1				        , 0					        , 0				        , N'TransactionUtcDateTime ASC,Id ASC,TenantId ASC'																		        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'TransactionUtcDateTime'	)
		    --    INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	N'dbo'		, N'changelog'									, N'PK_changelog'																					        								, 1, 1, 0, 1, N'ID ASC'				        																				, NULL									        																																							, 0			, NULL									        							, 90			, DEFAULT		, DEFAULT		    				        , DEFAULT						        , DEFAULT			                    , DEFAULT	                , DEFAULT			        , DEFAULT			        	, DEFAULT				, DEFAULT)								        						        							
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Companies'									, N'IX_Companies'													, 0			        , 0				        , 0					        , 0				        , N'TenantId ASC,COID ASC'																								        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Companies'									, N'PK_Companies'													, 1			        , 1				        , 0					        , 1				        , N'CompanyId ASC,TenantId ASC'																							        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Companies'									, N'UQ_Companies'													, 1			        , 0				        , 0					        , 0				        , N'CompanyId ASC'																										        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Companies'									, N'UQ_Companies_UTEClientId'										, 1			        , 0				        , 0					        , 0				        , N'UTEClientId ASC'																									        , NULL																																																, 1			        , N'([UTEClientId] IS NOT NULL)'									    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Company_Tax'								, N'PK_Company_Tax'													, 1			        , 1				        , 0					        , 0				        , N'Company_TaxGUID'																									        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Company_Tax'								, N'UDX_Company_TaxCompanyId'										, 1			        , 0				        , 0					        , 1				        , N'CompanyId ASC,TenantId ASC'																							        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Company_Tax'								, N'UDX_Company_TaxId'												, 1			        , 0				        , 0					        , 0				        , N'Company_TaxId ASC'																							    	        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'CompanyTaxAgency'							, N'PK_CompanyTaxAgency'											, 1			        , 1				        , 0					        , 0				        , N'CompanyTaxAgencyId ASC'																								        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'CompanyTaxAgency'							, N'UDX_CompanyTaxAgency_Company_TaxGUID_TaxAgencyId'				, 1			        , 0				        , 0					        , 1				        , N'Company_TaxGUID ASC,TaxAgencyId ASC'																				        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'CompanyProduct'								, N'PK_CompanyProduct'												, 1			        , 1				        , 0					        , 1				        , N'CompanyId ASC,ProductCodeKey ASC,EffectiveUtcDateFrom ASC'															        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'CustomerBankAccounts'						, N'PK_CustomerBankAccounts'										, 1			        , 1				        , 0					        , 1				        , N'TenantId ASC,BankAccountId ASC'																						        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'DBDefragLog'								, N'PK_DBDefragLog'													, 1			        , 1				        , 0					        , 1				        , N'SchemaName ASC,RunDateTime ASC,TableName ASC,IndexName ASC'															        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'EFilingAcknowledgmentAlerts'				, N'PK_EFilingAcknowledgmentAlerts'									, 1			        , 1				        , 0					        , 1				        , N'EFilingAcknowledgmentAlertId ASC'																					        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'EFilingAcknowledgments'						, N'PK_EFilingAcknowledgments'										, 1			        , 1				        , 0					        , 1				        , N'SubmissionId ASC'																									        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'EFilingAcknowledgments'						, N'UQ_EFilingAcknowledgments'										, 1			        , 0				        , 0					        , 0				        , N'EFilingAcknowledgmentId ASC'																						        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'FileRequestPayments'						, N'PK_FileRequestPayments'											, 1			        , 1				        , 0					        , 1				        , N'PaymentId ASC,PaymentFileRequestId ASC'																				        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'FileRequests'								, N'PK_FileRequests'												, 1			        , 1				        , 0					        , 1				        , N'FileRequestId ASC'																									        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'GarnishmentLiabilities'						, N'IDX_GarnishmentLiabilities_TenantId'							, 0			        , 0				        , 0					        , 0				        , N'TenantId ASC'																										        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'GarnishmentLiabilities'						, N'PK_GarnishmentLiabilities'										, 1			        , 1				        , 0					        , 1				        , N'GarnishmentLiabilityId ASC,TenantId ASC'																			        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'GarnishmentLiabilities'						, N'IDX_GarnishmentLiabilities_PayrollInstanceId'					, 0			        , 0				        , 0					        , 0				        , N'PayrollInstanceId ASC'																								        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'GarnishmentLiabilities'						, N'UDX_GarnishmentLiabilities'                  					, 1			        , 0				        , 0					        , 0				        , N'LiabilityId ASC,GarnishmentLiabilityId ASC'																			        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'GarnishmentPayrollInstances'				, N'PK_GarnishmentPayrollInstances'									, 1			        , 1				        , 0					        , 0				        , N'GarnishmentPayrollInstanceId ASC,TenantId ASC'																		        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'GeneralLedgerAccounts'						, N'IDX_GeneralLedgerAccounts_GLSegment'							, 0			        , 0				        , 0					        , 0				        , N'GlSegment ASC'																										        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'GeneralLedgerAccounts'						, N'PK_GeneralLedgerAccounts'										, 1			        , 1				        , 0					        , 1				        , N'AccountId ASC'																										        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'JournalEntries'								, N'CDX_JournalEntries'												, 0			        , 0				        , 0					        , 1				        , N'TransactionUtcDt ASC'																								        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'TransactionUtcDt'		)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'JournalEntries'								, N'IDX_JournalEntries_AgencyCode'									, 0			        , 0				        , 0					        , 0				        , N'AgencyCode ASC,TenantId ASC,TransactionUtcDt ASC'																	        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'TransactionUtcDt'		)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'JournalEntries'								, N'PK_JournalEntries'												, 1			        , 1				        , 0					        , 0				        , N'JournalEntryId ASC,TransactionUtcDt ASC'																			        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'TransactionUtcDt'		)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Liabilities'								, N'IDX_Liabilities_WACDCover'										, 0			        , 0				        , 0					        , 0				        , N'TenantId ASC,CollectionId ASC,PayrollId ASC,PayDate ASC'															        , N'LiabilityId,Type,SourceCreatedUtcDt'																																							, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayDate'	    			)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Liabilities'								, N'CDX_Liabilities'												, 0			        , 0				        , 0					        , 1				        , N'PayDate ASC'																										        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayDate'					)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Liabilities'								, N'IDX_Liabilities_CollectionProductListCover'						, 0			        , 0				        , 0					        , 0				        , N'CollectionId ASC,ProductCode ASC,PayDate ASC'																		        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayDate'					)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Liabilities'								, N'IDX_Liabilities_CompanyAggregateCover'							, 0			        , 0				        , 0					        , 0				        , N'CollectionId ASC,TenantId ASC,LegalEntityCompanyId ASC,PayDate ASC'													        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayDate'					)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Liabilities'								, N'IDX_Liabilities_PayrollAggregateCover'							, 0			        , 0				        , 0					        , 0				        , N'CollectionId ASC,TenantId ASC,PayrollId ASC,PayDate ASC'															        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayDate'					)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Liabilities'								, N'PK_Liabilities'													, 1			        , 1				        , 0					        , 0				        , N'LiabilityId ASC,PayDate ASC'																			        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 0								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayDate'					)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'CDX_LiabilityCollections'										, 0			        , 0				        , 0					        , 1				        , N'PayUtcDt ASC'																										        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1	        					        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDt'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'IDX_LiabilityCollections_CDCover'								, 0			        , 0				        , 0					        , 0				        , N'CollectionId ASC,PayUtcDt ASC'																						        , 'CollectedUtcDateTime,Status,Type,ConfirmationNumber,DueDate,PaymentMethod,TenantId'																												, 0			        , NULL																    , 90			    , 1				        , 0								        , 1								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDt'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'IDX_LiabilityCollections_WACD_ExternalCover'					, 0			        , 0				        , 0					        , 0				        , N'TenantId ASC,PayUtcDt ASC'																							        , N'CollectionId,PaymentMethod,DueDate,CollectedUtcDateTime,ConfirmationNumber,Status,UsgBankAccountId,CustomerBankAccountId'																		, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1		        				        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDt'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'PK_LiabilityCollections'										, 1			        , 1				        , 0					        , 0				        , N'PayUtcDt ASC,CollectionId ASC'																						        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDt'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'IDX_LiabilityCollections_NetCollections'						, 0			        , 0				        , 0					        , 0				        , N'NettedCollectionId ASC,PayUtcDt ASC'																				        , N'CollectionId,ConfirmationNumber,ProcessUtcDate'																																					, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDt'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'IDX_LiabilityCollections_NetCollectionsLatestConfNumberCover'	, 0			        , 0				        , 0					        , 0				        , N'NettedCollectionId ASC,ProcessUtcDate DESC,PayUtcDt ASC'															        , N'ConfirmationNumber'																																												, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDt'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'IDX_LiabilityCollections_CheckDateCover'	                    , 0			        , 0				        , 0					        , 0				        , N'CollectedUtcDateTime ASC,PayUtcDt ASC'															                            , NULL																																												                , 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDt'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'IDX_LiabilityCollections_CheckDateCover2'	                    , 0			        , 0				        , 0					        , 0				        , N'TotalAmount ASC,CollectedUtcDateTime ASC,Type,PayUtcDt ASC'															        , NULL      																																												        , 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDt'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'LiabilityCollectionConfirmationInfos'		, N'PK_LiabilityCollectionConfirmationInfos'						, 1			        , 1				        , 0					        , 1				        , N'LiabilityCollectionId ASC,ConfirmationInfoId ASC'																	        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'LiabilityCollectionComments'				, N'PK_LiabilityCollectionComments'									, 1			        , 1				        , 0					        , 1				        , N'CommentId ASC,LiabilityCollectionId ASC'																			        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'LiabilityPayments'							, N'PK_LiabilityPayments'											, 1			        , 1				        , 0					        , 0				        , N'LiabilityId ASC,PaymentId ASC,PaymentLiabilityId ASC'																        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'LiabilityPayments'							, N'IDX_LiabilityPayments_PaymentLiabilityId'						, 0			        , 0				        , 0					        , 0				        , N'PaymentLiabilityId ASC'																								        , N'PaymentId'																																														, 1			        , N'([PaymentLiabilityId]<>''00000000-0000-0000-0000-000000000000'')'   , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'NettedCollections'							, N'PK_NettedCollections'											, 1			        , 1				        , 0					        , 1				        , N'NettedCollectionId ASC'																								        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'NettedCollectionsLiabilityCollections'		, N'PK_NettedCollectionsLiabilityCollections'						, 1			        , 1				        , 0					        , 1				        , N'NettedCollectionId ASC,CollectionId ASC'																			        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayActions'									, N'CDX_PayActions'													, 0			        , 0				        , 0					        , 1				        , N'PayUtcDate ASC'																										        , NULL																																																, 0			        , NULL																    , 90			    , 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayActions'									, N'PK_PayActions'													, 1			        , 1				        , 0					        , 0				        , N'ActionId ASC'																										        , NULL																																																, 0			        , NULL																    , 90			    , 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishment_Deductions'					, N'PK_PayGarnishment_Deductions'									, 1			        , 1				        , 0					        , 1				        , N'PayUtcDate ASC,GarnishmentId ASC'																					        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishment_Employees'					, N'PK_PayGarnishment_Employees'									, 1			        , 1				        , 0					        , 1				        , N'PayUtcDate ASC,GarnishmentId ASC'																					        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishment_Employees'					, N'IDX_PayGarnishment_Employees_WAPDCover'							, 0			        , 0				        , 0					        , 0				        , N'EmployeeNumber ASC,PayUtcDate ASC'																					        , N'GarnishmentId,FirstName,LastName'																																								, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishment_Payees'						, N'PK_PayGarnishment_Payees'										, 1			        , 1				        , 0					        , 1				        , N'PayUtcDate ASC,GarnishmentId ASC'																					        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishmentActions'						, N'PK_PayGarnishmentActions'										, 1			        , 1				        , 0					        , 1				        , N'PayUtcDate ASC,GarnishmentId ASC,ActionId ASC'																		        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishmentActions'						, N'UQ_PayGarnishmentActions'										, 1			        , 0				        , 0					        , 0				        , N'PayUtcDate ASC,GarnishmentId ASC,ActionId ASC,ActionUtcDateTime ASC'												        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 0								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishmentExceptions'					, N'PK_PayGarnishmentExceptions'									, 1			        , 1				        , 0					        , 1				        , N'PayUtcDate ASC,GarnishmentId ASC,DateCleared ASC,GarnishmentExceptionKey ASC'										        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishmentLiabilities'					, N'PK_PayGarnishmentLiabilities'									, 1			        , 1				        , 0					        , 1				        , N'PayUtcDate ASC,GarnishmentId ASC,GarnishmentLiabilityId ASC,TenantId ASC'											        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishmentLiabilities'					, N'IDX_PayGarnishmentLiabilities_WACDCover'						, 0			        , 0				        , 0					        , 0				        , N'GarnishmentLiabilityId ASC,PayUtcDate ASC'																			        , N'GarnishmentId,Refunded,Removed'																																									, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 0     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishments'							, N'IDX_PayGarnishments_CollDetailsCover'							, 0			        , 0				        , 0					        , 0				        , N'PayUtcDate ASC'																										        , N'TenantId,PayId,GarnishmentId,GarnishmentTypeKey,GarnishmentAmount,GarnishmentLiabilityId'																										, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishments'							, N'IDX_PayGarnishments_CollDetailsCover2'							, 0			        , 0				        , 0					        , 0				        , N'GarnishmentTypeKey ASC,PayUtcDate ASC'																				        , N'TenantId,PayId,GarnishmentId,GarnishmentLiabilityId'																																			, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishments'							, N'IDX_Paygarnishments_IngestionCover'								, 0			        , 0				        , 0					        , 0				        , N'GarnishmentId ASC,PayUtcDate ASC'																					        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishments'							, N'IDX_PayGarnishments_WACD_ExternalCover'							, 0			        , 0				        , 0					        , 0				        , N'TenantId ASC,PayUtcDate ASC'																						        , N'PayId,GarnishmentId,GarnishmentTypeKey,GarnishmentAmount,GarnishmentLiabilityId'																												, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishments'							, N'IDX_PayGarnishments_PayrollInstanceId'							, 0			        , 0				        , 0					        , 0				        , N'PayrollInstanceId ASC,PayUtcDate ASC'																				        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayGarnishments'							, N'PK_PayGarnishments'												, 1			        , 1				        , 0					        , 1				        , N'PayUtcDate ASC,GarnishmentId ASC'																					        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'			, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayLiabilities'								, N'CDX_PayLiabilities'												, 0			        , 0				        , 0					        , 1				        , N'PayUtcDate ASC'																										        , NULL																																																, 0			        , NULL																    , 80			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayLiabilities'								, N'PK_PayLiabilities'												, 1			        , 1				        , 0					        , 0				        , N'PayUtcDate ASC,PayId ASC,LiabilityId ASC,ActionId ASC'																        , NULL																																																, 0			        , NULL																    , 80			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayLiabilities'								, N'IDX_PayLiabilities_LiabilityId'									, 0			        , 0				        , 0					        , 0				        , N'LiabilityId ASC,IsActive ASC,PayUtcDate ASC'																                , NULL																																																, 0			        , NULL																    , 80			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayrollInstances'							, N'PK_PayrollInstances'											, 1			        , 1				        , 0					        , 1				        , N'PayrollInstanceId ASC,TenantId ASC'																					        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayrollPayments'							, N'PK_PayrollPayments'												, 1			        , 1				        , 0					        , 1				        , N'PayrollPaymentId ASC'																								        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayrollUnits'								, N'IDX_PayrollUnits_PayGroup'										, 0			        , 0				        , 0					        , 0				        , N'PayGroup ASC,TenantId ASC'																							        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayrollUnits'								, N'IDX_PayrollUnits_PayrollCode'									, 0			        , 0				        , 0					        , 0				        , N'PayrollCode ASC'																									        , N'PayrollId,TenantId'																																												, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayrollUnits'								, N'IDX_PayrollUnits_TenantId_PayrollCode'							, 0			        , 0				        , 0					        , 0				        , N'TenantId ASC,PayrollCode ASC'																						        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayrollUnits'								, N'PK_PayrollUnits'												, 1			        , 1				        , 0					        , 1				        , N'PayrollId ASC,TenantId ASC'																							        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayrollUnits'								, N'UQ_PayrollUnits'												, 1			        , 0				        , 0					        , 0				        , N'PayrollCode ASC,LegalEntityCompanyId ASC,TenantId ASC'																        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Pays'										, N'CDX_Pays'														, 0			        , 0				        , 0					        , 1				        , N'PayUtcDate ASC'																										        , NULL																																																, 0			        , NULL																    , 80			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Pays'										, N'IDX_Pays_CheckSummaryReportCover'								, 0			        , 0				        , 0					        , 0				        , N'CompanyId ASC,TenantId ASC,PayId ASC,PayUtcDate ASC'																        , N'EmployeeNumber'																																													, 0			        , NULL																    , 80			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Pays'										, N'IDX_Pays_CDCover'												, 0			        , 0				        , 0					        , 0				        , N'NetPayLiabilityId ASC,PayUtcDate ASC'																				        , N'EmployeeLastName,EmployeeFirstName,EmployeeNumber,CheckNumber,CheckAmount,ddAmount,PayrollId,PayrollInstanceId'																					, 0			        , NULL																    , 80			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Pays'										, N'PK_Pays'														, 1			        , 1				        , 0					        , 0				        , N'PayId ASC,PayUtcDate ASC'																							        , NULL																																																, 0			        , NULL																    , 80			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'PayUtcDate'				)
        --	(	DatabaseName        , SchemaName	,TableName									    ,IndexName												            ,IsUnique	         ,IsPrimaryKey	        , IsUniqueConstraint        , IsClustered	        ,KeyColumnList				                                                                                                    ,IncludedColumnList	                                                                                                                                                                                ,IsFiltered         ,FilterPredicate                                                        ,[Fillfactor]	    ,OptionPadIndex         ,OptionStatisticsNoRecompute	        ,OptionStatisticsIncremental	        ,OptionIgnoreDupKey	        ,OptionResumable	        ,OptionMaxDuration	        ,OptionAllowRowLocks	        ,OptionAllowPageLocks	        ,OptionDataCompression	        , NewStorage						, PartitionColumn			)		
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayTaxes'									, N'CDX_PayTaxes'													, 0			        , 0				        , 0					        , 1				        , N'PayUtcDate ASC'																										        , NULL																																																, 0			        , NULL																    , 80			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayTaxes'									, N'IDX_PayTaxes_IngestionCoverWithoutTenantId'						, 0			        , 0				        , 0					        , 0				        , N'PayId ASC,PayUtcDate ASC'																							        , N'UltiTaxCode,DuplicatedLineNumber,ItemNo,TaxAmount,TaxYTDAmount,TaxableWages,TaxableGross,ExemptWages,GrossWages,TaxableTips,SuppTaxAmount,Version,CreatedUtcDt,UpdatedUtcDt'					, 0			        , NULL																    , 80			    , DEFAULT		        , DEFAULT						        , 1     						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'PayTaxes'									, N'PK_PayTaxes'													, 1			        , 1				        , 0					        , 0				        , N'PayUtcDate ASC,PayId ASC,UltiTaxCode ASC,DuplicatedLineNumber ASC'													        , NULL																																																, 0			        , NULL																    , 80			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psMonthly'						, 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'States'										, N'PK_States'														, 1			        , 1				        , 0					        , 1				        , N'CountryCode ASC,StateCode ASC'																						        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'SystemSettings'								, N'PK_SystemSettings'												, 1			        , 1				        , 0					        , 1				        , N'SettingName ASC'																									        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxAgency'									, N'PK_TaxAgency'													, 1			        , 1				        , 0					        , 1				        , N'TaxAgencyId ASC'																									        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxAgency'									, N'UQ_TaxAgency'													, 1			        , 0				        , 0					        , 0				        , N'TaxAgencyCode ASC'																									        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactionAmounts'				, N'CDX_TaxAgencyTransactionAmounts'								, 0			        , 0				        , 0					        , 1				        , N'CheckDate ASC'																										        , NULL																																																, 0			        , NULL																    , 90			    , 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactionAmounts'				, N'PK_TaxAgencyTransactionAmounts'									, 1			        , 1				        , 0					        , 0				        , N'TransactionGUID ASC,TaxId ASC'																						        , NULL																																																, 0			        , NULL																    , 90			    , 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactions'						, N'IDX_TaxAgencyTransactions_CollectionDetailsCover'				, 0			        , 0				        , 0					        , 0				        , N'TaxAgencyId ASC,PostPayrollGUID ASC'																				        , N'TransactionAmount,TransactionGUID,TransactionType'																																				, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactions'						, N'IDX_TaxAgencyTransactions_IngestionCover'						, 0			        , 0				        , 0					        , 0				        , N'TransactionGUID ASC,Version ASC'																					        , N'TenantId'																																														, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactions'						, N'PK_TaxAgencyTransactions'										, 1			        , 1				        , 0					        , 0				        , N'TransactionGUID ASC'																					                    , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactions'						, N'IDX_TaxAgencyTransactions_CDVoidPaymentCover'					, 0			        , 0				        , 0					        , 0				        , N'TransactionType ASC,PaymentVoidLiabilityId ASC'																		        , 'TaxAgencyId,TransactionAmount,PostPayrollId'																																						, 0			        , NULL																    , 90			    , 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactions'						, N'IDX_TaxAgencyTransactions_TransactionType_CD'					, 0			        , 0				        , 0					        , 0				        , N'TransactionType ASC'																								        , 'TenantId,TaxAgencyId,TransactionGUID,PostPayrollId'																																				, 0			        , NULL																    , 90			    , 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxAmounts'									, N'IDX_TaxAmounts_UltiTaxCode'										, 0			        , 0				        , 0					        , 0				        , N'UltiTaxCode ASC'																									        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxAmounts'									, N'PK_TaxAmounts'													, 1			        , 1				        , 0					        , 1				        , N'TaxPayrollGUID ASC,UTETaxDataSourceTableSetKey ASC,TaxId ASC,TenantId ASC'											        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxAmountsUltiTaxCodes'						, N'PK_TaxAmountsUltiTaxCodes'										, 1			        , 1				        , 0					        , 1				        , N'TaxPayrollGUID ASC,UTETaxDataSourceTableSetKey ASC,TaxId ASC,UltiTaxCode ASC'										        , NULL																																																, 0			        , NULL																    , 90			    , 0				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , N'PAGE'				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxCodes'									, N'IDX_TaxCodes_CollectionDetailsCover'							, 0			        , 0				        , 0					        , 0				        , N'TaxAgencyId ASC'																									        , N'TaxId,Description,UTETaxCode,TaxGUID,UltiproTaxCodeList,SortId'																																	, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxCodes'									, N'PK_TaxCodes'													, 1			        , 1				        , 0					        , 1				        , N'TaxId ASC'																											        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxCodes'									, N'UQ_TaxCodes'													, 1			        , 0				        , 0					        , 0				        , N'TaxGUID ASC'																										        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxLiabilities'								, N'PK_TaxLiabilities'												, 1			        , 1				        , 0					        , 1				        , N'TaxLiabilityId ASC,PayUtcDate ASC'																					        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'	        , 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxLiabilities'								, N'IDX_TaxLiabilities_CheckDateCover'								, 0			        , 0				        , 0					        , 0				        , N'TaxLiabilityOriginTypeKey ASC,LiabilityId ASC,PayUtcDate ASC'														        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , 1								        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'psYearlyNoSlidingWindow'	        , 'PayUtcDate'				)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxPaymentCredits'							, N'IDX_TaxPaymentCredits_CollectionDetailsCover'					, 0			        , 0				        , 0					        , 0				        , N'LiabilityId ASC,TenantId ASC,CreditEffectOnLiabilityKey ASC,CreditAmountApplied ASC,TaxCreditId ASC'				        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxPaymentCredits'							, N'IX_TaxPaymentCredits_ReducedQeAdjLiabilityPaymentId'			, 0			        , 0				        , 0					        , 0				        , N'ReducedQeAdjLiabilityPaymentId ASC'																					        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxPaymentCredits'							, N'IX_TaxPaymentCredits_TaxCreditId'								, 0			        , 0				        , 0					        , 0				        , N'TaxCreditId ASC'																									        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxPaymentCredits'							, N'IX_TaxPaymentCredits_TaxPaymentId'								, 0			        , 0				        , 0					        , 0				        , N'TaxPaymentId ASC'																									        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxPaymentCredits'							, N'PK_TaxPaymentCredits'											, 1			        , 1				        , 0					        , 1				        , N'TaxPaymentCreditId ASC'																								        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxPaymentCredits'							, N'UQ_TaxPaymentCredits'											, 1			        , 0				        , 0					        , 0				        , N'TenantId ASC,SessionId ASC,TaxPaymentId ASC,TaxCreditId ASC,ReducedQeAdjLiabilityPaymentId ASC'						        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)		
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'								, N'IDX_TaxPayrolls_CollectionDetailsCover'							, 0			        , 0				        , 0					        , 0				        , N'TenantId ASC,PostPayrollGUID ASC'																					        , N'UTETaxDataSourceTableSetKey,ImportUtcDateTime,TaxPayrollGUID,PayrollId'																															, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'								, N'IDX_TaxPayrolls_CollectionDetailsCover2'						, 0			        , 0				        , 0					        , 0				        , N'TenantId ASC,PostPayrollId ASC'																						        , N'UTETaxDataSourceTableSetKey,ImportUtcDateTime,TaxPayrollGUID,PayrollId,PayUtcDate'																												, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'								, N'PK_TaxPayrolls'													, 1			        , 1				        , 0					        , 1				        , N'TaxPayrollGUID ASC,UTETaxDataSourceTableSetKey ASC,TenantId ASC'													        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'								, N'UQ_TaxPayrolls_PostPayrollGUID'									, 1			        , 0				        , 0					        , 0				        , N'PostPayrollGUID ASC'																								        , NULL																																																, 1			        , N'([PostPayrollGUID]<>''00000000-0000-0000-0000-000000000000'')'	    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'								, N'UQ_TaxPayrolls_PostPayrollId'									, 1			        , 0				        , 0					        , 0				        , N'PostPayrollId ASC'																									        , NULL																																																, 1			        , N'([PostPayrollId]<>(0))'											    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'								, N'UDX_TaxPayrolls_CollectionDetailsCover'							, 1			        , 0				        , 0					        , 0				        , N'PostPayrollGUID ASC'																								        , N'UTETaxDataSourceTableSetKey,ImportUtcDateTime,TaxPayrollGUID,PayrollId,LiabilityId'																												, 1			        , N'([PostPayrollGUID]<>''00000000-0000-0000-0000-000000000000'')'	    , 90			    , 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)

        --	(	DatabaseName        , SchemaName	,TableName									    ,IndexName												            ,IsUnique	         ,IsPrimaryKey	        , IsUniqueConstraint        , IsClustered	        ,KeyColumnList				                                                                                                    ,IncludedColumnList	                                                                                                                                                                                ,IsFiltered         ,FilterPredicate                                                        ,[Fillfactor]	    ,OptionPadIndex         ,OptionStatisticsNoRecompute	        ,OptionStatisticsIncremental	        ,OptionIgnoreDupKey	        ,OptionResumable	        ,OptionMaxDuration	        ,OptionAllowRowLocks	        ,OptionAllowPageLocks	        ,OptionDataCompression	        , NewStorage						, PartitionColumn			)		
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxSchedules'								, N'PK_TaxSchedules'										        , 1			         ,1 			        , 0					        , 1				        , N'TaxScheduleGUID ASC'		                                                                                                ,NULL				                                                                                                                                                                                , 0			        , NULL		  	                                                        , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TaxSchedules'								, N'UDX_TaxSchedules_TaxScheduleId'							        , 1			         ,0 			        , 0					        , 0				        , N'TaxScheduleId ASC'			                                                                                                ,NULL				                                                                                                                                                                                , 0			        , NULL		  	                                                        , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
		
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TenantProduct'								, N'PK_TenantProduct'												, 1			        , 1				        , 0					        , 1				        , N'TenantId ASC,ProductCodeKey ASC'																					        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'Tenants'									, N'PK_Tenants'														, 1			        , 1				        , 0					        , 1				        , N'TenantId ASC'																										        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'TenantStatus'								, N'PK_TenantStatus'												, 1			        , 1				        , 0					        , 1				        , N'TenantId ASC,TenantStatusCode ASC,EffectiveUtcDateFrom ASC,EffectiveUtcDateTo ASC'									        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'UltiProTaxCodeMapping'						, N'PK__UltiProTaxCodeMapping'										, 1			        , 1				        , 0					        , 1				        , N'UltiProTaxCodeMapId ASC'																							        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'UsgBankAccounts'							, N'PK_UsgBankAccounts'												, 1			        , 1				        , 0					        , 1				        , N'BankAccountId ASC'																									        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'ReportRequests'								, N'PK_ReportRequests'												, 1			        , 1				        , 0					        , 1				        , N'ReportRequestId ASC'																								        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'ReportParameters'							, N'PK_ReportParameters'											, 1			        , 1				        , 0					        , 1				        , N'ReportRequestId ASC,ParameterName ASC'																				        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'ReportFileInformation'						, N'PK_ReportFileInformation'										, 1			        , 1				        , 0					        , 1				        , N'ReportRequestId ASC'																								        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'ReportStatistics'							, N'PK_ReportStatistics'											, 1			        , 1				        , 0					        , 1				        , N'ReportRequestId ASC'																								        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'ReportObjectStoreInfo'						, N'PK_ReportObjectStoreInfo'										, 1			        , 1				        , 0					        , 1				        , N'ReportRequestId ASC'																								        , NULL																																																, 0			        , NULL																    , 90			    , DEFAULT		        , DEFAULT						        , DEFAULT						        , DEFAULT			        , DEFAULT			        , DEFAULT			        , DEFAULT				        , DEFAULT				        , DEFAULT				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'YEProcessing'								, N'PK_YEProcessing'												, 1			        , 1				        , 0					        , 1				        , N'YEProcessingId ASC'																									        , NULL																																																, 0			        , NULL																    , 90			    , 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'YEProcessing'								, N'UQ_YEProcessing'												, 1			        , 0				        , 0					        , 0				        , N'ClientId ASC,TaxYear ASC,TenantId ASC'																				        , NULL																																																, 0			        , NULL																    , 90			    , 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'YEProcessingFiles'							, N'PK_YEProcessingFiles'											, 1			        , 1				        , 0					        , 1				        , N'YEProcessingId ASC,InboundFileTypeKey ASC,UltiProAgency ASC'														        , NULL																																																, 0			        , NULL																    , 90			    , 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)
	INSERT INTO DOI.IndexesRowStore ( DatabaseName        , SchemaName ,TableName          ,IndexName               ,IsUnique_Desired ,IsPrimaryKey_Desired , IsUniqueConstraint_Desired, IsClustered_Desired ,KeyColumnList_Desired                           ,IncludedColumnList_Desired                                           ,IsFiltered_Desired ,FilterPredicate_Desired                                             ,Fillfactor_Desired ,OptionPadIndex_Desired ,OptionStatisticsNoRecompute_Desired ,OptionStatisticsIncremental_Desired ,OptionIgnoreDupKey_Desired ,OptionResumable_Desired ,OptionMaxDuration_Desired ,OptionAllowRowLocks_Desired ,OptionAllowPageLocks_Desired ,OptionDataCompression_Desired , Storage_Desired     , PartitionColumn_Desired )    VALUES  	(N'PaymentReporting' , N'dbo'		, N'YEProcessingFiles'							, N'UDX_YEProcessingFiles'											, 1			        , 0				        , 0					        , 0				        , N'YEProcessingId ASC,FileName ASC'																					        , NULL																																																, 1			        , N'([FileName]<>'''')'												    , 90			    , 1				        , 0								        , 0								        , 0					        , DEFAULT			        , 0					        , 1						        , 1						        , 'PAGE'				        , 'PRIMARY'							, NULL						)	
        --	(	DatabaseName        , SchemaName	,TableName									    ,IndexName												            ,IsUnique	        ,IsPrimaryKey	        , IsUniqueConstraint        , IsClustered	        ,KeyColumnList				                                                                                                    ,IncludedColumnList	                                                                                                                                                                                ,IsFiltered         ,FilterPredicate                                                        ,[Fillfactor]	    ,OptionPadIndex         ,OptionStatisticsNoRecompute	        ,OptionStatisticsIncremental	        ,OptionIgnoreDupKey	        ,OptionResumable	        ,OptionMaxDuration	        ,OptionAllowRowLocks	        ,OptionAllowPageLocks	        ,OptionDataCompression	        , NewStorage						, PartitionColumn			)		

END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_InsertData.sql" 


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_InsertData.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('0633efff-e170-5b71-a02b-8845ac86ec45' AS UNIQUEIDENTIFIER), '6C31DE15F383F76B5D2C11F6CF5330D4FE7D798A55E0EE69760987560E3DAE62', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_InsertData.sql", ID: {0633efff-e170-5b71-a02b-8845ac86ec45} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6f21f6ca-96cd-5cb0-9726-717ddcd0faa4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1BA095968A23E4B4EE2CC27BAE63A311A53B7D26BBD3BDE51FAB44C40E13C981')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_5_Indexes.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_5_Indexes.sql", ID: {6f21f6ca-96cd-5cb0-9726-717ddcd0faa4} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_5_Indexes.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_5_Indexes]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_5_Indexes];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_5_Indexes]
AS

--EXEC DOI.spRefreshMetadata_User_IndexesRowStore_CreateTables
--EXEC DOI.spRefreshMetadata_User_IndexesColumnStore_CreateTables
EXEC DOI.spRefreshMetadata_User_IndexesRowStore_InsertData
EXEC DOI.spRefreshMetadata_User_IndexesColumnStore_InsertData
EXEC DOI.spRefreshMetadata_User_IndexesRowStore_UpdateData
EXEC DOI.spRefreshMetadata_User_IndexesColumnStore_UpdateData
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_5_Indexes.sql" --


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_5_Indexes.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('6f21f6ca-96cd-5cb0-9726-717ddcd0faa4' AS UNIQUEIDENTIFIER), '1BA095968A23E4B4EE2CC27BAE63A311A53B7D26BBD3BDE51FAB44C40E13C981', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_5_Indexes.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_5_Indexes.sql", ID: {6f21f6ca-96cd-5cb0-9726-717ddcd0faa4} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0c4554b8-3c6c-558b-9247-3820f97931c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F188E649E6ACC8F25C85B2A03C3015732D385039CE15B40979CD2DF1750FD42D')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_IndexAggColumns_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_IndexAggColumns_UpdateData.sql", ID: {0c4554b8-3c6c-558b-9247-3820f97931c0} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_IndexAggColumns_UpdateData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_Tables_IndexAggColumns_UpdateData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Tables_IndexAggColumns_UpdateData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [DOI].[spRefreshMetadata_User_Tables_IndexAggColumns_UpdateData]
AS

UPDATE T
SET Storage_Actual = IndexAgg.ExistingTableStorage,
    StorageType_Actual = IndexAgg.ExistingTableStorageType,
    StorageType_Desired = IndexAgg.NewTableStorageType, 
    AreIndexesFragmented =  CASE 
			                    WHEN IndexAgg.FragmentationType = 'None'
			                    THEN 0
			                    ELSE 1 
		                    END,
	AreIndexesBeingUpdated =    CASE IndexAgg.AreIndexesBeingUpdated
			                        WHEN 'None'
			                        THEN 0
			                        ELSE 1
		                        END,
	AreIndexesMissing = IndexAgg.AreIndexesMissing,
    IsClusteredIndexBeingDropped = ISNULL(IndexAgg.IsClusteredIndexBeingDropped, 0),
	WhichUniqueConstraintIsBeingDropped =   CASE
		                                        WHEN ISNULL(IndexAgg.IsPKDropped, 0) = 1 AND ISNULL(IndexAgg.IsUQDropped, 0) = 0
		                                        THEN 'PK' 
		                                        WHEN ISNULL(IndexAgg.IsPKDropped, 0) = 0 AND ISNULL(IndexAgg.IsUQDropped, 0) = 1
		                                        THEN 'UQ'
		                                        WHEN ISNULL(IndexAgg.IsPKDropped, 0) = 1 AND ISNULL(IndexAgg.IsUQDropped, 0) = 1
		                                        THEN 'Both'
		                                        ELSE 'None'
	                                        END,
	IsStorageChanging = IndexAgg.IsStorageChanging,
	NeedsTransaction = HasIndexDropAndRecreate,
    PKColumnList = DOI.fnGetPKColumnListForTable (T.DatabaseName, T.SchemaName, T.TableName),
    PKColumnListJoinClause = DOI.fnGetJoinClauseForTable(T.DatabaseName, T.SchemaName, T.TableName, 0, 'T', 'PT')
FROM DOI.Tables T
    INNER JOIN (
                SELECT  I.DatabaseName,
                        I.SchemaName,
                        I.TableName,
                        MIN(I.IndexUpdateType) AS AreIndexesBeingUpdated,
                        MIN(CASE 
								WHEN NumPages_Actual > SS.MinNumPages AND Fragmentation > 30 
								THEN 'Heavy' 
								WHEN NumPages_Actual > SS.MinNumPages AND Fragmentation BETWEEN 5 AND 30 THEN 'Light' 
								ELSE 'None' 
							END) AS FragmentationType,
                        MAX(CAST(I.IsStorageChanging AS TINYINT)) AS IsStorageChanging,
                        MAX(CAST(I.IsIndexMissingFromSQLServer AS TINYINT)) AS AreIndexesMissing,
                        MAX(CASE 
                                WHEN IsClustered_Desired = 1 
                                THEN I.Storage_Actual
                                ELSE '' 
                            END) AS ExistingTableStorage,
                        MAX(CASE 
                                WHEN IsClustered_Desired = 1 
                                THEN I.StorageType_Actual
                                ELSE '' 
                            END) AS ExistingTableStorageType,
                        MAX(CASE 
                                WHEN IsClustered_Desired = 1 
                                THEN I.StorageType_Desired
                                ELSE '' 
                            END) AS NewTableStorageType,
                        MAX(CASE 
                                WHEN IsClustered_Desired = 1 
                                    AND (IsUnique_Desired <> ISNULL(IsUnique_Actual, '') 
							                OR KeyColumnList_Desired <>ISNULL(KeyColumnList_Actual, '') 
							                OR ISNULL(IncludedColumnList_Desired, '') <> ISNULL(IncludedColumnList_Actual, '') 
							                OR ISNULL(FilterPredicate_Desired, '') <> ISNULL(FilterPredicate_Actual, '') 
							                OR IsClustered_Desired <> IsClustered_Actual
							                OR (PartitionFunction_Desired <> PartitionFunction_Actual
								                AND TTP.IntendToPartition = 1))
                                THEN 1
                                ELSE 0
                            END) AS IsClusteredIndexBeingDropped,
                        MAX(CASE 
				                WHEN (IsUnique_Desired <> ISNULL(IsUnique_Actual, '') 
						                OR KeyColumnList_Desired <>ISNULL(KeyColumnList_Actual, '') 
						                OR ISNULL(IncludedColumnList_Desired, '') <> ISNULL(IncludedColumnList_Actual, '') 
						                OR ISNULL(FilterPredicate_Desired, '') <> ISNULL(FilterPredicate_Actual, '') 
						                OR IsClustered_Desired <> IsClustered_Actual
						                OR (PartitionFunction_Desired <> PartitionFunction_Actual
							                AND TTP.IntendToPartition = 1))
				                THEN 1 
				                ELSE 0 
			                END) AS HasIndexDropAndRecreate, --this is the same logic as AreDropRecreateOptionsChanging
                        MAX(CASE
                                WHEN (IsPrimaryKey_Desired = 1 AND IsUnique_Desired = 1)
                                    AND (IsUnique_Desired <> ISNULL(IsUnique_Actual, '') 
						                OR KeyColumnList_Desired <>ISNULL(KeyColumnList_Actual, '') 
						                OR ISNULL(IncludedColumnList_Desired, '') <> ISNULL(IncludedColumnList_Actual, '') 
						                OR ISNULL(FilterPredicate_Desired, '') <> ISNULL(FilterPredicate_Actual, '') 
						                OR IsClustered_Desired <> IsClustered_Actual
						                OR (PartitionFunction_Desired <> PartitionFunction_Actual
							                AND TTP.IntendToPartition = 1)) --this is the same logic as AreDropRecreateOptionsChanging
                                THEN 1
                                ELSE 0
                            END) AS IsPKDropped, 
                        MAX(CASE
                                WHEN (IsPrimaryKey_Desired = 0 AND IsUnique_Desired = 1)
                                    AND (IsUnique_Desired <> ISNULL(IsUnique_Actual, '') 
						                OR KeyColumnList_Desired <>ISNULL(KeyColumnList_Actual, '') 
						                OR ISNULL(IncludedColumnList_Desired, '') <> ISNULL(IncludedColumnList_Actual, '') 
						                OR ISNULL(FilterPredicate_Desired, '') <> ISNULL(FilterPredicate_Actual, '') 
						                OR IsClustered_Desired <> IsClustered_Actual
						                OR (PartitionFunction_Desired <> PartitionFunction_Actual
							                AND TTP.IntendToPartition = 1)) --this is the same logic as AreDropRecreateOptionsChanging
                                THEN 1
                                ELSE 0
                            END) AS IsUQDropped

                from DOI.vwIndexes I
                    INNER JOIN DOI.Tables TTP ON TTP.DatabaseName = I.DatabaseName
                        AND TTP.SchemaName = I.SchemaName
                        AND TTP.TableName = I.TableName
                    CROSS JOIN (SELECT CAST(SettingValue AS INT) AS MinNumPages FROM DOI.DOISettings WHERE SettingName = 'MinNumPagesForIndexDefrag') SS
                GROUP BY I.DatabaseName, I.SchemaName, I.TableName ) IndexAgg
        ON IndexAgg.DatabaseName = T.DatabaseName
            AND IndexAgg.SchemaName = T.SchemaName
            AND IndexAgg.TableName = T.TableName


UPDATE T
SET AreStatisticsChanging = ISNULL(StatsAgg.AreStatisticsChanging, 0)
FROM DOI.Tables T
    OUTER APPLY(SELECT	1 AS AreStatisticsChanging
				FROM DOI.[Statistics] STM
				WHERE STM.DatabaseName = T.DatabaseName
                    AND STM.SchemaName = T.SchemaName
					AND STM.TableName = T.TableName
                    AND STM.ReadyToQueue = 1
					AND STM.StatisticsUpdateType <> 'None'
				GROUP BY STM.SchemaName, STM.TableName) StatsAgg

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_IndexAggColumns_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_IndexAggColumns_UpdateData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('0c4554b8-3c6c-558b-9247-3820f97931c0' AS UNIQUEIDENTIFIER), 'F188E649E6ACC8F25C85B2A03C3015732D385039CE15B40979CD2DF1750FD42D', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_IndexAggColumns_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_IndexAggColumns_UpdateData.sql", ID: {0c4554b8-3c6c-558b-9247-3820f97931c0} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d4bb984e-1071-59a9-8dea-ec0f90f95299' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A53D5CDCC2B3F2F2D37B225B183A2FFE06803165099E50FF79BA948928256210')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_6_Tables_IndexAggColumns_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_6_Tables_IndexAggColumns_UpdateData.sql", ID: {d4bb984e-1071-59a9-8dea-ec0f90f95299} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_6_Tables_IndexAggColumns_UpdateData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_6_Tables_IndexAggColumns_UpdateData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_6_Tables_IndexAggColumns_UpdateData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_6_Tables_IndexAggColumns_UpdateData]
AS

EXEC [DOI].[spRefreshMetadata_User_Tables_IndexAggColumns_UpdateData]
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_6_Tables_IndexAggColumns_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_6_Tables_IndexAggColumns_UpdateData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('d4bb984e-1071-59a9-8dea-ec0f90f95299' AS UNIQUEIDENTIFIER), 'A53D5CDCC2B3F2F2D37B225B183A2FFE06803165099E50FF79BA948928256210', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_6_Tables_IndexAggColumns_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_6_Tables_IndexAggColumns_UpdateData.sql", ID: {d4bb984e-1071-59a9-8dea-ec0f90f95299} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('740363b2-ef57-57b4-ac05-9e2c767610dc' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D9272FFBA34944075D7996CFC6D50A78E41F9306CC71F1744DB9A57606C9F403')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_InsertData.sql", ID: {740363b2-ef57-57b4-ac05-9e2c767610dc} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_InsertData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexColumns_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexColumns_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_IndexColumns_InsertData]

--WITH NATIVE_COMPILATION, SCHEMABINDING
AS

/*
    EXEC DOI.[spRefreshMetadata_User_IndexColumns_InsertData]
*/

--BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)

    DELETE DOI.IndexColumns

    DECLARE @IndexColumns DOI.IndexColumnsTT 

    INSERT INTO @IndexColumns (	DatabaseName        , SchemaName	,TableName										,IndexName															, KeyColumnList_Desired																											                                                                            ,IncludedColumnList_Desired																																						)    VALUES	    (	N'PaymentReporting' , N'DataMart'	, N'AgencyLocalityTypeDim'						, N'PK_AgencyLocalityTypeDim'										, N'AgencyLocalityTypeKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'AgencyLocalityTypeDim'						, N'UQ_AgencyLocalityTypeDim'										, N'AgencyLocalityTypeDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'Bai2BankTransactionTypeDim'					, N'PK_Bai2BankTransactionTypeDim'									, N'Bai2BankTransactionTypeKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'Bai2BankTransactionTypeDim'					, N'UQ_Bai2BankTransactionTypeDim'									, N'Bai2BankTransactionTypeDesc ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'BankAccountPurposeDim'						, N'PK_BankAccountPurposeDim'										, N'BankAccountPurposeKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'BankAccountStatusDim'						, N'PK_BankAccountStatusDim'										, N'BankAccountStatusKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'BankAccountStatusDim'						, N'UQ_BankAccountStatusDim'										, N'BankAccountStatusDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'BankAccountTypeDim'							, N'PK_BankAccountTypeDim'											, N'BankAccountTypeKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'BankAccountTypeDim'							, N'UQ_BankAccountTypeDim'											, N'BankAccountTypeDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'BankTransactionTypeDim'						, N'PK_BankTransactionTypeDim'										, N'BankTransactionTypeKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'CheckAddModeDim'							, N'PK_CheckAddModeDim'												, N'checkAddModeKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'CheckAddModeDim'							, N'UQ_CheckAddModeDim'												, N'checkAddModeDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'CheckStatusDim'								, N'PK_CheckStatusDim'												, N'CheckStatusKey ASC'																									                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'CheckStatusDim'								, N'UQ_CheckStatusDim'												, N'CheckStatusDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'Company_TaxStatusDim'						, N'PK_Company_TaxStatusDim'										, N'Company_TaxStatusKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'Company_TaxStatusDim'						, N'UDX_Company_TaxStatusDim'										, N'Company_TaxStatusDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'CompanyTaxAgencyStatusDim'					, N'PK_CompanyTaxAgencyStatusDim'									, N'CompanyTaxAgencyStatusKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'CompanyTaxAgencyStatusDim'					, N'UDX_CompanyTaxAgencyStatusDim'									, N'CompanyTaxAgencyStatusDesc ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'CompanyStatusDim'							, N'PK_CompanyStatusDim'											, N'CompanyStatusKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'CompanyStatusDim'							, N'UQ_CompanyStatusDim'											, N'CompanyStatusDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'CompanyTypeDim'								, N'PK_CompanyTypeDim'												, N'CompanyTypeKey ASC'																									                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'CompanyTypeDim'								, N'UQ_CompanyTypeDim'												, N'CompanyTypeDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'CreditEffectOnLiabilityDim'					, N'PK_CreditEffectOnLiabilityDim'									, N'CreditEffectOnLiabilityKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'CreditEffectOnLiabilityDim'					, N'UQ_CreditEffectOnLiabilityDim'									, N'CreditEffectOnLiabilityDesc ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'FileRequestProcessingStatusDim'				, N'PK_FileRequestProcessingStatusDim'								, N'FileRequestProcessingStatusKey ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentActionTypeDim'					, N'PK_GarnishmentActionDim'										, N'GarnishmentActionTypeKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentActionTypeDim'					, N'UQ_GarnishmentActionDim'										, N'GarnishmentActionTypeDesc ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentExceptionDim'					, N'PK_GarnishmentExceptionDim'										, N'GarnishmentExceptionKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentExceptionDim'					, N'UQ_GarnishmentExceptionDim'										, N'GarnishmentExceptionDesc ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentIsInArrearsDim'					, N'PK_GarnishmentIsInArrearsDim'									, N'IsInArrearsKey ASC'																									                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentIsInArrearsDim'					, N'UQ_GarnishmentIsInArrearsDim'									, N'IsInArrearsDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentLiabilityStatusDim'				, N'PK_GarnishmentLiabilityStatusDim'								, N'GarnishmentLiabilityStatusKey ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentLiabilityStatusDim'				, N'UQ_GarnishmentLiabilityStatusDim'								, N'GarnishmentLiabilityStatusDesc ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentLiabilityTypeDim'				, N'PK_GarnishmentLiabilityTypeDim'									, N'GarnishmentLiabilityTypeKey ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentMedIndicatorDim'					, N'PK_GarnishmentMedIndicatorDim'									, N'MedIndicatorKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentMedIndicatorDim'					, N'UQ_GarnishmentMedIndicatorDim'									, N'MedIndicatorDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentPayableStatusDim'				, N'PK_GarnishmentPayableStatusDim'									, N'GarnishmentPayableStatusKey ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentPayableStatusDim'				, N'UQ_GarnishmentPayableStatusDim'									, N'GarnishmentPayableStatusDesc ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentPaymentTypeDim'					, N'PK_GarnishmentPaymentTypeDim'									, N'GarnishmentPaymentTypeKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentPaymentTypeDim'					, N'UQ_GarnishmentPaymentTypeDim'									, N'GarnishmentPaymentTypeDesc ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentPayrollInstanceReconStatusDim'	, N'PK_GarnishmentPayrollInstanceReconStatusDim'					, N'GarnishmentPayrollInstanceReconStatusKey ASC'																		                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentPayrollInstanceReconStatusDim'	, N'UQ_GarnishmentPayrollInstanceReconStatusDim'					, N'GarnishmentPayrollInstanceReconStatusDesc ASC'																		                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentsSupportsOthersDim'				, N'PK_GarnishmentsSupportsOthersDim'								, N'SupportsOthersKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentsSupportsOthersDim'				, N'UQ_GarnishmentsSupportsOthersCode'								, N'SupportsOthersDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentStatusDim'						, N'PK_GarnishmentStatusDim'										, N'GarnishmentStatusKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentStatusDim'						, N'UQ_GarnishmentsStatusDim'										, N'GarnishmentStatusDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentTypeDim'							, N'PK_GarnishmentTypeDim'											, N'GarnishmentTypeKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentTypeDim'							, N'UQ_GarnishmentTypeDim'											, N'GarnishmentTypeDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GLAccountClassificationDim'					, N'PK_GLAccountClassificationDim'									, N'GLAccountClassificationKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GLAccountClassificationDim'					, N'UQ_GLAccountClassificationDim'									, N'GLAccountClassificationDesc ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GLAccountStatusDim'							, N'PK_GLAccountStatusDim'											, N'GLAccountStatusKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GLAccountStatusDim'							, N'UQ_GLAccountStatusDim'											, N'GLAccountStatusDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GLAccountTypeDim'							, N'PK_GLAccountTypeDim'											, N'GLAccountTypeKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GLAccountTypeDim'							, N'UQ_GLAccountTypeDim'											, N'GLAccountTypeDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'InboundFileTypeDim'							, N'PK_InboundFileTypeDim'											, N'InboundFileTypeKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'InboundFileTypeDim'							, N'UQ_InboundFileTypeDim'											, N'InboundFileTypeDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'JournalEntryTransactionTypeDim'				, N'PK_JournalEntryTransactionTypeDim'								, N'JournalEntryTransactionTypeDimKey ASC'																				                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'JournalEntryTransactionTypeDim'				, N'UQ_JournalEntryTransactionTypeDim'								, N'JournalEntryTransactionTypeDimDescription ASC'																		                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'LiabilityCollectionPaymentMethoDOIm'		, N'PK_LiabilityCollectionPaymentMethoDOIm'							, N'LiabilityCollectionPaymentMethodKey ASC'																			                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'LiabilityCollectionPaymentMethoDOIm'		, N'UQ_LiabilityCollectionPaymentMethoDOIm'							, N'LiabilityCollectionPaymentMethodDesc ASC'																			                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'LiabilityCollectionStatusDim'				, N'PK_LiabilityCollectionStatusDim'								, N'LiabilityCollectionStatusKey ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'LiabilityCollectionStatusDim'				, N'UQ_LiabilityCollectionStatusDim'								, N'LiabilityCollectionStatusDesc ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'LiabilityCollectionTypeDim'					, N'PK_LiabilityCollectionTypeDim'									, N'LiabilityCollectionTypeKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'LiabilityStatusDim'							, N'PK_LiabilityStatusDim'											, N'LiabilityStatusKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'LiabilityStatusDim'							, N'UQ_LiabilityStatusDim'											, N'LiabilityStatusDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'LiabilityTypeDim'							, N'PK_LiabilityTypeDim'											, N'LiabilityTypeKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'NettedCollectionStatusDim'					, N'PK_NettedCollectionStatusDim'									, N'NettedCollectionStatusKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'PayExceptionTypeDim'						, N'PK_PayExceptionTypeDim'											, N'PayExceptionTypeKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'PayExceptionTypeDim'						, N'UQ_PayExceptionTypeDim'											, N'PayExceptionTypeDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'PayPortionStateDim'							, N'PK_PayPortionStateDim'											, N'PayPortionStateKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'PayPortionStateDim'							, N'UQ_PayPortionStateDim'											, N'PayPortionStateDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'PayProcessingStatusDim'						, N'PK_PayProcessingStatusDim'										, N'PayProcessingStatusKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'PayProcessingStatusDim'						, N'UQ_PayProcessingStatusDim'										, N'PayProcessingStatusDesc ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'PayrollPaymentStatusDim'					, N'PK_PayrollPaymentStatusDim'										, N'PayrollPaymentStatusKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'PayrollPaymentTypeDim'						, N'PK_PayrollPaymentTypeDim'										, N'PayrollPaymentTypeKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'PayrollTypeDim'								, N'PK_PayrollTypeDim'												, N'PayrollTypeKey ASC'																									                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'PayrollTypeDim'								, N'UQ_PayrollTypeDim'												, N'PayrollTypeDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'ProductActivationStatus'					, N'PK_TenantProductActivationStatus'								, N'ProductActivationStatusKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'ProductActivationStatus'					, N'UQ_TenantProductActivationStatus'								, N'ProductActivationStatusDesc ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'ProductCodeDim'								, N'PK_ProductCodeDim'												, N'ProductCodeKey ASC'																									                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'ProductCodeDim'								, N'UQ_ProductCodeDim'												, N'ProductCodeDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'ProductStatus'								, N'PK_TenantProductStatus'											, N'ProductStatusKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'ProductStatus'								, N'UQ_TenantProductStatus'											, N'ProductStatusDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (  N'PaymentReporting' , N'DataMart'   , N'QEADJFilterOptions'                         , N'PK_QEADJFilterOptions'                                          , N'QEADJFilterOptionKey ASC'                                                                                                                                                                               , NULL                                                                                                                                                                          )
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (  N'PaymentReporting' , N'DataMart'   , N'QEADJFilterOptions'                         , N'UDX_QEADJFilterOption'                                          , N'QEADJFilterOptionDesc ASC'                                                                                                                                                                              , NULL                                                                                                                                                                          )
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'RefundPortionDim'							, N'PK_RefundPortionDim'											, N'RefundPortionKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'RefundPortionDim'							, N'UQ_RefundPortionDim'											, N'RefundPortionDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'ReportRequestorTypeDim'						, N'PK_ReportSourceSystemDim'										, N'ReportSourceSystemName ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'ReportRequestStatusDim'						, N'PK_ReportRequestStatusDim'										, N'ReportRequestStatusKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxAgencyTransactionStatusDim'				, N'PK_TaxAgencyTransactionStatusDim'								, N'TaxAgencyTransactionStatusKey ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxAgencyTransactionStatusDim'				, N'UQ_TaxAgencyTransactionStatusDim'								, N'TaxAgencyTransactionStatusDesc ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxCodeActiveStatus'						, N'PK_TaxCodeActiveStatus'											, N'TaxCodeActiveStatusKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxCodeActiveStatus'						, N'UQ_TaxCodeActiveStatus'											, N'TaxCodeActiveStatusDesc ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxCodeProcessingFrequencyDim'				, N'PK_TaxCodeProcessingFrequencyDim'								, N'TaxCodeProcessingFrequencyKey ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxCodeProcessingFrequencyDim'				, N'UQ_TaxCodeProcessingFrequencyDim'								, N'TaxCodeProcessingFrequencyDesc ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxPaymentCreditStatusDim'					, N'PK_TaxPaymentCreditStatusDim'									, N'TaxPaymentCreditStatusKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxPaymentCreditStatusDim'					, N'UQ_TaxPaymentCreditStatusDim'									, N'TaxPaymentCreditStatusDesc ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxPaymentStatusDim'						, N'PK_TaxPaymentStatusDim'											, N'TaxPaymentStatusKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxPaymentStatusDim'						, N'UQ_TaxPaymentStatusDim'											, N'TaxPaymentStatusDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxPaymentTypeDim'							, N'PK_TaxPaymentTypeDim'											, N'TaxPaymentTypeKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxPaymentTypeDim'							, N'UQ_TaxPaymentTypeDim'											, N'TaxPaymentTypeDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TenantStatusDim'							, N'PK_TenantStatusDim'												, N'TenantStatusCode ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TenantStatusDim'							, N'UQ_TenantStatusDim'												, N'TenantStatusDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'UTETaxDataSourceTableSetDim'				, N'PkUTETaxDataSourceTableSetDim'									, N'UTETaxDataSourceTableSetKey ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentActionReasonDim'					, N'PK_GarnishmentActionReasonDim'									, N'GarnishmentActionReasonKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'GarnishmentActionReasonDim'					, N'UQ_GarnishmentActionReasonDim'									, N'GarnishmentActionReasonDesc ASC'																					                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxLiabilityOriginTypeDim'					, N'PK_TaxLiabilityOriginTypeDim'									, N'TaxLiabilityOriginTypeKey ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'TaxLiabilityOriginTypeDim'					, N'UQ_TaxLiabilityOriginTypeDim'									, N'TaxLiabilityOriginTypeDesc ASC'																						                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'YEFileStatusDim'							, N'PK_YEFileStatusDim'												, N'YEFileStatusKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'YEFileStatusDim'							, N'UQ_YEFileStatusDim'												, N'YEFileStatusDesc ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'YEIngestionTypeDim'							, N'PK_YEIngestionTypeDim'											, N'YEIngestionTypeKey ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'YEIngestionTypeDim'							, N'UQ_YEIngestionTypeDim'											, N'YEIngestionTypeDesc ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'YEProcessingStatusDim'						, N'PK_YEProcessingStatusDim'										, N'YEProcessingStatusKey ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'DataMart'	, N'YEProcessingStatusDim'						, N'UQ_YEProcessingStatusDim'										, N'YEProcessingStatusDesc ASC'																							                                                                                    , NULL																																											)
    --	(	DatabaseName        , SchemaName	,TableName									    ,IndexName												            ,KeyColumnList				                                                                                                                                                                                ,IncludedColumnList	                                                                                                                                                            )		
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Bai2BankTransactions'						, N'CDX_Bai2BankTransactions'										, N'TransactionSysUtcDt ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Bai2BankTransactions'						, N'PK_Bai2BankTransactions'										, N'TransactionSysUtcDt ASC,BankTransactionId ASC'																		                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'BankAccountDays'							, N'PK_BankAccountDays'												, N'BankAccountDayId ASC'																								                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'BankTransactions'							, N'CDX_BankTransactions'											, N'TransactionUtcDateTime ASC'																							                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'BankTransactions'							, N'IDX_BankTransactions_BankAcctCover'								, N'CollectionId ASC,UpdatedUtcDt ASC,TransactionUtcDateTime ASC'														                                                                                    , NULL																																											)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'BankTransactions'							, N'IDX_BankTransactions_GarnishmentPDCover'						, N'TenantId ASC,GarnishmentId ASC,TransactionUtcDateTime ASC'															                                                                                    , N'CbaRoutingNumber4,CbaAccountNumber4,CheckNumber,FileRequestId'																												)
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'BankTransactions'							, N'PK_BankTransactions'											, N'TransactionUtcDateTime ASC,Id ASC,TenantId ASC'																		                                                                                    , NULL																																											)
	--    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'dbo'		, N'changelog'									, N'PK_changelog'																																						, NULL									                                                                                    																																							, 0			, NULL	
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Companies'									, N'IX_Companies'													, N'TenantId ASC,COID ASC'																								                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Companies'									, N'PK_Companies'													, N'CompanyId ASC,TenantId ASC'																							                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Companies'									, N'UQ_Companies'													, N'CompanyId ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Companies'									, N'UQ_Companies_UTEClientId'										, N'UTEClientId ASC'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Company_Tax'								, N'PK_Company_Tax'													, N'Company_TaxGUID'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Company_Tax'								, N'UDX_Company_TaxCompanyId'										, N'CompanyId ASC,TenantId ASC'																							                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Company_Tax'								, N'UDX_Company_TaxId'												, N'Company_TaxId ASC'																							    	                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'CompanyTaxAgency'							, N'PK_CompanyTaxAgency'											, N'CompanyTaxAgencyId ASC'																								                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'CompanyTaxAgency'							, N'UDX_CompanyTaxAgency_Company_TaxGUID_TaxAgencyId'				, N'Company_TaxGUID ASC,TaxAgencyId ASC'																				                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'CompanyProduct'								, N'PK_CompanyProduct'												, N'CompanyId ASC,ProductCodeKey ASC,EffectiveUtcDateFrom ASC'															                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'CustomerBankAccounts'						, N'PK_CustomerBankAccounts'										, N'TenantId ASC,BankAccountId ASC'																						                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'DBDefragLog'								, N'PK_DBDefragLog'													, N'SchemaName ASC,RunDateTime ASC,TableName ASC,IndexName ASC'															                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'EFilingAcknowledgmentAlerts'				, N'PK_EFilingAcknowledgmentAlerts'									, N'EFilingAcknowledgmentAlertId ASC'																					                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'EFilingAcknowledgments'						, N'PK_EFilingAcknowledgments'										, N'SubmissionId ASC'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'EFilingAcknowledgments'						, N'UQ_EFilingAcknowledgments'										, N'EFilingAcknowledgmentId ASC'																						                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'FileRequestPayments'						, N'PK_FileRequestPayments'											, N'PaymentId ASC,PaymentFileRequestId ASC'																				                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'FileRequests'								, N'PK_FileRequests'												, N'FileRequestId ASC'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'GarnishmentLiabilities'						, N'IDX_GarnishmentLiabilities_TenantId'							, N'TenantId ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'GarnishmentLiabilities'						, N'PK_GarnishmentLiabilities'										, N'GarnishmentLiabilityId ASC,TenantId ASC'																			                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'GarnishmentLiabilities'						, N'IDX_GarnishmentLiabilities_PayrollInstanceId'					, N'PayrollInstanceId ASC'																								                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'GarnishmentLiabilities'						, N'UDX_GarnishmentLiabilities'                  					, N'LiabilityId ASC,GarnishmentLiabilityId ASC'																			                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'GarnishmentPayrollInstances'				, N'PK_GarnishmentPayrollInstances'									, N'GarnishmentPayrollInstanceId ASC,TenantId ASC'																		                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'GeneralLedgerAccounts'						, N'IDX_GeneralLedgerAccounts_GLSegment'							, N'GlSegment ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'GeneralLedgerAccounts'						, N'PK_GeneralLedgerAccounts'										, N'AccountId ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'JournalEntries'								, N'CDX_JournalEntries'												, N'TransactionUtcDt ASC'																								                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'JournalEntries'								, N'IDX_JournalEntries_AgencyCode'									, N'AgencyCode ASC,TenantId ASC,TransactionUtcDt ASC'																	                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'JournalEntries'								, N'PK_JournalEntries'												, N'JournalEntryId ASC,TransactionUtcDt ASC'																			                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Liabilities'								, N'IDX_Liabilities_WACDCover'										, N'TenantId ASC,CollectionId ASC,PayrollId ASC,PayUtcDt ASC'															                                                                                    , N'LiabilityId,Type,SourceCreatedUtcDt'																																		)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Liabilities'								, N'CDX_Liabilities'												, N'PayDate ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Liabilities'								, N'IDX_Liabilities_CollectionProductListCover'						, N'CollectionId ASC,ProductCode ASC,PayDate ASC'																		                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Liabilities'								, N'IDX_Liabilities_CompanyAggregateCover'							, N'CollectionId ASC,TenantId ASC,LegalEntityCompanyId ASC,PayDate ASC'													                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Liabilities'								, N'IDX_Liabilities_PayrollAggregateCover'							, N'CollectionId ASC,TenantId ASC,PayrollId ASC,PayDate ASC'															                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Liabilities'								, N'PK_Liabilities'													, N'PayDate ASC,LiabilityId ASC,TenantId ASC'																			                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'CDX_LiabilityCollections'										, N'PayUtcDt ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'IDX_LiabilityCollections_CDCover'								, N'CollectionId ASC,PayUtcDt ASC'																						                                                                                    , 'CollectedUtcDateTime,Status,Type,ConfirmationNumber,DueDate,PaymentMethod,TenantId'																							)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'IDX_LiabilityCollections_WACD_ExternalCover'					, N'TenantId ASC,PayUtcDt ASC'																							                                                                                    , N'CollectionId,PaymentMethod,DueDate,CollectedUtcDateTime,ConfirmationNumber,Status,UsgBankAccountId,CustomerBankAccountId'													)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'PK_LiabilityCollections'										, N'PayUtcDt ASC,CollectionId ASC'																						                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'IDX_LiabilityCollections_NetCollections'						, N'NettedCollectionId ASC,PayUtcDt ASC'																				                                                                                    , N'CollectionId,ConfirmationNumber,ProcessUtcDate'																																)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'IDX_LiabilityCollections_NetCollectionsLatestConfNumberCover'	, N'NettedCollectionId ASC,ProcessUtcDate DESC,PayUtcDt ASC'															                                                                                    , N'ConfirmationNumber'																																							)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'IDX_LiabilityCollections_CheckDateCover'	                    , N'CollectedUtcDateTime ASC,PayUtcDt ASC'															                                                                                                        , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'LiabilityCollections'						, N'IDX_LiabilityCollections_CheckDateCover2'	                    , N'TotalAmount ASC,CollectedUtcDateTime ASC,Type,PayUtcDt ASC'															                                                                                    , NULL      																																									)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'LiabilityCollectionConfirmationInfos'		, N'PK_LiabilityCollectionConfirmationInfos'						, N'LiabilityCollectionId ASC,ConfirmationInfoId ASC'																	                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'LiabilityCollectionComments'				, N'PK_LiabilityCollectionComments'									, N'CommentId ASC,LiabilityCollectionId ASC'																			                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'LiabilityPayments'							, N'PK_LiabilityPayments'											, N'LiabilityId ASC,PaymentId ASC,PaymentLiabilityId ASC'																                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'LiabilityPayments'							, N'IDX_LiabilityPayments_PaymentLiabilityId'						, N'PaymentLiabilityId ASC'																								                                                                                    , N'PaymentId'																																									)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'NettedCollections'							, N'PK_NettedCollections'											, N'NettedCollectionId ASC'																								                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'NettedCollectionsLiabilityCollections'		, N'PK_NettedCollectionsLiabilityCollections'						, N'NettedCollectionId ASC,CollectionId ASC'																			                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayActions'									, N'CDX_PayActions'													, N'PayUtcDate ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayActions'									, N'PK_PayActions'													, N'ActionId ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishment_Deductions'					, N'PK_PayGarnishment_Deductions'									, N'PayUtcDate ASC,GarnishmentId ASC'																					                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishment_Employees'					, N'PK_PayGarnishment_Employees'									, N'PayUtcDate ASC,GarnishmentId ASC'																					                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishment_Employees'					, N'IDX_PayGarnishment_Employees_WAPDCover'							, N'EmployeeNumber ASC,PayUtcDate ASC'																					                                                                                    , N'GarnishmentId,FirstName,LastName'																																			)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishment_Payees'						, N'PK_PayGarnishment_Payees'										, N'PayUtcDate ASC,GarnishmentId ASC'																					                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishmentActions'						, N'PK_PayGarnishmentActions'										, N'PayUtcDate ASC,GarnishmentId ASC,ActionId ASC'																		                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishmentActions'						, N'UQ_PayGarnishmentActions'										, N'PayUtcDate ASC,GarnishmentId ASC,ActionId ASC,ActionUtcDateTime ASC'												                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishmentExceptions'					, N'PK_PayGarnishmentExceptions'									, N'PayUtcDate ASC,GarnishmentId ASC,DateCleared ASC,GarnishmentExceptionKey ASC'										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishmentLiabilities'					, N'PK_PayGarnishmentLiabilities'									, N'PayUtcDate ASC,GarnishmentId ASC,GarnishmentLiabilityId ASC,TenantId ASC'											                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishmentLiabilities'					, N'IDX_PayGarnishmentLiabilities_WACDCover'						, N'GarnishmentLiabilityId ASC,PayUtcDate ASC'																			                                                                                    , N'GarnishmentId,Refunded,Removed'																																				)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishments'							, N'IDX_PayGarnishments_CollDetailsCover'							, N'PayUtcDate ASC'																										                                                                                    , N'TenantId,PayId,GarnishmentId,GarnishmentTypeKey,GarnishmentAmount,GarnishmentLiabilityId'																					)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishments'							, N'IDX_PayGarnishments_CollDetailsCover2'							, N'GarnishmentTypeKey ASC,PayUtcDate ASC'																				                                                                                    , N'TenantId,PayId,GarnishmentId,GarnishmentLiabilityId'																														)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishments'							, N'IDX_Paygarnishments_IngestionCover'								, N'GarnishmentId ASC,PayUtcDate ASC'																					                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishments'							, N'IDX_PayGarnishments_WACD_ExternalCover'							, N'TenantId ASC,PayUtcDate ASC'																						                                                                                    , N'PayId,GarnishmentId,GarnishmentTypeKey,GarnishmentAmount,GarnishmentLiabilityId'																							)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishments'							, N'IDX_PayGarnishments_PayrollInstanceId'							, N'PayrollInstanceId ASC,PayUtcDate ASC'																				                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayGarnishments'							, N'PK_PayGarnishments'												, N'PayUtcDate ASC,GarnishmentId ASC'																					                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayLiabilities'								, N'CDX_PayLiabilities'												, N'PayUtcDate ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayLiabilities'								, N'PK_PayLiabilities'												, N'PayUtcDate ASC,PayId ASC,LiabilityId ASC,ActionId ASC'																                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayLiabilities'								, N'IDX_PayLiabilities_LiabilityId'									, N'LiabilityId ASC,IsActive ASC,PayUtcDate ASC'																                                                                                            , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayrollInstances'							, N'PK_PayrollInstances'											, N'PayrollInstanceId ASC,TenantId ASC'																					                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayrollPayments'							, N'PK_PayrollPayments'												, N'PayrollPaymentId ASC'																								                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayrollUnits'								, N'IDX_PayrollUnits_PayGroup'										, N'PayGroup ASC,TenantId ASC'																							                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayrollUnits'								, N'IDX_PayrollUnits_PayrollCode'									, N'PayrollCode ASC'																									                                                                                    , N'PayrollId,TenantId'																																							)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayrollUnits'								, N'IDX_PayrollUnits_TenantId_PayrollCode'							, N'TenantId ASC,PayrollCode ASC'																						                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayrollUnits'								, N'PK_PayrollUnits'												, N'PayrollId ASC,TenantId ASC'																							                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayrollUnits'								, N'UQ_PayrollUnits'												, N'PayrollCode ASC,LegalEntityCompanyId ASC,TenantId ASC'																                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Pays'										, N'CDX_Pays'														, N'PayUtcDate ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Pays'										, N'IDX_Pays_CheckSummaryReportCover'								, N'CompanyId ASC,TenantId ASC,PayId ASC,PayUtcDate ASC'																                                                                                    , N'EmployeeNumber'																																								)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Pays'										, N'IDX_Pays_CDCover'												, N'NetPayLiabilityId ASC,PayUtcDate ASC'																				                                                                                    , N'EmployeeLastName,EmployeeFirstName,EmployeeNumber,CheckNumber,CheckAmount,ddAmount,PayrollId,PayrollInstanceId'																)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Pays'										, N'PK_Pays'														, N'PayId ASC,PayUtcDate ASC'																							                                                                                    , NULL																																											)
    --	(	DatabaseName        , SchemaName	,TableName									    ,IndexName												            ,KeyColumnList				                                                                                                                                                                                ,IncludedColumnList	                                                                                                                                                            )		
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayTaxes'									, N'CDX_PayTaxes'													, N'PayUtcDate ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayTaxes'									, N'IDX_PayTaxes_IngestionCoverWithoutTenantId'						, N'PayId ASC,PayUtcDate ASC'																							                                                                                    , N'UltiTaxCode,DuplicatedLineNumber,ItemNo,TaxAmount,TaxYTDAmount,TaxableWages,TaxableGross,ExemptWages,GrossWages,TaxableTips,SuppTaxAmount,Version,CreatedUtcDt,UpdatedUtcDt')
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'PayTaxes'									, N'PK_PayTaxes'													, N'PayUtcDate ASC,PayId ASC,UltiTaxCode ASC,DuplicatedLineNumber ASC'													                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'States'										, N'PK_States'														, N'CountryCode ASC,StateCode ASC'																						                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'SystemSettings'								, N'PK_SystemSettings'												, N'SettingName ASC'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxAgency'									, N'PK_TaxAgency'													, N'TaxAgencyId ASC'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxAgency'									, N'UQ_TaxAgency'													, N'TaxAgencyCode ASC'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactionAmounts'				, N'CDX_TaxAgencyTransactionAmounts'								, N'CheckDate ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactionAmounts'				, N'PK_TaxAgencyTransactionAmounts'									, N'TransactionGUID ASC,TaxId ASC'																						                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactions'						, N'IDX_TaxAgencyTransactions_CollectionDetailsCover'				, N'TaxAgencyId ASC,PostPayrollGUID ASC'																				                                                                                    , N'TransactionAmount,TransactionGUID,TransactionType'																															)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactions'						, N'IDX_TaxAgencyTransactions_IngestionCover'						, N'TransactionGUID ASC,Version ASC'																					                                                                                    , N'TenantId'																																									)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactions'						, N'PK_TaxAgencyTransactions'										, N'TransactionGUID ASC'																					                                                                                                , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactions'						, N'IDX_TaxAgencyTransactions_CDVoidPaymentCover'					, N'TransactionType ASC,PaymentVoidLiabilityId ASC'																		                                                                                    , 'TaxAgencyId,TransactionAmount,PostPayrollId'																																	)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactions'						, N'IDX_TaxAgencyTransactions_TransactionType_CD'					, N'TransactionType ASC'																								                                                                                    , 'TenantId,TaxAgencyId,TransactionGUID,PostPayrollId'																															)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxAmounts'									, N'IDX_TaxAmounts_UltiTaxCode'										, N'UltiTaxCode ASC'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxAmounts'									, N'PK_TaxAmounts'													, N'TaxPayrollGUID ASC,UTETaxDataSourceTableSetKey ASC,TaxId ASC,TenantId ASC'											                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxAmountsUltiTaxCodes'						, N'PK_TaxAmountsUltiTaxCodes'										, N'TaxPayrollGUID ASC,UTETaxDataSourceTableSetKey ASC,TaxId ASC,UltiTaxCode ASC'										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxCodes'									, N'IDX_TaxCodes_CollectionDetailsCover'							, N'TaxAgencyId ASC'																									                                                                                    , N'TaxId,Description,UTETaxCode,TaxGUID,UltiproTaxCodeList,SortId'																												)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxCodes'									, N'PK_TaxCodes'													, N'TaxId ASC'																											                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxCodes'									, N'UQ_TaxCodes'													, N'TaxGUID ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxLiabilities'								, N'PK_TaxLiabilities'												, N'PayUtcDate ASC,TaxLiabilityId ASC'																					                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxLiabilities'								, N'IDX_TaxLiabilities_CheckDateCover'								, N'TaxLiabilityOriginTypeKey ASC,LiabilityId ASC,PayUtcDate ASC'														                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxPaymentCredits'							, N'IDX_TaxPaymentCredits_CollectionDetailsCover'					, N'LiabilityId ASC,TenantId ASC,CreditEffectOnLiabilityKey ASC,CreditAmountApplied ASC,TaxCreditId ASC'				                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxPaymentCredits'							, N'IX_TaxPaymentCredits_ReducedQeAdjLiabilityPaymentId'			, N'ReducedQeAdjLiabilityPaymentId ASC'																					                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxPaymentCredits'							, N'IX_TaxPaymentCredits_TaxCreditId'								, N'TaxCreditId ASC'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxPaymentCredits'							, N'IX_TaxPaymentCredits_TaxPaymentId'								, N'TaxPaymentId ASC'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxPaymentCredits'							, N'PK_TaxPaymentCredits'											, N'TaxPaymentCreditId ASC'																								                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxPaymentCredits'							, N'UQ_TaxPaymentCredits'											, N'TenantId ASC,SessionId ASC,TaxPaymentId ASC,TaxCreditId ASC,ReducedQeAdjLiabilityPaymentId ASC'						                                                                                    , NULL																																											)		
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'								, N'IDX_TaxPayrolls_CollectionDetailsCover'							, N'TenantId ASC,PostPayrollGUID ASC'																					                                                                                    , N'UTETaxDataSourceTableSetKey,ImportUtcDateTime,TaxPayrollGUID,PayrollId'																										)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'								, N'IDX_TaxPayrolls_CollectionDetailsCover2'						, N'TenantId ASC,PostPayrollId ASC'																						                                                                                    , N'UTETaxDataSourceTableSetKey,ImportUtcDateTime,TaxPayrollGUID,PayrollId,PayUtcDate'																							)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'								, N'PK_TaxPayrolls'													, N'TaxPayrollGUID ASC,UTETaxDataSourceTableSetKey ASC,TenantId ASC'													                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'								, N'UQ_TaxPayrolls_PostPayrollGUID'									, N'PostPayrollGUID ASC'																								                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'								, N'UQ_TaxPayrolls_PostPayrollId'									, N'PostPayrollId ASC'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'								, N'UDX_TaxPayrolls_CollectionDetailsCover'							, N'PostPayrollGUID ASC'																								                                                                                    , N'UTETaxDataSourceTableSetKey,ImportUtcDateTime,TaxPayrollGUID,PayrollId,LiabilityId'																							)

    --	(	DatabaseName        , SchemaName	,TableName									    ,IndexName												            ,KeyColumnList				                                                                                                                                                                                ,IncludedColumnList	                                                                                                                                                            )		
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxSchedules'								, N'PK_TaxSchedules'										        , N'TaxScheduleGUID ASC'		                                                                                                                                                                            ,NULL				                                                                                                                                                            )
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TaxSchedules'								, N'UDX_TaxSchedules_TaxScheduleId'							        , N'TaxScheduleId ASC'			                                                                                                                                                                            ,NULL				                                                                                                                                                            )
		
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TenantProduct'								, N'PK_TenantProduct'												, N'TenantId ASC,ProductCodeKey ASC'																					                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'Tenants'									, N'PK_Tenants'														, N'TenantId ASC'																										                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'TenantStatus'								, N'PK_TenantStatus'												, N'TenantId ASC,TenantStatusCode ASC,EffectiveUtcDateFrom ASC,EffectiveUtcDateTo ASC'									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'UltiProTaxCodeMapping'						, N'PK__UltiProTaxCodeMapping'										, N'UltiProTaxCodeMapId ASC'																							                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'UsgBankAccounts'							, N'PK_UsgBankAccounts'												, N'BankAccountId ASC'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'ReportRequests'								, N'PK_ReportRequests'												, N'ReportRequestId ASC'																								                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'ReportParameters'							, N'PK_ReportParameters'											, N'ReportRequestId ASC,ParameterName ASC'																				                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'ReportFileInformation'						, N'PK_ReportFileInformation'										, N'ReportRequestId ASC'																								                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'ReportStatistics'							, N'PK_ReportStatistics'											, N'ReportRequestId ASC'																								                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'ReportObjectStoreInfo'						, N'PK_ReportObjectStoreInfo'										, N'ReportRequestId ASC'																								                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'YEProcessing'								, N'PK_YEProcessing'												, N'YEProcessingId ASC'																									                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'YEProcessing'								, N'UQ_YEProcessing'												, N'ClientId ASC,TaxYear ASC,TenantId ASC'																				                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'YEProcessingFiles'							, N'PK_YEProcessingFiles'											, N'YEProcessingId ASC,InboundFileTypeKey ASC,UltiProAgency ASC'														                                                                                    , NULL																																											)
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (	N'PaymentReporting' , N'dbo'		, N'YEProcessingFiles'							, N'UDX_YEProcessingFiles'											, N'YEProcessingId ASC,FileName ASC'																					                                                                                    , NULL																																											)	

    --columnstore
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (  N'PaymentReporting' , N'dbo'		, N'JournalEntries'			                    , N'NCCI_JournalEntries_LedgerBalanceReport'				        , N'JournalEntryId,LiabilityId,TransactionType,Amount,TenantId,AccountId,AccountNumber,TransactionUtcDt,GLSegment,TenantAlias,CompanyId,CompanyCode,PayrollId,PayGroup,ProductCode,StateCode,AgencyCode'	, NULL                                                                                                                                                                          )
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (  N'PaymentReporting' , N'dbo'		, N'Liabilities'			                    , N'NCCI_Liabilities_CheckDateCover'	        			        , N'CollectionId,PayDate'	                                                                                                                                                                                , NULL                                                                                                                                                                          )
    INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (  N'PaymentReporting' , N'dbo'		, N'TaxAgencyTransactions'	                    , N'NCCI_TaxAgencyTransactions_PaymentsCount'				        , N'TaxAgencyId,PostPayrollGUID'																																											, NULL                                                                                                                                                                          )
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (  N'PaymentReporting' , N'dbo'		, N'TaxAmounts'				                    , N'NCCI_TaxAmounts_SumByPayroll'							        , N'TenantId,TaxPayrollGUID,UTETaxDataSourceTableSetKey,CurrentAmount'																																		, NULL                                                                                                                                                                          )
	INSERT INTO @IndexColumns ( DatabaseName        , SchemaName ,TableName          ,IndexName               , KeyColumnList_Desired                                                                                                       ,IncludedColumnList_Desired                                      )    VALUES     (  N'PaymentReporting' , N'dbo'		, N'TaxPayrolls'			                    , N'NCCI_TaxPayrolls_CheckDateCover'	        			        , N'LiabilityId,PayUtcDate'	                                                                                                                                                                                , NULL                                                                                                                                                                          )
    --	(	DatabaseName        , SchemaName	,TableName									    ,IndexName												            ,KeyColumnList				                                                                                                    ,IncludedColumnList	                                                                                                                                                                                                                                        )		

    INSERT INTO DOI.IndexColumns ( DatabaseName ,SchemaName ,TableName ,IndexName ,ColumnName ,IsKeyColumn , KeyColumnPosition, IsIncludedColumn , IncludedColumnPosition, IsFixedSize ,ColumnSize )
    SELECT  DatabaseName,
            SchemaName, 
            TableName, 
            IndexName, 
            ColumnName, 
            IsKeyColumn, 
            X.KeyColumnListPosition,
            IsIncludedColumn,
            X.IncludedColumnListPosition,
            IsFixedSize,
            ColumnSize
    FROM (  SELECT  AllIdx.DatabaseName, 
                    AllIdx.SchemaName, 
                    AllIdx.TableName, 
                    AllIdx.IndexName, 
                    ISNULL(KCL.ColumnName, ICL.ColumnName) AS ColumnName,
                    CASE 
                        WHEN KCL.ColumnName IS NOT NULL
                        THEN 1
                        ELSE 0
                    END AS IsKeyColumn, 
                    KCL.KeyColumnListPosition,
                    CASE 
                        WHEN ICL.ColumnName IS NOT NULL
                        THEN 1
                        ELSE 0
                    END AS IsIncludedColumn, 
                    ICL.IncludedColumnListPosition,
                    CASE
                        WHEN ty.name IN ('VARCHAR', 'NVARCHAR', 'TEXT', 'NTEXT', 'VARBINARY', 'FLOAT', 'DECIMAL', 'NUMERIC')
                        THEN 0 
                        ELSE 1
                    END AS IsFixedSize,
                    c.max_length AS ColumnSize
            --SELECT COUNT(*)
            FROM @IndexColumns AllIdx
                INNER JOIN DOI.SysDatabases d ON AllIdx.DatabaseName = D.name
                INNER JOIN DOI.SysSchemas s ON AllIdx.SchemaName = s.name
                INNER JOIN DOI.SysTables t ON AllIdx.TableName = t.name
                    AND s.schema_id = t.schema_id
                INNER JOIN DOI.SysColumns c ON t.object_id = c.object_id
                OUTER APPLY (   SELECT REPLACE(REPLACE(VALUE, ' ASC', ''), ' DESC', '') AS ColumnName, ROW_NUMBER() OVER(PARTITION BY DatabaseName, SchemaName, TableName, IndexName ORDER BY x.MyOrder ASC) AS KeyColumnListPosition
                                FROM (  SELECT value, charindex(value,AllIdx.KeyColumnList_Desired, 0) AS MyOrder 
                                        FROM STRING_SPLIT(AllIdx.KeyColumnList_Desired, ',')) x
                                WHERE REPLACE(REPLACE(VALUE, ' ASC', ''), ' DESC', '') = C.NAME) KCL 
                OUTER APPLY (   SELECT REPLACE(REPLACE(VALUE, ' ASC', ''), ' DESC', '') AS ColumnName, ROW_NUMBER() OVER(PARTITION BY DatabaseName, SchemaName, TableName, IndexName ORDER BY x.MyOrder ASC) AS IncludedColumnListPosition
                                FROM (  SELECT value, charindex(value,AllIdx.IncludedColumnList_Desired, 0) AS MyOrder 
                                        FROM STRING_SPLIT(AllIdx.IncludedColumnList_Desired, ',')) x
                                WHERE REPLACE(REPLACE(VALUE, ' ASC', ''), ' DESC', '') = C.NAME) ICL 
                INNER JOIN DOI.SysTypes ty ON c.user_type_id = ty.user_type_id
            WHERE ISNULL(KCL.ColumnName, ICL.ColumnName) IS NOT NULL) X
--END


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_InsertData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_InsertData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('740363b2-ef57-57b4-ac05-9e2c767610dc' AS UNIQUEIDENTIFIER), 'D9272FFBA34944075D7996CFC6D50A78E41F9306CC71F1744DB9A57606C9F403', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_InsertData.sql", ID: {740363b2-ef57-57b4-ac05-9e2c767610dc} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4306d9ca-6bec-5730-bf9b-41a288c2d603' AS UNIQUEIDENTIFIER) AND [script_checksum] = '482CE0B2FE850E1FE91193A2496CEBED84643DCD08AB7AC55114C31EFD69C5C9')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_7_IndexColumns.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_7_IndexColumns.sql", ID: {4306d9ca-6bec-5730-bf9b-41a288c2d603} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_7_IndexColumns.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_7_IndexColumns]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_7_IndexColumns];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_7_IndexColumns]

AS

	--EXEC DOI.spRefreshMetadata_User_IndexColumns_CreateTables
	EXEC DOI.spRefreshMetadata_User_IndexColumns_InsertData

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_7_IndexColumns.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_7_IndexColumns.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('4306d9ca-6bec-5730-bf9b-41a288c2d603' AS UNIQUEIDENTIFIER), '482CE0B2FE850E1FE91193A2496CEBED84643DCD08AB7AC55114C31EFD69C5C9', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_7_IndexColumns.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_7_IndexColumns.sql", ID: {4306d9ca-6bec-5730-bf9b-41a288c2d603} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2bd1bbca-3b6f-5dae-845e-a2234e9740c6' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'C23606BF73125DB29431EE80D0C4E5BFB0FDE446033B8647D8F9E2A68F88561D')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_UpdateData.sql", ID: {2bd1bbca-3b6f-5dae-845e-a2234e9740c6} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_UpdateData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_Statistics_UpdateData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Statistics_UpdateData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_Statistics_UpdateData]
AS

UPDATE St
SET StatisticsColumnList_Actual         = St2.column_list,
    SampleSizePct_Actual                = ISNULL(CAST((((SP.rows_sampled * 1.00)/rows) * 100) AS DECIMAL(5,2)),0),
    IsFiltered_Actual                   = ISNULL(St2.has_filter,0),
    FilterPredicate_Actual              = St2.filter_definition,
    IsIncremental_Actual                = ISNULL(St2.is_incremental,0),
    NoRecompute_Actual                  = ISNULL(St2.no_recompute,0),
    NumRowsInTableUnfiltered            = SP.unfiltered_rows,
    NumRowsInTableFiltered              = SP.rows,
    NumRowsSampled                      = SP.rows_sampled,
    StatisticsLastUpdated               = SP.last_updated,
    HistogramSteps                      = SP.steps,
    StatisticsModCounter                = SP.modification_counter,
    IsStatisticsMissingFromSQLServer    = CASE WHEN St2.name IS NULL THEN 1 ELSE 0 END
--select COUNT(*)
FROM DOI.[Statistics] St
    INNER JOIN DOI.SysDatabases d ON d.name = St.DatabaseName
    INNER JOIN DOI.SysSchemas Sc ON St.SchemaName = Sc.name
    INNER JOIN DOI.SysTables t ON t.name = St.TableName
        AND Sc.schema_id = t.schema_id
    LEFT JOIN DOI.SysStats St2 ON St2.database_id = d.database_id
        AND St2.object_id = t.object_id
        AND St2.name = St.StatisticsName
    LEFT JOIN DOI.SysDmDbStatsProperties SP ON St2.database_id = SP.database_id
        AND St2.object_id = SP.object_id
        AND St2.stats_id = SP.stats_id

UPDATE St
SET DoesSampleSizeNeedUpdate =  CASE 
                                    WHEN NumRowsInTableFiltered IS NULL
                                    THEN 0
                                    WHEN ((((NumRowsSampled * 1.00)/NumRowsInTableFiltered) * 100) < (St.SampleSizePct_Desired - 5))
			                            OR (LowerSampleSizeToDesired = 1 AND ((((NumRowsSampled * 1.00)/NumRowsInTableFiltered) * 100) > (SampleSizePct_Desired + 5)))
                                    /*We take away 5 from the percentage because SQL Server doesn't always give us the sample size we want.*/
                                    THEN 1
                                    ELSE 0
                                END,
    HasFilterChanged = CASE WHEN ISNULL(St.FilterPredicate_Desired, '') <> ISNULL(St.FilterPredicate_Actual, '') THEN 1 ELSE 0 END,
    HasIncrementalChanged = CASE WHEN St.IsIncremental_Desired <> St.IsIncremental_Actual THEN 1 ELSE 0 END,
    HasNoRecomputeChanged = CASE WHEN St.NoRecompute_Desired <> St.NoRecompute_Actual THEN 1 ELSE 0 END
FROM DOI.[Statistics] St


UPDATE St
SET StatisticsUpdateType = 
        CASE 
            WHEN IsStatisticsMissing = 1
            THEN 'Create Statistics'
            WHEN (IsStatisticsMissing = 0 AND HasFilterChanged = 1)
            THEN 'DropRecreate Statistics'
            WHEN (IsStatisticsMissing = 0
                    AND HasFilterChanged = 0
                    AND (DoesSampleSizeNeedUpdate = 1 
                            OR HasIncrementalChanged = 1
                            OR HasNoRecomputeChanged = 1))
            THEN 'Update Statistics'
            ELSE 'None'
        END,
	ListOfChanges = STUFF(CASE WHEN HasFilterChanged			= 1 THEN ', Filter'			ELSE '' END
				+ CASE WHEN HasIncrementalChanged	= 1 THEN ', Incremental'	ELSE '' END
				+ CASE WHEN HasNoRecomputeChanged	= 1 THEN ', NoRecompute'	ELSE '' END
				+ CASE WHEN DoesSampleSizeNeedUpdate	= 1 THEN ', SampleSize'		ELSE '' END, 1, 2, SPACE(0)),
    IsOnlineOperation = CASE 
                            WHEN (IsStatisticsMissing = 0 AND HasFilterChanged = 1)
                            THEN 0
                            ELSE 1
                        END
FROM DOI.[Statistics] St

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_UpdateData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('2bd1bbca-3b6f-5dae-845e-a2234e9740c6' AS UNIQUEIDENTIFIER), 'C23606BF73125DB29431EE80D0C4E5BFB0FDE446033B8647D8F9E2A68F88561D', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_UpdateData.sql", ID: {2bd1bbca-3b6f-5dae-845e-a2234e9740c6} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5994cf6f-b60c-56e7-acd3-f04f1b5f50c3' AS UNIQUEIDENTIFIER) AND [script_checksum] = '97E49A80C17B7C78D14FD75BFAF443D7319043AE8130512287DB6CA1D37837C9')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_InsertData.sql", ID: {5994cf6f-b60c-56e7-acd3-f04f1b5f50c3} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_InsertData.sql" 
GO
-- <Migration ID="5994cf6f-b60c-56e7-acd3-f04f1b5f50c3" TransactionHandling="Custom"/>
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_Statistics_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Statistics_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE     PROCEDURE [DOI].[spRefreshMetadata_User_Statistics_InsertData]

WITH NATIVE_COMPILATION, SCHEMABINDING
AS

/*
    EXEC DOI.[spRefreshMetadata_User_Statistics_InsertData]
*/

BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)
    DELETE DOI.[Statistics]

    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'AgencyLocalityTypeDim'                   , 'PK_AgencyLocalityTypeDim'                                     , 'AgencyLocalityTypeKey'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'AgencyLocalityTypeDim'                   , 'UQ_AgencyLocalityTypeDim'                                     , 'AgencyLocalityTypeDesc'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'Bai2BankTransactionTypeDim'              , 'PK_Bai2BankTransactionTypeDim'                                , 'Bai2BankTransactionTypeKey'                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'Bai2BankTransactionTypeDim'              , 'UQ_Bai2BankTransactionTypeDim'                                , 'Bai2BankTransactionTypeDesc'                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'BankAccountPurposeDim'                   , 'ST_BankAccountPurposeDim_ProductCodeKey'                      , 'ProductCodeKey'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'BankAccountPurposeDim'                   , 'PK_BankAccountPurposeDim'                                     , 'BankAccountPurposeKey'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'BankAccountStatusDim'                    , 'PK_BankAccountStatusDim'                                      , 'BankAccountStatusKey'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'BankAccountStatusDim'                    , 'UQ_BankAccountStatusDim'                                      , 'BankAccountStatusDesc'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'BankAccountTypeDim'                      , 'PK_BankAccountTypeDim'                                        , 'BankAccountTypeKey'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'BankAccountTypeDim'                      , 'UQ_BankAccountTypeDim'                                        , 'BankAccountTypeDesc'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'BankTransactionTypeDim'                  , 'ST_BankTransactionTypeDim_BankTransactionTypeDesc'            , 'BankTransactionTypeDesc'                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'BankTransactionTypeDim'                  , 'ST_BankTransactionTypeDim_DisplayAs'                          , 'DisplayAs'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'BankTransactionTypeDim'                  , 'PK_BankTransactionTypeDim'                                    , 'BankTransactionTypeKey'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'CheckAddModeDim'                         , 'PK_CheckAddModeDim'                                           , 'checkAddModeKey'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'CheckAddModeDim'                         , 'UQ_CheckAddModeDim'                                           , 'checkAddModeDesc'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'CheckStatusDim'                          , 'PK_CheckStatusDim'                                            , 'CheckStatusKey'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'CheckStatusDim'                          , 'UQ_CheckStatusDim'                                            , 'CheckStatusDesc'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'CompanyStatusDim'                        , 'PK_CompanyStatusDim'                                          , 'CompanyStatusKey'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'CompanyStatusDim'                        , 'UQ_CompanyStatusDim'                                          , 'CompanyStatusDesc'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'CompanyTypeDim'                          , 'PK_CompanyTypeDim'                                            , 'CompanyTypeKey'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'CompanyTypeDim'                          , 'UQ_CompanyTypeDim'                                            , 'CompanyTypeDesc'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'CreditEffectOnLiabilityDim'              , 'PK_CreditEffectOnLiabilityDim'                                , 'CreditEffectOnLiabilityKey'                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'CreditEffectOnLiabilityDim'              , 'UQ_CreditEffectOnLiabilityDim'                                , 'CreditEffectOnLiabilityDesc'                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'FileRequestProcessingStatusDim'          , 'PK_FileRequestProcessingStatusDim'                            , 'FileRequestProcessingStatusKey'                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentActionTypeDim'                , 'PK_GarnishmentActionDim'                                      , 'GarnishmentActionTypeKey'                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentActionTypeDim'                , 'UQ_GarnishmentActionDim'                                      , 'GarnishmentActionTypeDesc'                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentExceptionDim'                 , 'PK_GarnishmentExceptionDim'                                   , 'GarnishmentExceptionKey'                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentExceptionDim'                 , 'UQ_GarnishmentExceptionDim'                                   , 'GarnishmentExceptionDesc'                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentIsInArrearsDim'               , 'PK_GarnishmentIsInArrearsDim'                                 , 'IsInArrearsKey'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentIsInArrearsDim'               , 'UQ_GarnishmentIsInArrearsDim'                                 , 'IsInArrearsDesc'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentLiabilityStatusDim'           , 'PK_GarnishmentLiabilityStatusDim'                             , 'GarnishmentLiabilityStatusKey'                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentLiabilityStatusDim'           , 'UQ_GarnishmentLiabilityStatusDim'                             , 'GarnishmentLiabilityStatusDesc'                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentLiabilityTypeDim'             , 'PK_GarnishmentLiabilityTypeDim'                               , 'GarnishmentLiabilityTypeKey'                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentMedIndicatorDim'              , 'PK_GarnishmentMedIndicatorDim'                                , 'MedIndicatorKey'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentMedIndicatorDim'              , 'UQ_GarnishmentMedIndicatorDim'                                , 'MedIndicatorDesc'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentPayableStatusDim'             , 'PK_GarnishmentPayableStatusDim'                               , 'GarnishmentPayableStatusKey'                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentPayableStatusDim'             , 'UQ_GarnishmentPayableStatusDim'                               , 'GarnishmentPayableStatusDesc'                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentPaymentTypeDim'               , 'PK_GarnishmentPaymentTypeDim'                                 , 'GarnishmentPaymentTypeKey'                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentPaymentTypeDim'               , 'UQ_GarnishmentPaymentTypeDim'                                 , 'GarnishmentPaymentTypeDesc'                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentPayrollInstanceReconStatusDim', 'PK_GarnishmentPayrollInstanceReconStatusDim'                  , 'GarnishmentPayrollInstanceReconStatusKey'                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentPayrollInstanceReconStatusDim', 'UQ_GarnishmentPayrollInstanceReconStatusDim'                  , 'GarnishmentPayrollInstanceReconStatusDesc'                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentsSupportsOthersDim'           , 'PK_GarnishmentsSupportsOthersDim'                             , 'SupportsOthersKey'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentsSupportsOthersDim'           , 'UQ_GarnishmentsSupportsOthersCode'                            , 'SupportsOthersDesc'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentStatusDim'                    , 'PK_GarnishmentStatusDim'                                      , 'GarnishmentStatusKey'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentStatusDim'                    , 'UQ_GarnishmentsStatusDim'                                     , 'GarnishmentStatusDesc'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentTypeDim'                      , 'PK_GarnishmentTypeDim'                                        , 'GarnishmentTypeKey'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GarnishmentTypeDim'                      , 'UQ_GarnishmentTypeDim'                                        , 'GarnishmentTypeDesc'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GLAccountClassificationDim'              , 'PK_GLAccountClassificationDim'                                , 'GLAccountClassificationKey'                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GLAccountClassificationDim'              , 'UQ_GLAccountClassificationDim'                                , 'GLAccountClassificationDesc'                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GLAccountStatusDim'                      , 'PK_GLAccountStatusDim'                                        , 'GLAccountStatusKey'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GLAccountStatusDim'                      , 'UQ_GLAccountStatusDim'                                        , 'GLAccountStatusDesc'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GLAccountTypeDim'                        , 'PK_GLAccountTypeDim'                                          , 'GLAccountTypeKey'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'GLAccountTypeDim'                        , 'UQ_GLAccountTypeDim'                                          , 'GLAccountTypeDesc'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'InboundFileTypeDim'                      , 'PK_InboundFileTypeDim'                                        , 'InboundFileTypeKey'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'InboundFileTypeDim'                      , 'UQ_InboundFileTypeDim'                                        , 'InboundFileTypeDesc'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'JournalEntryTransactionTypeDim'          , 'PK_JournalEntryTransactionTypeDim'                            , 'JournalEntryTransactionTypeDimKey'                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'JournalEntryTransactionTypeDim'          , 'UQ_JournalEntryTransactionTypeDim'                            , 'JournalEntryTransactionTypeDimDescription'                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'LiabilityCollectionPaymentMethoDOIm'     , 'PK_LiabilityCollectionPaymentMethoDOIm'                       , 'LiabilityCollectionPaymentMethodKey'                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'LiabilityCollectionPaymentMethoDOIm'     , 'UQ_LiabilityCollectionPaymentMethoDOIm'                       , 'LiabilityCollectionPaymentMethodDesc'                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'LiabilityCollectionStatusDim'            , 'PK_LiabilityCollectionStatusDim'                              , 'LiabilityCollectionStatusKey'                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'LiabilityCollectionStatusDim'            , 'UQ_LiabilityCollectionStatusDim'                              , 'LiabilityCollectionStatusDesc'                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'LiabilityCollectionTypeDim'              , 'ST_LiabilityCollectionTypeDim_LiabilityCollectionTypeDesc'    , 'LiabilityCollectionTypeDesc'                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'LiabilityCollectionTypeDim'              , 'PK_LiabilityCollectionTypeDim'                                , 'LiabilityCollectionTypeKey'                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'LiabilityStatusDim'                      , 'PK_LiabilityStatusDim'                                        , 'LiabilityStatusKey'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'LiabilityStatusDim'                      , 'UQ_LiabilityStatusDim'                                        , 'LiabilityStatusDesc'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'LiabilityTypeDim'                        , 'ST_LiabilityTypeDim_LiabilityTypeDesc'                        , 'LiabilityTypeDesc'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'LiabilityTypeDim'                        , 'ST_LiabilityTypeDim_LiabilityTypeGroup'                       , 'LiabilityTypeGroup'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'LiabilityTypeDim'                        , 'PK_LiabilityTypeDim'                                          , 'LiabilityTypeKey'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'NettedCollectionStatusDim'               , 'PK_NettedCollectionStatusDim'                                 , 'NettedCollectionStatusKey'                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'PayExceptionTypeDim'                     , 'PK_PayExceptionTypeDim'                                       , 'PayExceptionTypeKey'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'PayExceptionTypeDim'                     , 'UQ_PayExceptionTypeDim'                                       , 'PayExceptionTypeDesc'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'PayPortionStateDim'                      , 'PK_PayPortionStateDim'                                        , 'PayPortionStateKey'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'PayPortionStateDim'                      , 'UQ_PayPortionStateDim'                                        , 'PayPortionStateDesc'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'PayProcessingStatusDim'                  , 'PK_PayProcessingStatusDim'                                    , 'PayProcessingStatusKey'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'PayProcessingStatusDim'                  , 'UQ_PayProcessingStatusDim'                                    , 'PayProcessingStatusDesc'                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'PayrollPaymentStatusDim'                 , 'ST_PayrollPaymentStatusDim_PayrollPaymentStatusDesc'          , 'PayrollPaymentStatusDesc'                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'PayrollPaymentStatusDim'                 , 'PK_PayrollPaymentStatusDim'                                   , 'PayrollPaymentStatusKey'                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'PayrollPaymentTypeDim'                   , 'ST_PayrollPaymentTypeDim_PayrollPaymentTypeDesc'              , 'PayrollPaymentTypeDesc'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'PayrollPaymentTypeDim'                   , 'PK_PayrollPaymentTypeDim'                                     , 'PayrollPaymentTypeKey'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'PayrollTypeDim'                          , 'PK_PayrollTypeDim'                                            , 'PayrollTypeKey'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'PayrollTypeDim'                          , 'UQ_PayrollTypeDim'                                            , 'PayrollTypeDesc'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'ProductActivationStatus'                 , 'PK_TenantProductActivationStatus'                             , 'ProductActivationStatusKey'                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'ProductActivationStatus'                 , 'UQ_TenantProductActivationStatus'                             , 'ProductActivationStatusDesc'                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'ProductCodeDim'                          , 'PK_ProductCodeDim'                                            , 'ProductCodeKey'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'ProductCodeDim'                          , 'UQ_ProductCodeDim'                                            , 'ProductCodeDesc'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'ProductStatus'                           , 'PK_TenantProductStatus'                                       , 'ProductStatusKey'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'ProductStatus'                           , 'UQ_TenantProductStatus'                                       , 'ProductStatusDesc'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'RefundPortionDim'                        , 'PK_RefundPortionDim'                                          , 'RefundPortionKey'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'RefundPortionDim'                        , 'UQ_RefundPortionDim'                                          , 'RefundPortionDesc'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'ReportRequestorTypeDim'                  , 'ST_ReportRequestorTypeDim_ReportRequestorType'                , 'ReportRequestorType'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'ReportRequestorTypeDim'                  , 'PK_ReportSourceSystemDim'                                     , 'ReportSourceSystemName'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxAgencyTransactionStatusDim'           , 'PK_TaxAgencyTransactionStatusDim'                             , 'TaxAgencyTransactionStatusKey'                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxAgencyTransactionStatusDim'           , 'UQ_TaxAgencyTransactionStatusDim'                             , 'TaxAgencyTransactionStatusDesc'                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxCodeActiveStatus'                     , 'PK_TaxCodeActiveStatus'                                       , 'TaxCodeActiveStatusKey'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxCodeActiveStatus'                     , 'UQ_TaxCodeActiveStatus'                                       , 'TaxCodeActiveStatusDesc'                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxCodeProcessingFrequencyDim'           , 'PK_TaxCodeProcessingFrequencyDim'                             , 'TaxCodeProcessingFrequencyKey'                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxCodeProcessingFrequencyDim'           , 'UQ_TaxCodeProcessingFrequencyDim'                             , 'TaxCodeProcessingFrequencyDesc'                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxLiabilityOriginTypeDim'               , 'PK_TaxLiabilityOriginTypeDim'                                 , 'TaxLiabilityOriginTypeKey'                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxLiabilityOriginTypeDim'               , 'UQ_TaxLiabilityOriginTypeDim'                                 , 'TaxLiabilityOriginTypeDesc'                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxPaymentCreditStatusDim'               , 'PK_TaxPaymentCreditStatusDim'                                 , 'TaxPaymentCreditStatusKey'                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxPaymentCreditStatusDim'               , 'UQ_TaxPaymentCreditStatusDim'                                 , 'TaxPaymentCreditStatusDesc'                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxPaymentStatusDim'                     , 'PK_TaxPaymentStatusDim'                                       , 'TaxPaymentStatusKey'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxPaymentStatusDim'                     , 'UQ_TaxPaymentStatusDim'                                       , 'TaxPaymentStatusDesc'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxPaymentTypeDim'                       , 'PK_TaxPaymentTypeDim'                                         , 'TaxPaymentTypeKey'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TaxPaymentTypeDim'                       , 'UQ_TaxPaymentTypeDim'                                         , 'TaxPaymentTypeDesc'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TenantStatusDim'                         , 'PK_TenantStatusDim'                                           , 'TenantStatusCode'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'TenantStatusDim'                         , 'UQ_TenantStatusDim'                                           , 'TenantStatusDesc'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'UTETaxDataSourceTableSetDim'             , 'PkUTETaxDataSourceTableSetDim'                                , 'UTETaxDataSourceTableSetKey'                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'YEFileStatusDim'                         , 'PK_YEFileStatusDim'                                           , 'YEFileStatusKey'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'YEFileStatusDim'                         , 'UQ_YEFileStatusDim'                                           , 'YEFileStatusDesc'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'YEIngestionTypeDim'                      , 'PK_YEIngestionTypeDim'                                        , 'YEIngestionTypeKey'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'YEIngestionTypeDim'                      , 'UQ_YEIngestionTypeDim'                                        , 'YEIngestionTypeDesc'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'YEProcessingStatusDim'                   , 'PK_YEProcessingStatusDim'                                     , 'YEProcessingStatusKey'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'DataMart', 'YEProcessingStatusDim'                   , 'UQ_YEProcessingStatusDim'                                     , 'YEProcessingStatusDesc'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'ST_Bai2BankTransactions_UsgBankAccountId'                     , 'UsgBankAccountId'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'ST_Bai2BankTransactions_IsMatched'                            , 'IsMatched'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'ST_Bai2BankTransactions_TransactionType'                      , 'TransactionType'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'ST_Bai2BankTransactions_Amount'                               , 'Amount'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'ST_Bai2BankTransactions_TransactionReference'                 , 'TransactionReference'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'ST_Bai2BankTransactions_TransactionDescription'               , 'TransactionDescription'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'ST_Bai2BankTransactions_Aesn'                                 , 'Aesn'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'ST_Bai2BankTransactions_Aedt'                                 , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'ST_Bai2BankTransactions_Version'                              , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'ST_Bai2BankTransactions_CreatedUtcDt'                         , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'ST_Bai2BankTransactions_UpdatedUtcDt'                         , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'CDX_Bai2BankTransactions'                                     , 'TransactionSysUtcDt'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Bai2BankTransactions'                    , 'PK_Bai2BankTransactions'                                      , 'BankTransactionId'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankAccountDays'                         , 'PK_BankAccountDays'                                           , 'BankAccountDayId'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_TenantId'                                 , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_CollectionId'                             , 'CollectionId'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_PayId'                                    , 'PayId'                                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_PaymentId'                                , 'PaymentId'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_Amount'                                   , 'Amount'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_Type'                                     , 'Type'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_Description'                              , 'Description'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_CustomerBankAccountId'                    , 'CustomerBankAccountId'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_CbaRoutingNumber4'                        , 'CbaRoutingNumber4'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_CbaAccountNumber4'                        , 'CbaAccountNumber4'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_UsgBankAccountId'                         , 'UsgBankAccountId'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_UbaRoutingNumber4'                        , 'UbaRoutingNumber4'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_UbaAccountNumber4'                        , 'UbaAccountNumber4'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_TransactionUtcDateTime'                   , 'TransactionUtcDateTime'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_CheckNumber'                              , 'CheckNumber'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_IsDebit'                                  , 'IsDebit'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_PaymentMethod'                            , 'PaymentMethod'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_IsMatched'                                , 'IsMatched'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_MatchedUtcDateTime'                       , 'MatchedUtcDateTime'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_Bai2BankTransactionMatchId'               , 'Bai2BankTransactionMatchId'                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_BankAccountDayMatchId'                    , 'BankAccountDayMatchId'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                      , IsIncremental      , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_IsReconcilable'                           , 'IsReconcilable'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_IsCanceled'                               , 'IsCanceled'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_Aesn'                                     , 'Aesn'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_Aedt'                                     , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_Version'                                  , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_CreatedUtcDt'                             , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_UpdatedUtcDt'                             , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_CurrencyCode'                             , 'CurrencyCode'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_FileRequestId'                            , 'FileRequestId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_ReferenceNumber'                          , 'ReferenceNumber'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_ConfirmationNumber'                       , 'ConfirmationNumber'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_ItemNo'                                   , 'ItemNo'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'ST_BankTransactions_GarnishmentId'                            , 'GarnishmentId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'CDX_BankTransactions'                                         , 'TransactionUtcDateTime'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'IDX_BankTransactions_BankAcctCover'                           , 'CollectionId,UpdatedUtcDt'                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'IDX_BankTransactions_GarnishmentPDCover'                      , 'TenantId,GarnishmentId'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'BankTransactions'                        , 'PK_BankTransactions'                                          , 'Id,TenantId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_LegalEntityCompanyId'                            , 'LegalEntityCompanyId'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_COID'                                            , 'COID'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_FEIN'                                            , 'FEIN'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_Status'                                          , 'Status'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_LegalName'                                       , 'LegalName'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_DbaName'                                         , 'DbaName'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_Type'                                            , 'Type'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_IsLegalEntity'                                   , 'IsLegalEntity'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_Aesn'                                            , 'Aesn'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_Aedt'                                            , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_Version'                                         , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_CreatedUtcDt'                                    , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_UpdatedUtcDt'                                    , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_CompanyCode'                                     , 'CompanyCode'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'ST_Companies_UTEClientId'                                     , 'UTEClientId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'IX_Companies'                                                 , 'TenantId,COID'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'PK_Companies'                                                 , 'CompanyId,TenantId'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'UQ_Companies'                                                 , 'CompanyId'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Companies'                               , 'UQ_Companies_UTEClientId'                                     , 'UTEClientId'                                                                                                                                                                                         , 20                       , 1                 , '([UTEClientId] IS NOT NULL)'                                     , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CompanyProduct'                          , 'ST_CompanyProduct_ProductCodeKey'                             , 'ProductCodeKey'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CompanyProduct'                          , 'ST_CompanyProduct_EffectiveUtcDateFrom'                       , 'EffectiveUtcDateFrom'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CompanyProduct'                          , 'ST_CompanyProduct_Status'                                     , 'Status'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CompanyProduct'                          , 'ST_CompanyProduct_ActivationStatus'                           , 'ActivationStatus'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CompanyProduct'                          , 'PK_CompanyProduct'                                            , 'CompanyId,ProductCodeKey,EffectiveUtcDateFrom'                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_BankAccountId'                        , 'BankAccountId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_BankName'                             , 'BankName'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_AccountName'                          , 'AccountName'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_RoutingNumber'                        , 'RoutingNumber'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_MaskedAccountNumber4'                 , 'MaskedAccountNumber4'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_Aesn'                                 , 'Aesn'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_Aedt'                                 , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_Version'                              , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_CreatedUtcDt'                         , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_UpdatedUtcDt'                         , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_AccountDescription'                   , 'AccountDescription'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_BankAccountType'                      , 'BankAccountType'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_Status'                               , 'Status'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'ST_CustomerBankAccounts_AccountActiveDateTime'                , 'AccountActiveDateTime'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'CustomerBankAccounts'                    , 'PK_CustomerBankAccounts'                                      , 'BankAccountId,TenantId'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'DBDefragLog'                             , 'PK_DBDefragLog'                                               , 'SchemaName,TableName,IndexName,RunDateTime'                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'EFilingAcknowledgmentAlerts'             , 'ST_EFilingAcknowledgmentAlerts_SubmissionId'                  , 'SubmissionId'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'EFilingAcknowledgmentAlerts'             , 'ST_EFilingAcknowledgmentAlerts_Path'                          , 'Path'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'EFilingAcknowledgmentAlerts'             , 'PK_EFilingAcknowledgmentAlerts'                               , 'EFilingAcknowledgmentAlertId'                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'EFilingAcknowledgments'                  , 'ST_EFilingAcknowledgments_PayeeId'                            , 'PayeeId'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'EFilingAcknowledgments'                  , 'ST_EFilingAcknowledgments_Year'                               , 'Year'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'EFilingAcknowledgments'                  , 'ST_EFilingAcknowledgments_SubmissionType'                     , 'SubmissionType'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'EFilingAcknowledgments'                  , 'ST_EFilingAcknowledgments_ErrorCount'                         , 'ErrorCount'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'EFilingAcknowledgments'                  , 'PK_EFilingAcknowledgments'                                    , 'SubmissionId'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'EFilingAcknowledgments'                  , 'UQ_EFilingAcknowledgments'                                    , 'EFilingAcknowledgmentId'                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'FileRequestPayments'                     , 'ST_FileRequestPayments_PaymentFileRequestId'                  , 'PaymentFileRequestId'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'FileRequestPayments'                     , 'PK_FileRequestPayments'                                       , 'PaymentId,PaymentFileRequestId'                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'FileRequests'                            , 'ST_FileRequests_UsgBankAccountId'                             , 'UsgBankAccountId'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'FileRequests'                            , 'ST_FileRequests_SentUtcDateTime'                              , 'SentUtcDateTime'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'FileRequests'                            , 'PK_FileRequests'                                              , 'FileRequestId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentLiabilities'                  , 'ST_GarnishmentLiabilities_TenantId'                           , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentLiabilities'                  , 'ST_GarnishmentLiabilities_LiabilityId'                        , 'LiabilityId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentLiabilities'                  , 'ST_GarnishmentLiabilities_Aedt'                               , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentLiabilities'                  , 'ST_GarnishmentLiabilities_GarnishmentLiabilityTypeKey'        , 'GarnishmentLiabilityTypeKey'                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentLiabilities'                  , 'ST_GarnishmentLiabilities_PayrollInstanceId'                  , 'PayrollInstanceId'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentLiabilities'                  , 'IDX_GarnishmentLiabilities_PayrollInstanceId'                 , 'PayrollInstanceId'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentLiabilities'                  , 'IDX_GarnishmentLiabilities_TenantId'                          , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentLiabilities'                  , 'PK_GarnishmentLiabilities'                                    , 'TenantId,GarnishmentLiabilityId'                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentPayrollInstances'             , 'ST_GarnishmentPayrollInstances_TenantId'                      , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentPayrollInstances'             , 'ST_GarnishmentPayrollInstances_PayGroup'                      , 'PayGroup'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentPayrollInstances'             , 'ST_GarnishmentPayrollInstances_RunNumber'                     , 'RunNumber'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentPayrollInstances'             , 'ST_GarnishmentPayrollInstances_PayrollClosedUtcDt'            , 'PayrollClosedUtcDt'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentPayrollInstances'             , 'ST_GarnishmentPayrollInstances_Aedt'                          , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GarnishmentPayrollInstances'             , 'PK_GarnishmentPayrollInstances'                               , 'GarnishmentPayrollInstanceId,TenantId'                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GeneralLedgerAccounts'                   , 'ST_GeneralLedgerAccounts_UsgBankAccountId'                    , 'UsgBankAccountId'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GeneralLedgerAccounts'                   , 'ST_GeneralLedgerAccounts_GlSegmentName'                       , 'GlSegmentName'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GeneralLedgerAccounts'                   , 'ST_GeneralLedgerAccounts_Type'                                , 'Type'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GeneralLedgerAccounts'                   , 'ST_GeneralLedgerAccounts_Aedt'                                , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GeneralLedgerAccounts'                   , 'IDX_GeneralLedgerAccounts_GLSegment'                          , 'GlSegment'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'GeneralLedgerAccounts'                   , 'PK_GeneralLedgerAccounts'                                     , 'AccountId'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_LiabilityId'                                , 'LiabilityId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_TransactionType'                            , 'TransactionType'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_Amount'                                     , 'Amount'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_Remark'                                     , 'Remark'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_PostRef'                                    , 'PostRef'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_AccountNumber'                              , 'AccountNumber'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_AccountId'                                  , 'AccountId'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_TenantId'                                   , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_CompanyId'                                  , 'CompanyId'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_Aesn'                                       , 'Aesn'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_Aedt'                                       , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_CreatedUtcDt'                               , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_UpdatedUtcDt'                               , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_TenantAlias'                                , 'TenantAlias'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_ProductCode'                                , 'ProductCode'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_DocumentNumber'                             , 'DocumentNumber'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_GLSegment'                                  , 'GLSegment'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_CreatedBy'                                  , 'CreatedBy'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'ST_JournalEntries_CreatedDate'                                , 'CreatedDate'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'CDX_JournalEntries'                                           , 'TransactionUtcDt'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'IDX_JournalEntries_AgencyCode'                                , 'AgencyCode,TenantId,TransactionUtcDt'                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    --INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'NCCI_JournalEntries_LedgerBalanceReport'                      , 'JournalEntryId,LiabilityId,TransactionType,Amount,TenantId,AccountId,AccountNumber,TransactionUtcDt,GLSegment,TenantAlias,CompanyId,CompanyCode,PayrollId,PayGroup,ProductCode,StateCode,AgencyCode' , 20, 0, NULL                                                           , 1,  0, )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'JournalEntries'                          , 'PK_JournalEntries'                                            , 'JournalEntryId,TransactionUtcDt'                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_TenantId'                                      , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_LegalEntityCompanyId'                          , 'LegalEntityCompanyId'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_CollectionId'                                  , 'CollectionId'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_PayrollId'                                     , 'PayrollId'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_PayDate'                                       , 'PayDate'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_PaymentDeliveryUtcDate'                        , 'PaymentDeliveryUtcDate'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_TotalAmount'                                   , 'TotalAmount'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_Status'                                        , 'Status'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_Type'                                          , 'Type'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_Name'                                          , 'Name'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_ProductCode'                                   , 'ProductCode'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_Version'                                       , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_CreatedUtcDt'                                  , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_RunNumber'                                     , 'RunNumber'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'CDX_Liabilities'                                              , 'PayDate'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'IDX_Liabilities_CollectionProductListCover'                   , 'CollectionId,ProductCode,PayDate'                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'IDX_Liabilities_CompanyAggregateCover'                        , 'CollectionId,TenantId,LegalEntityCompanyId,PayDate'                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'IDX_Liabilities_PayrollAggregateCover'                        , 'CollectionId,TenantId,PayrollId,PayDate'                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'IDX_Liabilities_WACDCover'                                    , 'TenantId,CollectionId,PayrollId'                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'PK_Liabilities'                                               , 'LiabilityId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Liabilities'                             , 'ST_Liabilities_LiabilityId'                                   , 'LiabilityId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollectionComments'             , 'ST_LiabilityCollectionComments_LiabilityCollectionId'         , 'LiabilityCollectionId'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollectionComments'             , 'PK_LiabilityCollectionComments'                               , 'CommentId,LiabilityCollectionId'                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollectionConfirmationInfos'    , 'ST_LiabilityCollectionConfirmationInfos_LiabilityCollectionId', 'LiabilityCollectionId'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollectionConfirmationInfos'    , 'PK_LiabilityCollectionConfirmationInfos'                      , 'ConfirmationInfoId'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_TenantId'                             , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_PaymentMethod'                        , 'PaymentMethod'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_DueDate'                              , 'DueDate'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_ProcessUtcDate'                       , 'ProcessUtcDate'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_TotalAmount'                          , 'TotalAmount'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_CollectedUtcDateTime'                 , 'CollectedUtcDateTime'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_CollectedAmount'                      , 'CollectedAmount'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_ConfirmationNumber'                   , 'ConfirmationNumber'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_AcknowledgementNumber'                , 'AcknowledgementNumber'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_Status'                               , 'Status'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_Type'                                 , 'Type'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_UsgBankAccountId'                     , 'UsgBankAccountId'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_CustomerBankAccountId'                , 'CustomerBankAccountId'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_Name'                                 , 'Name'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_Aesn'                                 , 'Aesn'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_Aedt'                                 , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_Version'                              , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_CreatedUtcDt'                         , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_UpdatedUtcDt'                         , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_PayUtcDt'                             , 'PayUtcDt'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_User'                                 , 'User'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_UserId'                               , 'UserId'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_TimeStamp'                            , 'TimeStamp'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_NettedCollectionId'                   , 'NettedCollectionId'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'CDX_LiabilityCollections'                                     , 'PayUtcDt'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'IDX_LiabilityCollections_CDCover'                             , 'CollectionId'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'IDX_LiabilityCollections_NetCollections'                      , 'NettedCollectionId'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'IDX_LiabilityCollections_NetCollectionsLatestConfNumberCover' , 'NettedCollectionId,ProcessUtcDate'                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'IDX_LiabilityCollections_WACD_ExternalCover'                  , 'TenantId,PayUtcDt'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'IDX_LiabilityCollections_CheckDateCover'                      , 'CollectedUtcDateTime'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'IDX_LiabilityCollections_CheckDateCover2'                     , 'TotalAmount,CollectedUtcDateTime,Type,PayUtcDt'                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'PK_LiabilityCollections'                                      , 'CollectionId,TenantId'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityCollections'                    , 'ST_LiabilityCollections_CollectionId'                         , 'CollectionId'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityPayments'                       , 'ST_LiabilityPayments_PaymentId'                               , 'PaymentId'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityPayments'                       , 'ST_LiabilityPayments_PaymentLiabilityId'                      , 'PaymentLiabilityId'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'LiabilityPayments'                       , 'PK_LiabilityPayments'                                         , 'LiabilityId,PaymentId,PaymentLiabilityId'                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'NettedCollections'                       , 'PK_NettedCollections'                                         , 'NettedCollectionId'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'NettedCollectionsLiabilityCollections'   , 'PK_NettedCollectionsLiabilityCollections'                     , 'NettedCollectionId,CollectionId'                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayActions'                              , 'ST_PayActions_PayId'                                          , 'PayId'                                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayActions'                              , 'ST_PayActions_LiabilityId'                                    , 'LiabilityId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayActions'                              , 'ST_PayActions_FromState'                                      , 'FromState'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayActions'                              , 'ST_PayActions_ToState'                                        , 'ToState'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayActions'                              , 'CDX_PayActions'                                               , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayActions'                              , 'PK_PayActions'                                                , 'ActionId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Deductions'               , 'ST_PayGarnishment_Deductions_GarnishmentId'                   , 'GarnishmentId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Deductions'               , 'ST_PayGarnishment_Deductions_PayUtcDate'                      , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Deductions'               , 'ST_PayGarnishment_Deductions_caseNumber'                      , 'caseNumber'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Deductions'               , 'ST_PayGarnishment_Deductions_Jurisdiction'                    , 'Jurisdiction'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Deductions'               , 'ST_PayGarnishment_Deductions_CreatedUtcDt'                    , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Deductions'               , 'PK_PayGarnishment_Deductions'                                 , 'GarnishmentId,PayUtcDate'                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Deductions'               , 'ST_PayGarnishments_Deductions_GarnishmentId'                  , 'GarnishmentId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Deductions'               , 'ST_PayGarnishments_Deductions_PayUtcDate'                     , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Employees'                , 'ST_PayGarnishment_Employees_GarnishmentId'                    , 'GarnishmentId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Employees'                , 'ST_PayGarnishment_Employees_EmployeeNumber'                   , 'EmployeeNumber'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Employees'                , 'ST_PayGarnishment_Employees_PayUtcDate'                       , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Employees'                , 'ST_PayGarnishment_Employees_FirstName'                        , 'FirstName'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Employees'                , 'ST_PayGarnishment_Employees_LastName'                         , 'LastName'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Employees'                , 'ST_PayGarnishment_Employees_StateCode'                        , 'StateCode'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Employees'                , 'ST_PayGarnishment_Employees_CreatedUtcDt'                     , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Employees'                , 'PK_PayGarnishment_Employees'                                  , 'GarnishmentId,PayUtcDate'                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Employees'                , 'ST_PayGarnishments_Employees_GarnishmentId'                   , 'GarnishmentId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Employees'                , 'ST_PayGarnishments_Employees_PayUtcDate'                      , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_GarnishmentId'                       , 'GarnishmentId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_PayeeCode'                           , 'PayeeCode'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_PayUtcDate'                          , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_GarnishmentPayeeId'                  , 'GarnishmentPayeeId'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_PayeeName'                           , 'PayeeName'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_AddressLine1'                        , 'AddressLine1'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_AddressLine2'                        , 'AddressLine2'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_City'                                , 'City'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_StateCode'                           , 'StateCode'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_ZipCode'                             , 'ZipCode'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_Version'                             , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_CreatedUtcDt'                        , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_UpdatedUtcDt'                        , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_BankAccountName'                     , 'BankAccountName'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_BankAccountRoutingNumber'            , 'BankAccountRoutingNumber'                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishment_Payees_BankAccountNumber'                   , 'BankAccountNumber'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'PK_PayGarnishment_Payees'                                     , 'GarnishmentId,PayUtcDate'                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishments_Payees_GarnishmentId'                      , 'GarnishmentId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishment_Payees'                   , 'ST_PayGarnishments_Payees_PayUtcDate'                         , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentActions'                   , 'ST_PayGarnishmentActions_ActionId'                            , 'ActionId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentActions'                   , 'ST_PayGarnishmentActions_BankClearedDate'                     , 'BankClearedDate'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentActions'                   , 'ST_PayGarnishmentActions_ActionTypeKey'                       , 'ActionTypeKey'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentActions'                   , 'ST_PayGarnishmentActions_Version'                             , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentActions'                   , 'PK_PayGarnishmentActions'                                     , 'GarnishmentId,PayUtcDate,ActionId'                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentActions'                   , 'UQ_PayGarnishmentActions'                                     , 'GarnishmentId,ActionId,ActionUtcDateTime'                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentExceptions'                , 'ST_PayGarnishmentExceptions_GarnishmentId'                    , 'GarnishmentId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentExceptions'                , 'ST_PayGarnishmentExceptions_PayUtcDate'                       , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentExceptions'                , 'PK_PayGarnishmentExceptions'                                  , 'GarnishmentId,GarnishmentExceptionKey,PayUtcDate,DateCleared'                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentLiabilities'               , 'ST_PayGarnishmentLiabilities_GarnishmentId'                   , 'GarnishmentId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentLiabilities'               , 'ST_PayGarnishmentLiabilities_TenantId'                        , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentLiabilities'               , 'ST_PayGarnishmentLiabilities_GarnishmentLiabilityId'          , 'GarnishmentLiabilityId'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentLiabilities'               , 'ST_PayGarnishmentLiabilities_Version'                         , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentLiabilities'               , 'ST_PayGarnishmentLiabilities_Refunded'                        , 'Refunded'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentLiabilities'               , 'ST_PayGarnishmentLiabilities_Removed'                         , 'Removed'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentLiabilities'               , 'IDX_PayGarnishmentLiabilities_WACDCover'                      , 'GarnishmentLiabilityId,PayUtcDate'                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishmentLiabilities'               , 'PK_PayGarnishmentLiabilities'                                 , 'GarnishmentId,PayUtcDate,TenantId,GarnishmentLiabilityId'                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_PayId'                                     , 'PayId'                                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_GarnishmentId'                             , 'GarnishmentId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_PayrollId'                                 , 'PayrollId'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_PayrollInstanceId'                         , 'PayrollInstanceId'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_LegalEntityCompanyId'                      , 'LegalEntityCompanyId'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_CompanyId'                                 , 'CompanyId'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_GarnishmentStatusKey'                      , 'GarnishmentStatusKey'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_GarnishmentPaymentTypeKey'                 , 'GarnishmentPaymentTypeKey'                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_DueUtcDate'                                , 'DueUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_GarnishmentAmount'                         , 'GarnishmentAmount'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_Aedt'                                      , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_Version'                                   , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_CreatedUtcDt'                              , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_UpdatedUtcDt'                              , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_CheckNumber'                               , 'CheckNumber'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_GarnishmentLiabilityId'                    , 'GarnishmentLiabilityId'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_GarnishmentPaymentLiabilityId'             , 'GarnishmentPaymentLiabilityId'                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_GarnishmentRefundLiabilityId'              , 'GarnishmentRefundLiabilityId'                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'ST_PayGarnishments_GarnishmentCheckReplacementReasonKey'      , 'GarnishmentCheckReplacementReasonKey'                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'IDX_PayGarnishments_CollDetailsCover'                         , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'IDX_PayGarnishments_CollDetailsCover2'                        , 'GarnishmentTypeKey,PayUtcDate'                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'IDX_Paygarnishments_IngestionCover'                           , 'GarnishmentId,PayUtcDate'                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'IDX_PayGarnishments_PayrollInstanceId'                        , 'PayrollInstanceId,PayUtcDate'                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'IDX_PayGarnishments_WACD_ExternalCover'                       , 'TenantId,PayUtcDate'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayGarnishments'                         , 'PK_PayGarnishments'                                           , 'GarnishmentId,PayUtcDate'                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayLiabilities'                          , 'ST_PayLiabilities_PayId'                                      , 'PayId'                                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayLiabilities'                          , 'ST_PayLiabilities_LiabilityId'                                , 'LiabilityId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayLiabilities'                          , 'ST_PayLiabilities_ActionId'                                   , 'ActionId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayLiabilities'                          , 'ST_PayLiabilities_IsActive'                                   , 'IsActive'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayLiabilities'                          , 'ST_PayLiabilities_Version'                                    , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayLiabilities'                          , 'ST_PayLiabilities_UpdatedUtcDt'                               , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayLiabilities'                          , 'CDX_PayLiabilities'                                           , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayLiabilities'                          , 'IDX_PayLiabilities_LiabilityId'                               , 'LiabilityId,IsActive,PayUtcDate'                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayLiabilities'                          , 'PK_PayLiabilities'                                            , 'PayUtcDate,PayId,LiabilityId,ActionId'                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollInstances'                        , 'ST_PayrollInstances_TenantId'                                 , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollInstances'                        , 'ST_PayrollInstances_PayGroup'                                 , 'PayGroup'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollInstances'                        , 'ST_PayrollInstances_RunNumber'                                , 'RunNumber'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollInstances'                        , 'ST_PayrollInstances_Name'                                     , 'Name'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollInstances'                        , 'ST_PayrollInstances_PayrollClosedUtcDt'                       , 'PayrollClosedUtcDt'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollInstances'                        , 'ST_PayrollInstances_Aedt'                                     , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollInstances'                        , 'ST_PayrollInstances_Version'                                  , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollInstances'                        , 'ST_PayrollInstances_CreatedUtcDt'                             , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollInstances'                        , 'ST_PayrollInstances_PayrollTypeKey'                           , 'PayrollTypeKey'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollInstances'                        , 'PK_PayrollInstances'                                          , 'PayrollInstanceId,TenantId'                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollPayments'                         , 'ST_PayrollPayments_Status'                                    , 'Status'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollPayments'                         , 'ST_PayrollPayments_PaymentType'                               , 'PaymentType'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollPayments'                         , 'ST_PayrollPayments_ProcessUtcDt'                              , 'ProcessUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollPayments'                         , 'ST_PayrollPayments_DueUtcDt'                                  , 'DueUtcDt'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollPayments'                         , 'ST_PayrollPayments_UsgBankAccountId'                          , 'UsgBankAccountId'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollPayments'                         , 'ST_PayrollPayments_Aesn'                                      , 'Aesn'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollPayments'                         , 'ST_PayrollPayments_Aedt'                                      , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollPayments'                         , 'PK_PayrollPayments'                                           , 'PayrollPaymentId'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'ST_PayrollUnits_LegalEntityCompanyId'                         , 'LegalEntityCompanyId'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'ST_PayrollUnits_Name'                                         , 'Name'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'ST_PayrollUnits_PayrollCode'                                  , 'PayrollCode'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'ST_PayrollUnits_Aesn'                                         , 'Aesn'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'ST_PayrollUnits_Aedt'                                         , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'ST_PayrollUnits_Version'                                      , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'ST_PayrollUnits_CreatedUtcDt'                                 , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'ST_PayrollUnits_UpdatedUtcDt'                                 , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'IDX_PayrollUnits_PayGroup'                                    , 'PayGroup,TenantId'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'IDX_PayrollUnits_PayrollCode'                                 , 'PayrollCode'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'IDX_PayrollUnits_TenantId_PayrollCode'                        , 'TenantId,PayrollCode'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'PK_PayrollUnits'                                              , 'PayrollId,TenantId'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayrollUnits'                            , 'UQ_PayrollUnits'                                              , 'PayrollCode,LegalEntityCompanyId,TenantId'                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_TenantId'                                             , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_Aedt'                                                 , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_Version'                                              , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_CreatedUtcDt'                                         , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_UpdatedUtcDt'                                         , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_EmployeeFirstName'                                    , 'EmployeeFirstName'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_EmployeeNumber'                                       , 'EmployeeNumber'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_CheckNumber'                                          , 'CheckNumber'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_NetAmount'                                            , 'NetAmount'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_ddAmount'                                             , 'ddAmount'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_CheckAmount'                                          , 'CheckAmount'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_PayrollId'                                            , 'PayrollId'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_ProcessingStatus'                                     , 'ProcessingStatus'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_ExceptionType'                                        , 'ExceptionType'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_PayrollInstanceId'                                    , 'PayrollInstanceId'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_CannotPay'                                            , 'CannotPay'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_PostedUtcDate'                                        , 'PostedUtcDate'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_EmployeeId'                                           , 'EmployeeId'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_EmployeeLastName'                                     , 'EmployeeLastName'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_PayUtcDate'                                           , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'ST_Pays_EmployeeMiddleName'                                   , 'EmployeeMiddleName'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'CDX_Pays'                                                     , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'IDX_Pays_CDCover'                                             , 'NetPayLiabilityId,PayUtcDate'                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'IDX_Pays_CheckSummaryReportCover'                             , 'CompanyId,TenantId,PayId,PayUtcDate'                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Pays'                                    , 'PK_Pays'                                                      , 'PayId,PayUtcDate'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_UltiTaxCode'                                      , 'UltiTaxCode'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_ItemNo'                                           , 'ItemNo'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_TaxAmount'                                        , 'TaxAmount'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_TaxYTDAmount'                                     , 'TaxYTDAmount'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_TaxableWages'                                     , 'TaxableWages'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_TaxableGross'                                     , 'TaxableGross'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_ExemptWages'                                      , 'ExemptWages'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_GrossWages'                                       , 'GrossWages'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_TaxableTips'                                      , 'TaxableTips'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_SuppTaxAmount'                                    , 'SuppTaxAmount'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_Version'                                          , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_CreatedUtcDt'                                     , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_UpdatedUtcDt'                                     , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'ST_PayTaxes_DuplicatedLineNumber'                             , 'DuplicatedLineNumber'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'CDX_PayTaxes'                                                 , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'IDX_PayTaxes_IngestionCoverWithoutTenantId'                   , 'PayId,PayUtcDate'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'PayTaxes'                                , 'PK_PayTaxes'                                                  , 'PayUtcDate,PayId,UltiTaxCode,DuplicatedLineNumber'                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportFileInformation'                   , 'PK_ReportFileInformation'                                     , 'ReportRequestId'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportObjectStoreInfo'                   , 'PK_ReportObjectStoreInfo'                                     , 'ReportRequestId'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportParameters'                        , 'ST_ReportParameters_ParameterName'                            , 'ParameterName'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportParameters'                        , 'ST_ReportParameters_ParameterValue'                           , 'ParameterValue'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportParameters'                        , 'ST_ReportParameters_Version'                                  , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportParameters'                        , 'ST_ReportParameters_CreatedUtcDt'                             , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportParameters'                        , 'PK_ReportParameters'                                          , 'ReportRequestId,ParameterName'                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportRequests'                          , 'ST_ReportRequests_Status'                                     , 'Status'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportRequests'                          , 'ST_ReportRequests_ParametersCheckSum'                         , 'ParametersCheckSum'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportRequests'                          , 'ST_ReportRequests_ReportType'                                 , 'ReportType'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportRequests'                          , 'ST_ReportRequests_UserId'                                     , 'UserId'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportRequests'                          , 'ST_ReportRequests_UserDescription'                            , 'UserDescription'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportRequests'                          , 'ST_ReportRequests_ReportRequestorType'                        , 'ReportRequestorType'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportRequests'                          , 'ST_ReportRequests_Aedt'                                       , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportRequests'                          , 'ST_ReportRequests_CreatedUtcDt'                               , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportRequests'                          , 'ST_ReportRequests_UpdatedUtcDt'                               , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportRequests'                          , 'PK_ReportRequests'                                            , 'ReportRequestId'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportStatistics'                        , 'ST_ReportStatistics_TotalTime'                                , 'TotalTime'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportStatistics'                        , 'ST_ReportStatistics_QueryTime'                                , 'QueryTime'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportStatistics'                        , 'ST_ReportStatistics_CreatedUtcDt'                             , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'ReportStatistics'                        , 'PK_ReportStatistics'                                          , 'ReportRequestId'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'States'                                  , 'ST_States_StateCode'                                          , 'StateCode'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'States'                                  , 'PK_States'                                                    , 'CountryCode,StateCode'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'SystemSettings'                          , 'PK_SystemSettings'                                            , 'SettingName'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_Description'                                     , 'Description'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_TaxAgencyName'                                   , 'TaxAgencyName'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_State'                                           , 'State'                                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_Status'                                          , 'Status'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_BankName'                                        , 'BankName'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_BankState'                                       , 'BankState'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_ModifyBy'                                        , 'ModifyBy'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_UseFedRule'                                      , 'UseFedRule'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_InputDate'                                       , 'InputDate'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_ModifyDate'                                      , 'ModifyDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_TaxIdFormat'                                     , 'TaxIdFormat'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_ExcessWages'                                     , 'ExcessWages'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_WagesTaxId'                                      , 'WagesTaxId'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_CorrespondingTaxId'                              , 'CorrespondingTaxId'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_Rate'                                            , 'Rate'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_DefaultTaxRate'                                  , 'DefaultTaxRate'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_CopyFromPayee'                                   , 'CopyFromPayee'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'ST_TaxAgency_CombineFilingMethodNoSUI'                        , 'CombineFilingMethodNoSUI'                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'PK_TaxAgency'                                                 , 'TaxAgencyId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgency'                               , 'UQ_TaxAgency'                                                 , 'TaxAgencyCode'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactionAmounts'             , 'ST_TaxAgencyTransactionAmounts_UpdatedUtcDt'                  , 'UpdatedUtcDt'                                                                                                                                                                                        ,  2                       , 0                 , NULL                                                              , 0                     , 0                     , 1                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactionAmounts'             , 'CDX_TaxAgencyTransactionAmounts'                              , 'CheckDate'                                                                                                                                                                                           ,  2                       , 0                 , NULL                                                              , 0                     , 0                     , 1                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactionAmounts'             , 'PK_TaxAgencyTransactionAmounts'                               , 'TransactionGUID,TaxId'                                                                                                                                                                               ,  2                       , 0                 , NULL                                                              , 0                     , 0                     , 1                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_TenantId'                            , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_TransactionType'                     , 'TransactionType'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_TaxAgencyId'                         , 'TaxAgencyId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_LegalEntityCompanyId'                , 'LegalEntityCompanyId'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_ProcessDate'                         , 'ProcessDate'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_BatchNo'                             , 'BatchNo'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_DueDate'                             , 'DueDate'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_TransactionAmount'                   , 'TransactionAmount'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_TaxCode'                             , 'TaxCode'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_CheckDate'                           , 'CheckDate'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_isPaid'                              , 'isPaid'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_isSent'                              , 'isSent'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_TaxAgencyTransactionStatusKey'       , 'TaxAgencyTransactionStatusKey'                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_InputUser'                           , 'InputUser'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_ModifyBy'                            , 'ModifyBy'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_Notes'                               , 'Notes'                                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_Prepaid'                             , 'Prepaid'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_New'                                 , 'New'                                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
atabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_CheckDateNextBusinessDay'            , 'CheckDateNextBusinessDay'                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_OutstandingAmount'                   , 'OutstandingAmount'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_PaymentEftRequirement'               , 'PaymentEftRequirement'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_PaymentLiabilityId'                  , 'PaymentLiabilityId'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_PaymentVoidLiabilityId'              , 'PaymentVoidLiabilityId'                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_PaymentIsExported'                   , 'PaymentIsExported'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_PaymentIsReconciled'                 , 'PaymentIsReconciled'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_CreditAgencyRefunded'                , 'CreditAgencyRefunded'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_CreditUseWithinCheckDateQuarter'     , 'CreditUseWithinCheckDateQuarter'                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_Aedt'                                , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_Aesn'                                , 'Aesn'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_Version'                             , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_CreatedUtcDt'                        , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_UpdatedUtcDt'                        , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_TransactionId'                       , 'TransactionId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_TransactionGUID'                     , 'TransactionGUID'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_PostPayrollId'                       , 'PostPayrollId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_PostPayrollGUID'                     , 'PostPayrollGUID'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'ST_TaxAgencyTransactions_PaymentType'                         , 'PaymentType'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'IDX_TaxAgencyTransactions_CDVoidPaymentCover'                 , 'TransactionType,PaymentVoidLiabilityId'                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'IDX_TaxAgencyTransactions_CollectionDetailsCover'             , 'TaxAgencyId,PostPayrollGUID'                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'IDX_TaxAgencyTransactions_IngestionCover'                     , 'TransactionGUID,Version'                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'IDX_TaxAgencyTransactions_TransactionType_CD'                 , 'TransactionType'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    --INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'NCCI_TaxAgencyTransactions_PaymentsCount'                     , 'TaxAgencyId,PostPayrollGUID'                                                                                                                                                                         , 20, 0, NULL                                                           , 0,  0, )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAgencyTransactions'                   , 'PK_TaxAgencyTransactions'                                     , 'TransactionGUID'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'ST_TaxAmounts_TaxId'                                          , 'TaxId'                                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'ST_TaxAmounts_TenantId'                                       , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'ST_TaxAmounts_CurrentAmount'                                  , 'CurrentAmount'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'ST_TaxAmounts_Version'                                        , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'ST_TaxAmounts_CreatedUtcDt'                                   , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'ST_TaxAmounts_UpdatedUtcDt'                                   , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'ST_TaxAmounts_UTETaxDataSourceTableSetKey'                    , 'UTETaxDataSourceTableSetKey'                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'ST_TaxAmounts_TaxPayrollGUID'                                 , 'TaxPayrollGUID'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'IDX_TaxAmounts_UltiTaxCode'                                   , 'UltiTaxCode'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    --INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'NCCI_TaxAmounts_SumByPayroll'                                 , 'TenantId,TaxPayrollGUID,UTETaxDataSourceTableSetKey,CurrentAmount'                                                                                                                                   , 20, 0, NULL                                                           , 0,  0, )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'PK_TaxAmounts'                                                , 'TaxId,TenantId,UTETaxDataSourceTableSetKey,TaxPayrollGUID'                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'ST_TaxAmounts_UltiTaxCode'                                    , 'UltiTaxCode'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmounts'                              , 'ST_TaxAmounts_PayUtcDate'                                     , 'PayUtcDate'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmountsUltiTaxCodes'                  , 'ST_TaxAmountsUltiTaxCodes_UTETaxDataSourceTableSetKey'        , 'UTETaxDataSourceTableSetKey'                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmountsUltiTaxCodes'                  , 'ST_TaxAmountsUltiTaxCodes_TaxId'                              , 'TaxId'                                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmountsUltiTaxCodes'                  , 'ST_TaxAmountsUltiTaxCodes_TenantId'                           , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmountsUltiTaxCodes'                  , 'ST_TaxAmountsUltiTaxCodes_UltiTaxCode'                        , 'UltiTaxCode'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmountsUltiTaxCodes'                  , 'ST_TaxAmountsUltiTaxCodes_Version'                            , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxAmountsUltiTaxCodes'                  , 'PK_TaxAmountsUltiTaxCodes'                                    , 'TaxPayrollGUID,UTETaxDataSourceTableSetKey,TaxId,UltiTaxCode'                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_Description'                                      , 'Description'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_Version'                                          , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_UTETaxCode'                                       , 'UTETaxCode'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_IsTax'                                            , 'IsTax'                                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_TaxGUID'                                          , 'TaxGUID'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_UltiproTaxCodeList'                               , 'UltiproTaxCodeList'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_SortId'                                           , 'SortId'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_AuthorityLevel'                                   , 'AuthorityLevel'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_TaxAgencyId'                                      , 'TaxAgencyId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_StateCode'                                        , 'StateCode'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_LocalCode'                                        , 'LocalCode'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_TaxAgencyCode'                                    , 'TaxAgencyCode'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_TaxAgencyParentCode'                              , 'TaxAgencyParentCode'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'IDX_TaxCodes_CollectionDetailsCover'                          , 'TaxAgencyId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'PK_TaxCodes'                                                  , 'TaxId'                                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_TaxId'                                            , 'TaxId'                                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'ST_TaxCodes_TaxIdIsTax'                                       , 'TaxId'                                                                                                                                                                                               , 20                       , 1                 , 'IsTax=1'                                                         , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxCodes'                                , 'UQ_TaxCodes'                                                  , 'TaxGUID'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxLiabilities'                          , 'ST_TaxLiabilities_TaxLiabilityId'                             , 'TaxLiabilityId'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxLiabilities'                          , 'ST_TaxLiabilities_LiabilityId'                                , 'LiabilityId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxLiabilities'                          , 'ST_TaxLiabilities_TenantId'                                   , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxLiabilities'                          , 'ST_TaxLiabilities_CollectionId'                               , 'CollectionId'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxLiabilities'                          , 'ST_TaxLiabilities_PayrollId'                                  , 'PayrollId'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxLiabilities'                          , 'ST_TaxLiabilities_RunNumber'                                  , 'RunNumber'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxLiabilities'                          , 'ST_TaxLiabilities_TaxLiabilityOriginTypeKey'                  , 'TaxLiabilityOriginTypeKey'                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxLiabilities'                          , 'PK_TaxLiabilities'                                            , 'TaxLiabilityId,PayUtcDate'                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxLiabilities'                          , 'IDX_TaxLiabilities_CheckDateCover'                            , 'TaxLiabilityOriginTypeKey,LiabilityId,PayUtcDate'                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 1                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'ST_TaxPaymentCredits_TaxPaymentId'                            , 'TaxPaymentId'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'ST_TaxPaymentCredits_TaxCreditId'                             , 'TaxCreditId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'ST_TaxPaymentCredits_LiabilityId'                             , 'LiabilityId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'ST_TaxPaymentCredits_CreditEffectOnLiabilityKey'              , 'CreditEffectOnLiabilityKey'                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'ST_TaxPaymentCredits_CreditAmountApplied'                     , 'CreditAmountApplied'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'ST_TaxPaymentCredits_Version'                                 , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'ST_TaxPaymentCredits_CreatedUtcDt'                            , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'ST_TaxPaymentCredits_SessionId'                               , 'SessionId'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'ST_TaxPaymentCredits_ReducedQeAdjLiabilityPaymentId'          , 'ReducedQeAdjLiabilityPaymentId'                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'IDX_TaxPaymentCredits_CollectionDetailsCover'                 , 'LiabilityId,TenantId,CreditEffectOnLiabilityKey,CreditAmountApplied,TaxCreditId'                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'IX_TaxPaymentCredits_ReducedQeAdjLiabilityPaymentId'          , 'ReducedQeAdjLiabilityPaymentId'                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'IX_TaxPaymentCredits_TaxCreditId'                             , 'TaxCreditId'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'IX_TaxPaymentCredits_TaxPaymentId'                            , 'TaxPaymentId'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'PK_TaxPaymentCredits'                                         , 'TaxPaymentCreditId'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPaymentCredits'                       , 'UQ_TaxPaymentCredits'                                         , 'TenantId,SessionId,TaxPaymentId,TaxCreditId,ReducedQeAdjLiabilityPaymentId'                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_TaxPayrollId'                                  , 'TaxPayrollId'                                                                                                                                                                                        , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_UTETaxDataSourceTableSetKey'                   , 'UTETaxDataSourceTableSetKey'                                                                                                                                                                         , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_TenantId'                                      , 'TenantId'                                                                                                                                                                                            , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_LiabilityId'                                   , 'LiabilityId'                                                                                                                                                                                         , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_Aesn'                                          , 'Aesn'                                                                                                                                                                                                , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_Aedt'                                          , 'Aedt'                                                                                                                                                                                                , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_Version'                                       , 'Version'                                                                                                                                                                                             , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_CreatedUtcDt'                                  , 'CreatedUtcDt'                                                                                                                                                                                        , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_UpdatedUtcDt'                                  , 'UpdatedUtcDt'                                                                                                                                                                                        , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_ImportUtcDateTime'                             , 'ImportUtcDateTime'                                                                                                                                                                                   , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_PostPayrollId'                                 , 'PostPayrollId'                                                                                                                                                                                       , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_PostPayrollGUID'                               , 'PostPayrollGUID'                                                                                                                                                                                     , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_PayrollId'                                     , 'PayrollId'                                                                                                                                                                                           , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_PayUtcDate'                                    , 'PayUtcDate'                                                                                                                                                                                          , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_PayrollType'                                   , 'PayrollType'                                                                                                                                                                                         , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'IDX_TaxPayrolls_CollectionDetailsCover'                       , 'TenantId,PostPayrollGUID'                                                                                                                                                                            , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'IDX_TaxPayrolls_CollectionDetailsCover2'                      , 'TenantId,PostPayrollId'                                                                                                                                                                              , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'PK_TaxPayrolls'                                               , 'UTETaxDataSourceTableSetKey,TenantId,TaxPayrollGUID'                                                                                                                                                 , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'ST_TaxPayrolls_TaxPayrollGUID'                                , 'TaxPayrollGUID'                                                                                                                                                                                      , 50                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'UDX_TaxPayrolls_CollectionDetailsCover'                       , 'PostPayrollGUID'                                                                                                                                                                                     , 50                       , 1                 , '([PostPayrollGUID]<>''00000000-0000-0000-0000-000000000000'')'   , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'UQ_TaxPayrolls_PostPayrollGUID'                               , 'PostPayrollGUID'                                                                                                                                                                                     , 50                       , 1                 , '([PostPayrollGUID]<>''00000000-0000-0000-0000-000000000000'')'   , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TaxPayrolls'                             , 'UQ_TaxPayrolls_PostPayrollId'                                 , 'PostPayrollId'                                                                                                                                                                                       , 50                       , 1                 , '([PostPayrollId]<>(0))'                                          , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TenantProduct'                           , 'ST_TenantProduct_ProductCodeKey'                              , 'ProductCodeKey'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TenantProduct'                           , 'ST_TenantProduct_EffectiveUtcDateFrom'                        , 'EffectiveUtcDateFrom'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TenantProduct'                           , 'ST_TenantProduct_EffectiveUtcDateTo'                          , 'EffectiveUtcDateTo'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TenantProduct'                           , 'ST_TenantProduct_Status'                                      , 'Status'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TenantProduct'                           , 'ST_TenantProduct_ActivationStatus'                            , 'ActivationStatus'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TenantProduct'                           , 'PK_TenantProduct'                                             , 'TenantId,ProductCodeKey'                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_TenantAlias'                                       , 'TenantAlias'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_Name'                                              , 'Name'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_Description'                                       , 'Description'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_MasterCoId'                                        , 'MasterCoId'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_ARNumber'                                          , 'ARNumber'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_Aesn'                                              , 'Aesn'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_Aedt'                                              , 'Aedt'                                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_Version'                                           , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_CreatedUtcDt'                                      , 'CreatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_UpdatedUtcDt'                                      , 'UpdatedUtcDt'                                                                                                                                                                                        , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_ClientAccessKey'                                   , 'ClientAccessKey'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_ClientID'                                          , 'ClientID'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_NetPayDraftDays'                                   , 'NetPayDraftDays'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_CustomerBankAccountId'                             , 'CustomerBankAccountId'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_CustomerTaxBankAccountId'                          , 'CustomerTaxBankAccountId'                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_CustomerGarnishmentsBankAccountId'                 , 'CustomerGarnishmentsBankAccountId'                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'ST_Tenants_DcEnvironmentName'                                 , 'DcEnvironmentName'                                                                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'Tenants'                                 , 'PK_Tenants'                                                   , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TenantStatus'                            , 'ST_TenantStatus_TenantStatusCode'                             , 'TenantStatusCode'                                                                                                                                                                                    , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TenantStatus'                            , 'ST_TenantStatus_EffectiveUtcDateFrom'                         , 'EffectiveUtcDateFrom'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TenantStatus'                            , 'ST_TenantStatus_EffectiveUtcDateTo'                           , 'EffectiveUtcDateTo'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'TenantStatus'                            , 'PK_TenantStatus'                                              , 'TenantId,TenantStatusCode,EffectiveUtcDateFrom,EffectiveUtcDateTo'                                                                                                                                   , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UltiProTaxCodeMapping'                   , 'ST_UltiProTaxCodeMapping_UltiProTaxCode'                      , 'UltiProTaxCode'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UltiProTaxCodeMapping'                   , 'ST_UltiProTaxCodeMapping_UteTaxCode'                          , 'UteTaxCode'                                                                                                                                                                                          , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UltiProTaxCodeMapping'                   , 'ST_UltiProTaxCodeMapping_TaxId'                               , 'TaxId'                                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UltiProTaxCodeMapping'                   , 'PK__UltiProTaxCodeMapping'                                    , 'UltiProTaxCodeMapId'                                                                                                                                                                                 , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UsgBankAccounts'                         , 'ST_UsgBankAccounts_AccountName'                               , 'AccountName'                                                                                                                                                                                         , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UsgBankAccounts'                         , 'ST_UsgBankAccounts_RoutingNumber'                             , 'RoutingNumber'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UsgBankAccounts'                         , 'ST_UsgBankAccounts_MaskedAccountNumber4'                      , 'MaskedAccountNumber4'                                                                                                                                                                                , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UsgBankAccounts'                         , 'ST_UsgBankAccounts_AccountPurpose'                            , 'AccountPurpose'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UsgBankAccounts'                         , 'ST_UsgBankAccounts_Status'                                    , 'Status'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UsgBankAccounts'                         , 'ST_UsgBankAccounts_BankAccountType'                           , 'BankAccountType'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UsgBankAccounts'                         , 'ST_UsgBankAccounts_IsDefault'                                 , 'IsDefault'                                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UsgBankAccounts'                         , 'ST_UsgBankAccounts_BankId'                                    , 'BankId'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UsgBankAccounts'                         , 'ST_UsgBankAccounts_BankName'                                  , 'BankName'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'UsgBankAccounts'                         , 'PK_UsgBankAccounts'                                           , 'BankAccountId'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessing'                            , 'ST_YEProcessing_TenantId'                                     , 'TenantId'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessing'                            , 'ST_YEProcessing_YEProcessingStatusKey'                        , 'YEProcessingStatusKey'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessing'                            , 'PK_YEProcessing'                                              , 'YEProcessingId'                                                                                                                                                                                      , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessing'                            , 'UQ_YEProcessing'                                              , 'ClientId,TaxYear,TenantId'                                                                                                                                                                           , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessingFiles'                       , 'ST_YEProcessingFiles_InboundFileTypeKey'                      , 'InboundFileTypeKey'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessingFiles'                       , 'ST_YEProcessingFiles_Agency'                                  , 'Agency'                                                                                                                                                                                              , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessingFiles'                       , 'ST_YEProcessingFiles_UltiProAgency'                           , 'UltiProAgency'                                                                                                                                                                                       , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessingFiles'                       , 'ST_YEProcessingFiles_AgencyLocalityTypeKey'                   , 'AgencyLocalityTypeKey'                                                                                                                                                                               , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessingFiles'                       , 'ST_YEProcessingFiles_YEFileStatusKey'                         , 'YEFileStatusKey'                                                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessingFiles'                       , 'ST_YEProcessingFiles_FileName'                                , 'FileName'                                                                                                                                                                                            , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessingFiles'                       , 'ST_YEProcessingFiles_Version'                                 , 'Version'                                                                                                                                                                                             , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessingFiles'                       , 'ST_YEProcessingFiles_YEIngestionTypeKey'                      , 'YEIngestionTypeKey'                                                                                                                                                                                  , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessingFiles'                       , 'PK_YEProcessingFiles'                                         , 'YEProcessingId,InboundFileTypeKey,UltiProAgency'                                                                                                                                                     , 20                       , 0                 , NULL                                                              , 0                     , 0                     , 0                         , 1)
    INSERT INTO DOI.[Statistics] (DatabaseName      , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList_Desired                                                                                                                                                                          , SampleSizePct_Desired    , IsFiltered_Desired, FilterPredicate_Desired                                           , IsIncremental_Desired , NoRecompute_Desired   , LowerSampleSizeToDesired  , ReadyToQueue ) VALUES ('PaymentReporting', 'dbo'     , 'YEProcessingFiles'                       , 'UDX_YEProcessingFiles'                                        , 'YEProcessingId,FileName'                                                                                                                                                                             , 20                       , 1                 , '([FileName]<>'''')'                                              , 0                     , 0                     , 0                         , 1)
    -- (DatabaseName    , SchemaName, TableName                                 , StatisticsName                                                 , StatisticsColumnList                                                                                                                                                                                  , SampleSizePct            , IsFiltered        , FilterPredicate                                                   , IsIncremental         , NoRecompute           , LowerSampleSizeToDesired  , ReadyToQueue )
END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_InsertData.sql" 


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_InsertData.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('5994cf6f-b60c-56e7-acd3-f04f1b5f50c3' AS UNIQUEIDENTIFIER), '97E49A80C17B7C78D14FD75BFAF443D7319043AE8130512287DB6CA1D37837C9', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_InsertData.sql", ID: {5994cf6f-b60c-56e7-acd3-f04f1b5f50c3} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0c99ff14-6d76-5a67-9929-c9cb3948d0c8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '21A1C0585F83749DAFC4714AEF0D7871C986E8EF0A61CBA55CF7C90F13A2C3C4')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_9_Statistics.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_9_Statistics.sql", ID: {0c99ff14-6d76-5a67-9929-c9cb3948d0c8} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_9_Statistics.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_9_Statistics]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_9_Statistics];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_9_Statistics]
AS

--EXEC DOI.spRefreshMetadata_User_Statistics_CreateTables
EXEC DOI.spRefreshMetadata_User_Statistics_InsertData
EXEC DOI.spRefreshMetadata_User_Statistics_UpdateData

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_9_Statistics.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_9_Statistics.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('0c99ff14-6d76-5a67-9929-c9cb3948d0c8' AS UNIQUEIDENTIFIER), '21A1C0585F83749DAFC4714AEF0D7871C986E8EF0A61CBA55CF7C90F13A2C3C4', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_9_Statistics.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_9_Statistics.sql", ID: {0c99ff14-6d76-5a67-9929-c9cb3948d0c8} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5db1623e-6dea-5fe1-9c9f-d3828f4cb952' AS UNIQUEIDENTIFIER) AND [script_checksum] = '45F81E6AF4E8161F9C5232E9E07DED44A7731A1AEC29870463E2B2D8F1C254D1')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_InsertData.sql", ID: {5db1623e-6dea-5fe1-9c9f-d3828f4cb952} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_InsertData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexPartitions_ColumnStore_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexPartitions_ColumnStore_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_IndexPartitions_ColumnStore_InsertData]

AS

DELETE DOI.IndexColumnStorePartitions

INSERT INTO DOI.IndexColumnStorePartitions 
(		DatabaseName,	SchemaName	,TableName			,IndexName									,PartitionNumber	,OptionDataCompression )
SELECT IRS.DatabaseName, IRS.SchemaName, IRS.TableName, IRS.IndexName, P.PartitionNumber, 'COLUMNSTORE'
FROM DOI.IndexesColumnStore IRS
    INNER JOIN DOI.vwPartitionFunctionPartitions P ON IRS.Storage_Desired = P.PartitionSchemeName
WHERE IRS.StorageType_Desired = 'PARTITION_SCHEME'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_InsertData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_InsertData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('5db1623e-6dea-5fe1-9c9f-d3828f4cb952' AS UNIQUEIDENTIFIER), '45F81E6AF4E8161F9C5232E9E07DED44A7731A1AEC29870463E2B2D8F1C254D1', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_InsertData.sql", ID: {5db1623e-6dea-5fe1-9c9f-d3828f4cb952} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2c571d95-94bf-56c3-bea8-b923dc90e216' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E9B2387B9BFF9C33C4840D50E0F2E5AE61417FCDD1780F1008B3263EB4C4F7CD')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_UpdateData.sql", ID: {2c571d95-94bf-56c3-bea8-b923dc90e216} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_UpdateData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexPartitions_RowStore_UpdateData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexPartitions_RowStore_UpdateData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_IndexPartitions_RowStore_UpdateData]

AS

UPDATE IRSP
SET Fragmentation = IPS.avg_fragmentation_in_percent,
    NumRows = p.rows,
    TotalPages = au.total_pages,
    DataFileName = df.physical_name,
    DriveLetter = LEFT(df.physical_name, 1),
    TotalIndexPartitionSizeInMB = (au.total_pages * 8) / 1024.00
FROM DOI.SysIndexPhysicalStats IPS
    INNER JOIN DOI.SysDatabases d ON d.database_id = IPS.database_id
    INNER JOIN DOI.SysTables t ON t.database_id = d.database_id
        AND IPS.object_id = t.object_id
    INNER JOIN DOI.SysSchemas s ON t.schema_id = s.schema_id
    INNER JOIN DOI.SysIndexes i ON i.database_id = d.database_id
        AND i.object_id = t.object_id
        AND IPS.index_id = i.index_id
    INNER JOIN DOI.IndexRowStorePartitions IRSP ON IRSP.DatabaseName = D.name
        AND IRSP.SchemaName = s.name
        AND IRSP.TableName = t.name
        AND IRSP.IndexName = i.name
        AND IRSP.PartitionNumber = IPS.partition_number
	INNER JOIN DOI.SysPartitionSchemes ps ON i.data_space_id = ps.data_space_id
	INNER JOIN DOI.SysDestinationDataSpaces dds ON ps.data_space_id = dds.partition_scheme_id
	INNER JOIN DOI.SysDataSpaces ds ON ds.data_space_id = dds.data_space_id
	INNER JOIN DOI.SysAllocationUnits au ON au.data_space_id = dds.data_space_id
	INNER JOIN DOI.SysDatabaseFiles df ON df.data_space_id = dds.data_space_id
    INNER JOIN DOI.SysPartitions p ON p.database_id = d.database_id
        AND p.object_id = t.object_id
		AND p.index_id = i.index_id
		AND p.partition_number = IRSP.PartitionNumber
        AND p.hobt_id = au.container_id


UPDATE IRSP
SET PartitionUpdateType =   CASE
			                    WHEN Fragmentation > 30
				                    OR OptionDataCompression <> OptionDataCompression --certain options or frag over 30%.
			                    THEN 'AlterRebuild-PartitionLevel' --can be done on a partition level
			                    WHEN (OptionDataCompression = OptionDataCompression)--NO OPTIONS CHANGES, 5-30% frag, needs LOB compaction
				                    AND Fragmentation BETWEEN 5 AND 30
			                    THEN 'AlterReorganize-PartitionLevel' --this always happens online, can be done on a partition level
			                    ELSE 'None'
                    		END
FROM DOI.IndexRowStorePartitions IRSP


UPDATE IRS
SET TotalPartitionsInIndex = IRSP.TotalPartitionsInIndex,
    NeedsPartitionLevelOperations = IRSP.NeedsPartitionLevelOperations
FROM DOI.IndexesRowStore IRS
    INNER JOIN (SELECT	DatabaseName,
                        SchemaName,
		                TableName,
		                IndexName, 
                        MAX(PartitionNumber) AS TotalPartitionsInIndex, 
			            CASE 
				            WHEN MIN(PartitionUpdateType) <> MAX(PartitionUpdateType)
				            THEN 1 
				            ELSE 0
			            END NeedsPartitionLevelOperations
                --select count(*)
                FROM DOI.IndexRowStorePartitions
                GROUP BY DatabaseName, SchemaName, TableName, IndexName) IRSP
        ON IRSP.DatabaseName = IRS.DatabaseName
            AND IRSP.SchemaName = IRS.SchemaName
            AND IRSP.TableName = IRS.TableName
            AND IRSP.IndexName = IRS.IndexName

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_UpdateData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('2c571d95-94bf-56c3-bea8-b923dc90e216' AS UNIQUEIDENTIFIER), 'E9B2387B9BFF9C33C4840D50E0F2E5AE61417FCDD1780F1008B3263EB4C4F7CD', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_UpdateData.sql", ID: {2c571d95-94bf-56c3-bea8-b923dc90e216} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('097526eb-1447-5d3a-8cf2-21cb34f0b00d' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1A39F180AFABBE7E6CCBF1E68E34B38289E5EF5A528ACF4E3CC650478C13A691')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_InsertData.sql", ID: {097526eb-1447-5d3a-8cf2-21cb34f0b00d} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_InsertData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexPartitions_RowStore_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexPartitions_RowStore_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_IndexPartitions_RowStore_InsertData]

AS

DELETE DOI.IndexRowStorePartitions

INSERT INTO DOI.IndexRowStorePartitions (DatabaseName, SchemaName,TableName,IndexName,PartitionNumber)

SELECT IRS.DatabaseName, IRS.SchemaName, IRS.TableName, IRS.IndexName, P.PartitionNumber
FROM DOI.IndexesRowStore IRS
    INNER JOIN DOI.vwPartitionFunctionPartitions P ON IRS.Storage_Desired = P.PartitionSchemeName
WHERE IRS.StorageType_Desired = 'PARTITION_SCHEME'
ORDER BY IRS.DatabaseName, IRS.SchemaName, IRS.TableName, IRS.IndexName, P.PartitionNumber
--INSERT INTO DOI.IndexColumnStorePartitions 
--(			SchemaName	,TableName			,IndexName									,PartitionNumber	,OptionDataCompression )
--SELECT IRS.DatabaseName, IRS.SchemaName, IRS.TableName, IRS.IndexName, P.PartitionNumber, 'DEFAULT', 'DEFAULT', 'DEFAULT'
--FROM DOI.IndexesColumnStore IRS
--    INNER JOIN DOI.vwPartitionFunctionPartitions P ON IRS.Storage_Desired = P.PartitionSchemeName
--WHERE IRS.StorageType_Desired = 'PARTITION_SCHEME'

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_InsertData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_InsertData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('097526eb-1447-5d3a-8cf2-21cb34f0b00d' AS UNIQUEIDENTIFIER), '1A39F180AFABBE7E6CCBF1E68E34B38289E5EF5A528ACF4E3CC650478C13A691', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_InsertData.sql", ID: {097526eb-1447-5d3a-8cf2-21cb34f0b00d} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('76e5246d-0c79-544f-adda-304b23829180' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6090C269D28FE53323BC6C274569F8A2B85C57051F645F63C9981F061EAC0F54')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_91_IndexPartitions.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_91_IndexPartitions.sql", ID: {76e5246d-0c79-544f-adda-304b23829180} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_91_IndexPartitions.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_91_IndexPartitions]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_91_IndexPartitions];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_91_IndexPartitions]

AS

--EXEC DOI.spRefreshMetadata_User_IndexPartitions_RowStore_CreateTables
--EXEC DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_CreateTables
EXEC DOI.spRefreshMetadata_User_IndexPartitions_RowStore_InsertData
EXEC DOI.spRefreshMetadata_User_IndexPartitions_RowStore_UpdateData
EXEC DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_InsertData

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_91_IndexPartitions.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_91_IndexPartitions.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('76e5246d-0c79-544f-adda-304b23829180' AS UNIQUEIDENTIFIER), '6090C269D28FE53323BC6C274569F8A2B85C57051F645F63C9981F061EAC0F54', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_91_IndexPartitions.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_91_IndexPartitions.sql", ID: {76e5246d-0c79-544f-adda-304b23829180} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5c94aaf6-ea15-5926-9d8d-bdccca9ec150' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'C797B673E13A4EE9B706D6507E8DCF121379EDDE1E0E2386BF9F4D02B5F38E93')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_UpdateData.sql", ID: {5c94aaf6-ea15-5926-9d8d-bdccca9ec150} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_UpdateData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_ForeignKeys_UpdateData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_ForeignKeys_UpdateData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_ForeignKeys_UpdateData]
AS

UPDATE FKU
SET FKU.ParentColumnList_Actual = FKS.ParentColumnList_Actual,
    FKU.ReferencedColumnList_Actual = FKS.ReferencedColumnList_Actual,
    FKU.DeploymentTime =     CASE 
                                WHEN ptu.IsStorageChanging = 1
                                THEN 'Job'
                                ELSE 'Deployment'
                            END 
--SELECT count(*)
FROM DOI.ForeignKeys FKU
    INNER JOIN DOI.SysDatabases d ON d.name = FKU.DatabaseName
    INNER JOIN DOI.Tables ptu ON d.name = ptu.DatabaseName
        AND ptu.SchemaName = FKU.ParentSchemaName
        AND ptu.TableName = FKU.ParentTableName
    INNER JOIN DOI.Tables rtu ON d.name = rtu.DatabaseName
        AND rtu.SchemaName = FKU.ReferencedSchemaName
        AND rtu.TableName = FKU.ReferencedTableName
    INNER JOIN DOI.SysSchemas ps ON ps.name = ptu.SchemaName
    INNER JOIN DOI.SysSchemas rs ON rs.name = rtu.SchemaName
    INNER JOIN DOI.SysTables pts ON pts.database_id = d.database_id
        AND pts.schema_id = ps.schema_id
        AND pts.name = ptu.TableName
    INNER JOIN DOI.SysTables rts ON rts.database_id = d.database_id
        AND rts.schema_id = rs.schema_id
        AND rts.name = rtu.TableName
    INNER JOIN DOI.SysForeignKeys FKS ON FKS.database_id = d.database_id
        AND FKS.schema_id = pts.schema_id
        AND FKS.parent_object_id = pts.object_id
        AND FKS.referenced_object_id = rts.object_id
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_UpdateData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('5c94aaf6-ea15-5926-9d8d-bdccca9ec150' AS UNIQUEIDENTIFIER), 'C797B673E13A4EE9B706D6507E8DCF121379EDDE1E0E2386BF9F4D02B5F38E93', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_UpdateData.sql", ID: {5c94aaf6-ea15-5926-9d8d-bdccca9ec150} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('34e5f9d4-4400-5c04-ab0f-bc054ae6a571' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'DAE9752FD66DD8001440BF2DB284B94BF4625F66FC67E9CC1400389AB78472EA')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_InsertData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_InsertData.sql", ID: {34e5f9d4-4400-5c04-ab0f-bc054ae6a571} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_InsertData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_ForeignKeys_InsertData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_ForeignKeys_InsertData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_ForeignKeys_InsertData]

AS


SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
SET ARITHABORT ON
SET CONCAT_NULL_YIELDS_NULL ON
SET NUMERIC_ROUNDABORT OFF
SET QUOTED_IDENTIFIER ON


DELETE DOI.ForeignKeys

INSERT [DOI].[ForeignKeys] 
        ([DatabaseName]         , [ParentSchemaName], [ParentTableName]                         , [ParentColumnList_Desired]                                    , [ReferencedSchemaName], [ReferencedTableName]                                 , [ReferencedColumnList_Desired]) 
VALUES	 (N'PaymentReporting'   ,N'DataMart'        , N'BankAccountPurposeDim'		            , N'ProductCodeKey'												, N'DataMart'	        , N'ProductCodeDim'										, N'ProductCodeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Bai2BankTransactions'		            , N'BankAccountDayId'											, N'dbo'		        , N'BankAccountDays'									, N'BankAccountDayId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Bai2BankTransactions'		            , N'CounterpartUsgBankAccountId'								, N'dbo'		        , N'UsgBankAccounts'									, N'BankAccountId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Bai2BankTransactions'		            , N'UsgBankAccountId'											, N'dbo'		        , N'UsgBankAccounts'									, N'BankAccountId')
--		,(N'PaymentReporting'   ,N'dbo'		        , N'BankTransactions'			            , N'Bai2BankTransactionMatchId'									, N'dbo'		        , N'Bai2BankTransactions'								, N'BankTransactionId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'BankTransactions'			            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
--		,(N'PaymentReporting'   ,N'dbo'		        , N'BankTransactions'			            , N'TenantId,CollectionId'										, N'dbo'		        , N'LiabilityCollections'								, N'CollectionId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'BankTransactions'			            , N'TenantId,CustomerBankAccountId'								, N'dbo'		        , N'CustomerBankAccounts'								, N'TenantId,BankAccountId')
--		,(N'PaymentReporting'   ,N'dbo'		        , N'BankTransactions'			            , N'PayId'														, N'dbo'		        , N'Pays'												, N'PayId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'BankTransactions'			            , N'Type'														, N'DataMart'	        , N'BankTransactionTypeDim'								, N'BankTransactionTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'BankTransactions'			            , N'UsgBankAccountId'											, N'dbo'		        , N'UsgBankAccounts'									, N'BankAccountId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'BankTransactions'			            , N'FileRequestId'												, N'dbo'		        , N'FileRequests'										, N'FileRequestId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Companies'					            , N'LegalEntityCompanyId,TenantId'								, N'dbo'		        , N'Companies'											, N'CompanyId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Companies'					            , N'Status'														, N'DataMart'	        , N'CompanyStatusDim'									, N'CompanyStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Companies'					            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Companies'					            , N'Type'														, N'DataMart'	        , N'CompanyTypeDim'										, N'CompanyTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Company_Tax'			            	, N'CompanyId,TenantId'								            , N'dbo'		        , N'Companies'											, N'CompanyId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Company_Tax'			            	, N'Company_TaxStatusKey'						            	, N'DataMart'	        , N'Company_TaxStatusDim'								, N'Company_TaxStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'CompanyTaxAgency'			        	, N'Company_TaxGUID'								           	, N'dbo'		        , N'Company_Tax'										, N'Company_TaxGUID')
		,(N'PaymentReporting'   ,N'dbo'		        , N'CompanyTaxAgency'			        	, N'TaxAgencyId'								           		, N'dbo'		        , N'TaxAgency'											, N'TaxAgencyId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'CompanyTaxAgency'			        	, N'TenantId'								            		, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'CompanyTaxAgency'			        	, N'TaxScheduleGUID'								            , N'dbo'		        , N'TaxSchedules'										, N'TaxScheduleGUID')
		,(N'PaymentReporting'   ,N'dbo'		        , N'CompanyTaxAgency'			        	, N'NextTaxScheduleGUID'								        , N'dbo'		        , N'TaxSchedules'										, N'TaxScheduleGUID')
		,(N'PaymentReporting'   ,N'dbo'		        , N'CompanyTaxAgency_Audit'			        , N'CompanyTaxAgencyId'								        	, N'dbo'		        , N'CompanyTaxAgency'									, N'CompanyTaxAgencyId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'CompanyProduct'				            , N'ProductCodeKey'										        , N'DataMart'	        , N'ProductCodeDim'										, N'ProductCodeKey'					)
		,(N'PaymentReporting'   ,N'dbo'		        , N'CompanyProduct'				            , N'Status'												        , N'DataMart'	        , N'ProductStatus'										, N'ProductStatusKey'				)
		,(N'PaymentReporting'   ,N'dbo'		        , N'CompanyProduct'				            , N'ActivationStatus'									        , N'DataMart'	        , N'ProductActivationStatus'							, N'ProductActivationStatusKey'		)
		,(N'PaymentReporting'   ,N'dbo'		        , N'CompanyProduct'				            , N'CompanyId'											        , N'dbo'		        , N'Companies'											, N'CompanyId'						)
		,(N'PaymentReporting'   ,N'dbo'		        , N'CustomerBankAccounts'		            , N'BankAccountType'											, N'DataMart'	        , N'BankAccountTypeDim'									, N'BankAccountTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'CustomerBankAccounts'		            , N'Status'														, N'DataMart'	        , N'BankAccountStatusDim'								, N'BankAccountStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'CustomerBankAccounts'		            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'EFilingAcknowledgmentAlerts'            , N'SubmissionId'										        , N'dbo'		        , N'EFilingAcknowledgments'								, N'SubmissionId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'EFilingAcknowledgments'		            , N'PayeeId'											        , N'dbo'		        , N'TaxAgency'											, N'TaxAgencyCode'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'FileRequests'				            , N'UsgBankAccountId'									        , N'dbo'		        , N'UsgBankAccounts'									, N'BankAccountId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'FileRequests'				            , N'FileRequestProcessingStatusKey'						        , N'DataMart'	        , N'FileRequestProcessingStatusDim'						, N'FileRequestProcessingStatusKey'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'FileRequestPayments'		            , N'PaymentFileRequestId'								        , N'dbo'		        , N'FileRequests'										, N'FileRequestId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'FileRequestPayments'		            , N'PaymentId'											        , N'dbo'		        , N'PayrollPayments'									, N'PayrollPaymentId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'GarnishmentLiabilities'		            , N'GarnishmentLiabilityTypeKey'								, N'DataMart'	        , N'GarnishmentLiabilityTypeDim'						, N'GarnishmentLiabilityTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'GarnishmentLiabilities'		            , N'LiabilityId'										        , N'dbo'		        , N'Liabilities'										, N'LiabilityId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'GarnishmentLiabilities'		            , N'PayrollInstanceId,TenantId'							        , N'dbo'		        , N'PayrollInstances'									, N'PayrollInstanceId,TenantId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'GarnishmentLiabilities'		            , N'GarnishmentLiabilityStatusKey'						        , N'DataMart'	        , N'GarnishmentLiabilityStatusDim'						, N'GarnishmentLiabilityStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'GarnishmentPayrollInstances'            , N'TenantId'											        , N'dbo'		        , N'Tenants'											, N'TenantId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'GarnishmentPayrollInstances'            , N'GarnishmentPayrollInstanceReconStatusKey'			        , N'DataMart'	        , N'GarnishmentPayrollInstanceReconStatusDim'			, N'GarnishmentPayrollInstanceReconStatusKey'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'GeneralLedgerAccounts'		            , N'ParentAccountId'											, N'dbo'		        , N'GeneralLedgerAccounts'								, N'AccountId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'JournalEntries'				            , N'AccountId'													, N'dbo'		        , N'GeneralLedgerAccounts'								, N'AccountId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'JournalEntries'				            , N'LiabilityId'												, N'dbo'		        , N'Liabilities'										, N'LiabilityId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'JournalEntries'				            , N'TenantId,CompanyId'											, N'dbo'		        , N'Companies'											, N'CompanyId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'JournalEntries'				            , N'TenantId,PayrollId'											, N'dbo'		        , N'PayrollUnits'										, N'PayrollId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'JournalEntries'				            , N'TransactionType'											, N'DataMart'	        , N'JournalEntryTransactionTypeDim'						, N'JournalEntryTransactionTypeDimKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Liabilities'				            , N'Status'														, N'DataMart'	        , N'LiabilityStatusDim'									, N'LiabilityStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Liabilities'				            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Liabilities'				            , N'TenantId,CollectionId'										, N'dbo'		        , N'LiabilityCollections'								, N'CollectionId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Liabilities'				            , N'TenantId,LegalEntityCompanyId'								, N'dbo'		        , N'Companies'											, N'CompanyId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Liabilities'				            , N'TenantId,PayrollId'											, N'dbo'		        , N'PayrollUnits'										, N'PayrollId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Liabilities'				            , N'Type'														, N'DataMart'	        , N'LiabilityTypeDim'									, N'LiabilityTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityCollections'		            , N'PaymentMethod'												, N'DataMart'	        , N'LiabilityCollectionPaymentMethoDOIm'				, N'LiabilityCollectionPaymentMethodKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityCollections'		            , N'Status'														, N'DataMart'	        , N'LiabilityCollectionStatusDim'						, N'LiabilityCollectionStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityCollections'		            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityCollections'		            , N'TenantId,CustomerBankAccountId'								, N'dbo'		        , N'CustomerBankAccounts'								, N'TenantId,BankAccountId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityCollections'		            , N'Type'														, N'DataMart'	        , N'LiabilityCollectionTypeDim'							, N'LiabilityCollectionTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityCollections'		            , N'UsgBankAccountId'											, N'dbo'		        , N'UsgBankAccounts'									, N'BankAccountId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityCollections'		            , N'NettedCollectionId'											, N'dbo'		        , N'NettedCollections'									, N'NettedCollectionId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityCollectionConfirmationInfos'	, N'LiabilityCollectionId,TenantId'				                , N'dbo'		        , N'LiabilityCollections'								, N'CollectionId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityCollectionConfirmationInfos'	, N'TenantId'									                , N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityCollectionConfirmationInfos'	, N'UsgBankAccountId'							                , N'dbo'		        , N'UsgBankAccounts'									, N'BankAccountId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityCollectionComments'			, N'LiabilityCollectionId,TenantId'				                , N'dbo'		        , N'LiabilityCollections'								, N'CollectionId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityCollectionComments'			, N'TenantId'									                , N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityPayments'			            , N'LiabilityId'										        , N'dbo'		        , N'Liabilities'										, N'LiabilityId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'LiabilityPayments'			            , N'PaymentId'											        , N'dbo'		        , N'PayrollPayments'									, N'PayrollPaymentId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'NettedCollections'			            , N'Status'														, N'DataMart'	        , N'NettedCollectionStatusDim'							, N'NettedCollectionStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'NettedCollections'			            , N'PaymentMethod'												, N'DataMart'	        , N'LiabilityCollectionPaymentMethoDOIm'				, N'LiabilityCollectionPaymentMethodKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'NettedCollections'			            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'NettedCollections'			            , N'UsgBankAccountId'											, N'dbo'		        , N'UsgBankAccounts'									, N'BankAccountId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'NettedCollections'			            , N'TenantId,CustomerBankAccountId'								, N'dbo'		        , N'CustomerBankAccounts'								, N'TenantId,BankAccountId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'NettedCollectionsLiabilityCollections'	, N'NettedCollectionId'							                , N'dbo'		        , N'NettedCollections'									, N'NettedCollectionId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayActions'					            , N'FromState'											        , N'DataMart'	        , N'PayPortionStateDim'									, N'PayPortionStateKey'		)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayActions'					            , N'ToState'											        , N'DataMart'	        , N'PayPortionStateDim'									, N'PayPortionStateKey'		)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayActions'					            , N'Portion'											        , N'DataMart'	        , N'RefundPortionDim'									, N'RefundPortionKey'		)
--      ([ParentSchemaName]     , [ParentTableName]                         , [ParentColumnList]                                            , [ReferencedSchemaName], [ReferencedTableName]                                 , [ReferencedColumnList]) 
--		,(N'PaymentReporting'   ,N'dbo'		        , N'PayActions'					            , N'PayId'												        , N'dbo'		        , N'Pays'												, N'PayId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayActions'					            , N'LiabilityId'										        , N'dbo'		        , N'Liabilities'										, N'LiabilityId'			)
--		,(N'PaymentReporting'   ,N'dbo'		        , N'PayLiabilities'				            , N'PayId'												        , N'dbo'		        , N'Pays'												, N'PayId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayLiabilities'				            , N'LiabilityId'										        , N'dbo'		        , N'Liabilities'										, N'LiabilityId'	)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayLiabilities'				            , N'ActionId'											        , N'dbo'		        , N'PayActions'											, N'ActionId'	)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishment_Deductions'	            , N'MedIndicatorKey'											, N'DataMart'	        , N'GarnishmentMedIndicatorDim'							, N'MedIndicatorKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishment_Deductions'	            , N'PayUtcDate,GarnishmentId'									, N'dbo'		        , N'PayGarnishments'									, N'PayUtcDate,GarnishmentId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishment_Employees'	            , N'IsInArrearsKey'												, N'DataMart'	        , N'GarnishmentIsInArrearsDim'							, N'IsInArrearsKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishment_Employees'	            , N'CountryCode,StateCode'										, N'dbo'		        , N'States'												, N'CountryCode,StateCode')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishment_Employees'	            , N'SupportsOthersKey'											, N'DataMart'	        , N'GarnishmentsSupportsOthersDim'						, N'SupportsOthersKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishment_Employees'	            , N'PayUtcDate,GarnishmentId'									, N'dbo'		        , N'PayGarnishments'									, N'PayUtcDate,GarnishmentId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishment_Payees'		            , N'PayUtcDate,GarnishmentId'									, N'dbo'		        , N'PayGarnishments'									, N'PayUtcDate,GarnishmentId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishmentActions'		            , N'ActionTypeKey'										        , N'DataMart'	        , N'GarnishmentActionTypeDim'							, N'GarnishmentActionTypeKey'		)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishmentActions'		            , N'PayUtcDate,GarnishmentId'							        , N'dbo'		        , N'PayGarnishments'									, N'PayUtcDate,GarnishmentId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishmentExceptions'	            , N'GarnishmentExceptionKey'									, N'DataMart'	        , N'GarnishmentExceptionDim'							, N'GarnishmentExceptionKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishmentExceptions'	            , N'PayUtcDate,GarnishmentId'									, N'dbo'		        , N'PayGarnishments'									, N'PayUtcDate,GarnishmentId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishmentLiabilities'	            , N'PayUtcDate,GarnishmentId'							        , N'dbo'		        , N'PayGarnishments'									, N'PayUtcDate,GarnishmentId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishmentLiabilities'	            , N'GarnishmentLiabilityId,TenantId'					        , N'dbo'		        , N'GarnishmentLiabilities'								, N'GarnishmentLiabilityId,TenantId'	)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishmentLiabilities'	            , N'PayUtcDate,GarnishmentId,ActionId'					        , N'dbo'		        , N'PayGarnishmentActions'								, N'PayUtcDate,GarnishmentId,ActionId'	)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishments'			            , N'GarnishmentActionReasonKey'							        , N'DataMart'	        , N'GarnishmentActionReasonDim'							, N'GarnishmentActionReasonKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishments'			            , N'CheckAddModeKey'											, N'DataMart'	        , N'CheckAddModeDim'									, N'checkAddModeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishments'			            , N'GarnishmentPayableStatusKey'								, N'DataMart'	        , N'GarnishmentPayableStatusDim'						, N'GarnishmentPayableStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishments'			            , N'GarnishmentPaymentTypeKey'									, N'DataMart'	        , N'GarnishmentPaymentTypeDim'							, N'GarnishmentPaymentTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishments'			            , N'GarnishmentStatusKey'										, N'DataMart'	        , N'GarnishmentStatusDim'								, N'GarnishmentStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishments'			            , N'GarnishmentTypeKey'											, N'DataMart'	        , N'GarnishmentTypeDim'									, N'GarnishmentTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishments'			            , N'TenantId,CompanyId'											, N'dbo'		        , N'Companies'											, N'CompanyId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishments'			            , N'TenantId,LegalEntityCompanyId'								, N'dbo'		        , N'Companies'											, N'CompanyId,TenantId')
--		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishments'			            , N'PayId'														, N'dbo'		        , N'Pays'												, N'PayId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishments'			            , N'TenantId,PayrollId'											, N'dbo'		        , N'PayrollUnits'										, N'PayrollId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishments'			            , N'TenantId,PayrollInstanceId'									, N'dbo'		        , N'PayrollInstances'									, N'PayrollInstanceId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayGarnishments'			            , N'GarnishmentLiabilityId,TenantId'							, N'dbo'		        , N'GarnishmentLiabilities'								, N'GarnishmentLiabilityId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayrollInstances'			            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayrollInstances'			            , N'PayrollTypeKey'										        , N'DataMart'	        , N'PayrollTypeDim'										, N'PayrollTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayrollPayments'		                , N'Status'												        , N'DataMart'	        , N'PayrollPaymentStatusDim'							, N'PayrollPaymentStatusKey'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayrollPayments'			            , N'PaymentType'										        , N'DataMart'	        , N'PayrollPaymentTypeDim'								, N'PayrollPaymentTypeKey'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayrollPayments'			            , N'UsgBankAccountId'									        , N'dbo'		        , N'UsgBankAccounts'									, N'BankAccountId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayrollUnits'				            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'PayrollUnits'				            , N'TenantId,LegalEntityCompanyId'								, N'dbo'		        , N'Companies'											, N'CompanyId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Pays'						            , N'ExceptionType'												, N'DataMart'	        , N'PayExceptionTypeDim'								, N'PayExceptionTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Pays'						            , N'ProcessingStatus'											, N'DataMart'	        , N'PayProcessingStatusDim'								, N'PayProcessingStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Pays'						            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Pays'						            , N'TenantId,CompanyId'											, N'dbo'		        , N'Companies'											, N'CompanyId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Pays'						            , N'NetPayLiabilityId'											, N'dbo'		        , N'Liabilities'										, N'LiabilityId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Pays'						            , N'TenantId,PayrollId'											, N'dbo'		        , N'PayrollUnits'										, N'PayrollId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'Pays'						            , N'TenantId,PayrollInstanceId'									, N'dbo'		        , N'PayrollInstances'									, N'PayrollInstanceId,TenantId')
--		,(N'PaymentReporting'   ,N'dbo'		        , N'PayTaxes'					            , N'PayId'														, N'dbo'		        , N'Pays'												, N'PayId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'ReportRequests'				            , N'TenantId'											        , N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'ReportRequests'				            , N'Status'											        	, N'DataMart'	        , N'ReportRequestStatusDim'								, N'ReportRequestStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'ReportParameters'			            , N'ReportRequestId'									        , N'dbo'		        , N'ReportRequests'										, N'ReportRequestId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'ReportFileInformation'		            , N'ReportRequestId'									        , N'dbo'		        , N'ReportRequests'										, N'ReportRequestId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'ReportStatistics'			            , N'ReportRequestId'									        , N'dbo'		        , N'ReportRequests'										, N'ReportRequestId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'ReportObjectStoreInfo'		            , N'ReportRequestId'									        , N'dbo'		        , N'ReportRequests'										, N'ReportRequestId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAgency_Audit'			            , N'TaxAgencyId'									 			, N'dbo'		        , N'TaxAgency'											, N'TaxAgencyId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAgencyTransactions'		            , N'TaxAgencyId'												, N'dbo'		        , N'TaxAgency'											, N'TaxAgencyId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAgencyTransactions'		            , N'TaxAgencyTransactionStatusKey'								, N'DataMart'	        , N'TaxAgencyTransactionStatusDim'						, N'TaxAgencyTransactionStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAgencyTransactions'		            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAgencyTransactions'		            , N'TenantId,LegalEntityCompanyId'								, N'dbo'		        , N'Companies'											, N'CompanyId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAgencyTransactions'		            , N'PaymentLiabilityId'											, N'dbo'		        , N'Liabilities'										, N'LiabilityId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAgencyTransactions'		            , N'PaymentVoidLiabilityId'										, N'dbo'		        , N'Liabilities'										, N'LiabilityId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAgencyTransactions'		            , N'PaymentType'												, N'DataMart'	        , N'TaxPaymentTypeDim'									, N'TaxPaymentTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAmounts'					            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAmounts'					            , N'TaxPayrollGUID,UTETaxDataSourceTableSetKey,TenantId'		, N'dbo'		        , N'TaxPayrolls'										, N'TaxPayrollGUID,UTETaxDataSourceTableSetKey,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAmounts'					            , N'UTETaxDataSourceTableSetKey'								, N'DataMart'	        , N'UTETaxDataSourceTableSetDim'						, N'UTETaxDataSourceTableSetKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAmounts'					            , N'TaxId'                      								, N'dbo'	            , N'TaxCodes'                     						, N'TaxId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAmountsUltiTaxCodes'		            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAmountsUltiTaxCodes'		            , N'TaxPayrollGUID,UTETaxDataSourceTableSetKey,TaxId,TenantId'	, N'dbo'		        , N'TaxAmounts'											, N'TaxPayrollGUID,UTETaxDataSourceTableSetKey,TaxId, TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxAmountsUltiTaxCodes'		            , N'UTETaxDataSourceTableSetKey'								, N'DataMart'	        , N'UTETaxDataSourceTableSetDim'						, N'UTETaxDataSourceTableSetKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxCodes'					            , N'ActiveStatus'												, N'DataMart'	        , N'TaxCodeActiveStatus'								, N'TaxCodeActiveStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxCodes'					            , N'TaxAgencyId'												, N'dbo'		        , N'TaxAgency'											, N'TaxAgencyId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxLiabilities'				            , N'LiabilityId'										        , N'dbo'		        , N'Liabilities'										, N'LiabilityId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxLiabilities'				            , N'TenantId,LegalEntityCompanyId'						        , N'dbo'		        , N'Companies'											, N'CompanyId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxLiabilities'				            , N'CollectedFromTenantId,CollectedFromCompanyId'		        , N'dbo'		        , N'Companies'											, N'CompanyId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxLiabilities'				            , N'CollectionId,CollectedFromTenantId'					        , N'dbo'		        , N'LiabilityCollections'								, N'CollectionId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxLiabilities'				            , N'PayrollId,TenantId'									        , N'dbo'		        , N'PayrollUnits'										, N'PayrollId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxLiabilities'				            , N'CollectedFromPayrollId,CollectedFromTenantId'		        , N'dbo'		        , N'PayrollUnits'										, N'PayrollId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxLiabilities'				            , N'TaxLiabilityOriginTypeKey'							        , N'DataMart'	        , N'TaxLiabilityOriginTypeDim'							, N'TaxLiabilityOriginTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxPaymentCredits'			            , N'CreditEffectOnLiabilityKey'									, N'DataMart'	        , N'CreditEffectOnLiabilityDim'							, N'CreditEffectOnLiabilityKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxPaymentCredits'			            , N'TaxPaymentCreditStatusKey'									, N'DataMart'	        , N'TaxPaymentCreditStatusDim'							, N'TaxPaymentCreditStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxPaymentCredits'			            , N'LiabilityId'												, N'dbo'		        , N'Liabilities'										, N'LiabilityId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxPaymentCredits'			            , N'TaxCreditId'										        , N'dbo'		        , N'TaxAgencyTransactions'								, N'TransactionGUID')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxPaymentCredits'			            , N'TaxPaymentId'										        , N'dbo'		        , N'TaxAgencyTransactions'								, N'TransactionGUID')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxPaymentCredits'			            , N'ReducedQEAdjLiabilityPaymentId'						        , N'dbo'		        , N'TaxAgencyTransactions'								, N'TransactionGUID')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxPayrolls'				            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxPayrolls'				            , N'LiabilityId'												, N'dbo'		        , N'Liabilities'										, N'LiabilityId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxPayrolls'				            , N'TenantId,PayrollId'											, N'dbo'		        , N'PayrollUnits'										, N'PayrollId,TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TaxPayrolls'				            , N'UTETaxDataSourceTableSetKey'								, N'DataMart'	        , N'UTETaxDataSourceTableSetDim'						, N'UTETaxDataSourceTableSetKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TenantProduct'				            , N'ActivationStatus'											, N'DataMart'	        , N'ProductActivationStatus'							, N'ProductActivationStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TenantProduct'				            , N'ProductCodeKey'												, N'DataMart'	        , N'ProductCodeDim'										, N'ProductCodeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TenantProduct'				            , N'Status'														, N'DataMart'	        , N'ProductStatus'										, N'ProductStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TenantProduct'				            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TenantStatus'				            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId')
		,(N'PaymentReporting'   ,N'dbo'		        , N'TenantStatus'				            , N'TenantStatusCode'											, N'DataMart'	        , N'TenantStatusDim'									, N'TenantStatusCode')
		,(N'PaymentReporting'   ,N'dbo'		        , N'UltiProTaxCodeMapping'		            , N'ProcessingFrequency'								        , N'DataMart'	        , N'TaxCodeProcessingFrequencyDim'						, N'TaxCodeProcessingFrequencyKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'UsgBankAccounts'			            , N'AccountPurpose'												, N'DataMart'	        , N'BankAccountPurposeDim'								, N'BankAccountPurposeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'UsgBankAccounts'			            , N'BankAccountType'											, N'DataMart'	        , N'BankAccountTypeDim'									, N'BankAccountTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'UsgBankAccounts'			            , N'Status'														, N'DataMart'	        , N'BankAccountStatusDim'								, N'BankAccountStatusKey')
--		,(N'PaymentReporting'   ,N'dbo'		        , N'PayActions'					            , N'PayId'												        , N'dbo'		        , N'Pays'												, N'PayId'			)
--		,(N'PaymentReporting'   ,N'dbo'		        , N'PayLiabilities'				            , N'PayId'												        , N'dbo'		        , N'Pays'												, N'PayId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'YEProcessing'				            , N'YEProcessingStatusKey'										, N'DataMart'	        , N'YEProcessingStatusDim'								, N'YEProcessingStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'YEProcessing'				            , N'TenantId'													, N'dbo'		        , N'Tenants'											, N'TenantId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'YEProcessingFiles'			            , N'YEProcessingId'												, N'dbo'		        , N'YEProcessing'										, N'YEProcessingId'			)
		,(N'PaymentReporting'   ,N'dbo'		        , N'YEProcessingFiles'			            , N'InboundFileTypeKey'											, N'DataMart'	        , N'InboundFileTypeDim'									, N'InboundFileTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'YEProcessingFiles'			            , N'AgencyLocalityTypeKey'										, N'DataMart'	        , N'AgencyLocalityTypeDim'								, N'AgencyLocalityTypeKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'YEProcessingFiles'			            , N'YEFileStatusKey'											, N'DataMart'	        , N'YEFileStatusDim'									, N'YEFileStatusKey')
		,(N'PaymentReporting'   ,N'dbo'		        , N'YEProcessingFiles'			            , N'Agency'														, N'dbo'		        , N'TaxAgency'											, N'TaxAgencyCode')
		,(N'PaymentReporting'   ,N'dbo'		        , N'YEProcessingFiles'			            , N'YEIngestionTypeKey'											, N'DataMart'	        , N'YEIngestionTypeDim'									, N'YEIngestionTypeKey')
--      ([ParentSchemaName]     , [ParentTableName]                         , [ParentColumnList]                                            , [ReferencedSchemaName], [ReferencedTableName]                                 , [ReferencedColumnList]) 
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_InsertData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_InsertData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('34e5f9d4-4400-5c04-ab0f-bc054ae6a571' AS UNIQUEIDENTIFIER), 'DAE9752FD66DD8001440BF2DB284B94BF4625F66FC67E9CC1400389AB78472EA', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_InsertData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_InsertData.sql", ID: {34e5f9d4-4400-5c04-ab0f-bc054ae6a571} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('963da1c2-1ace-515c-af34-e9fa568fe906' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F8774B7AEB1D8043A376ED6D5119149CCE7B8F0D588041C75D1C3C0234235770')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_95_ForeignKeys.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_95_ForeignKeys.sql", ID: {963da1c2-1ace-515c-af34-e9fa568fe906} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_95_ForeignKeys.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_95_ForeignKeys]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_95_ForeignKeys];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE     PROCEDURE [DOI].[spRefreshMetadata_User_95_ForeignKeys]

AS

EXEC DOI.spRefreshMetadata_User_ForeignKeys_InsertData
EXEC DOI.spRefreshMetadata_User_ForeignKeys_UpdateData

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_95_ForeignKeys.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_95_ForeignKeys.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('963da1c2-1ace-515c-af34-e9fa568fe906' AS UNIQUEIDENTIFIER), 'F8774B7AEB1D8043A376ED6D5119149CCE7B8F0D588041C75D1C3C0234235770', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_95_ForeignKeys.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_95_ForeignKeys.sql", ID: {963da1c2-1ace-515c-af34-e9fa568fe906} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7493ff4d-f448-5afe-a538-50e542233287' AS UNIQUEIDENTIFIER) AND [script_checksum] = '724B6AA5F36B012239BABF79C67DC7603A090437A6DA66C71DBF175B45EF1C96')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_CreateTables.sql", ID: {7493ff4d-f448-5afe-a538-50e542233287} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_Constraints_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Constraints_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_Constraints_CreateTables]
AS

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'CheckConstraints',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS DOI.CheckConstraints


CREATE TABLE DOI.CheckConstraints(
    DatabaseName                NVARCHAR(128) NOT NULL,
	SchemaName					NVARCHAR(128) NOT NULL,
	TableName					NVARCHAR(128) NOT NULL,
	ColumnName					NVARCHAR(128) NULL,
	CheckDefinition				NVARCHAR(MAX) NOT NULL,
	IsDisabled					BIT NOT NULL,
	CheckConstraintName			NVARCHAR(128) NOT NULL
	CONSTRAINT PK_CheckConstraints
		PRIMARY KEY NONCLUSTERED(DatabaseName, SchemaName, TableName, CheckConstraintName),
    CONSTRAINT FK_CheckConstraints_Tables
        FOREIGN KEY (DatabaseName, SchemaName, TableName)
            REFERENCES DOI.Tables(DatabaseName, SchemaName, TableName))
    WITH (MEMORY_OPTIMIZED = ON)

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL


DROP TABLE IF EXISTS DOI.DefaultConstraints

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'DefaultConstraints',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL


--default constraints
CREATE TABLE DOI.DefaultConstraints(
    DatabaseName                NVARCHAR(128) NOT NULL,
	SchemaName					NVARCHAR(128) NOT NULL,
	TableName					NVARCHAR(128) NOT NULL,
	ColumnName					NVARCHAR(128) NOT NULL,
	DefaultDefinition			NVARCHAR(MAX) NOT NULL,
	DefaultConstraintName       NVARCHAR(128) NULL
	CONSTRAINT PK_DefaultConstraints
		PRIMARY KEY NONCLUSTERED(DatabaseName, SchemaName, TableName, ColumnName),
    CONSTRAINT FK_DefaultConstraints_Tables
        FOREIGN KEY (DatabaseName, SchemaName, TableName)
            REFERENCES DOI.Tables(DatabaseName, SchemaName, TableName))
    WITH (MEMORY_OPTIMIZED = ON)

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('7493ff4d-f448-5afe-a538-50e542233287' AS UNIQUEIDENTIFIER), '724B6AA5F36B012239BABF79C67DC7603A090437A6DA66C71DBF175B45EF1C96', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Constraints_CreateTables.sql", ID: {7493ff4d-f448-5afe-a538-50e542233287} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b3b9dfd9-c436-5e54-b5d1-b3dc0e603b1b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '54E555D22C97246BCAE40BEA2AFB5CC35AA8D8B7DA5DE05C178DE41A95199802')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_CreateTables.sql", ID: {b3b9dfd9-c436-5e54-b5d1-b3dc0e603b1b} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_DOISettings_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_DOISettings_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_DOISettings_CreateTables]
AS

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'DOISettings',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS DOI.DOISettings

CREATE TABLE DOI.DOISettings(
		SettingName SYSNAME 
			CONSTRAINT PK_DOISettings PRIMARY KEY NONCLUSTERED,
		SettingValue VARCHAR(50))
        WITH (MEMORY_OPTIMIZED = ON)

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('b3b9dfd9-c436-5e54-b5d1-b3dc0e603b1b' AS UNIQUEIDENTIFIER), '54E555D22C97246BCAE40BEA2AFB5CC35AA8D8B7DA5DE05C178DE41A95199802', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_DOISettings_CreateTables.sql", ID: {b3b9dfd9-c436-5e54-b5d1-b3dc0e603b1b} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2e7ba8c9-1be4-5af0-b1c9-77b2fd2cecb6' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6490AA396B4CD90621B3AB5387F44374A80DD7BAEFBD89663F3F207048185A96')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_CreateTables.sql", ID: {2e7ba8c9-1be4-5af0-b1c9-77b2fd2cecb6} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_ForeignKeys_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_ForeignKeys_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_ForeignKeys_CreateTables]
AS

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'ForeignKeys',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS DOI.ForeignKeys

CREATE TABLE [DOI].[ForeignKeys](
    [DatabaseName] SYSNAME,
	[ParentSchemaName] SYSNAME,
	[ParentTableName] SYSNAME,
	[ParentColumnList_Desired] SYSNAME,
	[ReferencedSchemaName] SYSNAME,
	[ReferencedTableName] SYSNAME,
	[ReferencedColumnList_Desired] SYSNAME,
	[ParentColumnList_Actual] [VARCHAR](128) NULL,
   	[ReferencedColumnList_Actual] [VARCHAR](128) NULL,
    [DeploymentTime] VARCHAR(10) NULL,
        CONSTRAINT [PK_ForeignKeys] 
            PRIMARY KEY NONCLUSTERED (	DatabaseName, [ParentSchemaName] ASC,[ParentTableName] ASC,[ParentColumnList_Desired] ASC,[ReferencedSchemaName] ASC,[ReferencedTableName] ASC,[ReferencedColumnList_Desired] ASC),
        CONSTRAINT FK_ForeignKeys_ParentTables
            FOREIGN KEY (DatabaseName, ParentSchemaName, ParentTableName)
                REFERENCES DOI.Tables(DatabaseName, SchemaName, TableName),
        CONSTRAINT FK_ForeignKeys_ReferencedTables
            FOREIGN KEY (DatabaseName, ReferencedSchemaName, ReferencedTableName)
                REFERENCES DOI.Tables(DatabaseName, SchemaName, TableName)
)

WITH (MEMORY_OPTIMIZED = ON)

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('2e7ba8c9-1be4-5af0-b1c9-77b2fd2cecb6' AS UNIQUEIDENTIFIER), '6490AA396B4CD90621B3AB5387F44374A80DD7BAEFBD89663F3F207048185A96', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_ForeignKeys_CreateTables.sql", ID: {2e7ba8c9-1be4-5af0-b1c9-77b2fd2cecb6} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('742a5e48-0b49-5044-87ae-b381192f20bf' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2D67E80D5F9DC39818A328B003381E59871DAE910B17198B8A3FC29DAD6330DF')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_CreateTables.sql", ID: {742a5e48-0b49-5044-87ae-b381192f20bf} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexColumns_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexColumns_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_IndexColumns_CreateTables]

AS


DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'IndexColumns',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS DOI.IndexColumns


CREATE TABLE DOI.IndexColumns (
    DatabaseName SYSNAME,
    SchemaName SYSNAME,
    TableName SYSNAME,
    IndexName SYSNAME,
    ColumnName SYSNAME,
    IsKeyColumn BIT NOT NULL,
    KeyColumnPosition SMALLINT NULL,
    IsIncludedColumn BIT NOT NULL,
    IncludedColumnPosition SMALLINT NULL,
    IsFixedSize BIT NOT NULL
        CONSTRAINT Def_IndexColumns_IsFixedSize
            DEFAULT 0,
    ColumnSize DECIMAL(10,2) NOT NULL
        CONSTRAINT Def_IndexColumns_ColumnSize
            DEFAULT 0

    CONSTRAINT PK_IndexColumns
        PRIMARY KEY NONCLUSTERED (DatabaseName, SchemaName, TableName, IndexName, ColumnName),

    CONSTRAINT FK_IndexColumns_Tables
        FOREIGN KEY (DatabaseName, SchemaName, TableName)
            REFERENCES DOI.Tables(DatabaseName, SchemaName, TableName)
    )

    WITH (MEMORY_OPTIMIZED = ON)


EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('742a5e48-0b49-5044-87ae-b381192f20bf' AS UNIQUEIDENTIFIER), '2D67E80D5F9DC39818A328B003381E59871DAE910B17198B8A3FC29DAD6330DF', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexColumns_CreateTables.sql", ID: {742a5e48-0b49-5044-87ae-b381192f20bf} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('561ffa9f-e8db-5ff4-a0ec-31f6b644c462' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D6559665166510007B85F6B5FF248BB63A47CA6B6F7E2EC6CA85AB94B6C7F591')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_CreateTables.sql", ID: {561ffa9f-e8db-5ff4-a0ec-31f6b644c462} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexesColumnStore_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexesColumnStore_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_IndexesColumnStore_CreateTables]

AS
--EXEC DOI.spForeignKeysDrop 
--    @ForMetadataTablesOnly = 1,
--    @ReferencedSchemaName = 'DOI',
--	@ReferencedTableName	= 'IndexesColumnStore'
--GO

    DECLARE @DropSQL VARCHAR(MAX) = '',
            @RecreateSQL VARCHAR(MAX) = ''

    EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
        @SchemaName = 'DOI',
        @TableName = 'IndexesColumnStore',
        @DropSQL = @DropSQL OUTPUT,
        @RecreateSQL = @RecreateSQL OUTPUT

    EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

    IF OBJECT_ID('DOI.FK_IndexColumns_Tables', 'F') IS NOT NULL
    BEGIN
        ALTER TABLE DOI.IndexColumnStorePartitions DROP CONSTRAINT FK_IndexColumnStorePartitions_IndexesColumnStore
    END

    DROP TABLE IF EXISTS DOI.IndexesColumnStore


	CREATE TABLE DOI.IndexesColumnStore (
        DatabaseName			                                                NVARCHAR(128)   NOT NULL,
		SchemaName				                                                NVARCHAR(128)   NOT NULL,
		TableName				                                                NVARCHAR(128)   NOT NULL,
		IndexName				                                                NVARCHAR(128)   NOT NULL,
        IsIndexMissingFromSQLServer                                             BIT NOT NULL
            CONSTRAINT Def_IndexesColumnStore_IsIndexMissingFromSQLServer
				DEFAULT(0),
		IsClustered_Desired				                                        BIT             NOT NULL,
		IsClustered_Actual				                                        BIT             NULL,
        ColumnList_Desired                                                      NVARCHAR(MAX)   NULL,
        ColumnList_Actual                                                       NVARCHAR(MAX)   NULL,
		IsFiltered_Desired				                                        BIT             NOT NULL,
		IsFiltered_Actual				                                        BIT             NULL,
		FilterPredicate_Desired			                                        VARCHAR(MAX)    NULL,
		FilterPredicate_Actual			                                        VARCHAR(MAX)    NULL,
		OptionDataCompression_Desired	                                        VARCHAR(30)     NOT NULL --solves collation conflict with sys.partitions column.
			CONSTRAINT Chk_IndexesColumnStore_OptionDataCompression
				CHECK (OptionDataCompression_Desired IN ('COLUMNSTORE', 'COLUMNSTORE_ARCHIVE'))
			CONSTRAINT Def_IndexesColumnStore_OptionDataCompression
				DEFAULT ('COLUMNSTORE'),
		OptionDataCompression_Actual	                                        VARCHAR(30)     NULL, --solves collation conflict with sys.partitions column.
		OptionDataCompressionDelay_Desired	                                    INT             NOT NULL,
		OptionDataCompressionDelay_Actual	                                    INT             NULL,
		Storage_Desired				                                            NVARCHAR(128)   NOT NULL,
		Storage_Actual				                                            NVARCHAR(128)   NULL,
        StorageType_Desired                                                     NVARCHAR(120)   NULL
			CONSTRAINT Def_IndexesColumnStore_StorageType_Desired
				CHECK(StorageType_Desired IN ('ROWS_FILEGROUP', 'PARTITION_SCHEME')),
        StorageType_Actual                                                      NVARCHAR(120)   NULL
			CONSTRAINT Def_IndexesColumnStore_StorageType_Actual
				CHECK(StorageType_Actual IN ('ROWS_FILEGROUP', 'PARTITION_SCHEME')),
        PartitionFunction_Desired                                               NVARCHAR(128)   NULL,
        PartitionFunction_Actual                                                NVARCHAR(128)   NULL,
		PartitionColumn_Desired				                                    NVARCHAR(128)   NULL,
		PartitionColumn_Actual				                                    NVARCHAR(128)   NULL,
        AllColsInTableSize_Estimated                                            INT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_AllColsInTableSize_Estimated
                DEFAULT (0),
        NumFixedCols_Estimated                                                  SMALLINT        NOT NULL
            CONSTRAINT Def_IndexesColumnStore_NumFixedCols_Estimated
                DEFAULT (0),
        NumVarCols_Estimated                                                    SMALLINT        NOT NULL
            CONSTRAINT Def_IndexesColumnStore_NumVarCols_Estimated
                DEFAULT (0),
        NumCols_Estimated                                                       SMALLINT        NOT NULL
            CONSTRAINT Def_IndexesColumnStore_NumCols_Estimated
                DEFAULT (0),
        FixedColsSize_Estimated                                                 INT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_FixedColsSize_Estimated
                DEFAULT (0),
        VarColsSize_Estimated                                                   INT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_VarColsSize_Estimated
                DEFAULT (0),
        ColsSize_Estimated                                                      INT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_ColsSize_Estimated
                DEFAULT (0),
        NumRows_Actual                                                          BIGINT          NOT NULL
            CONSTRAINT Def_IndexesColumnStore_NumRows_Actual
                DEFAULT (0),
        IndexSizeMB_Actual                                                      DECIMAL(10,2)   NOT NULL
            CONSTRAINT Def_IndexesColumnStore_IndexSizeMB_Actual
                DEFAULT (0),
        DriveLetter                                                             CHAR(1)         NULL,
        IsIndexLarge                                                            BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_IsIndexLarge
                DEFAULT (0),
        IndexMeetsMinimumSize                                                   BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_IndexMeetsMinimumSize
                DEFAULT (0),
        Fragmentation                                                           FLOAT           NOT NULL
            CONSTRAINT Def_IndexesColumnStore_Fragmentation
                DEFAULT (0),
        FragmentationType                                                       VARCHAR(5)      NOT NULL
            CONSTRAINT Chk_IndexesColumnStore_FragmentationType
                CHECK (FragmentationType IN ('None', 'Light', 'Heavy'))
            CONSTRAINT Def_IndexesColumnStore_FragmentationType
                DEFAULT ('None'),
        AreDropRecreateOptionsChanging                                          BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_AreDropRecreateOptionsChanging
                DEFAULT (0),
        AreRebuildOptionsChanging                                               BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_AreRebuildOptionsChanging
                DEFAULT (0),
        AreRebuildOnlyOptionsChanging                                           BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_AreRebuildOnlyOptionsChanging
                DEFAULT (0),
        AreReorgOptionsChanging                                                 BIT             NOT NULL
            CONSTRAINT Chk_IndexesColumnStore_AreReorgOptionsChanging
                CHECK (AreReorgOptionsChanging = 0)
            CONSTRAINT Def_IndexesColumnStore_AreReorgOptionsChanging
                DEFAULT (0),
        AreSetOptionsChanging                                                   BIT             NOT NULL
            CONSTRAINT Chk_IndexesColumnStore_AreSetOptionsChanging
                CHECK (AreSetOptionsChanging = 0)
            CONSTRAINT Def_IndexesColumnStore_AreSetOptionsChanging
                DEFAULT (0),
        IsColumnListChanging                                                    BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_IsColumnListChanging
                DEFAULT (0),
        IsFilterChanging                                                        BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_IsFilterChanging
                DEFAULT (0),
        IsClusteredChanging                                                     BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_IsClusteredChanging
                DEFAULT (0),
        IsPartitioningChanging                                                  BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_IsPartitioningChanging
                DEFAULT (0),
        IsDataCompressionChanging                                               BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_IsDataCompressionChanging
                DEFAULT (0),
        IsDataCompressionDelayChanging                                          BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_IsDataCompressionDelayChanging
                DEFAULT (0),
        IsStorageChanging                                                       BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_IsStorageChanging
                DEFAULT (0),
        NumPages_Actual                                                         INT             NULL
            CONSTRAINT Def_IndexesColumnStore_NumPages_Actual
                DEFAULT (0),
        TotalPartitionsInIndex                                                  INT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_TotalPartitionsInIndex
                DEFAULT (0),
        NeedsPartitionLevelOperations                                           BIT             NOT NULL
            CONSTRAINT Def_IndexesColumnStore_NeedsPartitionLevelOperations
                DEFAULT (0),
                
		CONSTRAINT PK_IndexesColumnStore
			PRIMARY KEY NONCLUSTERED (DatabaseName, SchemaName, TableName, IndexName),
		CONSTRAINT Chk_IndexesColumnStore_Filter
			CHECK ((IsFiltered_Desired = 1 AND FilterPredicate_Desired IS NOT NULL AND IsClustered_Desired = 0)
						OR (IsFiltered_Desired = 0 AND FilterPredicate_Desired IS NULL)),
        CONSTRAINT FK_IndexesColumnStore_Tables
            FOREIGN KEY (DatabaseName, SchemaName, TableName)
                REFERENCES DOI.Tables(DatabaseName, SchemaName, TableName))

    WITH (MEMORY_OPTIMIZED = ON)

    IF OBJECT_ID('DOI.IndexColumnStorePartitions', 'U') IS NOT NULL
        AND OBJECT_ID('DOI.FK_IndexColumnStorePartitions_IndexesColumnStore', 'F') IS NULL
    BEGIN
        ALTER TABLE [DOI].[IndexColumnStorePartitions] ADD 
            CONSTRAINT FK_IndexColumnStorePartitions_IndexesColumnStore
                FOREIGN KEY(DatabaseName, SchemaName, TableName, IndexName)
                    REFERENCES DOI.IndexesColumnStore(DatabaseName, SchemaName, TableName, IndexName)    
    END;    

    EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('561ffa9f-e8db-5ff4-a0ec-31f6b644c462' AS UNIQUEIDENTIFIER), 'D6559665166510007B85F6B5FF248BB63A47CA6B6F7E2EC6CA85AB94B6C7F591', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesColumnStore_CreateTables.sql", ID: {561ffa9f-e8db-5ff4-a0ec-31f6b644c462} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('14bba350-6e6e-5722-bfc7-139226c0202e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '32872464E6B5DF2E9AEB2092AF160BD32AD0C9CA365913BF095765219E945E2D')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_CreateTables.sql", ID: {14bba350-6e6e-5722-bfc7-139226c0202e} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexesRowStore_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexesRowStore_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_IndexesRowStore_CreateTables]

AS
    DECLARE @DropSQL VARCHAR(MAX) = '',
            @RecreateSQL VARCHAR(MAX) = ''

    EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
        @SchemaName = 'DOI',
        @TableName = 'IndexesRowStore',
        @DropSQL = @DropSQL OUTPUT,
        @RecreateSQL = @RecreateSQL OUTPUT

    EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

    ALTER TABLE DOI.IndexRowStorePartitions DROP CONSTRAINT FK_IndexRowStorePartitions_IndexesRowStore

    DROP TABLE IF EXISTS DOI.IndexesRowStore


	CREATE TABLE DOI.IndexesRowStore (
        DatabaseName				                                                NVARCHAR(128) NOT NULL,
		SchemaName					                                                NVARCHAR(128) NOT NULL,
		TableName					                                                NVARCHAR(128) NOT NULL,
		IndexName					                                                NVARCHAR(128) NOT NULL,
        IsIndexMissingFromSQLServer                                                 BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsIndexMissingFromSQLServer
				DEFAULT(0),
		IsUnique_Desired			                                                BIT NOT NULL,
		IsUnique_Actual				                                                BIT NULL,
		IsPrimaryKey_Desired		                                                BIT NOT NULL,
		IsPrimaryKey_Actual		                                                    BIT NULL,
		IsUniqueConstraint_Desired	                                                BIT NOT NULL
			CONSTRAINT Chk_IndexesRowStore_IsUniqueConstraint_Desired
				CHECK (IsUniqueConstraint_Desired = 0)
			CONSTRAINT Def_IndexesRowStore_IsUniqueConstraint_Desired
				DEFAULT(0),
		IsUniqueConstraint_Actual	                                                BIT NULL,
		IsClustered_Desired			                                                BIT NOT NULL,
		IsClustered_Actual			                                                BIT NULL,
		KeyColumnList_Desired		                                                NVARCHAR(MAX) NOT NULL,
		KeyColumnList_Actual		                                                NVARCHAR(MAX) NULL,
		IncludedColumnList_Desired	                                                NVARCHAR(MAX) NULL,
		IncludedColumnList_Actual	                                                NVARCHAR(MAX) NULL,
		IsFiltered_Desired			                                                BIT NOT NULL,
		IsFiltered_Actual			                                                BIT NULL,
		FilterPredicate_Desired		                                                VARCHAR(MAX) NULL,
/*			CONSTRAINT Chk_IndexesRowStore_FilterPredicate
				CHECK ((FilterPredicate IS NOT NULL AND FilterPredicate LIKE '|(%|[%|]%|)' ESCAPE '|')--must use parentheses around expression and square brackets around columnnames.
						OR (FilterPredicate IS NULL))*/ 
		FilterPredicate_Actual		                                                VARCHAR(MAX) NULL,
		Fillfactor_Desired				                                            TINYINT NOT NULL
			CONSTRAINT Chk_Indexes_FillFactor_Desired	
				CHECK (Fillfactor_Desired BETWEEN 0 AND 100)
			CONSTRAINT Def_Indexes_FillFactor_Desired	
				DEFAULT (90),
		Fillfactor_Actual				                                            TINYINT NULL,


		OptionPadIndex_Desired				                                        BIT NOT NULL
			CONSTRAINT Def_IndexesRowStore_OptionPadIndex_Desired
				DEFAULT(1),
		OptionPadIndex_Actual				                                        BIT NULL,
		OptionStatisticsNoRecompute_Desired                                         BIT NOT NULL
			CONSTRAINT Def_IndexesRowStore_OptionStatisticsNoRecompute_Desired
				DEFAULT(0),
		OptionStatisticsNoRecompute_Actual                                          BIT NULL,
		OptionStatisticsIncremental_Desired                                         BIT NOT NULL
			CONSTRAINT Def_IndexesRowStore_OptionStatisticsIncremental_Desired
				DEFAULT(0),
		OptionStatisticsIncremental_Actual                                          BIT NULL,
		OptionIgnoreDupKey_Desired			                                        BIT NOT NULL
			CONSTRAINT Def_IndexesRowStore_OptionIgnoreDupKey_Desired
				DEFAULT(0),
		OptionIgnoreDupKey_Actual			                                        BIT NULL,
		OptionResumable_Desired			                                            BIT NOT NULL
			CONSTRAINT Def_IndexesRowStore_OptionResumable_Desired
				DEFAULT(0),
		OptionResumable_Actual			                                            BIT NULL,
		OptionMaxDuration_Desired			                                        SMALLINT NOT NULL
			CONSTRAINT Def_IndexesRowStore_OptionMaxDuration_Desired
				DEFAULT(0),
		OptionMaxDuration_Actual			                                        SMALLINT NULL,
		OptionAllowRowLocks_Desired			                                        BIT NOT NULL
			CONSTRAINT Def_IndexesRowStore_OptionAllowRowLocks_Desired
				DEFAULT(1),
		OptionAllowRowLocks_Actual			                                        BIT NULL,
		OptionAllowPageLocks_Desired		                                        BIT NOT NULL
			CONSTRAINT Def_IndexesRowStore_OptionAllowPageLocks_Desired
				DEFAULT(1),
		OptionAllowPageLocks_Actual		                                            BIT NULL,
		OptionDataCompression_Desired		                                        NVARCHAR(60) NOT NULL
			CONSTRAINT Chk_IndexesRowStore_OptionDataCompression_Desired
				CHECK (OptionDataCompression_Desired IN ('NONE', 'ROW', 'PAGE'))
			CONSTRAINT Def_IndexesRowStore_OptionDataCompression_Desired
				DEFAULT('PAGE'),
		OptionDataCompression_Actual		                                        NVARCHAR(60) NULL,
		OptionDataCompressionDelay_Desired                                          BIT NOT NULL
			CONSTRAINT Chk_IndexesRowStore_OptionDataCompressionDelay_Desired
				CHECK (OptionDataCompressionDelay_Desired = 0)
			CONSTRAINT Def_IndexesRowStore_OptionDataCompressionDelay_Desired
				DEFAULT(0),
		OptionDataCompressionDelay_Actual		                                    BIT NOT NULL
			CONSTRAINT Chk_IndexesRowStore_OptionDataCompressionDelay_Actual
				CHECK (OptionDataCompressionDelay_Actual = 0)
			CONSTRAINT Def_IndexesRowStore_OptionDataCompressionDelay_Actual
				DEFAULT(0),
		Storage_Desired					                                            NVARCHAR(128) NOT NULL,
		Storage_Actual					                                            NVARCHAR(128) NULL,
        StorageType_Desired                                                         NVARCHAR(120) NULL
			CONSTRAINT Def_IndexesRowStore_StorageType_Desired
				CHECK(StorageType_Desired IN ('ROWS_FILEGROUP', 'PARTITION_SCHEME')),
        StorageType_Actual                                                          NVARCHAR(120) NULL
			CONSTRAINT Def_IndexesRowStore_StorageType_Actual
				CHECK(StorageType_Actual IN ('ROWS_FILEGROUP', 'PARTITION_SCHEME')),
        PartitionFunction_Desired                                                   NVARCHAR(128) NULL,
        PartitionFunction_Actual                                                    NVARCHAR(128) NULL,
		PartitionColumn_Desired				                                        NVARCHAR(128) NULL,
		PartitionColumn_Actual				                                        NVARCHAR(128) NULL,

        NumRows_Actual                                                              BIGINT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumRows_Actual
                DEFAULT (0),
        AllColsInTableSize_Estimated                                                INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_AllColsInTableSize_Estimated
                DEFAULT (0),
        NumFixedKeyCols_Estimated                                                   SMALLINT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumFixedKeyCols_Estimated
                DEFAULT (0),
        NumVarKeyCols_Estimated                                                     SMALLINT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumVarKeyCols_Estimated
                DEFAULT (0),
        NumKeyCols_Estimated                                                        SMALLINT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumKeyCols_Estimated
                DEFAULT (0),
        NumFixedInclCols_Estimated                                                  SMALLINT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumFixedInclCols_Estimated
                DEFAULT (0),
        NumVarInclCols_Estimated                                                    SMALLINT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumVarInclCols_Estimated
                DEFAULT (0),
        NumInclCols_Estimated                                                       SMALLINT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumInclCols_Estimated
                DEFAULT (0),
        NumFixedCols_Estimated                                                      SMALLINT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumFixedCols_Estimated
                DEFAULT (0),
        NumVarCols_Estimated                                                        SMALLINT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumVarCols_Estimated
                DEFAULT (0),
        NumCols_Estimated                                                           SMALLINT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumCols_Estimated
                DEFAULT (0),
        FixedKeyColsSize_Estimated                                                  INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_FixedKeyColsSize_Estimated
                DEFAULT (0),
        VarKeyColsSize_Estimated                                                    INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_VarKeyColsSize_Estimated
                DEFAULT (0),
        KeyColsSize_Estimated                                                       INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_KeyColsSize_Estimated
                DEFAULT (0),
        FixedInclColsSize_Estimated                                                 INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_FixedInclColsSize_Estimated
                DEFAULT (0),
        VarInclColsSize_Estimated                                                   INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_VarInclColsSize_Estimated
                DEFAULT (0),
        InclColsSize_Estimated                                                      INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_InclColsSize_Estimated
                DEFAULT (0),
        FixedColsSize_Estimated                                                     INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_FixedColsSize_Estimated
                DEFAULT (0),
        VarColsSize_Estimated                                                       INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_VarColsSize_Estimated
                DEFAULT (0),
        ColsSize_Estimated                                                          INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_ColsSize_Estimated
                DEFAULT (0),
        PKColsSize_Estimated                                                        INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_PKColsSize_Estimated
                DEFAULT (0),
        NullBitmap_Estimated                                                        INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NullBitmap_Estimated
                DEFAULT (0),
        Uniqueifier_Estimated                                                       TINYINT NOT NULL
            CONSTRAINT Def_IndexesRowStore_Uniqueifier_Estimated
                DEFAULT (0),
        TotalRowSize_Estimated                                                      INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_TotalRowSize_Estimated
                DEFAULT (0),
        NonClusteredIndexRowLocator_Estimated                                       INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NonClusteredIndexRowLocator_Estimated
                DEFAULT (0),
        NumRowsPerPage_Estimated                                                    INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumRowsPerPage_Estimated
                DEFAULT (0),
        NumFreeRowsPerPage_Estimated                                                INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumFreeRowsPerPage_Estimated
                DEFAULT (0),
        NumLeafPages_Estimated                                                      INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumLeafPages_Estimated
                DEFAULT (0),
        LeafSpaceUsed_Estimated                                                     DECIMAL(18,2) NOT NULL
            CONSTRAINT Def_IndexesRowStore_LeafSpaceUsed_Estimated
                DEFAULT (0),
        LeafSpaceUsedMB_Estimated                                                   DECIMAL(10,2) NOT NULL
            CONSTRAINT Def_IndexesRowStore_LeafSpaceUsedMB_Estimated
                DEFAULT (0),
        NumNonLeafLevelsInIndex_Estimated                                           TINYINT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumNonLeafLevelsInIndex_Estimated
                DEFAULT (0),
        NumIndexPages_Estimated                                                     INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumIndexPages_Estimated
                DEFAULT (0),
        IndexSizeMB_Estimated                                                       DECIMAL(10,2) NOT NULL
            CONSTRAINT Def_IndexesRowStore_IndexSizeMB_Estimated
                DEFAULT (0),
        IndexSizeMB_Actual                                                          DECIMAL(10,2) NOT NULL
            CONSTRAINT Def_IndexesRowStore_IndexSizeMB_Actual
                DEFAULT (0),
        DriveLetter                                                                 CHAR(1) NULL,
        IsIndexLarge                                                                BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsIndexLarge
                DEFAULT (0),
        IndexMeetsMinimumSize                                                       BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IndexMeetsMinimumSize
                DEFAULT (0),
        Fragmentation                                                               FLOAT NOT NULL
            CONSTRAINT Def_IndexesRowStore_Fragmentation
                DEFAULT (0),
        FragmentationType                                                           VARCHAR(5) NOT NULL
            CONSTRAINT Chk_IndexesRowStore_FragmentationType
                CHECK (FragmentationType IN ('None', 'Light', 'Heavy'))
            CONSTRAINT Def_IndexesRowStore_FragmentationType
                DEFAULT ('None'),
        AreDropRecreateOptionsChanging                                              BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_AreDropRecreateOptionsChanging
                DEFAULT (0),
        AreRebuildOptionsChanging                                                   BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_AreRebuildOptionsChanging
                DEFAULT (0),
        AreRebuildOnlyOptionsChanging                                               BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_AreRebuildOnlyOptionsChanging            
                DEFAULT (0),
        AreReorgOptionsChanging                                                     BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_AreReorgOptionsChanging
                DEFAULT (0),
        AreSetOptionsChanging                                                       BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_AreSetOptionsChanging
                DEFAULT (0),
        IsUniquenessChanging                                                        BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsUniquenessChanging
                DEFAULT (0),
        IsPrimaryKeyChanging                                                        BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsPrimaryKeyChanging
                DEFAULT (0),
        IsKeyColumnListChanging                                                     BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsKeyColumnListChanging
                DEFAULT (0),
        IsIncludedColumnListChanging                                                BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsIncludedColumnListChanging
                DEFAULT (0),
        IsFilterChanging                                                            BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsFilterChanging
                DEFAULT (0),
        IsClusteredChanging                                                         BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsClusteredChanging
                DEFAULT (0),
        IsPartitioningChanging                                                      BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsPartitioningChanging
                DEFAULT (0),
        IsPadIndexChanging                                                          BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsPadIndexChanging
                DEFAULT (0),
        IsFillfactorChanging                                                        BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsFillfactorChanging
                DEFAULT (0),
        IsIgnoreDupKeyChanging                                                      BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsIgnoreDupKeyChanging
                DEFAULT (0),
        IsStatisticsNoRecomputeChanging                                             BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsStatisticsNoRecomputeChanging
                DEFAULT (0),
        IsStatisticsIncrementalChanging                                             BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsStatisticsIncrementalChanging
                DEFAULT (0),
        IsAllowRowLocksChanging                                                     BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsAllowRowLocksChanging
                DEFAULT (0),
        IsAllowPageLocksChanging                                                    BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsAllowPageLocksChanging
                DEFAULT (0),
        IsDataCompressionChanging                                                   BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsDataCompressionChanging
                DEFAULT (0),
        IsDataCompressionDelayChanging                                              BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsDataCompressionDelayChanging
                DEFAULT (0),
        IsStorageChanging                                                           BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IsStorageChanging
                DEFAULT (0),
        IndexHasLOBColumns                                                          BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_IndexHasLOBColumns
                DEFAULT (0),
        NumPages_Actual                                                             INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NumPages_Actual
                DEFAULT (0),
        TotalPartitionsInIndex                                                      INT NOT NULL
            CONSTRAINT Def_IndexesRowStore_TotalPartitionsInIndex
                DEFAULT (0),
        NeedsPartitionLevelOperations                                               BIT NOT NULL
            CONSTRAINT Def_IndexesRowStore_NeedsPartitionLevelOperations
                DEFAULT (0),

		CONSTRAINT PK_IndexesRowStore
			PRIMARY KEY NONCLUSTERED (DatabaseName, SchemaName, TableName, IndexName),
		CONSTRAINT Chk_IndexesRowStore_Filter
			CHECK ((IsFiltered_Desired = 1 AND FilterPredicate_Desired IS NOT NULL AND IsPrimaryKey_Desired = 0 AND IsUniqueConstraint_Desired = 0 AND IsClustered_Desired = 0 AND OptionStatisticsIncremental_Desired = 0)
						OR (IsFiltered_Desired = 0 AND FilterPredicate_Desired IS NULL)),
		CONSTRAINT Chk_IndexesRowStore_PrimaryKeyIsUnique
			CHECK ((IsPrimaryKey_Desired = 1 AND IsUnique_Desired = 1)
						OR (IsPrimaryKey_Desired = 0)),
		CONSTRAINT Chk_IndexesRowStore_UniqueConstraintIsUnique
			CHECK ((IsUniqueConstraint_Desired = 1 AND IsUnique_Desired = 1)
						OR (IsUniqueConstraint_Desired = 0)),
		CONSTRAINT Chk_IndexesRowStore_PKvsUQ
			CHECK ((IsPrimaryKey_Desired = 1 AND IsUniqueConstraint_Desired = 0)
						OR (IsPrimaryKey_Desired = 0 AND IsUniqueConstraint_Desired = 1)
						OR (IsPrimaryKey_Desired = 0 AND IsUniqueConstraint_Desired = 0)),
		CONSTRAINT Chk_IndexesRowStore_IncludedColumnsNotAllowed
			CHECK ((IncludedColumnList_Desired IS NOT NULL AND (IsClustered_Desired = 0 AND IsPrimaryKey_Desired = 0 AND IsUniqueConstraint_Desired = 0))
						OR (IncludedColumnList_Desired IS NULL)),
        CONSTRAINT FK_IndexesRowStore_Tables
            FOREIGN KEY (DatabaseName, SchemaName, TableName)
                REFERENCES DOI.Tables(DatabaseName, SchemaName, TableName)

)

    WITH (MEMORY_OPTIMIZED = ON)


    ALTER TABLE [DOI].[IndexesRowStore] ADD INDEX IDX_IndexesRowStore_IndexName NONCLUSTERED ([IndexName])

    ALTER TABLE [DOI].[IndexRowStorePartitions] ADD 
        CONSTRAINT FK_IndexRowStorePartitions_IndexesRowStore
            FOREIGN KEY(DatabaseName, SchemaName, TableName, IndexName)
                REFERENCES DOI.IndexesRowStore(DatabaseName, SchemaName, TableName, IndexName)

    EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('14bba350-6e6e-5722-bfc7-139226c0202e' AS UNIQUEIDENTIFIER), '32872464E6B5DF2E9AEB2092AF160BD32AD0C9CA365913BF095765219E945E2D', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexesRowStore_CreateTables.sql", ID: {14bba350-6e6e-5722-bfc7-139226c0202e} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a4a8bbb3-20ac-5d74-bfa5-fe3e2877dc45' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2C62A684E3F7932013755C78ED27D07EB0E9E5726BBA711EA7F7818D6CC6E495')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_CreateTables.sql", ID: {a4a8bbb3-20ac-5d74-bfa5-fe3e2877dc45} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexPartitions_ColumnStore_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexPartitions_ColumnStore_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_IndexPartitions_ColumnStore_CreateTables]

AS

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'IndexColumnStorePartitions',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS DOI.IndexColumnStorePartitions

CREATE TABLE DOI.IndexColumnStorePartitions (
    DatabaseName                NVARCHAR(128) NOT NULL,
	SchemaName					NVARCHAR(128) NOT NULL,
	TableName					NVARCHAR(128) NOT NULL,
	IndexName					NVARCHAR(128) NOT NULL,
	PartitionNumber				SMALLINT NOT NULL,
	OptionDataCompression		NVARCHAR(60) NOT NULL --solves collation conflict with sys.partitions column.
		CONSTRAINT Chk_IndexColumnStorePartitions_OptionDataCompression
			CHECK (OptionDataCompression IN ('COLUMNSTORE', 'COLUMNSTORE_ARCHIVE'))
		CONSTRAINT Def_IndexColumnStorePartitions_OptionDataCompression
			DEFAULT('COLUMNSTORE'),

	CONSTRAINT PK_IndexColumnStorePartitions
		PRIMARY KEY NONCLUSTERED (SchemaName, TableName, IndexName, PartitionNumber),
    CONSTRAINT FK_IndexColumnStorePartitions_IndexesColumnStore
        FOREIGN KEY(DatabaseName, SchemaName, TableName, IndexName)
            REFERENCES DOI.IndexesColumnStore(DatabaseName, SchemaName, TableName, IndexName))

    WITH (MEMORY_OPTIMIZED = ON)

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('a4a8bbb3-20ac-5d74-bfa5-fe3e2877dc45' AS UNIQUEIDENTIFIER), '2C62A684E3F7932013755C78ED27D07EB0E9E5726BBA711EA7F7818D6CC6E495', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_ColumnStore_CreateTables.sql", ID: {a4a8bbb3-20ac-5d74-bfa5-fe3e2877dc45} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6dd3566e-cf9a-58a4-9ba1-ba1500e8e967' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A2355E816197C2ADE4DB6E141FCF899AD5A549F589967D0878D2067985E3E036')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_CreateTables.sql", ID: {6dd3566e-cf9a-58a4-9ba1-ba1500e8e967} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_IndexPartitions_RowStore_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_IndexPartitions_RowStore_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_IndexPartitions_RowStore_CreateTables]

AS

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'IndexRowStorePartitions',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL
DROP TABLE IF EXISTS DOI.IndexRowStorePartitions


CREATE TABLE DOI.IndexRowStorePartitions (
    DatabaseName                NVARCHAR(128) NOT NULL,
	SchemaName					NVARCHAR(128) NOT NULL,
	TableName					NVARCHAR(128) NOT NULL,
	IndexName					NVARCHAR(128) NOT NULL,
	PartitionNumber				SMALLINT NOT NULL,
	OptionResumable				BIT NOT NULL
		CONSTRAINT Def_IndexRowStorePartitions_OptionResumable
			DEFAULT(0),
	OptionMaxDuration			SMALLINT NOT NULL
		CONSTRAINT Def_IndexRowStorePartitions_OptionMaxDuration
			DEFAULT(0),
	OptionDataCompression		NVARCHAR(60) NOT NULL
		CONSTRAINT Chk_IndexRowStorePartitions_OptionDataCompression
			CHECK (OptionDataCompression IN ('NONE', 'ROW', 'PAGE'))
		CONSTRAINT Def_IndexRowStorePartitions_OptionDataCompression
			DEFAULT('PAGE'),
    NumRows                     BIGINT NOT NULL
		CONSTRAINT Def_IndexRowStorePartitions_NumRows
			DEFAULT(0),
    TotalPages                  BIGINT NOT NULL
		CONSTRAINT Def_IndexRowStorePartitions_TotalPages
			DEFAULT(0),
    PartitionType               VARCHAR(20) NOT NULL
        CONSTRAINT Chk_IndexRowStorePartitions_PartitionType
            CHECK (PartitionType = 'RowStore')
		CONSTRAINT Def_IndexRowStorePartitions_PartitionType
			DEFAULT('RowStore'),
    TotalIndexPartitionSizeInMB DECIMAL(10,2) NOT NULL
		CONSTRAINT Def_IndexRowStorePartitions_TotalIndexPartitionSizeInMB
			DEFAULT(0.00),
    Fragmentation               FLOAT NOT NULL
		CONSTRAINT Def_IndexRowStorePartitions_Fragmentation
			DEFAULT(0),
    DataFileName                NVARCHAR(260) NOT NULL
		CONSTRAINT Def_IndexRowStorePartitions_DataFileName
			DEFAULT(''),
    DriveLetter                 CHAR(1) NOT NULL
		CONSTRAINT Def_IndexRowStorePartitions_DriveLetter
			DEFAULT(''),
    PartitionUpdateType         VARCHAR(30) NOT NULL
		CONSTRAINT Def_IndexRowStorePartitions_PartitionUpdateType
			DEFAULT('None'),

	CONSTRAINT PK_IndexRowStorePartitions
		PRIMARY KEY NONCLUSTERED (DatabaseName, SchemaName, TableName, IndexName, PartitionNumber),
    CONSTRAINT FK_IndexRowStorePartitions_IndexesRowStore
        FOREIGN KEY(DatabaseName, SchemaName, TableName, IndexName)
            REFERENCES DOI.IndexesRowStore(DatabaseName, SchemaName, TableName, IndexName))

WITH (MEMORY_OPTIMIZED = ON)

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('6dd3566e-cf9a-58a4-9ba1-ba1500e8e967' AS UNIQUEIDENTIFIER), 'A2355E816197C2ADE4DB6E141FCF899AD5A549F589967D0878D2067985E3E036', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_IndexPartitions_RowStore_CreateTables.sql", ID: {6dd3566e-cf9a-58a4-9ba1-ba1500e8e967} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('92fd782d-88e0-56b7-a304-b85378dd262b' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E5577DD4C097BCC62EAFD25C0745A8FC18B0459F67E4675B6E64B04DB7D750EB')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_CreateTables.sql", ID: {92fd782d-88e0-56b7-a304-b85378dd262b} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_PartitionFunctions_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_PartitionFunctions_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO



CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_PartitionFunctions_CreateTables]

AS

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'PartitionFunctions',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS DOI.PartitionFunctions


CREATE TABLE DOI.PartitionFunctions(
    DatabaseName SYSNAME,
	PartitionFunctionName SYSNAME,
	PartitionFunctionDataType SYSNAME,
	BoundaryInterval VARCHAR(10) NOT NULL
		CONSTRAINT Chk_PartitionFunctions_BoundaryInterval
			CHECK (BoundaryInterval IN ('Yearly', 'Monthly')),
	NumOfFutureIntervals TINYINT NOT NULL,
	InitialDate DATE NOT NULL,
	UsesSlidingWindow BIT NOT NULL,
	SlidingWindowSize SMALLINT NULL,
	IsDeprecated BIT NOT NULL,
	PartitionSchemeName NVARCHAR(128) NULL,--AS ,
	NumOfCharsInSuffix TINYINT NULL,/*AS	,*/
	LastBoundaryDate DATE NULL, /*AS ,*/
	NumOfTotalPartitionFunctionIntervals SMALLINT NULL, /*AS */
	NumOfTotalPartitionSchemeIntervals SMALLINT NULL,
	MinValueOfDataType VARCHAR(20) NULL
	CONSTRAINT PK_PartitionFunctions
		PRIMARY KEY NONCLUSTERED (DatabaseName, PartitionFunctionName),
	CONSTRAINT Chk_PartitionFunctions_SlidingWindow
		CHECK ((UsesSlidingWindow = 1 AND SlidingWindowSize IS NOT NULL)
				OR (UsesSlidingWindow = 0 AND SlidingWindowSize IS NULL)))
    WITH (MEMORY_OPTIMIZED = ON)

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('92fd782d-88e0-56b7-a304-b85378dd262b' AS UNIQUEIDENTIFIER), 'E5577DD4C097BCC62EAFD25C0745A8FC18B0459F67E4675B6E64B04DB7D750EB', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_PartitionFunctions_CreateTables.sql", ID: {92fd782d-88e0-56b7-a304-b85378dd262b} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e5f763b3-cf0b-5e29-83ef-d5b108d63615' AS UNIQUEIDENTIFIER) AND [script_checksum] = '03ED5F1F50EAABDC853499AC342DEFD124FF396CFA97621E2137210976988125')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_CreateTables.sql", ID: {e5f763b3-cf0b-5e29-83ef-d5b108d63615} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_Statistics_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Statistics_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_Statistics_CreateTables]
AS

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'Statistics',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL

DROP TABLE IF EXISTS DOI.[Statistics]


CREATE TABLE DOI.[Statistics] (
    DatabaseName                                                NVARCHAR(128) NOT NULL,
    SchemaName                                                  NVARCHAR(128) NOT NULL,
    TableName                                                   NVARCHAR(128) NOT NULL,
    StatisticsName                                              SYSNAME,
    IsStatisticsMissingFromSQLServer                            BIT NOT NULL
        CONSTRAINT Def_Statistics_IsStatisticsMissingFromSQLServer
            DEFAULT (0),
    StatisticsColumnList_Desired                                VARCHAR(MAX) NOT NULL,
    StatisticsColumnList_Actual                                 VARCHAR(MAX) NULL,
    SampleSizePct_Desired                                       TINYINT NOT NULL
        CONSTRAINT Chk_Statistics_SampleSize_Desired
            CHECK(SampleSizePct_Desired BETWEEN 0 AND 100),
    SampleSizePct_Actual                                        TINYINT NOT NULL
        CONSTRAINT Chk_Statistics_SampleSize_Actual
            CHECK(SampleSizePct_Actual BETWEEN 0 AND 100)
        CONSTRAINT Def_Statistics_SampleSize_Actual
            DEFAULT (0),
    IsFiltered_Desired                                          BIT NOT NULL,
    IsFiltered_Actual                                           BIT NOT NULL
        CONSTRAINT Def_Statistics_IsFiltered_Actual
            DEFAULT (0),
    FilterPredicate_Desired                                     VARCHAR(MAX) NULL,
    FilterPredicate_Actual                                      NVARCHAR(MAX) NULL,
    IsIncremental_Desired                                       BIT NOT NULL, --validate that the table is partitioned or not?
    IsIncremental_Actual                                        BIT NOT NULL 
        CONSTRAINT Def_Statistics_IsIncremental_Actual
            DEFAULT (0),
    NoRecompute_Desired                                         BIT NOT NULL,
    NoRecompute_Actual                                          BIT NOT NULL 
        CONSTRAINT Def_Statistics_NoRecompute_Actual
            DEFAULT (0),
	LowerSampleSizeToDesired                                    BIT NOT NULL,
    ReadyToQueue                                                BIT NOT NULL
        CONSTRAINT Def_Statistics_ReadyToQueue
            DEFAULT (0),
    DoesSampleSizeNeedUpdate                                    BIT NOT NULL
        CONSTRAINT Def_Statistics_DoesSampleSizeNeedUpdate
            DEFAULT (0),
    IsStatisticsMissing                                         BIT NOT NULL
        CONSTRAINT Def_Statistics_IsStatisticsMissing
            DEFAULT (0),     
    HasFilterChanged                                            BIT NOT NULL
        CONSTRAINT Def_Statistics_HasFilterChanged
            DEFAULT (0),        
    HasIncrementalChanged                                       BIT NOT NULL
        CONSTRAINT Def_Statistics_HasIncrementalChanged
            DEFAULT (0),   
    HasNoRecomputeChanged                                       BIT NOT NULL
        CONSTRAINT Def_Statistics_HasNoRecomputeChanged
            DEFAULT (0),   
    NumRowsInTableUnfiltered                                    BIGINT NULL, 
    NumRowsInTableFiltered                                      BIGINT NULL, 
    NumRowsSampled                                              BIGINT NULL, 
    StatisticsLastUpdated                                       DATETIME2 NULL, 
    HistogramSteps                                              INT NULL, 
    StatisticsModCounter                                        BIGINT NULL,
    PersistedSamplePct                                          FLOAT NULL,
    StatisticsUpdateType                                        VARCHAR(30) NOT NULL
        CONSTRAINT Def_Statistics_StatisticsUpdateType
            DEFAULT ('None'),
    ListOfChanges                                               VARCHAR(500) NULL,
    IsOnlineOperation                                           BIT NOT NULL
        CONSTRAINT Def_Statistics_IsOnlineOperation
            DEFAULT (0),
    CONSTRAINT PK_Statistics
        PRIMARY KEY NONCLUSTERED (DatabaseName, SchemaName, TableName, StatisticsName),
    CONSTRAINT Chk_Statistics_Filter
			CHECK ((IsFiltered_Desired = 1 AND FilterPredicate_Desired IS NOT NULL)
						OR (IsFiltered_Desired = 0 AND FilterPredicate_Desired IS NULL)),
    CONSTRAINT FK_Statistics_Tables
        FOREIGN KEY (DatabaseName, SchemaName, TableName) 
            REFERENCES DOI.Tables(DatabaseName, SchemaName, TableName))

    WITH (MEMORY_OPTIMIZED = ON)


EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('e5f763b3-cf0b-5e29-83ef-d5b108d63615' AS UNIQUEIDENTIFIER), '03ED5F1F50EAABDC853499AC342DEFD124FF396CFA97621E2137210976988125', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Statistics_CreateTables.sql", ID: {e5f763b3-cf0b-5e29-83ef-d5b108d63615} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('be8c266a-a51d-578d-bce5-e5f9c1b01635' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D08A99492B2EDB11A545C460D2E5A80791D5BCDA24B953F0897E8804A91772EC')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_AddRefFKs.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_AddRefFKs.sql", ID: {be8c266a-a51d-578d-bce5-e5f9c1b01635} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_AddRefFKs.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_Tables_AddRefFKs]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Tables_AddRefFKs];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE PROCEDURE [DOI].[spRefreshMetadata_User_Tables_AddRefFKs]

AS
    IF OBJECT_ID('DOI.IndexesColumnStore', 'U') IS NOT NULL
        AND OBJECT_ID('DOI.FK_IndexesColumnStore_Tables', 'F') IS NULL
    BEGIN
        ALTER TABLE DOI.IndexesColumnStore 
            ADD CONSTRAINT FK_IndexesColumnStore_Tables
                FOREIGN KEY (DatabaseName, SchemaName, TableName)
                    REFERENCES DOI.Tables (DatabaseName, SchemaName, TableName)
    END

    IF OBJECT_ID('DOI.IndexesRowStore', 'U') IS NOT NULL
        AND OBJECT_ID('DOI.FK_IndexesRowStore_Tables', 'F') IS NULL
    BEGIN
        ALTER TABLE DOI.IndexesRowStore ADD CONSTRAINT FK_IndexesRowStore_Tables
        FOREIGN KEY (DatabaseName, SchemaName, TableName)
            REFERENCES DOI.Tables (DatabaseName, SchemaName, TableName)
    END

    IF OBJECT_ID('DOI.Statistics', 'U') IS NOT NULL
        AND OBJECT_ID('DOI.FK_Statistics_Tables', 'F') IS NULL
    BEGIN
        ALTER TABLE DOI.[Statistics] ADD CONSTRAINT FK_Statistics_Tables
        FOREIGN KEY (DatabaseName, SchemaName, TableName)
            REFERENCES DOI.Tables (DatabaseName, SchemaName, TableName)
    END

    IF OBJECT_ID('DOI.DefaultConstraints', 'U') IS NOT NULL
        AND OBJECT_ID('DOI.FK_DefaultConstraints_Tables', 'F') IS NULL
    BEGIN
        ALTER TABLE DOI.DefaultConstraints ADD CONSTRAINT FK_DefaultConstraints_Tables
        FOREIGN KEY (DatabaseName, SchemaName, TableName)
            REFERENCES DOI.Tables (DatabaseName, SchemaName, TableName)
    END

    IF OBJECT_ID('DOI.CheckConstraints', 'U') IS NOT NULL
        AND OBJECT_ID('DOI.FK_CheckConstraints_Tables', 'F') IS NULL
    BEGIN
        ALTER TABLE DOI.CheckConstraints ADD CONSTRAINT FK_CheckConstraints_Tables
        FOREIGN KEY (DatabaseName, SchemaName, TableName)
            REFERENCES DOI.Tables (DatabaseName, SchemaName, TableName)
    END;

    IF OBJECT_ID('DOI.ForeignKeys', 'U') IS NOT NULL
        AND OBJECT_ID('DOI.FK_ForeignKeys_ParentTables', 'F') IS NULL
    BEGIN
        ALTER TABLE DOI.ForeignKeys ADD CONSTRAINT FK_ForeignKeys_ParentTables
        FOREIGN KEY (DatabaseName, ParentSchemaName, ParentTableName)
            REFERENCES DOI.Tables (DatabaseName, SchemaName, TableName)
    END

    IF OBJECT_ID('DOI.ForeignKeys', 'U') IS NOT NULL
        AND OBJECT_ID('DOI.FK_ForeignKeys_ReferencedTables', 'F') IS NULL
    BEGIN
        ALTER TABLE DOI.ForeignKeys ADD CONSTRAINT FK_ForeignKeys_ReferencedTables
        FOREIGN KEY (DatabaseName, ReferencedSchemaName, ReferencedTableName)
            REFERENCES DOI.Tables (DatabaseName, SchemaName, TableName)
    END

    IF OBJECT_ID('DOI.IndexColumns', 'U') IS NOT NULL
        AND OBJECT_ID('DOI.FK_IndexColumns_Tables', 'F') IS NULL
    BEGIN
        ALTER TABLE DOI.IndexColumns ADD CONSTRAINT FK_IndexColumns_Tables
        FOREIGN KEY (DatabaseName, SchemaName, TableName)
            REFERENCES DOI.Tables (DatabaseName, SchemaName, TableName)
    END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_AddRefFKs.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_AddRefFKs.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('be8c266a-a51d-578d-bce5-e5f9c1b01635' AS UNIQUEIDENTIFIER), 'D08A99492B2EDB11A545C460D2E5A80791D5BCDA24B953F0897E8804A91772EC', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_AddRefFKs.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_AddRefFKs.sql", ID: {be8c266a-a51d-578d-bce5-e5f9c1b01635} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('50059b9f-ad6a-5a99-8cfc-e382aaa000d6' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2201B7C0C6B3D08A0BC81B89517F69866C6A4D4AE7F30EBD41326A24C2F5F6A2')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_DropRefFKs.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_DropRefFKs.sql", ID: {50059b9f-ad6a-5a99-8cfc-e382aaa000d6} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_DropRefFKs.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_Tables_DropRefFKs]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Tables_DropRefFKs];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE PROCEDURE [DOI].[spRefreshMetadata_User_Tables_DropRefFKs]

AS
    IF OBJECT_ID('DOI.FK_IndexesColumnStore_Tables', 'F') IS NOT NULL
    BEGIN
        ALTER TABLE DOI.IndexesColumnStore 
            DROP CONSTRAINT FK_IndexesColumnStore_Tables
    END

    IF OBJECT_ID('DOI.FK_IndexesRowStore_Tables', 'F') IS NOT NULL
    BEGIN
        ALTER TABLE DOI.IndexesRowStore DROP CONSTRAINT FK_IndexesRowStore_Tables
    END

    IF OBJECT_ID('DOI.FK_Statistics_Tables', 'F') IS NOT NULL
    BEGIN
        ALTER TABLE DOI.[Statistics] DROP CONSTRAINT FK_Statistics_Tables
    END

    IF OBJECT_ID('DOI.FK_DefaultConstraints_Tables', 'F') IS NOT NULL
    BEGIN
        ALTER TABLE DOI.DefaultConstraints DROP CONSTRAINT FK_DefaultConstraints_Tables
    END

    IF OBJECT_ID('DOI.FK_CheckConstraints_Tables', 'F') IS NOT NULL
    BEGIN
        ALTER TABLE DOI.CheckConstraints DROP CONSTRAINT FK_CheckConstraints_Tables
    END;

    IF OBJECT_ID('DOI.FK_ForeignKeys_ParentTables', 'F') IS NOT NULL
    BEGIN
        ALTER TABLE DOI.ForeignKeys DROP CONSTRAINT FK_ForeignKeys_ParentTables
    END

    IF OBJECT_ID('DOI.FK_ForeignKeys_ReferencedTables', 'F') IS NOT NULL
    BEGIN
        ALTER TABLE DOI.ForeignKeys DROP CONSTRAINT FK_ForeignKeys_ReferencedTables
    END

    IF OBJECT_ID('DOI.FK_IndexColumns_Tables', 'F') IS NOT NULL
    BEGIN
        ALTER TABLE DOI.IndexColumns DROP CONSTRAINT FK_IndexColumns_Tables
    END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_DropRefFKs.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_DropRefFKs.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('50059b9f-ad6a-5a99-8cfc-e382aaa000d6' AS UNIQUEIDENTIFIER), '2201B7C0C6B3D08A0BC81B89517F69866C6A4D4AE7F30EBD41326A24C2F5F6A2', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_DropRefFKs.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_DropRefFKs.sql", ID: {50059b9f-ad6a-5a99-8cfc-e382aaa000d6} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('adf91eff-9a53-55ae-9ff1-38babd7bf86e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7F47542D53236368D6E6D3A43E1562945F223FDD87D1470B49C9EC46DE0A2DEC')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_CreateTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_CreateTables.sql", ID: {adf91eff-9a53-55ae-9ff1-38babd7bf86e} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_CreateTables.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_Tables_CreateTables]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_Tables_CreateTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_Tables_CreateTables]

AS

--exec dbo.spEnableDisableAllFKs 
--    @Action = 'DISABLE', 
--    @ForMetadataTablesOnly = 1

--EXEC DOI.spForeignKeysDrop
--    @ForMetadataTablesOnly = 1,
--	@ReferencedSchemaName	= 'DOI',
--	@ReferencedTableName	= 'Tables'

DECLARE @DropSQL VARCHAR(MAX) = '',
        @RecreateSQL VARCHAR(MAX) = ''

EXEC DOI.spDropRecreateSchemaBoundObjectsOnTable
    @SchemaName = 'DOI',
    @TableName = 'Tables',
    @DropSQL = @DropSQL OUTPUT,
    @RecreateSQL = @RecreateSQL OUTPUT

EXEC DOI.sp_ExecuteSQLByBatch @DropSQL


EXEC [DOI].[spRefreshMetadata_User_Tables_DropRefFKs]



DROP TABLE IF EXISTS DOI.Tables


	CREATE TABLE DOI.Tables(
        DatabaseName                        NVARCHAR(128) NOT NULL,
		SchemaName						    NVARCHAR(128) NOT NULL,
		TableName						    NVARCHAR(128) NOT NULL,
		PartitionColumn					    NVARCHAR(128) NULL, --VALIDATE THAT THIS COLUMN EXISTS IN DB.
		Storage_Desired					    NVARCHAR(128) NULL, --VALIDATE THAT THIS NAME IS A VALID STORAGE CONTAINER.
        Storage_Actual                      NVARCHAR(128) NULL,
        StorageUnderlyingFilegroup_Desired  NVARCHAR(128) NULL,
        StorageUnderlyingFilegroup_Actual   NVARCHAR(128) NULL,
        StorageType_Desired                 NVARCHAR(128) NULL,
        StorageType_Actual                  NVARCHAR(128) NULL,

		--UseBCPStrategy					BIT NOT NULL /*I THINK WE CAN DROP THIS COLUMN.  IF STORAGE CHANGES WE HAVE TO USE BCP EVERY TIME.
		--												MAYBE WE SHOULD ADD AN UPDATETYPE OF 'BCP' AND ENABLE IT WHENEVER
		--												STORAGE CHANGES.  */
		--	CONSTRAINT Def_Tables_UseBCPStrategy
		--		DEFAULT 0,
		IntendToPartition				    BIT NOT NULL /*DO WE NEED THIS COLUMN?  I THINK THAT PUTTING A PARTITION SCHEME NAME IN THE
													'NewStorage' COLUMN SAYS THAT YOU 'INTEND TO PARTITION'.  DON'T KNOW ABOUT THIS
													BECAUSE WE USE THIS COLUMN IN LOTS OF VALIDATIONS.*/
			CONSTRAINT Def_Tables_IntendToPartition
				DEFAULT 0,
		--EnableRunPartitioning			    BIT NOT NULL--I THINK WE CAN DROP THIS COLUMN. READYTOQUEUE NOW DOES THIS FUNCTION.
		--	CONSTRAINT Def_Tables_EnableRunPartitioning
		--		DEFAULT 0,
		ReadyToQueue					    BIT NOT NULL
			CONSTRAINT Def_Tables_ReadyToQueue
				DEFAULT 0,
        AreIndexesFragmented                BIT NOT NULL
   			CONSTRAINT Def_Tables_AreIndexesFragmented
				DEFAULT 0,
		AreIndexesBeingUpdated              BIT NOT NULL
			CONSTRAINT Def_Tables_AreIndexesBeingUpdated
				DEFAULT 0,
		AreIndexesMissing                   BIT NOT NULL
			CONSTRAINT Def_Tables_AreIndexesMissing
				DEFAULT 0,
		IsClusteredIndexBeingDropped        BIT NOT NULL
			CONSTRAINT Def_Tables_IsClusteredIndexBeingDropped
				DEFAULT 0,
		WhichUniqueConstraintIsBeingDropped VARCHAR(10) NOT NULL
			CONSTRAINT Def_Tables_WhichUniqueConstraintIsBeingDropped
				DEFAULT 'None',
		IsStorageChanging                   BIT NOT NULL
			CONSTRAINT Def_Tables_IsStorageChanging
				DEFAULT 0,
		NeedsTransaction                    BIT NOT NULL
			CONSTRAINT Def_Tables_NeedsTransaction
				DEFAULT 0,
        AreStatisticsChanging               BIT NOT NULL
			CONSTRAINT Def_Tables_AreStatisticsChanging
				DEFAULT 0,
		DSTriggerSQL                        VARCHAR(MAX) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
		PKColumnList                        VARCHAR(MAX) NULL,
        PKColumnListJoinClause              VARCHAR(MAX) NULL,
    	ColumnListNoTypes                   VARCHAR(MAX) NULL,
	    ColumnListWithTypes                 VARCHAR(MAX) NULL,
    	UpdateColumnList                    VARCHAR(MAX) NULL,
        NewPartitionedPrepTableName         NVARCHAR(128) NULL,
        PartitionFunctionName               NVARCHAR(128) NULL

		CONSTRAINT PK_Tables
			PRIMARY KEY NONCLUSTERED(DatabaseName, SchemaName, TableName),
		CONSTRAINT Chk_Tables_PartitioningSetup
			CHECK ((IntendToPartition = 1 AND PartitionColumn IS NOT NULL)
					OR (IntendToPartition = 0 AND PartitionColumn IS NULL)),
        CONSTRAINT FK_Tables_Databases
            FOREIGN KEY (DatabaseName)
                REFERENCES DOI.Databases(DatabaseName)) 

    WITH (MEMORY_OPTIMIZED = ON)

EXEC DOI.spRefreshMetadata_User_Tables_InsertData
EXEC DOI.spRefreshMetadata_User_Tables_UpdateData
EXEC DOI.spRefreshMetadata_User_Tables_IndexAggColumns_UpdateData


EXEC [DOI].[spRefreshMetadata_User_Tables_AddRefFKs]

EXEC DOI.sp_ExecuteSQLByBatch @RecreateSQL


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_CreateTables.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_CreateTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('adf91eff-9a53-55ae-9ff1-38babd7bf86e' AS UNIQUEIDENTIFIER), '7F47542D53236368D6E6D3A43E1562945F223FDD87D1470B49C9EC46DE0A2DEC', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_CreateTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_Tables_CreateTables.sql", ID: {adf91eff-9a53-55ae-9ff1-38babd7bf86e} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0a261c57-7994-5047-967b-5be872f4770a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E1D05624A1B03FA4D3B006C753B584EBA5C3DB0CCC0813FF2C193149BFB6EEDD')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_FilegroupsAndFiles.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_FilegroupsAndFiles.sql", ID: {0a261c57-7994-5047-967b-5be872f4770a} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_FilegroupsAndFiles.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshStorageContainers_FilegroupsAndFiles]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshStorageContainers_FilegroupsAndFiles];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshStorageContainers_FilegroupsAndFiles]
    @DatabaseName SYSNAME,
	@Debug BIT = 0

AS

/*
	EXEC DOI.spRefreshStorageContainers_FilegroupsAndFiles
        @DatabaseName = 'PaymentReporting',
		@Debug = 1
*/

DECLARE @CreateFileGroupsSQL NVARCHAR(MAX) = '' + CHAR(13) + CHAR(10),
		@CreateFilesSQL NVARCHAR(MAX) = '' + CHAR(13) + CHAR(10) 


SELECT @CreateFileGroupsSQL = (	SELECT DISTINCT AddFileGroupSQL + CHAR(13) + CHAR(10)
								FROM DOI.vwPartitionFunctionPartitions
								WHERE DatabaseName = @DatabaseName
								FOR XML PATH(''), TYPE).value(N'.[1]', N'nvarchar(max)')

IF @Debug = 1
BEGIN
	EXEC DOI.spPrintOutLongSQL 
		@SQLInput = @CreateFileGroupsSQL ,
		@VariableName = N'@CreateFileGroupsSQL'
END
ELSE
BEGIN
	EXEC (@CreateFileGroupsSQL)
END


SELECT @CreateFilesSQL = (	SELECT DISTINCT AddFileSQL + CHAR(13) + CHAR(10)
							FROM DOI.vwPartitionFunctionPartitions
							WHERE DatabaseName = @DatabaseName
							FOR XML PATH(''), TYPE).value(N'.[1]', N'nvarchar(max)')
FROM DOI.vwPartitionFunctionPartitions


IF @Debug = 1
BEGIN
	EXEC DOI.spPrintOutLongSQL 
		@SQLInput = @CreateFilesSQL ,
		@VariableName = N'@CreateFilesSQL'
END
ELSE
BEGIN
	EXEC (@CreateFilesSQL)
END

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_FilegroupsAndFiles.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_FilegroupsAndFiles.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('0a261c57-7994-5047-967b-5be872f4770a' AS UNIQUEIDENTIFIER), 'E1D05624A1B03FA4D3B006C753B584EBA5C3DB0CCC0813FF2C193149BFB6EEDD', 'Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_FilegroupsAndFiles.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_FilegroupsAndFiles.sql", ID: {0a261c57-7994-5047-967b-5be872f4770a} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('02931e7e-1112-58cf-9a41-e63f60fa50ef' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'C5DB7756A6B3ACE185835793139459E0B3675F35D28AEB02E166604F55886DFB')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwPartitionFunctions.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwPartitionFunctions.sql", ID: {02931e7e-1112-58cf-9a41-e63f60fa50ef} *****';

GO


------------ BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwPartitionFunctions.sql" --------------
GO
IF OBJECT_ID('[DOI].[vwPartitionFunctions]') IS NOT NULL
	DROP VIEW [DOI].[vwPartitionFunctions];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO




CREATE   VIEW [DOI].[vwPartitionFunctions]
AS

/*
	select * from DOI.vwPartitionFunctions where partitionfunctionname = 'PfMonthlyUnitTest'
*/

SELECT	PartitionFunctionName,
        PartitionFunctionDataType,
        BoundaryInterval,
        NumOfFutureIntervals AS NumOfFutureIntervalsDesired,
        ISNULL(FI.NumFutureIntervals, 0) AS NumOfFutureIntervalsActual,
        InitialDate,
        UsesSlidingWindow,
        SlidingWindowSize,
        IsDeprecated,
        PartitionSchemeName,
        NumOfCharsInSuffix,
        LastBoundaryDate,
        NumOfTotalPartitionFunctionIntervals, --we can also use pf.fanout for this.
        NumOfTotalPartitionSchemeIntervals,
        MinValueOfDataType,
		CASE WHEN pf.name IS NULL THEN 1 ELSE 0 END AS IsPartitionFunctionMissing,
		CASE WHEN ps.name IS NULL THEN 1 ELSE 0 END AS IsPartitionSchemeMissing,
        NUF.NextUsedFileGroupName,
N'IF NOT EXISTS(SELECT * FROM sys.partition_functions WHERE name = ''' + PFM.PartitionFunctionName + ''')
BEGIN
	CREATE PARTITION FUNCTION ' + PFM.PartitionFunctionName + ' (' + PFM.PartitionFunctionDataType + ') 
		AS RANGE RIGHT FOR VALUES (' + STUFF(PfBoundaryList.BoundaryList, LEN(PfBoundaryList.BoundaryList), 1, SPACE(0)) + ')
END'  AS CreatePartitionFunctionSQL,
'
IF NOT EXISTS(SELECT * FROM sys.partition_schemes WHERE name = ''' + PFM.PartitionSchemeName + ''')
BEGIN
	CREATE PARTITION SCHEME	' + PFM.PartitionSchemeName + ' 
	AS PARTITION ' + PFM.PartitionFunctionName + '
	TO (' + STUFF(PfFileGroupList.FileGroupList, LEN(PfFileGroupList.FileGroupList), 1, SPACE(0)) + ')
END'  AS CreatePartitionSchemeSQL
--SELECT *
FROM DOI.PartitionFunctions PFM
	CROSS APPLY (	SELECT (SELECT '''' + CAST(PFP.BoundaryValue AS VARCHAR(30)) + ''',' AS BoundaryValue
							FROM DOI.vwPartitionFunctionPartitions PFP
							WHERE PFM.PartitionFunctionName = PFP.PartitionFunctionName
								AND PFP.IncludeInPartitionFunction = 1
							ORDER BY BoundaryValue
							FOR XML PATH(''), TYPE).value(N'.[1]', N'nvarchar(max)')) PfBoundaryList(BoundaryList)
	CROSS APPLY (	SELECT CAST(PFP.FileGroupName AS VARCHAR(30)) + ','
					FROM DOI.vwPartitionFunctionPartitions PFP 
					WHERE PFP.PartitionFunctionName = PFM.PartitionFunctionName
						AND PFP.IncludeInPartitionScheme = 1
					FOR XML PATH('')) PfFileGroupList(FileGroupList)
	LEFT JOIN DOI.SysPartitionFunctions pf ON pf.name = PFM.PartitionFunctionName
    LEFT JOIN DOI.SysPartitionSchemes ps ON ps.name = PFM.PartitionSchemeName
	OUTER APPLY (	SELECT *
					FROM (	SELECT	FG.Name AS NextUsedFileGroupName,
									prv.value, 
									ps.Name,
									ps.function_id,
									RANK() OVER (PARTITION BY ps.name ORDER BY dds.destination_Id) AS dest_rank
							FROM DOI.SysDestinationDataSpaces AS DDS 
								INNER JOIN DOI.SysFilegroups AS FG ON FG.data_space_id = DDS.data_space_ID 
								LEFT JOIN DOI.SysPartitionRangeValues AS PRV ON PRV.Boundary_ID = DDS.destination_id 
									AND prv.function_id = ps.function_id 
							WHERE DDS.partition_scheme_id = ps.data_space_id
								AND prv.Value IS NULL) x
					WHERE x.dest_rank = 2) AS NUF
    OUTER APPLY (   SELECT prv.function_id, COUNT(prv.boundary_id) AS NumFutureIntervals
                    FROM DOI.SysDestinationDataSpaces AS DDS 
						INNER JOIN DOI.SysFilegroups AS FG ON FG.data_space_id = DDS.data_space_ID 
						LEFT JOIN DOI.SysPartitionRangeValues AS PRV ON PRV.Boundary_ID = DDS.destination_id 
							AND prv.function_id = ps.function_id 
					WHERE DDS.partition_scheme_id = ps.data_space_id
                        AND prv.value > GETDATE()
                    GROUP BY PRV.function_id)FI




GO

GO
------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwPartitionFunctions.sql" ---------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwPartitionFunctions.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('02931e7e-1112-58cf-9a41-e63f60fa50ef' AS UNIQUEIDENTIFIER), 'C5DB7756A6B3ACE185835793139459E0B3675F35D28AEB02E166604F55886DFB', 'Programmable Objects\Views\DOI.vwPartitionFunctions.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwPartitionFunctions.sql", ID: {02931e7e-1112-58cf-9a41-e63f60fa50ef} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5896795f-7fbf-5592-9b3e-ada47d7e78be' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'C64EAEB2DDF3DC20EFA96875601F5562C1566F8777579C15E869C2F619831DAE')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionFunctions.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionFunctions.sql", ID: {5896795f-7fbf-5592-9b3e-ada47d7e78be} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionFunctions.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshStorageContainers_PartitionFunctions]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshStorageContainers_PartitionFunctions];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshStorageContainers_PartitionFunctions]
    @DatabaseName SYSNAME,
	@PartitionFunctionName SYSNAME = NULL,
	@Debug BIT = 0

AS

/*
	EXEC DOI.spRefreshStorageContainers_PartitionFunctions
        @DatabaseName = 'PaymentReporting',
		@Debug = 1

EXEC [DOI].[spRefreshStorageContainers_PartitionFunctions] 
                            @DatabaseName = 'PaymentReporting',
                            @PartitionFunctionName = 'PfMonthlyUnitTest'
*/

BEGIN TRY

	IF NOT EXISTS(SELECT 'True' FROM DOI.PartitionFunctions WHERE PartitionFunctionName = CASE WHEN @PartitionFunctionName IS NOT NULL THEN @PartitionFunctionName ELSE PartitionFunctionName END)
	BEGIN
		RAISERROR('Invalid partition Function name.  Make sure it exists in DOI.PartitionFunctions table.', 16, 1)
	END


	DECLARE @CreatePartitionFunctionSQL NVARCHAR(MAX) = 'USE ' + @DatabaseName + CHAR(13) + CHAR(10)


	SET @CreatePartitionFunctionSQL += (SELECT CreatePartitionFunctionSQL + CHAR(13) + CHAR(10)
	                                    FROM DOI.vwPartitionFunctions
	                                    WHERE PartitionFunctionName = CASE WHEN @PartitionFunctionName IS NOT NULL THEN @PartitionFunctionName ELSE PartitionFunctionName END 
                                        FOR XML PATH, TYPE).value('.', 'varchar(max)')

	IF @Debug = 1
	BEGIN
		PRINT @CreatePartitionFunctionSQL
	END
	ELSE
	BEGIN
		EXEC sp_executesql @CreatePartitionFunctionSQL;  
	END
END TRY
BEGIN CATCH
	THROW;
END CATCH

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionFunctions.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionFunctions.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('5896795f-7fbf-5592-9b3e-ada47d7e78be' AS UNIQUEIDENTIFIER), 'C64EAEB2DDF3DC20EFA96875601F5562C1566F8777579C15E869C2F619831DAE', 'Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionFunctions.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionFunctions.sql", ID: {5896795f-7fbf-5592-9b3e-ada47d7e78be} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6e4e9393-c36c-53cf-ab8d-e3963e298f70' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F3F0A8C88452E449DD61DF3988621C8CCD9A53FD3D5965D36809423168153BC8')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionSchemes.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionSchemes.sql", ID: {6e4e9393-c36c-53cf-ab8d-e3963e298f70} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionSchemes.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshStorageContainers_PartitionSchemes]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshStorageContainers_PartitionSchemes];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshStorageContainers_PartitionSchemes]
    @DatabaseName SYSNAME,
	@PartitionFunctionName SYSNAME = NULL,
	@Debug BIT = 0

AS

/*
	EXEC DOI.spRefreshStorageContainers_PartitionSchemes
		@Debug = 1
*/

DECLARE @CreatePartitionSchemeSQL NVARCHAR(MAX) = 'USE ' + @DatabaseName + CHAR(13) + CHAR(10)

SELECT @CreatePartitionSchemeSQL += CreatePartitionSchemeSQL + CHAR(13) + CHAR(10)
FROM DOI.vwPartitionFunctions
WHERE PartitionFunctionName = CASE WHEN @PartitionFunctionName IS NULL THEN PartitionFunctionName ELSE @PartitionFunctionName END

IF @Debug = 1
BEGIN
	PRINT @CreatePartitionSchemeSQL
END
ELSE
BEGIN
	EXEC sp_executesql @CreatePartitionSchemeSQL;  
END


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionSchemes.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionSchemes.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('6e4e9393-c36c-53cf-ab8d-e3963e298f70' AS UNIQUEIDENTIFIER), 'F3F0A8C88452E449DD61DF3988621C8CCD9A53FD3D5965D36809423168153BC8', 'Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionSchemes.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_PartitionSchemes.sql", ID: {6e4e9393-c36c-53cf-ab8d-e3963e298f70} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f3a9d1ad-30dd-5898-8c4c-8dc14fe3b03a' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1DA24611366BB5EA3D3B8E63CCBEB47B42ED33F4D1700B76A2E3960845CAD91C')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRun_DropObjects.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_DropObjects.sql", ID: {f3a9d1ad-30dd-5898-8c4c-8dc14fe3b03a} *****';

GO


-------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_DropObjects.sql" ---------
GO
IF OBJECT_ID('[DOI].[spRun_DropObjects]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRun_DropObjects];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRun_DropObjects]
    @CurrentDatabaseName NVARCHAR(128),
	@CurrentSchemaName NVARCHAR(128),
	@CurrentTableName NVARCHAR(128),
	@CurrentParentTableName NVARCHAR(128),
	@CurrentSeqNo INT,
	@ExitTableLoopOnError BIT ,
	@BatchId UNIQUEIDENTIFIER = NULL,
	@DeleteTables BIT = 0


AS

/*
	EXEC DOI.spRun_DropObjects
        @CurrentDatabaseName = 'PaymentReporting',
		@CurrentSchemaName = 'dbo',
		@CurrentTableName = 'Bai2BankTransactions'
        @CurrentParentTableName = 'Bai2BankTransactions'
*/
--DROP DATA SYNCH TRIGGER, BUT WE NEED TO FIND OUT WHICH TABLE HAS THE TRIGGER....
BEGIN TRY
	DECLARE @TriggerName SYSNAME = (SELECT tr.name
									FROM DOI.SysTriggers tr WITH (SNAPSHOT)
                                        INNER JOIN DOI.SysDatabases d WITH (SNAPSHOT) ON d.database_id = tr.database_id
										INNER JOIN DOI.SysTables t WITH (SNAPSHOT) ON tr.database_id = t.database_id
                                            AND tr.parent_id = t.object_id
									WHERE d.name = @CurrentDatabaseName
                                        AND t.name IN (@CurrentParentTableName, @CurrentParentTableName + '_OLD')
										AND tr.name LIKE '%|DataSynch' ESCAPE '|')

	DECLARE @DropDataSynchTriggerSQL NVARCHAR(MAX) = 'DROP TRIGGER IF EXISTS ' + @TriggerName,
            @DropBCPViewSQL VARCHAR(100) = 'DROP VIEW IF EXISTS dbo.vwCurrentBCPQuery',
            @DropCompareObjectsSQL VARCHAR(500) = '
DROP FUNCTION IF EXISTS dbo.fnCompareTableStructuresDetails;
DROP FUNCTION IF EXISTS dbo.fnCompareTableStructures;
DROP FUNCTION IF EXISTS dbo.fnActualIndexesForTable;
DROP FUNCTION IF EXISTS dbo.fnActualConstraintsForTable;'

	EXEC DOI.spRun_LogInsert 
        @CurrentDatabaseName    = @CurrentDatabaseName,
		@CurrentSchemaName		= 'N/A' , 
		@CurrentTableName		= 'N/A' ,  
		@CurrentIndexName		= 'N/A' ,  
		@CurrentPartitionNumber	= 0, 
		@IndexSizeInMB			= 0 ,
		@IndexOperation			= 'Drop Data Synch Trigger',
		@IsOnlineOperation		= 1 ,
		@RowCount				= 0 ,
		@SQLStatement			= @DropDataSynchTriggerSQL ,
		@ErrorText				= NULL,
		@TransactionId			= NULL,
		@TableChildOperationId	= 0,
		@BatchId				= @BatchId,
		@SeqNo					= @CurrentSeqNo,
		@RunStatus				= 'Start',
		@ExitTableLoopOnError	= @ExitTableLoopOnError

	EXEC(@DropDataSynchTriggerSQL)

	EXEC DOI.spRun_LogInsert 
        @CurrentDatabaseName    = @CurrentDatabaseName,
		@CurrentSchemaName		= 'N/A' , 
		@CurrentTableName		= 'N/A' ,  
		@CurrentIndexName		= 'N/A' , 
		@CurrentPartitionNumber	= 0,  
		@IndexSizeInMB			= 0 ,
		@IndexOperation			= 'Drop Data Synch Trigger',
		@IsOnlineOperation		= 1 ,
		@RowCount				= 0 ,
		@SQLStatement			= @DropDataSynchTriggerSQL ,
		@ErrorText				= NULL,
		@TransactionId			= NULL,
		@TableChildOperationId	= 0,
		@BatchId				= @BatchId,
		@SeqNo					= @CurrentSeqNo,
		@RunStatus				= 'Finish',
		@ExitTableLoopOnError	= @ExitTableLoopOnError

	EXEC DOI.spRun_LogInsert 
        @CurrentDatabaseName    = @CurrentDatabaseName,
		@CurrentSchemaName		= 'N/A' , 
		@CurrentTableName		= 'N/A' ,  
		@CurrentIndexName		= 'N/A' , 
		@CurrentPartitionNumber	= 0,  
		@IndexSizeInMB			= 0 ,
		@IndexOperation			= 'Drop BCP View',
		@IsOnlineOperation		= 1 ,
		@RowCount				= 0 ,
		@SQLStatement			= @DropBCPViewSQL ,
		@ErrorText				= NULL,
		@TransactionId			= NULL,
		@TableChildOperationId	= 0,
		@BatchId				= @BatchId,
		@SeqNo					= @CurrentSeqNo,
		@RunStatus				= 'Finish',
		@ExitTableLoopOnError	= @ExitTableLoopOnError

    EXEC(@DropBCPViewSQL)

    EXEC DOI.spRun_LogInsert 
        @CurrentDatabaseName    = @CurrentDatabaseName,
		@CurrentSchemaName		= 'N/A' , 
		@CurrentTableName		= 'N/A' ,  
		@CurrentIndexName		= 'N/A' , 
		@CurrentPartitionNumber	= 0,  
		@IndexSizeInMB			= 0 ,
		@IndexOperation			= 'Drop Compare Objects',
		@IsOnlineOperation		= 1 ,
		@RowCount				= 0 ,
		@SQLStatement			= @DropCompareObjectsSQL ,
		@ErrorText				= NULL,
		@TransactionId			= NULL,
		@TableChildOperationId	= 0,
		@BatchId				= @BatchId,
		@SeqNo					= @CurrentSeqNo,
		@RunStatus				= 'Finish',
		@ExitTableLoopOnError	= @ExitTableLoopOnError

    EXEC(@DropCompareObjectsSQL)

	IF @DeleteTables = 1
	BEGIN
		DECLARE @DropPrepAndDataSynchTablesSQL NVARCHAR(MAX) = ''
		SELECT @DropPrepAndDataSynchTablesSQL += 'DROP TABLE ' + s.name + '.' + t.name + CHAR(13) + CHAR(10)
		FROM DOI.SysTables t
            INNER JOIN DOI.SysDatabases d ON d.database_id = t.database_id
			INNER JOIN DOI.SysSchemas s ON s.schema_id = t.schema_id
		WHERE d.name = @CurrentDatabaseName
            AND (t.name LIKE '%' + @CurrentParentTableName + '|_DataSynch' ESCAPE '|'
			        OR t.name LIKE '%' + @CurrentParentTableName + '|_%prep' ESCAPE '|')

		EXEC DOI.spRun_LogInsert 
            @CurrentDatabaseName    = @CurrentDatabaseName,
			@CurrentSchemaName		= 'N/A' , 
			@CurrentTableName		= 'N/A' ,  
			@CurrentIndexName		= 'N/A' , 
			@CurrentPartitionNumber	= 0,  
			@IndexSizeInMB			= 0 ,
			@IndexOperation			= 'Clean Up Tables',
			@IsOnlineOperation		= 1 ,
			@RowCount				= 0 ,
			@SQLStatement			= @DropPrepAndDataSynchTablesSQL ,
			@ErrorText				= NULL,
			@TransactionId			= NULL,
			@TableChildOperationId	= 0,
			@BatchId				= @BatchId,
			@SeqNo					= @CurrentSeqNo,
			@RunStatus				= 'Start',
			@ExitTableLoopOnError	= @ExitTableLoopOnError
		
		EXEC(@DropPrepAndDataSynchTablesSQL)

		EXEC DOI.spRun_LogInsert
            @CurrentDatabaseName    = @CurrentDatabaseName, 
			@CurrentSchemaName		= 'N/A' , 
			@CurrentTableName		= 'N/A' ,  
			@CurrentIndexName		= 'N/A' , 
			@CurrentPartitionNumber	= 0,  
			@IndexSizeInMB			= 0 ,
			@IndexOperation			= 'Clean Up Tables',
			@IsOnlineOperation		= 1 ,
			@RowCount				= 0 ,
			@SQLStatement			= @DropPrepAndDataSynchTablesSQL ,
			@ErrorText				= NULL,
			@TransactionId			= NULL,
			@TableChildOperationId	= 0,
			@BatchId				= @BatchId,
			@SeqNo					= @CurrentSeqNo,
			@RunStatus				= 'Finish',
			@ExitTableLoopOnError	= @ExitTableLoopOnError
	END
    
END TRY
BEGIN CATCH
	THROW;
END CATCH

GO

GO
--------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_DropObjects.sql" ----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRun_DropObjects.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('f3a9d1ad-30dd-5898-8c4c-8dc14fe3b03a' AS UNIQUEIDENTIFIER), '1DA24611366BB5EA3D3B8E63CCBEB47B42ED33F4D1700B76A2E3960845CAD91C', 'Programmable Objects\Stored Procedures\DOI.spRun_DropObjects.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_DropObjects.sql", ID: {f3a9d1ad-30dd-5898-8c4c-8dc14fe3b03a} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4cda7a57-dc00-5892-a0ee-0824f0a5de9e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '55C93E91515638928435B643F37F2B7F893899D228791556F20FF5912522BAC5')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRun_ReleaseApplicationLock.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_ReleaseApplicationLock.sql", ID: {4cda7a57-dc00-5892-a0ee-0824f0a5de9e} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_ReleaseApplicationLock.sql" ----
GO
IF OBJECT_ID('[DOI].[spRun_ReleaseApplicationLock]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRun_ReleaseApplicationLock];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRun_ReleaseApplicationLock]
    @DatabaseName NVARCHAR(128),
    @BatchId UNIQUEIDENTIFIER,
    @IsOnlineOperation BIT,
    @Debug BIT = 0
AS

/*
	EXEC DOI.spRun_GetApplicationLock
        @DatabaseName = 'PaymentReporting',
        @LockTimeout = 1000,
        @BatchId = '0483BDE0-118F-4865-9811-B0406C951161',
        @IsOnlineOperation = 1
        
    EXEC DOI.spRun_ReleaseApplicationLock
        @DatabaseName = 'PaymentReporting',
        @BatchId = '0483BDE0-118F-4865-9811-B0406C951161',
        @IsOnlineOperation = 1
*/
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

BEGIN TRY
    BEGIN TRAN
        DECLARE @TransactionId UNIQUEIDENTIFIER = NEWID(),
                @ErrorMessage VARCHAR(500) = 'Unable to release Application Lock.',
                @CheckForLockSQL NVARCHAR(1000) = '',
                @ParamList NVARCHAR(100) = '',
                @ReleaseAppLockSQL NVARCHAR(1000) = '',
                @ParamList2 NVARCHAR(100) = '',
                @SPIDMessage VARCHAR(10) = '',
                @SPID INT,
                @RC INT,
                @SQLStatement VARCHAR(500) = '
EXEC DOI.spRun_ReleaseApplicationLock
    @BatchId = ''' + CAST(@BatchId AS NVARCHAR(40)) + ''',
    @IsOnlineOperation = ' + CAST(@IsOnlineOperation AS NVARCHAR(1))

        SET @SPID = @@SPID

        --WE DON'T WANT TO USE APPLOCK_TEST() HERE BECAUSE IT ALLOWS MULTIPLE LOCK GETS AND WE ONLY WANT TO ALLOW 1.
        SET @CheckForLockSQL = N'
        SELECT @SPIDMessageOUT += ''SPID '' + CAST(request_session_id AS VARCHAR(5))
		FROM   ' + @DatabaseName + '.sys.dm_tran_locks
		WHERE  resource_type = ''APPLICATION''
			AND request_mode = ''X''
			AND request_status = ''GRANT''
            AND request_owner_type = ''SESSION''
			AND resource_description LIKE ''%:\[DOI\]:%'' ESCAPE ''\'''

        SET @ParamList = N'@SPIDMessageOUT NVARCHAR(10) OUTPUT'

        IF @Debug = 1
        BEGIN
            EXEC DOI.spPrintOutLongSQL 
                @SQLInput = @CheckForLockSQL ,
                @VariableName = N'@CheckForLockSQL'
        END
        ELSE
        BEGIN
            EXEC sys.sp_executesql
                @CheckForLockSQL,
                @ParamList,
                @SPIDMessageOUT = @SPIDMessage OUTPUT
        END


        SET @SPIDMessage = CASE WHEN @SPIDMessage = '' THEN 'no one' ELSE @SPIDMessage END
        
        IF @SPIDMessage <> 'SPID ' + CAST(@SPID AS VARCHAR(5))
        BEGIN
            SET @ErrorMessage += '  There is no lock to release for this SPID (' + CAST(@SPID AS VARCHAR(5)) + ').  The lock is currently being held by ' + @SPIDMessage + '.'
            RAISERROR(@ErrorMessage, 16, 1)
        END

        SET @ReleaseAppLockSQL = '
	    EXEC @RC_OUT = ' + @DatabaseName + '.sys.sp_releaseapplock 
		    @DbPrincipal= ''dbo'',
		    @Resource	= ''DOI'', 
		    @LockOwner	= ''Session'''

        SET @ParamList = N'@RC_OUT INT OUTPUT'

        IF @Debug = 1
        BEGIN
            EXEC DOI.spPrintOutLongSQL 
                @SQLInput = @ReleaseAppLockSQL ,
                @VariableName = N'@ReleaseAppLockSQL'
        END
        ELSE
        BEGIN
            EXEC sys.sp_executesql
                @ReleaseAppLockSQL,
                @ParamList,
                @RC_OUT = @RC OUTPUT

	        IF @RC < 0
	        BEGIN
		        RAISERROR(@ErrorMessage, 16, 1)
	        END
            ELSE
            BEGIN
                SET @ErrorMessage = 'Application Lock successfully released for this SPID (' + CAST(@SPID AS VARCHAR(5)) + ').'
                RAISERROR(@ErrorMessage, 10, 1)
            END

            EXEC DOI.spRun_LogInsert
                @CurrentDatabaseName    = @DatabaseName,
                @CurrentSchemaName      = N'N/A' ,    
                @CurrentTableName       = N'N/A' ,     
                @CurrentIndexName       = N'N/A' ,     
                @CurrentPartitionNumber = 0 , 
                @IndexSizeInMB          = 0 ,          
                @SQLStatement           = @SQLStatement,          
                @IndexOperation         = 'Release Application Lock' ,        
                @IsOnlineOperation      = @IsOnlineOperation ,   
                @RowCount               = 0 ,               
                @TableChildOperationId  = 0 ,  
                @RunStatus              = 'Info' ,
                @TransactionId          = @TransactionId ,       
                @BatchId                = @BatchId ,             
                @InfoMessage            = @ErrorMessage,             
                @SeqNo                  = 0 ,                  
                @ExitTableLoopOnError   = 1
        END
    COMMIT TRAN
END TRY

BEGIN CATCH
    DECLARE @ActualErrorMessage VARCHAR(1000)
    SET @ActualErrorMessage = ERROR_MESSAGE()
    SET @ErrorMessage += '-' + @ActualErrorMessage
    IF @@TRANCOUNT > 0 ROLLBACK TRAN
    EXEC DOI.spRun_LogInsert
        @CurrentDatabaseName    = @DatabaseName,
        @CurrentSchemaName      = N'N/A' ,    
        @CurrentTableName       = N'N/A' ,     
        @CurrentIndexName       = N'N/A' ,     
        @CurrentPartitionNumber = 0 , 
        @IndexSizeInMB          = 0 ,          
        @SQLStatement           = @SQLStatement,          
        @IndexOperation         = 'Release Application Lock' ,        
        @IsOnlineOperation      = @IsOnlineOperation ,   
        @RowCount               = 0 ,               
        @TableChildOperationId  = 0 ,  
        @RunStatus              = 'Error' ,             
        @TransactionId          = @TransactionId ,       
        @BatchId                = @BatchId ,             
        @ErrorText              = @ErrorMessage,             
        @SeqNo                  = 0 ,                  
        @ExitTableLoopOnError   = 1
    
    RAISERROR(@ErrorMessage, 10, 1)
END CATCH

GO

GO
--- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_ReleaseApplicationLock.sql" -----


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRun_ReleaseApplicationLock.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('4cda7a57-dc00-5892-a0ee-0824f0a5de9e' AS UNIQUEIDENTIFIER), '55C93E91515638928435B643F37F2B7F893899D228791556F20FF5912522BAC5', 'Programmable Objects\Stored Procedures\DOI.spRun_ReleaseApplicationLock.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_ReleaseApplicationLock.sql", ID: {4cda7a57-dc00-5892-a0ee-0824f0a5de9e} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67c39ea0-3068-53c9-bc4d-08b8fa12e012' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D98D6D056C670852E3035BBC707EEE617F8D092ECEDF47AB2F4157B923CBA6E2')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRun_RecoverLogRowsFromRollback.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_RecoverLogRowsFromRollback.sql", ID: {67c39ea0-3068-53c9-bc4d-08b8fa12e012} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_RecoverLogRowsFromRollback.sql" 
GO
--<Migration ID="67c39ea0-3068-53c9-bc4d-08b8fa12e012" TransactionHandling="Custom" />
IF OBJECT_ID('[DOI].[spRun_RecoverLogRowsFromRollback]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRun_RecoverLogRowsFromRollback];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


create PROCEDURE [DOI].[spRun_RecoverLogRowsFromRollback]
	@Log DOI.LogTT READONLY
	
--WITH NATIVE_COMPILATION, SCHEMABINDING
AS
/*
	EXEC DOI.spRun_RecoverLogRowsFromRollback
		@TransactionId = 'A4FBE249-2478-482A-886E-5B03964DBBD8'
*/
--NOW THAT WE HAVE ROLLED BACK, INSERT THE MISSING LOG ROWS FROM THE TABLE VAR.  THEY SHOULD STILL BE THERE DESPITE THE ROLLBACK.
--BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)
    INSERT INTO DOI.Log (   DatabaseName,
                            SchemaName ,
							TableName ,
							IndexName ,
							PartitionNumber ,
							IndexSizeInMB ,
							LoginName ,
							UserName ,
							LogDateTime ,
							SQLStatement ,
							IndexOperation ,
							IsOnlineOperation ,
							[RowCount] ,
							TableChildOperationId ,
							RunStatus ,
							ErrorText ,
							TransactionId ,
							BatchId ,
							SeqNo ,
							ExitTableLoopOnError )
    SELECT  DatabaseName,
            SchemaName ,
		    TableName ,
		    IndexName ,
		    PartitionNumber ,
		    IndexSizeInMB ,
		    LoginName ,
		    UserName ,
		    LogDateTime ,
		    SQLStatement ,
		    IndexOperation ,
		    IsOnlineOperation ,
		    [RowCount] ,
		    TableChildOperationId ,
		    RunStatus ,
		    ErrorText ,
		    TransactionId ,
		    BatchId ,
		    SeqNo ,
		    ExitTableLoopOnError		
    FROM   @Log T
    WHERE  NOT EXISTS ( SELECT 't'
						FROM   DOI.Log L
						WHERE  T.DatabaseName = L.DatabaseName
                            AND T.SchemaName = L.SchemaName
    						AND T.TableName = L.TableName
							AND T.IndexName = L.IndexName
							AND T.IndexOperation = L.IndexOperation
							AND T.RunStatus = L.RunStatus
							AND T.TableChildOperationId = L.TableChildOperationId );
--END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_RecoverLogRowsFromRollback.sql" --


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRun_RecoverLogRowsFromRollback.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('67c39ea0-3068-53c9-bc4d-08b8fa12e012' AS UNIQUEIDENTIFIER), 'D98D6D056C670852E3035BBC707EEE617F8D092ECEDF47AB2F4157B923CBA6E2', 'Programmable Objects\Stored Procedures\DOI.spRun_RecoverLogRowsFromRollback.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_RecoverLogRowsFromRollback.sql", ID: {67c39ea0-3068-53c9-bc4d-08b8fa12e012} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b37d5429-ec2f-594e-865c-5ce8ee32ba1d' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1A44670EF96445E204E061C58BD38D020055BCBB1AB67A0E1A585D446658AD92')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRun.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun.sql", ID: {b37d5429-ec2f-594e-865c-5ce8ee32ba1d} *****';

GO


-------------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun.sql" ---------------
GO
IF OBJECT_ID('[DOI].[spRun]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRun];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRun]
	@OnlineOperations BIT,
    @DatabaseName NVARCHAR(128) = NULL,
	@SchemaName NVARCHAR(128) = NULL,
	@TableName NVARCHAR(128)  = NULL,
	@BatchId UNIQUEIDENTIFIER = NULL,
	@Debug BIT = 0

AS

/*
	EXEC DOI.spRun
		@SchemaName = 'dbo',
		@TableName = 'Liabilities'

DESIGN PRINCIPLES:
1. Do one table at a time.  That way, if we have to kill the job because we're out of time then we can leave it in a consistent state.
2. If a clustered index is going to be updated, drop all the NC indexes first so they don't get rebuilt twice.  
3. Otherwise, drop & recreate indexes one at a time so you don't do any indexes that don't need updates
4. Do the bigger indexes first, then work your way down the list.
5. 
*/
SET NOCOUNT ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
SET ARITHABORT ON
SET CONCAT_NULL_YIELDS_NULL ON
SET NUMERIC_ROUNDABORT OFF
SET QUOTED_IDENTIFIER ON
SET DEADLOCK_PRIORITY 10 --the highest priority

IF @TableName IS NOT NULL AND @SchemaName IS NULL
THROW 50000, 'Please specify Schema Name when specifying a Table Name.', 1

IF ISNULL(@SchemaName, @TableName) IS NOT NULL AND @DatabaseName IS NULL
THROW 50000, 'Please specify Database Name when specifying a Table/Schema Name.', 1


DECLARE @ApplicationRunningThisProcess NVARCHAR(128) = (SELECT program_name
														FROM SYS.dm_exec_sessions 
														WHERE session_id = @@SPID)--,

IF @ApplicationRunningThisProcess <> 'Microsoft SQL Server Management Studio - Query' --SSMS IS REALLY SLOW WITH THE BELOW OPTIONS ON.
BEGIN
	SET STATISTICS PROFILE ON
	SET STATISTICS XML ON
END
ELSE
BEGIN
	SET STATISTICS PROFILE OFF
	SET STATISTICS XML OFF
END

BEGIN TRY
	DECLARE @RGWorkloadGroupName SYSNAME,
			@RGResourcePoolName SYSNAME,
			@LoginName SYSNAME,
			@ProgramName SYSNAME,
			@RGSettings VARCHAR(1000),
			@ExitTableLoopOnError BIT

	SELECT  @ProgramName = [program_name],
			@LoginName = SDES.login_name,
			@RGWorkloadGroupName = SDRGWG.[Name],
			@RGResourcePoolName = DRGRP.[name]
	FROM sys.dm_exec_sessions SDES 
		INNER JOIN sys.dm_resource_governor_workload_groups SDRGWG ON SDES.group_id = SDRGWG.group_id
		INNER JOIN sys.dm_resource_governor_resource_pools DRGRP ON SDRGWG.pool_id = DRGRP.pool_id
	WHERE SDES.session_id = @@SPID

	SET @RGSettings = '
	Resource Governor Settings:  
		Resource Pool Name:  ' + @RGResourcePoolName + ', 
		Workload Group Name:  ' + @RGWorkloadGroupName + ', 
		Login Name:  ' + @LoginName + ',
		Program Name:  ' + @ProgramName + '.'

	DECLARE @CRLF CHAR(2) = CHAR(13) + CHAR(10)

	DECLARE @CurrentDatabaseName			NVARCHAR(128),
			@CurrentSchemaName				NVARCHAR(128),
			@CurrentTableName				NVARCHAR(128) ,
			@CurrentIndexName				NVARCHAR(128) ,
			@CurrentPartitionNumber			SMALLINT ,
			@CurrentParentSchemaName		NVARCHAR(128) ,
			@CurrentParentTableName			NVARCHAR(128) ,
			@CurrentDateTime				DATETIME2,
			@SwitchAGToAsyncSQL				VARCHAR(MAX) = '',
			@SwitchAGBackToSyncSQL			VARCHAR(MAX) = '',
			@RC								INT,
			@ErrorMessage					NVARCHAR(4000),
			@CurrentSQLStatement			NVARCHAR(MAX) = '',
			@CurrentSeqNo					SMALLINT = 0,
			@CurrentIndexOperation			VARCHAR(50),
			@CurrentTableChildOperationId	SMALLINT,
			@RunStatus						VARCHAR(20),
			@TransactionId					UNIQUEIDENTIFIER = NULL,
			@IndexSizeInMB					INT,
			@RetryCount						TINYINT = 0,
			@ExitRetryLoopOnError			BIT = 0,
			@RowCount						INT = 0,
			@ParamList						NVARCHAR(500) = '@RowCountOUT INT OUTPUT',
            @DBContext                      NVARCHAR(200) 

	SELECT @SwitchAGToAsyncSQL += 'ALTER AVAILABILITY GROUP [' + AGS.name + '] MODIFY REPLICA ON ''' + replica_server_name + ''' WITH (AVAILABILITY_MODE = ASYNCHRONOUS_COMMIT)' + char(13) + char(10)
	FROM sys.availability_groups AGS 
		INNER JOIN sys.availability_replicas AR ON AR.group_id = AGS.group_id 
		INNER JOIN sys.availability_databases_cluster ADC ON AR.group_id = ADC.group_id
	WHERE @@SERVERNAME <> replica_server_name

	SELECT @SwitchAGBackToSyncSQL += 'ALTER AVAILABILITY GROUP [' + AGS.name + '] MODIFY REPLICA ON ''' + replica_server_name + ''' WITH (AVAILABILITY_MODE = SYNCHRONOUS_COMMIT)' + char(13) + char(10)
	FROM sys.availability_groups AGS 
		INNER JOIN sys.availability_replicas AR ON AR.group_id = AGS.group_id 
		INNER JOIN sys.availability_databases_cluster ADC ON AR.group_id = ADC.group_id
	WHERE @@SERVERNAME <> replica_server_name

    /************************************** TABLE LOOP (BEGIN) ********************************************/
	DECLARE Tables_Run_Cur CURSOR GLOBAL DYNAMIC FOR
		SELECT	DatabaseName,
                SchemaName, 
				TableName,
				ParentSchemaName,
				ParentTableName,
				SeqNo,
				FN.TransactionId,
				IndexName,
				FN.PartitionNumber,
				SQLStatement,
				FN.RunStatus,
				FN.IndexOperation,
				FN.TableChildOperationId,
				FN.BatchId,
				FN.ExitTableLoopOnError,
				FN.IndexSizeInMB
		FROM DOI.Queue FN
		WHERE FN.IsOnlineOperation = @OnlineOperations
			AND FN.DatabaseName = CASE WHEN @DatabaseName IS NULL THEN FN.DatabaseName ELSE @DatabaseName END 
			AND FN.ParentSchemaName = CASE WHEN @SchemaName IS NULL THEN FN.ParentSchemaName ELSE @SchemaName END 
			AND FN.ParentTableName = CASE WHEN @TableName IS NULL THEN FN.ParentTableName ELSE @TableName END 
			AND FN.BatchId = CASE WHEN @BatchId IS NULL THEN FN.BatchId ELSE @BatchId END 
		ORDER BY FN.DatabaseName ASC, FN.ParentSchemaName ASC, FN.ParentTableName ASC, FN.SeqNo ASC
					
	OPEN Tables_Run_Cur

	FETCH NEXT FROM Tables_Run_Cur INTO @CurrentDatabaseName, @CurrentSchemaName, @CurrentTableName, @CurrentParentSchemaName, @CurrentParentTableName, @CurrentSeqNo, @TransactionId, @CurrentIndexName, @CurrentPartitionNumber, @CurrentSQLStatement, @RunStatus, @CurrentIndexOperation, @CurrentTableChildOperationId, @BatchId, @ExitTableLoopOnError, @IndexSizeInMB

    SET @DBContext = @CurrentDatabaseName + N'.sys.sp_executesql'

	IF (@CurrentSchemaName + '.' + @CurrentTableName) IS NOT NULL
	BEGIN 
		EXEC DOI.spRun_LogInsert
            @CurrentDatabaseName        = @CurrentDatabaseName 
			,@CurrentSchemaName			= 'N/A'  
			,@CurrentTableName			= 'N/A'
			,@CurrentIndexName			= 'N/A'
			,@CurrentPartitionNumber	= 0
			,@IndexSizeInMB				= 0
			,@SQLStatement				= @RGSettings
			,@IndexOperation			= 'Resource Governor Settings'
			,@IsOnlineOperation			= @OnlineOperations
			,@RowCount					= 0
			,@TransactionId				= NULL 
			,@TableChildOperationId		= 0
			,@BatchId					= @BatchId
			,@SeqNo						= 0
			,@ExitTableLoopOnError		= 0
			,@RunStatus					= 'Start'
	END
    
	IF (@ProgramName LIKE N'SQLAgent - TSQL JobStep%' AND @RGWorkloadGroupName <> 'IndexMaintenanceGroup')
        OR ((SELECT is_enabled FROM sys.resource_governor_configuration) = 0)
	BEGIN
		SET @ExitTableLoopOnError = 1
		RAISERROR('Resource Governor is not turned on.  Aborting.', 16, 1)	
	END

	WHILE @@FETCH_STATUS <> -1
	BEGIN
		IF @@FETCH_STATUS <> -2
		BEGIN
			SET @ExitRetryLoopOnError = 0
            SET @ErrorMessage = NULL 

            /************************** RETRY LOOP (BEGIN) ****************************************************/
			WHILE @RetryCount <= 3 AND @ExitRetryLoopOnError = 0
			BEGIN
				BEGIN TRY
					IF @Debug = 1
					BEGIN
						SELECT	@CurrentDatabaseName,
                                @CurrentSchemaName, 
								@CurrentTableName, 
								@CurrentParentSchemaName, 
								@CurrentParentTableName, 
								@CurrentSeqNo, 
								@TransactionId, 
								@CurrentIndexName, 
								@CurrentSQLStatement, 
								@RunStatus, 
								@CurrentIndexOperation, 
								@CurrentTableChildOperationId, 
								@BatchId, 
								@ExitTableLoopOnError,
								@IndexSizeInMB
					END
					ELSE
					BEGIN 
						SET @CurrentDateTime = SYSDATETIME()

						--LOG START
						EXEC DOI.spRun_LogInsert 
                            @CurrentDatabaseName    = @CurrentDatabaseName
							,@CurrentSchemaName		= @CurrentSchemaName  
							,@CurrentTableName		= @CurrentTableName   
							,@CurrentIndexName		= @CurrentIndexName 
							,@CurrentPartitionNumber= @CurrentPartitionNumber
							,@IndexSizeInMB			= @IndexSizeInMB
							,@SQLStatement			= @CurrentSQLStatement
							,@IndexOperation		= @CurrentIndexOperation
							,@IsOnlineOperation		= @OnlineOperations
							,@RowCount				= @RowCount
							,@TransactionId			= @TransactionId 
							,@TableChildOperationId	= @CurrentTableChildOperationId
							,@BatchId				= @BatchId
							,@SeqNo					= @CurrentSeqNo
							,@ExitTableLoopOnError	= @ExitTableLoopOnError
							,@RunStatus				= 'Start'

						--UPDATE TO IN-PROGRESS
						UPDATE DOI.Queue
						SET InProgress = 1
						WHERE DatabaseName = @CurrentDatabaseName
                            AND SchemaName = @CurrentSchemaName
							AND TableName = @CurrentTableName
							AND IndexName = @CurrentIndexName
							AND IndexOperation = @CurrentIndexOperation
							AND TableChildOperationId = @CurrentTableChildOperationId

						--RUN SQL, UNLESS IT'S A BEGIN OR COMMIT TRAN.  RUN THOSE OUTSIDE THE DYNAMIC SQL OR THEY CAUSE ERRORS.
						IF @CurrentSQLStatement LIKE '%SERIALIZABLE%BEGIN TRAN%' 
						BEGIN
							SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

							BEGIN TRAN
						END
						ELSE
						IF @CurrentSQLStatement = 'COMMIT TRAN' 
						BEGIN
							COMMIT TRAN
						END
						ELSE
						IF @CurrentIndexOperation IN ('Synch Deletes', 'Synch Inserts', 'Synch Updates',  'Loading Data', 
                                                        'Free Data Space Validation', 'Free Log Space Validation', 
                                                        'Free TempDB Space Validation')
						BEGIN
							EXEC sys.sp_executesql 
								@CurrentSQLStatement, 
								@ParamList, 
								@RowCountOUT = @RowCount OUTPUT 
								
							--extract rowcount parameter and store it in variable, for use in logging.
						END
                        ELSE 
						BEGIN						
							EXEC @DBContext @CurrentSQLStatement
						END

						--LOG FINISH
						EXEC DOI.spRun_LogInsert 
                            @CurrentDatabaseName    = @CurrentDatabaseName
							,@CurrentSchemaName		= @CurrentSchemaName  
							,@CurrentTableName		= @CurrentTableName   
							,@CurrentIndexName		= @CurrentIndexName  
							,@CurrentPartitionNumber= @CurrentPartitionNumber
							,@IndexSizeInMB			= @IndexSizeInMB
							,@SQLStatement			= @CurrentSQLStatement
							,@IndexOperation		= @CurrentIndexOperation
							,@IsOnlineOperation		= @OnlineOperations 
							,@RowCount				= @RowCount
							,@TransactionId			= @TransactionId 
							,@TableChildOperationId	= @CurrentTableChildOperationId
							,@BatchId				= @BatchId
							,@SeqNo					= @CurrentSeqNo
							,@ExitTableLoopOnError	= @ExitTableLoopOnError
							,@RunStatus				= 'Finish'

						SET @RowCount = 0

						--DELETE FROM QUEUE
						DELETE DOI.Queue
						WHERE DatabaseName = @CurrentDatabaseName
                            AND SchemaName = @CurrentSchemaName   
							AND TableName = @CurrentTableName   
							AND IndexName = @CurrentIndexName 
							AND IndexOperation = @CurrentIndexOperation
							AND TableChildOperationId = @CurrentTableChildOperationId

					END 

					SET @ExitRetryLoopOnError = 1 --EXIT THE RETRY LOOP IF SUCCESSFUL.
				END TRY
				BEGIN CATCH
                    SET @ErrorMessage = ERROR_MESSAGE()

					IF ERROR_NUMBER() IN (  1204, -- SqlOutOfLocks
											1205, -- SqlDeadlockVictim
											1222 -- SqlLockRequestTimeout
											)
						AND @RetryCount < 3
					BEGIN
						SET @CurrentIndexName = ISNULL(@CurrentIndexName, '')

						EXEC DOI.spRun_LogInsert 
                            @CurrentDatabaseName    = @CurrentDatabaseName,
							@CurrentSchemaName		= @CurrentSchemaName , 
							@CurrentTableName		= @CurrentTableName ,  
							@CurrentIndexName		= @CurrentIndexName , 
							@CurrentPartitionNumber = @CurrentPartitionNumber, 
							@IndexSizeInMB			= @IndexSizeInMB ,
							@IndexOperation			= @CurrentIndexOperation,
							@IsOnlineOperation		= @OnlineOperations ,
							@RowCount				= @RowCount,
							@SQLStatement			= @CurrentSQLStatement ,
							@ErrorText				= @ErrorMessage,
							@TransactionId			= @TransactionId,
							@TableChildOperationId	= 0,
							@BatchId				= @BatchId,
							@SeqNo					= @CurrentSeqNo,
							@RunStatus				= 'Error - Retrying...',
							@ExitTableLoopOnError	= @ExitTableLoopOnError

						SET @RetryCount = @RetryCount + 1  

						WAITFOR DELAY '00:00:02'  
					END 
					ELSE IF @ErrorMessage LIKE 'NOT ENOUGH FREE SPACE%'
                    BEGIN
                        SET @CurrentIndexName = ISNULL(@CurrentIndexName, '')

						EXEC DOI.spRun_LogInsert 
                            @CurrentDatabaseName    = @CurrentDatabaseName,
							@CurrentSchemaName		= @CurrentSchemaName , 
							@CurrentTableName		= @CurrentTableName ,  
							@CurrentIndexName		= @CurrentIndexName , 
							@CurrentPartitionNumber = @CurrentPartitionNumber, 
							@IndexSizeInMB			= @IndexSizeInMB ,
							@IndexOperation			= @CurrentIndexOperation,
							@IsOnlineOperation		= @OnlineOperations ,
							@RowCount				= @RowCount,
							@SQLStatement			= @CurrentSQLStatement ,
							@ErrorText				= @ErrorMessage,
							@TransactionId			= @TransactionId,
							@TableChildOperationId	= 0,
							@BatchId				= @BatchId,
							@SeqNo					= @CurrentSeqNo,
							@RunStatus				= 'Error - Skipping...',
							@ExitTableLoopOnError	= @ExitTableLoopOnError

	                    DELETE Q
	                    FROM DOI.Queue Q
	                    WHERE Q.DatabaseName = @CurrentDatabaseName
                            AND Q.ParentSchemaName = @CurrentParentSchemaName
		                    AND Q.ParentTableName = @CurrentParentTableName

                        SET @ExitRetryLoopOnError = 1
                    END
                    ELSE
					BEGIN
						RAISERROR(@ErrorMessage, 16, 1)
					END
				END CATCH
			END
            /************************** RETRY LOOP (END) ****************************************************/

			FETCH NEXT FROM Tables_Run_Cur INTO @CurrentDatabaseName, @CurrentSchemaName, @CurrentTableName, @CurrentParentSchemaName, @CurrentParentTableName, @CurrentSeqNo, @TransactionId, @CurrentIndexName, @CurrentPartitionNumber, @CurrentSQLStatement, @RunStatus, @CurrentIndexOperation, @CurrentTableChildOperationId, @BatchId, @ExitTableLoopOnError, @IndexSizeInMB

		END --@@fetch_status <> -2
		
	END --@@fetch_status <> -1

	CLOSE Tables_Run_Cur
	DEALLOCATE Tables_Run_Cur
    /************************************** TABLE LOOP (END) ********************************************/
END TRY

BEGIN CATCH
	IF NULLIF(LTRIM(RTRIM(@ErrorMessage)), '') IS NULL
	BEGIN
        SET @ErrorMessage = ERROR_MESSAGE()
	END;

	IF @@TRANCOUNT > 0 
	BEGIN
		--BACKUP THE LOG ROWS SO WE DON'T LOSE THEM IN THE ROLLBACK.
		DECLARE @Log AS LogTT;

		WITH LastLoggedRow
		AS (SELECT   TOP 1 *
			FROM     DOI.Log
			ORDER BY LogDateTime DESC )

		UPDATE LastLoggedRow
		SET    LastLoggedRow.ErrorText = @ErrorMessage
		WHERE LastLoggedRow.TransactionId = @TransactionId;

		INSERT INTO @Log (  DatabaseName,
                            SchemaName ,
							TableName ,
							IndexName ,
							PartitionNumber ,
							IndexSizeInMB ,
							LoginName ,
							UserName ,
							LogDateTime ,
							SQLStatement ,
							IndexOperation ,
							IsOnlineOperation ,
							[RowCount] ,
							TableChildOperationId ,
							RunStatus ,
							ErrorText ,
							TransactionId ,
							BatchId ,
							SeqNo ,
							ExitTableLoopOnError) 
		EXEC DOI.spRun_GetLogRowsFromRollback
			@TransactionId = @TransactionId


		--AFTER SAVING THE LOG TRANSACTIONS, GO AHEAD AND ROLLBACK:
		ROLLBACK TRAN;

		EXEC DOI.spRun_RecoverLogRowsFromRollback
			@Log = @Log
	END

	--CLEAR THE QUEUE FOR THIS TABLE SO THAT WE ARE FORCED TO REBUILD IT FROM SCRATCH FOR THE NEXT RUN.
	DELETE Q
	FROM DOI.Queue Q
	WHERE Q.DatabaseName = @CurrentDatabaseName
        AND Q.ParentSchemaName = @CurrentParentSchemaName
		AND Q.ParentTableName = @CurrentParentTableName

	SET @CurrentDateTime = SYSDATETIME()
	SET @CurrentSchemaName = ISNULL(@CurrentSchemaName, 'N/A')
	SET @CurrentTableName = ISNULL(@CurrentTableName, 'N/A')
	SET @CurrentIndexName = ISNULL(@CurrentIndexName, 'N/A')
	SET @CurrentIndexOperation = ISNULL(@CurrentIndexOperation, 'N/A')
	SET @BatchId = ISNULL(@BatchId, '00000000-0000-0000-0000-000000000000')
	SET @CurrentPartitionNumber = ISNULL(@CurrentPartitionNumber, 0)
	SET @IndexSizeInMB = ISNULL(@IndexSizeInMB, 0)
	SET @RowCount = ISNULL(@RowCount, 0)
	SET @CurrentSeqNo = ISNULL(@CurrentSeqNo, 0)
	SET @ExitTableLoopOnError = ISNULL(@ExitTableLoopOnError, 0)

	EXEC DOI.spRun_LogInsert 
        @CurrentDatabaseName    = @CurrentDatabaseName,
		@CurrentSchemaName		= @CurrentSchemaName , 
		@CurrentTableName		= @CurrentTableName ,  
		@CurrentIndexName		= @CurrentIndexName , 
		@CurrentPartitionNumber = @CurrentPartitionNumber ,
		@IndexSizeInMB			= @IndexSizeInMB ,
		@IndexOperation			= @CurrentIndexOperation,
		@IsOnlineOperation		= @OnlineOperations ,
		@RowCount				= @RowCount,
		@SQLStatement			= @CurrentSQLStatement ,
		@ErrorText				= @ErrorMessage,
		@TransactionId			= @TransactionId,
		@TableChildOperationId	= 0,
		@BatchId				= @BatchId,
		@SeqNo					= @CurrentSeqNo,
		@RunStatus				= 'Error',
		@ExitTableLoopOnError	= @ExitTableLoopOnError

	EXEC DOI.spRun_ReleaseApplicationLock
        @DatabaseName = @CurrentDatabaseName,
        @BatchId = @BatchId,
        @IsOnlineOperation = @OnlineOperations

	EXEC DOI.spRun_DropObjects
        @CurrentDatabaseName    = @CurrentDatabaseName,
		@CurrentSchemaName		= @CurrentSchemaName,
		@CurrentTableName		= @CurrentTableName,
		@CurrentParentTableName = @CurrentParentTableName,
		@CurrentSeqNo			= @CurrentSeqNo,
		@ExitTableLoopOnError	= 1,
		@BatchId				= @BatchId,
		@DeleteTables			= 0

	--CLOSE CURSORS IF OPEN
	IF (SELECT CURSOR_STATUS('global','Tables_Run_Cur')) >= -1
	BEGIN
		IF (SELECT CURSOR_STATUS('global','Tables_Run_Cur')) > -1
		BEGIN
			CLOSE Tables_Run_Cur
		END

		DEALLOCATE Tables_Run_Cur
	END

	IF @ExitTableLoopOnError = 1
	BEGIN;
		THROW;
	END
END CATCH

--CLOSE CURSORS IF OPEN
IF (SELECT CURSOR_STATUS('global','Tables_Run_Cur')) >= -1
BEGIN
	IF (SELECT CURSOR_STATUS('global','Tables_Run_Cur')) > -1
	BEGIN
		CLOSE Tables_Run_Cur
	END

	DEALLOCATE Tables_Run_Cur
END

GO

GO
--------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun.sql" ----------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRun.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('b37d5429-ec2f-594e-865c-5ce8ee32ba1d' AS UNIQUEIDENTIFIER), '1A44670EF96445E204E061C58BD38D020055BCBB1AB67A0E1A585D446658AD92', 'Programmable Objects\Stored Procedures\DOI.spRun.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun.sql", ID: {b37d5429-ec2f-594e-865c-5ce8ee32ba1d} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('89ad4caa-739e-5f91-9ca7-6eb15386b047' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4F2724D205160607B4CE2BF74D688CE3FAB2FDD06A9DFF535861E4F4FF2B6A89')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\Utility.spEnableDisableAllFKs.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\Utility.spEnableDisableAllFKs.sql", ID: {89ad4caa-739e-5f91-9ca7-6eb15386b047} *****';

GO


---- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\Utility.spEnableDisableAllFKs.sql" -----
GO
IF OBJECT_ID('[Utility].[spEnableDisableAllFKs]') IS NOT NULL
	DROP PROCEDURE [Utility].[spEnableDisableAllFKs];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   PROCEDURE [Utility].[spEnableDisableAllFKs]
	@Action VARCHAR(10) ,
	@Debug BIT = 0

AS

/*
	exec Utility.spEnableDisableAllFKs 'disable', 1

*/
BEGIN TRY 
	DECLARE @SQL NVARCHAR(MAX) = ''

	SELECT @SQL += 'ALTER TABLE ' + ps.name + '.[' + pt.name + ']' + CASE WHEN @Action = 'Enable' THEN ' ' ELSE ' NO' END + 'CHECK CONSTRAINT ' + FK.name + CHAR(13) + CHAR(10)
    --SELECT fk.*
	FROM sys.foreign_keys fk
		INNER JOIN sys.tables pt ON pt.object_id = fk.parent_object_id
		INNER JOIN sys.schemas ps ON pt.schema_id = ps.schema_id
	WHERE is_disabled = CASE WHEN @Action = 'Disable' THEN 0 ELSE 1 END

	IF @Debug = 1
	BEGIN
		EXEC DOI.spPrintOutLongSQL
			@SQLInput = @SQL,
			@VariableName = '@SQL'
	END
	ELSE
	BEGIN
		EXEC(@SQL)
	END
END TRY
BEGIN CATCH
	THROW;
END CATCH

GO

GO
----- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\Utility.spEnableDisableAllFKs.sql" ------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\Utility.spEnableDisableAllFKs.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('89ad4caa-739e-5f91-9ca7-6eb15386b047' AS UNIQUEIDENTIFIER), '4F2724D205160607B4CE2BF74D688CE3FAB2FDD06A9DFF535861E4F4FF2B6A89', 'Programmable Objects\Stored Procedures\Utility.spEnableDisableAllFKs.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\Utility.spEnableDisableAllFKs.sql", ID: {89ad4caa-739e-5f91-9ca7-6eb15386b047} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('85d917e6-5096-5f45-865e-e1f1f0a91605' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8EB79E91835AAB35FA75447B141B2C589E5926D8F93B5A7123A16E8D012571EB')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fn_ListToTable.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fn_ListToTable.sql", ID: {85d917e6-5096-5f45-865e-e1f1f0a91605} *****';

GO


------------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fn_ListToTable.sql" ---------------
GO
IF OBJECT_ID('[DOI].[fn_ListToTable]') IS NOT NULL
	DROP FUNCTION [DOI].[fn_ListToTable];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   FUNCTION [DOI].[fn_ListToTable]
  (@p_List VARCHAR(MAX))
  RETURNS @r_List TABLE (Item VARCHAR(200) PRIMARY KEY CLUSTERED)
AS
BEGIN
DECLARE @v_POS INT,
        @v_OldPOS INT,
        @v_Done BIT,
        @v_Str VARCHAR(200)

SET @v_OldPOS = 0
SET @v_Done = 0

WHILE NOT (@v_Done = 1)
  BEGIN
  SET @v_POS = CHARINDEX(',', SUBSTRING(@p_List, @v_OldPos + 1, 250))
  IF (@v_POS > 0)
    SET @v_Str = SUBSTRING(@p_List, @v_OldPos + 1, ABS(@v_POS - 1))
    ELSE
    BEGIN
    SET @v_Str = SUBSTRING(@p_List, @v_OldPos + 1, 200)
    SET @v_Done = 1
    END

  SET @v_OldPOS = @v_OldPOS + @v_POS
  SET @v_Str = COALESCE(RTRIM(LTRIM(REPLACE(REPLACE(@v_Str,'''',''),'"',''))),'')

  IF NOT EXISTS(SELECT * FROM @r_List WHERE Item = @v_Str) AND (@v_Str <> '')
    INSERT INTO @r_List (Item) VALUES(@v_Str);
  END

RETURN

END


GO

GO
-------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fn_ListToTable.sql" ----------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fn_ListToTable.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('85d917e6-5096-5f45-865e-e1f1f0a91605' AS UNIQUEIDENTIFIER), '8EB79E91835AAB35FA75447B141B2C589E5926D8F93B5A7123A16E8D012571EB', 'Programmable Objects\Functions\DOI.fn_ListToTable.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fn_ListToTable.sql", ID: {85d917e6-5096-5f45-865e-e1f1f0a91605} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d573cff5-7b23-5eb5-994e-0d44c15d6a6f' AS UNIQUEIDENTIFIER) AND [script_checksum] = '31F05BBB3D4AE1ECE3895A58D703654DA654484BE6EBA82E6329740CE8F6EF48')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnActualIndex_NumPages.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnActualIndex_NumPages.sql", ID: {d573cff5-7b23-5eb5-994e-0d44c15d6a6f} *****';

GO


--------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnActualIndex_NumPages.sql" -----------
GO
IF OBJECT_ID('[DOI].[fnActualIndex_NumPages]') IS NOT NULL
	DROP FUNCTION [DOI].[fnActualIndex_NumPages];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   FUNCTION [DOI].[fnActualIndex_NumPages]()   

RETURNS TABLE 
WITH NATIVE_COMPILATION, SCHEMABINDING  
AS   

/*
    SELECT * FROM DOI.fnActualIndex_NumPages()   
*/

RETURN  (
            SELECT  p.database_id,
                    container_id, 
                    SUM(total_pages) AS NumPages
			FROM DOI.SysAllocationUnits a 
                INNER JOIN DOI.SysPartitions p ON p.hobt_id = a.container_id
			GROUP BY p.database_id, a.container_id
        )
GO

GO
---------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnActualIndex_NumPages.sql" ------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnActualIndex_NumPages.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('d573cff5-7b23-5eb5-994e-0d44c15d6a6f' AS UNIQUEIDENTIFIER), '31F05BBB3D4AE1ECE3895A58D703654DA654484BE6EBA82E6329740CE8F6EF48', 'Programmable Objects\Functions\DOI.fnActualIndex_NumPages.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnActualIndex_NumPages.sql", ID: {d573cff5-7b23-5eb5-994e-0d44c15d6a6f} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('21417c13-2136-59b0-bd3e-11bb918f2dac' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'C3A46492D20678AABDF9B58FDAD031A22B7E6CA934F1E7EB0781E738D5E4404D')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnActualIndexSize.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnActualIndexSize.sql", ID: {21417c13-2136-59b0-bd3e-11bb918f2dac} *****';

GO


------------ BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnActualIndexSize.sql" -------------
GO
-- <Migration ID="21417c13-2136-59b0-bd3e-11bb918f2dac" TransactionHandling="Custom" />
IF OBJECT_ID('[DOI].[fnActualIndexSize]') IS NOT NULL
	DROP FUNCTION [DOI].[fnActualIndexSize];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   FUNCTION [DOI].[fnActualIndexSize](
    @DatabaseName SYSNAME,
    @SchemaName SYSNAME, 
    @TableName SYSNAME, 
    @IndexName SYSNAME)   

RETURNS DECIMAL(10,2)
WITH NATIVE_COMPILATION, SCHEMABINDING  

/*
    set statistics io on
    set statistics time on

    select *, DOI.fnActualIndexSize(
    5,
    s.name , 
    t.name, 
    i.name)   
    from DOI.sysindexes i
        inner join DOI.systables t on t.object_id = i.object_id
        inner join DOI.sysschemas s on t.schema_id = s.schema_id
        cross apply 
*/

AS   
BEGIN ATOMIC WITH (TRANSACTION ISOLATION LEVEL = SNAPSHOT, LANGUAGE = N'English')  
  
    DECLARE @ActualIndexSize DECIMAL(10,2);
  
    SELECT  --p.object_id,
            --p.index_id,
            --SUM(a.total_pages) AS NumPages,
            --MAX(df.physical_name) AS FilePath, 
		    --MAX(LEFT(vs.volume_mount_point, 1)) AS DriveLetter,
			--CAST(CEILING(((SUM(a.total_pages) * 8) / 1024.00)) AS INT) AS TotalSpaceMB,
            @ActualIndexSize = CAST(((SUM(a.total_pages) * 8) / 1024.00) AS DECIMAL(10,2)) --AS TotalSpaceMBDec,
			--CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS INT) AS UsedSpaceMB, 
			--CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS INT) AS UsedSpaceMBDec, 
			--CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB,
			--MAX(SS.SizeCutoffValue ) AS SizeCutoffValue,
            --SUM(p.rows) AS NumRows,
            --MAX(p.data_compression_desc) COLLATE DATABASE_DEFAULT AS data_compression_desc
		FROM DOI.systables t 
            INNER JOIN DOI.sysschemas s ON t.SCHEMA_ID = s.SCHEMA_ID
            INNER JOIN DOI.SysIndexes i ON i.OBJECT_ID = t.object_id
            INNER JOIN DOI.syspartitions p ON p.OBJECT_ID = t.OBJECT_ID
                AND p.index_id = I.index_id
            INNER JOIN DOI.SysAllocationUnits a ON p.hobt_id = a.container_id
            INNER JOIN DOI.SysDatabaseFiles df ON df.data_space_id = a.data_space_id
			CROSS JOIN (SELECT CAST(SettingValue AS INT) AS SizeCutoffValue
						FROM DOI.DOISettings 
						WHERE SettingName = 'LargeTableCutoffValue')SS
            CROSS JOIN (SELECT database_id FROM DOI.SysDatabases WHERE name = @DatabaseName) DB
			INNER JOIN DOI.SysDmOsVolumeStats vs ON vs.database_id = DB.database_id
                AND vs.FILE_ID = df.FILE_ID
		WHERE s.NAME = @SchemaName
            AND t.NAME = @TableName
            AND i.NAME = @IndexName
		GROUP BY p.object_id, p.index_id
                                                             
    RETURN (@ActualIndexSize);  
  
END  
GO

GO
------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnActualIndexSize.sql" --------------


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnActualIndexSize.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('21417c13-2136-59b0-bd3e-11bb918f2dac' AS UNIQUEIDENTIFIER), 'C3A46492D20678AABDF9B58FDAD031A22B7E6CA934F1E7EB0781E738D5E4404D', 'Programmable Objects\Functions\DOI.fnActualIndexSize.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnActualIndexSize.sql", ID: {21417c13-2136-59b0-bd3e-11bb918f2dac} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8b54a884-559a-5282-aeaa-6add083a454d' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7D561363B90C6910893188BEAFEA48BFCFC9992BE86A935ABAC0E501AD7FBA0E')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnIndexPartitionAgg.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnIndexPartitionAgg.sql", ID: {8b54a884-559a-5282-aeaa-6add083a454d} *****';

GO


----------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnIndexPartitionAgg.sql" ------------
GO
IF OBJECT_ID('[DOI].[fnIndexPartitionAgg]') IS NOT NULL
	DROP FUNCTION [DOI].[fnIndexPartitionAgg];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   FUNCTION [DOI].[fnIndexPartitionAgg]()   

RETURNS TABLE 
WITH NATIVE_COMPILATION, SCHEMABINDING 
 
AS   

/*
    SELECT * FROM DOI.fnIndexPartitionAgg()   
*/

RETURN  (
    SELECT	SchemaName,
		    TableName,
		    IndexName, 
		    PartitionNumber,
		    TotalIndexPartitionSizeInMB, 
		    DataFileName, 
		    NumRows, 
		    TotalPages,
		    Fragmentation,
		    PartitionUpdateType,
		    PartitionType,
		    OptionDataCompression
--select count(*)
FROM DOI.IndexRowStorePartitions
       )



GO

GO
------------ END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnIndexPartitionAgg.sql" -------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnIndexPartitionAgg.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('8b54a884-559a-5282-aeaa-6add083a454d' AS UNIQUEIDENTIFIER), '7D561363B90C6910893188BEAFEA48BFCFC9992BE86A935ABAC0E501AD7FBA0E', 'Programmable Objects\Functions\DOI.fnIndexPartitionAgg.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnIndexPartitionAgg.sql", ID: {8b54a884-559a-5282-aeaa-6add083a454d} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('80b9d690-808a-5c9a-b27c-cc2c0ea09e87' AS UNIQUEIDENTIFIER) AND [script_checksum] = '5314E798794623CA99DD4F2DC5E6FD449267A4A10286DF1346813BC06E6125C3')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spIndexValidations.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spIndexValidations.sql", ID: {80b9d690-808a-5c9a-b27c-cc2c0ea09e87} *****';

GO


------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spIndexValidations.sql" ---------
GO
-- <Migration ID="80b9d690-808a-5c9a-b27c-cc2c0ea09e87" TransactionHandling="Custom" />

IF OBJECT_ID('DOI.trIndexesRowStore_IndexValidations') IS NOT NULL
DROP TRIGGER DOI.trIndexesRowStore_IndexValidations
GO

IF OBJECT_ID('[DOI].[spIndexValidations]') IS NOT NULL
	DROP PROCEDURE [DOI].[spIndexValidations];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   PROCEDURE [DOI].[spIndexValidations]

WITH NATIVE_COMPILATION, SCHEMABINDING

AS

/*
	EXEC DOI.spIndexValidations
*/
BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)

    DECLARE @ObjectList												VARCHAR(MAX) = '',
		    @TablesWithMoreThan1PKList								VARCHAR(MAX) = '',
		    @TablesWithMoreThan1ClusteredIndexList					VARCHAR(MAX) = '',
		    @InvalidTableNamesList									VARCHAR(MAX) = '',
		    @InvalidKeyColumnNamesList								VARCHAR(MAX) = '',
		    @InvalidIncludedColumnNamesList							VARCHAR(MAX) = '',
		    @ErrorMessage											VARCHAR(MAX) = '',
		    @AlignedIndexesWithoutIncrementalStatistics				VARCHAR(MAX) = '',
		    @FilteredIndexesWithIncrementalStatistics				VARCHAR(MAX) = '',
		    @IntendToPartitionWithPartitionColumnNotInKeyColumnList VARCHAR(MAX) = '',
		    @IndexesSetToRunAutomaticallyButTableHasNot				VARCHAR(MAX) = '',
		    @OnlineOnWithLOBKeyColumns								VARCHAR(MAX) = '',
		    @OnlineOnWithLOBIncludedColumns							VARCHAR(MAX) = '',
		    @PartitionEnabledWithBadSettings						VARCHAR(MAX) = '',
		    @NoUpdatedUtcDtColumnInTable							VARCHAR(MAX) = '',
		    @TableAndIndexStorageMismatch							VARCHAR(MAX) = '',
		    @IndexAndPartitionCompressionMismatch					VARCHAR(MAX) = '',
		    @ColumnListsWithSpacesAfterCommas						VARCHAR(MAX) = '',
		    @InvalidPartitionColumnNamesList		 				VARCHAR(MAX) = '',
            @StatisticsIncrementalNotAlignedWithTable				VARCHAR(MAX) = '',
            @StatisticsIncrementalNotAlignedWithIndex				VARCHAR(MAX) = '',
            @NonPartitionedIndexesWithIncrementalStatistics         VARCHAR(MAX) = ''

    SET @ErrorMessage = 'The following indexes have the partitioning column also listed as an INCLUDED column. Remove the INCLUDED column:  ' 

    SELECT @ObjectList += IRS.IndexName + '.' + IC.ColumnName
    FROM DOI.IndexesRowStore IRS
        INNER JOIN DOI.IndexColumns IC ON IC.DatabaseName = IRS.DatabaseName
            AND IC.SchemaName = IRS.SchemaName
            AND IC.TableName = IRS.TableName
            AND IC.IndexName = IRS.IndexName
    WHERE IC.IsIncludedColumn = 1
        AND IC.ColumnName = IRS.PartitionColumn_Desired

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000, @ErrorMessage, 1;
    END

    SET @ObjectList = ''
    SET @ErrorMessage = 'The following indexes have an included column also listed as an key column. Remove the INCLUDED column:  ' 


    SELECT @ObjectList += IRS.IndexName + ','
    FROM DOI.IndexesRowStore IRS
        INNER JOIN DOI.IndexColumns IC ON IC.DatabaseName = IRS.DatabaseName
                AND IC.SchemaName = IRS.SchemaName
                AND IC.TableName = IRS.TableName
                AND IC.IndexName = IRS.IndexName
    WHERE IC.IsIncludedColumn = 1
        AND IC.IsKeyColumn = 1

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000, @ErrorMessage, 1;
    END

    --aligned indexes on partitioned tables must have statistics incremental = on
    SET @ObjectList = ''
    SET @ErrorMessage = 'The following Unique Index(es) are partition-aligned but do not have incremental statistics.  Set OptionStatisticsIncremental to 1 for these indexes:  '

    SELECT @ObjectList += IRS.IndexName + ','
    FROM DOI.IndexesRowStore IRS
        INNER JOIN DOI.SysDatabases d ON IRS.DatabaseName = d.name
	    INNER JOIN DOI.SysSchemas s ON d.database_id = s.database_id
            AND s.name = IRS.SchemaName
	    INNER JOIN DOI.SysTables t ON t.database_id = d.database_id
            AND IRS.TableName = t.name
		    AND s.schema_id = t.schema_id
	    INNER JOIN DOI.SysIndexes i ON i.database_id = d.database_id
            AND i.object_id = t.object_id
		    AND i.Name = IRS.IndexName 
	    INNER JOIN (SELECT name AS ExistingStorage, data_space_id, type_desc AS ExistingStorageType
				    FROM DOI.SysDataSpaces) ExistingDS 
		    ON ExistingDS.data_space_id = i.data_space_id
        INNER JOIN DOI.IndexColumns IC ON IC.DatabaseName = IRS.DatabaseName
            AND IC.SchemaName = IRS.SchemaName
            AND IC.TableName = IRS.TableName
            AND IC.IndexName = IRS.IndexName
    WHERE IRS.IsUnique_Desired = 1
	    AND ISNULL(ExistingDS.ExistingStorage,'NONE') <> 'NONE' --are the indexes partitioned?
	    AND IC.ColumnName = IRS.PartitionColumn_Desired --are the indexes aligned?
	    AND IRS.OptionStatisticsIncremental_Desired = 0

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END

    --non-aligned indexes on partitioned tables cannot have statistics incremental = on
    SET @ObjectList = ''
    SET @ErrorMessage = 'The following Unique Index(es) are NOT partition-aligned but do not have incremental statistics.  Set OptionStatisticsIncremental to 0 for these indexes:  '

    SELECT @AlignedIndexesWithoutIncrementalStatistics += IRS.IndexName + ','
    FROM DOI.IndexesRowStore IRS
        INNER JOIN DOI.SysDatabases d ON IRS.DatabaseName = d.name
	    INNER JOIN DOI.SysSchemas s ON d.database_id = s.database_id
            AND s.name = IRS.SchemaName
	    INNER JOIN DOI.SysTables t ON t.database_id = d.database_id
            AND IRS.TableName = t.name
		    AND s.schema_id = t.schema_id
	    INNER JOIN DOI.SysIndexes i ON i.database_id = d.database_id
            AND i.object_id = t.object_id
		    AND i.Name = IRS.IndexName 
	    INNER JOIN (SELECT name AS ExistingStorage, data_space_id, type_desc AS ExistingStorageType
				    FROM DOI.SysDataSpaces) ExistingDS 
		    ON ExistingDS.data_space_id = i.data_space_id
    WHERE IRS.IsUnique_Desired = 1
	    AND ISNULL(ExistingDS.ExistingStorage,'NONE') <> 'NONE' --are the indexes partitioned?
	    AND IRS.OptionStatisticsIncremental_Desired = 0
        AND NOT EXISTS (SELECT 'True'
                        FROM DOI.IndexColumns IC 
                        WHERE IC.DatabaseName = IRS.DatabaseName
                            AND IC.SchemaName = IRS.SchemaName
                            AND IC.TableName = IRS.TableName
                            AND IC.IndexName = IRS.IndexName
                            AND IC.ColumnName = IRS.PartitionColumn_Desired) --are the indexes NOT aligned?

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END

    --tables with more than 1 PK
    SET @ObjectList = ''
    SET @ErrorMessage = 'The Following Table(s) have more than 1 Primary Key defined.  Delete or convert one of the Primary Keys to a Unique index:'

    SELECT @TablesWithMoreThan1PKList += SchemaName + '.' + TableName + ','
    FROM DOI.IndexesRowStore 
    WHERE IsPrimaryKey_Desired = 1 
    GROUP BY SchemaName, TableName 
    HAVING COUNT(*) > 1

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END

    --tables with more than 1 Clustered Index
    SET @ObjectList = ''
    SET @ErrorMessage = 'The Following Table(s) have more than 1 Clustered Index defined.  Delete or convert one of the Clustered Indexes to IsClustered = 0:' 

    SELECT @TablesWithMoreThan1ClusteredIndexList += SchemaName + '.' + TableName + ','
    FROM (	SELECT SchemaName, TableName 
		    FROM DOI.IndexesRowStore 
		    WHERE IsClustered_Desired = 1 
		    UNION ALL
		    SELECT SchemaName, TableName
		    FROM DOI.IndexesColumnStore
		    WHERE IsClustered_Desired = 1 ) AllIdx
    GROUP BY SchemaName, TableName 
    HAVING COUNT(*) > 1

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END


    --@PartitionEnabledWithBadSettings
    SET @ObjectList = ''
    SET @ErrorMessage = 'The Following Table(s) have a bad PartitionColumn/PartitionScheme combination:  ' 

    SELECT @PartitionEnabledWithBadSettings += AllIdx.SchemaName + '.' + AllIdx.TableName + '.' + AllIdx.IndexName + ','
    --SELECT AllIdx.IndexName, T.IntendToPartition, AllIdx.PartitionColumn, AllIdx.NewPartitionFunction
    FROM DOI.Tables T
	    INNER JOIN (SELECT	SchemaName , 
						    TableName, 
						    IndexName, 
						    PartitionColumn_Desired, 
						    Storage_Desired
				    FROM DOI.IndexesRowStore
				    UNION ALL
				    SELECT	SchemaName , 
						    TableName , 
						    IndexName, 
						    PartitionColumn_Desired, 
						    Storage_Desired
				    FROM DOI.IndexesColumnStore) AllIdx
		    ON AllIdx.SchemaName = T.SchemaName
			    AND AllIdx.TableName = T.TableName
	    LEFT JOIN DOI.SysPartitionSchemes ps ON AllIdx.Storage_Desired = ps.name
    WHERE T.ReadyToQueue = 1
        AND (T.IntendToPartition = 1
		    AND (AllIdx.PartitionColumn_Desired = 'NONE'
				    OR ps.name IS NULL))
	    OR (T.IntendToPartition = 0
		    AND (AllIdx.PartitionColumn_Desired <> 'NONE'
				    OR ps.name IS NOT NULL))

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END   


    --NEED TO VALIDATE THAT THE PARTITION SCHEME NAMES ACTUALLY EXIST IN DB.
    SET @ObjectList = ''
    SET @ErrorMessage = 'The Following Indexe(s) are intended to be partitioned but do not have the Partition Column in their Key Column List:  '

    SELECT @ObjectList += AllIdx.SchemaName + '.' + AllIdx.TableName + '.' + AllIdx.IndexName + ','
    FROM DOI.Tables T
	    INNER JOIN (SELECT DatabaseName, SchemaName, TableName, IndexName, KeyColumnList_Desired, PartitionColumn_Desired
				    FROM DOI.IndexesRowStore IRS
				    UNION ALL
				    SELECT DatabaseName, SchemaName, TableName, IndexName, ColumnList_Desired, PartitionColumn_Desired
				    FROM DOI.IndexesColumnStore ICS) AllIdx
		    ON AllIdx.SchemaName = T.SchemaName
			    AND AllIdx.TableName = T.TableName
    WHERE T.IntendToPartition = 1
	    --AND I.IsUnique = 1
	    AND NOT EXISTS (SELECT 'True'
                        FROM DOI.IndexColumns IC 
                        WHERE IC.DatabaseName = AllIdx.DatabaseName
                            AND IC.SchemaName = AllIdx.SchemaName
                            AND IC.TableName = AllIdx.TableName
                            AND IC.IndexName = AllIdx.IndexName
                            AND IC.IsKeyColumn = 1
                            AND IC.ColumnName = AllIdx.PartitionColumn_Desired) --partitioning column is NOT in the indexkey column.

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END   

    --mismatch of storage setting between index and its parent table.
    SET @ObjectList = ''
    SET @ErrorMessage = 'The Following Indexe(s) do not match the storage of their parent table:  ' 

    SELECT @ObjectList += AllIdx.SchemaName + '.' + AllIdx.TableName + '.' + AllIdx.IndexName + ','
    FROM DOI.Tables T
	    INNER JOIN (SELECT SchemaName, TableName, IndexName, Storage_Desired
				    FROM DOI.IndexesRowStore IRS
				    UNION ALL
				    SELECT SchemaName, TableName, IndexName, Storage_Desired
				    FROM DOI.IndexesColumnStore ICS) AllIdx
		    ON AllIdx.SchemaName = T.SchemaName
			    AND AllIdx.TableName = T.TableName
    WHERE AllIdx.Storage_Desired <> t.Storage_Desired

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END   

    --mismatch of compression setting between index and its partitions
    SET @ObjectList = ''
    SET @ErrorMessage = 'The Following Index Partition(s) do not match the compression setting of their parent index:  ' 

    SELECT @ObjectList += AllIdx.SchemaName + '.' + AllIdx.TableName + '.' + AllIdx.IndexName + '__' + CAST(AllIP.PartitionNumber AS VARCHAR(5)) + ','
    FROM (	SELECT SchemaName, TableName, IndexName, OptionDataCompression_Desired
		    FROM DOI.IndexesRowStore IRS
		    UNION ALL
		    SELECT SchemaName, TableName, IndexName, OptionDataCompression_Desired
		    FROM DOI.IndexesColumnStore ICS) AllIdx
	    INNER JOIN (SELECT SchemaName, TableName, IndexName, PartitionNumber, OptionDataCompression
				    FROM DOI.IndexRowStorePartitions IRS
				    UNION ALL
				    SELECT SchemaName, TableName, IndexName, PartitionNumber, OptionDataCompression
				    FROM DOI.IndexColumnStorePartitions ICS) AllIP 
		    ON AllIdx.SchemaName = AllIP.SchemaName 
			    AND AllIdx.TableName = AllIP.TableName 
			    AND AllIdx.IndexName = AllIP.IndexName 
    WHERE AllIdx.OptionDataCompression_Desired <> AllIP.OptionDataCompression

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END  

    --mismatch of Incremental setting for Statistic and partition setting for its parent table.
    SET @ObjectList = ''
    SET @ErrorMessage = 'The Following Statistic(s) have "Incremental" settings that do not match their parent table:  ' 

    SELECT @ObjectList += STM.StatisticsName + ','
    FROM DOI.[Statistics] STM
        INNER JOIN DOI.Tables T ON T.SchemaName = STM.SchemaName
            AND T.TableName = STM.TableName
    WHERE (STM.IsIncremental_Desired = 1 AND T.IntendToPartition = 0)
        OR (STM.IsIncremental_Desired = 0 AND T.IntendToPartition = 1)

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END  

    --incremental statistics with index not incremental
    SET @ObjectList = ''
    SET @ErrorMessage = 'The Following Statistic(s) have "Incremental" settings that do not match their parent index:  ' 

    SELECT @StatisticsIncrementalNotAlignedWithIndex += STM.StatisticsName + ','
    FROM DOI.[Statistics] STM
        INNER JOIN DOI.IndexesRowStore IRS ON IRS.SchemaName = STM.SchemaName
            AND IRS.TableName = STM.TableName
            AND IRS.IndexName = STM.StatisticsName
    WHERE (STM.IsIncremental_Desired = 1 AND irs.OptionStatisticsIncremental_Desired = 0)
        OR (STM.IsIncremental_Desired = 0 AND irs.OptionStatisticsIncremental_Desired = 1)

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END  

    --Invalid Table Names   
    SET @ObjectList = ''
    SET @ErrorMessage = 'The Following Table name(s) are invalid:  ' 

    SELECT @ObjectList += AllIdx.SchemaName + '.' + AllIdx.TableName + ','
    FROM  (	SELECT DatabaseName, SchemaName, TableName 
		    FROM DOI.IndexesRowStore 
		    UNION ALL
		    SELECT DatabaseName, SchemaName, TableName
		    FROM DOI.IndexesColumnStore) AllIdx
    WHERE NOT EXISTS(	SELECT 'True' 
					    FROM DOI.SysSchemas s 
						    INNER JOIN DOI.SysTables t ON s.database_id = t.database_id
                                AND t.schema_id = s.schema_id 
                            INNER JOIN DOI.SysDatabases d ON d.database_id = t.database_id
					    WHERE d.name = AllIdx.DatabaseName
                            AND s.name = AllIdx.SchemaName 
						    AND t.name = AllIdx.TableName)

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END   
	
    --Invalid Key Column Names
    SET @ObjectList = ''
    SET @ErrorMessage = 'The Following Index Column name(s) are invalid:  ' 

    SELECT @ObjectList += AllIdx.SchemaName + '.' + AllIdx.TableName + '.' + IC.ColumnName + ','
    FROM  (	SELECT DatabaseName, SchemaName, TableName, KeyColumnList_Desired
		    FROM DOI.IndexesRowStore 
		    UNION ALL
		    SELECT DatabaseName, SchemaName, TableName, ColumnList_Desired
		    FROM DOI.IndexesColumnStore) AllIdx
        INNER JOIN DOI.IndexColumns IC ON IC.DatabaseName = AllIdx.DatabaseName
            AND IC.SchemaName = AllIdx.SchemaName
            AND IC.TableName = AllIdx.TableName
    WHERE NOT EXISTS(	SELECT 'True' 
					    FROM DOI.SysSchemas s 
						    INNER JOIN DOI.SysTables t ON s.database_id = t.database_id
                                AND t.schema_id = s.schema_id 
                            INNER JOIN DOI.SysDatabases d ON d.database_id = t.database_id
						    INNER JOIN DOI.SysColumns c ON c.database_id = t.database_id
                                AND c.object_id = t.object_id
					    WHERE d.name = AllIdx.DatabaseName
                            AND s.name = AllIdx.SchemaName
						    AND t.name = AllIdx.TableName
						    AND c.name = IC.ColumnName)

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END   

    --VALIDATE THAT PARTITION COLUMN NAMES ARE VALID.
    SET @ObjectList = ''
    SET @ErrorMessage = 'The Following Partition Column name(s) are invalid:  ' 

    SELECT @ObjectList += AllIdx.SchemaName + '.' + AllIdx.TableName + '.' + AllIdx.PartitionColumn_Desired + ','
    FROM (	SELECT DatabaseName, SchemaName, TableName, KeyColumnList_Desired, PartitionColumn_Desired
		    FROM DOI.IndexesRowStore 
		    UNION ALL
		    SELECT DatabaseName, SchemaName, TableName, ColumnList_Desired, PartitionColumn_Desired
		    FROM DOI.IndexesColumnStore) AllIdx
    WHERE NOT EXISTS(	SELECT 'True' 
					    FROM DOI.SysSchemas s 
						    INNER JOIN DOI.SysTables t ON s.database_id = t.database_id
                                AND t.schema_id = s.schema_id 
                            INNER JOIN DOI.SysDatabases d ON d.database_id = t.database_id
						    INNER JOIN DOI.SysColumns c ON c.database_id = t.database_id
                                AND c.object_id = t.object_id
					    WHERE d.name = AllIdx.DatabaseName
                            AND s.name = AllIdx.SchemaName
						    AND t.name = AllIdx.TableName)

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END 

    --No UpdatedUtcDt column on a table about to be partitioned.
    SET @ObjectList = ''
    SET @ErrorMessage = 'The Following Table(s) do NOT have the UpdatedUtc column.  This column is REQUIRED for partitioning:  ' 

    SELECT @ObjectList += T.SchemaName + '.' + T.TableName + ','
    FROM DOI.Tables T
    WHERE T.IntendToPartition = 1
	    AND NOT EXISTS (SELECT 'True' 
					    FROM DOI.SysColumns c 
                            INNER JOIN DOI.SysTables TS ON TS.database_id = c.database_id
                                AND TS.object_id = c.object_id
                            INNER JOIN DOI.SysDatabases d ON d.database_id = TS.database_id
					    WHERE d.name = T.DatabaseName
                            AND TS.NAME = t.TableName
						    AND c.name = 'UpdatedUtcDt')

    IF @ObjectList <> ''
    BEGIN
        SET @ErrorMessage += @ObjectList
	    ;THROW 50000 , @ErrorMessage, 1;
    END
END    
GO
GO
-------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spIndexValidations.sql" ----------


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spIndexValidations.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('80b9d690-808a-5c9a-b27c-cc2c0ea09e87' AS UNIQUEIDENTIFIER), '5314E798794623CA99DD4F2DC5E6FD449267A4A10286DF1346813BC06E6125C3', 'Programmable Objects\Stored Procedures\DOI.spIndexValidations.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spIndexValidations.sql", ID: {80b9d690-808a-5c9a-b27c-cc2c0ea09e87} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('94c40851-8795-51b7-8fda-4699f3850ea7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '26A694B35E4F9ECE760F1E109978AFC60813CDD2250E0A0C5CC43A25154CBECA')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_UpdateData.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_UpdateData.sql", ID: {94c40851-8795-51b7-8fda-4699f3850ea7} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_UpdateData.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_System_SysIndexes_UpdateData]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_System_SysIndexes_UpdateData];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_System_SysIndexes_UpdateData]

AS

UPDATE T
SET fill_factor = CASE WHEN fill_factor = 0 THEN 100 ELSE fill_factor END
from DOI.SysIndexes T 

UPDATE T
SET key_column_list = y.IndexKeyColumnList
from DOI.SysIndexes T 
    INNER JOIN (SELECT database_id, object_id, index_id, STUFF(IndexKeyColumnList,LEN(X.IndexKeyColumnList),1,'') AS IndexKeyColumnList
                FROM DOI.SysIndexes T
                    CROSS APPLY (   SELECT C.NAME + CASE WHEN ic.is_descending_key = 1 THEN ' DESC' ELSE ' ASC' END + ','
                                    FROM DOI.SysIndexColumns ic 
                                        INNER JOIN DOI.SysColumns C ON C.column_id = ic.column_id
                                            AND C.object_id = ic.OBJECT_ID
                                            AND c.database_id = ic.database_id
                                    WHERE T.database_id = IC.database_id
                                        AND T.object_id = IC.object_id
                                        AND T.index_id = IC.index_id
                                        AND ic.is_included_column = 0
	                                    AND ic.key_ordinal > 0
                                    ORDER BY ic.key_ordinal
                                    FOR XML PATH('')) x(IndexKeyColumnList)) y
        ON T.database_id = y.database_id
            and T.object_id = y.object_id
            and T.index_id = y.index_id


UPDATE T
SET included_column_list = y.IndexIncludedColumnList
from DOI.SysIndexes T 
    INNER JOIN (SELECT database_id, object_id, index_id, STUFF(IndexIncludedColumnList,LEN(X.IndexIncludedColumnList),1,'') AS IndexIncludedColumnList
                FROM DOI.SysIndexes T
                    CROSS APPLY (   SELECT C.NAME + CASE WHEN ic.is_descending_key = 1 THEN ' DESC' ELSE ' ASC' END + ','
                                    FROM DOI.SysIndexColumns ic 
                                        INNER JOIN DOI.SysColumns C ON C.column_id = ic.column_id
                                            AND C.object_id = ic.OBJECT_ID
                                            AND c.database_id = ic.database_id
                                    WHERE T.database_id = IC.database_id
                                        AND T.object_id = IC.object_id
                                        AND T.index_id = IC.index_id
                                        AND ic.is_included_column = 1
										AND ic.key_ordinal = 0
										AND ic.partition_ordinal = 0
                                    ORDER BY ic.key_ordinal
                                    FOR XML PATH('')) x(IndexIncludedColumnList)) y
        ON T.database_id = y.database_id
            and T.object_id = y.object_id
            and T.index_id = y.index_id


UPDATE T
SET has_LOB_columns = ISNULL(IndexHasLOBColumns, 0)
from DOI.SysIndexes T 
	OUTER APPLY (	SELECT 1 AS IndexHasLOBColumns 
					FROM DOI.SysIndexColumns ic
						INNER JOIN DOI.SysColumns c ON c.object_id = ic.object_id
							AND c.column_id = ic.column_id
						INNER JOIN DOI.SysTypes ty ON c.user_type_id = ty.user_type_id
					WHERE ic.database_id = T.database_id
                        AND ic.object_id = T.object_id	
						AND ic.index_id = T.index_id
						AND ty.is_user_defined = 0
						AND (ty.name IN ('image', 'text', 'ntext') --not supported for online index rebuilds
							OR c.max_length = -1)) LOBColumns


GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_UpdateData.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_UpdateData.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('94c40851-8795-51b7-8fda-4699f3850ea7' AS UNIQUEIDENTIFIER), '26A694B35E4F9ECE760F1E109978AFC60813CDD2250E0A0C5CC43A25154CBECA', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_UpdateData.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_System_SysIndexes_UpdateData.sql", ID: {94c40851-8795-51b7-8fda-4699f3850ea7} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('00219514-b89f-5176-8e2e-d8aa1362460f' AS UNIQUEIDENTIFIER) AND [script_checksum] = '498CB2EFEC1F89088D255079EB88DCA14BC536FF7C8297E13038AE2BC469D4BE')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_All.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_All.sql", ID: {00219514-b89f-5176-8e2e-d8aa1362460f} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_All.sql" --
GO
IF OBJECT_ID('[DOI].[spRefreshStorageContainers_All]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshStorageContainers_All];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshStorageContainers_All]

AS


SELECT '
	EXEC DOI.spRefreshStorageContainers_PartitionFunctions @DatabaseName = ''' + DatabaseName + '''
	EXEC DOI.spRefreshStorageContainers_FilegroupsAndFiles @DatabaseName = ''' + DatabaseName + '''
	EXEC DOI.spRefreshStorageContainers_PartitionSchemes   @DatabaseName = ''' + DatabaseName + ''''

FROM DOI.Databases

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_All.sql" ----


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_All.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('00219514-b89f-5176-8e2e-d8aa1362460f' AS UNIQUEIDENTIFIER), '498CB2EFEC1F89088D255079EB88DCA14BC536FF7C8297E13038AE2BC469D4BE', 'Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_All.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_All.sql", ID: {00219514-b89f-5176-8e2e-d8aa1362460f} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0d640280-8f15-5395-8447-f17a2934acd1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2C120C0B6E4F1A41126004FCD4AE8B119CFA3B16F30F2742231B0497D3E04A5B')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRun_GetApplicationLock.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_GetApplicationLock.sql", ID: {0d640280-8f15-5395-8447-f17a2934acd1} *****';

GO


---- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_GetApplicationLock.sql" ------
GO
IF OBJECT_ID('[DOI].[spRun_GetApplicationLock]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRun_GetApplicationLock];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRun_GetApplicationLock]
    @DatabaseName NVARCHAR(128),
    @LockTimeout INT = 15000,
    @BatchId UNIQUEIDENTIFIER,
    @IsOnlineOperation BIT,
    @Debug BIT = 0

AS

/*
	EXEC DOI.spRun_GetApplicationLock
        @DatabaseName = 'PaymentReporting',
        @LockTimeout = 1000,
        @BatchId = '0483BDE0-118F-4865-9811-B0406C951161',
        @IsOnlineOperation = 1,
        @Debug = 1

        EXEC PaymentReporting.sys.sp_releaseapplock 
	        @DbPrincipal	= 'dbo',
	        @Resource		= 'DOI', 
	        @LockOwner		= 'Session' 

    EXEC Utility.spRefreshIndexStructures_ReleaseApplicationLock 
        @BatchId = '4B14EAD7-7C02-4F0D-9ADB-B7F49EAEFD73', 
        @IsOnlineOperation = 1

SELECT APPLOCK_TEST('dbo', 'RefreshIndexStructures', 'Exclusive', 'Session')

    SELECT * FROM UTILITY.REFRESHINDEXSTRUCTURESLOG ORDER BY LOGDATETIME DESC
*/
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

BEGIN TRY
    BEGIN TRAN
        DECLARE @TransactionId UNIQUEIDENTIFIER = NEWID(),
                @ErrorMessage NVARCHAR(2000) = 'Could not obtain the Application lock.',
                @CheckForLockSQL NVARCHAR(1000) = '',
                @ParamList NVARCHAR(100) = '',
                @GetAppLockSQL NVARCHAR(1000) = '',
                @ParamList2 NVARCHAR(100) = '',
                @SPID INT,
                @RC INT,
                @SQLStatement VARCHAR(500) = '
EXEC DOI.spRun_GetApplicationLock 
    @BatchId = ''' + CAST(@BatchId AS NVARCHAR(40)) + ''',
    @IsOnlineOperation = ' + CAST(@IsOnlineOperation AS NVARCHAR(1))

        SET @SPID = @@SPID

        --WE DON'T WANT TO USE APPLOCK_TEST() HERE BECAUSE IT ALLOWS MULTIPLE LOCK GETS AND WE ONLY WANT TO ALLOW 1.
        SET @CheckForLockSQL = N'
        SELECT @ErrorMessageOUT += ''  Lock has already been granted to '' + 
            CASE 
                WHEN request_session_id = ' + CAST(@SPID AS NVARCHAR(5)) + '
                THEN + ''this SPID (' + CAST(@SPID AS NVARCHAR(5)) + ').'' 
                ELSE ''SPID '' + CAST(request_session_id AS VARCHAR(5)) 
            END
		FROM   ' + @DatabaseName + '.sys.dm_tran_locks
		WHERE  resource_type = ''APPLICATION''
			AND request_mode = ''X''
			AND request_status = ''GRANT''
            AND request_owner_type = ''SESSION''
			AND resource_description LIKE ''%:\[DOI\]:%'' ESCAPE ''\'''

        SET @ParamList = N'@ErrorMessageOUT NVARCHAR(100) OUTPUT, @LockTimeout INT'

        IF @Debug = 1
        BEGIN
            EXEC DOI.spPrintOutLongSQL 
                @SQLInput = @CheckForLockSQL ,
                @VariableName = N'@CheckForLockSQL'
        END
        ELSE
        BEGIN
            EXEC sys.sp_executesql
                @CheckForLockSQL,
                @ParamList,
                @ErrorMessageOUT = @ErrorMessage OUTPUT,
                @LockTimeout = @LockTimeout

            IF @ErrorMessage <> 'Could not obtain the Application lock.'
            BEGIN
                RAISERROR(@ErrorMessage, 16, 1)
            END
        END
                
        SET @GetAppLockSQL = '
        EXEC @RC_OUT = ' + @DatabaseName + '.sys.sp_getapplock 
	        @DbPrincipal	= ''dbo'',
	        @Resource		= ''DOI'', 
	        @LockMode		= ''Exclusive'', 
	        @LockOwner		= ''Session'', 
	        @LockTimeout	= @LockTimeout'

        SET @ParamList = N'@RC_OUT INT OUTPUT, @LockTimeout INT'

        IF @Debug = 1
        BEGIN
            EXEC DOI.spPrintOutLongSQL 
                @SQLInput = @GetAppLockSQL ,
                @VariableName = N'@GetAppLockSQL'
        END
        ELSE
        BEGIN
            EXEC sys.sp_executesql
                @GetAppLockSQL,
                @ParamList,
                @RC_OUT = @RC OUTPUT,
                @LockTimeout = @LockTimeout

            IF @RC < 0 
            BEGIN
                SELECT  @ErrorMessage +=    CASE @RC
                                                WHEN -1 THEN 'The lock request timed out.'
                                                WHEN -2 THEN 'The lock request was canceled.'
                                                WHEN -3 THEN 'The lock request was chosen as a deadlock victim.'
                                                WHEN -999 THEN 'Parameter validation or other call error.'
                                                ELSE ''
                                            END
	            RAISERROR(@ErrorMessage, 16, 1)
            END
            ELSE
            BEGIN
                SET @ErrorMessage = 'Application Lock successfully obtained for this SPID (' + CAST(@SPID AS VARCHAR(5)) + ').'
                RAISERROR(@ErrorMessage, 10, 1)
            END

            EXEC DOI.spRun_LogInsert
                @CurrentDatabaseName    = @DatabaseName,
                @CurrentSchemaName      = N'N/A' ,    
                @CurrentTableName       = N'N/A' ,     
                @CurrentIndexName       = N'N/A' ,     
                @CurrentPartitionNumber = 0 , 
                @IndexSizeInMB          = 0 ,          
                @SQLStatement           = @SQLStatement,          
                @IndexOperation         = 'Get Application Lock' ,        
                @IsOnlineOperation      = @IsOnlineOperation ,   
                @RowCount               = 0 ,               
                @TableChildOperationId  = 0 ,  
                @RunStatus              = 'Info' ,             
                @TransactionId          = @TransactionId ,       
                @BatchId                = @BatchId ,             
                @InfoMessage            = @ErrorMessage,
                @SeqNo                  = 0 ,                  
                @ExitTableLoopOnError   = 1
        END
    COMMIT TRAN
END TRY

BEGIN CATCH
    DECLARE @ActualErrorMessage VARCHAR(1000)
    SET @ActualErrorMessage = ERROR_MESSAGE()
    SET @ErrorMessage += '-' + @ActualErrorMessage
    IF @@TRANCOUNT > 0 ROLLBACK TRAN
    EXEC DOI.spRun_LogInsert
        @CurrentDatabaseName    = @DatabaseName,
        @CurrentSchemaName      = N'N/A' ,    
        @CurrentTableName       = N'N/A' ,     
        @CurrentIndexName       = N'N/A' ,     
        @CurrentPartitionNumber = 0 , 
        @IndexSizeInMB          = 0 ,          
        @SQLStatement           = @SQLStatement,          
        @IndexOperation         = 'Get Application Lock' ,        
        @IsOnlineOperation      = @IsOnlineOperation ,   
        @RowCount               = 0 ,               
        @TableChildOperationId  = 0 ,  
        @RunStatus              = 'Error' ,             
        @TransactionId          = @TransactionId ,       
        @BatchId                = @BatchId ,             
        @ErrorText              = @ErrorMessage,             
        @SeqNo                  = 0 ,                  
        @ExitTableLoopOnError   = 1

    RAISERROR(@ErrorMessage, 10, 1)
END CATCH

GO

GO
----- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_GetApplicationLock.sql" -------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRun_GetApplicationLock.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('0d640280-8f15-5395-8447-f17a2934acd1' AS UNIQUEIDENTIFIER), '2C120C0B6E4F1A41126004FCD4AE8B119CFA3B16F30F2742231B0497D3E04A5B', 'Programmable Objects\Stored Procedures\DOI.spRun_GetApplicationLock.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_GetApplicationLock.sql", ID: {0d640280-8f15-5395-8447-f17a2934acd1} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('280a73ba-22f2-566f-a3cf-2625862c9a89' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F8F111D25494465FAF846B3955C0E839505D58119798EB8C21F11B59CB129EA2')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwFreeSpaceOnDisk.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwFreeSpaceOnDisk.sql", ID: {280a73ba-22f2-566f-a3cf-2625862c9a89} *****';

GO


-------------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwFreeSpaceOnDisk.sql" ---------------
GO
IF OBJECT_ID('[DOI].[vwFreeSpaceOnDisk]') IS NOT NULL
	DROP VIEW [DOI].[vwFreeSpaceOnDisk];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   VIEW [DOI].[vwFreeSpaceOnDisk]

AS

/*
    SELECT * FROM DOI.vwFreeSpaceOnDisk
*/

SELECT DISTINCT
    SUBSTRING(volume_mount_point, 1, 1) AS DriveLetter
    ,d.name AS DBName
    ,CASE WHEN f.type_desc = 'ROWS' THEN 'DATA' ELSE f.type_desc END AS FileType
    ,total_bytes/1024/1024 AS total_MB
    ,available_bytes/1024/1024 AS available_MB
FROM DOI.SysMasterFiles AS f
    INNER JOIN DOI.SysDatabases d ON d.database_id = f.database_id
    INNER JOIN DOI.SysDmOsVolumeStats vs ON vs.database_id = f.database_id
        AND vs.file_id = f.file_id

GO

GO
--------------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwFreeSpaceOnDisk.sql" ----------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwFreeSpaceOnDisk.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('280a73ba-22f2-566f-a3cf-2625862c9a89' AS UNIQUEIDENTIFIER), 'F8F111D25494465FAF846B3955C0E839505D58119798EB8C21F11B59CB129EA2', 'Programmable Objects\Views\DOI.vwFreeSpaceOnDisk.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwFreeSpaceOnDisk.sql", ID: {280a73ba-22f2-566f-a3cf-2625862c9a89} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('59399622-8f10-5953-af69-2695c69b3552' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0362747672D8A62C331B24F18F7226F952AFC919480848B90F53EC051AE5C6B6')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnFixStatsSampleSize.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnFixStatsSampleSize.sql", ID: {59399622-8f10-5953-af69-2695c69b3552} *****';

GO


---------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnFixStatsSampleSize.sql" ------------
GO
IF OBJECT_ID('[DOI].[fnFixStatsSampleSize]') IS NOT NULL
	DROP FUNCTION [DOI].[fnFixStatsSampleSize];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE     FUNCTION [DOI].[fnFixStatsSampleSize](@DesiredPctSampleSize TINYINT)
RETURNS TABLE
AS RETURN

/*
    select * from DOI.fnFixStatsSampleSize(99)
*/

(
    SELECT  d.name AS DatabaseName,
            s.name AS SchemaName,
            t.name AS TableName,
            st.name AS StatsName, 
            rows, 
            rows_sampled, 
            CAST((((sp.rows_sampled * 1.00)/rows) * 100) AS DECIMAL(5,2)) AS SamplePct,
            @DesiredPctSampleSize AS DesiredSamplePct,
            last_updated, 
            steps, 
            filter_definition, 
            unfiltered_rows, 
            modification_counter,
            'UPDATE STATISTICS ' + S.NAME + '.' + T.NAME + '(' + st.name + ') WITH SAMPLE ' + CAST(@DesiredPctSampleSize AS VARCHAR(3)) + ' PERCENT;' AS UpdateSampleSizeSQL
--SELECT COUNT(*)
    FROM DOI.SysStats AS st
        INNER JOIN DOI.SysDatabases d ON d.database_id = st.database_id
	    INNER JOIN DOI.SysDmDbStatsProperties sp ON sp.database_id = d.database_id
            AND sp.object_id = st.object_id
            AND sp.stats_id = st.stats_id  
        INNER JOIN  DOI.SysTables t ON t.database_id = d.database_id
            AND st.object_id = t.object_id
        INNER JOIN  DOI.SysSchemas s ON s.database_id = d.database_id
            AND s.schema_id = t.schema_id
    WHERE (((sp.rows_sampled * 1.00)/rows) * 100) < @DesiredPctSampleSize
)
GO

GO
----------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnFixStatsSampleSize.sql" -------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnFixStatsSampleSize.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('59399622-8f10-5953-af69-2695c69b3552' AS UNIQUEIDENTIFIER), '0362747672D8A62C331B24F18F7226F952AFC919480848B90F53EC051AE5C6B6', 'Programmable Objects\Functions\DOI.fnFixStatsSampleSize.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnFixStatsSampleSize.sql", ID: {59399622-8f10-5953-af69-2695c69b3552} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('38d83382-c59a-5e59-8b5c-859a57d9fa83' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CCE2113D7D976258F74FE4EE162DC56655CC97FE412D75E091BDB88BA4BA1F54')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Functions\DOI.fnRefreshMetadataForViewSQL.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnRefreshMetadataForViewSQL.sql", ID: {38d83382-c59a-5e59-8b5c-859a57d9fa83} *****';

GO


------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnRefreshMetadataForViewSQL.sql" --------
GO
IF OBJECT_ID('[DOI].[fnRefreshMetadataForViewSQL]') IS NOT NULL
	DROP FUNCTION [DOI].[fnRefreshMetadataForViewSQL];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE    FUNCTION [DOI].[fnRefreshMetadataForViewSQL](
    @ViewName SYSNAME)

RETURNS VARCHAR(MAX)

AS

/*
    SELECT DOI.fnRefreshMetadataForViewSQL('vwPartitionFunctionPartitions')

    FIGURES OUT THE ENTIRE DEPENDENCY CHAIN HERE:
    1. FROM VIEW TO SYS METADATA TABLES, 
    2. FROM SYS METADATA TABLES TO SPs THAT UPDATE THE SYS METADATA TABLES
    3. FROM SYS METADATA TABLES TO THE USER METADATA TABLES THAT HAVE COMPUTED COLUMNS BASED ON SYS METADATA TABLES.
    4. FROM THESE USER METADATA TABLES TO THE UPDATE SPs THAT UPDATE THE COMPUTED COLUMNS
*/

BEGIN
    DECLARE @SQL VARCHAR(MAX) = ''

    SET @SQL = (
                SELECT  DISTINCT 'EXEC ' + s.NAME + '.' + sp.NAME + CHAR(13) + CHAR(10)
                FROM sys.sql_expression_dependencies d
                    INNER JOIN sys.views v ON d.referencing_id = v.object_id
                    INNER JOIN sys.tables TRV ON d.referenced_id = TRV.object_id
                    INNER JOIN sys.sql_expression_dependencies dSP ON TRV.object_id = dSP.referenced_id
                    INNER JOIN sys.procedures sp ON dsp.referencing_id = sp.OBJECT_ID
                    INNER JOIN sys.schemas s ON sp.SCHEMA_ID = s.schema_id
                WHERE v.name = 'vwPartitionFunctionPartitions'--@ViewName
                    --AND TRV.name LIKE 'Sys%'
                    AND (sp.name LIKE 'spRefreshMetadata|_System|_%' ESCAPE '|'
                            OR sp.name LIKE 'spRefreshMetadata|_User|_%|_UpdateData' ESCAPE '|')
                ORDER BY 'EXEC ' + s.NAME + '.' + sp.NAME + CHAR(13) + CHAR(10)
                FOR XML PATH, TYPE).value('.', 'nvarchar(max)')

    RETURN @SQL
END


GO

GO
-------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Functions\DOI.fnRefreshMetadataForViewSQL.sql" ---------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Functions\DOI.fnRefreshMetadataForViewSQL.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('38d83382-c59a-5e59-8b5c-859a57d9fa83' AS UNIQUEIDENTIFIER), 'CCE2113D7D976258F74FE4EE162DC56655CC97FE412D75E091BDB88BA4BA1F54', 'Programmable Objects\Functions\DOI.fnRefreshMetadataForViewSQL.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Functions\DOI.fnRefreshMetadataForViewSQL.sql", ID: {38d83382-c59a-5e59-8b5c-859a57d9fa83} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('13f8806a-02f5-50d7-8f72-4ad4e48024b4' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D8043D283F8F141E8C636F65DE9ED1489B35126EBE56F72921B96B60E50F7DF7')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spInsertMetadata_PartitionFunctions.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spInsertMetadata_PartitionFunctions.sql", ID: {13f8806a-02f5-50d7-8f72-4ad4e48024b4} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spInsertMetadata_PartitionFunctions.sql" 
GO
IF OBJECT_ID('[DOI].[spInsertMetadata_PartitionFunctions]') IS NOT NULL
	DROP PROCEDURE [DOI].[spInsertMetadata_PartitionFunctions];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE    PROCEDURE [DOI].[spInsertMetadata_PartitionFunctions](
           @DatabaseName sysname
           ,@PartitionFunctionName sysname
           ,@PartitionFunctionDataType sysname
           ,@BoundaryInterval varchar(10)
           ,@NumOfFutureIntervals tinyint
           ,@InitialDate date
           ,@UsesSlidingWindow bit
           ,@SlidingWindowSize smallint
           ,@IsDeprecated bit
           ,@PartitionSchemeName nvarchar(128)
           ,@NumOfCharsInSuffix tinyint
           ,@LastBoundaryDate date
           ,@NumOfTotalPartitionFunctionIntervals smallint
           ,@NumOfTotalPartitionSchemeIntervals smallint
           ,@MinValueOfDataType varchar(20))
AS

INSERT INTO DOI.PartitionFunctions ( DatabaseName ,PartitionFunctionName ,PartitionFunctionDataType ,BoundaryInterval ,NumOfFutureIntervals ,InitialDate ,UsesSlidingWindow ,SlidingWindowSize ,IsDeprecated ,PartitionSchemeName ,NumOfCharsInSuffix ,LastBoundaryDate ,NumOfTotalPartitionFunctionIntervals ,NumOfTotalPartitionSchemeIntervals ,MinValueOfDataType )
     VALUES
           (@DatabaseName
           ,@PartitionFunctionName
           ,@PartitionFunctionDataType
           ,@BoundaryInterval
           ,@NumOfFutureIntervals
           ,@InitialDate
           ,@UsesSlidingWindow
           ,@SlidingWindowSize
           ,@IsDeprecated
           ,@PartitionSchemeName
           ,@NumOfCharsInSuffix
           ,@LastBoundaryDate
           ,@NumOfTotalPartitionFunctionIntervals
           ,@NumOfTotalPartitionSchemeIntervals
           ,@MinValueOfDataType)

EXEC [DOI].[spRefreshMetadata_System_PartitionFunctionsAndSchemes]

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spInsertMetadata_PartitionFunctions.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spInsertMetadata_PartitionFunctions.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('13f8806a-02f5-50d7-8f72-4ad4e48024b4' AS UNIQUEIDENTIFIER), 'D8043D283F8F141E8C636F65DE9ED1489B35126EBE56F72921B96B60E50F7DF7', 'Programmable Objects\Stored Procedures\DOI.spInsertMetadata_PartitionFunctions.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spInsertMetadata_PartitionFunctions.sql", ID: {13f8806a-02f5-50d7-8f72-4ad4e48024b4} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('be05a93b-de9b-5ac4-94be-5f7daa268957' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A608B5BE1E5F93D0230C9C09C584027B6F04C2C5B670B9B4F6C5CB67F36D02CD')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spQueue_RenameStatistics.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue_RenameStatistics.sql", ID: {be05a93b-de9b-5ac4-94be-5f7daa268957} *****';

GO


---- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue_RenameStatistics.sql" ------
GO
IF OBJECT_ID('[DOI].[spQueue_RenameStatistics]') IS NOT NULL
	DROP PROCEDURE [DOI].[spQueue_RenameStatistics];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spQueue_RenameStatistics]
    @DatabaseName NVARCHAR(128) = NULL,
    @SchemaName NVARCHAR(128) = NULL,
    @TableName NVARCHAR(128) = NULL,
    @Debug BIT = 0

AS

/*
    EXEC DOI.spQueue_RenameStatistics
        --@DatabaseName = 'PaymentReporting',
        --@SchemaName = 'dbo',
        --@TableName = 'PartitioningTestAutomationTable',
        @Debug = 1
*/

DECLARE @RenameStatisticsSQL NVARCHAR(MAX) = ''

SELECT @RenameStatisticsSQL += '
EXEC ' + @DatabaseName + '.sys.sp_rename 
    @objname = N''' + s.name + '.' + t.name + '.' + ST.NAME + ''', 
    @newname = N''ST_' + LEFT(T.NAME + '_' + REPLACE(STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL), ',', '_'), 125) + ''',
    @objtype = N''STATISTICS'';' + CHAR(13) + CHAR(10)
FROM DOI.SysStats st
    INNER JOIN DOI.SysDatabases d ON d.database_id = st.database_id
    INNER JOIN DOI.SysTables t ON st.database_id = t.database_id
        AND st.object_id = t.object_id
    INNER JOIN DOI.SysSchemas s ON s.database_id = t.database_id
        AND t.schema_id = s.schema_id
    CROSS APPLY (	SELECT c.name + ',' 
					FROM DOI.SysStatsColumns stc 
						INNER JOIN DOI.SysColumns c ON c.database_id = stc.database_id
                            AND stc.object_id = c.object_id
							AND stc.column_id = c.column_id
					WHERE stc.database_id = st.database_id
                        AND stc.object_id = st.object_id 
						AND stc.stats_id = st.stats_id
                    ORDER BY stc.stats_column_id ASC
					FOR XML PATH('')) StatsColumns(StatsColumnList)
    INNER JOIN DOI.Tables T2 ON T2.DatabaseName = d.name
        AND S.NAME = T2.SchemaName
        AND T.NAME = T2.TableName
WHERE NOT EXISTS (SELECT 'True' 
                    FROM DOI.SysIndexes i 
                    WHERE i.database_id = st.database_id
                        AND i.object_id = st.object_id 
                        AND i.name = st.name) --exclude statistics from indexes
    AND NOT EXISTS (SELECT 'True' 
                    FROM DOI.SysStats st2
                    WHERE st2.database_id = T.database_id
                        AND st2.name = 'ST_' + LEFT(T.NAME + '_' + REPLACE(STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL), ',', '_'), 125))
    AND st.name <> 'ST_' + LEFT(T.NAME + '_' + REPLACE(STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL), ',', '_'), 125)
ORDER BY d.name, s.name, t.name, st.name



IF @Debug = 1
BEGIN
    EXEC DOI.spPrintOutLongSQL 
        @SQLInput = @RenameStatisticsSQL,
        @VariableName = N'@RenameStatisticsSQL'
END
ELSE
BEGIN
    EXEC (@RenameStatisticsSQL)
END 

DECLARE @DeleteBadlyNamedDuplicateStatisticsSQL NVARCHAR(MAX) = ''

SELECT @DeleteBadlyNamedDuplicateStatisticsSQL += '
DROP STATISTICS ' + s.name + '.' + t.name + '.' + ST.NAME + CHAR(13) + CHAR(10)
FROM DOI.SysStats st
    INNER JOIN DOI.SysDatabases d ON d.database_id = st.database_id
    INNER JOIN DOI.SysTables t ON st.database_id = t.database_id
        AND st.object_id = t.object_id
    INNER JOIN DOI.SysSchemas s ON s.database_id = t.database_id
        AND t.schema_id = s.schema_id
    CROSS APPLY (	SELECT c.name + ',' 
					FROM DOI.SysStatsColumns stc 
						INNER JOIN DOI.SysColumns c ON c.database_id = stc.database_id
                            AND stc.object_id = c.object_id
							AND stc.column_id = c.column_id
					WHERE stc.database_id = st.database_id
						AND stc.stats_id = st.stats_id
                    ORDER BY stc.stats_column_id ASC
					FOR XML PATH('')) StatsColumns(StatsColumnList)
    INNER JOIN DOI.Tables T2 ON T2.DatabaseName = d.name
        AND S.NAME = T2.SchemaName COLLATE DATABASE_DEFAULT
        AND T.NAME = T2.TableName COLLATE DATABASE_DEFAULT
WHERE NOT EXISTS (  SELECT 'True' 
                    FROM DOI.SysIndexes i 
                    WHERE i.database_id = st.database_id
                        AND i.object_id = st.object_id 
                        AND i.name = st.name) --exclude statistics from indexes
    AND EXISTS (SELECT 'True' 
                FROM DOI.SysStats st2
                WHERE st2.database_id = T.database_id
                    AND st2.name = 'ST_' + LEFT(T.NAME + '_' + REPLACE(STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL), ',', '_'), 125))
    AND st.name <> 'ST_' + LEFT(T.NAME + '_' + REPLACE(STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL), ',', '_'), 125)
ORDER BY d.name, s.name, t.name, st.name

IF @Debug = 1
BEGIN
    EXEC DOI.spPrintOutLongSQL 
        @SQLInput = @DeleteBadlyNamedDuplicateStatisticsSQL,
        @VariableName = N'@DeleteBadlyNamedDuplicateStatisticsSQL'
END
ELSE
BEGIN
    EXEC (@DeleteBadlyNamedDuplicateStatisticsSQL)
END 

GO

GO
----- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue_RenameStatistics.sql" -------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spQueue_RenameStatistics.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('be05a93b-de9b-5ac4-94be-5f7daa268957' AS UNIQUEIDENTIFIER), 'A608B5BE1E5F93D0230C9C09C584027B6F04C2C5B670B9B4F6C5CB67F36D02CD', 'Programmable Objects\Stored Procedures\DOI.spQueue_RenameStatistics.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue_RenameStatistics.sql", ID: {be05a93b-de9b-5ac4-94be-5f7daa268957} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('86e35b0f-6f37-5ccf-a0f3-75c9385b4835' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9DBED2D3DEB8307B8593D488B6A2C526A85DA5AD9180D04A4743FB2D69C6CB7E')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spQueue_StatisticsNotInMetadata.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue_StatisticsNotInMetadata.sql", ID: {86e35b0f-6f37-5ccf-a0f3-75c9385b4835} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue_StatisticsNotInMetadata.sql" -
GO
IF OBJECT_ID('[DOI].[spQueue_StatisticsNotInMetadata]') IS NOT NULL
	DROP PROCEDURE [DOI].[spQueue_StatisticsNotInMetadata];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spQueue_StatisticsNotInMetadata]
        @DatabaseName SYSNAME = NULL,
        @SchemaName SYSNAME = NULL,
        @TableName SYSNAME = NULL
AS

/*
    EXEC DOI.spQueue_StatisticsNotInMetadata
        @DatabaseName = 'PaymentReporting',
        @SchemaName = 'dbo',
        @TableName = 'Bai2BankTransactions'
*/

INSERT INTO DOI.[Statistics] ( SchemaName ,TableName ,StatisticsName ,StatisticsColumnList_Desired ,SampleSizePct_Desired ,IsFiltered_Desired ,FilterPredicate_Desired ,IsIncremental_Desired ,NoRecompute_Desired ,LowerSampleSizeToDesired ,ReadyToQueue )
SELECT  s.name, 
        t.name, 
        CASE 
            WHEN st.name LIKE '|_WA%' ESCAPE '|' 
            THEN 'ST_' + T.NAME + '_' + REPLACE(STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL), ',', '_') 
            ELSE ST.NAME 
        END,
        STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL),
        20,
        has_filter,
        filter_definition,
        CAST(is_incremental AS VARCHAR(1)),
        CAST(no_recompute AS VARCHAR(1)),
        0,
        1
FROM DOI.SysStats AS ST 	    
    INNER JOIN DOI.SysDatabases d ON d.database_id = ST.database_id
	CROSS APPLY (	SELECT c.name + ',' 
					FROM DOI.SysStatsColumns stc 
						INNER JOIN DOI.SysColumns c ON stc.database_id = c.database_id
                            AND stc.object_id = c.object_id
							AND stc.column_id = c.column_id
					WHERE stc.database_id = st.database_id
                        AND stc.object_id = st.object_id 
						AND stc.stats_id = st.stats_id
                    ORDER BY stc.stats_column_id ASC
					FOR XML PATH('')) StatsColumns(StatsColumnList)
	INNER JOIN DOI.SysDmDbStatsProperties sp ON sp.database_id = ST.database_id
        AND sp.object_id = st.object_id
        AND sp.stats_id = st.stats_id
    INNER JOIN DOI.SysTables t ON st.database_id = t.database_id
        AND st.object_id = t.object_id
    INNER JOIN DOI.SysSchemas s ON s.database_id = t.database_id
        AND s.schema_id = t.schema_id
    INNER JOIN DOI.Tables TM ON TM.DatabaseName = d.name
        AND TM.SchemaName = S.name  
        AND TM.TableName = t.name
WHERE d.name = CASE WHEN @DatabaseName IS NULL THEN S.NAME ELSE @DatabaseName END
    AND S.NAME = CASE WHEN @SchemaName IS NULL THEN S.NAME ELSE @SchemaName END
    AND T.NAME = CASE WHEN @TableName IS NULL THEN T.NAME ELSE @TableName END
    AND st.name NOT LIKE 'NCCI|_%' ESCAPE '|'
    AND st.name NOT LIKE 'CCI|_%' ESCAPE '|'
    AND NOT EXISTS( SELECT 'True' 
                    FROM DOI.[Statistics] STM
                    WHERE d.name = STM.DatabaseName
                        AND s.name = STM.SchemaName
                        AND t.name = STM.TableName
                        AND stm.StatisticsName =    CASE 
                                                        WHEN st.name LIKE '|_WA%' ESCAPE '|' 
                                                        THEN 'ST_' + T.NAME + '_' + REPLACE(STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL), ',', '_') 
                                                        ELSE ST.NAME 
                                                    END)
ORDER BY d.name, s.name, t.name, st.name

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spQueue_StatisticsNotInMetadata.sql" ---


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spQueue_StatisticsNotInMetadata.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('86e35b0f-6f37-5ccf-a0f3-75c9385b4835' AS UNIQUEIDENTIFIER), '9DBED2D3DEB8307B8593D488B6A2C526A85DA5AD9180D04A4743FB2D69C6CB7E', 'Programmable Objects\Stored Procedures\DOI.spQueue_StatisticsNotInMetadata.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spQueue_StatisticsNotInMetadata.sql", ID: {86e35b0f-6f37-5ccf-a0f3-75c9385b4835} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('97202a2f-ee2c-4ac4-9e07-9ee58e0fed22' AS UNIQUEIDENTIFIER) AND [script_checksum] = '79AC965B6F60021A6E13384D29C0384466AE7F5F7E4AA3549B25D6F069C61369')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_2_Constraints.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_2_Constraints.sql", ID: {97202a2f-ee2c-4ac4-9e07-9ee58e0fed22} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_2_Constraints.sql" 
GO
-- <Migration ID="97202a2f-ee2c-4ac4-9e07-9ee58e0fed22"  TransactionHandling="Custom"/>
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_2_Constraints]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_2_Constraints];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
-- <Migration ID="97202a2f-ee2c-4ac4-9e07-9ee58e0fed22" />
CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_2_Constraints]

WITH NATIVE_COMPILATION, SCHEMABINDING
AS

/*
    EXEC DOI.[spRefreshMetadata_User_2_Constraints]
*/

BEGIN ATOMIC WITH (LANGUAGE = 'English', TRANSACTION ISOLATION LEVEL = SNAPSHOT)
    --EXEC DOI.spRefreshMetadata_User_Constraints_CreateTables
    EXEC DOI.spRefreshMetadata_User_Constraints_InsertData
    EXEC DOI.spRefreshMetadata_User_Constraints_UpdateData
END
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_2_Constraints.sql" 


GO
IF @@TRANCOUNT <> 0
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_2_Constraints.sql" has left the transaction in an open state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). As this migration has TransactionMode=''Custom'' set, please ensure that all transactions are committed or rolled-back by the end of the migration script. Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('97202a2f-ee2c-4ac4-9e07-9ee58e0fed22' AS UNIQUEIDENTIFIER), '79AC965B6F60021A6E13384D29C0384466AE7F5F7E4AA3549B25D6F069C61369', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_2_Constraints.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_2_Constraints.sql", ID: {97202a2f-ee2c-4ac4-9e07-9ee58e0fed22} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('eeb69c44-3952-5b26-bc89-54d65a99f8de' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6D8C2C505662E11F66CEF495F9AABA09F14D4857BD8009DAED2E761598780A49')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_96_BusinessHoursSchedule.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_96_BusinessHoursSchedule.sql", ID: {eeb69c44-3952-5b26-bc89-54d65a99f8de} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_96_BusinessHoursSchedule.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshMetadata_User_96_BusinessHoursSchedule]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadata_User_96_BusinessHoursSchedule];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRefreshMetadata_User_96_BusinessHoursSchedule]
AS

DELETE DOI.BusinessHoursSchedule

INSERT INTO DOI.BusinessHoursSchedule ( DatabaseName, DayOfWeekId, StartUtcMilitaryTime, IsBusinessHours, IsEnabled )
VALUES   ('PaymentReporting', 1, '00:00:00',0,1)
        ,('PaymentReporting', 1, '17:00:00',1,1)
        ,('PaymentReporting', 2, '00:00:00',1,1)
        ,('PaymentReporting', 3, '00:00:00',1,1)
        ,('PaymentReporting', 4, '00:00:00',1,1)
        ,('PaymentReporting', 5, '00:00:00',1,1)
        ,('PaymentReporting', 6, '00:00:00',1,1)
        ,('PaymentReporting', 7, '00:00:00',0,1)
GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_96_BusinessHoursSchedule.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_96_BusinessHoursSchedule.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('eeb69c44-3952-5b26-bc89-54d65a99f8de' AS UNIQUEIDENTIFIER), '6D8C2C505662E11F66CEF495F9AABA09F14D4857BD8009DAED2E761598780A49', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_96_BusinessHoursSchedule.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadata_User_96_BusinessHoursSchedule.sql", ID: {eeb69c44-3952-5b26-bc89-54d65a99f8de} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1fd49bd4-8527-5a1d-8baa-0195fa202add' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7D5779D5E4161662CC02A80BF9D30DB2D1640D06791F7CFEE39793068933BDFC')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshMetadataForView.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadataForView.sql", ID: {1fd49bd4-8527-5a1d-8baa-0195fa202add} *****';

GO


---- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadataForView.sql" ------
GO
IF OBJECT_ID('[DOI].[spRefreshMetadataForView]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshMetadataForView];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [DOI].[spRefreshMetadataForView]
    @ViewName SYSNAME
    
AS

DECLARE @SQL VARCHAR(MAX) = DOI.fnRefreshMetadataForViewSQL(@ViewName)

EXEC(@SQL)
GO

GO
----- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshMetadataForView.sql" -------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshMetadataForView.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('1fd49bd4-8527-5a1d-8baa-0195fa202add' AS UNIQUEIDENTIFIER), '7D5779D5E4161662CC02A80BF9D30DB2D1640D06791F7CFEE39793068933BDFC', 'Programmable Objects\Stored Procedures\DOI.spRefreshMetadataForView.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshMetadataForView.sql", ID: {1fd49bd4-8527-5a1d-8baa-0195fa202add} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('332dee8f-afe6-54ca-a457-7febe8020dc1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '50716C4FD3C892DFF7F813A5C9338859C6B02AF6ED5BA5AA053C04DF7A65C4F8')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_AddNewPartition.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_AddNewPartition.sql", ID: {332dee8f-afe6-54ca-a457-7febe8020dc1} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_AddNewPartition.sql" 
GO
IF OBJECT_ID('[DOI].[spRefreshStorageContainers_AddNewPartition]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRefreshStorageContainers_AddNewPartition];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE     PROCEDURE [DOI].[spRefreshStorageContainers_AddNewPartition]
    @DatabaseName SYSNAME,
	@PartitionFunctionName SYSNAME = NULL,
	@Debug BIT = 0
AS

/*
	exec DOI.spRefreshStorageContainers_AddNewPartition
        @DatabaseName = 'PaymentReporting',
        @PartitionFunctionName = 'pfMonthlyUnitTest',
		@Debug = 1
*/

DECLARE @SetNextUseFileGroupSQL VARCHAR(MAX) = '',
		@PartitionFunctionSplitSQL VARCHAR(MAX) = ''

--1. create new file and filegroup
EXEC DOI.spRefreshStorageContainers_FilegroupsAndFiles 
    @DatabaseName = @DatabaseName,
    @Debug = @Debug

--2. alter partition function split range...this includes the SET NEXT filegroup command.
SELECT @PartitionFunctionSplitSQL += PartitionFunctionSplitSQL + CHAR(13) + CHAR(10)
FROM DOI.vwPartitionFunctionPartitions 
WHERE IsDeprecated = 0
    AND DatabaseName = @DatabaseName
    AND PartitionFunctionName = CASE WHEN @PartitionFunctionName IS NULL THEN PartitionFunctionName ELSE @PartitionFunctionName END
	AND IsPartitionMissing = 1


IF @Debug = 1
BEGIN
	EXEC DOI.spPrintOutLongSQL 
		@SQLInput =  @PartitionFunctionSplitSQL,
	    @VariableName = N'@PartitionFunctionSplitSQL' 
END
ELSE
BEGIN
	EXEC(@PartitionFunctionSplitSQL)
END



GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_AddNewPartition.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_AddNewPartition.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('332dee8f-afe6-54ca-a457-7febe8020dc1' AS UNIQUEIDENTIFIER), '50716C4FD3C892DFF7F813A5C9338859C6B02AF6ED5BA5AA053C04DF7A65C4F8', 'Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_AddNewPartition.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRefreshStorageContainers_AddNewPartition.sql", ID: {332dee8f-afe6-54ca-a457-7febe8020dc1} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('609d1ae3-e60e-5a80-af80-c0b6c18ab20a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'ABF3F7A117E2A9373D83C4AEAB58349F5DAF1C6A6812A74861A702DF7C5958D1')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRun_RenameDefaultConstraints.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_RenameDefaultConstraints.sql", ID: {609d1ae3-e60e-5a80-af80-c0b6c18ab20a} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_RenameDefaultConstraints.sql" --
GO
IF OBJECT_ID('[DOI].[spRun_RenameDefaultConstraints]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRun_RenameDefaultConstraints];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRun_RenameDefaultConstraints]
    @DatabaseName SYSNAME = null,
	@Debug BIT = 0

AS

/*
	EXEC DOI.spRun_RenameDefaultConstraints @Debug = 1
*/

DECLARE @RenameDefaultConstraints VARCHAR(MAX) = ''

SELECT @RenameDefaultConstraints += 'EXEC ' + @DatabaseName + '.sys.sp_rename @objname = ''' + s.name + '.' + d.name + ''', @newname = ''Def_' + t.name + '_' + c.name + ''', @objtype =''OBJECT''' + CHAR(13) + CHAR(10)
--SELECT *
FROM DOI.SysDefaultConstraints d
    INNER JOIN DOI.SysDatabases db ON db.database_id = d.database_id
	INNER JOIN DOI.SysSchemas s ON s.schema_id = d.schema_id
	INNER JOIN DOI.SysTables t ON d.parent_object_id = t.object_id
	INNER JOIN DOI.SysColumns c ON c.object_id = t.object_id
		AND d.parent_column_id = c.column_id
WHERE db.name = @DatabaseName
    AND d.name <> 'Def_' + t.name + '_' + c.name

IF @Debug = 1
BEGIN
	EXEC DOI.spPrintOutLongSQL 
		@SQLInput = @RenameDefaultConstraints ,
	    @VariableName = N'@RenameDefaultConstraints'
END
ELSE
BEGIN
	EXEC(@RenameDefaultConstraints)
END

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_RenameDefaultConstraints.sql" ----


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRun_RenameDefaultConstraints.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('609d1ae3-e60e-5a80-af80-c0b6c18ab20a' AS UNIQUEIDENTIFIER), 'ABF3F7A117E2A9373D83C4AEAB58349F5DAF1C6A6812A74861A702DF7C5958D1', 'Programmable Objects\Stored Procedures\DOI.spRun_RenameDefaultConstraints.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_RenameDefaultConstraints.sql", ID: {609d1ae3-e60e-5a80-af80-c0b6c18ab20a} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8fa4dbd5-1333-5b01-9b82-429be13cf839' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D1888189EBC53D0832E9C48A639B63CFFCE53C50C31DED59F32653ECB837AC55')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRun_RenameStatistics.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_RenameStatistics.sql", ID: {8fa4dbd5-1333-5b01-9b82-429be13cf839} *****';

GO


----- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_RenameStatistics.sql" -------
GO
IF OBJECT_ID('[DOI].[spRun_RenameStatistics]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRun_RenameStatistics];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRun_RenameStatistics]
    @DatabaseName NVARCHAR(128) = NULL,
    @SchemaName NVARCHAR(128) = NULL,
    @TableName NVARCHAR(128) = NULL,
    @Debug BIT = 0

AS

/*
    EXEC DOI.[spRun_RenameStatistics]
        --@DatabaseName  = 'PaymentReporting',
        --@SchemaName = 'dbo',
        --@TableName = 'PartitioningTestAutomationTable',
        @Debug = 1
*/

DECLARE @RenameStatisticsSQL NVARCHAR(MAX) = ''

SELECT @RenameStatisticsSQL += '
EXEC ' + d.name + '.sys.sp_rename 
    @objname = N''' + s.name + '.' + t.name + '.' + ST.NAME + ''', 
    @newname = N''ST_' + LEFT(T.NAME + '_' + REPLACE(STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL), ',', '_'), 125) + ''',
    @objtype = N''STATISTICS'';' + CHAR(13) + CHAR(10)
FROM DOI.SysStats st
    INNER JOIN DOI.SysDatabases d ON d.database_id = st.database_id
    INNER JOIN DOI.SysTables t ON t.database_id = d.database_id
        AND st.object_id = t.object_id
    INNER JOIN DOI.SysSchemas s ON s.database_id = t.database_id
        AND t.schema_id = s.schema_id
    CROSS APPLY (	SELECT c.name + ',' 
					FROM DOI.SysStatsColumns stc 
						INNER JOIN DOI.SysColumns c ON stc.object_id = c.object_id
							AND stc.column_id = c.column_id
					WHERE stc.database_id = st.database_id
                        AND stc.object_id = st.object_id 
						AND stc.stats_id = st.stats_id
                    ORDER BY stc.stats_column_id ASC
					FOR XML PATH('')) StatsColumns(StatsColumnList)
    INNER JOIN DOI.Tables T2 ON d.name = T2.DatabaseName
        AND S.NAME = T2.SchemaName
        AND T.NAME = T2.TableName
WHERE NOT EXISTS (SELECT 'True' 
                    FROM DOI.SysIndexes i
                    WHERE i.database_id = st.database_id
                        AND i.object_id = st.object_id 
                        AND i.name = st.name) --exclude statistics from indexes
    AND NOT EXISTS (SELECT 'True' 
                    FROM DOI.SysStats st2
                    WHERE st2.database_id = st.database_id
                        AND st2.name = 'ST_' + LEFT(T.NAME + '_' + REPLACE(STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL), ',', '_'), 125))
    AND st.name <> 'ST_' + LEFT(T.NAME + '_' + REPLACE(STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL), ',', '_'), 125)
ORDER BY d.name, s.name, t.name, st.name



IF @Debug = 1
BEGIN
    EXEC DOI.spPrintOutLongSQL 
        @SQLInput = @RenameStatisticsSQL,
        @VariableName = N'@RenameStatisticsSQL'
END
ELSE
BEGIN
    EXEC (@RenameStatisticsSQL)
END 

DECLARE @DeleteBadlyNamedDuplicateStatisticsSQL NVARCHAR(MAX) = ''

SELECT @DeleteBadlyNamedDuplicateStatisticsSQL += '
DROP STATISTICS ' + s.name + '.' + t.name + '.' + ST.NAME + CHAR(13) + CHAR(10)
FROM DOI.SysStats st
    INNER JOIN DOI.SysDatabases d ON d.database_id = st.database_id
    INNER JOIN DOI.SysTables t ON t.database_id = d.database_id
        AND st.object_id = t.object_id
    INNER JOIN DOI.SysSchemas s ON s.database_id = t.database_id
        AND t.schema_id = s.schema_id
    CROSS APPLY (	SELECT c.name + ',' 
					FROM DOI.SysStatsColumns stc 
						INNER JOIN DOI.SysColumns c ON stc.object_id = c.object_id
							AND stc.column_id = c.column_id
					WHERE stc.database_id = st.database_id
                        AND stc.object_id = st.object_id
						AND stc.stats_id = st.stats_id
                    ORDER BY stc.stats_column_id ASC
					FOR XML PATH('')) StatsColumns(StatsColumnList)
    INNER JOIN DOI.Tables T2 ON d.name = T2.DatabaseName
        AND S.NAME = T2.SchemaName
        AND T.NAME = T2.TableName
WHERE NOT EXISTS (SELECT 'True' 
                    FROM DOI.SysIndexes i
                    WHERE i.database_id = st.database_id
                        AND i.object_id = st.object_id 
                        AND i.name = st.name) --exclude statistics from indexes
    AND EXISTS (SELECT 'True' 
                FROM DOI.SysStats st2
                WHERE st2.database_id = st.database_id
                    AND st2.name = 'ST_' + LEFT(T.NAME + '_' + REPLACE(STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL), ',', '_'), 125))
    AND st.name <> 'ST_' + LEFT(T.NAME + '_' + REPLACE(STUFF(StatsColumns.StatsColumnList, LEN(StatsColumns.StatsColumnList), 1,NULL), ',', '_'), 125)
ORDER BY d.name, s.name, t.name, st.name

IF @Debug = 1
BEGIN
    EXEC DOI.spPrintOutLongSQL 
        @SQLInput = @DeleteBadlyNamedDuplicateStatisticsSQL,
        @VariableName = N'@DeleteBadlyNamedDuplicateStatisticsSQL'
END
ELSE
BEGIN
    EXEC (@DeleteBadlyNamedDuplicateStatisticsSQL)
END 


GO

GO
------ END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_RenameStatistics.sql" --------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRun_RenameStatistics.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('8fa4dbd5-1333-5b01-9b82-429be13cf839' AS UNIQUEIDENTIFIER), 'D1888189EBC53D0832E9C48A639B63CFFCE53C50C31DED59F32653ECB837AC55', 'Programmable Objects\Stored Procedures\DOI.spRun_RenameStatistics.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_RenameStatistics.sql", ID: {8fa4dbd5-1333-5b01-9b82-429be13cf839} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7b580a14-b78c-5500-a377-d7bbfe30efe7' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B9C682484706D2CBB9301AA368DC48AA0F951B5506CBE5C0DF4C3C30B8FF6D2E')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\DOI.spRun_RevertRename.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_RevertRename.sql", ID: {7b580a14-b78c-5500-a377-d7bbfe30efe7} *****';

GO


------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_RevertRename.sql" ---------
GO
IF OBJECT_ID('[DOI].[spRun_RevertRename]') IS NOT NULL
	DROP PROCEDURE [DOI].[spRun_RevertRename];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [DOI].[spRun_RevertRename]
    @DatabaseName SYSNAME,
	@SchemaName SYSNAME,
	@TableName SYSNAME,
	@Debug		BIT = 0

AS

/*
	EXEC DOI.spRun_RevertRename
		@SchemaName = 'dbo',
		@TableName = 'Pays',
		@Debug = 1
*/

--get all the rename revert SQLs, insert into queue, and then run them.
DECLARE @BatchId UNIQUEIDENTIFIER = NEWID(),
		@TransactionId UNIQUEIDENTIFIER = NEWID(),
		@CurrentObjectName NVARCHAR(128),
		@ObjectType VARCHAR(20),
		@TableChildOperationId INT,
		@SQLStatement NVARCHAR(MAX) = '',
		@IndexOperation NVARCHAR(60),
		@ErrorMessage NVARCHAR(MAX),
		@RowCount INT

BEGIN TRY
	IF NOT EXISTS(SELECT 'True' FROM sys.tables WHERE name = @TableName + '_OLD')
	BEGIN
		RAISERROR('There is nothing to revert.  Either the Revert has already run, or nothing has been partitioned.', 16, 1)
	END
    
	DECLARE Revert_Cur CURSOR LOCAL FAST_FORWARD FOR
		SELECT  X.DatabaseName,
                X.ObjectName,
				X.SQLStatement,
				X.ObjectType,
				ROW_NUMBER() OVER (ORDER BY X.SortId) AS RowNum
		FROM (
				SELECT	DatabaseName,
                        TableName AS ObjectName,
						RevertRenameNewPartitionedPrepTableSQL AS SQLStatement, 
						'Table' AS ObjectType,
						1 AS SortId
				FROM DOI.vwTables_PrepTables
				WHERE SchemaName = @SchemaName
					AND TableName = @TableName
					AND IsNewPartitionedPrepTable = 1
				UNION ALL 
				SELECT	DatabaseName,
                        PrepTableIndexName,
						RevertRenameNewPartitionedPrepTableIndexSQL,
						'Index',
						2
				FROM DOI.vwTables_PrepTables_Indexes
				WHERE SchemaName = @SchemaName
					AND ParentTableName = @TableName
					AND IsNewPartitionedPrepTable = 1
				UNION ALL
				SELECT	DatabaseName,
                        ConstraintName,
						RevertRenameNewPartitionedPrepTableConstraintSQL,
						'Constraint',
						3
				FROM DOI.vwTables_PrepTables_Constraints
				WHERE SchemaName = @SchemaName
					AND ParentTableName = @TableName
					AND IsNewPartitionedPrepTable = 1
				UNION ALL
				SELECT	DatabaseName,
                        StatisticsName,
						RevertRenameNewPartitionedPrepTableStatisticsSQL,
						'Statistics',
						4
				FROM DOI.vwTables_PrepTables_Statistics
				WHERE SchemaName = @SchemaName
					AND ParentTableName = @TableName
				UNION ALL
				SELECT	DatabaseName,
                        TableName,
						RevertRenameExistingTableSQL,
						'Table',
						5
				FROM DOI.vwTables_PrepTables
				WHERE SchemaName = @SchemaName
					AND TableName = @TableName
					AND IsNewPartitionedPrepTable = 1
				UNION ALL 
				SELECT	DatabaseName,
                        PrepTableIndexName,
						RevertRenameExistingTableIndexSQL,
						'Index' AS ObjectType,
						6
				FROM DOI.vwTables_PrepTables_Indexes
				WHERE SchemaName = @SchemaName
					AND ParentTableName = @TableName
					AND IsNewPartitionedPrepTable = 1
				UNION ALL
				SELECT	DatabaseName,
                        ConstraintName,
						RevertRenameExistingTableConstraintSQL,
						'Constraint',
						7
				FROM DOI.vwTables_PrepTables_Constraints
				WHERE SchemaName = @SchemaName
					AND ParentTableName = @TableName
					AND IsNewPartitionedPrepTable = 1
                UNION ALL
				SELECT	DatabaseName,
                        StatisticsName,
						RevertRenameExistingTableStatisticsSQL,
						'Statistics',
						8
				FROM DOI.vwTables_PrepTables_Statistics
				WHERE SchemaName = @SchemaName
					AND ParentTableName = @TableName
)x
		ORDER BY x.SortId ASC

	OPEN Revert_Cur

	IF (@SchemaName + '.' + @TableName) IS NOT NULL 
	BEGIN 
		EXEC DOI.spQueue_Insert 
            @CurrentDatabaseName            = @DatabaseName,
			@CurrentSchemaName				= @SchemaName , 
			@CurrentTableName				= @TableName ,  
			@CurrentIndexName				= 'N/A' , 
			@CurrentPartitionNumber			= 0, 
			@IndexSizeInMB					= 0,
			@CurrentParentSchemaName		= @SchemaName ,
			@CurrentParentTableName			= @TableName ,
			@CurrentParentIndexName			= 'N/A' ,
			@IndexOperation					= 'Begin Tran',
			@IsOnlineOperation				= 1 ,
			@TableChildOperationId			= 0 ,
			@SQLStatement					= 'SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
BEGIN TRAN' ,
			--@RunAutomaticallyOnDeployment	= 0 ,
			--@RunAutomaticallyOnSQLJob		= 1 ,
			@TransactionId					= @TransactionId ,
			@BatchId						= @BatchId ,
			@ExitTableLoopOnError			= 1
	END
    
	FETCH NEXT FROM Revert_Cur INTO @CurrentObjectName, @SQLStatement, @ObjectType, @TableChildOperationId
		WHILE @@FETCH_STATUS <> -1
		BEGIN
			IF @@FETCH_STATUS <> -2
			BEGIN
				BEGIN TRY
					SET @IndexOperation = @ObjectType + ' Revert Rename'

					EXEC DOI.spQueue_Insert 
                        @CurrentDatabaseName            = @DatabaseName,
						@CurrentSchemaName				= @SchemaName , 
						@CurrentTableName				= @TableName ,  
						@CurrentIndexName				= @CurrentObjectName , 
						@CurrentPartitionNumber			= 0, 
						@IndexSizeInMB					= 0,
						@CurrentParentSchemaName		= @SchemaName ,
						@CurrentParentTableName			= @TableName ,
						@CurrentParentIndexName			= 'N/A' ,
						@IndexOperation					= @IndexOperation,
						@IsOnlineOperation				= 1 ,
						@TableChildOperationId			= @TableChildOperationId ,
						@SQLStatement					= @SQLStatement ,
						@TransactionId					= @TransactionId ,
						@BatchId						= @BatchId ,
						@ExitTableLoopOnError			= 1

				END TRY
				BEGIN CATCH
					IF @@TRANCOUNT > 0 
					BEGIN
						--ANY LOG ENTRIES DURING THE TRANSACTION ARE GOING TO BE LOST, SO PUT THEM INTO TABLE VAR TO GET AROUND THIS...
						DECLARE @Log DOI.LogTT

						INSERT INTO @Log (  LogID,
                                            DatabaseName,
                                            SchemaName ,
											TableName ,
											IndexName ,
	                                        PartitionNumber ,
	                                        IndexSizeInMB ,
											LoginName ,
											UserName ,
											LogDateTime ,
											SQLStatement ,
											IndexOperation ,
											IsOnlineOperation ,
											[RowCount],
											TableChildOperationId ,
											RunStatus ,
											ErrorText ,
											TransactionId,
											BatchId,
											SeqNo,
											ExitTableLoopOnError )
						SELECT  LogID,
                                DatabaseName,
                                SchemaName ,
								TableName ,
								IndexName ,
	                            PartitionNumber ,
	                            IndexSizeInMB ,
								LoginName ,
								UserName ,
								LogDateTime ,
								SQLStatement ,
								IndexOperation ,
								1 ,
								[RowCount],
								TableChildOperationId ,
								RunStatus ,
								ErrorText ,
								TransactionId ,
								BatchId ,
								SeqNo ,
								ExitTableLoopOnError
						FROM   DOI.Log
						WHERE  TransactionId = @TransactionId;

						WITH LastLoggedRow
						AS (SELECT   TOP 1 *
							FROM     @Log
							ORDER BY LogDateTime DESC )

						UPDATE LastLoggedRow
						SET    LastLoggedRow.ErrorText = ERROR_MESSAGE();

						--AFTER SAVING THE LOG TRANSACTIONS, GO AHEAD AND ROLLBACK:
						ROLLBACK TRAN;
					END

					--NOW THAT WE HAVE ROLLED BACK, INSERT THE MISSING LOG ROWS FROM THE TABLE VAR.  THEY SHOULD STILL BE THERE DESPITE THE ROLLBACK.
					INSERT INTO DOI.Log (   LogID,
                                            DatabaseName,
                                            SchemaName ,
										    TableName ,
										    IndexName ,
	                                        PartitionNumber ,
	                                        IndexSizeInMB ,
										    LoginName ,
										    UserName ,
										    LogDateTime ,
										    SQLStatement ,
										    IndexOperation ,
										    IsOnlineOperation ,
										    [RowCount] ,
										    TableChildOperationId ,
										    RunStatus ,
										    ErrorText ,
										    TransactionId ,
										    BatchId ,
										    SeqNo ,
										    ExitTableLoopOnError )
					SELECT *
					FROM   @Log T
					WHERE  NOT EXISTS ( SELECT 't'
										FROM   DOI.Log L
										WHERE  T.DatabaseName = L.DatabaseName
                                            AND T.SchemaName = L.SchemaName
											AND T.TableName = L.TableName
											AND T.IndexName = L.IndexName
											AND T.IndexOperation = L.IndexOperation
											AND T.RunStatus = L.RunStatus
											AND T.TableChildOperationId = L.TableChildOperationId );

					SET @ErrorMessage = ERROR_MESSAGE()

					UPDATE DOI.Queue
					SET ErrorMessage = @ErrorMessage,
						InProgress = 0
					WHERE DatabaseName = @DatabaseName
                        AND SchemaName = @SchemaName
						AND TableName = @TableName
						AND IndexName = @CurrentObjectName
						AND IndexOperation = @IndexOperation
						AND TableChildOperationId = @TableChildOperationId


					EXEC DOI.spRun_LogInsert 
                        @CurrentDatabaseName    = @DatabaseName,
						@CurrentSchemaName		= @SchemaName , 
						@CurrentTableName		= @TableName ,  
						@CurrentIndexName		= @CurrentObjectName ,
						@CurrentPartitionNumber = 0 ,
						@IndexSizeInMB			= 0,
						@IndexOperation			= @IndexOperation,
						@IsOnlineOperation		= 1 ,
						@RowCount				= @RowCount,
						@SQLStatement			= @SQLStatement ,
						@ErrorText				= @ErrorMessage,
						@TransactionId			= @TransactionId,
						@TableChildOperationId	= 0,
						@BatchId				= @BatchId,
						@SeqNo					= 0,
						@RunStatus				= 'Error',
						@ExitTableLoopOnError	= 1;

					THROW;

				END CATCH

			FETCH NEXT FROM Revert_Cur INTO @CurrentObjectName, @SQLStatement, @ObjectType, @TableChildOperationId

			END
        
		END
    
		CLOSE Revert_Cur
		DEALLOCATE Revert_Cur

		DECLARE @DropParentOldTableFKs NVARCHAR(MAX),
				@DropRefOldTableFKs NVARCHAR(MAX),
				@AddBackParentTableFKs NVARCHAR(MAX),
				@AddBackRefTableFKs NVARCHAR(MAX)

		SET @DropParentOldTableFKs = '
EXEC DOI.spForeignKeysDrop
	@ParentSchemaName = ''' + @SchemaName + ''',
	@ParentTableName = ''' + @TableName + ''''
				
		EXEC DOI.spQueue_Insert
            @CurrentDatabaseName            = @DatabaseName,
			@CurrentSchemaName				= @SchemaName ,
			@CurrentTableName				= @TableName, 
			@CurrentIndexName				= 'N/A', 
			@CurrentPartitionNumber			= 0, 
			@IndexSizeInMB					= 0, 
			@CurrentParentSchemaName		= @SchemaName,
			@CurrentParentTableName			= @TableName,
			@CurrentParentIndexName			= 'N/A',
			@IndexOperation					= 'Drop Parent Old Table FKs',
			@IsOnlineOperation				= 1 ,
			@SQLStatement					= @DropParentOldTableFKs,
			@TransactionId					= @TransactionId,
			@BatchId						= @BatchId,
			@ExitTableLoopOnError			= 1

		SET @DropRefOldTableFKs = '
EXEC DOI.spForeignKeysDrop
	@ReferencedSchemaName = ''' + @SchemaName + ''',
	@ReferencedTableName = ''' + @TableName + ''''

		EXEC DOI.spQueue_Insert
            @CurrentDatabaseName            = @DatabaseName,
			@CurrentSchemaName				= @SchemaName ,
			@CurrentTableName				= @TableName, 
			@CurrentIndexName				= 'N/A', 
			@CurrentPartitionNumber			= 0, 
			@IndexSizeInMB					= 0,
			@CurrentParentSchemaName		= @SchemaName,
			@CurrentParentTableName			= @TableName,
			@CurrentParentIndexName			= 'N/A',
			@IndexOperation					= 'Drop Ref Old Table FKs',
			@IsOnlineOperation				= 1 ,
			@SQLStatement					= @DropRefOldTableFKs,
			@TransactionId					= @TransactionId,
			@BatchId						= @BatchId,
			@ExitTableLoopOnError			= 1

		SET @AddBackParentTableFKs = '
EXEC DOI.spForeignKeysAdd
	@ParentSchemaName = ''' + @SchemaName + ''',
	@ParentTableName = ''' + @TableName + ''''
				
		EXEC DOI.spQueue_Insert
            @CurrentDatabaseName            = @DatabaseName,
			@CurrentSchemaName				= @SchemaName ,
			@CurrentTableName				= @TableName, 
			@CurrentIndexName				= 'N/A', 
			@CurrentPartitionNumber			= 0, 
			@IndexSizeInMB					= 0,
			@CurrentParentSchemaName		= @SchemaName,
			@CurrentParentTableName			= @TableName,
			@CurrentParentIndexName			= 'N/A',
			@IndexOperation					= 'Add back Parent Table FKs',
			@IsOnlineOperation				= 1 ,
			@SQLStatement					= @AddBackParentTableFKs,
			@TransactionId					= @TransactionId,
			@BatchId						= @BatchId,
			@ExitTableLoopOnError			= 1

		SET @AddBackRefTableFKs = '
EXEC DOI.spForeignKeysAdd
	@ReferencedSchemaName = ''' + @SchemaName + ''',
	@ReferencedTableName = ''' + @TableName + ''''

		EXEC DOI.spQueue_Insert
            @CurrentDatabaseName            = @DatabaseName,
			@CurrentSchemaName				= @SchemaName ,
			@CurrentTableName				= @TableName, 
			@CurrentIndexName				= 'N/A',
			@CurrentPartitionNumber			= 0, 
			@IndexSizeInMB					= 0, 
			@CurrentParentSchemaName		= @SchemaName,
			@CurrentParentTableName			= @TableName,
			@CurrentParentIndexName			= 'N/A',
			@IndexOperation					= 'Add back Ref Table FKs',
			@IsOnlineOperation				= 1 ,
			@SQLStatement					= @AddBackRefTableFKs,
			@TransactionId					= @TransactionId,
			@BatchId						= @BatchId,
			@ExitTableLoopOnError			= 1

		EXEC DOI.spQueue_Insert 
            @CurrentDatabaseName            = @DatabaseName,
			@CurrentSchemaName				= @SchemaName , 
			@CurrentTableName				= @TableName ,  
			@CurrentIndexName				= 'N/A' ,
			@CurrentPartitionNumber			= 0, 
			@IndexSizeInMB					= 0,
			@CurrentParentSchemaName		= @SchemaName ,
			@CurrentParentTableName			= @TableName ,
			@CurrentParentIndexName			= 'N/A' ,
			@IndexOperation					= 'Commit Tran',
			@IsOnlineOperation				= 1 ,
			@TableChildOperationId			= 0 ,
			@SQLStatement					= 'COMMIT TRAN' ,
			@TransactionId					= @TransactionId ,
			@BatchId						= @BatchId ,
			@ExitTableLoopOnError			= 1

		--RUN REVERT
		EXEC DOI.spRun 
			@OnlineOperations = 1,
            @DatabaseName   = @DatabaseName,
			@SchemaName		= @SchemaName,
			@TableName		= @TableName,
			@BatchId		= @BatchId,
			@Debug			= @Debug

END TRY
BEGIN CATCH
	--CLOSE CURSORS IF OPEN
	IF (SELECT CURSOR_STATUS('local','Revert_Cur')) >= -1
	BEGIN
		IF (SELECT CURSOR_STATUS('local','Revert_Cur')) > -1
		BEGIN
			CLOSE Revert_Cur
		END

		DEALLOCATE Revert_Cur
	END;

	THROW;
END CATCH
GO

GO
-------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\DOI.spRun_RevertRename.sql" ----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\DOI.spRun_RevertRename.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('7b580a14-b78c-5500-a377-d7bbfe30efe7' AS UNIQUEIDENTIFIER), 'B9C682484706D2CBB9301AA368DC48AA0F951B5506CBE5C0DF4C3C30B8FF6D2E', 'Programmable Objects\Stored Procedures\DOI.spRun_RevertRename.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\DOI.spRun_RevertRename.sql", ID: {7b580a14-b78c-5500-a377-d7bbfe30efe7} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8230203-fdbf-51a6-8e42-14b814439807' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9CA1F81817BF133FAEE73C63912887B2A0D2CE02617846F5E41CDB5F51B8A0E9')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\Utility.spDOI_GetIndexCreationProgress.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\Utility.spDOI_GetIndexCreationProgress.sql", ID: {f8230203-fdbf-51a6-8e42-14b814439807} *****';

GO


-- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\Utility.spDOI_GetIndexCreationProgress.sql" 
GO
IF OBJECT_ID('[Utility].[spDOI_GetIndexCreationProgress]') IS NOT NULL
	DROP PROCEDURE [Utility].[spDOI_GetIndexCreationProgress];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   PROCEDURE [Utility].[spDOI_GetIndexCreationProgress]
    @SPID INT

AS


/*
    NOTE: QUERIES MUST BE EXECUTED WITH 'SET STATISTICS PROFILE ON' IN ORDER FOR THIS TO WORK!!
    EXEC Utility.spDOI_GetIndexCreationProgress
        @SPID = 67
*/

;WITH agg AS
(
     SELECT SUM(qp.[row_count]) AS [RowsProcessed],
            SUM(qp.[estimate_row_count]) AS [TotalRows],
            MAX(qp.last_active_time) - MIN(qp.first_active_time) AS [ElapsedMS],
            MAX(IIF(qp.[close_time] = 0 AND qp.[first_row_time] > 0,
                    [physical_operator_name],
                    N'<Transition>')) AS [CurrentStep]
     FROM sys.dm_exec_query_profiles qp
     WHERE qp.[physical_operator_name] IN (N'Table Scan', N'Clustered Index Scan',
                                           N'Index Scan',  N'Sort')
     AND   qp.[session_id] = @SPID
), comp AS
(
     SELECT *,
            ([TotalRows] - [RowsProcessed]) AS [RowsLeft],
            ([ElapsedMS] / 1000.0) AS [ElapsedSeconds]
     FROM   agg
)
SELECT [CurrentStep],
       [TotalRows],
       [RowsProcessed],
       [RowsLeft],
       CONVERT(DECIMAL(5, 2),
               (([RowsProcessed] * 1.0) / [TotalRows]) * 100) AS [PercentComplete],
       [ElapsedSeconds],
       (([ElapsedSeconds] / [RowsProcessed]) * [RowsLeft]) AS [EstimatedSecondsLeft],
       DATEADD(SECOND,
               (([ElapsedSeconds] / [RowsProcessed]) * [RowsLeft]),
               GETDATE()) AS [EstimatedCompletionTime]
FROM   comp;

GO

GO
-- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\Utility.spDOI_GetIndexCreationProgress.sql" 


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\Utility.spDOI_GetIndexCreationProgress.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('f8230203-fdbf-51a6-8e42-14b814439807' AS UNIQUEIDENTIFIER), '9CA1F81817BF133FAEE73C63912887B2A0D2CE02617846F5E41CDB5F51B8A0E9', 'Programmable Objects\Stored Procedures\Utility.spDOI_GetIndexCreationProgress.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\Utility.spDOI_GetIndexCreationProgress.sql", ID: {f8230203-fdbf-51a6-8e42-14b814439807} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c93875ba-ddda-5189-9a30-0f7b8121fe43' AS UNIQUEIDENTIFIER) AND [script_checksum] = '502D6D22EBC4C2D47C1D57C3584E996FFDDE26528692A22959C8FFEA9F552580')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Stored Procedures\Utility.spRowCountsAllTables.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Stored Procedures\Utility.spRowCountsAllTables.sql", ID: {c93875ba-ddda-5189-9a30-0f7b8121fe43} *****';

GO


---- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\Utility.spRowCountsAllTables.sql" ------
GO
IF OBJECT_ID('[Utility].[spRowCountsAllTables]') IS NOT NULL
	DROP PROCEDURE [Utility].[spRowCountsAllTables];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   PROCEDURE [Utility].[spRowCountsAllTables]

AS

/*
    exec Utility.spRowCountsAllTables
*/

DECLARE @sql VARCHAR(MAX) = ''

SELECT @sql += CASE WHEN @sql = '' THEN '' ELSE 'UNION ALL' + CHAR(13) + CHAR(10) END + 'SELECT ''' + t.name + ''', COUNT(*) from ' + s.name + '.[' + t.name + ']' +CHAR(13) + CHAR(10)
FROM sys.tables t
    INNER JOIN sys.schemas s ON s.schema_id = t.schema_id
ORDER BY t.name
EXEC(@sql)

GO

GO
----- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Stored Procedures\Utility.spRowCountsAllTables.sql" -------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Stored Procedures\Utility.spRowCountsAllTables.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('c93875ba-ddda-5189-9a30-0f7b8121fe43' AS UNIQUEIDENTIFIER), '502D6D22EBC4C2D47C1D57C3584E996FFDDE26528692A22959C8FFEA9F552580', 'Programmable Objects\Stored Procedures\Utility.spRowCountsAllTables.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Stored Procedures\Utility.spRowCountsAllTables.sql", ID: {c93875ba-ddda-5189-9a30-0f7b8121fe43} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c7734c39-434c-5df3-8944-98ff6e419cc1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '16B0F0EA388A2E97755CE375C99BE058334391C707FCA9C397E40BD82190D0A3')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwBusinessHoursSchedule.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwBusinessHoursSchedule.sql", ID: {c7734c39-434c-5df3-8944-98ff6e419cc1} *****';

GO


----------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwBusinessHoursSchedule.sql" ------------
GO
IF OBJECT_ID('[DOI].[vwBusinessHoursSchedule]') IS NOT NULL
	DROP VIEW [DOI].[vwBusinessHoursSchedule];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE   VIEW [DOI].[vwBusinessHoursSchedule]
AS

/*
    SELECT * FROM DOI.vwBusinessHoursSchedule
*/

SELECT BHS1.*, ISNULL(BHS2.StartUtcMilitaryTime, '23:59:59') AS EndUtcMilitaryTime
FROM (  SELECT *, ROW_NUMBER() OVER(PARTITION BY DayOfWeekId ORDER BY StartUtcMilitaryTime) AS RowNum
        FROM DOI.BusinessHoursSchedule ) BHS1
    LEFT JOIN ( SELECT *, ROW_NUMBER() OVER(PARTITION BY DayOfWeekId ORDER BY StartUtcMilitaryTime) AS RowNum
                FROM DOI.BusinessHoursSchedule) BHS2
        ON BHS2.DayOfWeekId = BHS1.DayOfWeekId
            AND BHS2.RowNum = BHS1.RowNum + 1

GO

GO
------------ END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwBusinessHoursSchedule.sql" -------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwBusinessHoursSchedule.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('c7734c39-434c-5df3-8944-98ff6e419cc1' AS UNIQUEIDENTIFIER), '16B0F0EA388A2E97755CE375C99BE058334391C707FCA9C397E40BD82190D0A3', 'Programmable Objects\Views\DOI.vwBusinessHoursSchedule.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwBusinessHoursSchedule.sql", ID: {c7734c39-434c-5df3-8944-98ff6e419cc1} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a10249d-dc5e-538c-ac31-eeab9f158eb6' AS UNIQUEIDENTIFIER) AND [script_checksum] = '93874594BBC41FE799D9B9DA01EB3526843381817DCFD8851064C73D58627FCA')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwTables_PrepTables_Constraints.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwTables_PrepTables_Constraints.sql", ID: {1a10249d-dc5e-538c-ac31-eeab9f158eb6} *****';

GO


------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwTables_PrepTables_Constraints.sql" --------
GO
IF OBJECT_ID('[DOI].[vwTables_PrepTables_Constraints]') IS NOT NULL
	DROP VIEW [DOI].[vwTables_PrepTables_Constraints];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO






CREATE   VIEW [DOI].[vwTables_PrepTables_Constraints]
AS

/*
	SELECT *
	FROM DOI.vwTables_PrepTables_Constraints
	WHERE ParentTableName = 'Pays' 
		AND preptablename = 'PayTaxes_NewPartitionedTableFromPrep'
*/ 

SELECT	FN.DatabaseName,
        FN.SchemaName,
		FN.TableName AS ParentTableName,
		FN.PrepTableName,
		FN.IsNewPartitionedPrepTable,
		C.ConstraintName,
		C.CreateConstraintStatement,
		C.RenameExistingTableConstraintSQL,
		C.RenameNewPartitionedPrepTableConstraintSQL,
		C.RevertRenameExistingTableConstraintSQL,
		C.RevertRenameNewPartitionedPrepTableConstraintSQL,
		ROW_NUMBER() OVER(PARTITION BY FN.SchemaName, FN.TableName, FN.PrepTableName ORDER BY FN.SchemaName, FN.TableName, FN.PrepTableName) AS RowNum
FROM DOI.vwTables_PrepTables FN
	CROSS APPLY(SELECT *
				FROM (	SELECT	SchemaName,
								TableName,
								dc.DefaultConstraintName AS ConstraintName,
								'
IF OBJECT_ID(''' + FN.DatabaseName + '.' + FN.SchemaName + '.' + FN.PrepTableName + ''') IS NOT NULL
	AND OBJECT_ID(''' + FN.DatabaseName + '.' + FN.SchemaName + '.' + REPLACE(dc.DefaultConstraintName, TableName, FN.PrepTableName) + ''') IS NULL
BEGIN
	ALTER TABLE ' + SchemaName + '.' + FN.PrepTableName + ' ADD CONSTRAINT ' + REPLACE(dc.DefaultConstraintName, TableName, FN.PrepTableName) + ' DEFAULT ' + dc.DefaultDefinition + ' FOR ' + ColumnName + '
END' + CHAR(13) + CHAR(10) 
AS CreateConstraintStatement,

CASE WHEN FN.IsNewPartitionedPrepTable = 0 THEN '' ELSE
'
SET DEADLOCK_PRIORITY 10
EXEC sp_rename @objname = ''' + FN.SchemaName + '.' + dc.DefaultConstraintName + ''',
				@newname = ''' + REPLACE(dc.DefaultConstraintName, FN.TableName, FN.TableName + '_OLD') + ''',
				@objtype = ''OBJECT''' END 
AS RenameExistingTableConstraintSQL,

CASE WHEN FN.IsNewPartitionedPrepTable = 0 THEN '' ELSE
'
SET DEADLOCK_PRIORITY 10
EXEC sp_rename @objname = ''' + FN.SchemaName + '.' + REPLACE(dc.DefaultConstraintName, FN.TableName, FN.PrepTableName) + ''',
				@newname = ''' + REPLACE(dc.DefaultConstraintName, FN.PrepTableName, FN.TableName) + ''',
				@objtype = ''OBJECT''' END 
AS RenameNewPartitionedPrepTableConstraintSQL,

CASE WHEN FN.IsNewPartitionedPrepTable = 0 THEN '' ELSE
'
SET DEADLOCK_PRIORITY 10
EXEC sp_rename @objname = ''' + FN.SchemaName + '.' + REPLACE(dc.DefaultConstraintName, FN.TableName, FN.TableName + '_OLD') + ''',
				@newname = ''' + dc.DefaultConstraintName + ''',
				@objtype = ''OBJECT''' END 
AS RevertRenameExistingTableConstraintSQL,

CASE WHEN FN.IsNewPartitionedPrepTable = 0 THEN '' ELSE
'
SET DEADLOCK_PRIORITY 10
EXEC sp_rename @objname = ''' + FN.SchemaName + '.' + REPLACE(dc.DefaultConstraintName, FN.PrepTableName, FN.TableName) + ''',
				@newname = ''' + REPLACE(dc.DefaultConstraintName, FN.TableName, FN.PrepTableName) + ''',
				@objtype = ''OBJECT''' END 
AS RevertRenameNewPartitionedPrepTableConstraintSQL

						FROM DOI.DefaultConstraints dc
						UNION ALL
						SELECT	cc.SchemaName,
								cc.TableName,
								cc.CheckConstraintName,
								'
IF OBJECT_ID(''' + FN.DatabaseName + '.' + FN.SchemaName + '.' + FN.PrepTableName + ''') IS NOT NULL
	AND OBJECT_ID(''' + FN.DatabaseName + '.' + FN.SchemaName + '.' + REPLACE(cc.CheckConstraintName, cc.TableName, FN.PrepTableName) + ''') IS NULL
BEGIN
	ALTER TABLE ' + cc.SchemaName + '.' + FN.PrepTableName + ' ADD CONSTRAINT ' + REPLACE(cc.CheckConstraintName, cc.TableName, FN.PrepTableName) + ' CHECK ' + cc.CheckDefinition + '
END' + CHAR(13) + CHAR(10) 
AS CreateConstraintStatement,

CASE WHEN FN.IsNewPartitionedPrepTable = 0 THEN '' ELSE
'
SET DEADLOCK_PRIORITY 10
EXEC sp_rename @objname = ''' + FN.SchemaName + '.' + cc.CheckConstraintName + ''',
				@newname = ''' + REPLACE(cc.CheckConstraintName, FN.TableName, FN.TableName + '_OLD') + ''',
				@objtype = ''OBJECT''' END 
AS RenameExistingTableConstraintSQL,

CASE WHEN FN.IsNewPartitionedPrepTable = 0 THEN '' ELSE
'
SET DEADLOCK_PRIORITY 10
EXEC sp_rename @objname = ''' + REPLACE(cc.CheckConstraintName, FN.TableName, FN.PrepTableName) + ''',
				@newname = ''' + FN.SchemaName + '.' + REPLACE(cc.CheckConstraintName, FN.PrepTableName, FN.TableName) + ''',
				@objtype = ''OBJECT''' END 
AS RenameNewPartitionedPrepTableConstraintSQL,

CASE WHEN FN.IsNewPartitionedPrepTable = 0 THEN '' ELSE
'
SET DEADLOCK_PRIORITY 10
EXEC sp_rename @objname = ''' + FN.SchemaName + '.' + REPLACE(cc.CheckConstraintName, FN.TableName, FN.TableName + '_OLD') + ''',
				@newname = ''' + cc.CheckConstraintName + ''',
				@objtype = ''OBJECT''' END 
AS RevertRenameExistingTableConstraintSQL,

CASE WHEN FN.IsNewPartitionedPrepTable = 0 THEN '' ELSE
'
SET DEADLOCK_PRIORITY 10
EXEC sp_rename @objname = ''' + FN.SchemaName + '.' + REPLACE(cc.CheckConstraintName, FN.PrepTableName, FN.TableName) + ''',
				@newname = ''' + REPLACE(cc.CheckConstraintName, FN.TableName, FN.PrepTableName) + ''',
				@objtype = ''OBJECT''' END 
AS RevertRenameNewPartitionedPrepTableConstraintSQL

						FROM DOI.CheckConstraints cc) Constraints
				WHERE Constraints.SchemaName = FN.SchemaName
					AND Constraints.TableName = FN.TableName) C







GO

GO
-------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwTables_PrepTables_Constraints.sql" ---------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwTables_PrepTables_Constraints.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('1a10249d-dc5e-538c-ac31-eeab9f158eb6' AS UNIQUEIDENTIFIER), '93874594BBC41FE799D9B9DA01EB3526843381817DCFD8851064C73D58627FCA', 'Programmable Objects\Views\DOI.vwTables_PrepTables_Constraints.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwTables_PrepTables_Constraints.sql", ID: {1a10249d-dc5e-538c-ac31-eeab9f158eb6} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('97d77eb9-7f51-5a52-a84d-77d6efa224ae' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E29383794BEC4C77DD23A96402356D6F83560975AD8BB3651C22EF7C7DCA8F66')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwTables_PrepTables_Indexes.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwTables_PrepTables_Indexes.sql", ID: {97d77eb9-7f51-5a52-a84d-77d6efa224ae} *****';

GO


--------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwTables_PrepTables_Indexes.sql" ----------
GO
IF OBJECT_ID('[DOI].[vwTables_PrepTables_Indexes]') IS NOT NULL
	DROP VIEW [DOI].[vwTables_PrepTables_Indexes];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO







CREATE   VIEW [DOI].[vwTables_PrepTables_Indexes]

AS

/*
	SELECT	PrepTableIndexCreateSQL
	FROM  DOI.vwTables_PrepTables_Indexes
	WHERE preptableindexname = 'CDX_Bai2BankTransactions_NewPartitionedTableFromPrep'
*/ 

SELECT  PT.DatabaseName, 
        PT.SchemaName, 
        PT.TableName AS ParentTableName,
        I.IndexName AS ParentIndexName,
        I.IsIndexMissingFromSQLServer,
        PT.PrepTableName,
        REPLACE(I.IndexName, I.TableName, PT.PrepTableName) AS PrepTableIndexName,
        PT.IsNewPartitionedPrepTable,
        I.Storage_Actual,
        I.StorageType_Actual,
        I.Storage_Desired,
        I.StorageType_Desired,
        PT.PrepTableFilegroup,
        I.IndexSizeMB_Actual,
		ROW_NUMBER() OVER(PARTITION BY PT.DatabaseName, PT.SchemaName, PT.TableName ORDER BY PT.IsNewPartitionedPrepTable, PT.PrepTableName) AS RowNum,
        CASE 
            WHEN IndexType = 'RowStore'
            THEN '
IF NOT EXISTS (SELECT ''True'' FROM sys.indexes i INNER JOIN sys.tables t ON i.object_id = t.object_id INNER JOIN sys.schemas s ON s.schema_id = t.schema_id WHERE s.name = ''' + I.SchemaName + ''' AND t.name = ''' + PT.PrepTableName + ''' AND i.name = ''' + REPLACE(I.IndexName, I.TableName, PT.PrepTableName) + ''')
BEGIN' + 	CASE 
				WHEN (I.IsPrimaryKey_Desired = 1 OR I.IsUniqueConstraint_Desired = 1)
				THEN '
ALTER TABLE ' + I.SchemaName + '.' + PT.PrepTableName + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
'	ADD CONSTRAINT ' + REPLACE(I.IndexName, I.TableName, PT.PrepTableName) + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
'		' + CASE WHEN I.IsPrimaryKey_Desired = 1 THEN 'PRIMARY KEY ' WHEN I.IsUniqueConstraint_Desired = 1 THEN ' UNIQUE ' ELSE '' END + CASE WHEN I.IsClustered_Desired = 0 THEN ' NON' ELSE ' ' END + 'CLUSTERED (' + I.KeyColumnList_Desired + ') ' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
'				WITH (	
						PAD_INDEX = ' + CASE WHEN I.OptionPadIndex_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
						FILLFACTOR = ' + CAST(CASE WHEN I.[Fillfactor_Desired] = 0 THEN 100 ELSE I.[Fillfactor_Desired] END AS VARCHAR(3)) + ',
						IGNORE_DUP_KEY = ' + CASE WHEN I.OptionIgnoreDupKey_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
						STATISTICS_NORECOMPUTE = ' + CASE WHEN I.OptionStatisticsNoRecompute_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
						STATISTICS_INCREMENTAL = ' +    CASE
                                                            WHEN PT.IsNewPartitionedPrepTable = 0
                                                            THEN 'OFF'
                                                            ELSE    CASE 
                                                                        WHEN I.OptionStatisticsIncremental_Desired = 1 
                                                                        THEN 'ON' 
                                                                        ELSE 'OFF' 
                                                                    END
                                                        END + ',
						ALLOW_ROW_LOCKS = ' + CASE WHEN I.OptionAllowRowLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
						ALLOW_PAGE_LOCKS = ' + CASE WHEN I.OptionAllowPageLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
						DATA_COMPRESSION = ' + I.OptionDataCompression_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) + CHAR(9) +
'			ON [' +	CASE 
                        WHEN PT.IsNewPartitionedPrepTable = 0
                        THEN PT.PrepTableFilegroup
                        ELSE PT.Storage_Desired
                    END + ']' +
					        CASE 
								WHEN PT.IsNewPartitionedPrepTable = 0
                                THEN ''
                                ELSE '(' + I.PartitionColumn_Desired + ')'  
							END + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9)
					ELSE '
	CREATE' +	CASE I.IsUnique_Desired WHEN 1 THEN ' UNIQUE ' ELSE ' ' END + CASE WHEN I.IsClustered_Desired = 0 THEN ' NON' ELSE ' ' END + 'CLUSTERED INDEX ' + REPLACE(I.IndexName, I.TableName, PT.PrepTableName) + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
											'	ON ' + I.SchemaName + '.' + PT.PrepTableName + '(' + I.KeyColumnList_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
											CASE 
												WHEN I.IncludedColumnList_Desired IS NULL 
												THEN '' 
												ELSE '		INCLUDE(' + I.IncludedColumnList_Desired + ')'
											END + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
											CASE
												WHEN I.IsFiltered_Desired = 0
												THEN ''
												ELSE '		WHERE ' + I.FilterPredicate_Desired
											END + CHAR(13) + CHAR(10) +
											'					WITH (	
								PAD_INDEX = ' + CASE WHEN I.OptionPadIndex_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
								FILLFACTOR = ' + CAST(CASE WHEN I.[Fillfactor_Desired] = 0 THEN 100 ELSE I.[Fillfactor_Desired] END AS VARCHAR(3)) + ',
								SORT_IN_TEMPDB = ON,
								IGNORE_DUP_KEY = ' + CASE WHEN I.OptionIgnoreDupKey_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
								STATISTICS_NORECOMPUTE = ' + CASE WHEN I.OptionStatisticsNoRecompute_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
								STATISTICS_INCREMENTAL = ' +    CASE
                                                                    WHEN PT.IsNewPartitionedPrepTable = 0
                                                                    THEN 'OFF'
                                                                    ELSE    CASE 
                                                                                WHEN I.OptionStatisticsIncremental_Desired = 1 
                                                                                THEN 'ON' 
                                                                                ELSE 'OFF' 
                                                                            END
                                                                END + ',
								DROP_EXISTING = OFF,
								ONLINE = OFF,
								ALLOW_ROW_LOCKS = ' + CASE WHEN I.OptionAllowRowLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
								ALLOW_PAGE_LOCKS = ' + CASE WHEN I.OptionAllowPageLocks_Desired = 1 THEN 'ON' ELSE 'OFF' END + ',
								MAXDOP = 0,
								DATA_COMPRESSION = ' + I.OptionDataCompression_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
											'		ON [' + CASE 
                                                                WHEN PT.IsNewPartitionedPrepTable = 0
                                                                THEN PT.PrepTableFilegroup
                                                                ELSE PT.Storage_Desired
                                                            END + ']'
															+	CASE 
																	WHEN PT.IsNewPartitionedPrepTable = 0
	    															THEN ''
	    															ELSE '(' + I.PartitionColumn_Desired + ')'  
																END + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9)
			END + 
'END'
                WHEN indexType = 'ColumnStore'
                THEN '
IF NOT EXISTS (SELECT ''True'' FROM sys.indexes i INNER JOIN sys.tables t ON i.object_id = t.object_id INNER JOIN sys.schemas s ON s.schema_id = t.schema_id WHERE s.name = ''' + I.SchemaName + ''' AND t.name = ''' + PT.PrepTableName + ''' AND i.name = ''' + REPLACE(I.IndexName, I.TableName, PT.PrepTableName) + ''')
BEGIN
	CREATE' + CASE WHEN I.IsClustered_Desired = 0 THEN ' NON' ELSE ' ' END + 'CLUSTERED COLUMNSTORE INDEX ' + REPLACE(I.IndexName, I.TableName, PT.PrepTableName) + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
										'	ON ' + I.SchemaName + '.' + PT.PrepTableName + CASE WHEN I.IsClustered_Desired = 1 THEN '' ELSE '(' + I.KeyColumnList_Desired + ')' END + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
										CASE
											WHEN I.IsFiltered_Desired = 0
											THEN ''
											ELSE '			WHERE ' + I.FilterPredicate_Desired
										END + CHAR(13) + CHAR(10) +
										'				WITH (	
						DROP_EXISTING = OFF,
						COMPRESSION_DELAY = ' + CAST(I.OptionDataCompressionDelay_Desired AS VARCHAR(20)) + ',
						MAXDOP = 0,
						DATA_COMPRESSION = ' + I.OptionDataCompression_Desired + ')' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(9) +
										'		ON [' + CASE 
                                                            WHEN PT.IsNewPartitionedPrepTable = 0
                                                            THEN PT.PrepTableFilegroup
                                                            ELSE PT.Storage_Desired
                                                        END + ']'
														+	CASE 
																WHEN PT.IsNewPartitionedPrepTable = 0
																THEN ''
																ELSE '(' + I.PartitionColumn_Desired + ')'  
															END + CHAR(13) + CHAR(10) + '
END'
        END AS PrepTableIndexCreateSQL,
        I.CreateStatement AS OrigCreateSQL,
		CASE PT.IsNewPartitionedPrepTable
			WHEN 0
			THEN ''
			ELSE CASE 
					WHEN I.IsIndexMissingFromSQLServer = 1 
					THEN '' 
					ELSE I.RenameIndexSQL
					END 
		END AS RenameExistingTableIndexSQL,
		CASE PT.IsNewPartitionedPrepTable
			WHEN 0
			THEN ''
			ELSE '
IF EXISTS(	SELECT ''True'' 
			FROM sys.indexes i 
				INNER JOIN sys.tables t ON t.object_id = i.object_id 
				INNER JOIN sys.schemas s ON t.schema_id = s.schema_id 
			WHERE s.name = ''' + PT.SchemaName + ''' 
				AND t.name = ''' + PT.TableName + '''
				AND i.name = ''' + REPLACE(I.IndexName, PT.TableName, PT.TableName + '_OLD') + ''')
BEGIN
	' + I.RevertRenameIndexSQL + '
END'
		END AS RevertRenameExistingTableIndexSQL,

		CASE PT.IsNewPartitionedPrepTable
			WHEN 0
			THEN ''
			ELSE '
SET DEADLOCK_PRIORITY 10
EXEC sp_rename 
	@objname = ''' + PT.SchemaName + '.' + PT.PrepTableName + '.' + REPLACE(I.IndexName, PT.TableName, PT.PrepTableName) + ''', 
	@newname = ''' + I.IndexName + ''', 
	@objtype = ''INDEX''' 
		END AS RenameNewPartitionedPrepTableIndexSQL,

		CASE PT.IsNewPartitionedPrepTable
			WHEN 0
			THEN ''
			ELSE '
IF EXISTS(	SELECT ''True'' 
			FROM sys.indexes i 
				INNER JOIN sys.tables t ON t.object_id = i.object_id 
				INNER JOIN sys.schemas s ON t.schema_id = s.schema_id 
			WHERE s.name = ''' + PT.SchemaName + ''' 
				AND t.name = ''' + PT.PrepTableName + '''
				AND i.name = ''' + I.IndexName + ''')
BEGIN
	SET DEADLOCK_PRIORITY 10
	EXEC sp_rename 
		@objname = ''' + PT.SchemaName + '.' + PT.PrepTableName + '.' + I.IndexName + ''', 
		@newname = ''' + REPLACE(I.IndexName, PT.TableName, PT.PrepTableName) + ''', 
		@objtype = ''INDEX''
END' 
		END AS RevertRenameNewPartitionedPrepTableIndexSQL
FROM DOI.vwTables_PrepTables PT
    INNER JOIN DOI.vwIndexes I ON I.DatabaseName = PT.DatabaseName
        AND I.SchemaName = PT.SchemaName
        AND I.TableName = PT.TableName


GO

GO
---------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwTables_PrepTables_Indexes.sql" -----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwTables_PrepTables_Indexes.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('97d77eb9-7f51-5a52-a84d-77d6efa224ae' AS UNIQUEIDENTIFIER), 'E29383794BEC4C77DD23A96402356D6F83560975AD8BB3651C22EF7C7DCA8F66', 'Programmable Objects\Views\DOI.vwTables_PrepTables_Indexes.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwTables_PrepTables_Indexes.sql", ID: {97d77eb9-7f51-5a52-a84d-77d6efa224ae} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e46e7424-f196-5c58-b3dd-ec5508e115a8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '17457891F055BB11B863C1284D8B8E25669BC474439995596B97BC03E91E4FD0')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwTables_PrepTables_Partitions.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwTables_PrepTables_Partitions.sql", ID: {e46e7424-f196-5c58-b3dd-ec5508e115a8} *****';

GO


------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwTables_PrepTables_Partitions.sql" ---------
GO
IF OBJECT_ID('[DOI].[vwTables_PrepTables_Partitions]') IS NOT NULL
	DROP VIEW [DOI].[vwTables_PrepTables_Partitions];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   VIEW [DOI].[vwTables_PrepTables_Partitions]
AS

/*
	select *
	from DOI.vwTables_PrepTables_Partitions
	WHERE parenttablename = 'Pays' 
	order by PartitionNumber
*/ 
SELECT	PTNonPartitioned.SchemaName,
		PTNonPartitioned.TableName AS ParentTableName,
		PTPartitioned.NewPartitionedPrepTableName,
		PTNonPartitioned.PrepTableName AS UnPartitionedPrepTableName,
		PTNonPartitioned.BoundaryValue AS PartitionFunctionValue,
		ISNULL(PTNonPartitioned.NextBoundaryValue, '9999-12-31') AS NextPartitionFunctionValue,
			'
IF EXISTS(	SELECT ''True'' 
			FROM ' + PTPartitioned.SchemaName + '.' + PTPartitioned.PrepTableName + ' 
			WHERE $PARTITION.' + PTPartitioned.PartitionFunctionName + '(' + PTPartitioned.PartitionColumn + ') = ' + CAST(PTNonPartitioned.PartitionNumber AS VARCHAR(6)) + ')
BEGIN
	TRUNCATE TABLE ' + PTPartitioned.SchemaName + '.' + PTPartitioned.PrepTableName + ' WITH (PARTITIONS (' + CAST(PTNonPartitioned.PartitionNumber AS VARCHAR(6)) + '))
END' AS PartitionDataValidationSQL,
		'
ALTER TABLE ' + PTNonPartitioned.SchemaName + '.' + PTNonPartitioned.PrepTableName + ' SWITCH TO ' +  PTPartitioned.SchemaName + '.' + PTPartitioned.PrepTableName + ' PARTITION ' + CAST(PTNonPartitioned.PartitionNumber AS VARCHAR(5)) + '' + CHAR(13) + CHAR(10) 
AS PartitionSwitchSQL,
		'
DROP TABLE ' + PTNonPartitioned.SchemaName + '.' + PTNonPartitioned.PrepTableName 
AS DropTableSQL,

		PTNonPartitioned.PartitionNumber
FROM DOI.vwTables_PrepTables PTNonPartitioned
	INNER JOIN DOI.vwTables_PrepTables PTPartitioned ON PTNonPartitioned.SchemaName = PTPartitioned.SchemaName
		AND PTPartitioned.TableName = PTNonPartitioned.TableName
WHERE PTNonPartitioned.IsNewPartitionedPrepTable = 0
	AND PTPartitioned.IsNewPartitionedPrepTable = 1


GO

GO
-------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwTables_PrepTables_Partitions.sql" ----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwTables_PrepTables_Partitions.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('e46e7424-f196-5c58-b3dd-ec5508e115a8' AS UNIQUEIDENTIFIER), '17457891F055BB11B863C1284D8B8E25669BC474439995596B97BC03E91E4FD0', 'Programmable Objects\Views\DOI.vwTables_PrepTables_Partitions.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwTables_PrepTables_Partitions.sql", ID: {e46e7424-f196-5c58-b3dd-ec5508e115a8} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2211f2f4-916f-5d9c-aefa-1a4dbd8bc54d' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'DBD377C4C2A8F02DA31436A91EF303EF419D9B59B8CA504F47ADB21597C76A5D')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\Views\DOI.vwTables_PrepTables_Statistics.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwTables_PrepTables_Statistics.sql", ID: {2211f2f4-916f-5d9c-aefa-1a4dbd8bc54d} *****';

GO


------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwTables_PrepTables_Statistics.sql" ---------
GO
IF OBJECT_ID('[DOI].[vwTables_PrepTables_Statistics]') IS NOT NULL
	DROP VIEW [DOI].[vwTables_PrepTables_Statistics];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   VIEW [DOI].[vwTables_PrepTables_Statistics]
AS

/*
	SELECT	*
	FROM  DOI.vwTables_PrepTables_Statistics FNS
	WHERE FNS.SchemaName = 'dbo'
		AND FNS.ParentTableName = 'PartitioningTestAutomationTable'
    
    STATISTICS DON'T HAVE THE SAME REQUIREMENTS AS INDEXES AND CONSTRAINTS:
    1. WE DON'T NEED THEM IN ORDER TO DO PARTITION SWITCHING.  
        - SO WE DON'T CREATE STATISTICS ON THE PREP TABLES, ONLY ON THE NEWLY PARTITIONED TABLE.
    2. WHEN YOU RENAME AN INDEX, ITS ACCOMPANYING STATISTICS OBJECT AUTOMATICALLY GETS RENAMED.
        - SO WE REALLY ONLY NEED TO RENAME THE STATISTICS NOT ASSOCIATED WITH AN INDEX.
            - FOR THIS REASON, WE ADDED AN IF...EXISTS TO THE STATISTICS RENAMES.
*/ 
	SELECT	STM.DatabaseName,
            T.SchemaName,
			T.TableName AS ParentTableName, 
            T.PrepTableName,
			REPLACE(STM.StatisticsName, T.TableName, T.PrepTableName) AS StatisticsName,
            STM.StatisticsName AS ParentStatisticsName,
			ROW_NUMBER() OVER(PARTITION BY T.SchemaName, T.TableName ORDER BY T.SchemaName, T.TableName, STM.StatisticsName) AS RowNum,
'
IF NOT EXISTS(SELECT ''True'' FROM sys.stats WHERE NAME = ''' + REPLACE(STM.StatisticsName, T.TableName, T.PrepTableName) + ''')
BEGIN
    CREATE STATISTICS ' + REPLACE(STM.StatisticsName, T.TableName, T.PrepTableName) + '
    ON ' + T.SchemaName + '.' + T.PrepTableName + '(' + STM.StatisticsColumnList_Desired + ')' + 
        CASE 
            WHEN STM.IsFiltered_Desired = 1 
            THEN '
    WHERE ' + STM.FilterPredicate_Desired 
            ELSE '' 
        END + '
    WITH SAMPLE ' + CAST(STM.SampleSizePct_Desired AS VARCHAR(3)) + ' PERCENT
        /*, PERSIST_SAMPLE_PERCENT = ON  this has to wait until 2016 SP2.
        , MAXDOP = 0*/
    ' + CASE WHEN STM.NoRecompute_Desired = 1 THEN ', NORECOMPUTE' ELSE '' END +
    ', INCREMENTAL = ' + CASE WHEN STM.IsIncremental_Desired = 1 THEN 'ON' ELSE 'OFF' END + '
END' AS CreateStatisticsStatement,
/*
WE NEED THE IF EXISTS HERE, because when Renaming an index with statistics it also automatically renames the statistics.  So
if an index is renamed before its statistic, then the statistic will no longer be there.
*/
            CASE 
                WHEN T.IsNewPartitionedPrepTable = 0
                THEN ''
                ELSE    CASE 
                            WHEN STM.IsStatisticsMissing = 1
                            THEN ''
                            ELSE STM.RenameStatisticsSQL
                        END 
            END AS RenameExistingTableStatisticsSQL,
            CASE 
                WHEN T.IsNewPartitionedPrepTable = 0
                THEN ''
                ELSE STM.RevertRenameStatisticsSQL
            END AS RevertRenameExistingTableStatisticsSQL,
            CASE
                WHEN T.IsNewPartitionedPrepTable = 0
                THEN ''
                ELSE '
IF EXISTS ( SELECT ''True''
            FROM SYS.stats st 
                INNER JOIN SYS.TABLES t ON t.object_id = st.object_id 
                INNER JOIN sys.schemas s ON s.schema_id = t.schema_id
            WHERE s.name = ''' + T.SchemaName + '''
                AND t.name = ''' + T.PrepTableName + '''
                AND st.name = ''' + REPLACE(STM.StatisticsName, T.TableName, T.PrepTableName) + ''')
BEGIN
    SET DEADLOCK_PRIORITY 10
    EXEC sys.sp_rename 
        @objname = ''' + T.SchemaName + '.' + T.PrepTableName + '.' + REPLACE(STM.StatisticsName, T.TableName, T.PrepTableName) + ''',
        @newname = ''' + STM.StatisticsName + ''',
        @objtype = ''STATISTICS''
END'
            END AS RenameNewPartitionedPrepTableStatisticsSQL,
            CASE
                WHEN T.IsNewPartitionedPrepTable = 0
                THEN ''
                ELSE '
IF EXISTS ( SELECT ''True''
            FROM SYS.stats st 
                INNER JOIN SYS.TABLES t ON t.object_id = st.object_id 
                INNER JOIN sys.schemas s ON s.schema_id = t.schema_id
            WHERE s.name = ''' + T.SchemaName + '''
                AND t.name = ''' + T.PrepTableName + '''
                AND st.name = ''' + STM.StatisticsName + ''')
BEGIN
    SET DEADLOCK_PRIORITY 10
    EXEC sys.sp_rename 
        @objname = ''' + T.SchemaName + '.' + T.PrepTableName + '.' + STM.StatisticsName + ''',
        @newname = ''' + REPLACE(STM.StatisticsName, T.TableName, T.PrepTableName) + ''',
        @objtype = ''STATISTICS''
END' 
            END AS RevertRenameNewPartitionedPrepTableStatisticsSQL
	FROM  DOI.vwTables_PrepTables T
        INNER JOIN DOI.[vwStatistics] STM ON STM.SchemaName = T.SchemaName 
            AND STM.TableName = T.TableName
    WHERE T.IsNewPartitionedPrepTable = 1

GO

GO
-------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\Views\DOI.vwTables_PrepTables_Statistics.sql" ----------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\Views\DOI.vwTables_PrepTables_Statistics.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('2211f2f4-916f-5d9c-aefa-1a4dbd8bc54d' AS UNIQUEIDENTIFIER), 'DBD377C4C2A8F02DA31436A91EF303EF419D9B59B8CA504F47ADB21597C76A5D', 'Programmable Objects\Views\DOI.vwTables_PrepTables_Statistics.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\Views\DOI.vwTables_PrepTables_Statistics.sql", ID: {2211f2f4-916f-5d9c-aefa-1a4dbd8bc54d} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
PRINT '169 migration(s) deployed successfully';

GO







------------------------------------------------------------------------------------------------------------------------
------------------------------------------       POST-DEPLOYMENT SCRIPTS      ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\01_Finalize_Deployment.sql" -----';
GO

---------------------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" ------------------------
/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/
EXEC DOI.spRun_RenameDefaultConstraints 
	@Debug = 0

EXEC DOI.spRun_RenameStatistics
    @Debug = 0

GO
GO
----------------------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" -------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\02_Insert Data Into MappingSqlServerDMVToDOITables.sql" -----';
GO

-------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\02_Insert Data Into MappingSqlServerDMVToDOITables.sql" ----------
DELETE DOI.MappingSqlServerDMVToDOITables 
GO

INSERT INTO DOI.MappingSqlServerDMVToDOITables 
        ( DOITableName              , SQLServerObjectName               , SQLServerObjectType   , HasDatabaseIdInOutput , DatabaseOutputString			, FunctionParameterList										, FunctionParentDMV	)
VALUES   ('SysFilegroups'           , 'sys.filegroups'                  , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysDestinationDataSpaces', 'sys.destination_data_spaces'     , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysSchemas'              , 'sys.schemas'                     , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysTables'               , 'sys.tables'                      , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysIndexes'              , 'sys.indexes'                     , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysIndexPhysicalStats'   , 'sys.dm_db_index_physical_stats'  , 'FN'                  , 1                     , NULL							, 'DB_ID(''{DatabaseName}''), NULL, NULL, NULL, ''SAMPLED''', NULL				)
        ,('SysPartitions'           , 'sys.partitions'                  , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysAllocationUnits'      , 'sys.allocation_units'            , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysDatabaseFiles'        , 'sys.database_files'              , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysDmOsVolumeStats'      , 'sys.dm_os_volume_stats'          , 'FN'                  , 1                     , 'DB_ID(''{DatabaseName}'')'	, 'DB_ID(''{DatabaseName}''), file_id'						, 'SysDatabaseFiles')
        ,('SysDatabases'            , 'sys.databases'                   , 'V'                   , 1                     , NULL							, NULL														, NULL				)
        ,('SysColumns'              , 'sys.columns'                     , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysTypes'                , 'sys.types'                       , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysPartitionFunctions'   , 'sys.partition_functions'         , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysPartitionRangeValues' , 'sys.partition_range_values'      , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysPartitionSchemes'     , 'sys.partition_schemes'           , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysIndexColumns'         , 'sys.index_columns'               , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysDataSpaces'           , 'sys.data_spaces'                 , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysStats'                , 'sys.stats'                       , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysDmDbStatsProperties'  , 'sys.dm_db_stats_properties'      , 'FN'                  , 0                     , 'DB_ID(''{DatabaseName}'')'	, 'p.object_id, p.stats_id'									, 'SysStats'		)
        ,('SysStatsColumns'         , 'sys.stats_columns'               , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysForeignKeys'			, 'sys.foreign_keys'                , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysForeignKeyColumns'	, 'sys.foreign_key_columns'         , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysCheckConstraints'		, 'sys.check_constraints'			, 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysDefaultConstraints'	, 'sys.default_constraints'         , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysTriggers'				, 'sys.triggers'					, 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysMasterFiles'			, 'sys.master_files'				, 'V'                   , 1                     , NULL							, NULL														, NULL				)
GO
GO
--------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\02_Insert Data Into MappingSqlServerDMVToDOITables.sql" -----------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\03_Create Sql Agent Job - Refresh Metadata.sql" -----';
GO

------------ BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\03_Create Sql Agent Job - Refresh Metadata.sql" --------------
USE msdb
GO

IF EXISTS(SELECT 'True' FROM dbo.sysjobs WHERE name = 'DOI - Refresh Metadata')
BEGIN
	EXEC sp_delete_job @job_name = N'DOI - Refresh Metadata' ;  

	PRINT 'Deleted Job DOI - Refresh Metadata.'
END
GO


BEGIN TRY
	BEGIN TRANSACTION
		DECLARE @ReturnCode INT
		SELECT @ReturnCode = 0

		/****** Object:  JobCategory [DB Maintenance]    Script Date: 7/25/2014 4:08:45 PM ******/
		IF NOT EXISTS (SELECT name FROM dbo.syscategories WHERE name=N'DB Maintenance' AND category_class=1)
		BEGIN
			EXEC @ReturnCode = dbo.sp_add_category 
				@class=N'JOB', 
				@type=N'LOCAL', 
				@name=N'DB Maintenance'
		END

		DECLARE @jobId BINARY(16)

		EXEC @ReturnCode =  dbo.sp_add_job 
			@job_name=N'DOI - Refresh Metadata', 
			@enabled=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=0, 
			@notify_level_netsend=0, 
			@notify_level_page=0, 
			@delete_level=0, 
			@description=N'No description available.', 
			@category_name=N'DB Maintenance', 
			@owner_login_name=N'sa', 
			@job_id = @jobId OUTPUT
		PRINT 'Created job DOI - Refresh Metadata'


		/****** Object:  Step [DOI - Refresh Metadata]    Script Date: 7/25/2014 4:08:45 PM ******/
		EXEC @ReturnCode = dbo.sp_add_jobstep 
			@job_id=@jobId, 
			@step_name=N'Refresh Metadata', 
			@step_id=1, 
			@cmdexec_success_code=0, 
			@on_success_action=1, 
			@on_success_step_id=0, 
			@on_fail_action=2, 
			@on_fail_step_id=0, 
			@retry_attempts=0, 
			@retry_interval=0, 
			@os_run_priority=0, 
			@subsystem=N'TSQL', 
			@command=N'EXEC DOI.spRefreshMetadata_Run_All', 
			@database_name=N'DOI', 
			@flags=0

		EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule 
			@job_id=@jobId, 
			@name=N'DOI-Every 5 Minutes', 
			@enabled=1, 
			@freq_type=4, 
			@freq_interval=1, 
			@freq_subday_type=4, 
			@freq_subday_interval=5, 
			@freq_relative_interval=0, 
			@freq_recurrence_factor=0, 
			@active_start_date=20191217, 
			@active_end_date=99991231, 
			@active_start_time=0, 
			@active_end_time=235959, 
			@schedule_uid=N'39536401-ebf7-4876-8ad7-86ea459ded1c'


		EXEC @ReturnCode = dbo.sp_update_job 
			@job_id = @jobId, 
			@start_step_id = 1

		EXEC @ReturnCode = dbo.sp_add_jobserver 
			@job_id = @jobId, 
			@server_name = N'(local)'

	COMMIT TRANSACTION
END TRY

BEGIN CATCH
	IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION;
	THROW;
END CATCH


SELECT @jobid = job_id 
FROM dbo.sysjobs j 
WHERE j.name = 'DOI - Refresh Metadata'

IF EXISTS(SELECT 'True' FROM master.dbo.JobsToGovern WHERE JobName = 'DOI - Refresh Metadata')
BEGIN
	DELETE master.dbo.JobsToGovern WHERE JobName = 'DOI - Refresh Metadata'
END

IF NOT EXISTS(SELECT 'True' FROM master.dbo.JobsToGovern WHERE JobName = 'DOI - Refresh Metadata')
BEGIN
	INSERT INTO master.dbo.JobsToGovern ( JobID ,JobName ,MatchString )
	VALUES ( @jobid , N'DOI - Refresh Metadata' , N'SQLAgent - TSQL JobStep (Job ' + CONVERT(VARCHAR(36), CONVERT(BINARY(16), @jobid), 1) + '%')
END
GO
GO
------------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\03_Create Sql Agent Job - Refresh Metadata.sql" ---------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\04_Create Sql Agent Job - Refresh Indexes.sql" -----';
GO

------------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\04_Create Sql Agent Job - Refresh Indexes.sql" --------------
GO
-------------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\04_Create Sql Agent Job - Refresh Indexes.sql" ---------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\05_Create Sql Agent Job - Refresh Storage Containers.sql" -----';
GO

------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\05_Create Sql Agent Job - Refresh Storage Containers.sql" ---------
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO
-------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\05_Create Sql Agent Job - Refresh Storage Containers.sql" ----------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\06_Create Sql Agent Job - Add New Partitions On Calendar Switch.sql" -----';
GO

-- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\06_Create Sql Agent Job - Add New Partitions On Calendar Switch.sql" ---
--4. needs to be run on new month or new year...ADD SQLAgent Job.
IF NOT EXISTS(SELECT 'True' FROM msdb.dbo.sysjobs WHERE name = 'DOI-Add New Partitions On Calendar Switch')
BEGIN
	DECLARE @SQL VARCHAR(MAX) = '',
			@Debug BIT = 0,
			@RunDate VARCHAR(30) = CONVERT(VARCHAR(30), DATEADD(DAY, 1, SYSDATETIME()), 112)

		SET @SQL = '
		USE [msdb]

		/****** Object:  Job [DOI-Add New Partitions On Calendar Switch]    Script Date: 7/25/2014 4:08:45 PM ******/
		BEGIN TRY
			BEGIN TRANSACTION
				DECLARE @ReturnCode INT
				SELECT @ReturnCode = 0

				/****** Object:  JobCategory [DB Maintenance]    Script Date: 7/25/2014 4:08:45 PM ******/
				IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N''DB Maintenance'' AND category_class=1)
				BEGIN
					EXEC @ReturnCode = msdb.dbo.sp_add_category 
						@class=N''JOB'', 
						@type=N''LOCAL'', 
						@name=N''DB Maintenance''
				END

				DECLARE @jobId BINARY(16)

				EXEC @ReturnCode =  msdb.dbo.sp_add_job 
					@job_name=N''DOI-Add New Partitions On Calendar Switch'', 
					@enabled=1, 
					@notify_level_eventlog=0, 
					@notify_level_email=0, 
					@notify_level_netsend=0, 
					@notify_level_page=0, 
					@delete_level=0, 
					@description=N''No description available.'', 
					@category_name=N''DB Maintenance'', 
					@owner_login_name=N''sa'', 
					@job_id = @jobId OUTPUT
				PRINT ''Created job DOI-Add New Partitions On Calendar Switch''

				/****** Object:  Step [Add New Partitions On Calendar Switch]    Script Date: 7/25/2014 4:08:45 PM ******/
				EXEC @ReturnCode = msdb.dbo.sp_add_jobstep 
					@job_id=@jobId, 
					@step_name=N''Add New Partitions'', 
					@step_id=1, 
					@cmdexec_success_code=0, 
					@on_success_action=1, 
					@on_success_step_id=0, 
					@on_fail_action=2, 
					@on_fail_step_id=0, 
					@retry_attempts=0, 
					@retry_interval=0, 
					@os_run_priority=0, 
					@subsystem=N''TSQL'', 
					@command=N''
EXEC DOI.spDOI_AddNewPartition
					
EXEC DOI.spIndexRowStorePartitionsNotInMetadata'', 
	@database_name=N''PaymentReporting'', 
	@flags=0

				EXEC @ReturnCode = msdb.dbo.sp_update_job 
					@job_id = @jobId, 
					@start_step_id = 1

				EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule 
					@job_id=@jobId, 
					@name=N''On Calendar Switches'', 
					@enabled=1, 
					@freq_type=16, 
					@freq_interval=1, 
					@freq_subday_type=1, 
					@freq_subday_interval=0, 
					@freq_relative_interval=0, 
					@freq_recurrence_factor=1, 
					@active_start_date=' +  @RunDate + ', 
					@active_end_date=99991231, 
					@active_start_time=040000, 
					@active_end_time=235959, 
					@schedule_uid=N''6cf2af6e-bbc9-4650-8e4b-87278aa36ab2''

				EXEC @ReturnCode = msdb.dbo.sp_add_jobserver 
					@job_id = @jobId, 
					@server_name = N''(local)''

			COMMIT TRANSACTION
		END TRY

		BEGIN CATCH
			IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION;
			THROW;
		END CATCH'

		IF @Debug = 1
		BEGIN
			EXEC dbo.spPrintOutLongSQL @SQLInput = @SQL,
				@VariableName = N'@SQL'	
		END
		ELSE
		BEGIN
			EXEC (@SQL)
		END
END
GO

IF EXISTS (SELECT * FROM msdb.dbo.sysjobs j INNER JOIN msdb.dbo.sysjobsteps js ON js.job_id = j.job_id WHERE j.name = 'DOI-Add New Partitions On Calendar Switch' AND js.step_name = 'Add New Partitions' AND js.command LIKE '%spIndexRowStorePartitionsNotInMetadata%')
BEGIN
    DECLARE @StepId INT = (SELECT js.step_id FROM msdb.dbo.sysjobs j INNER JOIN msdb.dbo.sysjobsteps js ON js.job_id = j.job_id WHERE j.name = 'DOI-Add New Partitions On Calendar Switch' AND js.step_name = 'Add New Partitions' AND js.command LIKE '%spIndexRowStorePartitionsNotInMetadata%')

    EXEC msdb.dbo.sp_update_jobstep 
        @job_name = 'DOI-Add New Partitions On Calendar Switch' ,
        @step_id = @StepId,
        @command = N'
EXEC DOI.spDOI_AddNewPartition
					
EXEC DOI.spIndexPartitionsNotInMetadata'

    PRINT 'Updated Add New Partitions step.'
END
GO
GO
--- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\06_Create Sql Agent Job - Add New Partitions On Calendar Switch.sql" ----

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO


IF SERVERPROPERTY('EngineEdition') != 5 AND HAS_PERMS_BY_NAME(N'sys.xp_logevent', N'OBJECT', N'EXECUTE') = 1
BEGIN
  DECLARE @databaseName AS nvarchar(2048), @eventMessage AS nvarchar(2048)
  SET @databaseName = REPLACE(REPLACE(DB_NAME(), N'\', N'\\'), N'"', N'\"')
  SET @eventMessage = N'Redgate SQL Change Automation: { "deployment": { "description": "Redgate SQL Change Automation deployed $(ReleaseVersion) to ' + @databaseName + N'", "database": "' + @databaseName + N'" }}'
  EXECUTE sys.xp_logevent 55000, @eventMessage
END
PRINT 'Deployment completed successfully.'
GO




SET NOEXEC OFF; -- Resume statement execution if an error occurred within the script pre-amble
