/*
    Target database:    DDI
    Target instance:    A07688SAMUELBE
    Generated date:     2/12/2020 2:32:38 PM
    Generated on:       A07688SAMUELBE
    Package version:    (undefined)
    Migration version:  (n/a)
    Baseline version:   (n/a)
    SQL Change Automation version:  4.2.20036.15306
    Migrations pending: 0

    IMPORTANT! "SQLCMD Mode" must be activated prior to execution (under the Query menu in SSMS).

    BEFORE EXECUTING THIS SCRIPT, WE STRONGLY RECOMMEND YOU TAKE A BACKUP OF YOUR DATABASE.

    This SQLCMD script is designed to be executed through MSBuild (via the .sqlproj Deploy target) however
    it can also be run manually using SQL Management Studio.

    It was generated by the SQL Change Automation build task and contains logic to deploy the database, ensuring that
    each of the incremental migrations is executed a single time only in alphabetical (filename)
    order. If any errors occur within those scripts, the deployment will be aborted and the transaction
    rolled-back.

    NOTE: Automatic transaction management is provided for incremental migrations, so you don't need to
          add any special BEGIN TRAN/COMMIT/ROLLBACK logic in those script files.
          However if you require transaction handling in your Pre/Post-Deployment scripts, you will
          need to add this logic to the source .sql files yourself.
*/

----====================================================================================================================
---- SQLCMD Variables
:setvar ReleaseVersion ""
:setvar ForceDeployWithoutBaseline "False"
:setvar DefaultFilePrefix "DDI"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultBackupPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\Backup\"
----====================================================================================================================

:on error exit -- Instructs SQLCMD to abort execution as soon as an erroneous batch is encountered

:setvar PackageVersion "(undefined)"
:setvar IsShadowDeployment 0

GO
:setvar IsSqlCmdEnabled "True"
GO


GO

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
SET XACT_ABORT ON; -- Abort the current batch immediately if a statement raises a run-time error and rollback any open transaction(s)

IF N'$(IsSqlCmdEnabled)' <> N'True' -- Is SQLCMD mode not enabled within the execution context (eg. SSMS)
    BEGIN
        IF IS_SRVROLEMEMBER(N'sysadmin') = 1
            BEGIN -- User is sysadmin; abort execution by disconnect the script from the database server
                RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Aborting connection to suppress subsequent errors.', 20, 127, N'UNKNOWN') WITH LOG;
            END
        ELSE
            BEGIN -- User is not sysadmin; abort execution by switching off statement execution (script will continue to the end without performing any actual deployment work)
                RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Script execution has been halted.', 16, 127, N'UNKNOWN') WITH NOWAIT;
            END
    END
GO
IF @@ERROR != 0
    BEGIN
        SET NOEXEC ON; -- SQLCMD is NOT enabled so prevent any further statements from executing
    END
GO
-- Beyond this point, no further explicit error handling is required because it can be assumed that SQLCMD mode is enabled

IF SERVERPROPERTY('EngineEdition') = 5 AND DB_NAME() != N'$(DatabaseName)'
  RAISERROR(N'Azure SQL Database does not support switching between databases. Connect to [$(DatabaseName)] and then re-run the script.', 16, 127);








------------------------------------------------------------------------------------------------------------------------
------------------------------------------       PRE-DEPLOYMENT SCRIPTS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\01_Create_Database.sql" -----';
GO

------------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Create_Database.sql" ---------------------------
IF (DB_ID(N'$(DatabaseName)') IS NULL)
BEGIN
	PRINT N'Creating $(DatabaseName)...';
END
GO

IF (DB_ID(N'$(DatabaseName)') IS NULL)
BEGIN
	CREATE DATABASE [$(DatabaseName)]
	 CONTAINMENT = PARTIAL
	 ON  PRIMARY 
	( NAME = N'$(DatabaseName)', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\$(DatabaseName).mdf' , SIZE = 8192KB , FILEGROWTH = 65536KB )
	 LOG ON 
	( NAME = N'$(DatabaseName)_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\$(DatabaseName)_log.ldf' , SIZE = 8192KB , FILEGROWTH = 65536KB )
END
GO



ALTER DATABASE [$(DatabaseName)] SET COMPATIBILITY_LEVEL = 130
ALTER DATABASE [$(DatabaseName)] SET ANSI_NULL_DEFAULT OFF 
ALTER DATABASE [$(DatabaseName)] SET ANSI_NULLS OFF 
ALTER DATABASE [$(DatabaseName)] SET ANSI_PADDING OFF 
ALTER DATABASE [$(DatabaseName)] SET ANSI_WARNINGS OFF 
ALTER DATABASE [$(DatabaseName)] SET ARITHABORT OFF 
ALTER DATABASE [$(DatabaseName)] SET AUTO_CLOSE OFF 
ALTER DATABASE [$(DatabaseName)] SET AUTO_SHRINK OFF 
ALTER DATABASE [$(DatabaseName)] SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF)
ALTER DATABASE [$(DatabaseName)] SET AUTO_UPDATE_STATISTICS ON 
ALTER DATABASE [$(DatabaseName)] SET CURSOR_CLOSE_ON_COMMIT OFF 
ALTER DATABASE [$(DatabaseName)] SET CURSOR_DEFAULT  GLOBAL 
ALTER DATABASE [$(DatabaseName)] SET CONCAT_NULL_YIELDS_NULL OFF 
ALTER DATABASE [$(DatabaseName)] SET NUMERIC_ROUNDABORT OFF 
ALTER DATABASE [$(DatabaseName)] SET QUOTED_IDENTIFIER OFF 
ALTER DATABASE [$(DatabaseName)] SET RECURSIVE_TRIGGERS OFF 
ALTER DATABASE [$(DatabaseName)] SET DISABLE_BROKER 
ALTER DATABASE [$(DatabaseName)] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
ALTER DATABASE [$(DatabaseName)] SET DATE_CORRELATION_OPTIMIZATION OFF 
ALTER DATABASE [$(DatabaseName)] SET PARAMETERIZATION SIMPLE 
ALTER DATABASE [$(DatabaseName)] SET READ_COMMITTED_SNAPSHOT OFF
ALTER DATABASE [$(DatabaseName)] SET READ_WRITE 
ALTER DATABASE [$(DatabaseName)] SET RECOVERY FULL 
ALTER DATABASE [$(DatabaseName)] SET MULTI_USER 
ALTER DATABASE [$(DatabaseName)] SET PAGE_VERIFY CHECKSUM  
ALTER DATABASE [$(DatabaseName)] SET TARGET_RECOVERY_TIME = 60 SECONDS 
ALTER DATABASE [$(DatabaseName)] SET DELAYED_DURABILITY = DISABLED 
--ALTER DATABASE [$(DatabaseName)] SET MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT
GO

ALTER DATABASE [$(DatabaseName)] SET DEFAULT_FULLTEXT_LANGUAGE = 1033 
ALTER DATABASE [$(DatabaseName)] SET TRANSFORM_NOISE_WORDS = OFF 
ALTER DATABASE [$(DatabaseName)] SET TWO_DIGIT_YEAR_CUTOFF = 2049 
ALTER DATABASE [$(DatabaseName)] SET DEFAULT_LANGUAGE = 1033 
ALTER DATABASE [$(DatabaseName)] SET NESTED_TRIGGERS = ON 
GO


USE [$(DatabaseName)]
GO
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;

IF NOT EXISTS (SELECT name FROM sys.filegroups WHERE is_default=1 AND name = N'PRIMARY') 
ALTER DATABASE [$(DatabaseName)] MODIFY FILEGROUP [PRIMARY] DEFAULT
GO


IF NOT EXISTS (SELECT name FROM sys.filegroups WHERE name = N'InMem') 
ALTER DATABASE [$(DatabaseName)] ADD FILEGROUP [InMem] CONTAINS MEMORY_OPTIMIZED_DATA;
GO

IF NOT EXISTS (SELECT 'True' FROM sys.database_files WHERE name = N'$(DatabaseName)_InMem')
ALTER DATABASE [$(DatabaseName)] 
    ADD FILE ( NAME = N'$(DatabaseName)_InMem', 
               FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\$(DatabaseName)_InMem.ndf'  ) 
        TO FILEGROUP [InMem]
GO
GO
-------------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Create_Database.sql" ----------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\02_Create Schemas.sql" -----';
GO

-------------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\02_Create Schemas.sql" ---------------------------
IF NOT EXISTS(SELECT 'True' FROM sys.schemas WHERE name = 'DDI')
EXEC('CREATE SCHEMA DDI AUTHORIZATION dbo')
GO
GO
--------------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\02_Create Schemas.sql" ----------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\02_Create_Schemas.sql" -----';
GO

-------------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\02_Create_Schemas.sql" ---------------------------
PRINT N'Creating schemas'
GO
IF SCHEMA_ID(N'DDI') IS NULL
EXEC sp_executesql N'CREATE SCHEMA [DDI]
AUTHORIZATION [dbo]'
GO
IF SCHEMA_ID(N'Utility') IS NULL
EXEC sp_executesql N'CREATE SCHEMA [Utility]
AUTHORIZATION [dbo]'
GO
GO
--------------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\02_Create_Schemas.sql" ----------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\03_Query_Store.sql" -----';
GO

--------------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\03_Query_Store.sql" -----------------------------
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
USE DDI
GO

IF (SELECT is_query_store_on FROM SYS.databases WHERE NAME = 'DDI') <> 1
BEGIN
	ALTER DATABASE DDI SET QUERY_STORE = ON;

	PRINT 'Set DDI QUERY_STORE to ON.'
END
GO


IF EXISTS(	SELECT 'True'
			FROM sys.database_query_store_options 
			WHERE actual_state_desc <> 'READ_WRITE'
				OR max_storage_size_mb <> 10000
				OR query_capture_mode_desc <> 'ALL'
				OR size_based_cleanup_mode_desc <> 'AUTO'
				OR STALE_QUERY_THRESHOLD_DAYS <> 120)
BEGIN
	ALTER DATABASE DDI SET QUERY_STORE
		(
			OPERATION_MODE = READ_WRITE,
			MAX_STORAGE_SIZE_MB = 10000,
			QUERY_CAPTURE_MODE = ALL,
			SIZE_BASED_CLEANUP_MODE = AUTO,
			CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 120)
		);

	PRINT 'Fixed QUERY_STORE settings.'
END		
GO
GO
---------------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\03_Query_Store.sql" ------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\03_Resource Governor Setup.sql" -----';
GO

--------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\03_Resource Governor Setup.sql" -----------------------
USE master
GO

IF EXISTS(SELECT 'True' FROM sys.resource_governor_configuration rgc WHERE rgc.is_enabled = 0)
BEGIN
	ALTER RESOURCE GOVERNOR RECONFIGURE;   --enables resource governor

	PRINT 'Enabled Resource Governor.'
END

IF NOT EXISTS(SELECT 'True' FROM sys.resource_governor_configuration rgc WHERE rgc.is_enabled = 1)
BEGIN
	RAISERROR('Resource Governor was not enabled.', 16, 1)
END

GO  

IF EXISTS (SELECT 'True' FROM sys.resource_governor_workload_groups WHERE name = 'IndexMaintenanceGroup')
BEGIN
	DROP WORKLOAD GROUP IndexMaintenanceGroup

	PRINT 'Dropped IndexMaintenanceGroup.'
END
GO

IF EXISTS(SELECT 'True' FROM sys.resource_governor_resource_pools WHERE name = 'IndexMaintenancePool')
BEGIN
	DROP RESOURCE POOL IndexMaintenancePool

	PRINT 'Dropped IndexMaintenancePool.'
END
GO

IF NOT EXISTS(SELECT 'True' FROM sys.resource_governor_resource_pools WHERE name = 'IndexMaintenancePool')
BEGIN
	CREATE RESOURCE POOL IndexMaintenancePool WITH
	(
		MAX_IOPS_PER_VOLUME = 500, --what is the right number?  run test rebuilds and watch max value SQL Server:Resource Pool Stats:Disk Write IO/Sec perfmon counter to get # IOPS consumed.
		MIN_IOPS_PER_VOLUME = 1, 
		MAX_MEMORY_PERCENT = 20, 
		CAP_CPU_PERCENT = 20, --hard cap on MAXIMUM cpu bandwidth
		MAX_CPU_PERCENT = 20 --max AVERAGE CPU bandwidth WHEN THERE IS CPU CONTENTION.
		--AFFINITY {SCHEDULER =  
	 --                 AUTO 
	 --               | ( <scheduler_range_spec> )   
	 --               | NUMANODE = ( <NUMA_node_range_spec> )
	 --               } ]   
	)

	PRINT 'Created IndexMaintenancePool Resource Governor Resource Pool.'
END
GO
 
-- Create a new Workload Group for the Index Maintenance process
IF NOT EXISTS (SELECT 'True' FROM sys.resource_governor_workload_groups WHERE name = 'IndexMaintenanceGroup')
BEGIN
	CREATE WORKLOAD GROUP IndexMaintenanceGroup
	--WITH (MAX_DOP = 1, IMPORTANCE = LOW)
	USING IndexMaintenancePool

	PRINT 'Created IndexMaintenanceGroup Resource Governor Workload Group.'
END
GO

IF EXISTS(	SELECT 'True'
			FROM sys.resource_governor_configuration rgc 
				INNER JOIN sys.objects o ON rgc.classifier_function_id = o.object_id
			WHERE o.name = 'fnClassifier')
BEGIN
	ALTER RESOURCE GOVERNOR WITH (CLASSIFIER_FUNCTION = null)

	PRINT 'Changed Resource Gov Classifier Function to NULL.'

	IF EXISTS(SELECT 'True' FROM sys.dm_resource_governor_configuration WHERE is_reconfiguration_pending = 1)
	BEGIN
		ALTER RESOURCE GOVERNOR RECONFIGURE

		PRINT 'Ran Resource Gov Reconfigure.'
	END
	ELSE
	BEGIN
		RAISERROR('Resource Governor change to ClassifierFunction = NULL did not take.', 16, 1)
	END
END

GO

--DROP OLD CLASSIFIER FUNCTION.
IF OBJECT_ID('dbo.fnLoginClassifier') IS NOT NULL
BEGIN
	IF EXISTS(	SELECT 'True'
				FROM sys.resource_governor_configuration rgc 
					INNER JOIN sys.objects o ON rgc.classifier_function_id = o.object_id
				WHERE o.name = 'fnLoginClassifier')
	BEGIN
		ALTER RESOURCE GOVERNOR WITH (CLASSIFIER_FUNCTION = null)

		PRINT 'Changed Resource Gov Classifier Function to NULL.'

		IF EXISTS(SELECT 'True' FROM sys.dm_resource_governor_configuration WHERE is_reconfiguration_pending = 1)
		BEGIN
			ALTER RESOURCE GOVERNOR RECONFIGURE

			PRINT 'Ran Resource Gov Reconfigure.'
		END
		ELSE
		BEGIN
			RAISERROR('Resource Governor change to ClassifierFunction = NULL did not take.', 16, 1)
		END
	END

	DROP FUNCTION dbo.fnLoginClassifier

	PRINT 'Dropped dbo.fnLoginClassifier.'
END
GO


CREATE OR ALTER FUNCTION dbo.fnClassifier()
RETURNS SYSNAME WITH SCHEMABINDING
AS
BEGIN
	DECLARE @app		NVARCHAR(256) = APP_NAME(),
			@GroupName	SYSNAME = N'default';
	
	IF @app LIKE N'SQLAgent - TSQL JobStep%'
	BEGIN
		IF EXISTS (	SELECT 1 FROM dbo.JobsToGovern WHERE @app LIKE MatchString)
		BEGIN
			SET @GroupName = 'IndexMaintenanceGroup'
		END
	END
	
	RETURN @GroupName;
END
GO

-- Register the Classifier Function within Resource Governor
IF EXISTS(	SELECT 'True'
			FROM sys.resource_governor_configuration rgc 
			WHERE rgc.classifier_function_id = 0)
BEGIN
	ALTER RESOURCE GOVERNOR WITH(CLASSIFIER_FUNCTION = dbo.fnClassifier)

	PRINT 'Changed Resource Gov Classifier Function to dbo.fnClassifier.'

	IF EXISTS(SELECT 'True' FROM sys.dm_resource_governor_configuration WHERE is_reconfiguration_pending = 1)
	BEGIN
		ALTER RESOURCE GOVERNOR RECONFIGURE

		PRINT 'Ran Resource Gov Reconfigure.'
	END
	ELSE
	BEGIN
		RAISERROR('Resource Governor change to ClassifierFunction = fnClassifier did not take.', 16, 1)
	END
END

GO 

GO
---------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\03_Resource Governor Setup.sql" ------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;


SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
PRINT '# Truncating __SchemaSnapshot';
TRUNCATE TABLE [dbo].[__SchemaSnapshot];

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO







------------------------------------------------------------------------------------------------------------------------
------------------------------------------       POST-DEPLOYMENT SCRIPTS      ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\01_Finalize_Deployment.sql" -----';
GO

---------------------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" ------------------------
/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/
EXEC DDI.spRun_RenameDefaultConstraints 
	@Debug = 0

EXEC DDI.spRun_RenameStatistics
    @Debug = 0

GO
GO
----------------------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" -------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\02_Insert Data Into MappingSqlServerDMVToDDITables.sql" -----';
GO

-------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\02_Insert Data Into MappingSqlServerDMVToDDITables.sql" ----------
DELETE DDI.MappingSqlServerDMVToDDITables 
GO

INSERT INTO DDI.MappingSqlServerDMVToDDITables 
        ( DDITableName              , SQLServerObjectName               , SQLServerObjectType   , HasDatabaseIdInOutput , DatabaseOutputString			, FunctionParameterList										, FunctionParentDMV	)
VALUES   ('SysFilegroups'           , 'sys.filegroups'                  , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysDestinationDataSpaces', 'sys.destination_data_spaces'     , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysSchemas'              , 'sys.schemas'                     , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysTables'               , 'sys.tables'                      , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysIndexes'              , 'sys.indexes'                     , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysIndexPhysicalStats'   , 'sys.dm_db_index_physical_stats'  , 'FN'                  , 1                     , NULL							, 'DB_ID(''{DatabaseName}''), NULL, NULL, NULL, ''SAMPLED''', NULL				)
        ,('SysPartitions'           , 'sys.partitions'                  , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysAllocationUnits'      , 'sys.allocation_units'            , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysDatabaseFiles'        , 'sys.database_files'              , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysDmOsVolumeStats'      , 'sys.dm_os_volume_stats'          , 'FN'                  , 1                     , 'DB_ID(''{DatabaseName}'')'	, 'DB_ID(''{DatabaseName}''), file_id'						, 'SysDatabaseFiles')
        ,('SysDatabases'            , 'sys.databases'                   , 'V'                   , 1                     , NULL							, NULL														, NULL				)
        ,('SysColumns'              , 'sys.columns'                     , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysTypes'                , 'sys.types'                       , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysPartitionFunctions'   , 'sys.partition_functions'         , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysPartitionRangeValues' , 'sys.partition_range_values'      , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysPartitionSchemes'     , 'sys.partition_schemes'           , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysIndexColumns'         , 'sys.index_columns'               , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysDataSpaces'           , 'sys.data_spaces'                 , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysStats'                , 'sys.stats'                       , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysDmDbStatsProperties'  , 'sys.dm_db_stats_properties'      , 'FN'                  , 0                     , 'DB_ID(''{DatabaseName}'')'	, 'p.object_id, p.stats_id'									, 'SysStats'		)
        ,('SysStatsColumns'         , 'sys.stats_columns'               , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysForeignKeys'			, 'sys.foreign_keys'                , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysForeignKeyColumns'	, 'sys.foreign_key_columns'         , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysCheckConstraints'		, 'sys.check_constraints'			, 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysDefaultConstraints'	, 'sys.default_constraints'         , 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysTriggers'				, 'sys.triggers'					, 'V'                   , 0                     , 'DB_ID(''{DatabaseName}'')'	, NULL														, NULL				)
        ,('SysMasterFiles'			, 'sys.master_files'				, 'V'                   , 1                     , NULL							, NULL														, NULL				)
GO
GO
--------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\02_Insert Data Into MappingSqlServerDMVToDDITables.sql" -----------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\03_Create Sql Agent Job - Refresh Metadata.sql" -----';
GO

------------ BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\03_Create Sql Agent Job - Refresh Metadata.sql" --------------
USE msdb
GO

IF EXISTS(SELECT 'True' FROM dbo.sysjobs WHERE name = 'DDI - Refresh Metadata')
BEGIN
	EXEC sp_delete_job @job_name = N'DDI - Refresh Metadata' ;  

	PRINT 'Deleted Job DDI - Refresh Metadata.'
END
GO


BEGIN TRY
	BEGIN TRANSACTION
		DECLARE @ReturnCode INT
		SELECT @ReturnCode = 0

		/****** Object:  JobCategory [DB Maintenance]    Script Date: 7/25/2014 4:08:45 PM ******/
		IF NOT EXISTS (SELECT name FROM dbo.syscategories WHERE name=N'DB Maintenance' AND category_class=1)
		BEGIN
			EXEC @ReturnCode = dbo.sp_add_category 
				@class=N'JOB', 
				@type=N'LOCAL', 
				@name=N'DB Maintenance'
		END

		DECLARE @jobId BINARY(16)

		EXEC @ReturnCode =  dbo.sp_add_job 
			@job_name=N'DDI - Refresh Metadata', 
			@enabled=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=0, 
			@notify_level_netsend=0, 
			@notify_level_page=0, 
			@delete_level=0, 
			@description=N'No description available.', 
			@category_name=N'DB Maintenance', 
			@owner_login_name=N'sa', 
			@job_id = @jobId OUTPUT
		PRINT 'Created job DDI - Refresh Metadata'


		/****** Object:  Step [DDI - Refresh Metadata]    Script Date: 7/25/2014 4:08:45 PM ******/
		EXEC @ReturnCode = dbo.sp_add_jobstep 
			@job_id=@jobId, 
			@step_name=N'Refresh Metadata', 
			@step_id=1, 
			@cmdexec_success_code=0, 
			@on_success_action=1, 
			@on_success_step_id=0, 
			@on_fail_action=2, 
			@on_fail_step_id=0, 
			@retry_attempts=0, 
			@retry_interval=0, 
			@os_run_priority=0, 
			@subsystem=N'TSQL', 
			@command=N'EXEC DDI.spRefreshMetadata_Run_All', 
			@database_name=N'DDI', 
			@flags=0

		EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule 
			@job_id=@jobId, 
			@name=N'DDI-Every 5 Minutes', 
			@enabled=1, 
			@freq_type=4, 
			@freq_interval=1, 
			@freq_subday_type=4, 
			@freq_subday_interval=5, 
			@freq_relative_interval=0, 
			@freq_recurrence_factor=0, 
			@active_start_date=20191217, 
			@active_end_date=99991231, 
			@active_start_time=0, 
			@active_end_time=235959, 
			@schedule_uid=N'39536401-ebf7-4876-8ad7-86ea459ded1c'


		EXEC @ReturnCode = dbo.sp_update_job 
			@job_id = @jobId, 
			@start_step_id = 1

		EXEC @ReturnCode = dbo.sp_add_jobserver 
			@job_id = @jobId, 
			@server_name = N'(local)'

	COMMIT TRANSACTION
END TRY

BEGIN CATCH
	IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION;
	THROW;
END CATCH


SELECT @jobid = job_id 
FROM dbo.sysjobs j 
WHERE j.name = 'DDI - Refresh Metadata'

IF EXISTS(SELECT 'True' FROM master.dbo.JobsToGovern WHERE JobName = 'DDI - Refresh Metadata')
BEGIN
	DELETE master.dbo.JobsToGovern WHERE JobName = 'DDI - Refresh Metadata'
END

IF NOT EXISTS(SELECT 'True' FROM master.dbo.JobsToGovern WHERE JobName = 'DDI - Refresh Metadata')
BEGIN
	INSERT INTO master.dbo.JobsToGovern ( JobID ,JobName ,MatchString )
	VALUES ( @jobid , N'DDI - Refresh Metadata' , N'SQLAgent - TSQL JobStep (Job ' + CONVERT(VARCHAR(36), CONVERT(BINARY(16), @jobid), 1) + '%')
END
GO
GO
------------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\03_Create Sql Agent Job - Refresh Metadata.sql" ---------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\04_Create Sql Agent Job - Refresh Indexes.sql" -----';
GO

------------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\04_Create Sql Agent Job - Refresh Indexes.sql" --------------
GO
-------------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\04_Create Sql Agent Job - Refresh Indexes.sql" ---------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\05_Create Sql Agent Job - Refresh Storage Containers.sql" -----';
GO

------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\05_Create Sql Agent Job - Refresh Storage Containers.sql" ---------
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO
-------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\05_Create Sql Agent Job - Refresh Storage Containers.sql" ----------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\06_Create Sql Agent Job - Add New Partitions On Calendar Switch.sql" -----';
GO

-- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\06_Create Sql Agent Job - Add New Partitions On Calendar Switch.sql" ---
--4. needs to be run on new month or new year...ADD SQLAgent Job.
IF NOT EXISTS(SELECT 'True' FROM msdb.dbo.sysjobs WHERE name = 'DDI-Add New Partitions On Calendar Switch')
BEGIN
	DECLARE @SQL VARCHAR(MAX) = '',
			@Debug BIT = 0,
			@RunDate VARCHAR(30) = CONVERT(VARCHAR(30), DATEADD(DAY, 1, SYSDATETIME()), 112)

		SET @SQL = '
		USE [msdb]

		/****** Object:  Job [DDI-Add New Partitions On Calendar Switch]    Script Date: 7/25/2014 4:08:45 PM ******/
		BEGIN TRY
			BEGIN TRANSACTION
				DECLARE @ReturnCode INT
				SELECT @ReturnCode = 0

				/****** Object:  JobCategory [DB Maintenance]    Script Date: 7/25/2014 4:08:45 PM ******/
				IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N''DB Maintenance'' AND category_class=1)
				BEGIN
					EXEC @ReturnCode = msdb.dbo.sp_add_category 
						@class=N''JOB'', 
						@type=N''LOCAL'', 
						@name=N''DB Maintenance''
				END

				DECLARE @jobId BINARY(16)

				EXEC @ReturnCode =  msdb.dbo.sp_add_job 
					@job_name=N''DDI-Add New Partitions On Calendar Switch'', 
					@enabled=1, 
					@notify_level_eventlog=0, 
					@notify_level_email=0, 
					@notify_level_netsend=0, 
					@notify_level_page=0, 
					@delete_level=0, 
					@description=N''No description available.'', 
					@category_name=N''DB Maintenance'', 
					@owner_login_name=N''sa'', 
					@job_id = @jobId OUTPUT
				PRINT ''Created job DDI-Add New Partitions On Calendar Switch''

				/****** Object:  Step [Add New Partitions On Calendar Switch]    Script Date: 7/25/2014 4:08:45 PM ******/
				EXEC @ReturnCode = msdb.dbo.sp_add_jobstep 
					@job_id=@jobId, 
					@step_name=N''Add New Partitions'', 
					@step_id=1, 
					@cmdexec_success_code=0, 
					@on_success_action=1, 
					@on_success_step_id=0, 
					@on_fail_action=2, 
					@on_fail_step_id=0, 
					@retry_attempts=0, 
					@retry_interval=0, 
					@os_run_priority=0, 
					@subsystem=N''TSQL'', 
					@command=N''
EXEC DDI.spDDI_AddNewPartition
					
EXEC DDI.spIndexRowStorePartitionsNotInMetadata'', 
	@database_name=N''PaymentReporting'', 
	@flags=0

				EXEC @ReturnCode = msdb.dbo.sp_update_job 
					@job_id = @jobId, 
					@start_step_id = 1

				EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule 
					@job_id=@jobId, 
					@name=N''On Calendar Switches'', 
					@enabled=1, 
					@freq_type=16, 
					@freq_interval=1, 
					@freq_subday_type=1, 
					@freq_subday_interval=0, 
					@freq_relative_interval=0, 
					@freq_recurrence_factor=1, 
					@active_start_date=' +  @RunDate + ', 
					@active_end_date=99991231, 
					@active_start_time=040000, 
					@active_end_time=235959, 
					@schedule_uid=N''6cf2af6e-bbc9-4650-8e4b-87278aa36ab2''

				EXEC @ReturnCode = msdb.dbo.sp_add_jobserver 
					@job_id = @jobId, 
					@server_name = N''(local)''

			COMMIT TRANSACTION
		END TRY

		BEGIN CATCH
			IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION;
			THROW;
		END CATCH'

		IF @Debug = 1
		BEGIN
			EXEC dbo.spPrintOutLongSQL @SQLInput = @SQL,
				@VariableName = N'@SQL'	
		END
		ELSE
		BEGIN
			EXEC (@SQL)
		END
END
GO

IF EXISTS (SELECT * FROM msdb.dbo.sysjobs j INNER JOIN msdb.dbo.sysjobsteps js ON js.job_id = j.job_id WHERE j.name = 'DDI-Add New Partitions On Calendar Switch' AND js.step_name = 'Add New Partitions' AND js.command LIKE '%spIndexRowStorePartitionsNotInMetadata%')
BEGIN
    DECLARE @StepId INT = (SELECT js.step_id FROM msdb.dbo.sysjobs j INNER JOIN msdb.dbo.sysjobsteps js ON js.job_id = j.job_id WHERE j.name = 'DDI-Add New Partitions On Calendar Switch' AND js.step_name = 'Add New Partitions' AND js.command LIKE '%spIndexRowStorePartitionsNotInMetadata%')

    EXEC msdb.dbo.sp_update_jobstep 
        @job_name = 'DDI-Add New Partitions On Calendar Switch' ,
        @step_id = @StepId,
        @command = N'
EXEC DDI.spDDI_AddNewPartition
					
EXEC DDI.spIndexPartitionsNotInMetadata'

    PRINT 'Updated Add New Partitions step.'
END
GO
GO
--- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\06_Create Sql Agent Job - Add New Partitions On Calendar Switch.sql" ----

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO


IF SERVERPROPERTY('EngineEdition') != 5 AND HAS_PERMS_BY_NAME(N'sys.xp_logevent', N'OBJECT', N'EXECUTE') = 1
BEGIN
  DECLARE @databaseName AS nvarchar(2048), @eventMessage AS nvarchar(2048)
  SET @databaseName = REPLACE(REPLACE(DB_NAME(), N'\', N'\\'), N'"', N'\"')
  SET @eventMessage = N'Redgate SQL Change Automation: { "deployment": { "description": "Redgate SQL Change Automation deployed $(ReleaseVersion) to ' + @databaseName + N'", "database": "' + @databaseName + N'" }}'
  EXECUTE sys.xp_logevent 55000, @eventMessage
END
PRINT 'Deployment completed successfully.'
GO




SET NOEXEC OFF; -- Resume statement execution if an error occurred within the script pre-amble
