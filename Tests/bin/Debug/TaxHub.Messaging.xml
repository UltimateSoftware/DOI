<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaxHub.Messaging</name>
    </assembly>
    <members>
        <member name="F:TaxHub.Messaging.BasicDeliverEventArgsExtensions.RetryCountHeaderName">
            <summary>
            Gets the message header name used for carrying retry count information.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.BasicDeliverEventArgsExtensions.GetMessageId(RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Method gets application message Id from the message deliver arguments.
            </summary>
            <param name="args">The BasicDeliverEventArgs.</param>
            <returns>Returns string value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.BasicDeliverEventArgsExtensions.GetRetryCount(RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Method gets message delivery retry count from the message deliver arguments.
            </summary>
            <param name="args">The BasicDeliverEventArgs.</param>
            <returns>Returns int value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.BasicDeliverEventArgsExtensions.HasRetryCount(RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Method checks whether message deliver arguments contain a delivery retry count.
            </summary>
            <param name="args">The BasicDeliverEventArgs.</param>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.BasicDeliverEventArgsExtensions.SetRetryCount(RabbitMQ.Client.Events.BasicDeliverEventArgs,System.Int32)">
            <summary>
            Method sets message delivery retry count to the deliver arguments.
            </summary>
            <param name="args">The BasicDeliverEventArgs</param>
            <param name="retryCount">The retry count to set.</param>
        </member>
        <member name="M:TaxHub.Messaging.BasicPropertiesExtensions.AddHeader(RabbitMQ.Client.IBasicProperties,System.String,System.Object)">
            <summary>
            Method adds a header to the message basic properties.
            </summary>
            <param name="properties">The BasicProperties object.</param>
            <param name="key">The header key.</param>
            <param name="value">The header value.</param>
        </member>
        <member name="M:TaxHub.Messaging.BasicPropertiesExtensions.SetExpiration(RabbitMQ.Client.IBasicProperties,System.Int32)">
            <summary>
            Method sets the message expiration time in milliseconds.
            </summary>
            <param name="properties">The BasicProperties object.</param>
            <param name="expirationMsec">The expiration time in milliseconds.</param>
        </member>
        <member name="T:TaxHub.Messaging.ICacheRevocationService">
            <summary>
            Cache revocation service interface.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.ICacheRevocationService.RequestCacheRevocation(System.String,System.Guid,System.String[])">
             <summary>
             Methods requests cache revocation by sending system-wide message to all services.
             </summary>
             <param name="cacheInstanceName">The cache instance name.</param>
             <param name="correlationId">The correlation id for tracking.</param>
             <param name="cacheKeys">The list of cache keys to revoke.</param>
            
             <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.ICacheRevocationService.RevokeLocalCacheItem(System.String,System.String[])">
            <summary>
            Methods revokes local cache by its instance and key(s).
            </summary>
            <param name="cacheInstanceName">The cache instance name.</param>
            <param name="cacheKeys">The list of cache keys to revoke.</param>
        </member>
        <member name="T:TaxHub.Messaging.CacheRevocationService">
            <summary>
            Cache revocation service.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.CacheRevocationService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,SmartHub.Hosting.Caching.IObjectCacheManager)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger</param>
            <param name="messageHub">The message hub to publish messages to.</param>
            <param name="cacheManager">Cache manager.</param>
        </member>
        <member name="M:TaxHub.Messaging.CacheRevocationService.RequestCacheRevocation(System.String,System.Guid,System.String[])">
             <summary>
             Methods requests cache revocation by sending system-wide message to all services.
             </summary>
             <param name="cacheInstanceName">The cache instance name.</param>
             <param name="correlationId">The correlation id for tracking.</param>
             <param name="cacheKeys">The list of cache keys to revoke.</param>
            
             <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.CacheRevocationService.RevokeLocalCacheItem(System.String,System.String[])">
            <summary>
            Methods revokes local cache by its instance and key(s).
            </summary>
            <param name="cacheInstanceName">The cache instance name.</param>
            <param name="cacheKeys">The list of cache keys to revoke.</param>
        </member>
        <member name="T:TaxHub.Messaging.EventNamingConvention">
            <summary>
            Class contains helper methods for event naming conventions.
            </summary>
        </member>
        <member name="F:TaxHub.Messaging.EventNamingConvention.AllEventsOnQueue">
            <summary>
            Get the alias for queue name representing dynamically named queue, such as service system commands, instance-scoped queues, etc.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.EventNamingConvention.ExtractBoundedContextFromName(System.String)">
            <summary>
            Method extracts bounded context name from event name.
            </summary>
            <param name="eventName">The event full name.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="P:TaxHub.Messaging.IServiceInstanceQueueCreator.SystemCommandQueueName">
            <summary>
            Gets the system command queue name used by current service instance.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.IServiceInstanceQueueCreator.DeclareSystemCommandQueue">
            <summary>
            Declares the system command queue for this service insatnce.
            </summary>
        </member>
        <member name="T:TaxHub.Messaging.MessageQueueNamingConvention">
            <summary>
            Class contains helper methods for queue naming conventions.
            </summary>
        </member>
        <member name="F:TaxHub.Messaging.MessageQueueNamingConvention.DynamicallyNamedQueue">
            <summary>
            Get the alias for queue name representing dynamically named queue, such as service system commands, instance-scoped queues, etc.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.MessageQueueNamingConvention.BuildQueueName(System.String,System.String)">
            <summary>
            Method builds a queue name based on bounded context and queue purpose.
            </summary>
            <param name="boundedContext">The bounded context that queue belongs to.</param>
            <param name="queuePurpose">The queue purpose (short descriptive name).</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageQueueNamingConvention.ExtractBoundedContextFromName(System.String)">
            <summary>
            Method extracts bounded context name from queue name.
            </summary>
            <param name="queueName">The queue full name.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="T:TaxHub.Messaging.QueueSubscribersCollection">
            <summary>
            Class provides the list of subscribers for a queue.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.QueueSubscribersCollection.QueueName">
            <summary>
            Gets queue name.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.QueueSubscribersCollection.Add(System.String,TaxHub.Messaging.ISimpleMessageSubscriber)">
            <summary>
            Add a subscriber to the event.
            </summary>
            <param name="eventName">The event name to subscribe to.</param>
            <param name="subscriber">The event subscriber to subscribe.</param>
        </member>
        <member name="M:TaxHub.Messaging.QueueSubscribersCollection.IsSubscribedToAllEventsInQueue">
            <summary>
            Methods evaluates collection and returns boolean indicator whether or not all events in this queue should be processed by the subscriber.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="T:TaxHub.Messaging.Replay.EventFailuresMonitoringScheduledSubscriber">
            <summary>
            Class provides subscriber functionality for the events failures monitoring.
            </summary>    
        </member>
        <member name="M:TaxHub.Messaging.Replay.EventFailuresMonitoringScheduledSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.Messaging.Replay.ServiceReplayCompletedEvent">
            <summary>
            The {boundedcontext}.service.replay-completed event details.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.ServiceReplayCompletedEvent.ReplayBoundedContextName">
            <summary>
            Gets or sets the name of the replay bounded context.
            </summary>
            <value>
            The name of the replay bounded context.
            </value>
        </member>
        <member name="P:TaxHub.Messaging.Replay.ServiceReplayCompletedEvent.ReplayAggregateName">
            <summary>
            Gets or sets the name of the replay aggregate.
            </summary>
            <value>
            The name of the replay aggregate.
            </value>
        </member>
        <member name="P:TaxHub.Messaging.Replay.ServiceReplayCompletedEvent.ReplayMode">
            <summary>
            Gets or sets the replay mode.
            </summary>
            <value>
            The replay mode.
            </value>
        </member>
        <member name="P:TaxHub.Messaging.Replay.ServiceReplayCompletedEvent.StartUtcDateTime">
            <summary>
            Gets or sets the start UTC date time.
            </summary>
            <value>
            The start UTC date time.
            </value>
        </member>
        <member name="P:TaxHub.Messaging.Replay.ServiceReplayCompletedEvent.EndUtcDateTime">
            <summary>
            Gets or sets the end UTC date time.
            </summary>
            <value>
            The end UTC date time.
            </value>
        </member>
        <member name="P:TaxHub.Messaging.Replay.ServiceReplayCompletedEvent.RequestId">
            <summary>
            Gets or sets the request identifier.
            </summary>
            <value>
            The request identifier.
            </value>
        </member>
        <member name="P:TaxHub.Messaging.Replay.ServiceReplayCompletedEvent.TenantId">
            <summary>
            Gets or sets the tenant identifier.
            </summary>
            <value>
            The tenant identifier.
            </value>
        </member>
        <member name="P:TaxHub.Messaging.Replay.ServiceReplayCompletedEvent.AggregateId">
            <summary>
            Gets or sets the aggregate identifier.
            </summary>
            <value>
            The aggregate identifier.
            </value>
        </member>
        <member name="P:TaxHub.Messaging.Replay.ServiceReplayCompletedEvent.ReplaySuccess">
            <summary>
            Gets or sets whether the replay succeeded.
            </summary>
            <value>
            The replay success.
            </value>
        </member>
        <member name="T:TaxHub.Messaging.Replay.AggregateEventsReplayFilter">
            <summary>
            An instance of this class provides a set of filters used for aggregate events replay functionality.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.RequestId">
            <summary>
            Gets or sets the replay requestId.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.EventId">
            <summary>
            Gets or sets the eventId message filter to apply; this is an optional parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.TenantId">
            <summary>
            Gets or sets the tenantId message filter to apply; this is an optional parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.AggregateId">
            <summary>
            Gets or sets the aggregateId message filter to apply; this is an optional parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.ReplayBoundedContextName">
            <summary>
            Gets or sets the bounded context name that owns the aggregate based on the event name (type) parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.ReplayAggregateName">
            <summary>
            Gets or sets the aggregate name to replay based on the event name (type) parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.StartUtcDateTime">
            <summary>
            Gets or sets the start date and time (in UTC) message filter to apply; this is an optional parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.EndUtcDateTime">
            <summary>
            Gets or sets the end date and time (in UTC) message filter to apply; this is an optional parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.ADOItionalFilters">
            <summary>
            Gets or sets aDOItional filters specific to particular aggregate to apply; these are optional parameters.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.ReplayMode">
            <summary>
            Gets or sets the (Snapshot/Events) - the replay mode indicates whether aggregate snapshots should be replayed or all events; this is required parameter.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.HasTenantId">
            <summary>
            Method evaluates an TenantId property and determines whether it's provided or not.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.HasAggregateId">
            <summary>
            Method evaluates an AggregateId property and determines whether it's provided or not.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.HasEventRootName">
            <summary>
            Method evaluates an AggregateId property and determines whether it's provided or not.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.HasStartDate">
            <summary>
            Method evaluates an StartUtcDateTime property and determines whether it's provided or not.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.HasEndDate">
            <summary>
            Method evaluates an StartUtcDateTime property and determines whether it's provided or not.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.HasStartAndEndDates">
            <summary>
            Method evaluates an StartUtcDateTime property and determines whether it's provided or not.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.HasADOItionalFilters">
            <summary>
            Method determines whether aDOItional filters are provided or not.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.GetEventNameRoot">
            <summary>
            Method creates aggregate event root based on Bounded Context and Aggregate Name properties.
            </summary>
            <returns>Returns string value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Replay.AggregateEventsReplayFilter.FromDynamic(System.Object)">
            <summary>
            Creates a default AggregateEventsReplayFilter based on the details passed in and puts whatever
            is left over in the ADOItionalFilters Dictionary
            </summary>
            <param name="details">The details to create a replay filter from</param>
            <returns>An aggregate events replay filter</returns>
        </member>
        <member name="T:TaxHub.Messaging.Replay.AggregateReplayRequestSubscriber">
            <summary>
            Class provides subscriber functionality for the aggregate replay events.
            </summary>    
        </member>
        <member name="M:TaxHub.Messaging.Replay.AggregateReplayRequestSubscriber.InitializeRepublishHandler(System.Boolean)">
            <summary>
            This method setups the subscriber to either allow it to handle a republish events request, or to ignore it completely.
            </summary>
            <param name="allowRepublish">Whether to allow the subscriber to allow republishing of events.</param>
            <remarks>The should be initialized with true for only one service in a domain. E.G. SmartHub.CoreServices or TaxHub.CoreServices</remarks>
        </member>
        <member name="M:TaxHub.Messaging.Replay.AggregateReplayRequestSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.Replay.IAggregateSnapshotApplier`1.ApplyToEach(System.Func{`0,System.Threading.Tasks.Task},TaxHub.Common.EventStore.IAggregateSnapshotFilter,System.Threading.CancellationToken)">
            <summary>
            Applies an action to each company returned from the filters in filter params.
            </summary>
            <param name="action">The action to apply to each payment</param>
            <param name="filters">The filters to find companies by.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:TaxHub.Messaging.Replay.ReplayBindingAttribute">
            <summary>
            Class providing the binding information between events replay method within an aggregate service and replay processor.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.ReplayBindingAttribute.ReplayBoundedContextName">
            <summary>
            Gets or sets the bounded context name that owns the aggregate based on the event name (type) parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.ReplayBindingAttribute.ReplayAggregateName">
            <summary>
            Gets or sets the aggregate name to replay based on the event name (type) parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Replay.ReplayBindingAttribute.ReplayAggregateType">
            <summary>
            Gets or sets the aggregate type to replay the "events" mode.
            </summary>
        </member>
        <member name="T:TaxHub.Messaging.Serialization.InboundDomainEventData">
            <summary>
            Inbound Domain event data. This is used for inbound message only.
            </summary>
            <remarks>Class represents the same set of data as <see cref="T:TaxHub.Common.EventStore.DomainEventData"/>,
            but provides aDOItional internal functionality for ability to deliver typed event
            data to subscribers inherited from <see cref="T:TaxHub.Messaging.SimpleTypedMessageSubscriber`1"/>.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.InboundDomainEventData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.InboundDomainEventData.#ctor(System.String)">
            <summary>
            Constructor that accepts event name and message raw data.
            </summary>
            <param name="eventName">The event name.</param>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.TemporaryDomainEventData`1.Body">
            <summary>
            Gets or sets the details of event. The structure depends on an event.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.TemporaryDomainEventData`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TaxHub.Messaging.Serialization.InterDomainEventData">
            <summary>
            Ultimate Software Inter-Domain event data. This is used for communication via message bus only.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventData.Id">
            <summary>
            Gets or sets an identifier for the event.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventData.TenantId">
            <summary>
            Gets or sets the tenant Id. Should be set for all events, except system events that have no association with particular tenant.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventData.Timestamp">
            <summary>
            Gets or sets the UTC timestamp of the event.
            The property is writable for such cases when actual event time is slightly different from event data recording time.
            The property should not be modified outside of the context creating the event.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventData.EffectiveDatetime">
            <summary>
            Gets or sets the UTC timestamp when the event becomes effective.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventData.AggregateId">
            <summary>
            Gets or sets the aggregate id. Should be set for all aggregate level events.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventData.SequenceNumber">
            <summary>
            Gets or sets the event sequence.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventData.Type">
            <summary>
            Gets or sets the event name. This value must adhere to the following pattern: "{bounded-context}.{aggregate-name}.{event-name-in-past-tense}".
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventData.SchemaVersion">
            <summary>
            Gets or sets the aggregate's schema version at the time an event occurred. Should be set for all aggregate level events.
            </summary>
            <remarks>This value is null by default: check before using it.</remarks>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventData.UserId">
            <summary>
            Gets or sets the UserId of the user executed a transaction causing the event.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventData.Body">
            <summary>
            Gets or sets the details of event. The structure depends on an event.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventData.CorrelationId">
            <summary>
            Gets or sets the correlation id for the event. Must me set if available within the event context.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventData.User">
            <summary>
            Gets or sets the user description of the user executed a transaction causing the event.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.InterDomainEventData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.InterDomainEventData.#ctor(System.String)">
            <summary>
            Constructor that accepts event name.
            </summary>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.InterDomainEventData.ToString">
            <summary>
            Methods creates a string representation of event.
            </summary>
            <returns>Returns string.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.InterDomainEventData.FromDomainEventData(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Creates an instance of InterDomainEventData from DomainEventData.
            </summary>
            <param name="eventData">The event data</param>
            <returns><see cref="T:TaxHub.Messaging.Serialization.InterDomainEventData"/> object</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.InterDomainEventData.ToDomainEventData(System.String)">
            <summary>
            Creates an instance of DomainEventData from current.
            </summary>
            <param name="eventRawData">Optional raw JSON data from the event message.</param>
            <returns><see cref="T:TaxHub.Common.EventStore.DomainEventData"/> object</returns>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventDataMetadata.AggregateName">
            <summary>
            Gets or sets the aggregate name (the full class name). Should be set for all aggregate level events.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.InterDomainEventDataMetadata.AggregateVersion">
            <summary>
            Gets or sets the aggregate's version at the time an event occurred. Should be set for all aggregate level events.
            </summary>
        </member>
        <member name="T:TaxHub.Messaging.Serialization.DynamicDataConverter">
            <summary>
            Static class providing factory method to create <see cref="T:Newtonsoft.Json.JsonSerializer"/> to serialize declared types to the a dynamic <see cref="T:System.Dynamic.ExpandoObject"/> type.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.DynamicDataConverter.ConvertToDynamic(TaxHub.Common.Logging.IAppLogger,System.Object,System.String,System.String)">
            <summary>
            Converts object to <see cref="T:System.Dynamic.ExpandoObject" /> type.
            </summary>
            <param name="logger">The logger.</param>
            <param name="data">An object to convert. Object must be serializable to/from JSON and must be a defined type.</param>
            <param name="eventName">The event name</param>
            <param name="schemaVersion">The event schema version</param>
            <returns>
            Returns an instance of <see cref="T:System.Dynamic.ExpandoObject" />.
            </returns>
            <exception cref="T:System.Exception">Throws an exception if type is not serializable or cannot be represented as <see cref="T:System.Dynamic.ExpandoObject" /> (for example a <see cref="T:System.String" />).</exception>
            <remarks>
            Primitive types and value-type are being ignored and original value is returned to avoid unnecessary exceptions.
            </remarks>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.DeflateMessageCompressor.Compress(System.IO.Stream)">
            <summary>
            Compresses the specified source stream onto the destination byte array.
            </summary>
            <param name="source">The source.</param>
            <returns>Data in byte array.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.DeflateMessageCompressor.Compress(System.Byte[])">
            <summary>
            Compresses the specified source stream onto the destination byte array.
            </summary>
            <param name="source">The source.</param>
            <returns>Data in byte array.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.DeflateMessageCompressor.Decompress(System.Byte[])">
            <summary>
            Decompresses the specified source byte array onto the destination byte array.
            </summary>
            <param name="source">The source.</param>
            <returns>Data in byte array.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.GZipMessageCompressor.Compress(System.IO.Stream)">
            <summary>
            Compresses the specified source stream onto the destination byte array.
            </summary>
            <param name="source">The source.</param>
            <returns>Data in byte array.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.GZipMessageCompressor.Decompress(System.Byte[])">
            <summary>
            Decompresses the specified source byte array onto the destination byte array.
            </summary>
            <param name="source">The source.</param>
            <returns>Data in byte array.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.IMessageCompressor.Compress(System.IO.Stream)">
            <summary>
            Compresses the specified source stream onto the destination byte array.
            </summary>
            <param name="source">The source.</param>
            <returns>Data in byte array.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.IMessageCompressor.Decompress(System.Byte[])">
            <summary>
            Decompresses the specified source byte array onto the destination byte array.
            </summary>
            <param name="source">The source.</param>
            <returns>Data in byte array.</returns>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.IMessageCompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.IMessageCompressor.Compress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compresses the specified source stream onto the destination stream.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns>An async Task.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.IMessageCompressor.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompresses the specified source stream onto the destination stream.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns>An async Task.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.IMessageConverter.ConvertToOutbound``1(``0,RabbitMQ.Client.IBasicProperties,System.Boolean,System.Boolean)">
            <summary>
            Method converts message object to byte array representing serialized JSON, optionally compressed and encrypted.
            </summary>
            <typeparam name="T">The type of message object.</typeparam>
            <param name="messageBody">Message object.</param>
            <param name="basicProperties">AMQP basic properties.</param>
            <param name="compress">Boolean indicator to compress data.</param>
            <param name="encrypt">Boolean indicator to encrypt data.</param>
            <returns>Returns byte array.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.IMessageConverter.ConvertFromInbound``1(RabbitMQ.Client.Events.BasicDeliverEventArgs,System.String@)">
            <summary>
            Method converts message byte array body to an object.
            </summary>
            <param name="args">The BasicDeliverEventArgs args.</param>
            <param name="rawData">Output parameter containing raw message JSON data as string.</param>
            <returns>Returns message as an object.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.IMessageEncryptionKeyProvider.LoadConfig(System.Threading.CancellationToken)">
            <summary>Loads the keys.</summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task object.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.IMessageEncryptionKeyProvider.GenerateKey">
            <summary>
            Method generates symmetric encryption key encoded in Base64 string.
            </summary>
            <returns>Return Base64 string.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.IMessageEncryptionKeyProvider.Clear(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Clears the keys in local cache, optionally refreshes.
            </summary>
            <param name="refresh">Parameter indicates if keys should be refreshed right away.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task object.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.IMessageEncryptionKeyProvider.GetKey(System.String)">
            <summary>
            Methods returns the encryption key by its identifier. This key is intended to be used for decryption only. 
            Use GetRandomKey method to obtain a key for encryption.
            </summary>
            <param name="keyId">The key identifier.</param>
            <returns>Returns the DataEncryptionKey.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.IMessageEncryptionKeyProvider.GetRandomKey(System.String@)">
            <summary>
            Methods returns a random encryption key by its identifier.
            </summary>
            <param name="keyId">The key identifier.</param>
            <returns>Returns the MessageEncryptionKey.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.IMessageEncryptionKeyProvider.HasKeys">
            <summary>
            Determines whether this instance has keys.
            </summary>
            <returns>Returns boolean value.</returns>        
        </member>
        <member name="P:TaxHub.Messaging.Serialization.MessageConverter.MinCompressionThreshold">
            <summary>
            Gets the minimum data size threshold that enables compression.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.MessageConverter.ConvertToOutbound``1(``0,RabbitMQ.Client.IBasicProperties,System.Boolean,System.Boolean)">
            <summary>
            Method converts message object to byte array representing serialized JSON, optionally compressed and encrypted.
            </summary>
            <typeparam name="T">The type of message object.</typeparam>
            <param name="messageBody">Message object.</param>
            <param name="basicProperties">AMQP basic properties.</param>
            <param name="compress">Boolean indicator to compress data.</param>
            <param name="encrypt">Boolean indicator to encrypt data.</param>
            <returns>Returns byte array.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.MessageConverter.ConvertFromInbound``1(RabbitMQ.Client.Events.BasicDeliverEventArgs,System.String@)">
            <summary>
            Method converts message byte array body to an object.
            </summary>
            <param name="args">The BasicDeliverEventArgs args.</param>
            <param name="rawData">Output parameter containing raw message JSON data as string.</param>
            <returns>Returns message as an object.</returns>
        </member>
        <member name="T:TaxHub.Messaging.Serialization.MessageSerializerFactory">
            <summary>
            Static class providing factory method to create <see cref="T:Newtonsoft.Json.JsonSerializer"/> for event messages. 
            </summary>
            <remarks>The reason for using this class is pure performance. JsonSerializer performs much (~70 times during testing) slower using <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> that we intent to use for messaging. 
            This is caused by the documented change made in Json.Net v7.0 to move the caching resolver from its own implementation to the application level - see notes to the Obsolete constructor of <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> class. 
            Even those pre-initialized <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> solves the problem, using pre-initialized <see cref="T:Newtonsoft.Json.JsonSerializer"/> improves performance by another 20%.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.MessageSerializerFactory.Create">
            <summary>
            Create <see cref="T:Newtonsoft.Json.JsonSerializer"/> for event messages.
            </summary>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.JsonSerializer"/>.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.MessageEncryptionKeyProvider.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Security.KeyServer.IKeyServerAdapter,TaxHub.Common.Security.Encryption.ISymmetricEncryptionService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Messaging.Serialization.MessageEncryptionKeyProvider"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="keyServerAdapter">The key server adapter.</param>
            <param name="symmetricEncryptionService">The symmetric encryption service.</param>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.MessageEncryptionKeyProvider.LoadConfig(System.Threading.CancellationToken)">
            <summary>Loads the keys.</summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task object.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.MessageEncryptionKeyProvider.GenerateKey">
            <summary>
            Method generates symmetric encryption key encoded in Base64 string.
            </summary>
            <returns>Return Base64 string.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.MessageEncryptionKeyProvider.Clear(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Clears the keys in local cache, optionally refreshes.
            </summary>
            <param name="refresh">Parameter indicates if keys should be refreshed right away.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task object.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.MessageEncryptionKeyProvider.GetKey(System.String)">
            <summary>
            Methods returns the encryption key by its identifier. This key is intended to be used for decryption only. 
            Use GetRandomKey method to obtain a key for encryption.
            </summary>
            <param name="keyId">The key identifier.</param>
            <returns>Returns the DataEncryptionKey.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.MessageEncryptionKeyProvider.GetRandomKey(System.String@)">
            <summary>
            Methods returns a random encryption key by its identifier.
            </summary>
            <param name="keyId">The key identifier.</param>
            <returns>Returns the MessageEncryptionKey.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Serialization.MessageEncryptionKeyProvider.HasKeys">
            <summary>
            Determines whether this instance has keys.
            </summary>
            <returns>Returns boolean value.</returns>        
        </member>
        <member name="T:TaxHub.Messaging.Serialization.MessageEncryptionKey">
            <summary>
            An encryption key used for message encryption.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.MessageEncryptionKey.KeyId">
            <summary>
            Gets or sets the encryption key Id.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.MessageEncryptionKey.EncryptionKey">
            <summary>
            Gets or sets the encryption key.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Serialization.MessageEncryptionKey.ExpirationDateTime">
            <summary>
            Gets or sets the key expiration date and time.
            </summary>
        </member>
        <member name="T:TaxHub.Messaging.EventStore.EventStoreListener">
            <summary>
            The class implements the ISimpleEventListener, that is a class attached to Message Queue inbound event stream.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.EventStoreListener.#ctor(TaxHub.Common.EventStore.IEventStore)">
            <summary>
            Constructor accepting the event store to save data to.
            </summary>
            <param name="eventStore">The event store.</param>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.EventStoreListener.HandleEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method handles an event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.EventStoreListener.HandleEvents(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData})">
            <summary>
            Method handles multiple events.
            </summary>
            <param name="eventsData">The events data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.EventStoreListener.HandleEventAsync(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method handles an event asynchronously.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return false to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.EventStoreListener.HandleEventsAsync(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData})">
            <summary>
            Method handles multiple events asynchronously.
            </summary>
            <param name="eventsData">The events data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return false to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.Messaging.EventStore.FailedToConsumeEventsListener">
            <summary>
            Class implements a IFailedEventListener interface, that is a class attached to Message Queue outbound failed event stream.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.FailedToConsumeEventsListener.#ctor(TaxHub.Common.EventStore.IEventStore)">
            <summary>
            Constructor accepting the event store to save data to.
            </summary>
            <param name="eventStore">The event store.</param>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.FailedToConsumeEventsListener.HandleEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method handles an event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.FailedToConsumeEventsListener.HandleEvents(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData})">
            <summary>
            Method handles multiple events.
            </summary>
            <param name="eventsData">The events data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.FailedToConsumeEventsListener.HandleEventAsync(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method handles an event asynchronously.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return false to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.FailedToConsumeEventsListener.HandleEventsAsync(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData})">
            <summary>
            Method handles multiple events asynchronously.
            </summary>
            <param name="eventsData">The events data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return false to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.Messaging.EventStore.FailedToPublishEventsListener">
            <summary>
            Class implements a IFailedEventListener interface, that is a class attached to Message Queue outbound failed event stream.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.FailedToPublishEventsListener.#ctor(TaxHub.Common.EventStore.IEventStore)">
            <summary>
            Constructor accepting the event store to save data to.
            </summary>
            <param name="eventStore">The event store.</param>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.FailedToPublishEventsListener.HandleEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method handles an event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.FailedToPublishEventsListener.HandleEvents(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData})">
            <summary>
            Method handles multiple events.
            </summary>
            <param name="eventsData">The events data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.FailedToPublishEventsListener.HandleEventAsync(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method handles an event asynchronously.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return false to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.EventStore.FailedToPublishEventsListener.HandleEventsAsync(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData})">
            <summary>
            Method handles multiple events asynchronously.
            </summary>
            <param name="eventsData">The events data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return false to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.Messaging.IMessage">
            <summary>
            Interface implemented by basic message class. Provides an abstraction for the message being sent through the message queue.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessage.MessageId">
            <summary>
            Gets or sets the message id. This value  is being generated by the system and does not carry any meaningful application information.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessage.EventName">
            <summary>
            Gets or sets the event name. This value must not be changed once assigned.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessage.EventData">
            <summary>
            Gets the event data.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.IMessage.CreateLightMessage">
            <summary>
            Method verifies special rules whether the event data is required for the message to carry. If the event dat is required it returns the message object itself.
            Otherwise, it creates a deep copy of the message removing the event data and returns this new message.
            </summary>
            <remarks>This method is design to ease the load on the messaging infrastructure whenever possible.</remarks>
            <returns>return a Message object.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessage.GetCorrelationId">
            <summary>
            Method provides the correlation id for the event. 
            This must be a correlation id that is associated with the event, if available, otherwise a random Guid generated on the first time access to this method.
            </summary>
            <returns>Returns a Guid-like string.</returns>
        </member>
        <member name="P:TaxHub.Messaging.IMessageConsumerModerator.ShouldAck">
            <summary>
            Gets an indication of queue requirement to acknowledge.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageConsumerModerator.IsDequeuing">
            <summary>
            Gets boolean value indicating that currently consumer is either ready to de-queue or de-queuing a message.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageConsumerModerator.QueueName">
            <summary>
            Gets the queue name the consumer is connected to.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageConsumerModerator.IsConsuming">
            <summary>
            Gets boolean value indicating that currently consumer is consuming (handling) a message.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.IMessageConsumerModerator.StopConsumer">
            <summary>
            Method stops consumer. This method prevents next message from being consumed, but does not stop a message that is currently being handled.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.IMessageConsumerModerator.StartConsumer(System.String,System.Boolean,System.UInt16,RabbitMQ.Client.IConnectionFactory,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{TaxHub.Messaging.ISimpleMessageSubscriber}},TaxHub.Messaging.IServiceInstanceQueueCreator)">
            <summary>
            Method starts consumer.
            </summary>
            <param name="queueNameToConsume">The queue name to consume.</param>
            <param name="shouldAck">The indication of queue requirement to acknowledge.</param>
            <param name="prefetchCount">The number of messages that are allowed to be prefetched from the queue before acknowledgment.</param>
            <param name="mqConnectionFactory">The RabbitMQ connection factory to use.</param>
            <param name="subscribers">The collection of subscribers to use.</param>
            <param name="serviceInstanceQueueCreator">The service instance creator used to recreate queues that are instance specific.</param>
        </member>
        <member name="E:TaxHub.Messaging.IMessageConsumerModerator.OnPoisoningMessage">
            <summary>
            The event is used for poisoning messages; that are messages that failed to be consumed during too many attempts.
            </summary>
        </member>
        <member name="T:TaxHub.Messaging.IMessageHub">
            <summary>
            The interface implemented by the class providing a messaging capabilities to the application abstracting the message queue logic from the application.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.CanStartConsumers">
            <summary>
            Gets boolean indicator whether message hub can start consumers.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.CanPublish">
            <summary>
            Gets boolean indicator whether message hub can publish messages.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.IsConnectionBlocked">
            <summary>
            Gets boolean indicator of blocked connection. No publishing can occur when connection is blocked.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.ConnectionBlockedReason">
            <summary>
            Gets descriptive reason for blocked connection.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.DefaultExchangeName">
            <summary>
            Gets the default name of the MQ direct exchange used by message publisher.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.DefaultTopicExchangeName">
            <summary>
            Gets the default name of the MQ topic exchange used by message publisher.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.ForwardExchangeName">
            <summary>
            Gets the name of the MQ forward exchange used by message publisher.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.DefaultDelayExchangeName">
            <summary>
            Gets the default name of the MQ exchange used by message publisher to deliver messages with delay.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.ForwardDelayExchangeName">
            <summary>
            Gets the name of the MQ forward exchange used by message publisher to deliver forwarded messages with delay.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.DefaultDelayQueueName">
            <summary>
            Gets the default name of the MQ queue used by message publisher to deliver messages with delay.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.ForwardDelayQueueName">
            <summary>
            Gets the name of the MQ forward queue used by message publisher to deliver forwarded messages.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.DefaultSysCommandsExchangeName">
            <summary>
            Gets the default name of the MQ exchange used by message publisher to deliver system commands messages to all services.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.DefaultSysCommandsQueueNamePrefix">
            <summary>
            Gets the default name prefix of the MQ queue used by message publisher to deliver system commands messages to all services.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.ForwardEventsQueueName">
            <summary>
            Gets the MQ queue used to forward messages for all services to appropriate DataSync service.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.IMessageHub.BoundedContext">
            <summary>
            Gets the bounded context that message hub is created for.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.Publish(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method publishes message into a queuing infrastructure, configured exchange. Returns boolean value as indication of success.
            </summary>
            <param name="eventData">The event data to publish.</param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store. 
                      But only pre-configured messages will be published to the exchange. 
                      Because this is desired application behavior that is based on configuration, this method will return success in either way, 
                      but a verbose message is written to the log for debugging purposes.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.Publish(TaxHub.Common.EventStore.DomainEventData,System.Boolean)">
            <summary>
            Method publishes message into a queuing infrastructure, configured exchange. Returns boolean value as indication of success.
            </summary>
            <param name="eventData">The event data to publish.</param>
            <param name="ackPublish">
                <para>Instructs the publish method whether it should require the RabbitMQ server to acknowledge the publish. The true forces the acknowledgement. By default is false.</para>
                <para>The publish acknowledge is the acknowledgement from the broker that your message was received, and written to disk, if persistence is required by the broker configuration.</para>
            </param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store. 
                      But only pre-configured messages will be published to the exchange. 
                      Because this is desired application behavior that is based on configuration, this method will return success in either way, 
                      but a verbose message is written to the log for debugging purposes.</para>
                <para>The negative ackPublish value may be overridden by message route configuration.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.Publish(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData})">
            <summary>
            Method publishes multiple messages into a queuing infrastructure, configured exchange. Returns boolean value as indication of success.
            </summary>
            <param name="eventsData">The event data to publish.</param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store. 
                      But only pre-configured messages will be published to the exchange. 
                      Because this is desired application behavior that is based on configuration, this method will return success in either way, 
                      but a verbose message is written to the log for debugging purposes.</para>
                <para>The negative ackPublish value may be overridden by message route configuration.</para>
                <para>The order of events is not preserved.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.Publish(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData},System.Boolean)">
            <summary>
            Method publishes multiple messages into a queuing infrastructure, configured exchange. Returns boolean value as indication of success.
            </summary>
            <param name="eventsData">The event data to publish.</param>
            <param name="ackPublish">
                <para>Instructs the publish method whether it should require the RabbitMQ server to acknowledge the publish. The true forces the acknowledgement. By default is false.</para>
                <para>The publish acknowledge is the acknowledgement from the broker that your message was received, and written to disk, if persistence is required by the broker configuration.</para>
            </param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store. 
                      But only pre-configured messages will be published to the exchange. 
                      Because this is desired application behavior that is based on configuration, this method will return success in either way, 
                      but a verbose message is written to the log for debugging purposes.</para>
                <para>The negative ackPublish value may be overridden by message route configuration.</para>
                <para>The order of events is not preserved.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.Publish(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method publishes message into a queuing infrastructure, named exchange. Returns boolean value as indication of success.
            </summary>
            <param name="exchangeName">The MQ exchange name to publish to. The exchange name is optional - the name configured in the route will be used.</param>
            <param name="eventData">The event data to publish.</param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store. 
                      But only pre-configured messages will be published to the exchange. 
                      Because this is desired application behavior that is based on configuration, this method will return success in either way, 
                      but a verbose message is written to the log for debugging purposes.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.Publish(System.String,TaxHub.Common.EventStore.DomainEventData,System.Boolean)">
            <summary>
            Method publishes message into a queuing infrastructure, named exchange. Returns boolean value as indication of success.
            </summary>
            <param name="exchangeName">The MQ exchange name to publish to. The exchange name is optional - the name configured in the route will be used.</param>
            <param name="eventData">The event data to publish.</param>
            <param name="ackPublish">
                <para>Instructs the publish method whether it should require the RabbitMQ server to acknowledge the publish. The true forces the acknowledgement. By default is false.</para>
                <para>The publish acknowledge is the acknowledgement from the broker that your message was received, and written to disk, if persistence is required by the broker configuration.</para>
            </param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store. 
                      But only pre-configured messages will be published to the exchange. 
                      Because this is desired application behavior that is based on configuration, this method will return success in either way, 
                      but a verbose message is written to the log for debugging purposes.</para>
                <para>The negative ackPublish value may be overridden by message route configuration.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.Publish(System.String,System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData},System.Boolean)">
            <summary>
            Method publishes multiple messages into a queuing infrastructure, named exchange. Returns boolean value as indication of success.
            </summary>
            <param name="exchangeName">The MQ exchange name to publish to. The exchange name is optional - the name configured in the route will be used.</param>
            <param name="eventsData">The event data to publish.</param>
            <param name="ackPublish">
                <para>Instructs the publish method whether it should require the RabbitMQ server to acknowledge the publish. The true forces the acknowledgement. By default is false.</para>
                <para>The publish acknowledge is the acknowledgement from the broker that your message was received, and written to disk, if persistence is required by the broker configuration.</para>
            </param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store. 
                      But only pre-configured messages will be published to the exchange. 
                      Because this is desired application behavior that is based on configuration, this method will return success in either way, 
                      but a verbose message is written to the log for debugging purposes.</para>
                <para>The negative ackPublish value may be overridden by message route configuration.</para>
                <para>The order of events is not preserved.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.Subscribe(System.String,System.String,TaxHub.Messaging.ISimpleMessageSubscriber)">
            <summary>
            Method subscribes a subscriber to the event.
            </summary>
            <param name="queueName">The queue name to subscribe to.</param>
            <param name="eventName">The event name to subscribe to.</param>
            <param name="subscriber">The event subscriber to subscribe.</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.Subscribe(TaxHub.Messaging.ISimpleMessageSubscriber)">
            <summary>
            Method subscribes a subscriber marked with auto-wired <see cref="T:TaxHub.Messaging.SubscriberBindingAttribute"/> attribute to appropriate events based on binding settings.
            </summary>
            <param name="subscriber">The event subscriber to subscribe.</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.Subscribe(TaxHub.Messaging.ISimpleMessageSubscriber,System.String)">
            <summary>
            Method subscribes a subscriber marked with auto-wired <see cref="T:TaxHub.Messaging.SubscriberBindingAttribute"/> attribute to appropriate events based on binding settings.
            </summary>
            <param name="subscriber">The event subscriber to subscribe.</param>
            <param name="forwardKey">The key used used for forwarding events to a desired instance (used for DataSyncs).</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.SubscribeMessageForwarder(TaxHub.Messaging.ISimpleMessageSubscriber)">
            <summary>
            Method subscribes a subscriber that is responsible for forwarding messages.
            </summary>
            <remarks>Subscriber will be subscribed to all enabled events configured for forwarding.</remarks>
            <param name="subscriber">The event subscriber to subscribe.</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.SubscribeAssembly(System.Reflection.Assembly,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Method subscribes all subscribers marked with <see cref="T:TaxHub.Messaging.SubscriberBindingAttribute"/> attribute within the assembly to appropriate events based in binding settings.
            </summary>
            <param name="subscribersAssembly">The assembly where event subscribers reside.</param>
            <param name="container">The unity container used to resolve subscribers.</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.SubscribeAssembly(System.Reflection.Assembly,Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Method subscribes all subscribers marked with auto-wired <see cref="T:TaxHub.Messaging.SubscriberBindingAttribute"/> attribute within the assembly to appropriate events based on binding settings.
            </summary>
            <param name="subscribersAssembly">The assembly where event subscribers reside.</param>
            <param name="container">The unity container used to resolve subscribers.</param>
            <param name="forwardKey">The key used used for forwarding events to a desired instance (used for DataSyncs).</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.ConfigureAssemblyEvents(System.Reflection.Assembly,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Method configures all events marked with <see cref="T:TaxHub.Common.EventStore.EventDetailsAttribute"/> attribute within the assembly. 
            Essentially method overrides default settings coming from routing table.
            </summary>
            <param name="eventsAssembly">The assembly where event events reside.</param>
            <param name="container">The unity container used to resolve events.</param>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.StartConsumersOnQueue(System.String,System.Boolean,System.Boolean,System.UInt16)">
            <summary>
            Method starts message queue consumer on a single thread using queue name and acknowledgment requirement.
            </summary>
            <param name="queueNameToConsume">The queue name.</param>
            <param name="isDynamicallyNamed">Boolean indicator whether queue always has a fixed name or dynamically named based on specific service name or instance. Failing to properly supply this value would result to exception.</param>
            <param name="shouldAck">The acknowledgment requirement</param>
            <param name="prefetchCount">The number of messages that are allowed to be prefetched from the queue before acknowledgment.</param>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.StartConsumersOnQueue(System.String,System.Boolean,System.Boolean,System.UInt16,System.Int32)">
            <summary>
            Method starts message queue consumer on specified number of thread using queue name and acknowledgment requirement.
            </summary>
            <param name="queueNameToConsume">The queue name.</param>
            <param name="isDynamicallyNamed">Boolean indicator whether queue always has a fixed name or dynamically named based on specific service name or instance. Failing to properly supply this value would result to exception.</param>
            <param name="shouldAck">The acknowledgment requirement</param>
            <param name="prefetchCount">The number of messages that are allowed to be prefetched from the queue before acknowledgment.</param>
            <param name="numberOfThreads">The number of threads.</param>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.GetSubscribers">
            <summary>
            Method returns the list of subscribers within the scope of the instance of the MessageHub.
            </summary>
            <returns>Returns instance of Dictionary&lt;string, QueueSubscribersCollection&gt;.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.GetSubscribersCount">
            <summary>
            Method returns the number of subscribers within the scope of the instance of the MessageHub.
            </summary>
            <returns>Returns int value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.StopConsumers(System.Int32)">
            <summary>
            Method stops all consumers started by the current instance of the MessageHub. 
            The consumers may be currently busy with their work, therefore method waits for the consumers to stop for specified number of milliseconds. 
            Method returns boolean value indicating that all consumers have been stopped.
            </summary>
            <param name="waitMsec">Number of milliseconds to wait until all consumers are stopped.</param>
            <returns>Returns boolean value indicating that all consumers have been stopped.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.CreateSystemCommandQueue(System.String)">
            <summary>
            Creates queue for system commands dedicated to specific service instance; 
            Returns the queue name as "{bounded-context}.queue.system-command-events-queue-[service-instance]".
            </summary>
            <param name="serviceInstance">The service name to register queue with.</param>
            <returns>Queue name string.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.AddListener(TaxHub.Messaging.ISimpleEventListener)">
            <summary>
            Method adds listener to all events that being published through the message hub. The listener is added to the point before publishing the event into the queue.
            </summary>
            <param name="listener">The listener to add.</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.ClearListeners">
            <summary>
            Clears the listeners
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.GetSubscribersDescription">
            <summary>
            Gets the descriptive list of subscribers.
            </summary>
            <returns>Returns the Dictionary where each key represents the event name, and value is a collections of this event subscribers.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.Publish(TaxHub.Common.EventStore.DomainEventData,System.Boolean,System.Int32)">
            <summary>
            Method publishes message into a queuing infrastructure, named exchange, with specified delayed delivery. Returns boolean value as indication of success.
            </summary>
            <param name="eventData">The event data to publish.</param>
            <param name="ackPublish">
                <para>Instructs the publish method whether it should require the RabbitMQ server to acknowledge the publish. The true forces the acknowledgement. By default is false.</para>
                <para>The publish acknowledge is the acknowledgement from the broker that your message was received, and written to disk, if persistence is required by the broker configuration.</para>
            </param>
            <param name="deliveryDelayMsec">The delay in milliseconds.</param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store. 
                      But only pre-configured messages will be published to the exchange. 
                      Because this is desired application behavior that is based on configuration, this method will return success in either way, 
                      but a verbose message is written to the log for debugging purposes.</para>
                <para>The negative ackPublish value may be overridden by message route configuration.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IMessageHub.ReloadRoutingTables">
            <summary>
            Method reloads the routing tables and performs hot swap over existing ones.
            </summary>
            <remarks>
            This is system method. Do not use this method from an application code.
            </remarks>
        </member>
        <member name="M:TaxHub.Messaging.ModelExtensions.BasicPublish``1(RabbitMQ.Client.IModel,System.String,System.String,System.Boolean,RabbitMQ.Client.IBasicProperties,``0,System.Boolean,System.Boolean)">
            <summary>
            Convenience overload of BasicPublish.
            </summary>
            <typeparam name="T">The message body object type</typeparam>
            <param name="channel">The RabbitMQ channel</param>
            <param name="exchange">The exchange name</param>
            <param name="routingKey">The routing key</param>
            <param name="mandatory">The mandatory flag</param>
            <param name="basicProperties">The message properties</param>
            <param name="messageBody">The message body</param>
            <param name="compress">Boolean indicator forcing message compression</param>
            <param name="encrypt">Boolean indicator forcing message encryption</param>
            <remarks>
            The publication occurs with immediate=false.
            </remarks>
        </member>
        <member name="M:TaxHub.Messaging.ModelExtensions.BasicPublish``1(RabbitMQ.Client.IModel,System.String,System.String,RabbitMQ.Client.IBasicProperties,``0,System.Boolean,System.Boolean)">
            <summary>
            Convenience overload of BasicPublish.
            </summary>
            <typeparam name="T">The message body object type</typeparam>
            <param name="channel">The RabbitMQ channel</param>
            <param name="exchange">The exchange name</param>
            <param name="routingKey">The routing key</param>
            <param name="basicProperties">The message properties</param>
            <param name="messageBody">The message body</param>
            <param name="compress">Boolean indicator forcing message compression</param>
            <param name="encrypt">Boolean indicator forcing message encryption</param>
            <remarks>
            The publication occurs with immediate=false.
            </remarks>
        </member>
        <member name="T:TaxHub.Messaging.ISimpleEventListener">
            <summary>
            Interface that must be implemented by an event listener, that is a class attached to Message Queue inbound event stream.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.ISimpleEventListener.HandleEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method handles an event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return false to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.ISimpleEventListener.HandleEventAsync(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method handles an event asynchronously.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.ISimpleEventListener.HandleEvents(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData})">
            <summary>
            Method handles multiple events.
            </summary>
            <param name="eventsData">The events data.</param>
            <returns>Returns boolean value if events has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return false to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.ISimpleEventListener.HandleEventsAsync(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData})">
            <summary>
            Method handles multiple events asynchronously.
            </summary>
            <param name="eventsData">The events data.</param>
            <returns>Returns boolean value if events has been handled.</returns>
            <remarks>NOTE: if handler is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.Messaging.IFailedEventListener">
            <summary>
            Interface that must be implemented by a failed event listener, that is a class attached to Message Queue outbound failed event stream.
            </summary>
        </member>
        <member name="T:TaxHub.Messaging.Message">
            <summary>
            This class represents a basic message sent through the message queue.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Message.MessageId">
            <summary>
            Gets or sets the message id. This value  is being generated by the system and does not carry any meaningful application information.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Message.EventName">
            <summary>
            Gets or sets the event name. This value must not be changed once assigned.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.Message.EventData">
            <summary>
            Gets or sets the event data.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.Message.WrapEvent(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Convenience method creating a message object from known event data  by wrapping it up into a message.
            </summary>
            <param name="eventData">The event data.</param>
            <returns>Returns a Message object.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Message.CreateLightMessage">
            <summary>
            Method creates a deep copy of the message removing the event data and returns this new message.
            </summary>
            <remarks>This method is design to ease the load on the messaging infrastructure whenever possible.</remarks>
            <returns>Returns a Message object.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Message.GetCorrelationId">
            <summary>
            Method provides the correlation id for the event.
            This must be a correlation id that is associated with the event, if available, otherwise a random Guid generated on the first time access to this method.
            </summary>
            <returns>Returns a Guid-like string.</returns>
        </member>
        <member name="M:TaxHub.Messaging.Message.ToString">
            <summary>
            Methods creates a string representation of the message.
            </summary>
            <returns>Returns string.</returns>
        </member>
        <member name="T:TaxHub.Messaging.PoisoningMessageAction">
            <summary>
            The delegate is used to notify of a poisoning message; that are messages that failed to be consumed during too many attempts.
            </summary>
            <param name="message">The poisoning message.</param>
        </member>
        <member name="T:TaxHub.Messaging.MessageConsumerModerator">
            <summary>
            Message queue consumer wrapper class providing application specific logic for common way to handle messages.
            </summary>
            <remarks>IMPORTANT NOTE: when intended use of this class is complete, the StopConsumer method should be called and then class MUST be dispose.
            This ensures proper consumer detachment from the queue.</remarks>
        </member>
        <member name="E:TaxHub.Messaging.MessageConsumerModerator.OnPoisoningMessage">
            <summary>
            The event is used for poisoning messages; that are messages that failed to be consumed during too many attempts.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageConsumerModerator.ShouldAck">
            <summary>
            Gets an indication of queue requirement to acknowledge.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageConsumerModerator.IsDequeuing">
            <summary>
            Gets boolean value indicating that currently consumer is either ready to de-queue or de-queuing a message.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageConsumerModerator.QueueName">
            <summary>
            Gets the queue name the consumer is connected to.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageConsumerModerator.IsConsuming">
            <summary>
            Gets boolean value indicating that currently consumer is consuming (handling) a message.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageConsumerModerator.DequeueTimeout">
            <summary>
            Gets or sets the dequeue timeout, which determines how
            long to wait for a message to be dequeued.
            </summary>
            <value>
            The dequeue timeout.  This defaults to Infinite which is a blocking call,
            but can be adjusted for testing.
            </value>
        </member>
        <member name="P:TaxHub.Messaging.MessageConsumerModerator.MaxRetryTimeSec">
            <summary>
            Gets or sets the maximum time to retry establishing a connection to the specified queue.
            </summary>
        </member>
        <member name="F:TaxHub.Messaging.MessageConsumerModerator.userSecurityInfoAsyncLocalStore">
            <summary>
            The manager for user info in async local context.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.MessageConsumerModerator.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IPoisoningMessagesSupervisor,TaxHub.Messaging.Serialization.IMessageConverter,TaxHub.Common.Helpers.IUserSecurityInfoAsyncLocalStore)">
            <summary>
            Default constructor.
            </summary>
            <param name="logger">The logger object</param>
            <param name="poisoningSupervisor">The poisoning message supervisor.</param>
            <param name="messageConverter">Message converter</param>
            <param name="userSecurityInfoAsyncLocalStore">The user security manager to store user info in async local context.</param>
        </member>
        <member name="M:TaxHub.Messaging.MessageConsumerModerator.StopConsumer">
            <summary>
            Method stops consumer. This method prevents next message from being consumed, but does not stop a message that is currently being handled.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.MessageConsumerModerator.StartConsumer(System.String,System.Boolean,System.UInt16,RabbitMQ.Client.IConnectionFactory,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{TaxHub.Messaging.ISimpleMessageSubscriber}},TaxHub.Messaging.IServiceInstanceQueueCreator)">
            <summary>
            Method starts consumer.
            </summary>
            <param name="queueNameToConsume">The queue name to consume.</param>
            <param name="shouldAck">The indication of queue requirement to acknowledge.</param>
            <param name="prefetchCount">The number of messages that are allowed to be prefetched from the queue before acknowledgment.</param>
            <param name="mqConnectionFactory">The RabbitMQ connection factory to use.</param>
            <param name="subscribers">The collection of subscribers to use.</param>
            <param name="serviceInstanceCreator">The creator to use in case the service instance queues are deleted (such as upon disconnect)</param>
        </member>
        <member name="T:TaxHub.Messaging.IMessageConsumerModeratorFactory">
            <summary>
            The interface implemented by MessageConsumerModerator factory class.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.IMessageConsumerModeratorFactory.Create">
            <summary>
            Creates an instance of IMessageConsumerModerator.
            </summary>
            <returns>Returns an instance of IMessageConsumerModerator</returns>
        </member>
        <member name="T:TaxHub.Messaging.MessageConsumerModeratorFactory">
            <summary>
            This class creates instances of MessageConsumerModerator class.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageConsumerModeratorFactory.DequeueTimeout">
            <summary>
            Gets or sets the dequeue timeout, which determines how 
            long to wait for a message to be dequeued.
            </summary>
            <value>
            The dequeue timeout.  This defaults to Infinite which is a blocking call,
            but can be adjusted for testing.
            </value>
        </member>
        <member name="P:TaxHub.Messaging.MessageConsumerModeratorFactory.MaxRetryTimeSec">
            <summary>
            Gets or sets the maximum time for 
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.MessageConsumerModeratorFactory.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IPoisoningMessagesSupervisor,TaxHub.Messaging.Serialization.IMessageConverter,TaxHub.Common.Configuration.ISystemConfiguration,TaxHub.Common.Helpers.IUserSecurityInfoAsyncLocalStore)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The logger.</param>
            <param name="poisoningSupervisor">The poisoning message supervisor.</param>
            <param name="messageConverter">The message converter.</param>
            <param name="systemConfiguration">The system configuration</param>
            <param name="userSecurityInfoAsyncLocalStore">The async local context store for user info.</param>
        </member>
        <member name="M:TaxHub.Messaging.MessageConsumerModeratorFactory.Create">
            <summary>
            Creates an instance of IMessageConsumerModerator.
            </summary>
            <returns>Returns an instance of IMessageConsumerModerator</returns>
        </member>
        <member name="T:TaxHub.Messaging.MessageHub">
            <summary>
            This class provides a messaging interface to the application abstracting the message queue logic from the application.
            </summary>
            <remarks>IMPORTANT NOTE: when an instance of this class has any consumers started and intended use of this class is complete,
            the StopConsumers method should be called and then class MUST be dispose. This ensures proper consumers detachment from the queue.</remarks>
        </member>
        <member name="F:TaxHub.Messaging.MessageHub.MaxNumberOfThreadsPerQueue">
            <summary>
            Gets the maximum number of threads per queue that can be initialized on a single instance of the MessageHub.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.DefaultExchangeName">
            <summary>
            Gets the default name of the MQ direct exchange used by message publisher.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.DefaultTopicExchangeName">
            <summary>
            Gets the default name of the MQ topic exchange used by message publisher.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.ForwardExchangeName">
            <summary>
            Gets the name of the MQ forward exchange used by message publisher.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.DefaultDelayExchangeName">
            <summary>
            Gets the default name of the MQ exchange used by message publisher to deliver messages with delay.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.ForwardDelayExchangeName">
            <summary>
            Gets the name of the MQ forward exchange used by message publisher to deliver forwarded messages with delay.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.DefaultDelayQueueName">
            <summary>
            Gets the default name of the MQ queue used by message publisher to deliver messages with delay.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.ForwardDelayQueueName">
            <summary>
            Gets the name of the MQ forward queue used by message publisher to deliver forwarded messages.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.DefaultSysCommandsExchangeName">
            <summary>
            Gets the default name of the MQ exchange used by message publisher to deliver system commands messages to all services.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.DefaultSysCommandsQueueNamePrefix">
            <summary>
            Gets the default name prefix of the MQ queue used by message publisher to deliver system commands messages to all services.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.ForwardEventsQueueName">
            <summary>
            Gets the MQ queue used to forward messages for all services to appropriate DataSync service.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.BoundedContext">
            <summary>
            Gets the bounded context that message hub is created for.
            </summary>
        </member>
        <member name="F:TaxHub.Messaging.MessageHub.DefaultPublishConfirmWaitingTimeMsec">
            <summary>
            Gets the timeout used by message hub for publish confirmation.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.CanStartConsumers">
            <summary>
            Gets boolean indicator whether message hub can start consumers.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.CanPublish">
            <summary>
            Gets boolean indicator whether message hub can publish messages.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.IsConnectionBlocked">
            <summary>
            Gets boolean indicator of blocked connection. No publishing can occur when connection is blocked.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.ConnectionBlockedReason">
            <summary>
            Gets descriptive reason for blocked connection.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.MessageHub.SystemCommandQueueName">
            <summary>
            Gets the system command queue name used by current service instance.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.#ctor(RabbitMQ.Client.IConnectionFactory,TaxHub.Messaging.IMessageConsumerModeratorFactory,TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.RoutingTables.IMessageRouter)">
            <summary>
            Class constructor.
            </summary>
            <param name="mqConnectionFactory">The RabbitMQ connection factory.</param>
            <param name="msgConsumerFactory">The message consumer factory.</param>
            <param name="logger">The application logger.</param>
            <param name="messageRouter">The message router.</param>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.CreateSystemCommandQueue(System.String)">
            <summary>
            Creates queue for system commands dedicated to specific service instance;
            Returns the queue name as "{bounded-context}.queue.system-command-events-queue-[service-instance]".
            </summary>
            <param name="serviceInstance">The service name to register queue with.</param>
            <returns>Queue name string.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.StopConsumers(System.Int32)">
            <summary>
            Method stops all consumers started by the current instance of the MessageHub.
            The consumers may be currently busy with their work, therefore method waits for the consumers to stop for specified number of milliseconds.
            Method returns boolean value indicating that all consumers have been stopped.
            </summary>
            <param name="waitMsec">Number of milliseconds to wait until all consumers are stopped.</param>
            <returns>Returns boolean value indicating that all consumers have been stopped.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.StartConsumersOnQueue(System.String,System.Boolean,System.Boolean,System.UInt16,System.Int32)">
            <summary>
            Method starts message queue consumer on specified number of thread using queue name and acknowledgment requirement.
            </summary>
            <param name="queueNameToConsume">The queue name.</param>
            <param name="isDynamicallyNamed">Boolean indicator whether queue always has a fixed name or dynamically named based on specific service name or instance. Failing to properly supply this value would result to exception.</param>
            <param name="shouldAck">The acknowledgment requirement</param>
            <param name="prefetchCount">The number of messages that are allowed to be prefetched from the queue before acknowledgment.</param>
            <param name="numberOfThreads">The number of threads.</param>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.StartConsumersOnQueue(System.String,System.Boolean,System.Boolean,System.UInt16)">
            <summary>
            Method starts message queue consumer on a single thread using queue name and acknowledgment requirement.
            </summary>
            <param name="queueNameToConsume">The queue name.</param>
            <param name="isDynamicallyNamed">Boolean indicator whether queue always has a fixed name or dynamically named based on specific service name or instance. Failing to properly supply this value would result to exception.</param>
            <param name="shouldAck">The acknowledgment requirement</param>
            <param name="prefetchCount">The number of messages that are allowed to be prefetched from the queue before acknowledgment.</param>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.ReloadRoutingTables">
            <summary>
            Method reloads the routing tables and performs hot swap over existing ones.
            </summary>
            <remarks>
            This is system method. Do not use this method from an application code.
            </remarks>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.Publish(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method publishes message into a queuing infrastructure, configured exchange. Returns boolean value as indication of success.
            </summary>
            <param name="eventData">The event data to publish.</param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store.
                      But only pre-configured messages will be published to the exchange.
                      Because this is desired application behavior that is based on configuration, this method will return success in either way,
                      but a verbose message is written to the log for debugging purposes.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.Publish(TaxHub.Common.EventStore.DomainEventData,System.Boolean)">
            <summary>
            Method publishes message into a queuing infrastructure, configured exchange. Returns boolean value as indication of success.
            </summary>
            <param name="eventData">The event data to publish.</param>
            <param name="ackPublish">
                <para>Instructs the publish method whether it should require the RabbitMQ server to acknowledge the publish. The true forces the acknowledgement. By default is false.</para>
                <para>The publish acknowledge is the acknowledgement from the broker that your message was received, and written to disk, if persistence is required by the broker configuration.</para>
            </param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store.
                      But only pre-configured messages will be published to the exchange.
                      Because this is desired application behavior that is based on configuration, this method will return success in either way,
                      but a verbose message is written to the log for debugging purposes.</para>
                <para>The negative ackPublish value may be overridden by message route configuration.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.Publish(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method publishes message into a queuing infrastructure, named exchange. Returns boolean value as indication of success.
            </summary>
            <param name="exchangeName">The MQ exchange name to publish to. The exchange name is optional - the name configured in the route will be used.</param>
            <param name="eventData">The event data to publish.</param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store.
                      But only pre-configured messages will be published to the exchange.
                      Because this is desired application behavior that is based on configuration, this method will return success in either way,
                      but a verbose message is written to the log for debugging purposes.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.Publish(System.String,TaxHub.Common.EventStore.DomainEventData,System.Boolean)">
            <summary>
            Method publishes message into a queuing infrastructure, named exchange. Returns boolean value as indication of success.
            </summary>
            <param name="exchangeName">The MQ exchange name to publish to. The exchange name is optional - the name configured in the route will be used.</param>
            <param name="eventData">The event data to publish.</param>
            <param name="ackPublish">
                <para>Instructs the publish method whether it should require the RabbitMQ server to acknowledge the publish. The true forces the acknowledgement. By default is false.</para>
                <para>The publish acknowledge is the acknowledgement from the broker that your message was received, and written to disk, if persistence is required by the broker configuration.</para>
            </param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store.
                      But only pre-configured messages will be published to the exchange.
                      Because this is desired application behavior that is based on configuration, this method will return success in either way,
                      but a verbose message is written to the log for debugging purposes.</para>
                <para>The negative ackPublish value may be overridden by message route configuration.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.Publish(TaxHub.Common.EventStore.DomainEventData,System.Boolean,System.Int32)">
            <summary>
            Method publishes message into a queuing infrastructure, named exchange, with specified delayed delivery. Returns boolean value as indication of success.
            </summary>
            <param name="eventData">The event data to publish.</param>
            <param name="ackPublish">
                <para>Instructs the publish method whether it should require the RabbitMQ server to acknowledge the publish. The true forces the acknowledgement. By default is false.</para>
                <para>The publish acknowledge is the acknowledgement from the broker that your message was received, and written to disk, if persistence is required by the broker configuration.</para>
            </param>
            <param name="deliveryDelayMsec">The delay in milliseconds.</param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store.
                      But only pre-configured messages will be published to the exchange.
                      Because this is desired application behavior that is based on configuration, this method will return success in either way,
                      but a verbose message is written to the log for debugging purposes.</para>
                <para>The negative ackPublish value may be overridden by message route configuration.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.Publish(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData})">
            <summary>
            Method publishes multiple messages into a queuing infrastructure, configured exchange. Returns boolean value as indication of success.
            </summary>
            <param name="eventsData">The event data to publish.</param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store.
                      But only pre-configured messages will be published to the exchange.
                      Because this is desired application behavior that is based on configuration, this method will return success in either way,
                      but a verbose message is written to the log for debugging purposes.</para>
                <para>The negative ackPublish value may be overridden by message route configuration.</para>
                <para>The order of events is not preserved.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.Publish(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData},System.Boolean)">
            <summary>
            Method publishes multiple messages into a queuing infrastructure, configured exchange. Returns boolean value as indication of success.
            </summary>
            <param name="eventsData">The event data to publish.</param>
            <param name="ackPublish">
                <para>Instructs the publish method whether it should require the RabbitMQ server to acknowledge the publish. The true forces the acknowledgement. By default is false.</para>
                <para>The publish acknowledge is the acknowledgement from the broker that your message was received, and written to disk, if persistence is required by the broker configuration.</para>
            </param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store.
                      But only pre-configured messages will be published to the exchange.
                      Because this is desired application behavior that is based on configuration, this method will return success in either way,
                      but a verbose message is written to the log for debugging purposes.</para>
                <para>The negative ackPublish value may be overridden by message route configuration.</para>
                <para>The order of events is not preserved.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.Publish(System.String,System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData},System.Boolean)">
            <summary>
            Method publishes multiple messages into a queuing infrastructure, named exchange. Returns boolean value as indication of success.
            </summary>
            <param name="exchangeName">The MQ exchange name to publish to. The exchange name is optional - the name configured in the route will be used.</param>
            <param name="eventsData">The event data to publish.</param>
            <param name="ackPublish">
                <para>Instructs the publish method whether it should require the RabbitMQ server to acknowledge the publish. The true forces the acknowledgement. By default is false.</para>
                <para>The publish acknowledge is the acknowledgement from the broker that your message was received, and written to disk, if persistence is required by the broker configuration.</para>
            </param>
            <remarks>
                <para>The listeners will be invoked for all messages, therefore, for example, all messages will be written to the event store.
                      But only pre-configured messages will be published to the exchange.
                      Because this is desired application behavior that is based on configuration, this method will return success in either way,
                      but a verbose message is written to the log for debugging purposes.</para>
                <para>The negative ackPublish value may be overridden by message route configuration.</para>
                <para>The order of events is not preserved.</para>
            </remarks>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.Subscribe(System.String,System.String,TaxHub.Messaging.ISimpleMessageSubscriber)">
            <summary>
            Method subscribes a subscriber to the event.
            </summary>
            <param name="queueName">The queue name to subscribe to.</param>
            <param name="eventName">The event name to subscribe to.</param>
            <param name="subscriber">The event subscriber to subscribe.</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.Subscribe(TaxHub.Messaging.ISimpleMessageSubscriber)">
            <summary>
            Method subscribes a subscriber marked with auto-wired <see cref="T:TaxHub.Messaging.SubscriberBindingAttribute"/> attribute to appropriate events based on binding settings.
            </summary>
            <param name="subscriber">The event subscriber to subscribe.</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.Subscribe(TaxHub.Messaging.ISimpleMessageSubscriber,System.String)">
            <summary>
            Method subscribes a subscriber marked with auto-wired <see cref="T:TaxHub.Messaging.SubscriberBindingAttribute"/> attribute to appropriate events based on binding settings.
            </summary>
            <param name="subscriber">The event subscriber to subscribe.</param>
            <param name="forwardKey">The key used used for forwarding events to a desired instance (used for DataSyncs). Required for forwarded events.</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.SubscribeMessageForwarder(TaxHub.Messaging.ISimpleMessageSubscriber)">
            <summary>
            Method subscribes a subscriber that is responsible for forwarding messages.
            </summary>
            <remarks>Subscriber will be subscribed to all enabled events configured for forwarding.</remarks>
            <param name="subscriber">The event subscriber to subscribe.</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.SubscribeAssembly(System.Reflection.Assembly,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Method subscribes all subscribers marked with auto-wired <see cref="T:TaxHub.Messaging.SubscriberBindingAttribute"/> attribute within the assembly to appropriate events based on binding settings.
            </summary>
            <param name="subscribersAssembly">The assembly where event subscribers reside.</param>
            <param name="container">The unity container used to resolve subscribers.</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.SubscribeAssembly(System.Reflection.Assembly,Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Method subscribes all subscribers marked with auto-wired <see cref="T:TaxHub.Messaging.SubscriberBindingAttribute"/> attribute within the assembly to appropriate events based on binding settings.
            </summary>
            <param name="subscribersAssembly">The assembly where event subscribers reside.</param>
            <param name="container">The unity container used to resolve subscribers.</param>
            <param name="forwardKey">The key used used for forwarding events to a desired instance (used for DataSyncs).
            Required for forwarded events. It must be provided if assembly contains any auto-wired forwarded event subscribers.</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.ConfigureAssemblyEvents(System.Reflection.Assembly,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Method configures all events marked with <see cref="T:TaxHub.Common.EventStore.EventDetailsAttribute"/> attribute within the assembly.
            Essentially method overrides default settings coming from routing table.
            </summary>
            <param name="eventsAssembly">The assembly where event events reside.</param>
            <param name="container">The unity container used to resolve events.</param>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.GetSubscribers">
            <summary>
            Method returns the list of subscribers within the scope of the instance of the MessageHub.
            </summary>
            <returns>Returns instance of Dictionary&lt;string, QueueSubscribersCollection&gt;.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.GetSubscribersCount">
            <summary>
            Method returns the number of subscribers within the scope of the instance of the MessageHub.
            </summary>
            <returns>Returns int value.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.GetSubscribersDescription">
            <summary>
            Gets the descriptive list of subscribers.
            </summary>
            <remarks>It also adds "[system-event-listeners]" key with collection of listeners.</remarks>
            <returns>Returns the Dictionary where each key represents the event name, and value is a collections of this event subscribers.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.AddListener(TaxHub.Messaging.ISimpleEventListener)">
            <summary>
            Method adds listener to all events that being published through the message hub. The listener is added to the point before publishing the event into the queue.
            </summary>
            <param name="listener">The listener to add.</param>
            <returns>Returns boolean value as indication of success.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageHub.ClearListeners">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.Messaging.MessageQueueSetup">
            <summary>
            Class performs message queue initialization, such as creating exchanges, queues, and setting up binding between them.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.MessageQueueSetup.GetConnectionFactory(TaxHub.Common.Security.KeyServer.IRabbitMqCredentialsProvider)">
            <summary>
            Method provides RabbitMQ connection factory.
            </summary>
            <param name="credsProvider">The RabbitMQ credentials provider.</param>
            <returns>Returns an object instance that implements the IConnectionFactory.</returns>
        </member>
        <member name="M:TaxHub.Messaging.MessageQueueSetup.InitializePaymentExchanges(TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,System.String,TaxHub.Common.Security.KeyServer.IRabbitMqCredentialsProvider)">
            <summary>
            Initializes non-tax queues; as well as exchanges and setting up bindings.
            </summary>
            <param name="messageHub">Message hub.</param>
            <param name="logger">The logger to use</param>
            <param name="boundedContext">Current service bounded context. For example 'payment' or 'garnishment'.</param>
            <param name="credsProvider">The RabbitMQ credentials provider.</param>
        </member>
        <member name="M:TaxHub.Messaging.MessageQueueSetup.InitializeQueues(TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,System.String,TaxHub.Common.Security.KeyServer.IRabbitMqCredentialsProvider)">
            <summary>
            Initializes tax queues; as well as exchanges and setting up bindings.
            </summary>
            <param name="messageHub">Message hub.</param>
            <param name="logger">The logger to use</param>
            <param name="boundedContext">Current service bounded context. This context is 'tax'.</param>
            <param name="credsProvider">The RabbitMQ credentials provider.</param>
        </member>
        <member name="M:TaxHub.Messaging.MessageQueueSetup.DeleteQueues(TaxHub.Common.Logging.IAppLogger,System.String,TaxHub.Common.Security.KeyServer.IRabbitMqCredentialsProvider,System.String[])">
            <summary>
            Initializes queues; as well as exchanges and setting up bindings.
            </summary>
            <param name="logger">The logger to use</param>
            <param name="boundedContext">Current service bounded context.</param>
            <param name="credsProvider">The RabbitMQ credentials provider.</param>
            <param name="aDOItionalQueuenamesToDelete">ADOItional queue names, that are not defined in the routing table, to delete.</param>
            <remarks>This method is for data seeding and testing only. Do not use it in production code.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.MessageQueueSetup.Initialize(Microsoft.Practices.Unity.IUnityContainer,System.String,System.Threading.CancellationToken)">
            <summary>
            Method initializes Unity container with necessary MQ related registrations.
            </summary>
            <param name="container">The unity container.</param>
            <param name="boundedContext">Current service bounded context.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>
            Returns Task
            </returns>
            <remarks>
            This method also assigns event-store related listeners to the MessageHub instance.
            Ensure Event Store and DataSync Metadata initializes Unity container on its behalf before calling this method.
            Method requires to complete the BaseInfrastructureSetup prior to this call.
            </remarks>
        </member>
        <member name="M:TaxHub.Messaging.MessageQueueSetup.StartServiceSystemCommandQueue(Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Method creates and starts a queue for incoming system commands routed to the an instance of the service.
            </summary>
            <param name="container">The unity container.</param>
            <param name="serviceInstance">Service instance name, optional.</param>
        </member>
        <member name="M:TaxHub.Messaging.MessageQueueSetup.StartServiceReplayCommandQueue(Microsoft.Practices.Unity.IUnityContainer,System.String,System.Boolean)">
            <summary>
            Method starts consumer on a queue for incoming aggregate replay commands routed to the service.
            </summary>
            <param name="container">The unity container.</param>
            <param name="serviceName">The service name. Must be single word unique to the service.</param>
            <param name="allowEventRepublishing">Whether to allow events to be republished by the replay subscriber</param>
            <remarks>Allow event republishing should only be set to true for one service in a domain. E.G. SmartHub.CoreServices or TaxHub.CoreServices</remarks>
        </member>
        <member name="T:TaxHub.Messaging.MessageHubCircuitBreakerHandler">
            <summary>
            Message handler for breaking API commands early in stage when RabbitMQ is not ready to process emitted events. 
            Currently 2 cases are being handled: connection is not established (at the startup only), and connection blocked by RabbitMQ (happens when RabbitMQ runs low on resources).
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.MessageHubCircuitBreakerHandler.#ctor(System.Net.Http.HttpMessageHandler,TaxHub.Messaging.IMessageHub)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.HttpMessageHandler" /> class.
            </summary>
            <param name="innerHandler">The inner handler.</param>
            <param name="messageHub">The Message Hub used by service API.</param>
        </member>
        <member name="M:TaxHub.Messaging.MessageHubCircuitBreakerHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            send as an asynchronous operation.
            </summary>
            <param name="request">The HTTP request message to send to the server.</param>
            <param name="cancellationToken">A cancellation token to cancel operation.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />. The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.Messaging.IPoisoningMessagesSupervisor.IsPoisoningMessage(System.String)">
            <summary>
            Method evaluates the message by its delivery tag and returns false indicating the system poisoning message.
            </summary>
            <param name="messageId">Application message id</param>
            <returns>Returns false indicating the system poisoning message; otherwise true.</returns>
        </member>
        <member name="T:TaxHub.Messaging.PoisoningMessagesSupervisor">
            <summary>
            This class keeps track of message delivery tags for a limited time so the messages that poison the system can be determined by the service node.
            </summary>
        </member>
        <member name="F:TaxHub.Messaging.PoisoningMessagesSupervisor.PoisoningMessagesCacheDurationSeconds">
            <summary>
            Timeout for message delivery tags cache.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.PoisoningMessagesSupervisor.#ctor(SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Common.Configuration.ISystemConfiguration)">
            <summary>
            Default constructor.
            </summary>
            <param name="cacheManager">Cache manager.</param>
            <param name="systemConfiguration">System configuration.</param>
        </member>
        <member name="M:TaxHub.Messaging.PoisoningMessagesSupervisor.IsPoisoningMessage(System.String)">
            <summary>
            Method evaluates the message by its delivery tag and returns false indicating the system poisoning message.
            </summary>
            <param name="messageId">Application message id</param>
            <returns>Returns false indicating the system poisoning message; otherwise true.</returns>
        </member>
        <member name="T:TaxHub.Messaging.QueueingBasicConsumerImpl">
             <summary>
             A <see cref="T:RabbitMQ.Client.IBasicConsumer"/> implementation that uses a <see cref="T:RabbitMQ.Util.SharedQueue"/> to buffer incoming deliveries.
             </summary>
             <remarks>
             <para>
             Received messages are placed in the SharedQueue as instances of <see cref="T:RabbitMQ.Client.Events.BasicDeliverEventArgs"/>.
             </para>
             <para>
             Note that messages taken from the SharedQueue may need acknowledging with <see cref="M:RabbitMQ.Client.IModel.BasicAck(System.UInt64,System.Boolean)"/>.
             </para>
             <para>
             When the consumer is closed, through BasicCancel or through the shutdown of the underlying <see cref="T:RabbitMQ.Client.IModel"/> or <see cref="T:RabbitMQ.Client.IConnection"/>,
              the SharedQueue.Close method is called, which causes any Enqueue() operations, and Dequeue() operations when the queue
             is empty, to throw EndOfStreamException (see the comment for SharedQueue.Close).
             </para>
             <para>
             The following is a simple example of the usage of this class:
             </para>
             <example><code>
             IModel channel = ...;
             QueueingBasicConsumer consumer = new QueueingBasicConsumer(channel);
             channel.BasicConsume(queueName, null, consumer);
            
             // At this point, messages will be being asynchronously delivered,
             // and will be queuing up in consumer.Queue.
            
             while (true) {
                 try {
                     BasicDeliverEventArgs e = (BasicDeliverEventArgs) consumer.Queue.Dequeue();
                     // ... handle the delivery ...
                     channel.BasicAck(e.DeliveryTag, false);
                 } catch (EndOfStreamException ex) {
                     // The consumer was cancelled, the model closed, or the
                     // connection went away.
                     break;
                 }
             }
             </code></example>
             </remarks>
        </member>
        <member name="M:TaxHub.Messaging.QueueingBasicConsumerImpl.#ctor">
            <summary>
            Creates a fresh <see cref="T:TaxHub.Messaging.QueueingBasicConsumerImpl"/>,
             initializing the <see cref="P:RabbitMQ.Client.DefaultBasicConsumer.Model"/> property to null
             and the <see cref="P:TaxHub.Messaging.QueueingBasicConsumerImpl.Queue"/> property to a fresh <see cref="T:RabbitMQ.Util.SharedQueue"/>.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.QueueingBasicConsumerImpl.#ctor(RabbitMQ.Client.IModel)">
            <summary>
            Creates a fresh <see cref="T:TaxHub.Messaging.QueueingBasicConsumerImpl"/>, with <see cref="P:RabbitMQ.Client.DefaultBasicConsumer.Model"/>
             set to the argument, and <see cref="P:TaxHub.Messaging.QueueingBasicConsumerImpl.Queue"/> set to a fresh <see cref="T:RabbitMQ.Util.SharedQueue"/>.
            </summary>
            <param name="model">The queue model</param>
        </member>
        <member name="M:TaxHub.Messaging.QueueingBasicConsumerImpl.#ctor(RabbitMQ.Client.IModel,RabbitMQ.Util.SharedQueue{RabbitMQ.Client.Events.BasicDeliverEventArgs})">
            <summary>
            Creates a fresh <see cref="T:TaxHub.Messaging.QueueingBasicConsumerImpl"/>,
             initializing the <see cref="P:RabbitMQ.Client.DefaultBasicConsumer.Model"/>
             and <see cref="P:TaxHub.Messaging.QueueingBasicConsumerImpl.Queue"/> properties to the given values.
            </summary>
            <param name="model">The queue model.</param>
            <param name="queue">The queue.</param>
        </member>
        <member name="P:TaxHub.Messaging.QueueingBasicConsumerImpl.Queue">
            <summary>
            Retrieves the <see cref="T:RabbitMQ.Util.SharedQueue"/> that messages arrive on.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.QueueingBasicConsumerImpl.HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>
            Overrides <see cref="T:RabbitMQ.Client.DefaultBasicConsumer"/>'s  <see cref="M:TaxHub.Messaging.QueueingBasicConsumerImpl.HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])"/> implementation,
             building a <see cref="T:RabbitMQ.Client.Events.BasicDeliverEventArgs"/> instance and placing it in the Queue.
            </summary>
            <param name="consumerTag">Consumer tag.</param>
            <param name="deliveryTag">Delivery tag.</param>
            <param name="redelivered">Boolean flag indicated whether message is redelivered.</param>
            <param name="exchange">The exchange name.</param>
            <param name="routingKey">The routing key.</param>
            <param name="properties">The message parameters.</param>
            <param name="body">The message body.</param>
        </member>
        <member name="M:TaxHub.Messaging.QueueingBasicConsumerImpl.OnCancel">
            <summary>
            Overrides <see cref="T:RabbitMQ.Client.DefaultBasicConsumer"/>'s OnCancel implementation,
             extending it to call the Close() method of the <see cref="T:RabbitMQ.Util.SharedQueue"/>.
            </summary>
        </member>
        <member name="T:TaxHub.Messaging.RoutingTables.IMessageRouter">
            <summary>
            Message router class provides the routing information for specific event name.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.IMessageRouter.FindExchangeRoute(System.String)">
            <summary>
            Method returns the exchange route that match particular event name (used as routing key). Returns a null if no enabled route found. 
            This method does not return return all the routes declared for the event, but only a single one to gather the exchange portion of the route (name and configuration options) for the message publisher.
            </summary>
            <param name="eventName">The event name</param>
            <returns>Returns a MessageExchangeRoute object. The object can be null if no enabled routes found.</returns>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.IMessageRouter.ReloadRoutingTables">
            <summary>
            Method reloads the routing tables and performs hot swap over existing ones.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.IMessageRouter.FindForwardedEvents">
            <summary>
            Method finds the list of forwarded events to ease the subscription process.
            </summary>
            <returns>Returns the list of forwarded event names.</returns>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.IMessageRouter.OverrideRouteProperties(System.Collections.Generic.IEnumerable{TaxHub.Messaging.RoutingTables.MessageRouteProperties})">
            <summary>
            Method provides ability to override some route properties allowing to customize event publishing. 
            Currently only AckPublish, Compressed, and Encrypted properties. For all overrides a true takes precedence. 
            </summary>
            <param name="overrides">An enumerable of overrides.</param>
        </member>
        <member name="T:TaxHub.Messaging.RoutingTables.MessageRouter">
            <summary>
            Message router class provides the routing information for specific event name.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageRouter.BypassPublishing">
            <summary>
            **ONLY USE FOR TESTING PURPOSES**
            This static property was introduced for testing purposes. If true,
            the FindExchangeRoute method will always return null. This can be used
            to bypass publishing of rabbitmq messages to simplify certain test 
            scenarios. 
            </summary>        
            <remarks>You should probably talk with Lenny before setting this.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.MessageRouter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IDataSyncMetadataService)">
            <summary>
            Class constructor.
            </summary>
            <param name="logger">The logger to use</param>
            <param name="dataSyncMetadataService">DataSync metadata service.</param>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.MessageRouter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.RoutingTables.IRoutingTableProvider)">
            <summary>
            Class constructor.
            </summary>
            <param name="logger">The logger to use</param>
            <param name="provider">The routing table provider to use.</param>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.MessageRouter.ReloadRoutingTables">
            <summary>
            Method reloads the routing tables and performs hot swap over existing ones.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.MessageRouter.OverrideRouteProperties(System.Collections.Generic.IEnumerable{TaxHub.Messaging.RoutingTables.MessageRouteProperties})">
            <summary>
            Method provides ability to override some route properties allowing to customize event publishing. 
            Currently only AckPublish, Compressed, and Encrypted properties. For all overrides a true takes precedence. 
            </summary>
            <param name="overrides">An enumerable of overrides.</param>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.MessageRouter.FindExchangeRoute(System.String)">
            <summary>
            Method returns the exchange route that match particular event name (used as routing key). Returns a null if no enabled route found. 
            This method does not return return all the routes declared for the event, but only a single one to gather the exchange portion of the route (name and configuration options) for the message publisher.    
            </summary>
            <param name="eventName">The event name</param>        
            <returns>Returns a MessageExchangeRoute object. The object can be null if no enabled routes found.</returns>
            <see cref="P:TaxHub.Messaging.RoutingTables.MessageRouter.BypassPublishing"/>
            <remarks>If the BypassPublishing static property is true, this method will always return null. Only set that to true for testing purposes.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.MessageRouter.FindForwardedEvents">
            <summary>
            Method finds the list of forwarded events to ease the subscription process.
            </summary>
            <returns>Returns the list of forwarded event names.</returns>
        </member>
        <member name="T:TaxHub.Messaging.RoutingTables.MessageRoutingTable">
            <summary>
            The class represents message queue routing table that is used to setup the exchanges, queues, and bindings.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageRoutingTable.Name">
            <summary>
            Gets or sets the table name.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageRoutingTable.Version">
            <summary>
            Gets or sets the table version.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageRoutingTable.Routes">
            <summary>
            Gets or sets the collection of routes.
            </summary>
        </member>
        <member name="T:TaxHub.Messaging.RoutingTables.MessageRouteProperties">
            <summary>
            The class represents message route properties.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageRouteProperties.RoutingKey">
            <summary>
            Gets or sets the message routing key.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageRouteProperties.AckPublish">
            <summary>
            Gets or sets the boolean indicator whether the publish requires acknowledgement.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageRouteProperties.Encrypted">
            <summary>
            Gets or sets a boolean indicator whether the event has to be encrypted.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageRouteProperties.Compressed">
            <summary>
            Gets or sets a boolean indicator whether the event has to be compressed.
            </summary>
        </member>
        <member name="T:TaxHub.Messaging.RoutingTables.MessageExchangeRoute">
            <summary>
            The class represents message exchange part of the route.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageExchangeRoute.ExchangeName">
            <summary>
            Gets or sets the exchange name that should be used to send the message.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageExchangeRoute.LightPayload">
            <summary>
            Gets or sets the boolean indicator whether the light payload should be used (the event details will be removed from the message).
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageExchangeRoute.Enabled">
            <summary>
            Gets or sets the boolean indicator whether the route is enabled.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageExchangeRoute.IsForwarded">
            <summary>
            Gets or sets the boolean indicator whether messages that are coming to this route are being forwarded to a specific DataSync instance.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageExchangeRoute.ConsumerApp">
            <summary>
            Gets or sets the name of application that consumes the event.
            </summary>
        </member>
        <member name="T:TaxHub.Messaging.RoutingTables.MessageRoute">
            <summary>
            The class represents message queue route.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.MessageRoute.QueueName">
            <summary>
            Gets or sets the queue name where there the message should be routed to.
            </summary>
        </member>
        <member name="T:TaxHub.Messaging.RoutingTables.IRoutingTableProvider">
            <summary>
            Interface for the class that provides access to message queue routing table data.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.IRoutingTableProvider.Source">
            <summary>
            Gets the source description where the routing table was loaded from (either external FILE or dll imbedded RESOURCE).
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.IRoutingTableProvider.LoadTable(System.String)">
            <summary>
            Method loads routing table by its name.
            </summary>
            <param name="name">The routing table name.</param>
            <returns>Returns an instance of MessageRoutingTable.</returns>
        </member>
        <member name="T:TaxHub.Messaging.RoutingTables.RoutingTableProvider">
            <summary>
            The class provides access to message queue routing table data.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.RoutingTables.RoutingTableProvider.Source">
            <summary>
            Gets the source description where the routing table was loaded from (FILE or dll imbedded RESOURCE).
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.RoutingTableProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Messaging.RoutingTables.RoutingTableProvider"/> class.
            Default constructor.
             </summary>
        </member>
        <member name="M:TaxHub.Messaging.RoutingTables.RoutingTableProvider.LoadTable(System.String)">
            <summary>
            Method loads routing table by its name.
            </summary>
            <param name="name">The routing table name.</param>
            <returns>Returns an instance of MessageRoutingTable.</returns>
        </member>
        <member name="T:TaxHub.Messaging.ISimpleMessageSubscriber">
            <summary>
            Interface that must be implemented by an event subscriber.
            </summary>
            <remarks>Message subscriber must be stateless, so it can be shared across multiple threads</remarks>
        </member>
        <member name="M:TaxHub.Messaging.ISimpleMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes an event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.Messaging.SimpleMessageSubscriber">
            <summary>
            The simple event subscriber.
            </summary>
            <remarks>Message subscriber is stateless, so it can be shared across multiple threads</remarks>
        </member>
        <member name="M:TaxHub.Messaging.SimpleMessageSubscriber.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.SimpleMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes an event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>NOTE: if subscriber is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.Messaging.SimpleTypedMessageSubscriber`1">
            <summary>
            The simple event subscriber.
            </summary>
            <remarks>Message subscriber is stateless, so it can be shared across multiple threads</remarks>
        </member>
        <member name="M:TaxHub.Messaging.SimpleTypedMessageSubscriber`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.SimpleTypedMessageSubscriber`1.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes an event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>NOTE: if subscriber is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.SimpleTypedMessageSubscriber`1.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,`0)">
            <summary>
            Method consumes an event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <param name="typedDetails">Typed object represents event details.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>NOTE: if subscriber is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.Messaging.SubscriberBindingAttribute">
            <summary>
            Class providing the binding information between event subscribers and messages.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.SubscriberBindingAttribute.EventName">
            <summary>
            Gets or sets the event name to subscriber to.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.SubscriberBindingAttribute.QueueName">
            <summary>
            Gets or sets the queue name to subscriber to.
            </summary>
        </member>
        <member name="P:TaxHub.Messaging.SubscriberBindingAttribute.Autowire">
            <summary>
            Gets or sets boolean indicator where binding should be auto-wired if assembly subscription is used.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.SubscriberBindingAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.SubscriberBindingAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor accepting queue name and event name.
            </summary>
            <param name="queueName">The queue name.</param>
            <param name="eventName">The event name.</param>
        </member>
        <member name="T:TaxHub.Messaging.SysCommandSubscriberBase">
            <summary>
            Class provides subscriber functionality for the system-command event.
            </summary>
        </member>
        <member name="M:TaxHub.Messaging.SysCommandSubscriberBase.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.Messaging.SysCommandSubscriberBase.ProcessLocalCommands(System.String,TaxHub.Common.EventStore.DomainEventData,System.Boolean@)">
            <summary>
            Method processes local commands known to particular service.
            </summary>
            <param name="commandName">The command name. This is different from the eventName.</param>
            <param name="eventData">The event data.</param>
            <param name="knownCommand">Method must return boolean indicator whether command is known as a local command.</param>
            <returns>Returns boolean value if event has been successfully consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.Messaging.SysCommandReloadRoutingSubscriber">
            <summary>
            Class provides subscriber functionality for the system-command event.
            </summary>    
        </member>
        <member name="M:TaxHub.Messaging.SysCommandReloadRoutingSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
    </members>
</doc>
