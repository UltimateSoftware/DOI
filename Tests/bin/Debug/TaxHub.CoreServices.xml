<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaxHub.CoreServices</name>
    </assembly>
    <members>
        <member name="M:TaxHub.CoreServices.Acl.Filing.FilingRequestModelMapper.MapTo(TaxHub.Models.Events.TaxFilingRequestLegacyCreatedEvent)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Filing.IFilingRequestModelMapper.MapTo(TaxHub.Models.Events.TaxFilingRequestLegacyCreatedEvent)">
            <summary>
            Maps a Tax Filing Request to a Filing Reequest Model
            </summary>
            <param name="taxFilingRequestLegacyCreatedEvent">The legacy event (TaxFilingLegacyCreatedEvent)</param>
            <returns>A Filing Request Model</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Quarter_End_Phase.IQuarterEndPhaseQePhaseDtoMapper">
            <summary>
            Mapper for <see cref="T:TaxHub.Models.Quarter_End_Phase.QuarterEndPhase"/> and <see cref="T:TaxHub.CoreServices.Models.Dto.Quarter_End_Phase.QePhase"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Quarter_End_Phase.IQuarterEndPhaseQePhaseDtoMapper.MapTo(TaxHub.Models.Quarter_End_Phase.QuarterEndPhase)">
            <summary>
            Maps <see cref="T:TaxHub.Models.Quarter_End_Phase.QuarterEndPhase"/> and <see cref="T:TaxHub.CoreServices.Models.Dto.Quarter_End_Phase.QePhase"/>
            </summary>
            <param name="quarterEndPhase">The instance of the </param>
            <returns>The mapped instance.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Quarter_End_Phase.QuarterEndPhaseQePhaseDtoMapper">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Quarter_End_Phase.QuarterEndPhaseQePhaseDtoMapper.MapTo(TaxHub.Models.Quarter_End_Phase.QuarterEndPhase)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Legacy.Events.LegacyEventViewAttribute">
            <summary>
            Attribute to define a view of a legacy event details.
            THIS EVENT CANNOT BE PUBLISHED- IT IS STRICTLY A VIEW
            
            The view is strictly intended for tax-core to have a reference 
            to event types published from legacy
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.LegacyEventViewAttribute.EventName">
            <summary>
            Gets or sets the domain event name. This name must follow the convention: "{domain}|{bounded-context}.{aggregate-name}.{what-happened-in-the-past-tense}".
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.LegacyEventViewAttribute.SchemaVersion">
            <summary>
            Gets or sets the event schema version.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.PaymentId">
            <summary>
            Gets or sets the paymentId.
            </summary>
            <value>
            The paymentId.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.PayeeId">
            <summary>
            Gets or sets the payee identifier.
            </summary>
            <value>
            The payee identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.PostPayrollId">
            <summary>
            Gets or sets the post payroll identifier.
            </summary>
            <value>
            The post payroll identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.ProcessDate">
            <summary>
            Gets or sets the process date.
            </summary>
            <value>
            The process date.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.BatchNo">
            <summary>
            Sets the batch no.
            </summary>
            <value>
            The batch no.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.DueDate">
            <summary>
            Gets or sets the due date.
            </summary>
            <value>
            The due date.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.PaymentAmount">
            <summary>
            Sets the payment amount.
            </summary>
            <value>
            The payment amount.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.TaxCode">
            <summary>
            Gets or sets the tax code.
            </summary>
            <value>
            The tax code.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.CheckDate">
            <summary>
            Gets or sets the check date.
            </summary>
            <value>
            The check date.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.EftRequirement">
            <summary>
            Gets or sets the eft requirement.
            </summary>
            <value>
            The eft requirement.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.IsPaid">
            <summary>
            Gets or sets the is paid.
            </summary>
            <value>
            The is paid.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.IsSent">
            <summary>
            Gets or sets the is sent.
            </summary>
            <value>
            The is sent.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.InputUser">
            <summary>
            Gets or sets the input user.
            </summary>
            <value>
            The input user.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.ModifyDate">
            <summary>
            Gets or sets the modify date.
            </summary>
            <value>
            The modify date.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.ModifyBy">
            <summary>
            Gets or sets the modify by.
            </summary>
            <value>
            The modify by.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.AutomaticPaid">
            <summary>
            Gets or sets the automatic paid.
            </summary>
            <value>
            The automatic paid.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.Notes">
            <summary>
            Gets or sets the notes.
            </summary>
            <value>
            The notes.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.Prepaid">
            <summary>
            Gets or sets the prepaid.
            </summary>
            <value>
            The prepaid.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.MsreplTranVersion">
            <summary>
            Gets or sets the msrepl tran version.
            </summary>
            <value>
            The msrepl tran version.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.New">
            <summary>
            Gets or sets the new.
            </summary>
            <value>
            The new.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.RefundLiabilityId">
            <summary>
            Gets or sets the Negative Liability Id of the payment when voided for Refund
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.AmountAfterCredit">
            <summary>
            Remaining amount after a credit gets applied 
            </summary>
            <value>
            The amount after credit.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.CheckDateNextBusinessDay">
            <summary>
            Sets the check date next business day.
            </summary>
            <value>
            The check date next business day.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.PaymentUId">
            <summary>
            Gets or sets the Payment Unique Identifier 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.Exported">
            <summary>
            Gets or sets the exported flag 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.AssemblyStatus">
            <summary>
            Gets or sets whether a liability has been requested or not for the Payment's payroll.
            </summary>
            <value>
            The tax units.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.IsReconciled">
            <summary>
            Gets or sets the reconciled flag (driven by bank recon in SSP)
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.AgencyRefunded">
            <summary>
            Sets the Agency Refunded flag
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.UseWithinCheckDateQuarter">
            <summary>
            Get or sets the payments that this credit was applied
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.AgencyId">
            <summary>
            gets or sets agencyid
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.PostPayrollIdGuid">
            <summary>
            Gets or sets the post payroll identifier as a GUID.
            </summary>
            <value>
            The post payroll identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.CompanyId">
            <summary>
            gets or sets companyId
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.Child_Client_Id">
            <summary>
            Gets or Sets the child Client Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.WireId">
            <summary>
            Gets or Sets the Wire Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.PaymentAmounts">
            <summary>
            Gets or Sets the Payment Amounts
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreatedEvent.PaymentType">
            <summary>
            Gets or Sets the Payment Type
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreditTrackingCreatedEvent.CreditTrackingId">
            <summary>
            Gets or sets the credit tracking id.
            </summary>
            <value>
            The new status.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreditTrackingCreatedEvent.CreditId">
            <summary>
            Gets or sets the credit id.
            </summary>
            <value>
            The credit id.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreditTrackingCreatedEvent.PaymentId">
            <summary>
            Gets or sets the payment identifier.
            </summary>
            <value>
            The payment identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreditTrackingCreatedEvent.CreditAmount">
            <summary>
            Gets or sets the credit amount.
            </summary>
            <value>
            The new status.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreditTrackingCreatedEvent.ModifyBy">
            <summary>
            Gets or sets the modify by.
            </summary>
            <value>
            The payment identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreditTrackingCreatedEvent.PaymentVersion">
            <summary>
            Gets or sets the payment version.
            </summary>
            <value>
            The payment identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreditTrackingCreatedEvent.ModifyDate">
            <summary>
            Gets or sets the modify date.
            </summary>
            <value>
            The payment identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreditTrackingCreatedEvent.SessionId">
            <summary>
            Gets or sets the sessionId.
            </summary>
            <value>
            The payment identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreditTrackingCreatedEvent.CreditIdGuid">
            <summary>
            Gets or sets the CreditIdGuid.
            </summary>
            <value>
            The new status.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreditTrackingCreatedEvent.QeAdjPaymentRefundLiabilityIdRaw">
            <summary>
            Foreign key to a liability.
            Refers to the liability id associated with refund for a QEADJ positive payment that was used in a QE net out and was later voided.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCreditTrackingCreatedEvent.QeAdjPaymentRefundLiabilityId">
            <summary>
            Foreign key to a liability.
            Refers to the liability id associated with refund for a QEADJ positive payment that was used in a QE net out and was later voided.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyEvent.Hydrate(TaxHub.Models.Payment,TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyEventData)">
            <summary>
            Each payment legacy event type must be able to
            hydrate itself off the payment aggregate.
            </summary>
            <param name="payment">Payment aggregate</param>
            <param name="data">Container for all possible needed data for payment events</param>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentDueDateLegacyUpdatedEvent">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyCheckDateNextBusinessDayUpdatedEvent">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyEventDetailGenerator">
            <summary>
            Tax payment legacy event detail generator
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyEventDetailGenerator.Generate(System.String,TaxHub.Models.Payment,TaxHub.CoreServices.Acl.Legacy.Events.TaxPaymentLegacyEventData)">
            <summary>
            Using reflection, it will create an instance
            of a defined legacy event type and hydrate it with payment.
            </summary>
            <param name="eventTypeName">The event type.</param>
            <param name="payment">The payment aggregate.</param>
            <param name="data">Container for all possible needed data for payment events</param>
            <returns>Dynamic event details.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.TaxLiabilityStatusUpdatedCommand">
            <summary>
            Mapps event details to CashMgmtStatusUpdatedCommand
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.TaxLiabilityStatusUpdatedCommand.#ctor(System.Object)">
            <summary>
            Initialize liability status update command.
            </summary>
            <param name="eventData"> Data passsed with the event</param>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TaxLiabilityStatusUpdatedCommand.LiabilityStatus">
            <summary>
            The liability's new status.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TaxLiabilityStatusUpdatedCommand.PreviousLiabilityStatus">
            <summary>
            The liability's previous status.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TaxLiabilityStatusUpdatedCommand.LiabilityOriginType">
            <summary>
            The liablity's origin type.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.IPayrollInstanceServiceAdapter">
            <summary>
            Interface for pay service Api adapter.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayrollInstanceServiceAdapter">
            <summary>
            Payroll Instance service Api adapter implementation used to request payroll instance information from Smarthub.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayrollInstanceServiceAdapter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="httpClientFactory">The HttpClient factory.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayrollInstanceServiceAdapter.GetPayrollInstance(System.Guid,System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            This method requests information about a payroll instance.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="paygroup">The paygroup.</param>
            <param name="percontrol">The percontrol</param>
            <param name="correlationId">The correlationId.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Payroll Instance View</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayrollInstanceView">
            <summary>
            This class represents Payroll Instance information to mirror the model in SmartHub.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayrollInstanceView.Id">
            <summary>
            Gets or sets payroll instance id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayrollInstanceView.PayCount">
            <summary>
            Gets or sets the pay count.
            </summary>
            <value>
            The pay count.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayrollInstanceView.Status">
            <summary>
            Gets or sets the payroll instance status.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayrollInstanceStatus">
            <summary>
            This class represents the payroll instance statuses available in SmartHub.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.CompanyMapper">
            <summary>
            Mapper to map payment company update event data to company and client update commands
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.CompanyMapper.MapEventDetailsToCompanyUpdateCommand(TaxHub.Models.Events.CompanyUpdatedEvent)">
            <summary>
            Maps details received to company update command
            </summary>
            <param name="details"> Event details received</param>
            <returns>compant update command</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.CompanyMapper.MapEventDetailsClientUpdateCommand(TaxHub.Models.Events.CompanyUpdatedEvent)">
            <summary>
            Maps payment company update event details to client command
            </summary>
            <param name="details"> The event details</param>
            <returns> client update command</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.CompanyMapper.MapEventDetailsToCompanyCreateCommand(TaxHub.Models.Events.CompanyCreateEvent,System.Guid,System.Guid)">
            <summary>
            Maps Payment Company Created event details to Company
            </summary>
            <param name="companyCreateEventDetails"> Event Details</param>
            <param name="companyId"> Company Id</param>
            <param name="tenantId">Tenant Id</param>
            <returns> Company Command</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.CompanyMapper.BuildAddress(TaxHub.Models.Events.CompanyPostalAddress)">
            <summary>
            Builds the address.
            </summary>
            <param name="eventAddress">The event address.</param>
            <returns>The address.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand">
            <summary>
            Post data contract object for EeId.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.Src">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.Event">
            <summary>
            Gets or sets the event.
            </summary>
            <value>
            The event.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.Keys">
            <summary>
            Gets or sets the keys.
            </summary>
            <value>
            The keys.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>
            The date.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.Payload">
            <summary>
            Gets or sets the payload.
            </summary>
            <value>
            The payload.
            </value>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.DedPayload">
            <summary>
            Ded payload
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.DedPayload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.DedPayload"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.DedPayload.Operation">
            <summary>
            Gets or sets the operation.
            </summary>
            <value>
            The operation.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.DedPayload.EventTime">
            <summary>
            Gets or sets the event time.
            </summary>
            <value>
            The event time.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.DedPayload.EventId">
            <summary>
            Gets or sets the event identifier.
            </summary>
            <value>
            The event identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.DedPayload.Tenant">
            <summary>
            Gets or sets the tenant.
            </summary>
            <value>
            The tenant.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.DedPayload.ClientAccessKey">
            <summary>
            Gets or sets the client access key.
            </summary>
            <value>
            The client access key.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.DedPayload.Ids">
            <summary>
            Gets or sets the ids.
            </summary>
            <value>
            The ids.
            </value>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.Ids">
            <summary>
            Ids
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.Ids.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.Ids"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.Ids.EeId">
            <summary>
            Gets or sets the ee identifier.
            </summary>
            <value>
            The ee identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncEeIdCommand.Ids.CoId">
            <summary>
            Gets or sets the master company identifier.
            </summary>
            <value>
            The master company identifier.
            </value>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.Keys">
            <summary>
            client access key
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.Keys.ClientAccessKey">
            <summary>
            Gets or sets the client access key.
            </summary>
            <value>
            The client access key.
            </value>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand">
            <summary>
            Post data contract object for StateTaxReportingInfo.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.Src">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.Event">
            <summary>
            Gets or sets the event.
            </summary>
            <value>
            The event.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.Keys">
            <summary>
            Gets or sets the keys.
            </summary>
            <value>
            The keys.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>
            The date.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.Payload">
            <summary>
            Gets or sets the payload.
            </summary>
            <value>
            The payload.
            </value>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.DedPayload">
            <summary>
            Ded payload
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.DedPayload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.DedPayload"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.DedPayload.Operation">
            <summary>
            Gets or sets the operation.
            </summary>
            <value>
            The operation.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.DedPayload.EventTime">
            <summary>
            Gets or sets the event time.
            </summary>
            <value>
            The event time.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.DedPayload.EventId">
            <summary>
            Gets or sets the event identifier.
            </summary>
            <value>
            The event identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.DedPayload.Tenant">
            <summary>
            Gets or sets the tenant.
            </summary>
            <value>
            The tenant.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.DedPayload.ClientAccessKey">
            <summary>
            Gets or sets the client access key.
            </summary>
            <value>
            The client access key.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.DedPayload.Ids">
            <summary>
            Gets or sets the ids.
            </summary>
            <value>
            The ids.
            </value>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.Ids">
            <summary>
            Ids
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.Ids.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.Ids"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.Ids.Sequence">
            <summary>
            Gets or sets the sequence number identifier.
            </summary>
            <value>
            Sequence number identifier
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.Ids.State">
            <summary>
            Gets or sets the State code identifier.
            </summary>
            <value>
            State code identifier
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.DedResyncStateTaxReportingInfoCommand.Ids.CoId">
            <summary>
            Gets or sets the master company identifier.
            </summary>
            <value>
            The master company identifier.
            </value>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubUsgBankServiceAdapter">
            <summary>
            Smart Hub Bank Service Adapter
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubUsgBankServiceAdapter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory)">
            <summary>
            Constructor
            </summary>
            <param name="logger">logger</param>
            <param name="clientFactory">http client factory</param>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubUsgBankServiceAdapter.#ctor(TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor
            </summary>
            <param name="logger">logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubUsgBankServiceAdapter.GetBankInformationByBankId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.IHubUsgBankServiceAdapter">
            <summary>
            Servie for communicating with SmartHub.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubUsgBankServiceAdapter.GetBankInformation(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get A List of bank information
            </summary>
            <param name="correlationId">Correllation Id for logging</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>List of Usg Bank Information from the HUB</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubUsgBankServiceAdapter.GetBankAccountInformation(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get a list of the bank accounts for a bank from SmartHub
            </summary>
            <param name="bankId">Smart Hub Bank Account Id</param>
            <param name="correlationId">correlation id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>List of USG Bank account Information from the HUB</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubUsgBankServiceAdapter.GetBankInformationByBankId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get bank information by bank Id
            </summary>
            <param name="bankId">The bank id</param>
            <param name="correlationId">Correllation Id for logging</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>List of Usg Bank Information from the HUB</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubBankServiceAdapter">
            <summary>
            SmartHub Service Adapter for Company
            </summary>
            <seealso cref="T:TaxHub.Common.Runtime.SmartHubServiceClientBase" />
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubBankServiceAdapter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="httpClientFactory">The HttpClient factory.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubBankServiceAdapter.GetBanksbyTenantid(System.Guid,System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the companies for tenant.
            </summary>
            <param name="tenantId">The Tenant Id.</param>
            <param name="accountnumber">The Bank account number token.</param>
            <param name="routingnumber">The Bank routing number token.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The companies.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubBankServiceAdapter.PutBankInfoByTenantId(TaxHub.CoreServices.Acl.Payment.HubCustomerBankAccount,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Updates the Bank Info in SPS.
            </summary>
            <param name="hubCustomerBankAccount">hubBank model</param>
            <param name="correlationId">Correlation id</param>
            <param name="cancellationToken">cancellation Token</param>
            <returns>returns HubApi Completion Status</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubBankServiceAdapter.PutBankIdByTenantId(TaxHub.CoreServices.Acl.Payment.HubCompanyView,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Updates the Bank Info in SPS.
            </summary>
            <param name="hubCompanyView">hubBank model</param>
            <param name="correlationId">Correlation id</param>
            <param name="cancellationToken">cancellation Token</param>
            <returns>returns HubApi Completion Status</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubBankServiceAdapter.PostBankInfoByTenantId(TaxHub.CoreServices.Acl.Payment.HubCustomerBankAccount,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Inserts New bank info to SPS
            </summary>
            <param name="hubCustomerBankAccount">hubBank model</param>
            <param name="correlationId">Correlation id</param>
            <param name="cancellationToken">cancellation Token</param>
            <returns>returns HubApi Completion Status</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubBankServiceAdapter.PutBankIdByTenantId(System.Guid,System.Guid,System.Collections.Generic.List{TaxHub.CoreServices.Acl.Payment.PayrollUnitProductInfo},System.Guid,System.Threading.CancellationToken)">
            <summary>
            Inserts New payroll unit info to SPS
            </summary>
            <param name="tenantId">tenant Id</param>
            <param name="payrollUnitId">PayrollUnit Id</param>
            <param name = "productInfos"> Tax product info</param>
            <param name="correlationId">Correlation id</param>
            <param name="cancellationToken">cancellation Token</param>
            <returns>returns HubApi Completion Status</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase">
            <summary>
            This class holds the banking account information.
            </summary>   
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.BankAccountId">
            <summary>
            Gets or sets an internal bank account ID.
            </summary>        
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.TenantId">
            <summary>
            Gets or sets the tenant ID
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.AccountName">
            <summary>
            Gets or sets the account name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.AccountDescription">
            <summary>
            Gets or sets the account description.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.AccountType">
            <summary>
            Gets or sets the account type (Checking, Saving, etc.)
            </summary>        
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.Status">
            <summary>
            Gets or sets the account current status.
            </summary>        
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.MaskedAccountNumber">
            <summary>
            Gets or sets the masked bank account number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.BankName">
            <summary>
            Gets or sets the account description.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.SupportedPaymentMethods">
            <summary>
            Gets or sets the list of supported collection payment methods.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.PaymentMethodVerificationStatus">
            <summary>
            Gets or sets the list of payment methods verification status. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.EmployeePayDefaultMethod">
            <summary>
            Gets or sets the default payment method used for employee pay collections.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.TaxDefaultMethod">
            <summary>
            Gets or sets the default payment method used for tax collections.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.GarnishmentsDefaultMethod">
            <summary>
            Gets or sets the default payment method used for garnishments collections.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountBase.#ctor">
            <summary>
            Initialize banking account with empty values
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.BankAccountIdentification">
            <summary>
            Bankc accoint identification
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.BankAccountIdentification.AccountNumber">
            <summary>
            Gets or sets the bank account number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.BankAccountIdentification.RoutingNumber">
            <summary>
            Gets or sets the bank account routing number (TRA).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.BankAccountIdentification.AccountType">
            <summary>
            Gets or sets the account type (Checking, Saving, etc.)
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.BankAccountIdentification.#ctor">
            <summary>
            get bank account details
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.BankAccountIdentification.ToMaskedNumber">
            <summary>
            Provides masked account number for display purposes. 
            </summary>
            <returns>Returns string.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.BankAccountIdentification.ToMaskedRoutingNumber">
            <summary>
            Provides masked routing number for display purposes. 
            </summary>
            <returns>Returns string.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.BankAccountIdentification.MaskConfidentialInformation">
            <summary>
            masking account number
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubCustomerBankAccount">
            <summary>
            This class holds the banking account information.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCustomerBankAccount.BankAccount">
            <summary>
            Gets or sets the bank account number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCustomerBankAccount.RwOverrideAccount">
            <summary>
            Gets or sets the customer bank account that will be used if reverse wire is not supported.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCustomerBankAccount.FutureBank">
            <summary>
            Gets or sets future bank
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCustomerBankAccount.IsPayrollBank">
            <summary>
            Gets or sets future bank
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCustomerBankAccount.Payrollcode">
            <summary>
            Gets or sets the Payroll Code
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubCustomerBankAccount.#ctor">
            <summary>
            Initialize banking account with empty values
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PaymentMethodVerificationStatus">
            <summary>
            get the payment menthod status
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PaymentMethodVerificationStatus.#ctor">
            <summary>
            gets payment method info
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubBankViewResponse">
            <summary>
            Hub Bank View Response From Api
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubBankViewResponse.Id">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubBankViewResponse.Message">
            <summary>
            Return Message
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.BankAccountType">
            <summary>
            Enumeration describes the bank account type.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.BankAccountStatus">
            <summary>
            Enumeration describes the bank account status.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.VerificationStatus">
            <summary>
            status
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountIdentification">
            <summary>
            Customer Bank account
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountIdentification.AchRoutingNumber">
            <summary>
            Gets or sets the bank account routing number (TRA).
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.CustomerBankAccountIdentification.ToMaskedAchRoutingNumber">
            <summary>
            Provides masked ACH routing number for display purposes. 
            </summary>
            <returns>Returns string.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubCompanyView">
            <summary>
            The class represents company data.
            </summary>
            <remarks>
            The company object holds the SPS version of the company. Data required
            for integratiing with UltiPro (or another system) should be stored as part of
            the CompanyIntegrationData sub-object.
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.TenantId">
            <summary>
            Gets or sets the tenant id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.CompanyId">
            <summary>
            Gets or sets the company ID
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.Integration">
            <summary>
            Gets or sets data needed to integrate with other systems
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.Fein">
            <summary>
            Gets or sets the FEIN
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.FeinType">
            <summary>
            Gets or sets the FEIN type
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.FeinEffectiveUtcDate">
            <summary>
            Gets or sets the FEIN effective date
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.LegalName">
            <summary>
            Gets or sets the legal name
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.DbaName">
            <summary>
            Gets or sets the DBA name
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.Status">
            <summary>
            Gets or sets the company statuses.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.Type">
            <summary>
            Gets or sets the company type.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.IsLegalEntity">
            <summary>
            Gets or sets boolean indicator whether this company is a legal entity.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.CustomerBankAccountId">
            <summary>
            Gets or sets a designated CustomerBankAccountId for this company to use.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this property if possible. Instead use Company.GetDefaultCustomerBankAccount(productCode).
            </remarks>
            <value>
            The customer bank account identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.CustomerTaxBankAccountId">
            <summary>
            Gets or sets a designated CustomerTaxBankAccountId for this company to use.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this property if possible. Instead use Company.GetDefaultCustomerBankAccount(productCode).
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.DefaultPaymentMethod">
            <summary>
            Gets or sets the default payment method used to send money from the customer bank to the USG bank.
            </summary>
            <remarks>
            IMPORTANT: Avoid using this property except inside the !UseBankAcctPaymentMethod feature toggle.
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.ActiveUtcDate">
            <summary>
            Gets or sets the active effective date
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.ExcludeFromTaxReport">
            <summary>
            Indicates if the company should be excluded from the tax report
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.CountryCode">
            <summary>
            Gets or sets the country code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.SupportRepresentativeId">
            <summary>
            Gets or sets the support representative ID.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.PhysicalAddress">
            <summary>
            Gets or sets the physical address for the company.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.IsPhysicalAddressOverridden">
            <summary>
            Gets or sets a value indicating whether the postal address on this company has been
            overridden by a SmartHub user.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.IsMailingAddressOverridden">
            <summary>
            Gets or sets a value indicating whether the mailing address on this company has been
            overridden by a SmartHub user.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.IsContactOverridden">
            <summary>
            Gets or sets a value indicating whether the mailing address on this company has been
            overridden by a SmartHub user.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.MailingAddress">
            <summary>
            Gets or sets the mailing address for the company.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.Contact">
            <summary>
            Gets or sets the company contact.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.BackupContact">
            <summary>
            Gets or sets the backup contact.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.ActivationData">
            <summary>
            Gets or sets the activation data.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.Products">
            <summary>
            Gets or sets list of products the company is licensed to.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyView.HubCompanyProductInfos">
            <summary>
            Gets or sets the product information for each product.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubCompanyIntegrationData">
            <summary>
            The class represents Ultipro integration data used for loading company data to the HUB.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyIntegrationData.CoId">
            <summary>
            Component Company ID from UltiPro
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyIntegrationData.LegalEntityCoId">
            <summary>
            Legal Entity Component Company ID from UltiPro
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyIntegrationData.LegalEntityCompanyId">
            <summary>
            Legal Entity Company ID for the company that this company reports through.
            If this ID is empty, then the company itself must be a Legal Entity and its CompanyId should be used.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyIntegrationData.CompanyCode">
            <summary>
            Gets or sets the company code for this component company.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubCompanyStatusCode">
            <summary>
            Enumeration for the Company status.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.HubCompanyStatusCode.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.HubCompanyStatusCode.Active">
            <summary>
            The active
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.HubCompanyStatusCode.Inactive">
            <summary>
            The inactive
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.HubCompanyStatusCode.Pending">
            <summary>
            The pending
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubCompanyType">
            <summary>
            Enumeration for the Company types.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.HubCompanyType.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.HubCompanyType.Enterprise">
            <summary>
            The enterprise
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.HubCompanyType.Workplace">
            <summary>
            The workplace
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.HubCompanyType.Implementation">
            <summary>
            The implementation
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubCompanyContact">
            <summary>
            Hub Company Contact
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyContact.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyContact.Phone">
            <summary>
            Gets or sets the phone.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyContact.Fax">
            <summary>
            Gets or sets the fax.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyContact.Email">
            <summary>
            Gets or sets the email.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubCompanyActivationData">
            <summary>
            An object for storing information about the activation of this company.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyActivationData.ActivationReference">
            <summary>
            Gets or sets the activation reference, which is used to distinguish
            different activation attempts.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyActivationData.ActivationStatus">
            <summary>
            Gets or sets the activation status of this company.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyActivationData.ActivationStatusUpdateDateTime">
            <summary>
            Gets or sets the date/time of the last time the activation status was updated.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyActivationData.ActivationMessage">
            <summary>
            Gets or sets the message associated with the current status.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubCompanyActivationStatus">
            <summary>
            An enumeration to track the status of a company activation attempt.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubCompanyProductInfo">
            <summary>
            Hub Company ProductInfo
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyProductInfo.ProductCode">
            <summary>
            Product Code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyProductInfo.CustomerBankAccountId">
            <summary>
            Customer Bank AccountId
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubCompanyProductInfo.CollectionDraftDays">
            <summary>
            Collection DraftDays
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubCompanyProductInfo.CompanyProductInfo">
            <summary>
            Company ProductInfo
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubCompanyServiceAdapter">
            <summary>
            SmartHub Service Adapter for Company
            </summary>
            <seealso cref="T:TaxHub.Common.Runtime.SmartHubServiceClientBase" />
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubCompanyServiceAdapter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="httpClientFactory">The HttpClient factory.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubCompanyServiceAdapter.GetCompaniesForTenant(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the companies for tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The companies.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitView">
            <summary>
            Represents a Payroll Unit from SmartHub
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitView.PayrollId">
            <summary>
            Gets or sets the payroll unit's Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitView.TenantId">
            <summary>
            Gets or sets the tenant id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitView.LegalEntityCompanyId">
            <summary>
            Gets or sets the payroll unit's legal entity company Id for
            reference.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitView.TaxBankAccountId">
            <summary>
            Gets or sets the TaxBank AccountId.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitView.CustomerGarnishmentsBankAccountId">
            <summary>
            Gets or sets a designated CustomerGarnishmentsBankAccountId for the payroll unit.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitView.CustomerBankAccountId">
            <summary>
            Gets or sets a designated CustomerBankAccountId for the payroll unit.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitView.Name">
            <summary>
            Gets or sets the payroll unit's description.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitView.IntegrationData">
            <summary>
            Gets or sets the tenant's integration data
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitView.Schedule">
            <summary>
            Gets or sets the payroll schedule.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitView.Frequency">
            <summary>
            Gets or sets the payroll unit frequency.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitIntegrationData">
            <summary>
            Payroll Unit integration data from SmartHub
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitIntegrationData.PayrollCode">
            <summary>
            Gets or sets the payroll code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitIntegrationData.PayGroup">
            <summary>
            Gets or sets the paygroup.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitScheduleDate">
            <summary>
            Class for storing the payroll unit's upcoming schedule.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitScheduleDate.PayUtcDate">
            <summary>
            Gets or sets the pay date.
            </summary>
            <remarks>This field is directly mapped to the "Scheduled Pay Date: UltiPro.PgPayPer.PgpPayDate (datetime).</remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitScheduleDate.ScheduleType">
            <summary>
            Gets or sets the payroll unit schedule type.
            </summary>
            <remarks>This field is directly mapped to the "Pay Period Type": UltiPro.PgPayPer.PgpPeriodType (char(1)).</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayrollUnitProductInfo">
            <summary>
            Holds the Payroll Unit Product Information.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitServiceAdapter">
            <summary>
            Service adapter for SmartHub PayrollUnits
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitServiceAdapter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory)">
            <summary>
            Default Constructor
            </summary>
            <param name="logger">The logger.</param>
            <param name="httpClientFactory">The HTTP client factory.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitServiceAdapter.GetPayrollUnitsForTenant(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the PayrollUnits for tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The PayrollUnits.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubPayrollUnitServiceAdapter.GetPayrollUnitsForBanksByTenant(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the PayrollUnits for tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The Hubpayrollunit view.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubTenantBase">
            <summary>
            Class represents the SmartHub Tenant.
            </summary>
            <remarks>
            The tenant object holds the SPS version of the tenant. Data required
            for integratiing with UltiPro (or another system) should be stored as part of
            the TenantIntegrationData sub-object.
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBase.TenantId">
            <summary>
            Gets or sets the tenant's Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBase.Alias">
            <summary>
            Gets or sets tenant Alias.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBase.Name">
            <summary>
            Gets or sets the tenant name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBase.Description">
            <summary>
            Gets or sets the tenant description.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBase.IntegrationData">
            <summary>
            Gets or sets the tenant's integration data
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBase.PreferredLocale">
            <summary>i
            Gets or sets the tenant preferred locale (default is en-US).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBase.Products">
            <summary>
            Gets or sets list of products the tenant is licensed to.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBase.Status">
            <summary>
            Gets or sets the timing collection of tenant statuses.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBase.CreatedUtcDt">
            <summary>
            Gets or sets date and time when aggregate was created.
            could have got these from version tracker, but the serialization is different
            on our version tracker and SPS version tracker.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBase.UpdatedUtcDt">
            <summary>
            Gets or sets aggregate most recent update date and time.
            could have got these from version tracker, but the serialization is different
            on our version tracker and SPS version tracker.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBase.Version">
            <summary>
            Gets or sets current aggregate version (update sequence, not schema version).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBase.Type">
            <summary>
            Gets or sets tenant type
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubTenantBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubTenant">
            <summary>
            Class represents the SmartHub Tenant.
            </summary>
            <remarks>
            The tenant object holds the SPS version of the tenant. Data required
            for integratiing with UltiPro (or another system) should be stored as part of
            the TenantIntegrationData sub-object.
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenant.BankingInfo">
            <summary>
            Gets or sets the default banking information for the tenant.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenant.CheckPrint">
            <summary>
            Gets or sets the check print configuration for the tenant.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenant.ArNumber">
            <summary>
            Gets or sets the AR number for the tenant.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenant.MailingAddress">
            <summary>
            Gets or sets the mailing address for the company.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenant.IsMailingAddressOverridden">
            <summary>
            Gets or sets a value indicating whether this instance's mailing address
            has been manually overridden by a user.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenant.Contact">
            <summary>
            Gets or sets the tenant/customer contact.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenant.IsContactOverridden">
            <summary>
            Gets or sets a value indicating whether this instance's contact info
            has been manually overridden by a user.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenant.Activation">
            <summary>
            Gets or sets the tenant activation data.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenant.UccTenant">
            <summary>
            Gets or sets the UCC tenant provisioning data.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenant.MarketType">
            <summary>
            Gets or sets the market type of the tenant (i.e. Mid-Market, Enterprise, etc.)
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubTenant.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.TenantActivationData">
            <summary>
            Class represents the SmartHub Tenant activation data.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.ConnectivityTestReference">
            <summary>
            Gets or sets the reference used for tenant connectivity test.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.ConnectivityTestOutcome">
            <summary>
            Gets or sets the result of tenant connectivity test.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.ConnectivityTestUtcDateTime">
            <summary>
            Gets or sets the last tenant connectivity test date and time stamp.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.SyncReference">
            <summary>
            Gets or sets the reference used for tenant sync attempt.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.CompanyCount">
            <summary>
            Gets or sets the number of companies the tenant has.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.PayrollUnitCount">
            <summary>
            Gets or sets the number of payroll units our last sync should have gotten data from UltiPro (Note: We only pull data from UltiPro for active payroll units).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.TotalEmpCount">
            <summary>
            Gets or sets the number of employees the tenant has.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.PayGroupYearPayrollCount">
            <summary>
            Gets or sets the number of PayGroups having payroll runs in last year.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.PayGroupAvgPayrollSize">
            <summary>
            Gets or sets an average payroll size.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.PayGroupMaxPayrollSize">
            <summary>
            Gets or sets the max payroll size for the tenant.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.PayGroupAvgPayrollCheckSize">
            <summary>
            Gets or sets an average number of checks per payroll.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.PayGroupMaxPayrollCheckSize">
            <summary>
            Gets or sets the max number of checks per payroll.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.PayGroupAvgPayrollDdSize">
            <summary>
            Gets or sets an average number of DDAs per payroll.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.PayGroupMaxPayrollDdSize">
            <summary>
            Gets or sets the max number of DDAs per payroll.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.PayrollYearDaysCount">
            <summary>
            Gets or sets the number of days with payrolls per year.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.DailyAvgPayrollSize">
            <summary>
            Gets or sets the average daily payroll size.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.DailyMaxPayrollSize">
            <summary>
            Gets or sets the max daily payroll size.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.SyncTenantOutcome">
            <summary>
            Gets or sets the tenant synchronization data within activation process.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.SyncUtcDateTime">
            <summary>
            Gets or sets the last tenant sync attempt date and time stamp.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.SyncEmpGarnDataOutcome">
            <summary>
            SyncEmpGarnDataOutcome
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.SyncEmpGarnUtcDateTime">
            <summary>
            Date for SynEmpGarnDataOutcome
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.SyncEmpGarnReference">
            <summary>
            SyncEmpGarnReference
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.ActiveDayCount">
            <summary>
            Gets or sets the tenant active days count (at the UltiPro).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.ActivationStatus">
            <summary>
            Gets or sets the status of the last activation attempt.
            </summary>
            <value>
            The status of the last activation attempt.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.ActivationStatusUpdatedUtcDateTime">
            <summary>
            Gets or sets the last date/time this tenant's activation status was updated.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.ActivationStatusReference">
            <summary>
            Gets or sets the activation status reference.
            </summary>
            <value>
            The activation status reference.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.TenantActivationData.ActivationStatusMessage">
            <summary>
            Gets or sets the activation status message.
            </summary>
            <value>
            The activation status message.
            </value>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.TenantActivationData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubTenantIntegrationData">
            <summary>
            Integration data stored within a tenant
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantIntegrationData.ClientId">
            <summary>
            Gets or sets the tenant's client id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantIntegrationData.ClientAccessKey">
            <summary>
            Gets or sets the tenant's client access key (ultipro identifier).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantIntegrationData.SiteDbServerName">
            <summary>
            Gets or sets the site database server name
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantIntegrationData.DcEnvironmentName">
            <summary>
            Gets or sets the datacenter environment name
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantIntegrationData.DataSyncShardName">
            <summary>
            Gets or sets the DatSync shard identity that is responsible for processing the tenant data.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantIntegrationData.PodId">
            <summary>
            Gets or sets the Pod identity where the tenant is located.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantIntegrationData.MasterCompanyId">
            <summary>
            Gets or sets the Master Company identity for the tenant.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubTenantIntegrationData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData">
            <summary>
            Banking data stored within a tenant
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.UsgBankAccountId">
            <summary>
            Gets or sets the tenant's default collection USG bank account Id.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this field if possible. Instead use Tenant.GetUsgBankAccount(productCode).
            </remarks>
            <value>
            The usg bank account identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.UsgTaxCollectionBankAccountId">
            <summary>
            Gets or sets the tenant's default collection USG bank account Id.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this field if possible. Instead use Tenant.GetUsgBankAccount(productCode).
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.UsgGarnishmentsCollectionBankAccountId">
            <summary>
            Gets or sets the tenant's default garnishments collection USG bank account Id.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this field if possible. Instead use Tenant.GetUsgCollectionAccount(productCode).
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.UsgDdDisbursementBankAccountId">
            <summary>
            Gets or sets the tenant's direct deposit disbursement USG bank account Id.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this field if possible. Instead use Tenant.GetUsgDdDisbursementAccount(productCode).
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.UsgTaxEftDisbursementBankAccountId">
            <summary>
            Gets or sets the tenant's tax direct deposit disbursement USG bank account Id.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this field if possible. Instead use Tenant.GetUsgDdDisbursementAccount(productCode).
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.UsgGarnishmentsEftDisbursementBankAccountId">
            <summary>
            Gets or sets the tenant's garnishment direct deposit disbursement USG bank account Id.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this field if possible. Instead use Tenant.GetUsgDdDisbursementAccount(productCode).
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.UsgCheckDisbursementBankAccountId">
            <summary>
            Gets or sets the tenant's check disbursement USG bank account Id.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this field if possible. Instead use Tenant.GetUsgCheckDisbursementAccount(productCode).
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.UsgTaxCheckDisbursementBankAccountId">
            <summary>
            Gets or sets the tenant's tax check disbursement USG bank account Id.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this field if possible. Instead use Tenant.GetUsgCheckDisbursementAccount(productCode).
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.UsgGarnishmentsCheckDisbursementBankAccountId">
            <summary>
            Gets or sets the tenant's garnishments check disbursement USG bank account Id.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this field if possible. Instead use Tenant.GetUsgCheckDisbursementAccount(productCode).
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.CustomerBankAccountId">
            <summary>
            Gets or sets the tenant's default customer bank account Id.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this field if possible. Instead use Tenant.GetDefaultCustomerBankAccount(productCode).
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.CustomerTaxBankAccountId">
            <summary>
            Gets or sets the tenant's default customer tax bank account Id.
            This is the account that we collect tax funds from.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this field if possible. Instead use Tenant.GetDefaultCustomerBankAccount(productCode).
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.CustomerGarnishmentsBankAccountId">
            <summary>
            Gets or sets the tenant's default customer garnishment bank account Id.
            This is the account that we collect tax funds from.
            </summary>
            <remarks>
            IMPORTANT: Avoid directly accessing this field if possible. Instead use Tenant.GetDefaultCustomerBankAccount(productCode).
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.DefaultPaymentMethod">
            <summary>
            Gets or sets the default payment method used to send money from the customer bank to the USG bank for Employee Pay.
            </summary>
            <remarks>
            IMPORTANT: Avoid using this field, unless inside the !UseBackAcctPaymentMethod feature toggle.
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.NetPayDraftDays">
            <summary>
            Gets or sets the default value of the draft days for the Netpay product: must be between 0 and 5.
            This draft days determine the Collection Due Date based on the Pay Date.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubTenantBankingData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.CheckPrintConfiguration">
            <summary>
            Check print configuration parameters stored within a tenant
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CheckPrintConfiguration.MaskEeBankAccount">
            <summary>
            Gets or sets the MaskEEBankAcct parameter.
            </summary>
            <remarks>This parameter corresponds to the Ultipro PayDocSettings.MaskEEBankAcct field.</remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CheckPrintConfiguration.SortOrder">
            <summary>
            Gets or sets the SortOrder parameter.
            </summary>
            <remarks>This parameter corresponds to the Ultipro PayDocSettings.SortOrder field.</remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CheckPrintConfiguration.PrintPayDda">
            <summary>
            Gets or sets the boolean indicator whether system should create CheckPrint files for DDAs (Direct Deposit Advices).
            </summary>
            <remarks>This parameter corresponds to the Ultipro CompMast.CmmSuppressAllDDAs field.</remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CheckPrintConfiguration.CheckAppearance">
            <summary>
            Gets or sets the company name appearance on check.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CheckPrintConfiguration.AddressWindowOptions">
            <summary>
            Gets or sets the list of address window options.comp
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.CheckPrintConfiguration.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.CheckPrintConfiguration.Equals(TaxHub.CoreServices.Acl.Payment.CheckPrintConfiguration)">
            <summary>
            Assignement operator
            </summary>
            <param name="other"> Name </param>
            <returns> Boolean </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubTenantLookup">
            <summary>
            Tenant Lookup
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantLookup.TenantId">
            <summary>
            Gets or sets the tenant's Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantLookup.Alias">
            <summary>
            Gets or sets tenant Alias (UCC supplies).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantLookup.Name">
            <summary>
            Gets or sets the tenant name.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubTenantLookup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubProduct">
            <summary>
            Class represents the product that tenant can be licensed for.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubProduct.ProductCode">
            <summary>
            Gets or sets product code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubProduct.Status">
            <summary>
            Gets or sets product status.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubProduct.EffectiveUtcDateFrom">
            <summary>
            Gets or sets the effective date FROM of Status.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubProduct.EffectiveUtcDateTo">
            <summary>
            Gets or sets the effective date TO of Status.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubProduct.ActivationStatus">
            <summary>
            Gets or sets the activation status of this product.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubProduct.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.HubProduct"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubTenantStatusUpdateCommand">
            <summary>
            Class represents data used by integration components of the smart hub.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantStatusUpdateCommand.StatusCode">
            <summary>
            Gets or sets status value.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantStatusUpdateCommand.EffectiveUtcDateFrom">
            <summary>
            Gets or sets the effective date (from) of StatusCode.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubTenantStatusUpdateCommand.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubTenantStatus">
            <summary>
            Class represents data used by integration components of the smart hub.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubTenantStatus.EffectiveUtcDateTo">
            <summary>
            Gets or sets the effective date (to - default is maximum date) of StatusCode.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubTenantStatus.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PostalAddress">
            <summary>
            Address class
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PostalAddress.AddressLine1">
            <summary>
            Gets or sets the address line 1.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PostalAddress.AddressLine2">
            <summary>
            Gets or sets the address line 2.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PostalAddress.City">
            <summary>
            Gets or sets the city.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PostalAddress.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PostalAddress.ZipCode">
            <summary>
            Gets or sets the zip code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PostalAddress.Country">
            <summary>
            Gets or sets the country.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PostalAddress.#ctor">
            <summary>
            Default Constructer
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HateoasLink">
            <summary>
            Represents a URL link/position for a HATEOAS link.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HateoasLink.Href">
            <summary>
            Gets or sets the url of the link.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HateoasLink.Rel">
            <summary>
            Gets or sets the url relative position
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HateoasLink.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.UccTenant">
            <summary>
            Class represents the UCC model of a Tenant.
            </summary>
            <remarks>
            The UCC tenant object holds the SPS version of a UCC tenant. Data required
            for integratiing with UltiPro (or another system) should be stored as part of
            the UccTenantIntegrationData sub-object.
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenant.TenantId">
            <summary>
            UCC Tenant Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenant.Alias">
            <summary>
            Gets or sets tenant Alias (UCC supplies).
            This can be the AR_Number, or company code, clientid or combination of these items. It must be unique.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenant.Name">
            <summary>
            Gets or sets the tenant name, which is
            Customer or company name
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenant.PreferredLocale">
            <summary>
            Gets or sets the tenant preferred locale (default is en-US).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenant.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:TaxHub.CoreServices.Acl.Payment.UccTenant"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenant.ArNumber">
            <summary>
            Gets or sets the AR number, which is
            the customer specific code associated to accounts receivable. This is exclusive to SPS.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenant.ClientId">
            <summary>
            Gets or sets the company identifier, which is
            the clientid or company code that comes from the ultipro company database
            and is associated to a ultipro company installation. This is an SPS exclusive field.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenant.MasterCompanyId">
            <summary>
            Gets or sets the co identifier, which is
            the master coid for the ultipro company database. This is in the compmast table in ultipro. This is exclusive to SPS.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenant.ClientAccessKey">
            <summary>
            Gets or sets the client access key associated to the customer.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenant.Links">
            <summary>
            Gets or sets the HATEOAS links.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenant.IntegrationData">
            <summary>
            Gets or sets the tenant's integration data
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.UccTenant.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.UccTenantIntegrationData">
            <summary>
            Integration data stored within a tenant
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.UccTenantIntegrationData.UltiProIntegrationSettings">
            <summary>
            UltiPro integration data.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenantIntegrationData.UltiProIntegrationSettings.SiteDbServerName">
            <summary>
            Gets or sets the site database server name
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenantIntegrationData.UltiProIntegrationSettings.DcEnvironmentName">
            <summary>
            Gets or sets the datacenter environment name
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenantIntegrationData.UltiProIntegrationSettings.PodId">
            <summary>
            Gets or sets the Pod identity where the tenant is located.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenantIntegrationData.UltiProIntegrationSettings.MarketType">
            <summary>
            Gets or sets the market type.
            </summary>
            <value>
            The type of the market.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenantIntegrationData.UltiProIntegrationSettings.Products">
            <summary>
            Gets or sets the status of the products.
            </summary>
            <value>
            The products.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenantIntegrationData.UltiProIntegrationSettings.IsActive">
            <summary>
            Indicates customer has successfully completed activation process.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.UccTenantIntegrationData.UltiProIntegrationSettings.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenantIntegrationData.UltiPro">
            <summary>
            Gets or sets the UltiPro integration data.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.UccTenantIntegrationData.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.UccTenantProducts">
            <summary>
            Ucc Products class
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenantProducts.EmployeePayEnabled">
            <summary>
            Gets or sets the boolean indicator whether employee pay product is enabled.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenantProducts.TaxFilingEnabled">
            <summary>
            Gets or sets the boolean indicator whether tax filing product is enabled.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UccTenantProducts.WageAttachmentEnabled">
            <summary>
            Gets or sets the boolean indicator whether wage attachment is enabled.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.CompanyNameCheckAppearance">
            <summary>
            The choice of company name appearance in files.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.CheckAddressWindowOptions">
            <summary>
            The check Address Window Options.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.TenantStatusCode">
            <summary>
            Enum for tenant status
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.ProductActivationStatus">
            <summary>
            An enum for tracking the activation status of a product.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountBase">
            <summary>
            This class holds the USG banking account information.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountBase.BankAccountId">
            <summary>
            Gets or sets an internal bank account ID.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountBase.AccountName">
            <summary>
            Gets or sets the account name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountBase.AccountPurpose">
            <summary>
            Gets or sets the account purpose.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountBase.CustomerNote">
            <summary>
            Gets or sets the Customer Note field (this is seen on the UI as USG Bank ID).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountBase.Status">
            <summary>
            Gets or sets the account current status.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountBase.MaskedAccountNumber">
            <summary>
            Gets or sets the masked bank account number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountBase.IsDefault">
            <summary>
            Gets or sets a boolean indicator whether this is a default account.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountBase.DefaultLock">
            <summary>
            DefaultLock is used as a unique index (with purpose) in order to force that there is only one default account per purpose.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountBase.BankId">
            <summary>
            Gets or sets the bank Id.
            </summary>
            <remarks>This data is coming from the Bank level.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountBase.#ctor">
            <summary>
            Initialize banking account with empty values
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccount">
            <summary>
            This class holds the USG banking account information.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccount.StatusUpdatedUtcDt">
            <summary>
            Gets or sets the date-time stamp when account status was updated.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccount.BankAccount">
            <summary>
            Gets or sets the bank account number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccount.RoutingNumberFraction">
            <summary>
            Gets or sets the Routing Number Fraction (also known as ABA Fraction) for check printing.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccount.BankUsgId">
            <summary>
            Gets or sets the USG ID at the bank. It is used for Positive Pay files.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccount.AchCoId">
            <summary>
            Gets or sets the ACH Company ID. This is required when the account purpose is Tax Collections
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccount.NachaImmediateOrigin">
            <summary>
            Gets or sets the NACHA Immediate Origin. This "File ID" number will be provided during the implementation process.
            </summary>
            <remarks>This will be used for NACHA and ACH Refunds files.</remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccount.Bai2SenderId">
            <summary>
            Gets or sets the BAI2 file Sender Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccount.Bai2ReceiverId">
            <summary>
            Gets or sets the BAI2 file Receiver Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccount.Bai2OriginatorId">
            <summary>
            Gets or sets the BAI2 file Originator Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccount.Bank">
            <summary>
            Gets or sets the USG Bank information used by the account.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccount.#ctor">
            <summary>
            Initialize banking account with empty values.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountInfo">
            <summary>
            This class holds a subset of the USG banking account information.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountInfo.BankAccountId">
            <summary>
            Gets or sets an internal bank account ID.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountInfo.AccountName">
            <summary>
            Gets or sets the account name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountInfo.AccountPurpose">
            <summary>
            Gets or sets the account purpose.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubUsgBankAccountInfo.#ctor">
            <summary>
            Usg Bank Account Info
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubUsgBankCheckCashingInstruction">
            <summary>
            This class holds the USG banking account check cashing instruction information.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankCheckCashingInstruction.Message">
            <summary>
            Check Caching Insructions Message
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubUsgBankCheckCashingInstruction.#ctor">
            <summary>
            Initialize banking account with empty values
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubUsgBankInfo">
            <summary>
            This class holds the USG bank information used by bank account.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankInfo.BankName">
            <summary>
            Gets or sets the account description.
            </summary>
            <remarks>This data is coming from the Bank level.</remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankInfo.Address">
            <summary>
            Gets or sets the bank postal address.
            </summary>
            <remarks>This data is coming from the Bank level.</remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankInfo.CashingInstructions">
            <summary>
            Gets or sets the list of check instructions.
            </summary>
            <remarks>This data is coming from the Bank level.</remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankInfo.BankVersionStamp">
            <summary>
            Gets or sets version stamp from the USG bank that caused the update to the bank info.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubUsgBankInfo.#ctor">
            <summary>
            Initialize banking account with empty values
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.BankAccountPurpose">
            <summary>
            Enumeration describes the bank account purpose.
            TODO if you update this here update it in boki too.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankAccountPurpose.Unknown">
            <summary>
            Unknown purpose
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankAccountPurpose.CheckDisbursement">
            <summary>
            Disbursement - Check
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankAccountPurpose.Collection">
            <summary>
            Collection
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankAccountPurpose.Concentration">
            <summary>
            Concentration
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankAccountPurpose.DdaDisbursement">
            <summary>
            Disbursement - Direct Deposit
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankAccountPurpose.GarnishmentCollection">
            <summary>
            Garnishement Collection
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankAccountPurpose.GarnishmentCheckDisbursement">
            <summary>
            Garnishment Disbursement - Check
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankAccountPurpose.GarnishmentEftDisbursement">
            <summary>
            Garnishment Disbursement - EFT
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankAccountPurpose.TaxCollection">
            <summary>
            Tax Collection
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankAccountPurpose.TaxCheckDisbursement">
            <summary>
            Tax Disbursement - Check
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankAccountPurpose.TaxEftDisbursement">
            <summary>
            Tax Disbursement -EFT
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.IHubBankServiceAdapter">
            <summary>
            SmartHub Service Adapter for Company
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubBankServiceAdapter.GetBanksbyTenantid(System.Guid,System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the companies for tenant.
            </summary>
            <param name="tenantId">Tenant Id</param>
            <param name="accountnumber">Tenant Id</param>
            <param name="routingnumebr">Tenant Id</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The companies.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubBankServiceAdapter.PutBankInfoByTenantId(TaxHub.CoreServices.Acl.Payment.HubCustomerBankAccount,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Updates the Bank Info in SPS.
            </summary>
            <param name="hubCustomerBankAccount">hubBank model</param>
            <param name="correlationId">Correlation id</param>
            <param name="cancellationToken">cancellation Token</param>
            <returns>returns HubApi Completion Status</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubBankServiceAdapter.PostBankInfoByTenantId(TaxHub.CoreServices.Acl.Payment.HubCustomerBankAccount,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Inserts New bank info to SPS
            </summary>
            <param name="hubCustomerBankAccount">hubBank model</param>
            <param name="correlationId">Correlation id</param>
            <param name="cancellationToken">cancellation Token</param>
            <returns>returns HubApi Completion Status</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubBankServiceAdapter.PutBankIdByTenantId(TaxHub.CoreServices.Acl.Payment.HubCompanyView,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Inserts New bank Id to SPS
            </summary>
            <param name="hubCompanyView">hubBank model</param>
            <param name="correlationId">Correlation id</param>
            <param name="cancellationToken">cancellation Token</param>
            <returns>returns HubApi Completion Status</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubBankServiceAdapter.PutBankIdByTenantId(System.Guid,System.Guid,System.Collections.Generic.List{TaxHub.CoreServices.Acl.Payment.PayrollUnitProductInfo},System.Guid,System.Threading.CancellationToken)">
            <summary>
            Inserts New payroll unit info to SPS
            </summary>
            <param name="tenantId">tenant Id</param>
            <param name="payrollUnitId">PayrollUnit Id</param>
            <param name = "productInfos"> The Tax Product Info</param>
            <param name="correlationId">Correlation id</param>
            <param name="cancellationToken">cancellation Token</param>
            <returns>returns HubApi Completion Status</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.IHubCompanyServiceAdapter">
            <summary>
            SmartHub Service Adapter for Company
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubCompanyServiceAdapter.GetCompaniesForTenant(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the companies for tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The companies.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubCompanyServiceAdapter.GetCompanyByIdAsIs(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the company By company Id.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="companyId">The company Id</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The Hub Company company.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubCompanyServiceAdapter.PutCompany(System.Guid,TaxHub.CoreServices.Acl.Payment.HubCompanyView,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Updates product status in SPS
            </summary>
            <param name="tenantId"> The tenant Id </param>
            <param name="hubCompany"> Hub company model to update</param>
            <param name="correlationId"> The correllation </param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Update result</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.IHubPayrollUnitServiceAdapter">
            <summary>
            SmartHub Service Adapter for PayrollUnit
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubPayrollUnitServiceAdapter.GetPayrollUnitsForTenant(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the PayrollUnits for tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The PayrollUnits.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubPayrollUnitServiceAdapter.GetPayrollUnit(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the payroll unit.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payrollUnitId">The payroll unit identifier.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The payroll unit.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubPayrollUnitServiceAdapter.GetPayrollUnitsForBanksByTenant(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the PayrollUnits for tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The Hubpayrollunit view.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.ILiabilityMapper">
            <summary>
            Interface used for mapping PayView to PayTaxMetaData
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.ILiabilityMapper.MapTo(TaxHub.Models.Liability,System.DateTime,System.Int32)">
            <summary>
            Map from liability to a liability creation command.
            </summary>
            <param name="liability">The liability object.</param>
            <param name="irsPaymentDueDate">The irs payment due date.</param>
            <param name="integritySequenceNumber">The sequenceNumber of Liability Integrity Data</param>
            <returns>
            The liability creation command.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.ILiabilityServiceAdapter">
            <summary>
            Interface for liability service Api adapter.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.ILiabilityServiceAdapter.CreateLiability(TaxHub.Models.Liability,System.DateTime,System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Create a Liability in the HUB.
            </summary>
            <param name="liability">The Liability to create.</param>
            <param name="irsPaymentDueDate">The irs payment due date.</param>
            <param name="taxInstanceId">The numeric Id of Periodic or Input Tax Instance</param>
            <param name="correlationId">The correlation Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A creation result that represents whether the Liability was successfully created.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.ILiabilityServiceAdapter.UpdateLiabilityDueDate(TaxHub.CoreServices.Acl.Payment.CollectionDueDateUpdateCommand,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Sends "Due Date change event" to smarthub for a liability
            </summary>
            <param name="updateCommand">liabilitiId</param>
            <param name="corrId">?</param>
            <param name="cancellationToken">?</param>
            <returns>nothing</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.ILiabilityServiceAdapter.RefundPayment(System.Guid,System.Guid,TaxHub.CoreServices.Acl.Payment.RefundLiabilityCommand,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Refunds a Payment in SmartHub
            </summary>
            <param name="tenantId">Tenant Id</param>
            <param name="liabilityId">Liability Id</param>
            <param name="refundLiabilityCommand">(Credit/Void)_Payment Id and Amount</param>
            <param name="corrId">Correlation Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>The Negative Liablitiy Id created</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.IPayServiceAdapter">
            <summary>
            Interface for pay service Api adapter.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IPayServiceAdapter.GetPay(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the pay.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payId">The pay identifier.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> The pay.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IPayServiceAdapter.GetPays(System.Guid,System.Guid,System.Guid,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Pays By TenantId and  Payroll Instance Id
            </summary>
            <param name="tenantId">The tenant Id.</param>
            <param name="payrollInstanceId">The payroll instance Id.</param>
            <param name="correlationId">The correlation Id.</param>
            <param name="page">The page.</param>
            <param name="perPage">The page size.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of Pay's</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.IPayMapper">
            <summary>
            Interface used for mapping PayView to TaxItem
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IPayMapper.MapTo(TaxHub.CoreServices.Acl.Payment.PayView,System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Map from Pay dynamic object to a supplementalPay.
            </summary>
            <param name="pay">The Pay object.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="isPayroll">Determines whether the pay is part of a standard payroll (true) or not (false).</param>
            <param name="isProcessingOrCompleted">Specifies whether the periodic tax processing is currently in aggregating or completed status.</param>
            <returns>A SupplementalTaxPay used for mapping.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IPayMapper.MapTo(TaxHub.CoreServices.Acl.Payment.PayView)">
            <summary>
            Maps to.
            </summary>
            <param name="pay">The pay.</param>
            <returns>The mapped EmployeeInfo</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.IHubTenantServiceAdapter">
            <summary>
            Get the tenant by tenant id
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubTenantServiceAdapter.GetHubTenant(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the tenant By Id
            </summary>
            <param name="correlationId"> Correlation Id</param>
            <param name="tenantId"> The tenant Id</param>
            <param name="token"> Cancellation Token</param>
            <returns>Tenant</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubTenantServiceAdapter.GetHubTenantByTenantId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets hub tenant
            </summary>
            <param name="correlationId"> The correlationId</param>
            <param name="tenantId">The tenant Id</param>
            <param name="token"> Cancellation token</param>
            <returns>Hub model of tenant</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubTenantServiceAdapter.GetHubTenantAsIs(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the tenant By Id
            </summary>
            <param name="correlationId"> Correlation Id</param>
            <param name="tenantId"> The tenant Id</param>
            <param name="token"> Cancellation Token</param>
            <returns>Tenant</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubTenantServiceAdapter.GetHubTenantsAll(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets all tenants
            </summary>
            <param name="correlationId"> Correlation Id</param>
            <param name="token"> Cancellation Token</param>
            <returns>Tenant</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubTenantServiceAdapter.GetTenantId(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the tenant id by AR Number
            </summary>
            <param name="correlationId"> Correlation Id</param>
            <param name="arNumber"> The tenant AR Number</param>
            <param name="token"> Cancellation Token</param>
            <returns>Tenant Guid</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IHubTenantServiceAdapter.PutHubTenant(System.Guid,TaxHub.CoreServices.Acl.Payment.HubTenant,System.Threading.CancellationToken)">
            <summary>
            Gets the tenant By Id
            </summary>
            <param name="correlationId"> Correlation Id</param>
            <param name="tenant"> Hub Tenant</param>
            <param name="token"> Cancellation Token</param>
            <returns>Tenant</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.IUsgBankAccountCommandMapper">
            <summary>
            Maps the Payment Services Bank Account commands to a
            Preparer or PreparerCheck update commands
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IUsgBankAccountCommandMapper.MapToPreparerCheckTaxEftAccountCommand(TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand)">
            <summary>
            Maps from Payment Services USG Bank Account Observed command
            to Preparer Check Eft Update Command
            </summary>
            <param name="bankAccountObservedCommand">The USG Bank Account Observed Command</param>
            <returns>The Preparer Check Update Command</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IUsgBankAccountCommandMapper.MapToPreparerTaxEftAccountCommand(TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand)">
            <summary>
            Map from Payment Services Usg Bank Account Observed command to Prepare Update Command
            </summary>
            <param name="bankAccountObservedCommand">The USG Bank Account Observed Command</param>
            <returns>The Preparer Update Command</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IUsgBankAccountCommandMapper.MapToPreparerCheckTaxCheckAccountCommand(TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand)">
            <summary>
            Maps from Payment Services USG Bank Account Observed command
            to Preparer Check Tax Check Update Command
            </summary>
            <param name="bankAccountObservedCommand">The USG Bank Account Observed Command</param>
            <returns>The Preparer Check Update Command</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IUsgBankAccountCommandMapper.MapToPreparerCheckTaxEftAccountCommand(TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand)">
            <summary>
            Map from the Payment Services USG Bank Account Update Command
            </summary>
            <param name="bankAccountUpdateCommand">The USG Bank Account Update Command</param>
            <returns>The Preparer Check Update Command</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IUsgBankAccountCommandMapper.MapToPreparerTaxEftAccountCommand(TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand)">
            <summary>
            Map from the Payment Services USG Bank Account Update Command
            </summary>
            <param name="bankAccountUpdateCommand">The USG Bank Account Update Command</param>
            <returns>The Preparer Check Update Command</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.IUsgBankAccountCommandMapper.MapToPreparerCheckTaxCheckAccountCommand(TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand)">
            <summary>
            Maps from Payment Services USG Bank Account Update command
            to Preparer Check Tax Check Update Command
            </summary>
            <param name="bankAccountUpdateCommand">The USG Bank Update Command</param>
            <returns>The Preparer Check Update Command</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.LiabilityCreationCommand">
            <summary>
            Object used to pass to SmartHub to create a liability
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityCreationCommand.TenantId">
            <summary>
            Gets or sets the Liability ID.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityCreationCommand.PayrollId">
            <summary>
            Gets or sets the payroll ID.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityCreationCommand.TotalAmount">
            <summary>
            Gets or sets the total amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityCreationCommand.PayUtcDate">
            <summary>
            Gets or sets the check date.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityCreationCommand.LegalEntityCompanyId">
            <summary>
            Gets or sets the Legal Entity company Id that liability belongs to.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityCreationCommand.Type">
            <summary>
            Gets or sets liability type
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityCreationCommand.Integration">
            <summary>
            Gets or sets liability external systems integration parameters.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityCreationCommand.PaymentDeliveryUtcDate">
            <summary>
            Gets or sets the payment delivery UTC date.
            </summary>
            <value>
            The date that the liability's payment must be paid by.
            </value>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.LiabilityCreationCommand.#ctor">
            <summary>
            Initialize Liability with empty fields.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityIntegrationData.RunNumber">
            <summary>
            Gets or sets the run number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityIntegrationData.SequenceId">
            <summary>
            Gets or sets the sequence identifier.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.LiabilityIntegrationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.LiabilityIntegrationData"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.LiabilityType">
            <summary>
            The types of liabilities as dictated by SmartHub
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.Unknown">
            <summary>
            Unknown Type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.Adjustment">
            <summary>
            Adjustment Type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.CancellationRefund">
            <summary>
            CancellationRefund Type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.DeletedRefund">
            <summary>
            DeleteRefund Type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.NotPayableRefund">
            <summary>
            Refund Type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.ReversedRefund">
            <summary>
            Refund Type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.TaxRefund">
            <summary>
            Refund Type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.Refund">
            <summary>
            Refund Type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.Recollect">
            <summary>
            Re-collect Type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.Liability">
            <summary>
            Liability Type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.Tax">
            <summary>
            Tax Type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.TaxPenaltyInterest">
            <summary>
            Tax Penalty Interest
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.LiabilityType.Variance">
            <summary>
            Variance Type
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.CollectionDueDateUpdateCommand">
            <summary>
            Object used to pass the new Due Date of a liability
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CollectionDueDateUpdateCommand.TenantId">
            <summary>
            Gets or sets the Tenant ID.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CollectionDueDateUpdateCommand.DueDate">
            <summary>
            Gets or sets the Due Date.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CollectionDueDateUpdateCommand.LiabilityId">
            <summary>
            Gets or sets the Liability ID.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CollectionDueDateUpdateCommand.PaymentId">
            <summary>
            Gets or sets the Payment Id.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.LiabilityMapper">
            <summary>
            Tax item mapper implementation.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.LiabilityServiceAdapter">
            <summary>
            Pay service Api adapter implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.LiabilityServiceAdapter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory,TaxHub.CoreServices.Acl.Payment.ILiabilityMapper)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="httpClientFactory">The HttpClient factory.</param>
            <param name="mapper">The aggregate mapper.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.LiabilityStatusUpdatedCommand">
            <summary>
            Object used to contain the data relevant to a liability status update.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.LiabilityStatusUpdatedCommand.#ctor(System.Object)">
            <summary>
            Initialize liability status update command.
            </summary>
            <param name="eventData">The event name.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityStatusUpdatedCommand.Status">
            <summary>
            The liability's new status.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityStatusUpdatedCommand.UpdatedStatus">
            <summary>
            The liability's previous status.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.CashMgmtLiabilityStatus">
            <summary>
            The Liability Status from SSP.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.LiabilityStatusMapper">
            <summary>
            Converts Cash Management Liability Status (SPS Liab status) into UTE Liability Status
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.LiabilityStatusMapper.ToLiabilityStatus(TaxHub.CoreServices.Acl.Payment.CashMgmtLiabilityStatus)">
            <summary>
            Convert SPS Liability Status into UTE Liability Status
            (in jira ULTI-299038, we only need a shadow copy, new UTE Statuses will be introduce later)
            if in SPS a new status is introduced, UTE Liability status will be unknown 
            TODO remove this comment after new UTE status
            </summary>
            <param name="cashMgmtLiabilityStatus">Cash Management Liability Status (SPS Liab status)</param>
            <returns>UTE Liability Status</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.LiabilityView">
            <summary>
            Object used to deserialize Liability from SmartHub 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityView.LiabilityId">
            <summary>
            Gets or sets liability id.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.LiabilityView.#ctor">
            <summary>
            Initialize Liability with empty fields.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayView">
            <summary>
            The class represents the Pay data behavior.
            </summary>
            <summary>
            The class represents the Pay data.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayView.IsCurrentQuarterAdjustment">
            <summary>
            Determines whether the pay is a current quarter adjustment
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayView.IsPayroll">
            <summary>
            Determines whether the pay is part of a standard payroll.
            </summary>
            <value>
                <c>true</c> if the pay is part of a standard payroll; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayView.HasTaxes">
            <summary>
            Determines if a pay has tax items.
            </summary>
            <value>True if it contains tax items, otherwise false</value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayView.IsIgnorable">
            <summary>
            Determines if a pay should be ignored if the payroll has already been closed. (PeriodicTaxProcessing is in status Aggregating, Completed or CompletedWithoutAggregation).
            </summary>
            <value>True if pay should be ignored, otherwise false</value>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayView.PayUtcDate">
            <summary>
            Gets or sets the PayUtcDate.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayView.Earnings">
            <summary>
            Gets or sets the collection of pay earnings.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayView.EarningHistory">
            <summary>
            Gets or sets the collection of pay earnings.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayView.Taxes">
            <summary>
            Gets or sets the collection of pay taxes.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayView.WorkHistory">
            <summary>
            Gets or sets the collection of work history entries.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayView.Employee">
            <summary>
            Gets or sets the employee info.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayView.Integration">
            <summary>
            Gets or sets the UltiPro (or another 3rd party system) integration data.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayView.TaxMetadata">
            <summary>
            Gets or sets the metadata for taxes.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayView"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayBase">
            <summary>
            The class represents basic set of Pay data.
            </summary>
            <remarks>
            The pay object serves as a mapping of UltiPro pay data into the hub. Most
            properties on the object mad directly to data from UltiPro.
            In general, SPS specific data should be stored in the pay integration data.
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.Id">
            <summary>
            Gets or sets pay Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.TenantId">
            <summary>
            Gets or sets the tenant Id that pay belongs to.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.IsVoided">
            <summary>
            Gets or sets boolean indicator whether or not the pay is Voided.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.IsVoidingRecord">
            <summary>
            Gets or sets boolean indicator whether or not the pay is VoidingRecord.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.VoidUtcDateTime">
            <summary>
            Gets or sets the date and time when pay was voided, if applicable.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.TaxGroupUtcDateQuarterReset">
            <summary>
            Gets or sets the date when the taxgroup quarter reset.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.TaxGroupUtcDateYearReset">
            <summary>
            Gets or sets the date when the taxgroup year reset.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.IsPostOnly">
            <summary>
            Gets or sets a boolean indicator whether this is post-only pay.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.IsPrePrinted">
            <summary>
            Gets or sets whether pay was pre-printed.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.IsPrinted">
            <summary>
            Gets or sets whether pay was already printed.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.PrintUtcDateTime">
            <summary>
            Gets or sets print date and time (in UTC), if applicable.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.CheckNumber">
            <summary>
            Gets or sets the Check Number, if applicable.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.TotalEarnings">
            <summary>
            Gets or sets the total earnings amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.TotalDeductions">
            <summary>
            Gets or sets the total deductions amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.TotalTaxes">
            <summary>
            Gets or sets the total tax amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.NetAmount">
            <summary>
            Gets or sets the pay net amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.DdAmount">
            <summary>
            Gets or sets the total direct deposits amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.CheckAmount">
            <summary>
            Gets or sets the total check amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.CheckIsRefunded">
            <summary>
            Gets or sets the boolean indicator whether the check has been refunded.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.TotalHours">
            <summary>
            Gets or sets the total hours for the pay.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.TotalShiftAmount">
            <summary>
            Gets or sets the total shift amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.Company">
            <summary>
            Gets or sets the employee pay company information.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.Processing">
            <summary>
            Gets or sets the pay processing details.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.PayRate">
            <summary>
            Gets or sets the pay rate.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.TransactionType">
            <summary>
            Gets or sets the Pay transaction type.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.CheckAddMode">
            <summary>
            Gets or sets the check add mode.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayBase.IsPeriodClosed">
            <summary>
            Gets or sets if period is closed.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayBase"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayIntegrationDataInfo">
            <summary>
            The pay integration data info.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayIntegrationDataInfo.PayGroup">
            <summary>
            Gets or sets the UltiPro PayGroup for the pay.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayIntegrationDataInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayIntegrationDataInfo"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo">
            <summary>
            The class represents data related to the Pay aggregate processing flow.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo.Status">
            <summary>
            Gets or sets the pay processing status.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo.StatusUtcDateTime">
            <summary>
            Gets or sets the last pay processing status updated date and time (in UTC).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo.CheckStatus">
            <summary>
            Gets or sets the check status.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo.CheckStatusVersion">
            <summary>
            Gets or sets the check status version - used for technical purposes.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo.ExceptionType">
            <summary>
            Gets or sets the pay processing exception type.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo.PayrollId">
            <summary>
            Gets or sets the Payroll ID that pay is assigned to.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo.PayrollInstanceId">
            <summary>
            Gets or sets the Payroll Instance ID that pay is assigned to.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo.NetPayLiabilityId">
            <summary>
            Gets or sets the Liability ID used for NetPay that pay is assigned to.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo.Refunds">
            <summary>
            Gets or sets the collection of refunds for the pay.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo.CannotPay">
            <summary>
            Gets or sets the boolean indicator whether or not the system cannot pay this check instance. Refer to business rules for conditions.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayProcessingInfo"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayProcessingRefundInfo">
            <summary>
            The class represents data related to the Pay Processing Refunds.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingRefundInfo.Portion">
            <summary>
            Gets or sets the portion of the pay 
            to which this refund is associated.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingRefundInfo.RefundType">
            <summary>
            Gets or sets the type of refund that this is.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingRefundInfo.ItemId">
            <summary>
            This is either the direct depoist item number or the check number depending on the type.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingRefundInfo.LiabilityId">
            <summary>
            Gets or sets the identifier for the refund liability that this refund was assigned to.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingRefundInfo.UsgBankAccountId">
            <summary>
            Gets or sets the USG bank account Id used for refund.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingRefundInfo.RefundUtcDateTime">
            <summary>
            Gets or sets the date and time (in UTC) when refund is issued.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingRefundInfo.EffectiveUtcDateTime">
            <summary>
            Gets or sets the date and time (in UTC) when refund becomes effective.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingRefundInfo.Amount">
            <summary>
            Gets or sets the refund amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayProcessingRefundInfo.IsUndone">
            <summary>
            Gets or sets a boolean indicator of whether or not the refund was undone.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayProcessingRefundInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayProcessingRefundInfo"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.RefundPortion">
            <summary>
            The refund portion.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.RefundPortion.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.RefundPortion.Check">
            <summary>
            The check
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.RefundPortion.DirectDeposit">
            <summary>
            The direct deposit.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.RefundType">
            <summary>
            The refund type.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.RefundType.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.RefundType.Cancel">
            <summary>
            The cancel
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.RefundType.CancelAfterPaid">
            <summary>
            The cancel after paid
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.RefundType.Delete">
            <summary>
            The delete
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.RefundType.NotPayable">
            <summary>
            The not payable
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.RefundType.Reject">
            <summary>
            The reject
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.RefundType.Return">
            <summary>
            The return
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.RefundType.Reverse">
            <summary>
            The reverse
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.RefundType.Recollect">
            <summary>
            The recollect
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayStatus">
            <summary>
            Enumeration for the Pay Aggregate status.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.PayStatus.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.PayStatus.Created">
            <summary>
            New pay created in the HUB.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.PayStatus.Verified">
            <summary>
            The Pay went through verification process and succeeded.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.PayStatus.Assigned">
            <summary>
            The Pay has been assigned to the appropriate Payroll Unit and Liability.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.PayStatus.Ignored">
            <summary>
            The Pay has been ignored because Tenant or Company is inactive.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.CheckStatus">
            <summary>
            The check status.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.CheckStatus.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.CheckStatus.Posted">
            <summary>
            The posted
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.CheckStatus.NotPosted">
            <summary>
            The not posted
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayExceptionType">
            <summary>
            Enumeration for the Pay processing exception type.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.PayExceptionType.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.PayExceptionType.NoCompany">
            <summary>
            The no company
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.PayExceptionType.NoCompanyName">
            <summary>
            The no company name
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.PayExceptionType.NoLegalEntityCompany">
            <summary>
            The no legal entity company
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.PayExceptionType.NoNetPayLiability">
            <summary>
            The no net pay liability
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.PayExceptionType.NoPayrollUnit">
            <summary>
            The no payroll unit
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.CompanyReference">
            <summary>
            The class represents company reference data, such as Id and name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CompanyReference.CompanyId">
            <summary>
            Gets or sets company Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CompanyReference.CompanyName">
            <summary>
            Gets or sets company name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.CompanyReference.LegalEntityCompanyId">
            <summary>
            Legal Entity Company ID for the company that this company reports through. 
            If this ID is empty, then the company itself must be a Legal Entity and its CompanyId should be used.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.CompanyReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.CompanyReference"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayIntegrationData">
            <summary>
            The class represents Ultipro integration data used for loading Pay data to the HUB.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayIntegrationData.PayGroup">
            <summary>
            Gets or sets the Pay Group (UltiPro integration).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayIntegrationData.PayrollCode">
            <summary>
            Gets or sets the Payroll Code (UltiPro integration).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayIntegrationData.PerControl">
            <summary>
            Gets or sets the Pay Control (UltiPro integration).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayIntegrationData.PeriodStartUtcDate">
            <summary>
            Gets or sets the pay Period Start date (in UTC) (UltiPro integration).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayIntegrationData.PeriodEndUtcDate">
            <summary>
            Gets or sets the pay Period End date (in UTC) (UltiPro integration).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayIntegrationData.GenNumber">
            <summary>
            Gets or sets the Pay GenNumber (UltiPro integration).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayIntegrationData.GenRef">
            <summary>
            Gets or sets the gen reference. This is used for tax purposes.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayIntegrationData.CoId">
            <summary>
            Gets or sets the COID (UltiPro integration).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayIntegrationData.MasterCoId">
            <summary>
            Gets or sets the Master Company COID (UltiPro integration).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayIntegrationData.EeId">
            <summary>
            Gets or sets the Employee EEID (UltiPro integration).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayIntegrationData.HashKey">
            <summary>
            Gets or sets the unique hash key for the pay - used for technical purposes.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayIntegrationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayIntegrationData"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayEarningItem">
            <summary>
            The class represents pay earning item.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningItem.ItemNo">
            <summary>
            Gets or sets the unique item number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningItem.EarningCode">
            <summary>
            Gets or sets the earning code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningItem.Description">
            <summary>
            Gets or sets the earning description.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningItem.ShiftCode">
            <summary>
            Gets or sets the shift code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningItem.CurrentHours">
            <summary>
            Gets or sets the current hours.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningItem.PayRate">
            <summary>
            Gets or sets the pay rate.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningItem.PieceCount">
            <summary>
            Gets or sets the piece count.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningItem.PiecePayRate">
            <summary>
            Gets or sets the piece pay rate.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningItem.CurrentAmount">
            <summary>
            Gets or sets the current amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningItem.YtdAmount">
            <summary>
            Gets or sets the YTD amount for the earning code.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayEarningItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayEarningItem"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem">
            <summary>
            The class represents pay earning history item.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.EarnSystemId">
            <summary>
            Gets or sets the earning system identifier.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.EarnRecId">
            <summary>
            Gets or sets the earning record identifier.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.StateSuiCode">
            <summary>
            Gets or sets the state sui code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.Location">
            <summary>
            gets or sets the location
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.SitResidentStateCode">
            <summary>
            gets or sets the sit resident state code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.SitWorkInStateCode">
            <summary>
            Gets or sets the sit work in state code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.LitResidentCode">
            <summary>
            Gets or sets the lit resident code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.LitResidentCounty">
            <summary>
            gets or sets the lit resident county.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.LitWorkInCode">
            <summary>
            Gets or sets the lit work in code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.LitWorkInCounty">
            <summary>
            Gets or sets the lit work in county
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.TaxCategory">
            <summary>
            gets or sets the tax category.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.CurrentAmount">
            <summary>
            Gets or sets the current amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.CurrentHours">
            <summary>
            Gets or sets the current hours.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.HourlyPayRate">
            <summary>
            Gets or sets the pay rate.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.IsRegularPayCode">
            <summary>
            Gets or sets the is regular pay code flag.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.WcCode">
            <summary>
            Gets or sets the shift code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.WceePremium">
            <summary>
            Gets or sets the wecc premium. Named also wceePrem
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.WceeRiskRate">
            <summary>
            Gets or sets the wcee risk rate.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.WcerPremium">
            <summary>
            Gets or sets the wcer premium
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.WcerRiskRate">
            <summary>
            Gets or sets the wcer risk rate.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.WcHours">
            <summary>
            Gets or sets the wc hours.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.WcModifier">
            <summary>
            Gets or sets the wc modifier.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.WcState">
            <summary>
            Gets or sets the wc State.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayEarningHistoryItem"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayTaxItem">
            <summary>
            The class represents pay tax item.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.ItemNo">
            <summary>
            Gets or sets the unique item number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.TaxCode">
            <summary>
            Gets or sets the Tax code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.Description">
            <summary>
            Gets or sets the Tax description.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.IsEmployerTax">
            <summary>
            Gets or sets the boolean indicator whether this is employer tax.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.TaxAmount">
            <summary>
            Gets or sets the tax amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.TaxYtdAmount">
            <summary>
            Gets or sets the YTD amount for the tax code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.TaxableWages">
            <summary>
            Gets or sets the taxable wages for this tax code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.TaxableGross">
            <summary>
            Gets or sets the taxable gross amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.SuppTaxAmount">
            <summary>
            Gets or sets the supplemental tax amout.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.TaxableTips">
            <summary>
            Gets or sets the taxable tips amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.ExtraTaxAmount">
            <summary>
            Gets or sets an extra tax amount, if applicable.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.TypeOfTax">
            <summary>
            Gets or sets the type of tax value.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.FilingStatus">
            <summary>
            Gets or sets the filing status.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.IsNonResident">
            <summary>
            Gets or sets a boolean indication whether employee is non-resident.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.LocalType">
            <summary>
            Gets or sets the local tax type.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.CalcAccumulator1">
            <summary>
            Gets or sets the first calc accumulator
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.CalcAccumulator2">
            <summary>
            Gets or sets the second calc accumulator
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.D125Amount">
            <summary>
            Gets or sets the D125 Amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.DependentCareAmount">
            <summary>
            Gets or sets the dependent care amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.ExemptWages">
            <summary>
            Gets or sets the exempt wages.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.GrossWages">
            <summary>
            Gets or sets the gross wages.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.HousingAmount">
            <summary>
            Gets or sets the housing amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.Sec125Amount">
            <summary>
            Gets or sets the sec 125 amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.EarningTaxReportingType">
            <summary>
            Gets or sets the earning tax reporting type
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.IsExemptFromTax">
            <summary>
            gets or sets the is exempt from tax flag.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.GtlUncollectedTax">
            <summary>
            Gets or sets the gtl uncollected tax amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.IsResidentTaxCode">
            <summary>
            Gets or sets the is resident tax code flag.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.ResActualTaxCredit">
            <summary>
            Gets or sets the res actual tax credit amount. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.ReportingTaxableWages">
            <summary>
            Gets or sets the reporting taxable wages amount. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.StateSuiPriorWages">
            <summary>
            Gets or sets the state sui prior wages amount. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.TaxReportingType">
            <summary>
            Gets or sets the tax reporting type.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.TipsUncollectedTax">
            <summary>
            Gets or sets the tips uncollected tax amount. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.TipsTaxAmount">
            <summary>
            Gets or sets the tips uncollected tax amount. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.TpspTaxAmount">
            <summary>
            Gets or sets the tpspTaxAmount. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.ExcessWages">
            <summary>
            Gets or sets the excessWages. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.ResidentTaxAmt">
            <summary>
            Gets or sets the resident tax amount. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.ResidentTaxableWages">
            <summary>
            Gets or sets the resident taxable wages. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.WorkInTaxAmt">
            <summary>
            Gets or sets the work-in tax amount. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxItem.WorkInTaxableWages">
            <summary>
            Gets or sets the work-in taxable wages. 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayTaxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayTaxItem"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.WorkHistoryItem">
            <summary>
            The class represents a work history entry for a given pay.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.WorkHistoryItem.WeeksWorkedWeek">
            <summary>
            Gets or sets the number of the week (1-53) that was worked by the employee.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.WorkHistoryItem.WeeksWorkedQuarter">
            <summary>
            Gets or sets the number of the quarter (1-4) for a given worked week.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.WorkHistoryItem.IsDeletedRecord">
            <summary>
            Gets or sets the value of IsDeletedRecord as "Y" or "N".
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.WorkHistoryItem.IsVoidedRecord">
            <summary>
            Gets or sets the value of IsVoidedRecord as "Y" or "N".
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.WorkHistoryItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.WorkHistoryItem"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfoBase">
            <summary>
            The class represents basic set of employee snapshot data used for specific pay instance.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfoBase.EmployeeId">
            <summary>
            Gets or sets the employee Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfoBase.Suffix">
            <summary>
            Gets or sets the employee suffix.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfoBase.FirstName">
            <summary>
            Gets or sets the employee first name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfoBase.LastName">
            <summary>
            Gets or sets the employee last name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfoBase.MiddleName">
            <summary>
            Gets or sets the employee middle name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfoBase.EmployeeNumber">
            <summary>
            Gets or sets the employee number.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfoBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfoBase"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfoBase.ToFullName">
            <summary>
            Gets the employees full name.
            </summary>
            <returns>A string of the full name.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfo">
            <summary>
            The class represents employee snapshot data used for specific pay instance.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfo.Ssn">
            <summary>
            Gets or sets the employee SSN.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfo.AddressLine1">
            <summary>
            Gets or sets the employee address, line 1.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfo.AddressLine2">
            <summary>
            Gets or sets the employee address, line 2.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfo.City">
            <summary>
            Gets or sets the employee address, city.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfo.StateCode">
            <summary>
            Gets or sets the employee address, state code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfo.ZipCode">
            <summary>
            Gets or sets the employee address, zip code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfo.CountryCode">
            <summary>
            Gets or sets the employee address, country code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfo.Organization">
            <summary>
            Gets or sets the employee organization structure details.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfo.EmployeeStatus">
            <summary>
            Gets or sets the employee status.
            </summary>
            <value>
            The employee status.
            </value>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayEmployeeInfo"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayOrgStructure">
            <summary>
            The class represents employee org structure data used for specific pay instance.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.JobCode">
            <summary>
            Gets or sets the job code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.JobDescription">
            <summary>
            Gets or sets the job description.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.Location">
            <summary>
            Gets or sets the job location.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.LocationAddressLine1">
            <summary>
            Gets or sets the job location address, line 1.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.LocationAddressLine2">
            <summary>
            Gets or sets the job location address, line 2.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.LocationReportingUnitNo">
            <summary>
            Gets or sets the job location reporing unit number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.LocationState">
            <summary>
            Gets or sets the job location address, state code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.LocationZipCode">
            <summary>
            Gets or sets the job location address, zip code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.LocationCity">
            <summary>
            Gets or sets the job location address, city.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.LocationCountry">
            <summary>
            Gets or sets the job location address, country.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.OrgLevel1">
            <summary>
            Gets or sets the organization level 1.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.OrgLevel2">
            <summary>
            Gets or sets the organization level 2.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.OrgLevel3">
            <summary>
            Gets or sets the organization level 3.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.OrgLevel4">
            <summary>
            Gets or sets the organization level 4.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.OrgLevel1Label">
            <summary>
            Gets or sets the label organization level 1.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.OrgLevel2Label">
            <summary>
            Gets or sets the label organization level 2.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.OrgLevel3Label">
            <summary>
            Gets or sets the label organization level 3.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.OrgLevel4Label">
            <summary>
            Gets or sets the label organization level 4.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.DistributionCenterCode">
            <summary>
            Gets or sets the printed check distribution center code.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayOrgStructure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayOrgStructure"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata">
            <summary>
            This class stores the tax metadata for pays.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.IsAgricultural">
            <summary>
            Gets or sets the is agricultural flag. This is used for tax purposes.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.IsSubjectToBackupWh">
            <summary>
            Gets or sets the is subject to backup wh flag. This is used for tax purposes.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.SpecialStatute">
            <summary>
            Gets or sets the special statue code. This is used for tax purposes.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.StateSuiCode">
            <summary>
            Gets or sets the state sui code. This is used for tax purposes.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.SuiGrossAmount">
            <summary>
            Gets or sets the sui gross amount. This is used for tax purposes.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.TaxReconGenRef">
            <summary>
            Gets or sets the tax recon gen reference. This is used for tax purposes.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.TaxReportingType">
            <summary>
            Gets or sets the tax reporting type. This is used for tax purposes.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.SUIGeographicCode">
            <summary>
            Gets or sets the SuiGeographicCode.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.SUIOccupationalCode">
            <summary>
            Gets or sets the SUIOccupationalCode.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.IsSeasonalWorker">
            <summary>
            Gets or sets the SUIOccupationalCode.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.SUIPlanType">
            <summary>
            Gets or sets the SUIPlanType.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.PayPeriod">
            <summary>
            Gets or sets the PayPeriod.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Payment.PayTaxMetadata"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayServiceAdapter">
            <summary>
            Pay service Api adapter implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayServiceAdapter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="httpClientFactory">The HttpClient factory.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.PayMapper">
            <summary>
            Tax item mapper implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.PayMapper.MapTo(TaxHub.CoreServices.Acl.Payment.PayView,System.Guid,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubTenantServiceAdapter">
            <summary>
            Tenant Service Client.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubTenantServiceAdapter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="httpClientFactory">The HttpClient factory.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.RefundLiabilityCommand">
            <summary>
            Object used to refund information to SmartHub
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.RefundLiabilityCommand.UniqueReference">
            <summary>
            Payment Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.RefundLiabilityCommand.RefundAmount">
            <summary>
            Payment Amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.RefundLiabilityCommand.CheckDate">
            <summary>
            Refund Check Date
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.RefundLiabilityCommand.ReferenceId">
            <summary>
            ReferenceId which will be the PaymentId if refund due void payment or the FIRST CreditTracking Id if a credit was applied
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.LiabilityRefundType">
            <summary>
            Class to represent a refund type
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityRefundType.Value">
            <summary>
            The refund type
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityRefundType.Credit">
            <summary>
            Gets the prefix for a credit refund
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.LiabilityRefundType.Void">
            <summary>
            Gets the prefix for a void refund
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand">
            <summary>
            The USG Bank Observed Command
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand.BankAccountId">
            <summary>
            Sets the internal bank account id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand.AccountPurpose">
            <summary>
            The Account purpose
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand.BankId">
            <summary>
            The Bank Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand.BankAccount">
            <summary>
            The Bank Account Identification
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand.RoutingNumberFraction">
            <summary>
            The routing number fraction
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand.NachaImmediateOrigin">
            <summary>
            The Nacha immediate origin
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand.AchCoId">
            <summary>
            The Ach Company Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand.Bank">
            <summary>
            The Usg Bank Info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand.StartingCheckNumber">
            <summary>
            Starting Check Number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountObservedCommand.ImmediateDestinationName">
            <summary>
            Gets or sets the Immediate Destination Name
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand">
            <summary>
            The USG Bank Update Command
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand.#ctor">
            <summary>
            Detault Constructos
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand.BankAccountId">
            <summary>
            Sets the internal bank account id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand.BankName">
            <summary>
            The Bank Name
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand.NachaImmediateOrigin">
            <summary>
            The ACH Immediate Origin Number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand.AchCoId">
            <summary>
            The ACH Company Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand.AccountPurpose">
            <summary>
            The Account purpose
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand.BankAccountRoutingNumber">
            <summary>
            The Bank Account Routing number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand.RoutingNumberFraction">
            <summary>
            The Routing Number Fraction
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand.Status">
            <summary>
            The status of the account
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand.IsDefault">
            <summary>
            Sets whether the UsgBankAccount is the default account or not
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand.StartingCheckNumber">
            <summary>
            Starting Check Number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankAccountUpdateCommand.ImmediateDestinationName">
            <summary>
            Gets or sets the Immediate Destination Name
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.UsgBankInformation">
            <summary>
            This class holds the bank information used by the bank account
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.UsgBankInformation.BankName">
            <summary>
            The Bank Name
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.ExtendedBankAccountIdentification">
            <summary>
            The Extended Bank Information
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.ExtendedBankAccountIdentification.AccountNumber">
            <summary>
            The Bank account
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.ExtendedBankAccountIdentification.RoutingNumber">
            <summary>
            The Routing number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.ExtendedBankAccountIdentification.NachaImmediateDestination">
            <summary>
            NACHA Immediate Destination number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.ExtendedBankAccountIdentification.NachaOriginatingDfiNumber">
            <summary>
            NACHA ODFI
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.UsgBankAccountPurpose">
            <summary>
            Describes the Bank Account Purpose
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountPurpose.Unknown">
            <summary>
            Unknow
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountPurpose.CheckDisbursement">
            <summary>
            Check Disbursement type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountPurpose.Collection">
            <summary>
            Collection type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountPurpose.Concentration">
            <summary>
            Concentration type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountPurpose.DdaDisbursement">
            <summary>
            Disbursement for direct deposit type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountPurpose.GarnishmentCollection">
            <summary>
            Garnishment collection type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountPurpose.GarnishmentCheckDisbursement">
            <summary>
            Garnishement disbursement checking type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountPurpose.GarnishmentEftDisbursement">
            <summary>
            Garnishement disbursement etf type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountPurpose.TaxCollection">
            <summary>
            Tax collection type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountPurpose.TaxCheckDisbursement">
            <summary>
            Tax disbursement check type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountPurpose.TaxEftDisbursement">
            <summary>
            Tax disbursement etf type
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.UsgBankAccountStatus">
            <summary>
            Describes the bank account status
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountStatus.Active">
            <summary>
            Is active
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountStatus.Inactive">
            <summary>
            Is inactive
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.UsgBankAccountStatus.Pending">
            <summary>
            Is pending
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.UsgBankAccountCommandMapper">
            <summary>
            The USG Bank Account Mapper
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubUsgBankBase">
            <summary>
            This class holds the USG bank information.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankBase.BankId">
            <summary>
            Gets or sets an internal bank ID.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankBase.BankName">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBankBase.Status">
            <summary>
            Gets or sets the banks current status.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubUsgBankBase.#ctor">
            <summary>
            Initialize banking with empty values
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.HubUsgBank">
            <summary>
            This class holds the USG banking information.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBank.Address">
            <summary>
            Gets or sets the bank postal address.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBank.CashingInstructions">
            <summary>
            Gets or sets the list of check cashing instructions.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBank.SecureBankInformation">
            <summary>
            Gets or sets the secure bank info.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBank.Bai2SenderId">
            <summary>
            Gets or sets the BAI2 file Sender Id.  
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBank.Bai2ReceiverId">
            <summary>
            Gets or sets the BAI2 file Receiver Id.  
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.HubUsgBank.Bai2OriginatorId">
            <summary>
            Gets or sets the BAI2 file Originator Id.  
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.HubUsgBank.#ctor">
            <summary>
            Initialize banking with empty values
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.SecureBankInformation">
            <summary>
            Secure Bank Information
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.SecureBankInformation.NachaImmediateDestination">
            <summary>
            Gets or sets the NACHA immediate destination.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.SecureBankInformation.NachaOriginatingDfiNumber">
            <summary>
            Gets or sets the NACHA originating DFI number.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.SecureBankInformation.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.SecureBankInformation.NachaImmediateDestinationToMaskedNumber">
            <summary>
            Provides masked nacha immediate destination number for display purposes. 
            </summary>
            <returns>Returns string.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.SecureBankInformation.NachaOriginatingDfiNumberToMaskedNumber">
            <summary>
            Provides masked nacha originating dfi number for display purposes. 
            </summary>
            <returns>Returns string.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Payment.SecureBankInformation.MaskConfidentialInformation">
            <summary>
            Masks Confidential Information
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.BankStatus">
            <summary>
            Enumeration describes the bank account status.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankStatus.Unknown">
            <summary>
            Unkown or not-set bank status
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankStatus.Active">
            <summary>
            Active bank status
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Acl.Payment.BankStatus.Inactive">
            <summary>
            Inactive Bank Status
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Payment.RefundPaymentCommand">
            <summary>
            Object used to represent a Command for Refund/Apply a Credit on TaxHub
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.RefundPaymentCommand.UniqueReference">
            <summary>
            Payment Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.RefundPaymentCommand.RefundAmount">
            <summary>
            Payment Amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.RefundPaymentCommand.CheckDate">
            <summary>
            Payment Check Date
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.RefundPaymentCommand.CreditSessionId">
            <summary>
            Credit session Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Acl.Payment.RefundPaymentCommand.ReferenceId">
            <summary>
            Referenced Id
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Tenant.ITenantMapper">
            <summary>
            Interface for Tenant mapper
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Tenant.ITenantMapper.MapTo(TaxHub.Models.TenantIntegrationUpdatedEventData,System.Guid)">
            <summary>
            This method maps TenantIntegrationUpdatedEventData to Tenant
            </summary>
            <param name="tenantIntegrationUpdatedEventData">The tenant integration updated event data.</param>
            <param name="tenantId">The tenant Id.</param>
            <returns>
            The Tenant.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Tenant.TenantMapper">
            <summary>
            This class will be used to map an oData json object to the Tenant value object.
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Acl.Tenant.ITenantMapper" />
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Tenant.TenantMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Acl.Tenant.TenantMapper"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Tenant.TenantMapper.MapTo(TaxHub.Models.TenantIntegrationUpdatedEventData,System.Guid)">
            <summary>
            This method maps EmployeeData to EmployeeInfo
            </summary>
            <param name="tenantIntegrationUpdatedEventData">The tenant integration updated event data.</param>
            <param name="tenantId">The tenant Id.</param>
            <returns>
            The Employee Info.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.YE.IYearEndTaxFileTypeMapper.MapTo(TaxHub.Common.Enums.YearEndAgencyFileType)">
            <summary>
            Map from YearEndAgencyFileType to YearEndTaxFileType.
            </summary>
            <param name="agencyFileType">The YE Agdncy File Type</param>
            <returns>
            The mapped value.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.YE.YearEndTaxFileTypeMapper.MapTo(TaxHub.Common.Enums.YearEndAgencyFileType)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Ptm.IExportStateZeroEftServiceAdapter">
            <summary>
            Service adapter to export state zero eft.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Ptm.IExportStateZeroEftServiceAdapter.ExportStateZeroEft(TaxHub.CoreServices.Acl.Ptm.ExportStateZeroEftPtmCommand,System.Threading.CancellationToken)">
            <summary>
            Export state zero eft.
            </summary>
            <param name="exportStateZeroEftPtmCommand">The export state zero eft command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The service result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Ptm.IExportStateZeroEftServiceAdapter.InitializeClient(System.Guid)">
            <summary>
            Create and initialize the httpClient.
            </summary>
            <param name="correlationId">The correlation identifier.</param>
            <returns>The httpClient.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Ptm.IPtmCombinePayrollServiceAdapter">
            <summary> 
            Service adapter for PTM Combine import payroll process 
            </summary> 
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Ptm.IPtmCombinePayrollServiceAdapter.CombinePayroll(TaxHub.CoreServices.Acl.Ptm.PtmCombinePayrollModel,System.Guid,System.Threading.CancellationToken)">
            <summary> 
            Combine the imported payroll 
            </summary> 
            <param name="combinePayrollModel">Imported payroll model to combine</param> 
            <param name="correlationId">The correlationId</param> 
            <param name="cancellationToken">The correlationId</param> 
            <returns>PtmCombinePayrollSummary</returns> 
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Ptm.PtmCombinePayrollModel">
            <summary> 
            Model for combine import payroll process 
            </summary> 
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Ptm.ExportStateZeroEftServiceAdapter">
            <summary>
            Service adapter implementation to export state zero eft.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Ptm.ExportStateZeroEftServiceAdapter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory)">
            <summary>
            Initializes new instance of ExportStateZeroEftServiceAdapter
            </summary>
            <param name="clientFactory">The httpClient factory</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Ptm.ExportStateZeroEftServiceAdapter.ExportStateZeroEft(TaxHub.CoreServices.Acl.Ptm.ExportStateZeroEftPtmCommand,System.Threading.CancellationToken)">
            <summary>
            Calls the Ptm Api to export state zero eft.
            </summary>
            <param name="exportStateZeroEftCommand">The export state zero eft command</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>PtmCombinePayrollSummary</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Ptm.ExportStateZeroEftServiceAdapter.InitializeClient(System.Guid)">
            <summary>
            Initializes client.
            </summary>
            <param name="correlationId">The correlationId associated with the process.</param>
            <returns>HttpClient - initialized client</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Acl.Ptm.PtmCombinePayrollServiceAdapter">
            <summary>
            Service adapter implementation for the combine import payroll process
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Ptm.PtmCombinePayrollServiceAdapter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory)">
            <summary>
            Constructor
            </summary>
            <param name="clientFactory">The httpClient factory</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Ptm.PtmCombinePayrollServiceAdapter.CombinePayroll(TaxHub.CoreServices.Acl.Ptm.PtmCombinePayrollModel,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Calls the Ptm Api for combining the imported payroll
            </summary>
            <param name="combinePayrollModel">The combine payroll model</param>
            <param name="correlationId">The correlationId</param>
            <param name="cancellationToken">The correlationId</param>
            <returns>PtmCombinePayrollSummary</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Acl.Ptm.PtmCombinePayrollServiceAdapter.InitializeClient(System.Guid)">
            <summary>
            Initializes client.
            </summary>
            <param name="correlationId">The correlationId associated with the process.</param>
            <returns>HttpClient - initialized client</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.AgencyService">
            <summary>
            Agency Service Used for migrations to correct data.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.AgencyService.UpdateAgencyQtrFreqToNull(TaxHub.Models.Agency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.AgencyService.AggregateRepo">
            <summary>
            Gets the repository.
            </summary>
            <value>
            The repository.
            </value>
        </member>
        <member name="M:TaxHub.CoreServices.Application.AgencyService.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.IAgencyRepositoryFactory,SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.AgencyService"/> class.
            </summary>
            <param name="agencyRepositoryFactory">Repository factory</param>
            <param name="cacheManager">The cache manager</param>
            <param name="cacheRevocationService">The cache revocation service</param>
            <param name="messageHub">The message hub</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.AgencyService.LookupAllByCorrespondingTaxId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.AgencyService.FindAllMatching(System.String,System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a list of agencies/payees that match the provided state and payeeId patters
            </summary>
            <param name="state">The 2-letter state code</param>
            <param name="payeePattern">The patterns to search for</param>
            <param name="top">The maximum number of agencies to return</param>
            <param name="activeOnly">A flag indicating whether or not only active agencies should be returned</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of matching agencies/payees</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.AgencyService.FindAllMatching(TaxHub.Common.Models.AgencyAuthority,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a list of agencies/payees that match the provided status and type and authority
            </summary>
            <param name="agencyAuthority">The patterns to search for</param>
            <param name="activeOnly">A flag indicating whether or not only active agencies should be returned</param>
            <param name="top">The maximum number of agencies to return</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of matching agencies/payees</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.AgencyService.FindAndCalculateCreditCarryover(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if the agency allows for credit carryover.
            </summary>
            <param name="agencyId">The tenant Identifier.</param>
            <param name="quarter">The closing quarter.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A tuple with the Agency and a bool indicating if the Agency allows credit carry over.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.AgencyService.ReplayAggregateEvents(TaxHub.Common.EventStore.IAggregateSnapshotFilter,System.Func{TaxHub.Common.Models.ISnapshotable,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Raise observed events for Agency described by the filter.
            </summary>
            <param name="eventsFilter">Filter for DB query.</param>
            <param name="func">Action to apply.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.AgencyService.FindAllByPayeeIds(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the agencies based on Payee Ids
            </summary>
            <param name="payeeIds">List of Payee Ids</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Gets the agencies based on Payee Ids</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.AgencyService.FindAllByCountyCode(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.AgencyService.UpdateCombinePayeeExceptionRules(System.String,TaxHub.Models.Commands.CombinePayeeCreditExceptionRulesUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.AgencyService.FindOneWithParentSchedules(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestMatcherService">
            <summary>
            CreditRequestMatcherService interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestMatcherService.QuarterReadyForCreditApplication(TaxHub.Models.Banking.CreditApplication.CreditRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Validates if a CreditRequest is in a ready state for credit application
            Check against open quarter of the CreditRequest.
            <remarks>Include the client's open quarter for reference</remarks>
            </summary>
            <param name="creditRequest">The credit request to be matched</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Success if creditRequest ready for credit application, failure if not ready</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestMatcherService.QuarterReadyForCreditApplication(System.String,TaxHub.Common.Models.Quarter,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Validates if a given client and the supplied quarter is in a ready state for credit application
            </summary>
            <param name="clientId">The clientId</param>
            <param name="quarterForCreditApplication">The quarter for which the credit application is intended to happen</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="ct">The cancellation token</param>
            <returns>Success if creditRequest ready for credit application, failure if not ready</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestMatcherService.FindApplicableCreditsAndPaymentsForValidCreditRequest(TaxHub.Models.Banking.CreditApplication.CreditRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Find applicable credits and payments for a credit request ready for credit application
            </summary>
            <param name="creditRequest">The credit request</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Failure if credit request not ready for credit application. Success and applicable credit and payments for ready credit request</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestMatcherService.ApplyCreditsForLockedPayments(System.Collections.Generic.List{TaxHub.Models.Payment},TaxHub.Models.Banking.CreditApplication.CreditRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Apply credits for locked payments
            </summary>
            <param name="lockedPayments">List of locked payments</param>
            <param name="creditRequest">Credit Request</param>
            <param name="eventDataParams">Event Data Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>The updateAggregate result for each credit application action.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestMatcherService">
            <summary>
            CreditRequestMatcherService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestMatcherService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService,TaxHub.CoreServices.Application.QuarterEnd.IQuarterOpenService)">
            <summary>
            Constructor
            </summary>
            <param name="logger">The logger</param>
            <param name="paymentService">The paymentService</param>
            <param name="quarterOpenService">The quarter open service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestMatcherService.QuarterReadyForCreditApplication(TaxHub.Models.Banking.CreditApplication.CreditRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestMatcherService.QuarterReadyForCreditApplication(System.String,TaxHub.Common.Models.Quarter,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestMatcherService.FindApplicableCreditsAndPaymentsForValidCreditRequest(TaxHub.Models.Banking.CreditApplication.CreditRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestMatcherService.ApplyCreditsForLockedPayments(System.Collections.Generic.List{TaxHub.Models.Payment},TaxHub.Models.Banking.CreditApplication.CreditRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationLockingService">
            <summary>
            Service to manage entries on SESSION_LOCK_DEPOSIT_PAYMENT
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationLockingService.LockPayments(System.Collections.Generic.IEnumerable{TaxHub.Models.Banking.CreditApplication.PaymentIdSessionId},System.Guid)">
            <summary>
            Inserts payment ids into SESSION_LOCK_DEPOSIT_PAYMENT with the specified session id fore each of them.
            If the payment is already in the table with a different session id it will be ignored and not returned
            If the payment is already in the table with the same session id it will not be inserted again, but
            will be returned as if it was inserted
            </summary>
            <param name="ids">List of payment id with their associated session ids</param>
            <param name="correlationId">optional correlation id</param>
            <returns>the list of all payments inserted, or already in the table with the same session id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationLockingService.UnlockPaymentsBySessionId(System.Guid,System.Guid)">
            <summary>
            Removes all payment ids from SESSION_LOCK_DEPOSIT_PAYMENT that are associated to the session id provided
            </summary>
            <param name="sessionId">session id</param>
            <param name="correlationId">optional correlation id</param>
            <returns>true if the action was successful, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationLockingService.UnlockPayments(System.Collections.Generic.IEnumerable{System.Int32},System.Guid)">
            <summary>
            Removes the payment ids provided from SESSION_LOCK_DEPOSIT_PAYMENT
            </summary>
            <param name="paymentIds">list of payment ids to be removed</param>
            <param name="correlationId">optional correlation id</param>
            <returns>true if the action was successful, false otherwise</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationLockingService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationLockingService.LockPayments(System.Collections.Generic.IEnumerable{TaxHub.Models.Banking.CreditApplication.PaymentIdSessionId},System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationLockingService.UnlockPaymentsBySessionId(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationLockingService.UnlockPayments(System.Collections.Generic.IEnumerable{System.Int32},System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService">
            <summary>
            This service is intended to handle all the credit application related code.
            1- Start credit application by creating credit request application for any given scenario so far:
                - Start a credit application on payroll assembly requested.
                - Start a credit application on cash liability updated.
                - Start a credit application on payment's status updated:
                    - Individual or bulk update of status from Check to Valid
                    - Payment's resolve fallout
            2- It should also handle the application of actual credits between any group of payments
            3- Should be able to lock and set to ready any credit request
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService.EnsureCreditApplicationForPayrollOnAssemblyRequested(System.Guid,System.Int32,TaxHub.Common.Models.Quarter,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Method intended to start the credit application on a payroll assembly requested when: THE PAYROLL IS NOT PREPAID AND CONTAINS ONLY NEGATIVE PAYMENTS
            </summary>
            <param name="sourceId">The unique identifier for the credit application (in this case we are using the eventId.)</param>
            <param name="postPayrollId">The post payroll Id</param>
            <param name="payrollQuarter">The payroll quarter</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the credit application could be started successfully or if the payroll does not required credit application at this point.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService.EnsureCreditApplicationForPayrollOnCashMgmtLiabilityUpdated(System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Method intended to apply credits to all the payments that belong to a payroll when the cashMgmt liability has being received.
            </summary>
            <param name="sourceId">The unique identifier for the credit application (in this case we are using the eventId.)</param>
            <param name="liabilityId">The liabilityId for the given payroll</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the credit application could be started successfully.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService.EnsureCreditApplicationForPayment(System.Guid,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Method intended to start credit application for a payment
            </summary>
            <param name="sourceId">The source identifier</param>
            <param name="paymentId">The payment identifier</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if the credit request was created successfully</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService.MatchCreditRequest(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Finds the Matching Payments in this CreditRequest
            After the Matching process the Credit Request will end in Ready or Completed Status
            </summary>
            <param name="creditRequestId">Credit Request Id </param>
            <param name="eventDataParams">Event Data Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>True if the Credit Request was updated to Ready or Completed</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService.SetCreditRequestToMatching(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the Period of the CreditRequest Sets it to status Matching.
            This will ensure only one equivalent Credit Request is being in progress at a time
            (equivalent request: same client-combinePayee-period)
            </summary>
            <param name="creditRequestId">Credit Request Id </param>
            <param name="eventDataParams">Event Data Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>True if the Credit Request was updated to Matching</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService.ApplyCredits(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Apply credits
            Method to apply credits for a given credit request.
            </summary>
            <param name="creditRequestId">The credit request Id.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if credit application executed successfully.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService.ReleaseCreditApplicationRequest(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Unlock payments related to credit request and set the credit request status to Released
            </summary>
            <param name="creditRequestId">credit request id</param>
            <param name="eventDataParams">event data parameters</param>
            <param name="cancellationToken">optional cancellation token</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService.EnsureReQueueForCreatedCreditRequests(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Method to ensure that a created but not yet matched credit request be processed.
            We will look for the next credit request for the same client payee and period that is in created status and we will send it to matching status.
            If fallback credit request is enabled and the released credit request ended in fallback required then we will create a new credit request to fall back the released one.
            We will update the released credit request into matching-rescheduled.
            </summary>
            <param name="creditRequestId">The released credit request Id.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if all happens successfully false in any other case.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestService">
            <summary>
            This service is intended to manage the credit request aggregate it should provide:
            1- Storage for the aggregate that represents the credit request.
            2- Handle all the status transactions on the aggregate.
            3- Ensure idempotency using unique a indexes on its repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestService.Create(TaxHub.Models.Commands.Banking.CreditApplication.CreditRequestCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Method to create a credit Request aggregate that represents a credit application session for a given client, payee, trigger (source) and list of payments involved
            </summary>
            <param name="creditRequestCreateCommand">The credit request create command.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The aggregate create result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestService.BulkCreate(System.Collections.Generic.IEnumerable{TaxHub.Models.Commands.Banking.CreditApplication.CreditRequestCreateCommand},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Method to create a bulk of credit Request aggregate that represents a credit application session for a given client, payee, trigger (source) and list of payments involved
            </summary>
            <param name="creditRequestCreateCommands">The credit request create command.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The aggregate create result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds a Credit Request by Id
            </summary>
            <param name="creditRequestId">creditRequestId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>creditRequest</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestService.UpdateToMatching(TaxHub.Models.Banking.CreditApplication.CreditRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates a CreditRequest status to Matching (In Progress).
            Only one CreditRequest for the same Client and CombinePayee should be matching at a time
            </summary>
            <param name="creditRequest">The Credit Request</param>
            <param name="eventDataParams">Event Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>UpdateAggregateResult </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestService.UpdateToReady(TaxHub.Models.Banking.CreditApplication.CreditRequest,System.Collections.Generic.HashSet{TaxHub.Models.Banking.CreditApplication.DepositPeriodPaymentInfo},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates a CreditRequest status to Ready (Related Payments found and saved).
            The CreditRequest is ready to start credit application
            </summary>
            <param name="creditRequest">The Credit Request</param>
            <param name="depositPeriodPaymentInfos">The set of payment ids and deposit period start dates matched for the credit request.</param>
            <param name="eventDataParams">Event Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>UpdateAggregateResult </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestService.UpdateToCompleted(TaxHub.Models.Banking.CreditApplication.CreditRequest,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the CreditRequest to status Completed.
            The CreditRequest didn't need to apply any credits, or not applicable matches was found
            </summary>
            <param name="creditRequest">The Credit Request</param>
            <param name="fallBackCreditRequestRequired">Represents if the credit application found a problem and needs to create a new credit request to re check for no yet applied credits.</param>
            <param name="eventDataParams">Event Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>UpdateAggregateResult </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestService.UpdateToReleased(TaxHub.Models.Banking.CreditApplication.CreditRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates credit request to Released
            </summary>
            <param name="creditRequest">the credit request to update</param>
            <param name="eventDataParams">event data parameters</param>
            <param name="cancellationToken">optional cancellation token</param>
            <returns>operation result as returned by the credit request instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestService.FindFirstCreditRequestInCreatedStatus(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the first credit request (if exists) for the same client , combine payee and period.
            </summary>
            <param name="clientId"> The client Id</param>
            <param name="combinePayeeId">The combine Payee Id</param>
            <param name="period">The period.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the first credit request (if exists) for the same client , combine payee and period order by created Utc Dt, if none then null.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestService">
            <summary>
            The CreditRequestService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestService.#ctor(TaxHub.CoreServices.DataAccess.MongoDbStore.Banking.CreditApplication.ICreditRequestRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor
            </summary>
            <param name="repository">The repo</param>
            <param name="messageHub">The messageHub</param>
            <param name="logger">The logger</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestService.EventInstanceCreated">
            <summary>
            Gets created event's name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestService.Create(TaxHub.Models.Commands.Banking.CreditApplication.CreditRequestCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestService.BulkCreate(System.Collections.Generic.IEnumerable{TaxHub.Models.Commands.Banking.CreditApplication.CreditRequestCreateCommand},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestService.UpdateToMatching(TaxHub.Models.Banking.CreditApplication.CreditRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestService.UpdateToReady(TaxHub.Models.Banking.CreditApplication.CreditRequest,System.Collections.Generic.HashSet{TaxHub.Models.Banking.CreditApplication.DepositPeriodPaymentInfo},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestService.UpdateToCompleted(TaxHub.Models.Banking.CreditApplication.CreditRequest,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditRequestService.UpdateToReleased(TaxHub.Models.Banking.CreditApplication.CreditRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationService">
            <summary>
            The credit application service class
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService,TaxHub.CoreServices.Application.Banking.IPostPayrollService,TaxHub.CoreServices.Application.Banking.IPaymentGroupingService,TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestService,TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditRequestMatcherService,TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationLockingService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Credit application service constructor
            </summary>
            <param name="logger">The logger</param>
            <param name="paymentService">The payment service</param>
            <param name="postPayrollService">The post payroll service</param>
            <param name="paymentGroupingService">The payment grouping service</param>
            <param name="creditRequestService">The credit request service</param>
            <param name="creditRequestMatcherService">The credit request matcher service</param>
            <param name="lockingService">The locking service</param>
            <param name="featureFeatureToggleConfiguration">The featureToggle configuration.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationService.EnsureCreditApplicationForPayrollOnAssemblyRequested(System.Guid,System.Int32,TaxHub.Common.Models.Quarter,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationService.EnsureCreditApplicationForPayrollOnCashMgmtLiabilityUpdated(System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationService.EnsureCreditApplicationForPayment(System.Guid,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationService.SetCreditRequestToMatching(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationService.MatchCreditRequest(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationService.ApplyCredits(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationService.ReleaseCreditApplicationRequest(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.CreditApplication.CreditApplicationService.EnsureReQueueForCreatedCreditRequests(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.IPostPayrollService">
            <summary>
            Domain services corrections related to PostPayrolls
            </summary>
            <summary>
            Domain services related to PostPayrolls
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollService.CorrectionUpdateTenantIdAndSendLegacyCreatedEvent(System.Func{System.String,System.Threading.Tasks.Task{System.Guid}},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update post payroll with tenant id and send legacy created event.
            </summary>
            <param name="getTenantIdByClientIdFunc">The function to obtain the client tenantId</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>OperationResult with total modified count.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollService.CorrectionUpdateTenantIdAndSendLegacyCreatedEventStartingFromId(System.Int32,System.Func{System.String,System.Threading.Tasks.Task{System.Guid}},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update post payroll with tenant id and send legacy created event.
            </summary>
            <param name="postPayrollId">The last post payroll identifier.</param>
            <param name="getTenantIdByClientIdFunc">The function to obtain the client tenantId</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="ct">The cancellation token.</param>
            <returns>OperationResult with total modified count.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollService.SendCreatedEventStartingForIdRangesExcludingReversePayrolls(System.Int32,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            sends created event.
            </summary>
            <param name="startingPostPayrollId">The post payroll identifier to start.</param>
            <param name="endingPostPayrollId">The post payroll identifier to end.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="ct">The cancellation token.</param>
            <returns>OperationResult with total modified count.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollService.CorrectionUpdateSeqNumOfPostPayrollsUpToGivenId(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Correction method to update sequence number of all post payrolls up to given postPayrollId.
            </summary>
            <param name="postPayrollId">The post payroll id.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Operation result with total modified count.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollService.FindOne(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on tenantId and aggregateId.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all PostPayroll's paged based on page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of PostPayroll's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollService.Create(TaxHub.Models.PostPayroll,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified PostPayroll.
            </summary>
            <param name="postPayroll">The PostPayroll.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult" /> representing the result of the operation.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.PostPayroll},System.Int32,TaxHub.Models.PostPayroll,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params1.</param>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="entity">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollService.Delete(TaxHub.Models.PostPayroll,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Deletes the post payroll.
            </summary>
            <param name="postPayroll">The periodic tax Instance</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count</param>
            <returns>true if the operation was successful, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollService.CreateReversedPostPayroll(TaxHub.Models.Commands.PostPayrollReverseCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Create reversed post payroll.
            </summary>
            <param name="postPayrollReverseCommand">The postPayroll reverse command.</param>
            <param name="eventDataParams">The event parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result code including the created postPayroll</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollService.FindOldestPayrollCheckDate(System.String,System.Threading.CancellationToken)">
            <summary>
            Find oldest valid payroll check date:
            - status: valid
            - prepaid: No
            - type: regular or qeadj
            </summary>
            <param name="clientId">The client identifier</param>
            <param name="cancellationToken">The cancellation token,</param>
            <returns>Null of no payroll found, otherwise the oldest check date.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.IPaymentVoidedLiabilityRefundService">
            <summary>
            Domain services related to creating refunds after voiding a payment
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPaymentVoidedLiabilityRefundService.CreateRefundLiabilityForVoidedPayment(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Create refund liability for voided payment
            </summary>
            <param name="paymentId">Payment id</param>
            <param name="eventData">Event Data</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>True when refund liability created successfully</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.PaymentVoidedLiabilityRefundService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PaymentVoidedLiabilityRefundService.CreateRefundLiabilityForVoidedPayment(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.IQeNetPaymentVoidedLiabilityRefundService">
            <summary>
            Domain services related to liability refunds for Qe-net payments
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IQeNetPaymentVoidedLiabilityRefundService.CreateRefundLiabilityForQeNetVoidedPayment(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Create refund liability for Qe-net voided payment
            </summary>
            <param name="voidedPayment">Source payment</param>
            <param name="eventData">Event data</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>True if successfully creates refund liability</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IQeNetPaymentVoidedLiabilityRefundService.UpdateCreditTrackingAndSyncTaxRefundLiabilityCreated(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update credit tracking and sync tax refund liability created
            </summary>
            <param name="refundLiabilityId">Refund liability id</param>
            <param name="eventDataParams">Event data params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>True after successfully updating credit tracking and syncing tax refund liability created</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.QeNetPaymentVoidedLiabilityRefundService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.QeNetPaymentVoidedLiabilityRefundService.CreateRefundLiabilityForQeNetVoidedPayment(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.QeNetPaymentVoidedLiabilityRefundService.UpdateCreditTrackingAndSyncTaxRefundLiabilityCreated(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.IPaymentGroupingService">
            <summary>
            This service is intended to group payments by major payee and
            ClientId (Currently the criteria is to apply credits
            to a group of payments together). It will also prepare the
            credit request command, one for each separate a group of payments
            into its own equivalent class for credits.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPaymentGroupingService.GroupPaymentsIntoCreditRequestCommands(System.Guid,System.Collections.Generic.IEnumerable{TaxHub.Models.Payment},TaxHub.Common.Models.Quarter,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method intended to group payments by client and major payee.
            If the payee of the payments does not have a major payee we
            use the payeeId itself as a the major payee to create a group.
            </summary>
            <param name="sourceId">The sourceId</param>
            <param name="paymentList">The paymentList</param>
            <param name="creditRequestQuarter">The creditRequest Quarter if is not meant to be the payroll Check date quarter</param>
            <param name="correlationId">The correlationId</param>
            <param name="ct">The cancellationToken</param>
            <returns>Return a credit request create commands per group of payments.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.PaymentGroupingService">
            <summary>
            The payment grouping service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PaymentGroupingService.#ctor(TaxHub.CoreServices.Application.IAgencyService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            The payment grouping service constructor
            </summary>
            <param name="agencyService">The agency service</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PaymentGroupingService.GroupPaymentsIntoCreditRequestCommands(System.Guid,System.Collections.Generic.IEnumerable{TaxHub.Models.Payment},TaxHub.Common.Models.Quarter,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.IPaymentCreditLiabilityRefundService">
            <summary>
            Service intended to handle requests for refund creation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPaymentCreditLiabilityRefundService.CreateRefundLiabilityForCreditTracking(System.Int32,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Request Refund liability creation for credit applied
            </summary>
            <param name="paymentId">The payment id</param>
            <param name="creditId">The credit id</param>
            <param name="creditSessionId">The credit session id</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if refund liability successfully created</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPaymentCreditLiabilityRefundService.CreateRefundLiabilityForCreditTransaction(System.Int32,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Request refund liability for credit transaction
            </summary>
            <param name="paymentId">The payment identifier.</param>
            <param name="creditTransactionId">The credit transaction identifier.</param>
            <param name="eventData">The event data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether refund liability is created successfully.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPaymentCreditLiabilityRefundService.EnsureCreditTrackingAndSyncTaxRefundLiabilityCreated(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update payment's creditTracking with refundLiabilityId created and request refund liability creation in SmartHub
            </summary>
            <param name="refundLiabilityId">The created refund liability id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, else false</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPaymentCreditLiabilityRefundService.AllocateCreditTransactionRefund(System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Complete credit transaction by setting refund liability reference and request SSP liability.
            </summary>
            <param name="refundLiabilityId">The refund liability id.</param>
            <param name="eventDataParams">The eventData params.</param>
            <returns>Whether update succeeds.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.PaymentCreditLiabilityRefundService">
            <summary>
            The payment liability refund service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PaymentCreditLiabilityRefundService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService,TaxHub.CoreServices.Application.ILiabilityService)">
            <summary>
            Payment liability refund service constructor
            </summary>
            <param name="logger">The logger</param>
            <param name="paymentService">The payment service</param>
            <param name="liabilityService">The liability service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PaymentCreditLiabilityRefundService.CreateRefundLiabilityForCreditTracking(System.Int32,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PaymentCreditLiabilityRefundService.CreateRefundLiabilityForCreditTransaction(System.Int32,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PaymentCreditLiabilityRefundService.EnsureCreditTrackingAndSyncTaxRefundLiabilityCreated(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.PostPayrollService">
            <summary>
            PostPayroll correction service implementation.
            </summary>
            <summary>
            PostPayroll service implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PostPayrollService.CorrectionUpdateSeqNumOfPostPayrollsUpToGivenId(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.Banking.PostPayrollService.EventInstanceCreated">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PostPayrollService.#ctor(System.Func{TaxHub.CoreServices.DataAccess.IPostPayrollRepository},TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.Banking.PostPayrollService"/> class.
            </summary>
            <param name="postPayrollRepositoryFactory">Post payroll repository factory.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PostPayrollService.InitializeNew(TaxHub.Models.PostPayroll)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PostPayrollService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PostPayrollService.FindOne(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PostPayrollService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PostPayrollService.CreateReversedPostPayroll(TaxHub.Models.Commands.PostPayrollReverseCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PostPayrollService.FindOldestPayrollCheckDate(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.IPostPayrollReverseService">
            <summary>
            Application services related to PostPayrolls reverse.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.IPostPayrollReverseService.ReversePostPayroll(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Reverse post payroll from the post payroll associated to a given payment identifier..
            </summary>
            <param name="paymentId">The payment identifier.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns> True if success.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Banking.PostPayrollReverseService">
            <summary>
            PostPayroll reverse service implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PostPayrollReverseService.#ctor(TaxHub.CoreServices.Application.Banking.IPostPayrollService,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.Banking.PostPayrollService"/> class.
            </summary>
            <param name="postPayrollService">Post payroll Service</param>
            <param name="logger">The application logger.</param>
            <param name="paymentService">The payment service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Banking.PostPayrollReverseService.ReversePostPayroll(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEYearEndDetails">
            <summary>
            Represents a Year End details processing
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEYearEndDetails.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEYearEndDetails"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEYearEndDetails.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEYearEndDetails"/>.
            </summary>
            <param name="line">The line</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.IQEProcessingRecord">
            <summary>
            A record derived from an RTS record, this is the record that will be used for QE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.IQEProcessingRecord.Process(TaxHub.Models.ImportQeResultState,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{TaxHub.Models.UteTaxCodeMetadata}},System.Boolean,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <summary>
            Processes the Record and keeps the result in the ImportQeResultState, which will be used
            to construct the QuarterlyTaxInstance.
            </summary>
            <param name="importQeResultState">The Import QE Result State.</param>
            <param name="rtsTaxCodeMappingByClient">The rts tax code mapping by client.</param>
            <param name="autoRtsImport">rts record was an automatic import vs manual import</param>
            <param name="domainService">The Domain Service.</param>
            <param name="cancellationToken">The Cancellation Token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeMaster">
            <summary>
            The employee master record for QE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeMaster.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeMaster"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeMaster.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeMaster"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeMaster.Process(TaxHub.Models.ImportQeResultState,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{TaxHub.Models.UteTaxCodeMetadata}},System.Boolean,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeStatistic">
            <summary>
            Represents an employee statistic for QE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeStatistic.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeStatistic"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeStatistic.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeStatistic"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeStatistic.Process(TaxHub.Models.ImportQeResultState,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{TaxHub.Models.UteTaxCodeMetadata}},System.Boolean,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeWage">
            <summary>
            The Employee Wage Record for QE processing
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeWage.FeatureToggle">
            <summary>
            The feature toggle configuration.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeWage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeWage"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeWage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeWage"/> class.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeWage.Process(TaxHub.Models.ImportQeResultState,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{TaxHub.Models.UteTaxCodeMetadata}},System.Boolean,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeWage.StateLocalWagesDecimal(System.Int32,System.Int32)">
            <summary>
            Parses a decimal from the State Local Wages section.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>A parsed decimal from the State Local Wages section</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeWage.GetWorksite(TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEEmployeeWage)">
            <summary>
            Method returns the alternate code to identify the worksite.
            When present, the Reporting Unit Number is set to zeros and this value is used for reporting.
            Leading and trailing white-space characters will be removed. In addition, only 5 characters will be considered to fit our SQL table.
            </summary>
            <param name="employeeWage">The employee wage</param>
            <returns>A string representing the worksite.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEFileHeader">
            <summary>
            The file header for QE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEFileHeader.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEFileHeader"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEFileHeader.Process(TaxHub.Models.ImportQeResultState,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{TaxHub.Models.UteTaxCodeMetadata}},System.Boolean,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEFileTrailer">
            <summary>
            The RTS File Trailer for QE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEFileTrailer.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEFileTrailer"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEFileTrailer.Process(TaxHub.Models.ImportQeResultState,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{TaxHub.Models.UteTaxCodeMetadata}},System.Boolean,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEPayrollHeader">
            <summary>
            The Payroll Header for QE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEPayrollHeader.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEPayrollHeader"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEPayrollHeader.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEPayrollHeader"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEPayrollHeader.Process(TaxHub.Models.ImportQeResultState,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{TaxHub.Models.UteTaxCodeMetadata}},System.Boolean,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEPayrollTrailer">
            <summary>
            The Payroll Trailer for QE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEPayrollTrailer.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEPayrollTrailer"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEPayrollTrailer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEPayrollTrailer"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEPayrollTrailer.Process(TaxHub.Models.ImportQeResultState,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{TaxHub.Models.UteTaxCodeMetadata}},System.Boolean,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEReconciliationAmount">
            <summary>
            Represents a reconciliation amount record for QE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEReconciliationAmount.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEReconciliationAmount"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEReconciliationAmount.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEReconciliationAmount"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QEReconciliationAmount.Process(TaxHub.Models.ImportQeResultState,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{TaxHub.Models.UteTaxCodeMetadata}},System.Boolean,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QeRtsLineParser">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.QeRtsLineParser.Create(System.IO.StreamReader,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsLineParser`1"/>
            </summary>
            <param name="streamReader">stream reader</param>
            <param name="logger">logger</param>
            <returns>An instance of RtsLineParser</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.RtsProcessingRule`1">
            <summary>
            RtsProcessingMethod encapuslates the method for matching to a result state updating process along with getting the strings used in the update
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.RtsProcessingRule`1.IsMatch">
            <summary>
            IsMatch determines whether the given T and Tax Code Mapping match to this process of updating the result state
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.RtsProcessingRule`1.ApplyProcessing">
            <summary>
            UpdateResultState will use the strings from GetStrings in order to update the rts processing result state
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.QE.RtsProcessingRule`1.ApplyProcessingMethods(System.Collections.Generic.ICollection{TaxHub.CoreServices.Application.FileIngestion.Rts.QE.RtsProcessingRule{`0}},System.Collections.Generic.ICollection{TaxHub.Models.UteTaxCodeMetadata},`0,TaxHub.Models.ImportQeResultState)">
            <summary>
            Applies the given processing methods to the record for each given tax code in order to update the given result state
            </summary>
            <param name="processingMethods">processing methods</param>
            <param name="rtstcm">rts to ute tax code mapping</param>
            <param name="record">the record</param>
            <param name="importQeResultState">the result state</param>
            <returns>True if any processing method matched, or False otherwise.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YearEndDetails">
            <summary>
            Year End details
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.YearEndDetails.LinePrefix">
            <summary>
            The line prefix 502.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.YearEndDetails.RtsTaxCode">
            <summary>
            Gets or sets the RTS tax code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.YearEndDetails.FUTAExemptWages">
            <summary>
            Gets or sets the total wages that are exempt from FUTA tax.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YearEndDetails.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YearEndDetails"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YearEndDetails.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YearEndDetails"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YearEndDetails.GetRecordSection">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2">
            <summary>
            The Employee Federal W2
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.LinePrefix">
            <summary>
            The line prefix.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.#ctor">
            <summary>
            Constructs and instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2"/> from the given line.
            </summary>
            <param name="line">The raw string line.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.RtsTaxCode">
            <summary>
            The RTS Tax Code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.PayrollCode">
            <summary>
            Payroll Code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.EmployeeNumber">
            <summary>
            The Employee Number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.Ssn">
            <summary>
            The SSN
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.StatutoryEmployeeCheckBox">
            <summary>
            Gets or sets the Statutory Employee Check Box value (Box 13).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.RetirementPlanCheckBox">
            <summary>
            Gets or sets the Retirement Plan Check Box value (Box 13).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.ThirdPartySickPay">
            <summary>
            Gets or sets the third party sick pay value (Box 13).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.WagesTipsAndCompensation">
            <summary>
            Gets or sets the wages, tips, and other compensation value.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.FederalTaxWithheld">
            <summary>
            Gets or sets the federal taxes withheld value.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.SocialSecurityWages">
            <summary>
            Gets or sets the social security wages.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.SocialSecurityTaxWithheld">
            <summary>
            Gets or sets the social security tax withheld.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.MedicareWagesAndTips">
            <summary>
            Gets or sets the medicare wages and tips.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.MedicareTaxWithheld">
            <summary>
            Gets or sets the medicare taxes withheld.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.SocialSecurityTips">
            <summary>
            Gets or sets the social security tips.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.AllocatedTips">
            <summary>
            Gets or sets the allocated tips.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.DependentCareBenefits">
            <summary>
            Gets or sets the dependent care benefits.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.NonqualifiedPlan">
            <summary>
            Gets or sets the non qualified plan amount (Box 11).
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.Section457NonqualifiedPlan">
            <summary>
            Gets or sets the section 457 non qualified plan amount.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.NotSection457NonqualifiedPlan">
            <summary>
            /// Gets or sets the non qualified plan amount not for section 457.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeFederalW2.GetRecordSection">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeFederalW2">
            <summary>
            Represents a Federal W2 for YE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeFederalW2.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeFederalW2"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeFederalW2.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeFederalW2"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeFederalW2.Process(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.IYEProcessingRecord">
            <summary>
            A record derived from an RTS record, this is the record that will be used for YE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.IYEProcessingRecord.Process(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <summary>
            Processes the Record and keeps the result in the ImportResultState, which will be used
            to construct the year end data.
            </summary>
            <param name="importResultState">The Import Result State.</param>
            <param name="domainService">The Domain Service.</param>
            <param name="cancellationToken">The Cancellation Token.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeMaster">
            <summary>
            Represents a reconciliation amount record for YE processing.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeMaster.RecordContentSsn">
            <summary>
            Gets or sets the social security number to use in the record content.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeMaster.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeMaster"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeMaster.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeMaster"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeMaster.Process(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeStateAndLocalW2">
            <summary>
            Represents a reconciliation amount record for YE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeStateAndLocalW2.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeStateAndLocalW2"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeStateAndLocalW2.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeStateAndLocalW2"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeStateAndLocalW2.Process(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeWage">
            <summary>
            Represents a reconciliation amount record for YE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeWage.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeWage"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeWage.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeWage"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEEmployeeWage.Process(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEFileHeader">
            <summary>
            The file header for YE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEFileHeader.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEFileHeader"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEFileHeader.Process(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEFileTrailer">
            <summary>
            The RTS File Trailer for YE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEFileTrailer.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEFileTrailer"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEFileTrailer.Process(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEPayrollHeader">
            <summary>
            The Payroll Header for YE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEPayrollHeader.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEPayrollHeader"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEPayrollHeader.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEPayrollHeader"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEPayrollHeader.Process(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEPayrollTrailer">
            <summary>
            The Payroll Trailer for YE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEPayrollTrailer.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEPayrollTrailer"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEPayrollTrailer.Process(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEReconciliationAmount">
            <summary>
            Represents a reconciliation amount record for YE processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEReconciliationAmount.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEReconciliationAmount"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEReconciliationAmount.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEReconciliationAmount"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEReconciliationAmount.Process(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEStateLocalCount">
            <summary>
            YE state and local counts.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEStateLocalCount.LinePrefix">
            <summary>
            The line prefix.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEStateLocalCount.RtsTaxCode">
            <summary>
            Gets or sets the RTS tax code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEStateLocalCount.EmployeeCount">
            <summary>
            Gets or sets the employee count.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEStateLocalCount.W2Count">
            <summary>
            Gets or sets the W2 count.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEStateLocalCount.GetRecordSection">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEStateLocalCount.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEStateLocalCount"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEStateLocalCount.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEStateLocalCount"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEStateLocalCount.Process(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEQrfLineParser">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.YE.YEQrfLineParser.Create(System.IO.StreamReader,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsLineParser`1"/>
            </summary>
            <param name="streamReader">stream reader</param>
            <param name="logger">logger</param>
            <returns>An instance of RtsLineParser</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeTips">
            <summary>
            The rts employee tips. Used to represent records starting with 603.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeTips.LinePrefix">
            <summary>
            Line prefix 603.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2">
            <summary>
            The Employee State And Local W2
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2.LinePrefix">
            <summary>
            The line prefix.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2.#ctor">
            <summary>
            Constructs and instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2"/> from the given line.
            </summary>
            <param name="line">The raw string line.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2.RtsTaxCode">
            <summary>
            The RTS Tax Code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2.PayrollCode">
            <summary>
            Payroll Code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2.EmployeeNumber">
            <summary>
            The Employee Number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2.Ssn">
            <summary>
            The SSN
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2.YtdTax">
            <summary>
            Ytd Tax
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2.YtdTaxableWages">
            <summary>
            Ytd Taxable Wages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2.StateLocalSpecificInformation">
            <summary>
            State Local Specific Information
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStateAndLocalW2.GetRecordSection">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessingResultStatus">
            <summary>
            Prepare rts processing result status
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessingResultStatus.ReadyToProcess">
            <summary>
            Ready to process
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessingResultStatus.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessingResultStatus.UnableToProcess">
            <summary>
            Unable to process
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessingResultStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessingResultStatus.FailedClientValidation">
            <summary>
            Failed Client Validations
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessingResultStatus.CompletedWithWarnings">
            <summary>
            Completed with warnings
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessingResultStatus.FatalFailure">
            <summary>
            Failed fatally
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessingResultStatus.InvalidFileVersion">
            <summary>
            The SSA reference version of the file does not match the one from the Federal file or the file sequence version is outdated.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessRtsFileResult">
            <summary>
            Represents the result of calling method ProcessRtsFile
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessRtsFileResult.Success">
            <summary>
            When ProcessRtsFile was successful.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessRtsFileResult.FailedRePublishEvent">
            <summary>
            When ProcessRtsFile failed and couldn't republish the event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessRtsFileResult.RePublishedEvent">
            <summary>
            When ProcessRtsFile failed and republished the event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessRtsFileResult.Failure">
            <summary>
            When ProcessRtsFile failed and we know retrying won't fix the problem.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessRtsFileResult.Skipped">
            <summary>
            When ProcessRtsFile ignores the request
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.ProcessRtsFileResult.Conflict">
            <summary>
            When processing an RTS file incurred in a conflict.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.FileTrailer">
            <summary>
            The rts file trailer. Used to represent records starting with 999.
            </summary>
            <remarks>
            Marks the end of an rts file.
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.FileTrailer.LinePrefix">
            <summary>
            Line prefix 999.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.FileTrailer.#ctor">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.FileTrailer"/>.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.FileTrailer.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.FileTrailer"/> from the given line.
            </summary>
            <param name="line">The raw string line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.FileTrailer.GetRecordSection">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.FileHeader">
            <summary>
            The rts file header. Used to represent records starting with 000.
            </summary>
            <remarks>
            Marks the beginning of an rts file.
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.FileHeader.LinePrefix">
            <summary>
            Line prefix 000.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.FileHeader.#ctor">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.FileHeader"/>.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.FileHeader.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.FileHeader"/> from the given line.
            </summary>
            <param name="line">The raw string line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.FileHeader.GetRecordSection">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.IRtsLineParser`1">
            <summary>
            The RTS Line Parser responsible for parsing an individual line of the RTS file.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.IRtsLineParser`1.ParseLine">
            <summary>
            Parses the given line of an RTS file.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.IRtsLineParser`1.GetCurrentRecord">
            <summary>
            Gets the current Rts Processing Record
            </summary>
            <returns>RtsProcessingRecord</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.IRtsLineParser`1.GetLinesParsed">
            <summary>
            Gets the number of lines parsed.
            </summary>
            <returns>number of lines parsed</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsLineParser`1">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsLineParser`1.CurrentRecord">
            <summary>
            Gets or sets the current record.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsLineParser`1.#ctor(System.IO.StreamReader,TaxHub.Common.Logging.IAppLogger,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsLineParser`1"/> class.
            </summary>
            <param name="streamReader">The stream reader.</param>
            <param name="logger">The logger.</param>
            <param name="enforceAsciiEncoding">Flag determines if conversion to ASCII encoding is required.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsLineParser`1.ParseLine">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsLineParser`1.GetCurrentRecord">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsLineParser`1.GetLinesParsed">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsLineParserException">
            <summary>
            Represents an exception that ocurred while parsing an RTS file.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsLineParserException.#ctor(System.Exception)">
            <summary>
            The constructor for RtsLineParserException
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster">
            <summary>
            The rts employee master record. Used to represent records starting with 600.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.LinePrefix">
            <summary>
            Line prefix 600.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.#ctor">
            <summary>
            Constructor for the <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster"/> from the given line.
            </summary>
            <param name="line">The raw string line.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.PayrollCode">
            <summary>
            The Payroll code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.State">
            <summary>
            The employee live-in state.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.Ssn">
            <summary>
            The SSN.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.QEEmpNo">
            <summary>
            The part of the Employee Number used for QE  // TODO: we should remove this feild and just pull the part out that we need in qe related logic
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.EmployeeNumber">
            <summary>
            The Employee Number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.QEFirstName">
            <summary>
            The part of the first name used for QE. // TODO: we should remove this feild and just pull the part out that we need in qe related logic
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.FirstName">
            <summary>
            The first name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.LastName">
            <summary>
            The last name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.QEMiddleInitial">
            <summary>
            The middle initial
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.MiddleName">
            <summary>
            The middle name 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.Suffix">
            <summary>
            The suffix
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.AddressLine1">
            <summary>
            The address line 1.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.AddressLine2">
            <summary>
            The address line 1.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.City">
            <summary>
            The city.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.ZipCodeAndExtension">
            <summary>
            The zip code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.Gender">
            <summary> 
            Value in pos 219 
            </summary> 
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.HireDate">
            <summary> 
            Value in pos 220 - 227 
            </summary> 
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.TerminationDate">
            <summary> 
            Value in pos 228 - 235 
            </summary> 
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.BirthDate">
            <summary> 
            Value in pos 348 - 355 
            </summary> 
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.BirthYear">
            <summary> 
            Value in pos 236 - 239 in case there is no a valid date in 348-355.
            </summary> 
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.CitizenshipStatus">
            <summary> 
            Value in pos 240 
            </summary> 
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.TaxId">
            <summary>
            The tax id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.CompanyName">
            <summary>
            The company name
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.DriversLicenseNumber">
            <summary>
            The driver license number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.EmployeeW2Indicator">
            <summary>
            The employee w2 indicator
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.PsdCode">
            <summary> 
            Value in pos 342 - 347 
            </summary> 
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeMaster.GetRecordSection">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic">
            <summary>
            The rts employee statistic record. Used to represent records starting with 501.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.LinePrefix">
            <summary>
            Line prefix 501.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.FederalCobraStates">
            <summary>
            Federal COBRA (or Statistic 4) states for SUIER.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.#ctor">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic"/> from the given line.
            </summary>
            <param name="line">The raw string line.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.RtsTaxCode">
            <summary>
            The RTS Tax Code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.Statistic1">
            <summary>
            Statistic 1
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.Statistic2">
            <summary>
            Statistic 2
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.Statistic3">
            <summary>
            Statistic 3
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.Statistic4">
            <summary>
            Statistic 4
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.Statistic5">
            <summary>
            Statistic 5
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.Statistic6">
            <summary>
            Statistic 6
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.Statistic7">
            <summary>
            Statistic 7
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeStatistic.GetRecordSection">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage">
            <summary>
            The rts employee wage record. Used to represent records starting with 601.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.LinePrefix">
            <summary>
            Line prefix 601.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.#ctor">
            <summary>
            Constructs and instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage"/> from the given line.
            </summary>
            <param name="line">The raw string line.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.RtsTaxCode">
            <summary>
            The RTS Tax Code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.EmployeeNumber">
            <summary>
            The Employee Number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.Ssn">
            <summary>
            The SSN
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.CorporateOfficerIndicator">
            <summary>
            The Corporate Officer Indicator
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.SeasonalEmployee">
            <summary>
            Seasonal Employee
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.StateLocalWagesSection">
            <summary>
            The Withholding Wages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.StateLocalSpecificInformationSection">
            <summary>
            The Withholding Wages and Tax Information
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.Weeks">
            <summary>
            The Weeks Worked
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.Hours">
            <summary>
            The Hours Worked
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.ReportingUnitNumber">
            <summary> 
            The Reporting Unit Number 
            </summary> 
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.Worksite">
            <summary>
            The Worksite. Alternate code to identify the worksite.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.Month1Employment">
            <summary>
            The month 1 employment
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.Month2Employment">
            <summary>
            The month 2 employment
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.Month3Employment">
            <summary>
            The month 3 employment
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.YtdGrossWagesState1">
            <summary>
            YTD unemployment gross wages subject to tax earned in State 1
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.YtdTaxableWagesState1">
            <summary>
            YTD unemployment taxable wages earned in State 1
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.LocalCodeState1">
            <summary>
            The state code for State 1
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.YtdGrossWagesState2">
            <summary>
            YTD unemployment gross wages subject to tax earned in State 2
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.YtdTaxableWagesState2">
            <summary>
            YTD unemployment taxable wages earned in State 2
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.LocalCodeState2">
            <summary>
            The state code for State 2
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.YtdGrossWagesState3">
            <summary>
            YTD unemployment gross wages subject to tax earned in State 3
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.YtdTaxableWagesState3">
            <summary>
            YTD unemployment taxable wages earned in State 3
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.LocalCodeState3">
            <summary>
            The state code for State 3
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.YtdGrossWagesState4">
            <summary>
            YTD unemployment gross wages subject to tax earned in State 4
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.YtdTaxableWagesState4">
            <summary>
            YTD unemployment taxable wages earned in State 4
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.LocalCodeState4">
            <summary>
            The state code for State 4
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.GetRecordSection">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.EmployeeWage.GetHoursWorked(System.String)">
            <summary>
            Method returns the number of hours worked by the employee earning wages during the quarter.
            When the Hours Worked is greater than 999 this value is stored in positions 176-179.
            If a non-zero value is provided, the Hours Worked value in positions 69-71 will be ignored.
            </summary>
            <param name="line">The raw string line.</param>
            <returns>The number of hours worked.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.IRtsProcessingRecord">
            <summary>
            A record derived from an RTS record, this is the record that will be used for processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.IRtsProcessingRecord.GetRecordSection">
            <summary>
            Gets the rts record section this record type belongs to.
            </summary>
            <returns>RtsRecordSection</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsRecordSection">
            <summary>
            This record type is used to specify which section of the rts file this record comes from.
            An RtsFileFormat follows the following form
            FileHeader
            Header1
                CompanyDetails1
                CompanyDetails2
                ...
                Employee1
                    Employee1Details1
                    Employee1Details2
                    ...
                Employee2
                ...
                EmployeeStateLocalW2s
                ...
            Trailer1
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsRecordSection.CompanyDetail">
            <summary>
            Line prefixes 500, 501, 502.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsRecordSection.Employee">
            <summary>
            Line prefix 600.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsRecordSection.EmployeeDetail">
            <summary>
            Line prefixes 601, 603.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsRecordSection.FileHeader">
            <summary>
            Line prefix 000.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsRecordSection.FileTrailer">
            <summary>
            Line prefix 999.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsRecordSection.PayrollFooter">
            <summary>
            Line prefix 899.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsRecordSection.PayrollHeader">
            <summary>
            Line prefix 100.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsRecordSection.StateLocalCount">
            <summary>
            Line prefix 502.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsRecordSection.EmployeeStateLocalW2s">
            <summary>
            Line prefix 616.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileIngestion.Rts.RtsRecordSection.EmployeeFederalW2s">
            <summary>
            Line prefix 611.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollHeader">
            <summary>
            The rts payroll header. Used to represent records starting with 100.
            </summary>
            <remarks>
            Marks the beginning of a payroll.
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollHeader.LinePrefix">
            <summary>
            Line prefix 100.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollHeader.#ctor">
            <summary>
            Constructs and instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollHeader"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollHeader.#ctor(System.String)">
            <summary>
            Constructs and instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollHeader"/> given the string line.
            </summary>
            <param name="line">The raw string line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollHeader.GetRecordSection">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollHeader.PayrollCode">
            <summary>
            The Payroll Code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollHeader.TransactionType">
            <summary>
            The RTS transaction type. Usually O or A
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollHeader.Quarter">
            <summary>
            The Quarter
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollHeader.Year">
            <summary>
            The Year
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollHeader.QuarterEndDate">
            <summary>
            The last day of the quarter
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollTrailer">
            <summary>
            The rts payroll trailer. Used to represent records starting with 899.
            </summary>
            <remarks>
            Marks the end of a payroll.
            </remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollTrailer.LinePrefix">
            <summary>
            Line prefix 899.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollTrailer.#ctor">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollTrailer"/>.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollTrailer.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollTrailer"/> from the given line.
            </summary>
            <param name="line">The raw string line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.PayrollTrailer.GetRecordSection">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount">
            <summary>
            The rts reconciliation amount record. Used to represent records starting with 500.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.LinePrefix">
            <summary>
            Line prefix 500.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.RtsRecordSection">
            <summary>
            The rts record section
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.#ctor">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.#ctor(System.String)">
            <summary>
            Constructs an instance of <see cref="T:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount"/> from the given line.
            </summary>
            <param name="line">The raw string line.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.RtsTaxCode">
            <summary>
            RTS Tax Code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.QtdTaxAmount">
            <summary>
            QTD Tax Amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.YtdTaxAmount">
            <summary>
            YTD Tax Amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.QtdTaxableWages">
            <summary>
            QTD Taxable Wages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.YtdTaxableWages">
            <summary>
            YTD Taxable Wages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.QtdGrossWages">
            <summary>
            QTD Gross Wages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.YtdGrossWages">
            <summary>
            YTD Gross Wages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.DependentBenefit">
            <summary>
            Dependent Benefit
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.GetRecordSection">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.IsValidStatePrefixForLocals(System.String)">
            <summary>
            Determines if the given tax code has a valid state prefix for locals
            </summary>
            <param name="taxCode">The tax code.</param>
            <returns>Returns true if valid, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.IsValidStatePrefixAndEntityCodeForLocals(System.String,System.String)">
            <summary>
            Determines if the given tax code and entity code are considered locals.
            </summary>
            <param name="taxCode">The tax code.</param>
            <param name="entityCode">The entity code.</param>
            <returns>Returns true if valid, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.IsLocalUteTaxCode(TaxHub.Models.UteTaxCodeMetadata)">
            <summary>
            Determines if the given tax code metadata is a local ute tax code.
            </summary>
            <param name="taxCodeMetadata">The tax code metadata.</param>
            <returns>Returns true if local, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.IsLocalUteWage(TaxHub.Models.UteTaxCodeMetadata)">
            <summary>
            Determines if the given tax code metadata is a local ute wage.
            </summary>
            <param name="taxCodeMetadata">The tax code metadata.</param>
            <returns>Returns true if local wage, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileIngestion.Rts.ReconciliationAmount.ScrubField(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Scrubs a field.
            </summary>
            <param name="line">The line.</param>
            <param name="field">The field.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
            <returns>Returns the scrubbed field value.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterEmployeeService">
            <summary>
            Interface for employee payroll.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterEmployeeService.Create(TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified prior quarter employee.
            </summary>
            <param name="priorQuarterEmployee">The prior quarter employee.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating the Employee Quarterly
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterEmployeeService.BulkCreate(System.Collections.Generic.List{TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entities.
            </summary>
            <param name="entities">The entities.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of bulk creating several instances of the aggregate.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterEmployeeService.FindOneByEmployeeIdPriorQuarterQrfProcessingIdStateIdLocalIdAndEntityId(System.String,System.Guid,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds one employee by unique employee identifier.
            </summary>
            <param name="eeId">The employee identifier.</param>
            <param name="priorQuarterQrfProcessingId">The prior quarter Qrf processing identifier.</param>
            <param name="stateCode">The State Code.</param>
            <param name="localCode">The Local code.</param>
            <param name="entityCode">The entity Code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Employee with the given PayrollId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterEmployeeService.FindOneByPriorQuarterIdSsnEntityStateLocalEmployeeCode(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds one employee by unique employee identifier.
            </summary>
            <param name="priorQuarterId">The prior quarter identifier.</param>
            <param name="ssn">The SSN.</param>
            <param name="entityCode">The entity Code.</param>
            <param name="stateCode">The State Code.</param>
            <param name="localCode">The Local code.</param>
            <param name="employeeCode">The employee code. This parameter is optional. If not present it will have "" by default</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Employee with the given PayrollId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterEmployeeService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee},System.Int32,TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params1.</param>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="entity">The <see cref="T:TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee"/>.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeMasterProcessor">
            <summary>
            The employee master record for Prior Quarter processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeMasterProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeMasterProcessor"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeMasterProcessor.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeMasterProcessor"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeMasterProcessor.Process(TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeService">
            <summary>
            Implements employee payroll service.
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterEmployeeService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeService.#ctor(TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterEmployeeRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeService"/> class.
            </summary>
            <param name="priorQuarterEmployeeRepository">The employee payroll repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The app logger.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeService.InitializeNew(TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeService.FindOneByEmployeeIdPriorQuarterQrfProcessingIdStateIdLocalIdAndEntityId(System.String,System.Guid,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeService.FindOneByPriorQuarterIdSsnEntityStateLocalEmployeeCode(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeTipsProcessor">
            <summary>
            The employee tips record for Prior Quarter processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeTipsProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeTipsProcessor"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeTipsProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeTipsProcessor"/> class.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeTipsProcessor.Process(TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeWageProcessor">
            <summary>
            The employee wage record for Prior Quarter processing.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeWageProcessor.FeatureToggle">
            <summary>
            The feature toggle configuration.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeWageProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeWageProcessor"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeWageProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeWageProcessor"/> class.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeWageProcessor.Process(TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeWageProcessor.StateLocalWagesDecimal(System.Int32,System.Int32)">
            <summary>
            Parses a decimal from the State Local Wages section.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>A parsed decimal from the State Local Wages section</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeWageProcessor.GetWorksite(TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeWageProcessor)">
            <summary>
            Method returns the alternate code to identify the worksite.
            When present, the Reporting Unit Number is set to zeros and this value is used for reporting.
            Leading and trailing white-space characters will be removed. In addition, only 5 characters will be considered to fit our SQL table.
            </summary>
            <param name="employeeWage">The employee wage</param>
            <returns>A string representing the worksite.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterYearEndDetailsProcessor">
            <summary>
            Represents a Year End details processing record
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterYearEndDetailsProcessor.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterYearEndDetailsProcessor"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterYearEndDetailsProcessor.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterYearEndDetailsProcessor"/>.
            </summary>
            <param name="line">The line</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterQrfInstanceService">
            <summary>
            The prior quarter qrf instance service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterQrfInstanceService.Create(TaxHub.Models.IngestPriorQuarter.PriorQuarterQrfInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified PriorQuarterQrfInstance.
            </summary>
            <param name="priorQuarterQrfInstance">The prior quarter qrf instance.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A create aggregate result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterQrfInstanceService.FindOne(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find one prior quarter qrf instance with given Id.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="id">the identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The prior quarter qrf instance  with the given Id.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterQrfProcessingService">
            <summary>
            The prior quarter qrf processing service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterQrfProcessingService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds a prior quarter QRF processing by ID.
            </summary>
            <param name="id">The ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The prior quarter QRf processing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterQrfProcessingService.FindOne(TaxHub.Models.IngestPriorQuarter.PriorQuarterQrfProcessing,System.Threading.CancellationToken)">
            <summary>
            Finds a prior quarter QRF processing.
            </summary>
            <param name="processing">The prior quarter QRF processing.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The prior quarter QRf processing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterQrfProcessingService.UploadFile(TaxHub.Hosting.Runtime.TemporaryStreamResult,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Uploads a prior quarter QRF file and creates a PriorQuarterQrfProcessing
            to track the status.
            </summary>
            <param name="temporaryStreamResult">The temporary stream result.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A create aggregate extended result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterQrfProcessingService.ProcessFile(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes data in the file uploaded by the user by downloading
            the file from object store.
            </summary>
            <param name="priorQuarterQrfProcessingId">The prior quarter qrf processing id.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>UpdateAggregateExtendedResult PriorQuarterQrfProcessing</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterProcessingRecord">
            <summary>
            Interface for a prior quarter QRF processing record.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterProcessingRecord.Process(TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <summary>
            Processes the record and stores the result in the ImportPriorQuarterResultState object.
            </summary>
            <param name="importResultState">The prior quarter import result state.</param>
            <param name="domainService">The domain service.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState">
            <summary>
            Holds the state of the prior quarter QRF import process.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.#ctor">
            <summary>
            Constructs and instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.PriorQuarterInstance">
            <summary>
            Gets or sets the prior quarter instance.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.PriorQuarterQrfTaxUnits">
            <summary>
            Gets or sets the prior quarter QRF tax units.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.PriorQuarterQrfCounts">
            <summary>
            Gets or sets the prior quarter QRF counts.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.PriorQuarterQrfMiscUnits">
            <summary>
            Gets or sets the prior quarter QRF misc units.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.CurrentPriorQuarterEmployee">
            <summary>
            Gets or sets the current Prior Quarter Employee.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.PriorQuarterEmployees">
            <summary>
            The list of prior quarter employees.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.PriorQuarterEmployeeMiscUnits">
            <summary>
            Gets or sets the current Prior Quarter Employee Misc units.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.PriorQuarterEmployeeTips">
            <summary>
            Sets the current Prior Quarter Employee Tips.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.HasCurrentEmployeeTips">
            <summary>
            Gets a value indicating whether the current employee has tips.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.SetImportFile(System.String)">
            <summary>
            Sets the import file name.
            </summary>
            <param name="filename">The filename value.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.SetPriorQuarterQrfInstanceId(System.Guid)">
            <summary>
            Sets the prior quarter Qrf processing Id.
            </summary>
            <param name="priorQuarterQrfProcessingId">The prior quarter Qrf processing Id.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.SetEeCount(System.Int32)">
            <summary>
            Sets the EeCount for the prior quarter instance.
            </summary>
            <param name="eeCount">The EeCount value.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.SetCurrentLineNumber(System.Int32)">
            <summary>
            Sets the current line number.
            </summary>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.SetClientDetails(System.String,System.Guid)">
            <summary>
            Sets details about the client parsed from the file.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="tenantId">The tenant identifier.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.SetPayrollDetails(System.String,System.Int16,System.Int16,System.String)">
            <summary>
            Sets details about the payroll parsed from the file.
            </summary>
            <param name="payrollCode">The payroll code.</param>
            <param name="quarter">The quarter.</param>
            <param name="year">The year.</param>
            <param name="transactionType">The transaction type.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.SetCurrentPriorQuarterEmployee(TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployeeImportModel)">
            <summary>
            Sets the current prior quarter employee.
            </summary>
            <param name="priorQuarterEmployee">The prior quarter employee object to set.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.HasPayrollErrors">
            <summary>
            Returns the HasPayrollErrors flag.
            </summary>
            <returns>A boolean indicating whether the payroll has errors.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.GetPayrollErrors">
            <summary>
            Gets all the payroll errors in one string.
            </summary>
            <returns>All the payroll errors separated by a semicolon.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.GetPayrollWarnings">
            <summary>
            Gets all the payroll warnings in one string.
            </summary>
            <returns>All the payroll warnings separated by a semicolon.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.GetDistinctRtsTaxCodes(TaxHub.Models.FileIngestion.RtsValidationType)">
            <summary>
            Gets all distinct rts tax codes for a validation type concatenated by semicolon.
            </summary>
            <param name="validationType">The validation type.</param>
            <returns>The concatenated rts tax codes.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.GetQuarter">
            <summary>
            Returns the prior quarter.
            </summary>
            <returns>The prior quarter.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.GetClientId">
            <summary>
            Gets the client identifier.
            </summary>
            <returns>The client identifier.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.GetCurrentEmployee">
            <summary>
            Gets the current Prior Quarter employee.
            </summary>
            <returns>The current Prior Quarter employee being processed.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.GetCurrentEmployeeMiscCount">
            <summary>
            Gets the count of misc units associated with the current prior quarter employee.
            </summary>
            <returns>The number representing the amount of misc units for the current prior quarter employee.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.GetPriorQuarterEmployeeBatchCount">
            <summary>
            Gets count of processed prior quarter employees.
            </summary>
            <returns>Number of prior quarter employees.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.ContainsCurrentEmployeeMiscs(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Determines whether the dictionary of PriorQuarterEmployeeMiscUnits contains the specified employee details.
            </summary>
            <param name="ssn">The SSN.</param>
            <param name="entityCode">The entity code.</param>
            <param name="stateCode">The state code.</param>
            <param name="localCode">The local code.</param>
            <param name="ultiProTaxCode">The UltiPro tax code.</param>
            <returns>A Boolean indicating whether the dictionary contains the specified key.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.Include(TaxHub.Models.IngestPriorQuarter.PriorQuarterAmount)">
            <summary>
            Adds or updates the prior quarter amounts.
            </summary>
            <param name="value">The value to add or update</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.IncludeCurrentEmployee">
            <summary>
            Includes the current employee.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.AddEmployeeTips(System.String,System.String,System.Nullable{System.Int32},System.String,TaxHub.Common.Enums.TaxCodeType,System.Action{TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployeeTipsImportModel}[])">
            <summary>
            Adds employee tips to the PriorQuarterEmployeeTips dictionary.
            </summary>
            <param name="ssn">The SSN.</param>
            <param name="employeeNumber">The employee number.</param>
            <param name="taxId">The tax identifier.</param>
            <param name="ultiProTaxCode">The UltiPro tax code.</param>
            <param name="taxType">The tax type.</param>
            <param name="modifiers">The action methods.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.AddValidation(TaxHub.Models.FileIngestion.RtsLineValidation)">
            <summary>
            Adds a validation to the payroll validation collection.
            </summary>
            <param name="lineValidation">The line validation.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.AssemblePriorQuarterQrfInstance(System.String)">
            <summary>
            Assembles a PriorQuarterQrfInstance object.
            </summary>
            <returns>A PriorQuarterQrfInstance</returns>
            <param name="userDescription">The user description.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.AssemblePriorQuarterEmployees(System.String)">
            <summary>
            Assembles the list of prior quarter employees.
            </summary>
            <param name="userDescription">The user description.</param>
            <returns>List of prior quarter employees.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.ResetAll">
            <summary>
            Clears the import state.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.ResetEmployees">
            <summary>
            Clears the list of prior quarter employees.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.ResolvePriorQuarterAmount(System.Int32,System.String,TaxHub.Common.Enums.TaxCodeType)">
            <summary>
            Resolves the current PriorQuarterAmount object using the tax identifier.
            </summary>
            <param name="taxId">The tax identifier.</param>
            <param name="ultiProTaxCode">The UltiPro tax code.</param>
            <param name="taxType">The tax type.</param>
            <returns>The resolved PriorQuarterAmount object.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.ResolvePriorQuarterMiscUnit(System.Nullable{System.Int32},System.String,TaxHub.Common.Enums.TaxCodeType,System.String,System.String,System.String)">
            <summary>
            Resolves the current PriorQuarterMiscUnit object using the UltiPro tax code, state code, entity code and local code.
            </summary>
            <param name="taxId">The tax identifier.</param>
            <param name="ultiProTaxCode">The UltiPro tax code.</param>
            <param name="taxType">The tax type.</param>
            <param name="stateCode">The state code.</param>
            <param name="entityCode">The entity code.</param>
            <param name="localCode">The local code.</param>
            <returns>The resolved PriorQuarterMiscUnit object.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.ResolvePriorQuarterCount(System.Nullable{System.Int32},System.String,TaxHub.Common.Enums.TaxCodeType,System.String)">
            <summary>
            Resolves the current PriorQuarterCount object using the UltiPro tax code and state code.
            </summary>
            <param name="taxId">The tax identifier.</param>
            <param name="ultiProTaxCode">The UltiPro tax code.</param>
            <param name="taxType">The tax type.</param>
            <param name="stateCode">The state code</param>
            <returns>The resolved PriorQuarterCount object.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.ResolveCurrentEmployeeMisc(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,TaxHub.Common.Enums.TaxCodeType)">
            <summary>
            Resolves the current prior quarter employee misc object.
            </summary>
            <param name="ssn">The SSN.</param>
            <param name="entityCode">The entity code.</param>
            <param name="stateCode">The state code.</param>
            <param name="localCode">The local code.</param>
            <param name="taxId">The tax identifier.</param>
            <param name="ultiProTaxCode">The UltiPro tax code.</param>
            <param name="taxType">The tax type.</param>
            <returns>The resolved PriorQuarterCount object.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState.ResolvePayrollValidation">
            <summary>
            Returns the payroll validation object.
            </summary>
            <returns>The payroll validation object.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfInstanceService">
            <summary>
            The prior quarter qrf instance service.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfInstanceService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfInstanceService.#ctor(TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterQrfInstanceRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfInstanceService"/> class.
            </summary>
            <param name="priorQuarterQrfInstanceRepository">The repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfInstanceService.InitializeNew(TaxHub.Models.IngestPriorQuarter.PriorQuarterQrfInstance)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfInstanceService.FindOne(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfLineParser">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfLineParser.Create(System.IO.StreamReader,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructs an instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfLineParser"/> class.
            </summary>
            <param name="streamReader">The stream reader.</param>
            <param name="logger">The logger.</param>
            <returns>An instance of <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfLineParser"/></returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingService">
            <summary>
            The Prior Quarter QRF Processing Service
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingService.DefaultExpirationTimeInMinutes">
            <summary>
            The default object store expiration time in minutes.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingService.EmployeeBatchSize">
            <summary>
            The employee batch size.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingService.EventInstanceCreated">
            <summary>
            Gets the event created name.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingService.#ctor(TaxHub.CoreServices.DataAccess.IngestPriorQuarter.MongoDbStore.IPriorQuarterQrfProcessingRepository,TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterQrfInstanceService,TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterEmployeeService,TaxHub.CoreServices.Application.IInboundFileService,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Common.Configuration.IFileManagementConfiguration,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingService"/> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="priorQuarterQrfInstanceService">The prior quarter QRF instance service.</param>
            <param name="priorQuarterEmployeeService">The prior quarter employee service.</param>
            <param name="inboundFileService">The inbound file service.</param>
            <param name="domainService">The Domain Service.</param>
            <param name="fileManagementConfiguration">The file management config</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The app logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingService.InitializeNew(TaxHub.Models.IngestPriorQuarter.PriorQuarterQrfProcessing)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingService.FindOne(TaxHub.Models.IngestPriorQuarter.PriorQuarterQrfProcessing,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingService.UploadFile(TaxHub.Hosting.Runtime.TemporaryStreamResult,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingService.ProcessFile(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterFileHeaderProcessor">
            <summary>
            The file header for prior quarter QRF processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterFileHeaderProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterFileHeaderProcessor"/> class.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterFileHeaderProcessor.Process(TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterFileTrailerProcessor">
            <summary>
            The file trailer for prior quarter QRF processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterFileTrailerProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterFileTrailerProcessor"/> class.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterFileTrailerProcessor.Process(TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterPayrollHeaderProcessor">
            <summary>
            The payroll header for prior quarter QRF processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterPayrollHeaderProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterPayrollHeaderProcessor"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterPayrollHeaderProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterPayrollHeaderProcessor"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterPayrollHeaderProcessor.Process(TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterPayrollTrailerProcessor">
            <summary>
            The payroll trailer for prior quarter QRF processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterPayrollTrailerProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterPayrollTrailerProcessor"/> class.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterPayrollTrailerProcessor.Process(TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterReconciliationAmountProcessor">
            <summary>
            Represents a reconciliation amount record for prior quarter processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterReconciliationAmountProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterReconciliationAmountProcessor"/>
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterReconciliationAmountProcessor.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterReconciliationAmountProcessor"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterReconciliationAmountProcessor.Process(TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeStatisticProcessor">
            <summary>
            Represents an employee statistic for prior quarter processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeStatisticProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeStatisticProcessor"/> class.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeStatisticProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeStatisticProcessor"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterEmployeeStatisticProcessor.Process(TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState,TaxHub.Hosting.Runtime.IDomainService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingRule`1">
            <summary>
            This class represents the prior quarter QRF processing rule.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingRule`1.IsMatch">
            <summary>
            Determines whether the given record and tax code mapping data match.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingRule`1.ApplyProcessing">
            <summary>
            Applies the processing method and updates the PriorQuarterImportResultState object.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingRule`1.ApplyProcessingMethods(System.Collections.Generic.ICollection{TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterQrfProcessingRule{`0}},System.Collections.Generic.ICollection{TaxHub.Models.UteTaxCodeMetadataExtended},`0,TaxHub.CoreServices.Application.IngestPriorQuarter.PriorQuarterImportResultState)">
            <summary>
            Applies a collection of processing methods to the given record.
            </summary>
            <param name="processingMethods">The processing methods.</param>
            <param name="uteTaxCodeMetadatas">The RTS to UTE tax code mapping data.</param>
            <param name="record">The record.</param>
            <param name="importResultState">The result state.</param>
            <returns>True if any processing method matched, or False otherwise.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.ILongValueRetriever">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.OperationResultValueRetriever">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.OperationResultValueRetriever.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.CumulativeTimerMetrics`1">
            <summary>
            Used to track time.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.CumulativeTimerMetrics`1.#ctor(TaxHub.CoreServices.Application.Metrics.IApplicationMetrics,System.String,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.Metrics.CumulativeTimerMetrics`1" /> class.
            </summary>
            <param name="metrics">The metrics.</param>
            <param name="sectionName">Name of the section.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.CumulativeTimerMetrics`1.TrackTime(`0)">
            <summary>
            Tracks the time.
            </summary>
            <param name="section">The section.</param>
            <returns>A new instance of TimeTracker</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.CumulativeTimerMetrics`1.PublishTimeMetrics(System.String,System.String[],System.String[])">
            <summary>
            Publishes the time metrics.
            </summary>
            <param name="metricName">Name of the metric.</param>
            <param name="tagNames">The tag names.</param>
            <param name="tagValues">The tag values.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.TimeTrackerContext`1">
            <summary>
            Starts tracking time when object instantiated. Stops tracking time when object is disposed.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.TimeTrackerContext`1.#ctor(`0,System.Collections.Concurrent.ConcurrentDictionary{`0,System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.Metrics.TimeTrackerContext`1"/> class.
            </summary>
            <param name="section">The section.</param>
            <param name="sectionTimes">The section times.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.TimeTrackerContext`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.TemporaryStreamResultRetriever">
            <summary>
            Implements IValueRetriever for TemporaryStreamResult 
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.TemporaryStreamResultRetriever.Length">
            <summary>
            Get length from TemporaryStreamResult
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.TemporaryStreamResultRetriever.Length.GetValue(System.Object)">
            <summary>
            Get value
            </summary>
            <param name="value">The value</param>
            <returns>the length</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.ApplicationMetricsBuilder">
            <inheritdoc />
            <summary>
            The ApplicationMetricsBuilder
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetricsBuilder.#ctor(SmartHub.Metrics.IAppMetricsFactory)">
            <summary>
            Constructor
            </summary>
            <param name="appMetricsFactory">The app metrics factory</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetricsBuilder.Create">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.IApplicationMetrics">
            <summary>
            IApplicationMetrics interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.IApplicationMetrics.Increment(System.String,SmartHub.Metrics.Tags,System.Int64)">
            <summary>
            Increments a counter
            </summary>
            <param name="name">The name</param>
            <param name="tags">The tags</param>
            <param name="amount">The amount</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.IApplicationMetrics.Decrement(System.String,SmartHub.Metrics.Tags,System.Int64)">
            <summary>
            Decrements a counter
            </summary>
            <param name="name">The name</param>
            <param name="tags">The tags</param>
            <param name="amount">The amount</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.IApplicationMetrics.Update(System.String,SmartHub.Metrics.Tags,System.Int64)">
            <summary>
            Updates a histogram
            </summary>
            <param name="name">The name</param>
            <param name="tags">The tags</param>
            <param name="value">The value</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.IApplicationMetrics.Time(System.String,SmartHub.Metrics.Tags)">
            <summary>
            Returns a TimerMetricContext that can be used for measuring time.
            </summary>
            <param name="name">The name</param>
            <param name="tags">The tags</param>
            <returns>Returns a TimerMetricContext</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.IMeasurement">
            <summary>
            IMeasurement interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.IMeasurement.Counter(System.String,SmartHub.Metrics.CounterMetricOptions)">
            <summary>
            Adds a counter
            </summary>
            <param name="name">The name</param>
            <param name="options">The options</param>
            <returns>The next operation</returns>
            <exception cref="T:TaxHub.CoreServices.Application.Metrics.InvalidMetricNameException">An exception representing an invalid name for the counter</exception>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.IMeasurement.Histogram(System.String,SmartHub.Metrics.HistogramMetricOptions)">
            <summary>
            Adds a histogram
            </summary>
            <param name="name">The name</param>
            <param name="options">The options</param>
            <returns>The next object</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.IMeasurement.Timer(System.String,SmartHub.Metrics.TimerMetricOptions)">
            <summary>
            Adds a timer
            </summary>
            <param name="name">The name</param>
            <param name="options">The options</param>
            <returns>The next object</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.IMeasurement.Meter">
            <summary>
            Adds a meter
            </summary>
            <returns>The next object</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.INext">
            <summary>
            INext interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.INext.And">
            <summary>
            Continuation and
            </summary>
            <returns>The IMeasurement to continue</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.INext.Instrument">
            <summary>
            Ending method
            </summary>
            <returns>The IApplicationMetrics to work with</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder">
            <summary>
            The IApplicationMetricsBuilder interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder.Create">
            <summary>
            Creates an IApplicationMetricsCreated
            </summary>
            <returns>The IApplicationMetricsCreated</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.IApplicationMetricsCreated">
            <summary>
            The IMetrics interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.IApplicationMetricsCreated.With">
            <summary>
            Continuation with
            </summary>
            <returns>The IMeasurement to continue</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics">
            <inheritdoc cref="T:TaxHub.CoreServices.Application.Metrics.IApplicationMetrics" />
            <summary>
            Metrics class
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics.#ctor(SmartHub.Metrics.IAppMetricsFactory)">
            <summary>
            Constructor
            </summary>
            <param name="metricsFactory">The metrics factory</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics.With">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics.Counter(System.String,SmartHub.Metrics.CounterMetricOptions)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics.Histogram(System.String,SmartHub.Metrics.HistogramMetricOptions)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics.Timer(System.String,SmartHub.Metrics.TimerMetricOptions)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics.Meter">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics.And">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics.Instrument">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics.Increment(System.String,SmartHub.Metrics.Tags,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics.Decrement(System.String,SmartHub.Metrics.Tags,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics.Update(System.String,SmartHub.Metrics.Tags,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.ApplicationMetrics.Time(System.String,SmartHub.Metrics.Tags)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Metrics.InvalidMetricNameException">
            <inheritdoc />
            <summary>
            An exception class for metrics
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Metrics.InvalidMetricNameException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.QuarterEnd.IQuarterOpenService">
            <summary>
            Quarter End Services.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEnd.IQuarterOpenService.IsClientsQuarterOpenForPayroll(System.String,TaxHub.Common.Models.Quarter,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Determine whether the supplied Payroll quarter is the client's open quarter:
            1- If the client does not have any quarter end info in QE_PHASE,
               then the "current open quarter" should be the first one that
               we have payroll data for (a Valid non-prepaid, and either regular or QEADJ post_payroll)
            2- If for some reason the client doesn't have any valid post_payroll records,
               then just default the open quarter to the quarter based on the current date.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="payrollQuarter">The payroll quarter to validate against</param>
            <param name="currentDate">The current date.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if client is in open quarter</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEnd.IQuarterOpenService.DetermineClientsOpenQuarter(System.String,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Determine client's latest open quarter
            
            1- If the client does not have any quarter end info in QE_PHASE,
               then the "current open quarter" should be the first one that
               we have payroll data for (a Valid non-prepaid, and either regular or QEADJ post_payroll)
            2- If for some reason the client doesn't have any valid post_payroll records,
               then just default the open quarter to the quarter based on the current date.
            </summary>
            <param name="clientId">The clientId</param>
            <param name="currentDate">The current date</param>
            <param name="cancellationToken">The cancellationToken</param>
            <returns>The client's current open quarter</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.QuarterEnd.QuarterOpenService">
            <summary>
            The QuarterOpenService class
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEnd.QuarterOpenService.#ctor(TaxHub.CoreServices.Application.IQuarterEndPhaseService,TaxHub.CoreServices.Application.Banking.IPostPayrollService)">
            <summary>
            Constructor
            </summary>
            <param name="quarterEndPhaseService">The quarterEndPhaseService</param>
            <param name="postPayrollService">The postPayrollService</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEnd.QuarterOpenService.IsClientsQuarterOpenForPayroll(System.String,TaxHub.Common.Models.Quarter,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEnd.QuarterOpenService.DetermineClientsOpenQuarter(System.String,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IDomainEventOutboxService">
            <summary>
            Defines all domain event outbox services.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDomainEventOutboxService.DispatchOutboxDomainEventsAsync(System.DateTime,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Dispatch all domain events in the outbox.
            </summary>
            <param name="scheduledUtcDt">The timestamp of when the job was first triggered.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>OperationResult with total events published</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.IA2AMeFClientService">
            <summary>
            Interface for A2AMefClient Service class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IA2AMeFClientService.LogIn(System.String@)">
            <summary>
            Logs in.
            </summary>
            <param name="validationErrors">The validation errors.</param>
            <returns>True if log in was successful.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IA2AMeFClientService.LogOut(System.String@)">
            <summary>
            Logs out.
            </summary>
            <param name="validationErrors">The validation errors.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IA2AMeFClientService.GetAck(System.String,System.String@)">
            <summary>
            Gets the ack.
            </summary>
            <param name="subId">The sub identifier.</param>
            <param name="validationErrors">The validation errors.</param>
            <returns>Gets Ack Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IA2AMeFClientService.SendSubmission(MeF.Client.Services.TransmitterServices.SubmissionContainer,System.String@)">
            <summary>
            Sends the submission.
            </summary>
            <param name="container">The container.</param>
            <param name="validationErrors">Exception content</param>
            <returns>Result of Sending Submission</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.A2AMeFClientService">
            <summary>
            A2ATransmissionService
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.Filing.IA2ATransmissionService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.A2AMeFClientService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IEFilingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.Filing.A2AMeFClientService" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="eFilingConfig">The e filing configuration.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.A2AMeFClientService.LogIn(System.String@)">
            <inheritdoc />>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.A2AMeFClientService.LogOut(System.String@)">
            <inheritdoc />>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.A2AMeFClientService.SendSubmission(MeF.Client.Services.TransmitterServices.SubmissionContainer,System.String@)">
            <inheritdoc />>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.A2AMeFClientService.GetAck(System.String,System.String@)">
            <inheritdoc />>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.A2AMeFClientService.GetExceptionInfo(System.Exception)">
            <summary>
            Extract the exception description including Message, InnerException and ErrorExceptionDetail
            </summary>
            <param name="exception">Exception</param>
            <returns>Exception messages</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.IA2ATransmissionService">
            <summary>
            Interface for A2ATransmissionService.
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.Filing.IEFileTransmissionService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IA2ATransmissionService.ZipFiles(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Int32)">
            <summary>
            Zips the files.
            </summary>
            <param name="eFileTransmission">The e file transmission.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="maxPerContainer">The maximum no of files in the zip container</param>
            <returns>Returns Submission Container containing zipped files.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IA2ATransmissionService.CreateIrsSubmissionArchiveMem(System.String,System.String,System.String[])">
            <summary>
            Creates the irs submission archive memory.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="submissionId">The submission identifier.</param>
            <param name="files">The files.</param>
            <returns>Submission Archive</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IA2ATransmissionService.SaveAcknowledgement(System.Xml.XmlDocument,TaxHub.Models.EFilingClientStatus,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Saves the acknowledgement.
            </summary>
            <param name="xml">The XML.</param>
            <param name="clientSubmission">The client submission.</param>
            <param name="clientName">Name of the client.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            True if Saving Ack was successful, otherwise false.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.A2ATransmissionService">
            <summary>
            A2ATransmissionService
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.Filing.IA2ATransmissionService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.A2ATransmissionService.#ctor(TaxHub.CoreServices.Application.Filing.IEFilingService,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IEFilingConfiguration,TaxHub.CommonServices.FileManagement.Application.IFileService,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.Filing.IEFilingAcknowledgmentService,TaxHub.CoreServices.Application.Filing.IA2AMeFClientService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.Filing.A2ATransmissionService"/> class.
            </summary>
            <param name="eFilingService">The e filing service.</param>
            <param name="logger">The logger.</param>
            <param name="eFilingConfiguration">The e filing configuration.</param>
            <param name="fileService">The file service.</param>
            <param name="clientService">The client service.</param>
            <param name="eFilingAcknowledgmentService">The e filing acknowledgment service.</param>
            <param name="a2aMeFClientService">The a2a me f client service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.A2ATransmissionService.SubmitEFiles(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.A2ATransmissionService.ReceiveAcknowledgments(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.A2ATransmissionService.ZipFiles(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Int32)">
            <summary>
            Zips the files.
            </summary>
            <param name="eFileTransmission">The e file transmission.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="maxPerContainer">The maximum no of files in the zip container</param>
            <returns>List of SubmissionContainer</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.A2ATransmissionService.CreateIrsSubmissionArchiveMem(System.String,System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.A2ATransmissionService.SaveAcknowledgement(System.Xml.XmlDocument,TaxHub.Models.EFilingClientStatus,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.FedEFileValidationService">
            <summary>
            Implementation of Fed 940/941 Validation Stories.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.FedEFileValidationService.#ctor(TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.FederalElectronicTransferService"/> class.
            </summary>
            <param name="domainService">The domain service</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.IFedEFileValidationService">
            <summary>
            Interface for Fed Efile Validation service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IFedEFileValidationService.ValidateMefQuarterEndFiling(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Determines whether efiling xml is a valid mef formart file for quarter end efiles.
            </summary>
            <param name="eFiling">The e filing.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns a list of valid and invalid efiling clients</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IFedEFileValidationService.ValidateMefYearEndFiling(TaxHub.Models.EFiling,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Determines whether efiling xml is a valid mef formart file for year end efiles.
            </summary>
            <param name="eFiling">The e filing.</param>
            <param name="creditReductionStates"> Credit Reduction states </param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns a list of valid and invalid efiling clients</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IFedEFileValidationService.GetXmlDocumentsFromFileId(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Gets the XML documents parsed from xml file from ObjectStorage using FileId
            </summary>
            <param name="fileId">The file identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Dictonary of XmlDocuments with Root Tag Name</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.EFileTransmissionFactory">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFileTransmissionFactory.#ctor(TaxHub.CoreServices.Application.Filing.IEFileTransmissionService,TaxHub.CoreServices.Application.Filing.IEFileTransmissionService)">
            <summary>
            Constructor for Transmission Factory.
            </summary>
            <param name="iaFSETTransmissionService">The transmission service for IASUI FSET</param>
            <param name="a2aTransmissionService">The transmission service for IRS A2A</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFileTransmissionFactory.GetTransmissionService(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingCompositeService.SubmitEFiles(System.Collections.Generic.List{System.Guid},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingCompositeService.ReceiveAcknowledgments(System.Collections.Generic.List{System.Guid},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingCompositeService.GetEFilings(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingCompositeService.GetEFilings(TaxHub.Models.Commands.EFilingFilterCommand,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingCompositeService.Update(System.Guid,TaxHub.Models.EFiling,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingCompositeService.Update(System.Guid,TaxHub.Models.EFilingAcknowledgment,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.IFSETIAClientService">
            <summary>
            Wrapper Service Interface for FSET.IA Service References
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IFSETIAClientService.SubmitClient(System.Xml.Linq.XDocument)">
            <summary>
            Submits the client
            </summary>
            <param name="xmlDoc">The XML document.</param>
            <returns>Returns ProcessWages Submission Reponse </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IFSETIAClientService.ReceiveAcknowledgment(System.String,System.String)">
            <summary>
            Recieves the acknowledgment.
            </summary>
            <param name="eFIN">The e fin.</param>
            <param name="contentLocation">The content location.</param>
            <returns>Returns RecieveAckData Response  </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.FSETIAClientService">
            <summary>
            Wrapper Service Class for FSET.IA Service References
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.Filing.IFSETIAClientService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.FSETIAClientService.#ctor(TaxHub.Common.Configuration.IEFilingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.Filing.FSETIAClientService"/> class.
            </summary>
            <param name="eFilingConfiguration">The e filing configuration.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.FSETIAClientService.SubmitClient(System.Xml.Linq.XDocument)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.FSETIAClientService.ReceiveAcknowledgment(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.IEFileTransmissionFactory">
            <summary>
            Will manage and create instances of EFileTransmissionService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFileTransmissionFactory.GetTransmissionService(System.String)">
            <summary>
            Returns the transmission service for the specified payee.
            </summary>
            <param name="payeeId">The Payee</param>
            <returns>An IEFileTransmissionService</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingCompositeService.ProcessSubmission(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Submit EFiles for an EFiling Submission.
            </summary>
            <param name="submissionID">The Submission ID.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The Cancellation Token.</param>
            <returns>Returns True if process completed successfuly.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingCompositeService.SubmitEFiles(System.Collections.Generic.List{System.Guid},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Submit EFiles for serveral EFiling Submissions.
            </summary>
            <param name="submissionID">The Submission IDs.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The Cancellation Token.</param>
            <returns>Returns True if process completed successfuly.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingCompositeService.ProcessReceiveAcknowledgments(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Receive Acknowledgments for all the EFiles in an EFiling Submission.
            </summary>
            <param name="submissionID">The Submission ID.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The Cancellation Token.</param>
            <returns>Returns True if process completed successfuly.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingCompositeService.ReceiveAcknowledgments(System.Collections.Generic.List{System.Guid},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Receive Acknowledgments for all the EFiles in serveral EFiling Submission.
            </summary>
            <param name="submissionID">The Submission IDs.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The Cancellation Token.</param>
            <returns>Returns True if process completed successfuly.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingCompositeService.GetEFilings(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get an EFiling object by id.
            </summary>
            <param name="id">The Id of the eFiling object.</param>
            <param name="cancellationToken">The cancellation Token.</param>
            <returns>EFiling Object</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingCompositeService.GetEFilings(TaxHub.Models.Commands.EFilingFilterCommand,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method Get the list of Efilings.
            </summary>
            <param name="efileTransmissionCommand">The efileTransmissionCommand.</param>
            <param name="pageParams">The paged parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Efiling <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingCompositeService.Update(System.Guid,TaxHub.Models.EFiling,System.Threading.CancellationToken)">
            <summary>
            Updates the identified EFiling Submission.
            </summary>
            <param name="id">The identifier.</param>
            <param name="efile">The efile.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingCompositeService.Update(System.Guid,TaxHub.Models.EFilingAcknowledgment,System.Threading.CancellationToken)">
            <summary>
            Updates the identified Acknowledgment.
            </summary>
            <param name="id">The identifier.</param>
            <param name="efileAcknowledgment">The acknowledgment.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingCompositeService.CreateAcknowledments(System.Collections.Generic.IEnumerable{TaxHub.Models.EFilingAcknowledgment},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Create a series of Acknowledgment entities.
            </summary>
            <param name="acknowledgments">The acknowledgments.</param>
            <param name="eventDataParams">The event data param.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of CreateAggregateResult</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.EFilingAcknowledgmentService">
            <summary>
            Implements EFilingAcknowledgment service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingAcknowledgmentService.#ctor(TaxHub.CoreServices.DataAccess.Filing.IEFilingAcknowledgmentRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IEFilingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.Filing.EFilingAcknowledgmentService"/> class.
            </summary>
            <param name="repository">Repository</param>
            <param name="domainService">The domain service</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
            <param name="eFilingConfiguration">The conffiguration for EFiling.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingAcknowledgmentService.InitializeNew(TaxHub.Models.EFilingAcknowledgment)">
            <summary>
            Intializes efiling Acknowledgment.
            </summary>
            <param name="eFilingAcknowledgment">EFilingAcknowledgment</param>
            <returns>eFilingAcknowledgment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingAcknowledgmentService.FindOneById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>EFilingAcknowledgment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingAcknowledgmentService.FindAll(System.Threading.CancellationToken)">
            <summary>
            Finds all.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns all the EFilingAcknowledgments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingAcknowledgmentService.FindOneBySubmissionId(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all.
            </summary>
            <param name="submissionId">The submission Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the EFilingAcknowledgments for submission Id</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.IEFilingAcknowledgmentService">
            <summary>
            Interface for  Efiling Acknowledgment
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingAcknowledgmentService.FindOneById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one by identifier.
            </summary>
            <param name="id">The EFiling Acknowledgment identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>EFiling Acknowledgment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingAcknowledgmentService.FindOneBySubmissionId(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the one by identifier.
            </summary>
            <param name="id">The Submission Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>EFiling Acknowledgment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingAcknowledgmentService.Create(TaxHub.Models.EFilingAcknowledgment,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingAcknowledgmentService.Create(System.Collections.Generic.IEnumerable{TaxHub.Models.EFilingAcknowledgment},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates all the specified entities.
            </summary>
            <param name="entities">The entities.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingAcknowledgmentService.Update(System.Guid,TaxHub.Models.EFilingAcknowledgment,System.Threading.CancellationToken)">
            <summary>
            Update the specified EFilingAcknowledgment entity.
            </summary>
            <param name="id">The identifier.</param>
            <param name="eFileAcknowledgment">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if successeful.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.EFilingService">
            <summary>
            Implementation of application layer for EFiling
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.#ctor(TaxHub.CoreServices.DataAccess.Filing.IEFilingRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IEFilingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.FederalElectronicTransferService"/> class.
            </summary>
            <param name="repository">Repository</param>
            <param name="domainService">The domain service</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
            <param name="eFilingConfiguration">The conffiguration for EFiling.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.FindOneById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A2AElectronicFileTranfer</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.GetEFilings(TaxHub.Models.Commands.EFilingFilterCommand,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get Efiling Submissions.
            </summary>
            <param name="efileTransmissionCommand">The efileTransmission command.</param>
            <param name="pageParams">The page params.</param>
            <param name="cancellationToken">The Cancellation token.</param>
            <returns>Efiling listA <see /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Int32,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.FindAllEFileSubmission(System.String,System.Int32,System.Int32,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Int32,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all e file submission.
            </summary>
            <param name="payeeId">The payee identifier.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="typeId">Return type id</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Matching EFiling records.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.Update(System.Guid,TaxHub.Models.EFiling,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.UpdateStatuses(System.Collections.Generic.List{System.Guid},TaxHub.Shared.Services.EventDataParams,TaxHub.Models.EFilingStatus,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.StartEFileSubmissions(System.Collections.Generic.List{System.Guid},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.GetXmlDocumentsFromFileId(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.CreateEFilingWithValidation(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.StartReceivingAcknowledgements(System.Collections.Generic.List{System.Guid},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.EFilingService.ValidateMEFEFiling(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.FSETIATransmissionService.ReceiveAcknowledgments(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.FSETIATransmissionService.GetElementValue(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Returns the value of an xml element that is found by traversing from it ancestor down the provided xPath
            
            WARNING: If the root element contains multiple children with the same name, the first one in document order will be followed in the xPath.
            </summary>
            <param name="rootElement">THe node on which to start</param>
            <param name="xPath">The path which to follow</param>
            <param name="defaultValue">The value to return if nothing is found</param>
            <returns>The value if it exists, defaultValue otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFileTransmissionService.SubmitEFiles(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Submit efiles of associated efile submission requests.
            </summary>
            <param name="eFiling">The efile submissions.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if submission process completed successfully.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFileTransmissionService.ReceiveAcknowledgments(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Request acknowledgement files for efiles in the associated efile submission requests.
            </summary>
            <param name="submission">The efile submissions.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancelation token.</param>
            <returns>True if the acknowledgements process completed succesfully.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Filing.IEFilingService">
            <summary>
            The application layer of the EFiling Aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.FindOneById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one by identifier.
            </summary>
            <param name="id">The efiling identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>EFiling</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.Create(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.GetEFilings(TaxHub.Models.Commands.EFilingFilterCommand,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method Get the list of Efilings.
            </summary>
            <param name="efileTransmissionCommand">The efileTransmissionCommand.</param>
            <param name="pageParams">The paged parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Efiling <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <summary>
            Find all Efile submissions.
            </summary>
            <param name="payeeId">The Payee Id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="cancellationToken">The cacellation token</param>
            <param name="pageParams">The Paged Params</param>
            <returns>
            Returns Efiling list.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Int32,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <summary>
            Find all Efile submissions.
            </summary>
            <param name="payeeId">The Payee Id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="returnTypeID">The ID of the ReturnType</param>
            <param name="status">The Status of the EFiling submission.</param>
            <param name="cancellationToken">The cacellation token</param>
            <param name="pageParams">The Paged Params</param>
            <returns>
            Returns Efiling list.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <summary>
            Find all Efile submissions.
            </summary>
            <param name="payeeId">The Payee Id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="returnTypeID">The ID of the ReturnType</param>
            <param name="cancellationToken">The cacellation token</param>
            <param name="pageParams">The Paged Params</param>
            <returns>
            Returns Efiling list.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.FindAllEFileSubmission(System.String,System.Int32,System.Int32,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <summary>
            Find all Efile submissions.
            </summary>
            <param name="payeeId">The Payee Id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="status">The status.</param>
            <param name="cancellationToken">The cacellation token</param>
            <param name="pageParams">The Paged Params</param>
            <returns>Returns Efiling list.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Int32,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken)">
            <summary>
            Find all Efile submissions.
            </summary>
            <param name="payeeId">The Payee Id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="typeId">The quarter.</param>
            <param name="status">The status.</param>
            <param name="cancellationToken">The cacellation token</param>
            <returns>Returns Efiling list.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.FindAllByFormName(System.String,System.Threading.CancellationToken)">
            <summary>
            Find all EFile submissions with a certain formname.
            </summary>
            <param name="formName">The Name of the return/form.</param>
            <param name="cancellationToken">The cancelation token.</param>
            <returns>Returns Efiling list.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Counts the specified filter parameters.
            </summary>
            <param name="filterParams">The filter parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns count of EFiling records for specified filter parameters.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.ValidateMEFEFiling(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Determines whether efiling xml is a valid mef formart file.
            </summary>
            <param name="eFiling">The e filing.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns a list of valid and invalid efiling clients</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.GetXmlDocumentsFromFileId(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Gets the XML documents parsed from xml file from ObjectStorage using FileId
            </summary>
            <param name="fileId">The file identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Dictonary of XmlDocuments with Root Tag Name</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.GetCreditReductionStates(System.Threading.CancellationToken)">
            <summary>
            Gets the Credit Reduction States stored in SQL table Payee_Efile_Info
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>String with all credit reduction states (comma-separated)</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.Update(System.Guid,TaxHub.Models.EFiling,System.Threading.CancellationToken)">
            <summary>
            Updates the specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="efile">The efile.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.UpdateStatuses(System.Collections.Generic.List{System.Guid},TaxHub.Shared.Services.EventDataParams,TaxHub.Models.EFilingStatus,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken)">
            <summary>
            Bulk Update Status for a set of Efiling Submissions Requests with a certain status.
            </summary>
            <param name="submissionIDs">The Submission IDs.</param>
            <param name="eventDataParams">The Event data params.</param>
            <param name="sourceStatus">The Status to filter submissions by.</param>
            <param name="targetStatus">The Status to update submissions to.</param>
            <param name="cancellationToken">The Cancellation Token.</param>
            <returns>A list of the Efiling Submissions that where successfully Updated.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.StartEFileSubmissions(System.Collections.Generic.List{System.Guid},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Start the EFile Submission Process for specified submissions.
            </summary>
            <param name="submissionIDs">The Submission IDs.</param>
            <param name="eventDataParams">The parameters needed to publish events.</param>
            <param name="cancellationToken">The parameters needed to publish events.</param>
            <returns>A list of the the result of aggregation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.CreateEFilingWithValidation(TaxHub.Models.EFiling,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the efiling with validation.
            </summary>
            <param name="eFiling">The e filing.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Filing.IEFilingService.StartReceivingAcknowledgements(System.Collections.Generic.List{System.Guid},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Start Receiving of Acknowledgements for submitted Efiles
            </summary>
            <param name="submissionIDs">The Submission IDs.</param>
            <param name="eventDataParams">The parameters needed to publish events.</param>
            <param name="cancellationToken">The parameters needed to publish events.</param>
            <returns>A list of the the result of aggregation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CreditApplicationLiabilityDetails.CreditApplicationLiabilityDetailBuilderFactory.CreateBuilders(TaxHub.Models.Payment,TaxHub.Models.CreditTracking,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.ClientAgencyImportService">
            <summary>
            The ClientAgencyImportService
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.ClientAgencyImportService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.ClientAgencyImportService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyImportService.#ctor(TaxHub.CoreServices.DataAccess.IClientAgencyImportRequestRepository,TaxHub.CoreServices.Application.IClientAgencyService,TaxHub.CoreServices.Application.IClientNoteService,TaxHub.CoreServices.Application.IClientService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.ObjectStorage.Integration.IObjectStoreServiceClient,TaxHub.Hosting.Runtime.IHashProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.ClientAgencyImportService"/> class.
            </summary>
            <param name="repo">The ClientAgencyImportRequestRepository</param>
            <param name="clientAgencyService">The client agency service.</param>
            <param name="clientNoteService">The client note service.</param>
            <param name="clientService">The client service.</param>
            <param name="messageHub">The Message Hub</param>
            <param name="logger">The Logger</param>
            <param name="objectStoreServiceClient">The Object Store Service Client</param>
            <param name="hashProvider">The Hash Provider</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyImportService.InitializeNew(TaxHub.Models.ClientAgencyImport.ClientAgencyImportRequest)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyImportService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyImportService.Create(TaxHub.Hosting.Runtime.TemporaryStreamResult,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyImportService.GetFile(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyImportService.UpdateStatus(System.Guid,TaxHub.Models.ClientAgencyImport.ClientAgencyImportStatus,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IClientAgencyImportService">
            <summary>
            Interface for ClientAgencyImportService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyImportService.Create(TaxHub.Hosting.Runtime.TemporaryStreamResult,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the Client Agency Import Request and uploads the File to Object Storage
            </summary>
            <param name="tempFile">The temporary file stream.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The API completion result with the new Client Agency Import Request.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyImportService.GetFile(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Gets the file from Object Storage
            </summary>
            <param name="fileId">The file identifier.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The file contents stream.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyImportService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the Client Agency Import Request
            </summary>
            <param name="id">The Client Agency Import Request identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Client Agency Import Request.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyImportService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets a list of Client Agency Import Requests
            </summary>
            <param name="pageParams">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of Client Agency Import Requests.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyImportService.UpdateStatus(System.Guid,TaxHub.Models.ClientAgencyImport.ClientAgencyImportStatus,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the status of Client Agency Import Request
            </summary>
            <param name="id">Request Identifier</param>
            <param name="newStatus">New Status</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns a boolean value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyImportService.ProcessImportRequest(TaxHub.Models.ClientAgencyImport.ClientAgencyImportRequest,System.IO.Stream,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes the exported file and inserts/updates client Agencies
            </summary>
            <param name="importRequest">The client agency import request.</param>
            <param name="fileStream">The file stream.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyImportService.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Method counts all collections.
            </summary>
            <param name="filterParams">The filter parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a long value.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Post_Quarter_Phase.QuarterEndPhaseServiceExtensions.RegisterQePhaseServiceTypes(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Registers the FileRenderService and required dependencies in the container.
            </summary>
            <param name="container">The container to install to.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Post_Quarter_Phase.QuarterEndPhaseService">
            <summary>
            The Qe phase service
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.IQuarterEndPhaseService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Post_Quarter_Phase.QuarterEndPhaseService.#ctor(TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.IQuarterEndPhaseRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Acl.Quarter_End_Phase.IQuarterEndPhaseQePhaseDtoMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.Post_Quarter_Phase.QuarterEndPhaseService"/> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="messageHub">The IMessageHub</param>
            <param name="appLogger">The appLogger for IQuarterEndPhaseRepository instance</param>
            <param name="mapper">The mapper for <see cref="T:TaxHub.CoreServices.Models.Dto.Quarter_End_Phase.QePhase"/> and <see cref="T:TaxHub.Models.Quarter_End_Phase.QuarterEndPhase"/></param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Post_Quarter_Phase.QuarterEndPhaseService.GetAsync(System.Nullable{System.DateTime},SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Post_Quarter_Phase.QuarterEndPhaseService.GetCountAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Post_Quarter_Phase.QuarterEndPhaseService.FindOneByClientIdAndPeriod(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Post_Quarter_Phase.QuarterEndPhaseService.FindCurrentQuarterEndInfoForClient(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Post_Quarter_Phase.QuarterEndPhaseService.ChangePhase(TaxHub.Models.Quarter_End_Phase.ChangePhaseCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyLedgerService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyLedgerService.#ctor(TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyLedgerRepository)">
            <summary>
            Initializes the service
            </summary>
            <param name="repository">The repo.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyLedgerService.FindByClientId(System.String,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceServiceExtension">
            <summary>
            An extension class to configure QVR related services.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceServiceExtension.RegisterQuarterlyVarianceService(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Registers the dependencies for the Quarterly Variance Service
            </summary>
            <param name="container">The unity container.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.ILegacyDocumentFolderServiceAdapter.GetFolderPath(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the folder path for a given folder name and guid.
            </summary>
            <param name="folderName">Folder Name</param>
            <param name="correlationId">Correlation Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>folder path.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyLedgerService">
            <summary>
            The Quarterly Variance Report (QVR) service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyLedgerService.FindByClientId(System.String,System.Int32,System.Int32)">
            <summary>
            FindOne By ClientId, quarter, year
            </summary>
            <param name="clientId">clientId</param>
            <param name="quarter">The quarter</param>
            <param name="year">The year</param>
            <returns>QuarterlyLedger data</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportService">
            <summary>
            The Quarterly Variance Report (QVR) service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportService.Generate(TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Generates a QVR report.
            </summary>
            <param name="command">QVR Create Command</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportService.Create(TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a new instance of the <see cref="T:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest"/> aggregate.
            </summary>
            <param name="command">The Quarterly variance report request command.</param>
            <param name="eventDataParams">The event parameters</param>
            <param name="cancellationToken">The cancellation token;</param>
            <returns>CreateAggregateResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportService.GetPhase(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get records from QE_Phase for the supplied period,if supplied client ID is null so it will consider all clients,else it will take supplied client_ID
            </summary>
            <param name="period">Tenant Id</param>
            <param name="clientID">Client TIN</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>List of Clients order by Agency Count and alphabetical</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportService.GetAllClientsInvolvedInMultiFeinOrCommonPayRelationshipsWithPhase(System.String,System.String,System.Int32[])">
            <summary>
            Gets a list of all clients involved in a relationship and returns their phases and if they are in the <paramref name="phasesToAllow"/> list.
            </summary>
            <param name="clientId">A client id that is part of a relationship.</param>
            <param name="period">A period to look for phase data</param>
            <param name="phasesToAllow">A list of phases to check if the clients are in.</param>
            <returns>Returns T Model.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Quarterly_Variance_Report.LegacyDocumentFolderServiceAdapter">
            <summary>
            LegacyDocumentFolderServiceAdapter
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.LegacyDocumentFolderServiceAdapter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory)">
            <summary>
            Initializes an instance of the <see cref="T:TaxHub.CoreServices.Application.Quarterly_Variance_Report.LegacyDocumentFolderServiceAdapter"/>
            </summary>
            <param name="logger">The application Logger.</param>
            <param name="httpClientFactory">The HTTP Client Factory.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.LegacyDocumentFolderServiceAdapter.GetApiVersionUriPart">
            <summary>
            Returns the version number related part for the urls constructed using this class (For tax adapters the version will not be in the config so we need to provide it.)
            </summary>
            <returns>The version number related part for the url</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.LegacyDocumentFolderServiceAdapter.InitializeClient(System.Guid)">
            <summary>
            Initializes client.
            </summary>
            <param name="correlationId">The correlationId associated with the process.</param>
            <returns>The Http Client</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.LegacyDocumentFolderServiceAdapter.GetFolderPath(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the folder path using the folder name.
            </summary>
            <param name="folderName">The folder name</param>
            <param name="correlationId">The correlation ID</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The document folder path</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService" /> service implementation for <see cref="T:TaxHub.Shared.Services.Application.ISelfHealingService`1"/>.
            </summary>
            <inheritdoc cref="T:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportService"/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.Diagnose(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.DiagnoseFailedEvents">
            <summary>
            Retrieves a diagnosis for all the QVR failed to consume Events.
            </summary>
            <returns>A List of Diagnosis</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.DiagnoseReportsInProgressAndPersisted(System.Guid)">
            <summary>
            Retrieves a diagnosis for all the QVR requests that are stuck in an active phase (e.g. InProgress, Persisted)
            </summary>
            <param name="correlationId">The event correlation ID.</param>
            <returns>A List of Diagnosis</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.Heal(System.Collections.Generic.IEnumerable{TaxHub.Shared.Services.Models.Diagnosis},System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.FailStuckRequests(System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,TaxHub.Shared.Services.Models.HealResult)">
            <summary>
            Updates the QVR request to failed status
            </summary>
            <param name="id">The id of the QVR request.</param>
            <param name="correlationId">The correlation Id.</param>
            <param name="eventData">The event data parameters</param>
            <param name="healResult">The result of the healing process</param>
            <returns>An empty Task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.ReplayFailedToConsumeEvent(System.Guid,TaxHub.Shared.Services.Models.HealResult,System.Guid)">
            <summary>
            Re-queues failed to consume event into the message queue.
            </summary>
            <param name="id">The domain event data ID.</param>
            <param name="healResult">The issue that will be resolved.</param>
            <param name="eventDataCorrelationId">The correlation Id</param>
            <returns>True if successful.</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.#ctor(TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyVarianceReportRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportMetricsService,TaxHub.Pdf.Abstractions.IPdfOperations,TaxHub.CoreServices.Application.IClientParentChildService,TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyLedgerService,TaxHub.CoreServices.Application.INamedTaxRepresentativeService,TaxHub.CoreServices.Application.Quarterly_Variance_Report.ILegacyDocumentFolderServiceAdapter,TaxHub.Messaging.IMessageHub,TaxHub.Common.EventStore.IEventStoreRepository,TaxHub.Common.Configuration.IQvrServiceConfiguration,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes the service
            </summary>
            <param name="repository">The repo.</param>
            <param name="domainService">The domain service.</param>
            <param name="logger">The logger.</param>
            <param name="metricsService">The QVR Metrics service.</param>
            <param name="iPdfOperations">The pdfOperations service</param>
            <param name="serviceAdapter">Business logic Client Parent Child</param>
            <param name="quarterlyLedgerService">Quarterly ledger service</param>
            <param name="clientParentChildService">Client Parent Child service</param>
            <param name="namedTaxRepresentativeService">Client Parent Child service</param>
            <param name="messageHub">A message hub instance.</param>
            <param name="eventStoreRepository">An instance of <see cref="T:TaxHub.Common.EventStore.IEventStoreRepository"/></param>
            <param name="qvrServiceConfiguration">The QVR service configuration.</param>
            <param name="featureToggleConfiguration">The feature toggle configuration.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.InitializeNew(TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.Generate(TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.GenerateReportPdf(TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest,System.Guid,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Generate Report Pdf
            </summary>
            <param name="instance">QuarterlyVarianceReportRequest</param>
            <param name="correlationId">The correlationId</param>
            <param name="cLogger">IAppLogger</param>
            <param name="cancellationToken">The cancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.CreateExtendedDeprecated(TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.Create(TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.GetAllClientsInvolvedInMultiFeinOrCommonPayRelationshipsWithPhase(System.String,System.String,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.GetPhase(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService.GetRequestsByStatusAndLastModified(TaxHub.Common.Enums.Quarterly_Variance_Report.QuarterlyVarianceReportStatus,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of requests with the given status and whose updated date is before the timespan.
            </summary>
            <param name="status">The request status.</param>
            <param name="statusDuration">The timespan</param>
            <param name="token">The cancellation token.</param>
            <returns>A list of QVR requests.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService">
            <inheritdoc />
        </member>
        <member name="F:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.QvrAutomatedPackageMetricName">
            <summary>
            qvr_automated_package_time_per_client
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.QvrAutomatedSsrsMetricName">
            <summary>
            qvr_automated_each_client_ssrs_process_timer
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.QvrReportAutomatedPageCounterMetricName">
            <summary>
            qvr_automated_page_count
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.QvrAutomatedReportCounterMetricName">
            <summary>
            qvr_automated_count_by_status
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.OverSla">
            <summary>
            The value to use for the Status tag for when the QVR execution is outside of the SLA.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.#ctor(SmartHub.Metrics.IAppMetricsFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Service for providing metrics for the <see cref="T:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService"/>
            </summary>
            <param name="metricsFactory">The metricsFactory service</param>
            <param name="logger">The IAppLogger service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.InitializeMetrics">
            <summary>
            Initialize Metrics
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.TimePackageAsync``1(System.Int16,System.Int16,System.Guid,System.Func{System.Threading.Tasks.Task{``0}})">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.SsrsTimeAsync(System.Int16,System.Int16,System.Guid,System.Func{System.Threading.Tasks.Task{System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.IncrementAcceptedCount(System.Int16,System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.IncrementIgnoredCount(System.Int16,System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.IncrementRequestedCount(System.Int16,System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.IncrementFailedCount(System.Int16,System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.IncrementCompletedCount(System.Int16,System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportMetricsService.PageCountHistogramUpdate(System.Int16,System.Int16,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportMetricsService">
            <summary>
            Metrics for QVR service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportMetricsService.TimePackageAsync``1(System.Int16,System.Int16,System.Guid,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Records Timer metrics for each package
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="year">The year in which client exists</param>
            <param name="quarter">The quarter in which client exists</param>
            <param name="correlationId">The correlationId</param>
            <param name="operationToTime">The generate package Function</param>
            <returns>TResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportMetricsService.SsrsTimeAsync(System.Int16,System.Int16,System.Guid,System.Func{System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Records Timer metrics for each SSRS package
            </summary>
            <param name="year">The year in which client exists</param>
            <param name="quarter">The quarter in which client exists</param>
            <param name="correlationId">The correlationId</param>
            <param name="operationToTime">The SSRS package Function</param>
            <returns>TResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportMetricsService.PageCountHistogramUpdate(System.Int16,System.Int16,System.Int32)">
            <summary>
            Records Histogram metrics for PageCount
            </summary>
            <param name="year">The year in which client exists</param>
            <param name="quarter">The quarter in which client exists</param>
            <param name="count">The page count of qvr</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportMetricsService.IncrementAcceptedCount(System.Int16,System.Int16)">
            <summary>
            Increments the accepted count metrics
            </summary>
            <param name="year">The year in which the QVR is processed.</param>
            <param name="quarter">The quarter in which the QVR is processed.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportMetricsService.IncrementIgnoredCount(System.Int16,System.Int16)">
            <summary>
            Increments the ignored count metrics
            </summary>
            <param name="year">The year in which the QVR is processed.</param>
            <param name="quarter">The quarter in which the QVR is processed.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportMetricsService.IncrementRequestedCount(System.Int16,System.Int16)">
            <summary>
            Increments the requested count metrics
            </summary>
            <param name="year">The year in which the QVR is processed.</param>
            <param name="quarter">The quarter in which the QVR is processed.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportMetricsService.IncrementFailedCount(System.Int16,System.Int16)">
            <summary>
            Increments the failed count metrics
            </summary>
            <param name="year">The year in which the QVR is processed.</param>
            <param name="quarter">The quarter in which the QVR is processed.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportMetricsService.IncrementCompletedCount(System.Int16,System.Int16)">
            <summary>
            Increments the completed count metrics
            </summary>
            <param name="year">The year in which the QVR is processed.</param>
            <param name="quarter">The quarter in which the QVR is processed.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.DomainEventOutboxService">
            <summary>
            Implements IDomainEventOutboxService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DomainEventOutboxService.#ctor(System.Func{TaxHub.CoreServices.DataAccess.IDomainEventOutboxRepository},TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            The Domain event outbox service constructor.
            </summary>
            <param name="domainEventOutboxRepositoryFactory">The domain event outbox repository factory.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DomainEventOutboxService.DispatchOutboxDomainEventsAsync(System.DateTime,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.DomainEventOutboxService.InitializeNew(TaxHub.Models.DomainEventOutbox)">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.DomainEventOutboxService.EventInstanceDeleted">
            <summary>
            The event instance deleted.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IStateService">
            <summary>
            StateService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateService.LookupOneByStateAbbrevation(System.String,System.Threading.CancellationToken)">
            <summary>
            Lookup one state record by state abbreviation
            </summary>
            <param name="stateAbbreviation">The state abbreviation</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The state with the state abbreviation</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.StateService">
            <summary>
            StateService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.StateService.#ctor(SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService,TaxHub.CoreServices.DataAccess.SqlDbStore.IStateRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor
            </summary>
            <param name="cacheManager">The cache manager</param>
            <param name="cacheRevocationService">The cache revocation service</param>
            <param name="repository">The repository</param>
            <param name="messageHub">The message hub</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.StateService.LookupOneByStateAbbrevation(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.StateService.InitializeNew(TaxHub.Models.State)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.StateService.GetCacheKeys(TaxHub.Models.State)">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.StateService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.StateService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.DepositScheduleNextBusinessDateCalculatorService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleNextBusinessDateCalculatorService.#ctor(TaxHub.CoreServices.Application.IHolidayService)">
            <summary>
            Initializes new instance of DepositScheduleNextBusinessDateCalculatorService
            </summary>
            <param name="holidayService">The holiday service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleNextBusinessDateCalculatorService.GetNetBusinessDay(System.Threading.CancellationToken,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.ExportStateZeroEftService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ExportStateZeroEftService.#ctor(TaxHub.CoreServices.Application.IExportZeroEftTrackerService,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Acl.Ptm.IExportStateZeroEftServiceAdapter,TaxHub.CoreServices.Application.IDepositScheduleNextBusinessDateCalculatorService)">
            <summary>
            Initializes new instance of ExportStateZeroEftService
            </summary>
            <param name="exportZeroEftTrackerService">The export zero eft tracker service.</param>
            <param name="logger">The application logger.</param>
            <param name="exportStateZeroEftServiceAdapter">The export state zero eft service adapter </param>
            <param name="depositScheduleNextBusinessDateCalculatorService">The deposit schedule next business date calculator service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ExportStateZeroEftService.ExportStateZeroEft(TaxHub.Models.Commands.ExportStateZeroEftCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ExportZeroEftTrackerService">
            <summary>
            Export zero eft tracker service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ExportZeroEftTrackerService.#ctor(TaxHub.CoreServices.DataAccess.IExportZeroEftTrackerRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            The service constructor 
            </summary>
            <param name="repository">The export zero eft tracker repository</param>
            <param name="messageHub">The Message hub</param>
            <param name="logger">The App Logger</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.ExportZeroEftTrackerService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.ExportZeroEftTrackerService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ExportZeroEftTrackerService.InitializeNew(TaxHub.Models.ExportZeroEftTracker)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ExportZeroEftTrackerService.ReleaseExportZeroEftTrackerInProgress(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ExportZeroEftTrackerService.GetLastExportZeroEftTracker(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IDepositScheduleNextBusinessDateCalculatorService">
            <summary>
            Define service methods to calculate deposit schedule next business date.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDepositScheduleNextBusinessDateCalculatorService.GetNetBusinessDay(System.Threading.CancellationToken,System.DateTime)">
            <summary>
            Calculate the next valid business date after the current date.
            A valid business date will exclude weekends and holidays.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="currentDate">The current date.</param>
            <returns>The next valid business date.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IExportStateZeroEftService">
            <summary>
            Defines export state zero eft services.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IExportStateZeroEftService.ExportStateZeroEft(TaxHub.Models.Commands.ExportStateZeroEftCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Export state zero eft.
            </summary>
            <param name="exportStateZeroEftCmd">The export state zero eft command.</param>
            <param name="eventDataParam">The event data param.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The operationResult.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IExportZeroEftTrackerService">
            <summary>
            Inferface for export zero eft tracker service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IExportZeroEftTrackerService.ReleaseExportZeroEftTrackerInProgress(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Release export zero eft tracker in progress.
            </summary>
            <param name="id">The identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>OperationResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IExportZeroEftTrackerService.Create(TaxHub.Models.ExportZeroEftTracker,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IExportZeroEftTrackerService.CreateExtendedDeprecated(TaxHub.Models.ExportZeroEftTracker,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.  Returns Aggregate Extended Result.  Message to be added by the Service using this.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IExportZeroEftTrackerService.BulkCreate(System.Collections.Generic.List{TaxHub.Models.ExportZeroEftTracker},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entities.
            </summary>
            <param name="entities">The entities.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of bulk creating several instances of the aggregate.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IExportZeroEftTrackerService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.ExportZeroEftTracker},System.Int32,TaxHub.Models.ExportZeroEftTracker,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params1.</param>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="entity">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IExportZeroEftTrackerService.Delete(TaxHub.Models.ExportZeroEftTracker,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Delete the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry before giving up.</param>
            <returns>
            The result of deleting an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IExportZeroEftTrackerService.GetLastExportZeroEftTracker(System.Threading.CancellationToken)">
            <summary>
            Get last exported zero eft tracker.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>ExportZeroEftTracker</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayCleanupTenantStatusService.UpdateLastProcessed6MonthExpirationPeriodicTaxPerControl(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates the LastProcessed6MonthExpirationPeriodicTaxPerControl in the MappedTaxPayCleanupConfig
            </summary>
            <param name="tenantId">The tenantId</param>
            <param name="alias">The tenant alias</param>
            <param name="lastProcessed6MonthExpirationPeriodicTaxPerControl">The last processed percontrol</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayCleanupTenantStatusService.UpdateLastProcessed24MonthExpirationPeriodicTaxPerControl(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates the LastProcessed24MonthExpirationPeriodicTaxPerControl in the MappedTaxPayCleanupConfig
            </summary>
            <param name="tenantId">The tenantId</param>
            <param name="alias">The tenant alias</param>
            <param name="lastProcessed24MonthExpirationPeriodicTaxPerControl">The last processed percontrol</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayCleanupTenantStatusService.GetFromRepositoryAndCreateIfItDoesntExist(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the MappedTaxPayCleanupTenantStatus from the repo and creates it if it doesnt exist
            </summary>
            <param name="tenantId">The tenantId</param>
            <param name="alias">The tenant alias</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A MappedTaxPayCleanupTenantStatus</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayCleanupConfigService.UpdateServiceEnabled(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates the serviceEnabled flag in the MappedTaxPayCleanupConfig
            </summary>
            <param name="serviceEnabled">The flag serviceEnabled</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayCleanupConfigService.UpdateServiceRunning(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates the ServiceRunning flag in the MappedTaxPayCleanupConfig
            </summary>
            <param name="serviceRunning">The flag serviceRunning</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayCleanupConfigService.UpdateLastProcessedTenantAlias(System.String,System.Threading.CancellationToken)">
            <summary>
            Updates the lastProcessedId in the MappedTaxPayCleanupConfig
            </summary>
            <param name="lastProcessedTenantAlias">The last processed tenant alias</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayCleanupConfigService.GetFromRepositoryAndCreateIfItDoesntExist(System.Threading.CancellationToken)">
            <summary>
            Gets the MappedTaxPayCleanupConfig from the repo and creates it if it doesnt exist
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A MappedTaxPayCleanupConfig</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayCleanupConfigService.PublishEventToStartProcessing">
            <summary>
            Send the event to start processing. Publishing payment.scheduler-service.cleanup-mapped-tax-pay-scheduled
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPaymentService">
            <summary>
            Domain services related to Payment
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UndepositPayment(TaxHub.Models.Payment,System.Guid,System.Guid,System.String)">
            <summary>
            Update payment isSent and isPaid
            </summary>
            <param name="payment">The payment.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="userId">The user id.</param>
            <param name="userDescription">The user description.</param>
            <returns>An update extended result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.DeleteBy(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Delete payment
            </summary>
            <param name="payment">The payment.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <returns>A delete aggregate result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateClientId(TaxHub.Models.Payment,System.String,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Updates the ClientId
            </summary>
            <param name="payment">The payment.</param>
            <param name="clientId">The client identifier.</param>
            <param name="eventDataParams">The event data params.</param>
            <returns>The update aggregate result state.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateCreditToUnapplied(TaxHub.Models.Payment,System.Int32,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Unnaplies a credit to a positive payment
            </summary>
            <param name="payment"> The payment</param>
            <param name="creditTrackingId">The credit tracking id</param>
            <param name="eventDataParams">The event Data params</param>
            <returns>The result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.RestoreAmountFromCredit(TaxHub.Models.Payment,System.Int32,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Restore payment from a credit applied
            </summary>
            <param name="payment">The payment</param>
            <param name="creditTrackingId">The credit tracking identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <returns>Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateCreditTrackingLiabilityId(TaxHub.Models.Payment,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Updates individual credit tracking record with new liability id.
            </summary>
            <param name="payment">The payment to update.</param>
            <param name="creditTrackingId">The credit tracking identifier.</param>
            <param name="liabilityId">The liability id we want to set.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <returns>Update result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateExportedStatus(TaxHub.Models.Payment,System.Boolean,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Method to correct the export status on a payment required by ULTI-353940 when the payments where incorrectly
            set to not export and the exported file id corresponds to an exported never voided transaction.
            </summary>
            <param name="payment">The payment</param>
            <param name="exportValue">The value for the exported flag.</param>
            <param name="eventDataParams">The event data params</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.CreateSnapshot(System.Collections.Generic.IEnumerable{System.Int32},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Create a snapshot with next version of each payment in the bach.
            </summary>
            <param name="paymentIds">The payment ids batch</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="ct">The cancellation token.</param>
            <returns>The bulk result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.CorrectionUnSendNegativePrepaidPayment(TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Set IsSent to false for all valid negative prepaid payments.
            </summary>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="ct">The cancellation token.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.Create(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified payment.
            </summary>
            <param name="payment">The payment.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult" /> representing the result of the operation.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.CreatePayment(TaxHub.Models.Commands.PaymentsCreateCommand,System.Guid,System.Guid,System.String)">
            <summary>
            Accepts a generic object to create payment and then insert it to the associated table
            </summary>
            <param name="paymentsCreateCommand"> A mapper from different type of payments to one generic payment</param>
            <param name="correlationId">Correlation Id</param>
            <param name="userId">User Id</param>
            <param name="userName">User Name</param>
            <returns>Boolean for success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the Payment by Id
            </summary>
            <param name="paymentId">Payment Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all Payment's paged based on  page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of import clients.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateChildClientId(TaxHub.Models.Payment,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update the Original Client Id.
            </summary>
            <param name="payment"> The payment </param>
            <param name="childClientId">The Original Client ID</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>UpdateAggregateResultState of Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateRefundLiabilityId(TaxHub.Models.Payment,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Sets the Negative Liability Id when a Payment is refunded
            </summary>
            <param name="payment">Payment</param>
            <param name="negativeLiabilityId">Negative Liability Id</param>
            <param name="eventDataParams">Event Data Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>UpdateAggregateResultState of Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateCreditLiabilityReference(TaxHub.Models.Payment,System.Guid,System.Guid,TaxHub.Models.EffectOnLiability,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Sets the Credit Liability Id to payment's credit tracking when a Payment gets a Credit applied
            including payment's credits in the same payroll used to reduce liability to the given payments.
            </summary>
            <param name="payment">Payment</param>
            <param name="creditSessionId">Credit sessionId where the credit was created</param>
            <param name="liabilityId">Liability Id</param>
            <param name="effectOnLiability">The effect this credit had on the liability (refund or reduced)</param>
            <param name="eventDataParams">Event Data Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>UpdateAggregateResultState of Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateRefundLiabilityByCreditTracking(TaxHub.Models.Payment,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Sets the Refund liability identifier when a payment gets a credit applied
            </summary>
            <param name="payment">Payment</param>
            <param name="creditTrackingId">The credit tracking identifier</param>
            <param name="refundLiabilityId">The refund liability Id</param>
            <param name="eventDataParams">Event Data Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>UpdateAggregateResultState of Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateCreditTrackingQeAdjPaymentRefundLiabilityId(TaxHub.Models.Payment,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Sets the Refund liability identifier after a QE-net positive payment is voided
            </summary>
            <param name="payment">Payment</param>
            <param name="creditTrackingId">The credit tracking identifier</param>
            <param name="refundLiabilityId">The refund liability Id</param>
            <param name="eventDataParams">Event Data Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>UpdateAggregateResultState of Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateCreditLiabilityReferenceLiabilityReduction(TaxHub.Models.Commands.UpdatePaymentCreditLiabilityCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Sets the Credit Liability Id when a Payment gets a Credit applied and the payment liability gets reduced
            </summary>
            <param name="updatePaymentCreditLiabilityCommand">Update credit liability command.</param>
            <param name="eventDataParams">Event Data Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>UpdateAggregateResultState of Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateStatus(TaxHub.Models.Payment,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the payment status
            </summary>
            <param name="payment">Payment</param>
            <param name="newStatus">Payment Status</param>
            <param name="eventDataParams">Event Data Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>UpdateAggregateResultState of Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateAgencyRefunded(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates the agency refunded flag on a single payment instance
            </summary>
            <param name="payment">List of payments</param>
            <param name="eventDataParams">Event data parameters</param>
            <param name="flag"> The agency refunded flag value to be updated</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>UpdateAggregateResultState </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPayrollId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the Payroll Id of a Payment.
            </summary>
            <param name="paymentId">The payment identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The Payroll Id related to this payment. For Import Payroll it returns a positive value and for Input payroll it returns a -ve value
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.BulkVoidPayment(TaxHub.Models.Commands.PaymentBulkVoidCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary>
            Payments Bulk Void
            </summary>
            <param name="bulkVoidCommand">Carry a list of ids and versions of payments to be updated </param>
            <param name="eventDataParams">event data for the update</param>
            <param name="cancellationToken">tThe cancellation token</param>
            <param name="maxRetryCount">Max retry count</param>
            <param name="pageSize">Page size</param>
            <returns>State of the update response</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentsByPeriodicTaxInstanceId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the payments by periodic tax instance identifier (Import Payroll).
            </summary>
            <param name="periodicTaxInstanceId">The periodic tax instance identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>IEnumerable of Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentsByInputTaxInstanceId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the payments by input tax instance identifier (Input Payroll)
            </summary>
            <param name="inputTaxInstanceId">The input tax instance identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task that results to a collection of <see cref="T:TaxHub.Models.Payment"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentInfoByInputTaxInstanceId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds list of <see cref="T:TaxHub.CoreServices.Application.PaymentInfo"/> by input tax instance identifier (Input Payroll)
            </summary>
            <param name="inputTaxInstanceId">The input tax instance identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An Enumerable of PaymentInfo</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentInfoByPeriodicTaxInstanceId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds list of <see cref="T:TaxHub.CoreServices.Application.PaymentInfo"/> by periodic tax instance identifier (Import Payroll)
            </summary>
            <param name="periodicTaxInstanceId">The periodic tax instance identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An Enumerable of PaymentInfo</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentInfoByLiabilityId(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds list of <see cref="T:TaxHub.CoreServices.Application.PaymentInfo"/> by liability ID
            Finds payments by liability id
            </summary>
            <param name="liabilityId">The liability id</param>
            <param name="pagedDataParameters">The paged parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An Enumerable of PaymentInfo</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentsByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds Payments by liability ID
            </summary>
            <param name="liabilityId">The liability ID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task that results to a collection of <see cref="T:TaxHub.Models.Payment"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdatePaymentReconciliationByCheck(System.Boolean,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Sets IsReconciled flag to true for all payments under the given check file request.
            </summary>
            <param name="matched">Whether payment is reconciled.</param>
            <param name="fileRequestId">File request Id.</param>
            <param name="eventData">Event data.</param>
            <returns>List of update results.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdatePaymentReconciliationByEft(System.Boolean,System.Guid,System.String,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Sets IsReconciled flag to true for all payments under the given eft file request.
            </summary>
            <param name="matched">Whether paymnent is reconciled.</param>
            <param name="fileRequestId">File request Id.</param>
            <param name="eftType">Either Fed or State.</param>
            <param name="eventData">Event data.</param>
            <returns>List of update results.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.MarkQuarterPaymentCreditsAsAgencyRefunded(System.String,TaxHub.Common.Models.Quarter,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Marks credits with a remaining unapplied portion for a certain client and quarter, which their payee/agency does not allow credit carry forwards, as agency refunded
            </summary>
            <param name="clientId">The client Id</param>
            <param name="quarter">The quarter</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>true if it succeeds</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.RevertQuarterPaymentCreditsAgencyRefunded(System.String,TaxHub.Common.Models.Quarter,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Reverse operation of 'MarkQuarterPaymentCreditsAsAgencyRefunded'. It reset the agency refunded flag for the credits that were marked as agency refunded 
            and calculates the remaining unapplied portion for a certain client and quarter, which their payee/agency does not allow credit carry forwards
            </summary>
            <param name="clientId">The client Id</param>
            <param name="quarter">The quarter</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>true if it succeeds</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.DepositPayment(TaxHub.Models.Payment,System.Guid,System.Guid,System.String)">
            <summary>
            Deposit payment
            </summary>
            <param name="payment">payment.</param>
            <param name="correlationId">correlation id.</param>
            <param name="userId">user id.</param>
            <param name="userDescription">user description</param>
            <returns>Update result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.GetAllPaymentsByFedEftId(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get all the payments related to an federal eft
            </summary>
            <param name="eftFedId">The int id</param>
            <param name="correlationId">The correlation id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The collections of payments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.GetAllPaymentsByStateEftId(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get all the payments related to an state eft
            </summary>
            <param name="eftStateId">The int id</param>
            <param name="correlationId">The correlation id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The collections of payments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.GetAllPaymentsByCheckId(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get all the payments related to a check
            </summary>
            <param name="checkId">The int check id</param>
            <param name="correlationId">The correlation id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The collections of payments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FilterPaymentsByValidPostPayrollIds(System.Collections.Generic.IEnumerable{TaxHub.Models.Payment},System.Threading.CancellationToken)">
            <summary>
            Get all the payments that have valid postPayrollIds
            </summary>
            <param name="payments">The list of payments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The collections of payments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.ReopenPayment(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Re-open the payment
            </summary>
            <param name="paymentId">The payment id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns true if the payment was open (isSent = No) and all the credits unapplied othermise false</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.ReopenPayment(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Re-open the payment
            </summary>
            <param name="payment">The payment</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns true if the payment was open (isSent = No) and all the credits unapplied othermise false</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.ReopenPaymentForCheckId(System.Int32,System.DateTime,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Reopen all payments related to a check id
            </summary>
            <param name="checkId">check id</param>
            <param name="checkDate">CheckDate (which is the settleDate of a Check)</param>
            <param name="checkNumber">Check number as String</param>
            <param name="eventDataParams">eventDataParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>True if all payment suceeded</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.ReopenPaymentForStateEftId(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Reopen all payments related to a state id
            </summary>
            <param name="stateEftId">stateEft Id</param>
            <param name="eventDataParams">eventDataParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>True if all payment suceeded</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.ReopenPaymentForFedEftId(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Reopen all payments related to a federal id
            </summary>
            <param name="fedEftId">check id</param>
            <param name="eventDataParams">eventDataParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>True if all payment suceeded</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UnexportFederalPayment(System.Int32,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Mark exported Payment as not exported. Usually because Fed EFT file was voided and payments are no longer exported.
            </summary>
            <param name="paymentId">Payment Id</param>
            <param name="eventData"> Event Data</param>
            <returns>UpdateAggregateResultState of Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UnexportStatePayment(System.Int32,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Mark exported Payment as not exported. Usually because State EFT file was voided and payments are no longer exported.
            </summary>
            <param name="paymentId">Payment Id</param>
            <param name="eventData"> Event Data</param>
            <returns>UpdateAggregateResultState of Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.ReopenAndUnexportPayment(TaxHub.Models.Payment,System.DateTime,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Re-opens and Unexports the payment. Usually because Check file was voided and payments are no longer exported.
            </summary>
            <param name="payment">The payment</param>
            <param name="transactionDate">Tranasaction Date (which is the Check's checkDate)</param>
            <param name="checkNumber">Check Number as String</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>UpdateAggregateResultState of Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UnexportPayment(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Unexport the payment
            </summary>
            <param name="paymentId">The payment id</param>
            <param name="eventDataParams">The evend data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns true if the payment was successfully unexported</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UnexportPayment(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Unexport the payment
            </summary>
            <param name="payment">The payment instance</param>
            <param name="eventDataParams">The evend data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns true if the payment was successfully unexported</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.NotifyLedgerUnexportedPayment(System.Int32,TaxHub.Shared.Services.EventDataParams,System.String)">
            <summary>
            Notifies the ledger unexported payment.
            </summary>
            <param name="paymentId">The payment id</param>
            <param name="eventDataParams">Event Data Params</param>
            <param name="checkNumber">Check number if the Payment came from a Check</param>
            <returns>Returns true if the event was successfully published</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.NotifyLedgerUnexportedPayment(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.String)">
            <summary>
            Notifies the ledger unexported payment.
            </summary>
            <param name="payment">The payment instance</param>
            <param name="eventDataParams">Event Data Params</param>
            <param name="checkNumber">Check number if the Payment came from a Check</param>
            <returns>Returns true if the event was successfully published</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.SetReconciliationPayment(System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Reconciliation by payment identifier
            </summary>
            <param name="paymentId">The payment id to reconcile/unreconcile</param>
            <param name="matched">The reconcile value</param>
            <param name="eventDataParams">Event data params</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.SetReconciliationPayment(TaxHub.Models.Payment,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Reconciliation by payment identifier
            </summary>
            <param name="payment">The payment to reconcile/unreconcile</param>
            <param name="matched">The reconcile value</param>
            <param name="eventDataParams">Event data params</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.WirePaymentsByFedeftId(System.Guid,TaxHub.Shared.Services.EventDataParams,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Wire payments: update IsExported to true and set WireId to fedefUId
            </summary>
            <param name="fedeftUId">The fedeft id</param>
            <param name="eventDataParams">Event data params</param>
            <param name="transactionInitiatedUtcDateTime">Date and time of the transaction in UTC</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentsByPeriodicTaxInstanceIdFromValidPostPayroll(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the payments by periodic tax instance identifier (Import Payroll). 
            The payments come from a PostPayroll in Valid status
            </summary>
            <param name="periodicTaxInstanceId">The periodic tax instance identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Enumerable of Payments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdatePaymentCompanyId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Payment CompanyId
            </summary>
            <param name="paymentId">Payment Identifier</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>returns boolean value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentsByPenaltyInterestId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the payments by penalty interest identifier. 
            </summary>
            <param name="penaltyId">The periodic tax instance identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Enumerable of Payments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindInputPayrollId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the input payroll identifier.
            </summary>
            <param name="paymentId">The payment identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Input Payroll Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.Payment},System.Int32,TaxHub.Models.Payment,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Update payment by action
            </summary>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="commandAction">The action command.</param>
            <param name="id">The entity identifier</param>
            <param name="entity">The Entity</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>The aggregate update result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindAllNotExported(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get payment's that are not exported.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of payments.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.ResolveFallout(TaxHub.Models.Commands.ResolveFalloutCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary>
            Resolve payment fallouts.
            </summary>
            <param name="resolveFalloutCommand">The resolve payment fallout command.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="maxRetryCount">The default max retry count.</param>
            <param name="pageSize">The page size.</param>
            <returns>The success result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentsByLiabilityId(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method to get a list of payments that belongs to a liability using pagination.
            </summary>
            <param name="liabilityId">The liability Id</param>
            <param name="pagedParameters">The paged parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of payments for the current page and page size that belongs to the liability.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.AssignLiabilityId(System.Collections.Generic.List{System.Int32},System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Bulk update method to assign liability to a payroll's payments
            </summary>
            <param name="paymentIds">List of payment ids.</param>
            <param name="liabilityId">The liability id.</param>
            <param name="eventDataParams">Event data params.</param>
            <returns>Bulk Update Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UnapplyCredit(System.Int32,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method will do 2 steps:
            1-> Will retore the amount contained in the credit tracking CREDIT_AMOUNT_APPLIED back to the negative payment.
            2-> Will update the credit tracking record to VOIDED status from VOIDING to stabilsh that the transaction of voiding the payment was finalize in regard to the credit tracking involved.
            </summary>
            /// <param name="paymentId">The positive payment id</param>
            <param name="creditTrackingId">The credit tracking record created for this credit application.</param>
            <param name="eventDataParams">Instance of EventDataParam</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Value indicating whether process was successfully done</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.RaiseMissingEvent(System.Int32,TaxHub.Models.Commands.RaiseMissingEventCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Raise a missing event for a given payment. The method will:
            1-> Find the payment
            2-> Check that the version and sequence number makes sense
            3-> Check that an event with the same sequence number does not exist for the given payment.
            4-> Raise the event
            </summary>
            <param name="id">The payment Id</param>
            <param name="missingEventCommand">The missing event command.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if all the steps were correctly performed. False in any other case.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.CalculateTotalLiabilityAmount(System.Collections.Generic.List{TaxHub.Models.Payment},System.Int32,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Calculates the total liability amount after credits have been deducted from total tax amount.
            NOTE: If payroll type is QEADJ, then we will include cross-agency credit application in the calculation.
            </summary>
            <param name="paymentsByPayroll">The payments by payroll</param>
            <param name="postPayrollId">The post payroll identifier of this payroll</param>
            <param name="correlationId">The correlation identifier</param>
            <param name="payrollType">The payroll type: REGULAR, QEADJ, PRADJ, SUICREDIT</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The total tax liability amount</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.GetPaymentAmounts(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets paymentAmounts based on Payment Id
            </summary>
            <param name="id"> The Payment Id</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of payment amounts</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentCreditReductionInfoForCrossAgencyApplicationByPostPayroll(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get information for payment and credit tracking identifiers that were involved in the application of credits for QEADJ reductions. 
            These payment identifiers are payments that don't belong to the payroll were the positive payments were created. They are the existing collected source of the money when
            the system did the net out.
            </summary>
            <param name="postPayrollId">The post payroll id of the positive payments that made the liability amount.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of payment and credit tracking identifiers that were involved in the reduction of the payroll liability and don't belong to the post payroll.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentsByIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Find many payments by ID.
            </summary>
            <param name="ids">List of IDs.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task that returns list of payments.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindAllRelatedCreditTrackings(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all credit trackings that reference payment id
            </summary>
            <param name="paymentId">The payment id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>the credit trackings.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentsByQeNetPaymentId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds payments by Qe-net payment id
            </summary>
            <param name="paymentId">The payment id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>the credit trackings.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentsByPostPayrollId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find all the payments for a given post payroll Id
            </summary>
            <param name="postPayrollId">The post payroll Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The payments related to the given postpayroll Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.GetPositivePaymentsForCreditApplication(System.String,System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Find all positive payments for credit application by date range
            </summary>
            <param name="clientId">Client id</param>
            <param name="payees">The payees</param>
            <param name="checkDateFrom">Check data from</param>
            <param name="checkDateTo">Check data to</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Collection of CandidatePaymentInfo</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.GetNegativePaymentsForCreditApplication(System.String,System.Collections.Generic.IList{TaxHub.Models.Banking.CreditApplication.CreditRequestPayeeDateRange},System.Threading.CancellationToken)">
            <summary>
            Find all Negative payments for credit application by date range
            </summary>
            <param name="clientId">Client id</param>
            <param name="payeeDateRanges">Payee Data Ranges</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Collection of CandidatePaymentInfo</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.ApplyCredit(System.Guid,System.Int32,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Method to apply credits using a payment (positive payment) and a negative (negative payment)
            </summary>
            <param name="tenantId">The tenant Id</param>
            <param name="paymentId">The positive payment Id</param>
            <param name="creditId">The negative payment Id</param>
            <param name="sessionId">The sessionId</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellationToken</param>
            <returns>Returns Success if the application succeed.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentByCreditTrackingId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find payment by credit tracking identifier
            </summary>
            <param name="creditTrackingId">The credit tracking identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The payment if found</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.GetAgencyCreditPaymentsForCreditApplication(System.String,System.String[],System.String,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Finds the payments type AgencyCredit in the Agency Open Period
            </summary>
            <param name="clientId">The clientId</param>
            <param name="payees">The The agencies</param>
            <param name="agencyOpenPeriod">The agency open period</param>
            <param name="dateStart">start date that it's going to be used as deposit start period</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>List of AgencyCredits for credit application</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.FindPaymentByCreditTransactionId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find payment by credit transaction id.
            </summary>
            <param name="creditTransactionId">The credit transaction id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The payment found, if any.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.AllocateCreditTransactionLiability(System.Int32,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Allocate credit transaction liability by populating the id and updating the status
            </summary>
            <param name="paymentId">The payment identifier.</param>
            <param name="creditTransactionId">The credit transaction identifier.</param>
            <param name="transactionLiabilityId">The transaction liability identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <returns>Update aggregate result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.UpdateStatusToCashMgmtLiabilityAssigned(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the status of the credit transaction to CashMmgtLiabilityAssigned
            </summary>
            <param name="creditTransactionId">The credit transaction identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Update aggregate result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentService.BulkUpdatePaymentStatus(TaxHub.Models.Commands.PaymentBulkUpdateStatusCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary>
            Updates payment statuses in bulk for a list of payments
            </summary>
            <param name="bulkUpdateCommand">update command (list of payments and new status)</param>
            <param name="eventDataParams">event parameters</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="maxRetryCount">maximum retries (default 5)</param>
            <returns>Bulk update result</returns>
            <param name="pageSize">page size for the bulk operation (default 100)</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ITenantService">
            <summary>
            Domain services related to Tenants in PTM
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.CorrectDedFiltersCreated(TaxHub.Models.Tenant,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Corrects the DedFiltersCreated for a tenant.
            </summary>
            <param name="tenant">The tenant.</param>
            <param name="dedFiltersCreated">The ded filters created value.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>UpdateAggregateResultState of Tenant</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find one Tenant with given Id.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Tenant with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all Tenant's paged based on  page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of PeriodicPeriodicTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.FindAllHistory(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the tenant change history
            </summary>
            <param name="tenantId">The tenant identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of DomainEventData changes</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.Count(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Counts the Tenants in the system.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A dictionary with a count key and the number of Tenant.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.Create(TaxHub.Models.Tenant,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Inserts new Tenant
            </summary>
            <param name="tenant"> Tenant instance</param>
            <param name="eventDataParams">The Event data params</param>
            <param name="cancellationToken"> The Cancellation token</param>
            <returns> Task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.Update(TaxHub.Models.Tenant,TaxHub.Models.Tenant,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates Tenant
            </summary>
            <param name="originalTenant"> The original tenant object</param>
            <param name="tenantCommand"> The tenant object to update</param>
            <param name="eventDataParams">The Event Data Params</param>
            <param name="cancellationToken"> The cancellation token</param>
            <returns> task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.FindByArNumber(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if tenant already exist
            </summary>
            <param name="arNumber"> arNumber of Tenant</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Tenant Object if one Exist</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.FindAllByArNumber(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds Tenant by AR Number
            </summary>
            <param name="arNumber"> arNumber of Tenant</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Tenant list if they Exist</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.SwapNamedTaxRepresentative(System.Guid,TaxHub.Models.Commands.TenantNamedTaxRepresentativeSwapCommand,System.Guid,TaxHub.Common.Security.UserPrincipal,System.Threading.CancellationToken)">
            <summary>
            Updates the NTR relationship.
            </summary>
            <param name="tenantId">The tenant Identifier</param>
            <param name="ntrSwapCommand">The NTR Swap Command</param>
            <param name="correlationId">The correlation id</param>
            <param name="user">The user</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A dictionary with a count key and the number of Tenant.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.SetNamedTaxRepresentativeEffectiveFrom(System.Guid,TaxHub.Models.Commands.TenantNamedTaxRepresentativeSetEffectiveFromCommand,System.Guid,TaxHub.Common.Security.UserPrincipal,System.Threading.CancellationToken)">
            <summary>
            Updates the NTR EffectiveFrom Date.
            </summary>
            <param name="tenantId">The tenant Identifier</param>
            <param name="setEffectiveFromCommand">The Set EffectiveFrom Command</param>
            <param name="correlationId">The correlation id</param>
            <param name="user">The user</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A dictionary with a count key and the number of Tenant.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.CreateOrUpdateUccTenant(TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Tenant,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Update Ucc Tenant.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="tenantCommand">Tenant Command Action</param>
            <param name="token">Cancellation Token</param>
            <param name="retryCount">Retry Count</param>
            <returns>
            Aggregate state
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.UpdateTenantIntegrationData(TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Tenant,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Update Tenant Integration data.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="tenantCommand">Tenant Command Action</param>
            <param name="token">Cancellation Token</param>
            <param name="retryCount">Retry Count</param>
            <returns>
            Aggregate state
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.MapAliasToTenantId(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method maps tenant alias to its id.
            </summary>
            <param name="tenantAlias">The tenant alias.</param>
            <param name="correlationId">The correlationId</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Returns a guid.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.LookupAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
             Lookups the tenant.
            It will first try to get it from the cache before asking the repository.
            </summary>
            <param name="tenantId">The Tenant Identifier</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The tenant with the given identifier.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.UpdateFromEvent(System.Guid,TaxHub.Models.Tenant,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updated a tenant with data received from event
            </summary>
            <param name="tenantId"> The tenant Id</param>
            <param name="command">update command </param>
            <param name="sequenceNumber">  Event sequence number</param>
            <param name="eventDataParams"> event data params</param>
            <param name="cancellationToken"> Cancellation token</param>
            <param name="retryCount">retry count</param>
            <returns>Update aggregate result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.FindByClientAccessKey(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Tenant by its client Access Key.
            </summary>
            <param name="clientAccessKey">The client Access Key.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a Tenant object or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.LookupByClientAccessKey(System.String,System.Threading.CancellationToken)">
            <summary>
            Lookups the tenant by its client Access Key.
            It will first try to get it from the cache before asking the repository.
            </summary>
            <param name="clientAccessKey">The client Access Key.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a Tenant object or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.RequestSyncTenantData(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Initiates a sync of tenant data from the hub
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success; otherwise, false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.SetCommonPay(System.Guid,TaxHub.Models.Commands.TenantCommonPayCommand,System.Guid,TaxHub.Common.Security.UserPrincipal,System.Threading.CancellationToken)">
            <summary>
            SetCommonPay
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="setCommonPayCommand">CommonPay command</param>
            <param name="correlationId">The correlation id</param>
            <param name="user">The User</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>CommonPay</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.UpdateSuiRateIntegration(System.Guid,System.Boolean,System.Guid,TaxHub.Common.Security.UserPrincipal,System.Threading.CancellationToken)">
            <summary>
            SUI Rate Integration field determines if Customer is included in receiving
            tax rate updates from UTE to Ulti-Pro. If not checked Customer's tax rate
            will remain as is in Ulti-Pro when UTE tax rate is updated in client agency.
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="value">Sui Rate Integration update</param>
            <param name="correlationId">The correlation id</param>
            <param name="user">The User</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>CommonPay</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.HasClientParentChildSet(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method checks if Tenant has ClientParentChildSet
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns Boolean value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.FindUsgTenant(System.Threading.CancellationToken)">
            <summary>
            Gets the USG Tenant
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the USG Tenant</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantService.UpdateUsgBankAccounts(System.Guid,System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates Usg Ach and Check Account Id
            </summary>
            <param name="tenantId">Tenant Id</param>
            <param name="usgAchAccount">USG bank account id</param>
            <param name="usgCheckAccount">USG bank account id</param>
            <param name="eventDataParams">event data params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>UpdateAggregateResult</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.MappedTaxPayCleanupTenantStatusService">
            <summary>
            Implementation of MappedTaxPayCleanupTenantStatusService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayCleanupTenantStatusService.#ctor(TaxHub.CoreServices.DataAccess.IMappedTaxPayCleanupTenantStatusRepository,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.MappedTaxPayCleanupTenantStatusService"/> class.
            </summary>
            <param name="mappedTaxPayCleanupTenantStatusRepository">The repository.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayCleanupTenantStatusService.UpdateLastProcessed6MonthExpirationPeriodicTaxPerControl(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayCleanupTenantStatusService.UpdateLastProcessed24MonthExpirationPeriodicTaxPerControl(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayCleanupTenantStatusService.GetFromRepositoryAndCreateIfItDoesntExist(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the MappedTaxPayCleanupConfig from the repo and creates it if it doesnt exist
            </summary>
            <param name="tenantId">The tenant Id</param>
            <param name="alias">The tenant alias</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A MappedTaxPayCleanupConfig</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.MappedTaxPayCleanupConfigService">
            <summary>
            Implementation of MappedTaxPayCleanupConfigService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayCleanupConfigService.#ctor(TaxHub.CoreServices.DataAccess.IMappedTaxPayCleanupConfigRepository,TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.MappedTaxPayCleanupConfigService"/> class.
            </summary>
            <param name="mappedTaxPayCleanupConfigRepository">The repository.</param>
            <param name="logger">The logger.</param>
            <param name="messageHub">The messageHub</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayCleanupConfigService.UpdateServiceEnabled(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates the serviceEnabled flag in the MappedTaxPayCleanupConfig
            </summary>
            <param name="serviceEnabled">The flag serviceEnabled</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayCleanupConfigService.UpdateServiceRunning(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates the ServiceRunning flag in the MappedTaxPayCleanupConfig
            </summary>
            <param name="serviceRunning">The flag serviceRunning</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayCleanupConfigService.UpdateLastProcessedTenantAlias(System.String,System.Threading.CancellationToken)">
            <summary>
            Updates the lastProcessedId in the MappedTaxPayCleanupConfig
            </summary>
            <param name="lastProcessedTenantAlias">The last processed tenant alias</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayCleanupConfigService.GetFromRepositoryAndCreateIfItDoesntExist(System.Threading.CancellationToken)">
            <summary>
            Gets the MappedTaxPayCleanupConfig from the repo and creates it if it doesnt exist
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A MappedTaxPayCleanupConfig</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.AlertService">
            <summary>
            Alert service implementation.
            </summary>
            <seealso cref="T:System.Int32" />
            <seealso cref="T:TaxHub.CoreServices.Application.IAlertService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.AlertService.#ctor(TaxHub.CoreServices.DataAccess.IAlertRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.AlertService"/> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IAchFileServiceCorrection">
            <summary>
            ACH Service Correction for Migration
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAchFileServiceCorrection.GetDistributionSummaryByFileInfoId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the total payments in a distributions of a set of State/Fed efts in one exported ACH file.
            </summary>
            <param name="fileId">The file identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>totals</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAchFileServiceCorrection.CreateFromFileInfoId(System.Guid,TaxHub.CommonServices.FileManagement.Models.FileStatus,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates ACH File in Voided status.
            </summary>
            <param name="fileId">The FileInfo identifier.</param>
            <param name="fileStatus">File Info status</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>CreateAggregateResult</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.AchFileService">
            <summary>
            Implementation of ACH Service
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.IAchFileService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.AchFileService.#ctor(TaxHub.CoreServices.DataAccess.IAchFileRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IFederalElectronicTransferService,TaxHub.CoreServices.Application.IStateElectronicTransferService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.AchFileService"/> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The logger.</param>
            <param name="federalEftService">The federal eft service.</param>
            <param name="stateEftService">The state eft service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.AchFileService.Create(TaxHub.Models.Commands.AchFileCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.AgencyAchService">
            <summary>
            AgencyAch service implementation. (AGENCY_ACH)
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.AgencyAchService.#ctor(TaxHub.CoreServices.DataAccess.IAgencyAchRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.AgencyAchService"/> class.
            </summary>
            <param name="agencyAchRepository">Agency Ach Repository</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.BankScheduleService.#ctor(TaxHub.CoreServices.Application.IHolidayService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initialize Constructor
            </summary>
            <param name="holidayService">Holiday Service</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.BankScheduleService.IsBankingDay(System.DateTime,System.Guid)">
            <summary>
            Determines whether the given date falls on a banking day.
            </summary>
            <param name="date">The date</param>
            <param name="correlationId">Correlation Id</param>
            <returns>
            True if the given date time falls on a banking day; false otherwise.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.BankScheduleService.FindPriorBankingDay(System.DateTime,System.Guid,System.Int32)">
            <summary>
            Returns the prior banking day
            </summary>
            <param name="date">Date</param>
            <param name="correlationId">Correlation Id</param>
            <param name="priorDays">Prior Days</param>
            <returns>Returns the prior banking day</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.BankScheduleService.FindNextBankingDay(System.DateTime,System.Guid,System.Int32)">
            <summary>
            Returns the Next banking day
            </summary>
            <param name="date">Date</param>
            <param name="correlationId">Correlation Id</param>
            <param name="afterDays">After Days</param>
            <returns>Returns the Next banking day</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.CheckService">
            <summary>
            Implementation of application layer for Check aggregate
            </summary>
            <summary>
            Check service functionality that is not valid business flow
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CheckService.#ctor(TaxHub.CoreServices.DataAccess.ICheckRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.CheckService"/> class.
            </summary>
            <param name="repository">Repository</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
            <param name="domainService">The domain service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CheckService.VoidCheck(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Check,TaxHub.Models.Commands.CheckVoidCommand,System.Threading.CancellationToken)">
            <summary>
            Initiate the voiding process of a check. This method will deal with
            regular checks, bulk checks, and nft checks
            </summary>
            <param name="eventDataParams">The event data params</param>
            <param name="checkToVoid">The check to be voided</param>
            <param name="checkToVoidCommand">Check to void command</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CheckService.UnassignChildrenChecksFromBulkCheck(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method unassigns NFT checks that were previously assigned to a bulk check
            </summary>
            <param name="bulkCheckId">The bulk check id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CheckService.UnexportNftCheck(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method will unexport an NFT check
            </summary>
            <param name="checkId">The check identifier</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CheckService.UnexportAllPaymentsAssociatedToCheck(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method will unexport the payments associated to a check
            through the checking payment distribution reference
            </summary>
            <param name="checkId">The check id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CheckService.ExportChildrenChecksOfBulkCheck(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Export all nft checks (children) associated to a Bulk Check
            </summary>
            <param name="bulkCheckId">The Id of the bulk check</param>
            <param name="eventDataParams">The even data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns true if all the nft children were successfully exported</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CheckService.UnvoidCheck(TaxHub.Models.Check,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.CheckService.GetExportedChecks(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.CheckService.UnAssignChildCheckFromBulkCheck(TaxHub.Models.Check,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IClientITaxDescService">
            <summary>
            ClientITaxDescService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientITaxDescService.LookupAllByClientDescId(System.String,System.Threading.CancellationToken)">
            <summary>
            Lookup all of the CLIENT_ITAX_DESC records by the ClientDescId
            </summary>
            <param name="clientDescId">The clientDescId (UTE Tax Code)</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>All the client itax desc records with given id</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ClientITaxDescService">
            <summary>
            ClientITaxDescService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientITaxDescService.#ctor(SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService,TaxHub.CoreServices.DataAccess.SqlDbStore.IClientITaxDescRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor
            </summary>
            <param name="cacheManager">The cache manager</param>
            <param name="cacheRevocationService">The cache revocation service</param>
            <param name="repository">The ClientITaxDesc repository</param>
            <param name="messageHub">The message hub</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientITaxDescService.LookupAllByClientDescId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientITaxDescService.InitializeNew(TaxHub.Models.ClientITaxDesc)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientITaxDescService.GetCacheKeys(TaxHub.Models.ClientITaxDesc)">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.ClientITaxDescService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.ClientITaxDescService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.DepositScheduleHelper">
            <summary>
            Helper Methods
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetNextBusinessDate(System.DateTime,System.Collections.Generic.List{System.DateTime},System.Boolean)">
            <summary>
            Gets Next Business Day based on Holidays and IsPriorDueDate flag
            </summary>
            <param name="dueDate">dueDate</param>
            <param name="holidays">holidays</param>
            <param name="isPrior">isPrior</param>
            <returns>returns DateTime</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetNextDayOfWeekAddingDaysForHolidays(System.DateTime,System.Collections.Generic.List{System.DateTime},System.DayOfWeek)">
            <summary>
            Gets Next Business Day
            </summary>
            <param name="date">period end date</param>
            <param name="holidays">holidays</param>
            <param name="dayOfWeek">list of days allowed</param>
            <returns>returns DateTime</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetNextBusinessDayWithSetDay(System.DateTime,System.Int32,System.DayOfWeek[])">
            <summary>
            Gets Next Business Day
            </summary>
            <param name="date">period end date</param>
            <param name="businessDaysToAdd">number of week days days to add to calculate new date</param>
            <param name="days">list of days allowed</param>
            <returns>returns DateTime</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetNextDay(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets Next Business Day
            </summary>
            <param name="date">period end date</param>
            <param name="day">day of week to return</param>
            <returns>returns DateTime</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.ContainHoliday(System.DateTime,System.Collections.Generic.List{System.DateTime})">
            <summary>
            Checks if a dueDate is a Holiday
            </summary>
            <param name="dueDate">dueDate</param>
            <param name="holidays">holidays</param>
            <returns>Returns Boolean</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetStartDateSemiAnnual(System.Int32,System.Int32)">
            <summary>
            Gets StartDate of Semi Annual
            </summary>
            <param name="year">year</param>
            <param name="period">period</param>
            <returns>Start Date</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetEndDateOfSemiAnnual(System.Int32,System.Int32)">
            <summary>
            Gets EndDate Of Semi Annual
            </summary>
            <param name="year">year</param>
            <param name="period">period</param>
            <returns>End Date</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetSemiMonthlySchedule(System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Collections.Generic.List{System.DateTime},System.Boolean)">
            <summary>
            Gets semi monthly schedule
            </summary>
            <param name="scheduleId">The Schedule Id</param>
            <param name="daysToDueDate"> Number of days from to date to due date</param>
            <param name="businessDays"> Number of business days from to date to due date</param>
            <param name="isEom"> End of the Month</param>
            <param name="year"> Year for current Schedule</param>
            <param name="holidays"> The Holidays list</param>
            <param name="isDueDatePriorToHolidays">Indicate if we need to move forward or backward on duedate</param>
            <returns>The generated Schedules</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetQuarterMonthSchedule(System.String,System.Boolean,System.Int32[],System.Int32,System.Int32,System.Collections.Generic.List{System.DateTime},System.Boolean)">
            <summary>
            Gets semi monthly schedule
            </summary>
            <param name="scheduleId">The Schedule Id</param>
            <param name="businessDays">businessDays</param>
            <param name="toDates"> Due dates</param>
            <param name="numDaysToDueDate"> Number of days to due date from end date</param>
            <param name="year"> Year for current Schedule</param>
            <param name="holidays"> The Holidays list</param>
            <param name="isDueDatePriorToHolidays">Indicate if we need to move forward or backward on duedate</param>
            <returns>The generated Schedules</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetPriorFridayIfHoliday(System.DateTime,System.Collections.Generic.List{System.DateTime})">
            <summary>
            Get Prior Friday
            </summary>
            <param name="dueDate">dueDate</param>
            <param name="holidays">holidays</param>
            <returns>Prior Friday</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetStartDateOfQuarter(System.Int32,System.Int32)">
            <summary>
            Gets StartDate of Quarter
            </summary>
            <param name="year">year</param>
            <param name="quarter">quarter</param>
            <returns>Start Date</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetEndDateOfQuarter(System.Int32,System.Int32)">
            <summary>
            GetEndDateOfQuarter
            </summary>
            <param name="year">year</param>
            <param name="quarter">quarter</param>
            <returns>End Date</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.AddBusinessDays(System.DateTime,System.Int32,System.Collections.Generic.List{System.DateTime})">
            <summary>
            Gets Next Business Day based on Holidays and IsPriorDueDate flag
            </summary>
            <param name="date">period end date</param>
            <param name="businessDaysToAdd">number of business days to add to calculate new date</param>
            <param name="holidays">holidays</param>
            <returns>returns DateTime</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetMonthlySchedules(System.String,System.Int32,System.Int32,System.Boolean,System.Collections.Generic.List{System.DateTime},System.Boolean,System.Boolean)">
            <summary>
            GetMonthlySchedules
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="daysToDueDate">daysToDueDate</param>
            <param name="quarterDaysToDueDate">quarterDaysToDueDate</param>
            <param name="holidays">holidays</param>
            <param name="isDueDatePriorToHolidays">isDueDatePriorToHolidays</param>
            <param name="isEOM">isEOM</param>
            <returns>Returns Monthly Schedules</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetQuarterlySchedules(System.String,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{System.DateTime},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            GetQuarterlySchedules
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="monthsToAdd">monthsToAdd</param>
            <param name="daysToDueDate">daysToDueDate</param>
            <param name="holidays">holidays</param>
            <param name="isDueDatePriorToHolidays">isDueDatePriorToHolidays</param>
            <param name="isEOM">isEOM</param>
            <param name="isDueDatePriorFriday">isDueDatePriorFriday</param>
            <returns>Returns Quarterly Schedules</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetMonthlyJuneExceptionSchedules(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.DateTime},System.Boolean)">
            <summary>
            Gets Monthly June Exception Schedules
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="dueday">dueday</param>
            <param name="holidays">holidays</param>
            <param name="isDueDatePriorToHolidays">isDueDatePriorToHolidays</param>
            <returns>Returns GMonthly June Exception Schedules</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetAnnualSchedules(System.String,System.Int32,System.DateTime,System.Collections.Generic.List{System.DateTime},System.Boolean)">
            <summary>
            Gets Annual Schedules
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="dueDate">dueDate</param>
            <param name="holidays">holidays</param>
            <param name="isDueDatePriorToHolidays">isDueDatePriorToHolidays</param>
            <returns>Returns Annual Schedules</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetSemiAnnualSchedules(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.DateTime},System.Boolean)">
            <summary>
            Gets Semi Annual Schedules
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="dueday">dueday</param>
            <param name="holidays">holidays</param>
            <param name="isDueDatePriorToHolidays">isDueDatePriorToHolidays</param>
            <returns>Returns Semi Annual Schedules</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GenerateSemiMonthlySchedule14(System.String,System.Int32,System.Collections.Generic.List{System.DateTime},System.Boolean)">
            <summary>
            Generate SemiMonthly Schedule14 Schedules
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="holidays">holidays</param>
            <param name="isDueDatePriorToHolidays">isDueDatePriorToHolidays</param>
            <returns>Returns SemiMonthly Schedule14 Schedules</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetDailySchedules(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.DateTime},System.Boolean)">
            <summary>
            GetDailySchedules
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="daysToDueDate">daysToDueDate</param>
            <param name="year">year</param>
            <param name="holidays">holidays</param>
            <param name="isDueDatePriorToHolidays">isDueDatePriorToHolidays</param>
            <returns>GetDailySchedules</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetFirstDayOfYearThatIsAParticularDay(System.Int32,System.DayOfWeek)">
            <summary>
            Gets the first day of the year that is a particular day.
            </summary>
            <param name="year">year</param>
            <param name="dayOfWeek">The da</param>
            <returns>End Date</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.DatesSpanQuarterEnd(System.DateTime,System.DateTime)">
            <summary>
            Returns True if the dates span the quarter.
            </summary>
            <param name="startDate">startDate of period to check</param>
            <param name="endDate">endDate of period to check</param>
            <returns>true if dates span a quarter</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GenerateWeeklyDepositSchedule(System.String,System.Int32,System.DayOfWeek,TaxHub.CoreServices.Application.DepositScheduleHelper.DueDateStrategy)">
            <summary>
            Generates DepositSchedule for weekly deposits where due Date is a .
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="toDay">day that is considered the end of the period</param>
            <param name="dueDateStrategy">strategy for calculating the due date</param>
            <returns>returns a list of depositScheudle</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GetDailySchedulesWithDueDateStrategy(System.String,System.Int32,System.DayOfWeek,TaxHub.CoreServices.Application.DepositScheduleHelper.DueDateStrategy)">
            <summary>
            GetDailySchedulesWithDueDateStrategy
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="toDay">day that is considered the start of the period</param>
            <param name="dueDateStrategy">strategy for calculating the due date</param>
            <returns>GetDailySchedules</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleHelper.GenerateSemiWeeklyDepositSchedules(System.String,System.Int32,TaxHub.CoreServices.Application.DepositScheduleHelper.DueDateStrategy,System.DayOfWeek[])">
            <summary>
            Generates DepositSchedule for weekly deposits where due Date is a .
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="dueDateStrategy">strategy for calculating the due date</param>
            <param name="periodEndDays">Days of the week on which the period must end</param>
            <returns>returns a list of depositScheudle</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.DepositScheduleHelper.DueDateStrategy">
            <summary>
            Strategy for calculating the due date.
            </summary>
            <param name="toDate">Date For End Of Period.</param>
            <param name="isYearEnd">Signifies this date represents year end..</param>
            <returns>return due date</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.DepositScheduleService">
            <summary>
            Creates Instance of DepositScheduleService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleService.#ctor(TaxHub.CoreServices.DataAccess.IDepositScheduleRepository,TaxHub.CoreServices.Application.IScheduleService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes new instance of DepositScheduleService
            </summary>
            <param name="repository"> Deposit Schedule repo</param>
            <param name="scheduleService">Schedule Service</param>
            <param name="messageHub">Message Hub</param>
            <param name="logger">The app logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleService.FindAllByScheduleId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleService.GenerateDepositSchedule(System.String,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />   // returning List of ScheduleIds to represent on the UI how many sucessfully generated and how many failed
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleService.Delete(TaxHub.Models.DepositSchedule,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleService.IsScheduleIdExtendedForYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleService.Update(TaxHub.Models.DepositSchedule,TaxHub.Models.DepositSchedule,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.DepositScheduleService.FindOneByScheduleIdAndDateBetweenFromAndToDate(System.String,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IDepositScheduleService">
            <summary>
            IDepositScheduleService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDepositScheduleService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets a record by Id
            </summary>
            <param name="id">DepositSchedule Unique Identifier</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>returns a record of DepositSchedule</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDepositScheduleService.FindAllByScheduleId(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a IEnumerable collection of Depsoit Schedules
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Enumerable Collection</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDepositScheduleService.IsScheduleIdExtendedForYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if the schedule is extended for the year
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDepositScheduleService.Delete(TaxHub.Models.DepositSchedule,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified schedule
            </summary>
            <param name="depositSchedule">DepositSchedule</param>
            <param name="eventData">EventDataParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDepositScheduleService.GenerateDepositSchedule(System.String,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Generates the Calendars for given SchduleId/ ALL ScheduleIds
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="eventDataParams">eventDataParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Returns a List</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDepositScheduleService.Update(TaxHub.Models.DepositSchedule,TaxHub.Models.DepositSchedule,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates Notes/duedate
            </summary>
            <param name="command"> The Command</param>
            <param name="item">Original Iten</param>
            <param name="eventDataParams">Event Params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Aggregate result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDepositScheduleService.Create(TaxHub.Models.DepositSchedule,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified schedule
            </summary>
            <param name="depositSchedule">DepositSchedule</param>
            <param name="eventDataParams">EventDataParams</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>Aggregate result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDepositScheduleService.FindOneByScheduleIdAndDateBetweenFromAndToDate(System.String,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Get deposit schedule by scheduleId and date between from and to date.
            </summary>
            <param name="scheduleId">The schedule identifier.</param>
            <param name="date">The requested date</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>returns a deposit schedule</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IInboundFileService">
            <summary>
            The IInboundFileService interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInboundFileService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds an inbound file given the inbound file id
            </summary>
            <param name="inboundFileId">The inbound file id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The inboundFile</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInboundFileService.Create(TaxHub.Models.Commands.InboundFileCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a new inbound file.
            </summary>
            <param name="createCommand">The inbound file create command.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>see <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateExtendedResult"/>"</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInboundFileService.GetFromObjectStorage(TaxHub.Models.InboundFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Gets a stream from the object storage
            </summary>
            <param name="inboundFile">The inbound file.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns a stream</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInboundFileService.GetFromObjectStorage(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Gets a stream from the object storage
            </summary>
            <param name="inboundFileId">The inbound file id.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns a stream</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInboundFileService.GetUdesFilesForImport(System.String,TaxHub.Models.InboundFileType,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Gets a list of file names from Udes that have not been imported
            </summary>
            <param name="udesFolder">The folder name</param>
            <param name="inboundFileType">The inbound file type</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The list of file names</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInboundFileService.GetAllUdesFiles(System.String,System.String,System.IO.SearchOption,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Gets a list of files from Udes.
            </summary>
            <param name="udesFolder">The Udes folder.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <param name="eventDataParams">The event data params.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInboundFileService.DownloadUdesFile(System.String,System.String,TaxHub.Models.InboundFileType,System.DateTime,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Downloads files from Udes
            </summary>
            <param name="udesFolder">The udes folder</param>
            <param name="udesFileName">The udes file name</param>
            <param name="fileType">The file type</param>
            <param name="expirationUtcTime">The expiration date time in utc</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True for success and false for failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInboundFileService.MoveUdesFile(System.String,System.String,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Moves a file in Udes from one folder to another one
            </summary>
            <param name="udesFolderFrom">The origin folder</param>
            <param name="udesFolderTo">The destination folder</param>
            <param name="fileName">The file name</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True for success and false for failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInboundFileService.DeleteUdesFile(System.String,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Delete a file from Udes
            </summary>
            <param name="udesFolderFrom">The origin folder</param>
            <param name="fileName">The file name</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True for success and false for failure</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.InboundFileContentStatusEnum">
            <summary>
            Represents the status of getting the content of an InboundFile.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.InboundFileContentStatusEnum.InboundFileNotFound">
            <summary>
            The inbound file aggregate was not found
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.InboundFileContentStatusEnum.FileNotInObjectStore">
            <summary>
            The file content is not in object store
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.InboundFileContentStatusEnum.Failure">
            <summary>
            Failed to get the inbound file content from object store
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.InboundFileContentStatusEnum.Success">
            <summary>
            The inbound file content was successfully retrieved from object store
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.InboundFileContentResult">
            <summary>
            Represents the result of getting the content of an InboundFile.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.InboundFileContentResult.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Application.InboundFileContentResult.FileType">
            <summary>
            Gets or sets the type of the file.
            </summary>
            <value>
            The type of the file.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Application.InboundFileContentResult.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileContentResult.#ctor(TaxHub.CoreServices.Application.InboundFileContentStatusEnum,TaxHub.Models.InboundFileType,TaxHub.Hosting.Runtime.TemporaryStreamResult)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.InboundFileContentResult"/> class.
            </summary>
            <param name="status">The status.</param>
            <param name="content">The content.</param>
            <param name="fileType">Type of the file.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPaymentScheduleService">
            <summary>
            Payment schedule service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentScheduleService.GetFrequencyCategory(System.DateTime,System.DateTime,System.String,System.Threading.CancellationToken)">
            <summary>
            Get payment frequency category.
            </summary>
            <param name="checkDate">The payment check date.</param>
            <param name="paymentDueDate">The payment due date.</param>
            <param name="scheduleId">The payment schedule identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The PaymentFrequencyCategory</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentScheduleService.CalculatePaymentDueDate(System.String,System.String,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Calculate payment due date. Throws exception if unable to retrieve the due date.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="payeeId">The payeeId.</param>
            <param name="checkDate">The check date.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The due date</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PeriodicIngestion.PeriodicAggregationPipeline">
            <summary>
            Represents the periodic aggregation service pipeline
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicIngestion.PeriodicAggregationPipeline.#ctor(System.Threading.Tasks.Dataflow.BufferBlock{TaxHub.Models.MappedTaxPay},System.Threading.Tasks.Dataflow.ActionBlock{System.Collections.Generic.IEnumerable{TaxHub.Models.PeriodicTaxInstance}})">
            <summary>
            Initializes a new instance of PeriodicAggregationPipeline
            </summary>
            <param name="mappedTaxPayBufferBlock">The buffer block.</param>
            <param name="periodicTaxInstanceActionBlock">The action block.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PeriodicIngestion.PeriodicAggregationPipeline.MappedTaxPayBufferBlock">
            <summary>
            The buffer block
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PeriodicIngestion.PeriodicAggregationPipeline.PeriodicTaxInstanceActionBlock">
            <summary>
            The action block
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord">
            <summary>
            Represents the DTO for the YearEndCsvEmployee aggregate.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.ClientCsvId">
            <summary>
            The ClientCsvId.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.FirstName">
            <summary>
            The FirstName.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.MiddleName">
            <summary>
            The MiddleName.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.LastName">
            <summary>
            The LastName.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.Ssn">
            <summary>
            The SSN.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.AddressLine1">
            <summary>
            The AddressLine1.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.AddressLine2">
            <summary>
            The AddressLine2.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.City">
            <summary>
            The City.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.State">
            <summary>
            The State.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.ZipCode">
            <summary>
            The ZipCode.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.TaxableWages">
            <summary>
            The TaxableWages.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.TaxWithheld">
            <summary>
            The TaxWithheld.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.ResidentPsd">
            <summary>
            The ResidentPsd.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.WorkPsd">
            <summary>
            The WorkPsd.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.Locality">
            <summary>
            The Locality.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.AccountNumber">
            <summary>
            The AccountNumber.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.MedicareWages">
            <summary>
            The MedicareWages.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord.Suffix">
            <summary>
            The Suffix.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.EeWage">
            <summary>
            The ee wage class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.EeWage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.EeWage"/> class.
            </summary>
            <param name="ssn">The social security number.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.EeWage.Ssn">
            <summary>
            Gets the social security number.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord">
            <summary>
            The year end rs record class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.RaId">
            <summary>
            Gets or sets the ra id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.ReId">
            <summary>
            Gets or sets the re id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.StateCode">
            <summary>
            Gets or sets the state code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.RwId">
            <summary>
            Gets or sets the rw id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.SocialSecurityNumber">
            <summary>
            Gets or sets the social security number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.MiddleName">
            <summary>
            Gets or sets the middle name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.AccountNumber">
            <summary>
            Gets or sets the account number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.SuiGrossWages">
            <summary>
            Gets or sets the sui gross wages.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.SuiTaxableWages">
            <summary>
            Gets or sets the sui taxable wages.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.WeeksWorked">
            <summary>
            Gets or sets the weeks worked.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.StateTaxableWages">
            <summary>
            Gets or sets the state taxable wages.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.StateTaxWithheld">
            <summary>
            Gets or sets the state tax withheld.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.LocalCode">
            <summary>
            Gets or sets the local code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.LocalTaxableWages">
            <summary>
            Gets or sets the local taxable wages.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.LocalTaxWithheld">
            <summary>
            Gets or sets the local tax withheld.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.Duplicate">
            <summary>
            Gets or sets the duplicate flag.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.FileLineNumber">
            <summary>
            Gets or sets the file line number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.RecordContent">
            <summary>
            Gets or sets the record content.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.W2C">
            <summary>
            Gets or sets the w2c flag.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.ModifyDate">
            <summary>
            Gets or sets the modify date.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.ModifyUser">
            <summary>
            Gets or sets the modify user.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.TransientId">
            <summary>
            Gets or sets the transient id.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord.ToSanitizedYearEndRsInfo(System.String)">
            <summary>
            Returns year end rs info.
            </summary>
            <param name="userDescription">The user description.</param>
            <returns>The year end rs info</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YeRecordGroup">
            <summary>
            The record group class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YeRecordGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YeRecordGroup"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YeRecordGroup.TransientId">
            <summary>
            Gets the transient id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YeRecordGroup.YeRwInfo">
            <summary>
            Gets or sets the year end RW info.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YeRecordGroup.YeRoInfos">
            <summary>
            Gets the year end RO infos.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YeRecordGroup.YeRsInfos">
            <summary>
            Gets the year end RS infos.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeGroupingForCsv">
            <summary>
            Grouping for formatters that build Csv records.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeGroupingForCsv.ClientCsvId">
            <summary>
            Gets or sets the client CSV identifier.
            </summary>
            <value>
            The client CSV identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeGroupingForCsv.MedicareWages">
            <summary>
            Gets or sets the medicare wages.
            </summary>
            <value>
            The medicare wages.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeGroupingForCsv.WorkPsdCode">
            <summary>
            Gets or sets the work PSD code.
            </summary>
            <value>
            The work PSD code.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeGroupingForCsv.ResidentPsdCode">
            <summary>
            Gets or sets the resident PSD code.
            </summary>
            <value>
            The resident PSD code.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeGroupingForCsv.Locality">
            <summary>
            Gets or sets the locality.
            </summary>
            <value>
            The locality.
            </value>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2GroupingForEfw2">
            <summary>
            Grouping for formatters that build efw2 records.
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2Grouping" />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2GroupingForEfw2.RaId">
            <summary>
            The ra identifier
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2GroupingForEfw2.ReId">
            <summary>
            The re identifier
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2GroupingForEfw2.RwId">
            <summary>
            The rw identifier
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2GroupingForEfw2.TransientId">
            <summary>
            Gets or sets the transient id.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2Grouping">
            <summary>
            A Grouping of QrfEmployeeStateAndLocalW2s
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2Grouping.LocalYtdTax">
            <summary>
            The year-to-date tax
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2Grouping.LocalYtdTaxableWages">
            <summary>
            The year-to-date taxable wages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2Grouping.StateYtdTax">
            <summary>
            Gets or sets the state year to date tax.
            </summary>
            <value>
            The state year to date tax.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2Grouping.StateYtdTaxableWages">
            <summary>
            Gets or sets the state year to date taxable wages.
            </summary>
            <value>
            The state year to date taxable wages.
            </value>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2PennsylvaniaGrouping">
            <summary>
            Grouping for Pennsylvania formats.
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2GroupingForEfw2" />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2PennsylvaniaGrouping.WorkPsdCode">
            <summary>
            The PSD work code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2PennsylvaniaGrouping.ResidentPsdCode">
            <summary>
            The PSD resident code
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping">
            <summary>
            Grouping for Ohio formats.
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2Grouping" />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping.TaxingEntityCode">
            <summary>
            The taxing entity code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping.TaxingEntityDescription">
            <summary>
            The taxing entity description
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping.Layout">
            <summary>
            The layout
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping.#ctor">
            <summary>
            New instance of <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfOhioCsvFormatService.#ctor(TaxHub.Models.YearEndIngestion.YeQrfLayoutType,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Csv.IQrfCsvFormatter{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeGroupingForCsv})">
            <summary>Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfOhioCsvFormatService"/> class.
            This format service groups by ClientCsvId and Locality. Its used by certain Ohio tax codes
            and it sets the locality based on the tax code value.
            </summary>
            <param name="layout">The layout.</param>
            <param name="fileFormatter">The file formatter.</param>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfOhioCsvFormatService.localities">
            <summary>
            The localities
            todo: Get this list via a 'LocalityProvider' https://ultidev/browse/ULTI-409506
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatService.#ctor(TaxHub.Models.YearEndIngestion.YeQrfLayoutType,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Csv.IQrfCsvFormatter{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeGroupingForCsv},System.String)">
            <summary>Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatService"/> class.
            This format service groups by ClientCsvId</summary>
            <param name="layout">The layout.</param>
            <param name="fileFormatter">The file formatter.</param>
            <param name="stateAbbreviation">The state abbreviation. Used to gather the state taxable wages.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfWithPsdCsvFormatService.#ctor(TaxHub.Models.YearEndIngestion.YeQrfLayoutType,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Csv.IQrfCsvFormatter{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeGroupingForCsv},System.String)">
            <summary>Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfWithPsdCsvFormatService"/> class.
            This format service groups records by ClientCsvId, WorkPsdCode and ResidentPsdCode</summary>
            <param name="layout">The layout.</param>
            <param name="fileFormatter">The file formatter.</param>
            <param name="stateAbbreviation">The state abbreviation. Used to gather the state taxable wages</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatServiceBase">
            <summary>
            The Service for formatting QRF files into a CSV output
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatServiceBase.#ctor(TaxHub.Models.YearEndIngestion.YeQrfLayoutType,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Csv.IQrfCsvFormatter{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeGroupingForCsv},System.String)">
            <summary>Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatServiceBase"/> class.</summary>
            <param name="layout">The layout.</param>
            <param name="fileFormatter">The file formatter.</param>
            <param name="stateAbbreviation">The state abbreviation. Used to gather the state taxable wages.</param>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatServiceBase.fileFormatter">
            <summary>
            The file formatter.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatServiceBase.layout">
            <summary>
            The layout
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatServiceBase.stateAbbreviation">
            <summary>
            The state abbreviation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatServiceBase.Format(TaxHub.Models.YearEndIngestion.QrfEmployee,TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForCsv,TaxHub.Common.Logging.IAppLogger)">
            <inheritdoc />
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatServiceBase.medicareWagesTaxCode">
            <summary>
            The medicare wages tax code
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatServiceBase.GetMedicareWages(System.Collections.Generic.ICollection{TaxHub.Models.YearEndIngestion.QrfEmployeeFederalW2})">
            <summary>
            Gets the medicare wages from the federal w2 records
            </summary>
            <param name="federalW2s">The federal W2S.</param>
            <returns>The medicare wages amount.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatServiceBase.GetStateTaxableWages(System.Collections.Generic.ICollection{TaxHub.Models.YearEndIngestion.QrfEmployeeStateAndLocalW2ForCsv})">
            <summary>
            Gets the state taxable wages from the employee w2 state records
            </summary>
            <param name="employeeW2s">The employee W2S.</param>
            <returns>The state taxable wages amount.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Csv.QrfCsvFormatServiceBase.FilterAndGroupEmployeeData(TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForCsv)">
            <summary>
            Filters and groups employee data.
            </summary>
            <param name="formatInput">The format inputs.</param>
            <returns>The resulting list of filtered and grouped employee data.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.IQrfFileFormatService`2">
            <summary>
            The Service for formatting Year End files into a desired output.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.IQrfFileFormatService`2.Format(TaxHub.Models.YearEndIngestion.QrfEmployee,`0,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Formats the QrfEmployee and other format input data into a desired output.
            </summary>
            <param name="employee">The employee.</param>
            <param name="formatInput">The format input data.</param>        
            <param name="correlatedLogger">The correlated logger</param>
            <returns>
            A list of output objects.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.IQrfRWFormatService">
            <summary>
            Service for formatting RW records
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.IQrfRWFormatService.Format(TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Models.YearEndIngestion.QrfEmployee,System.Int32,System.Int32)">
            <summary>
            Formats the RW record content using the provided data.
            </summary>
            <param name="yearEndRwInfo">The year end RW info.</param>
            <param name="qrfEmployee">The QRF employee.</param>
            <param name="raId">The RA id.</param>
            <param name="reId">The RE id.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.IQrfRWFormatService.Format(TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Models.YearEndIngestion.QrfEmployeeData,System.Int32,System.Int32)">
            <summary>
            Formats the RW record content using the provided data.
            </summary>
            <param name="yearEndRwInfo">The year end RW info.</param>
            <param name="qrfEmployeeData">The QRF employee data.</param>
            <param name="raId">The RA id.</param>
            <param name="reId">The RE id.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfOhButlerRSFormatService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfOhButlerRSFormatService.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfLocalCodeDescriptionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfOhButlerRSFormatService" /> class.
            </summary>
            <param name="localCodeDescriptionProvider">The local code description provider.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfOhButlerRSFormatService.FilterToRelevantW2s(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForEfw2})">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfPennsylvaniaLstRSFormatService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfPennsylvaniaLstRSFormatService.#ctor(TaxHub.Models.YearEndIngestion.YeQrfLayoutType,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.IQrfRSFormatter{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2PennsylvaniaGrouping})">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfPennsylvaniaLstRSFormatService" /> class.
            </summary>
            <param name="layout">The layout.</param>
            <param name="fileFormatter">The file formatter.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfPennsylvaniaLstRSFormatService.GetStateAbbreviation">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfPennsylvaniaLstRSFormatService.GroupStateAndLocalW2s(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForEfw2},TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForEfw2)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfPennsylvaniaEitRSFormatService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfPennsylvaniaEitRSFormatService.#ctor(TaxHub.Models.YearEndIngestion.YeQrfLayoutType,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.IQrfRSFormatter{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2PennsylvaniaGrouping})">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfPennsylvaniaEitRSFormatService" /> class.
            </summary>
            <param name="layout">The layout.</param>
            <param name="fileFormatter">The file formatter.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfPennsylvaniaEitRSFormatService.GetStateAbbreviation">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfPennsylvaniaEitRSFormatService.GroupStateAndLocalW2s(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForEfw2},TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForEfw2)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfOhioRSFormatService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfOhioRSFormatService.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfLocalCodeDescriptionProvider,TaxHub.Models.YearEndIngestion.YeQrfLayoutType,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.IQrfRSFormatter{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping})">
            <summary>
            Initializes a new instance of the QrfOhioRSFormatService class.
            </summary>
            <param name="localCodeDescriptionProvider">The local code description provider.</param>
            <param name="layoutType">The layout type.</param>
            <param name="fileFormatter">The file formatter.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfOhioRSFormatService.GetStateAbbreviation">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfOhioRSFormatService.FilterToRelevantW2s(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForEfw2})">
            <summary>
            Filters the state and local W2s to the W2s relevant to the file type.
            </summary>
            <param name="enrichedStateAndLocalW2s">The enriched State and Local W2s to be filtered.</param>
            <returns>The relevant W2s.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfOhioRSFormatService.GroupStateAndLocalW2s(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForEfw2},TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForEfw2)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfRWFormatService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfRWFormatService.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.IQrfRWFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfRWFormatService"/> class.
            </summary>
            <param name="rwFormatter">The QRF RW formatter.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfRWFormatService.Format(TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Models.YearEndIngestion.QrfEmployee,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfRWFormatService.Format(TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Models.YearEndIngestion.QrfEmployeeData,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfRSFormatServiceBase`1">
            <summary>
            The Service for formatting QRF files into a EFW2 RS records.
            </summary>
            <typeparam name="T">The employee grouping type.</typeparam>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfRSFormatServiceBase`1.fileFormatter">
            <summary>
            The file formatter.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfRSFormatServiceBase`1.Format(TaxHub.Models.YearEndIngestion.QrfEmployee,System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForEfw2},TaxHub.Common.Logging.IAppLogger)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfRSFormatServiceBase`1.GetStateAbbreviation">
            <summary>
            The state abbreviation
            </summary>
            <returns>The State Abbreviation for this specific format.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.Efw2.QrfRSFormatServiceBase`1.GroupStateAndLocalW2s(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForEfw2},TaxHub.Models.YearEndIngestion.QrfEmployeeFormatInputForEfw2)">
            <summary>
            Groups the state and local W2S.
            </summary>
            <param name="formatInputs">The enriched state and local w2s.</param>
            <param name="stateRecord">The state record.</param>
            <remarks>This method should also filter out any State And Locals this format doesn't care about.</remarks>
            <remarks>This method should return one Grouping per RS Record to be written.</remarks>
            <returns>A grouping of State And Local W2s.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.IQrfFileFormatServiceFactory">
            <summary>
            Factory for getting a <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.IQrfFileFormatService`2"></see>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.IQrfFileFormatServiceFactory.GetRSFormatServiceByLayout(TaxHub.Models.YearEndIngestion.YeQrfLayoutType)">
            <summary>
            Gets the RS records format service by layout.
            </summary>
            <param name="layout">The layout.</param>
            <returns>The File Format Service for that layout.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.IQrfFileFormatServiceFactory.GetCsvFormatServiceByLayout(TaxHub.Models.YearEndIngestion.YeQrfLayoutType)">
            <summary>
            Gets the Csv records format service by layout.
            </summary>
            <param name="layout">The layout.</param>;
            <returns>The File Format Service for that layout.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.QrfFileFormatServiceFactory">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.QrfFileFormatServiceFactory.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfLocalCodeDescriptionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.QrfFileFormatServiceFactory"/> class.
            </summary>
            <param name="localCodeDescriptionProvider">The local code description provider.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.QrfFileFormatServiceFactory.GetRSFormatServiceByLayout(TaxHub.Models.YearEndIngestion.YeQrfLayoutType)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.QrfFileFormatServiceFactory.GetCsvFormatServiceByLayout(TaxHub.Models.YearEndIngestion.YeQrfLayoutType)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Csv.QrfWithStateTaxableWagesCsvFormatter">
            <summary>This formatter populates the TaxableWages from the StateYtdTaxableWages field.</summary>
            <seealso cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Csv.QrfCsvFormatter" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Csv.QrfCsvFormatter.FormatRecord(TaxHub.Models.YearEndIngestion.QrfEmployee,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeGroupingForCsv)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Csv.QrfCsvFormatter.CustomizeData(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndCsvEmployeeRecord,TaxHub.Models.YearEndIngestion.QrfEmployee,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeGroupingForCsv)">
            <summary>Perform any final update if required by a specific format.</summary>
            <param name="yearEndCsvEmployee">The year end csv employee.</param>
            <param name="qrfEmployee">The qrf employee.</param>
            <param name="grouping">The grouping.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.IQrfRWFormatter">
            <summary>
            QRF RW record content formatter.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.IQrfRWFormatter.FormatRecordContent(TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Models.YearEndIngestion.QrfEmployeeData)">
            <summary>
            Formats the RW record content.
            </summary>
            <param name="rwRecord">The RW record.</param>
            <param name="qrfEmployeeData">The QRF Employee data.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.FormatRecord(TaxHub.Models.YearEndIngestion.QrfEmployee,`0)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.FormatFromRsRecord(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase{`0}.YearEndRSSupplemental)">
            <summary>
            Formats the content of the rs record, and assigns it to RecordContent.
            </summary>
            <param name="yearEndRsRecord">The year end rs record.</param>
            <param name="supplementalInfo">The supplemental information.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental">
            <summary>
            Information for writing the RS Record that is not present on YearEndRSInfo.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.#ctor(TaxHub.Models.YearEndIngestion.QrfEmployee)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental"/> class.
            </summary>
            <param name="qrfEmployee">The qrf employee.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.TaxingEntityCode">
            <summary>
            The taxing entity code.
            Position 5-9.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.Suffix">
            <summary>
            The suffix.
            Position 69-72.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.LocationAddress">
            <summary>
            The location address.
            Position 73-94.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.DeliveryAddress">
            <summary>
            The delivery address.
            Position 95-116.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.City">
            <summary>
            The city.
            Position 117-138.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.StateAbbreviation">
            <summary>
            The state abbreviation.
            Position 139-140.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.StateCode">
            <summary>
            The state code.
            Position 274-275.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.ZipCodeAndExtension">
            <summary>
            The zip code.
            Position 141-149.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.Miscellaneous">
            <summary>
            The miscellaneous.
            Position 338-487.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.ExtraCharacter">
            <summary>
            The extra character.
            Position 308-308.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase`1.YearEndRSSupplemental.RecordContentSsn">
            <summary>
            Gets or sets the social security number to use in the record content.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfIssiRSFormatter">
            <summary>
            Formatter for the ISSI format.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfIssiRSFormatter.CustomizeData(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping}.YearEndRSSupplemental)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfOhGeneralRSFormatter">
            <summary>
            General formatter for the Ohio format.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfOhGeneralRSFormatter.FormatRecord(TaxHub.Models.YearEndIngestion.QrfEmployee,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfOhGeneralRSFormatter.CustomizeData(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping}.YearEndRSSupplemental)">
            <summary>
            Perform any final update if required by a specific format.
            </summary>
            <param name="rsRecord">The RS record data.</param>
            <param name="supplementalInfo">The supplemental data.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfOhButlerRSFormatter">
            <summary>
            Formatter for the Oh Butler format.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfOhButlerRSFormatter.CustomizeData(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping}.YearEndRSSupplemental)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfOhSpringboroRSFormatter">
            <summary>
            Formatter for the Springboro format.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfOhSpringboroRSFormatter.CustomizeData(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping}.YearEndRSSupplemental)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfOhMitsRSFormatter">
            <summary>
            Formatter for the MITS format.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfOhMitsRSFormatter.CustomizeData(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2OhioGrouping}.YearEndRSSupplemental)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfPaGeneralLstRSFormatter">
            <summary>
            General formatter for the Pennsylvania LST format.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfPaGeneralLstRSFormatter.FormatRecord(TaxHub.Models.YearEndIngestion.QrfEmployee,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2PennsylvaniaGrouping)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfPaGeneralLstRSFormatter.CustomizeData(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YearEndRsRecord,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRSFormatterBase{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2PennsylvaniaGrouping}.YearEndRSSupplemental)">
            <summary>
            Perform any final update if required by a specific format.
            </summary>
            <param name="rsRecord">The RS record data.</param>
            <param name="supplementalInfo">The supplemental data.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfPaFranklinEitRSFormatter">
            <summary>
            Formatter for the Franklin EIT format.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfPaFranklinEitRSFormatter.FormatRecord(TaxHub.Models.YearEndIngestion.QrfEmployee,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.EmployeeGroupings.StateAndLocalGroupings.QrfEmployeeStateAndLocalW2PennsylvaniaGrouping)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRWFormatter">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.Efw2.QrfRWFormatter.FormatRecordContent(TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Models.YearEndIngestion.QrfEmployeeData)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.IQrfFileFormatter`2">
            <summary>
            Formatter for converting a Qrf Employee and a Grouping object into a desired record type.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Formatters.IQrfFileFormatter`2.FormatRecord(TaxHub.Models.YearEndIngestion.QrfEmployee,`0)">
            <summary>
            Formats a QrfEmployee and its grouping object into a desired record type.
            </summary>
            <param name="qrfEmployee">The QRF employee.</param>
            <param name="grouping">The grouping.</param>        
            <returns>
            The formatted record.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfFileProcessingService">
            <summary>
            Csv workflow logic
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfFileProcessingService" />
            <inheritdoc />
            <summary>
            The RTS File Processor responsible for processing an RTS file for Year End.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfFileProcessingService.ProcessCsvOutput(System.Guid,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfFileProcessingService.ProcessQrfFile(System.String,System.Int32,System.String,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfFileProcessingService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEndIngestion.IYEFileStorageService,TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Application.YearEndIngestion.IYEFileIngestor,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfLayoutProvider,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.FormatServices.IQrfFileFormatServiceFactory,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfEmployeeProcessingService,TaxHub.CoreServices.Application.IClientService,TaxHub.Hosting.Runtime.IDomainService,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder,TaxHub.CoreServices.Application.IYearlyTaxInstanceService,TaxHub.CoreServices.Application.YearEnd.IYearEndRAService,TaxHub.CoreServices.Application.YearEnd.IYearEndRWService,TaxHub.CoreServices.Application.YearEnd.IYearEndROService,TaxHub.CoreServices.Application.YearEnd.IYearEndBulkService,TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService,TaxHub.CoreServices.Application.YearEnd.IYearEndCsvClientService,TaxHub.CoreServices.Application.YearEnd.IYearEndCsvEmployeeService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            The constructor for the RTS file processor.
            </summary>
            <param name="logger">The App Logger.</param>
            <param name="fileStorageService">The rts file manager.</param>
            <param name="yeProcessingService">The rts processing service.</param>
            <param name="messageHub">The message hub.</param>
            <param name="yeQrfFileIngestor">The year end qrf file ingestor.</param>
            <param name="layoutProvider">The layout provider.</param>
            <param name="fileFormatServiceFactory">The file format service factory.</param>
            <param name="qrfEmployeeProcessingService">The QRF employee processing service.</param>
            <param name="clientService">The client service.</param>
            <param name="domainService">The domain service.</param>
            <param name="metricsBuilder">The metrics builder</param>
            <param name="yearlyTaxInstanceService">The yearly tax instance service.</param>
            <param name="yearEndRaService">The year end ra service.</param>
            <param name="yearEndRwService">The year end rw service.</param>
            <param name="yearEndRoService">The year end ro service.</param>
            <param name="yearEndBulkService">The year end bulk service.</param>
            <param name="yearEndAgencyService">The year end Agency service.</param>
            <param name="yearEndCsvClientService">The year end CSV client service.</param>
            <param name="yearEndCsvEmployeeService">The year end CSV employee service.</param>
            <param name="featureToggleConfiguration">The feature toggle configuration.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfFileProcessingService.ParseQrfFile(TaxHub.Models.Commands.RtsFileReceivedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfFileProcessingService.GetTaxCodeDict(System.String,System.Guid,System.Collections.Generic.List{TaxHub.Models.YearEndIngestion.YEIngestionLog},TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Gets the tax code dictionary.
            <remarks>
            We made a few assumptions in this function:
            First, we assume that any two entries in the cache with the same alias will map to the same UltiproTaxcode.
            Second, we assume that any two entries in the cache with the same UltiproTaxcode should map to the same YeAgency.
            Third, we assume that if an UltiproTaxcode has no entries that map to a non-null YeAgency, that TaxCode should be skipped.
            </remarks>
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="inboundFileId">The inbound file identifier.</param>
            <param name="validationSummaries">The validation summaries</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <returns>
            A dictionary from TaxCode to tax code-specific information.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfFileProcessingService.GetStartFileIngestionCommand(TaxHub.CoreServices.Application.YearEndIngestion.YEPrepareProcessingResult)">
            <summary>
            Creates a command object to start ye file ingestion, using the CurrentYEFile info from a YEPrepareProcessingResult object.
            </summary>
            <param name="yeProcessingResult">The ye processing result.</param>
            <returns>The StartFileIngestionCommand object.</returns>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YETaxCodeInfo.mainPayeeOverrides">
            <summary>
            The main payee overrides
            key: UltiproTaxCode
            value: Agency
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.CodeDescriptionLists.QrfOhButlerLocalCodeDescriptions">
            <summary>
            Code/Description List for Butler (OH Locals)
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.CodeDescriptionLists.QrfOhButlerLocalCodeDescriptions.List">
            <summary>
            The list
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.CodeDescriptionLists.QrfOhSpringboroLocalCodeDescriptions">
            <summary>
            Code/Description List for OH Springboro (OH Locals)
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.CodeDescriptionLists.QrfOhSpringboroLocalCodeDescriptions.List">
            <summary>
            The list
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.CodeDescriptionLists.QrfOhIssiLocalCodeDescriptions">
            <summary>
            Code/Description List for ISSI (OH Locals)
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.CodeDescriptionLists.QrfOhIssiLocalCodeDescriptions.List">
            <summary>
            The list
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfLocalCodeDescriptionProvider">
            <summary>
            Year-End Qrf Local Code Description Provider for RS record content
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfLocalCodeDescriptionProvider.GetCodeAndDescription(TaxHub.Models.YearEndIngestion.YeQrfLayoutType,System.String,System.String,System.String)">
            <summary>
            Gets the code and description.
            </summary>
            <param name="yeQrfLayoutType">Type of the ye QRF layout.</param>
            <param name="ultiProTaxCode">The ulti pro tax code.</param>
            <param name="agencyDescription">The agency description.</param>
            <param name="agencyState">The agency state abbreviation.</param>
            <returns>A tuple containing code and description.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfEmployeeProcessingService">
            <summary>
            Service for managing QrfEmployeeProcessing
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfEmployeeProcessingService.Create(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeEntry},System.Threading.CancellationToken)">
            <summary>
            Creates the specified employee entries.
            </summary>
            <param name="employeeEntries">The employee entries.</param>
            <param name="cancellationToken">the cancellation token.</param>
            <returns>True iff successful.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfEmployeeProcessingService.Create(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeStateAndLocalW2},System.Threading.CancellationToken)">
            <summary>
            Creates the specified employee state and local w2s.
            </summary>
            <param name="employeeStateAndLocalW2s">The employee state and local w2s.</param>
            <param name="cancellationToken">the cancellation token.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfEmployeeProcessingService.Create(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeFederalW2},System.Threading.CancellationToken)">
            <summary>
            Creates the specified employee federal w2s.
            </summary>
            <param name="employeeFederalW2s">The employee federal w2s.</param>
            <param name="cancellationToken">the cancellation token.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfEmployeeProcessingService.GetDistinctHashCodes(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the distinct hash codes.
            </summary>
            <param name="inboundFileId">The inbound file identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Distinct HashCodes by File.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfEmployeeProcessingService.FindAllForHashCodes(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Finds all for hash codes.
            </summary>
            <param name="inboundFileId">The inbound file identifier.</param>
            <param name="hashCodes">The hash codes.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            List of QrfEmployeeProcessings with the given Hash Codes.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfEmployeeProcessingService.FindAllExtendedForHashCodes(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Finds all QrfEmployeeProcessings for hash codes.
            </summary>
            <param name="inboundFileId">The inbound file identifier.</param>
            <param name="hashCodes">The hash codes.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            List of QrfEmployeeProcessings with the given hash codes.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfEmployeeProcessingService.GetDistinctStateAndLocalTaxCodes(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the distinct tax codes.
            </summary>
            <param name="inboundFileId">The inbound file identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Distinct Tax Codes for the given File.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfEmployeeProcessingService.DeleteProcessingData(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete YE Qrf temporary processing data
            </summary>
            <param name="inboundFileId">The inbound file id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>bool</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfLayoutProvider">
            <summary>
            The year-end Qrf layout provider.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfLayoutProvider.GetLayoutTypeByUltiProTaxCode(System.String)">
            <summary>
            Gets the layout type by ulti pro tax code.
            </summary>
            <param name="ultiProTaxCode">The ulti pro tax code.</param>
            <returns>The year-end Qrf layout type.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfEmployeeProcessingService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfEmployeeProcessingService.#ctor(TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeRepository,TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeStateAndLocalW2Repository,TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeFederalW2Repository)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfEmployeeProcessingService"/> class.
            </summary>
            <param name="qrfEmployeeRepository">The QRF employee repository.</param>
            <param name="stateAndLocalW2Repository">The QRF employee state and local w2 repository.</param>
            <param name="federalW2Repository">The QRF employee federal w2 repository.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfEmployeeProcessingService.Create(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeEntry},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfEmployeeProcessingService.Create(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeStateAndLocalW2},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfEmployeeProcessingService.Create(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeFederalW2},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfEmployeeProcessingService.GetDistinctHashCodes(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfEmployeeProcessingService.FindAllForHashCodes(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfEmployeeProcessingService.FindAllExtendedForHashCodes(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfEmployeeProcessingService.GetDistinctStateAndLocalTaxCodes(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfEmployeeProcessingService.DeleteProcessingData(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YeQrfLayoutProvider">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YeQrfLayoutProvider.GetLayoutTypeByUltiProTaxCode(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfLocalCodeDescriptionProvider">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfLocalCodeDescriptionProvider.GetCodeAndDescription(TaxHub.Models.YearEndIngestion.YeQrfLayoutType,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfFileProcessingService">
            <summary>
            Interface for qrf file processing service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfFileProcessingService.ParseQrfFile(TaxHub.Models.Commands.RtsFileReceivedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Parses the Qrf file and saves the QuarterlyTaxInstance.
            </summary>
            <param name="rtsFileReceivedCommand">The qrf file received command</param>
            <param name="eventDataParams">The Event Data params.</param>
            <param name="token">The Cancellation Token.</param>
            <returns>Boolean Success or Failure.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfFileProcessingService.ProcessQrfFile(System.String,System.Int32,System.String,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes the QRF file.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="fileName">The file's name.</param>
            <param name="inboundFileId">The inbound file identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Whether or not processing was successful.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfFileProcessingService.ProcessCsvOutput(System.Guid,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes the output of a QRF(EFW2) file.
            </summary>
            <param name="yeProcessingId">The YE processing id.</param>
            <param name="fileName">The name of the file.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A result object indicating whether the processing was successful or not.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState">
            <summary>
            Defines the year end qrf ingestion data
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.CurrentLineNumber">
            <summary>
            The current line number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.InboundFileId">
            <summary>
            The Inbound File Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.FileName">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.TaxYear">
            <summary>
            Gets the tax year.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.ClientId">
            <summary>
            Gets or sets the client id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.TenantId">
            <summary>
            Gets or sets the tenant id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.CompanyName">
            <summary>
            Gets or sets the company name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.AutoImport">
            <summary>
            Gets the auto import flag
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.PayrollCode">
            <summary>
            Gets or sets the payroll code being processed.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.PayrollQuarter">
            <summary>
            Gets or sets the payroll quarter.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.Record500Count">
            <summary>
            Gets or sets the counter for 500 records.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.RtsTaxCodeMappingsByClient">
            <summary>
            The tax code mapping by client id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.YearlyCounts">
            <summary>
            Gets or set the yearly counts by state code, local code and entity code.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.QrfEmployeeFederalW2">
            <summary>
            Gets or sets the QRF Employee Federal W2.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.FilePayees">
            <summary>
            Gets the Year End File Payees.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.#ctor(System.Guid,System.Boolean,System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState"/>
            </summary>
            <param name="inboundFileId">The inbound file id.</param>
            <param name="autoImport">The auto import flag.</param>
            <param name="filename">The file name.</param>
            <param name="taxYear">The tax year.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.ResolvePayrollValidation">
            <summary>
            Returns the rts payroll validation.
            </summary>
            <returns>The rts payroll validation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.HasPayrollErrors">
            <summary>
            Has Payroll Errors
            </summary>
            <returns>true if error(s) are present</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.HasWarnings">
            <summary>
            Has warnings
            </summary>
            <returns>true if error(s) are present</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.GetPayrollErrors">
            <summary>
            Gets all of the payroll errors in one string
            </summary>
            <returns>All of the payroll errors separated by a semicolon</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.GetDistinctRtsTaxCodes(TaxHub.Models.FileIngestion.RtsValidationType)">
            <summary>
            Gets all distinct rts tax codes for a validation type concatenated by semicolon.
            </summary>
            <param name="validationType">The validation type.</param>
            <returns>The concatenated rts tax codes.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.GetPayrollWarnings">
            <summary>
            Gets all of the payroll warnings in one string
            </summary>
            <returns>All of the payroll warnings separated by a semicolon</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.AddValidation(TaxHub.Models.FileIngestion.RtsLineValidation)">
            <summary>
            Adds a validation.
            </summary>
            <param name="lineValidation">The validation.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.SetClientDetails(System.String,System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{TaxHub.Models.UteTaxCodeMetadata}})">
            <summary>
            Sets the client ID
            </summary>
            <param name="clientId">Client ID value to set</param>
            <param name="companyName">The company name.</param>
            <param name="tenantId">The tenant id.</param>
            <param name="rtsToUteMapByClientId">The rts to UTE map by client id.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.HasClientDetails">
            <summary>
            Gets a flag indicating if client details are set.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.SetPayrollInfo(System.String,System.Int16,System.String)">
            <summary>
            Sets the payroll validation info.
            </summary>
            <param name="payrollCode">The payroll code.</param>
            <param name="quarter">The quarter.</param>
            <param name="transactionType">The transaction type.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.Include(TaxHub.Models.YearEndIngestion.YearlyUnit)">
            <summary>
            Adds or updates the import ye amounts
            </summary>
            <param name="value">The value to add or update</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.Include(TaxHub.Models.YearEndIngestion.YearlyCount)">
            <summary>
            Adds or updates the import ye count
            </summary>
            <param name="value">The value to add or update</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.AssembleYearlyTaxInstance">
            <summary>
            Builds yearly tax instances from processed data
            </summary>
            <returns>Yearly tax instance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEImportResultState.ResetPayroll">
            <summary>
            Clears the state.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfFileIngestor">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfFileIngestor.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.IYEFileStorageService,TaxHub.CoreServices.Application.IYearlyTaxInstanceService,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfEmployeeProcessingService,TaxHub.Common.Logging.IAppLogger,TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfFileIngestor"/>
            </summary>
            <param name="fileStorageService">The rts file manager.</param>
            <param name="yearlyTaxInstanceService">Yearly tax instance service.</param>
            <param name="qrfEmployeeProcessingService">The Employee Processing Service.</param>
            <param name="logger">The application logger.</param>
            <param name="domainService">The domain service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Qrf.YEQrfFileIngestor.Ingest(TaxHub.Models.Commands.YEFileReceivedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.IYearEndIngestionMigrationService">
            <summary>
            Service for supporting some migrations needed for the year end process.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYearEndIngestionMigrationService.PopulateRwNamesFromRsForAgency(System.String,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method was created for migration Ulti348059EmptyEmpoyeeInfoRWRecord. It will populate the empty first, middle and last name in the RW records using
            the information in the corresponding RS record for a given agency and tax year
            </summary>
            <param name="agency">The agency</param>
            <param name="taxYear">The tax year</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if all the RW could be updated and false otherwise</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.IYEIngestionService">
            <summary>
            The ye ingestion service interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEIngestionService.ImportFileAuto(TaxHub.Models.YearEndIngestion.YEFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method is used in automatically importing YE files.
            </summary>
            <param name="yeFile">The YEFile.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">Cancellation Token.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEIngestionService.ImportFileManual(TaxHub.Hosting.Runtime.TemporaryStreamResult,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method is used in manually importing YE Files.
            </summary>
            <param name="fileStreamResult">The file stream result.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEIngestionService.IngestFile(System.Guid,TaxHub.Models.InboundFileType,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method calls the ingestor which handles the file content for a YE file.
            </summary>
            <param name="inboundFileId">The InboundFile id.</param>
            <param name="fileType">The file's InboundFile type.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEIngestionService.IncludeFiles(TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Includes all files in UDES into their corresponding YEProcessing.
            </summary>
            <param name="eventDataParams">The event data params.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEIngestionService.GetFileContent(System.Guid,System.String,TaxHub.Models.InboundFileType,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Gets the content of the file.
            </summary>
            <param name="yeProcessingId">The ye processing identifier.</param>
            <param name="agency">The agency.</param>
            <param name="fileType">Type of the file.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The inbound file content result
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.WatchType">
            <summary>
            Watch types
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.WatchType.DBWriteWatch">
            <summary>
            Watch for measuring the writings to the db
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.WatchType.ResolveWatch">
            <summary>
            Watch for measuring the resolve time
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.RecordTypeMetadata">
            <summary>
            Class for holding the RecordType metadata
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.RecordTypeMetadata.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.RecordTypeMetadata.RecordCounter">
            <summary>
            The record type total count
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.RecordTypeMetadata.WatchCollection">
            <summary>
            A stop watch dicionary.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.RecordTypeStatistics">
            <summary>
            Class for holding QRF statistics
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.RecordTypeStatistics.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.RecordTypeStatistics.RecordTypeMetadataCollection">
            <summary>
            Gets the counters and the watches by record type.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.RecordTypeStatistics.AddRecordCounter(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType,System.Int32)">
            <summary>
            Increments counter by record type and adds it to the dictionary if it does not exist.
            </summary>
            <param name="recordType">The record type.</param>
            <param name="amount">The amount to increment. It will be 1 by default</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.RecordTypeStatistics.GetRecordCounter(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType)">
            <summary>
            Increments counter by record type and adds it to the dictionary if it does not exist.
            </summary>
            <param name="recordType">The record type.</param>
            <returns>The recordType count</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.RecordTypeStatistics.StartWatch(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType,TaxHub.CoreServices.Application.YearEndIngestion.WatchType)">
            <summary>
            Starts measuring the time for the given record type
            </summary>
            <param name="recordType">The record type</param>
            <param name="watchType">The watch type</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.RecordTypeStatistics.StopWatch(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType,TaxHub.CoreServices.Application.YearEndIngestion.WatchType)">
            <summary>
            Stops the stopwatch for the given record type
            </summary>
            <param name="recordType">The record type</param>
            <param name="watchType">The watch type</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.RecordTypeStatistics.GetStopwatch(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType,TaxHub.CoreServices.Application.YearEndIngestion.WatchType)">
            <summary>
            Gets the elapsed processing time for a given record type
            </summary>
            <param name="recordType">The record type</param>
            <param name="watchType">The watch type</param>
            <returns>The elapsed time</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.YearEndIngestionMigrationService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YearEndIngestionMigrationService.PopulateRwNamesFromRsForAgency(System.String,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestionLogMapper">
            <summary>
            Ingestion log mapper.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestionLogMapper.Map(System.Collections.Generic.IEnumerable{TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionLogEntry})">
            <summary>
            Maps from <see cref="T:System.Collections.Generic.IEnumerable`1"/> to <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
            <param name="logEntries">The log entries.</param>
            <returns>List of year end ingestion logs.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestionLogMapper.Map(System.Collections.Generic.IEnumerable{TaxHub.Models.FileIngestion.RtsPayrollValidation})">
            <summary>
            Maps from <see cref="T:System.Collections.Generic.IEnumerable`1"/> to <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
            <param name="logEntries">The log entries.</param>
            <returns>List of year end ingestion logs.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestionLogMapper.Map(System.Collections.Generic.IEnumerable{TaxHub.Models.FileIngestion.RtsLineValidation})">
            <summary>
            Maps from <see cref="T:System.Collections.Generic.IEnumerable`1"/> to <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
            <param name="logEntries">The log entries.</param>
            <returns>List of year end ingestion logs.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestionService">
            <summary>
            The YE Ingestion Service class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestionService.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService,TaxHub.CoreServices.Application.YearEndIngestion.IYEFileStorageService,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefFileProcessingService,TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfFileProcessingService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Constructor.
            </summary>
            <param name="yeProcessingService">The ye processing service.</param>
            <param name="yeFileStorageService">The ye file storage service.</param>
            <param name="efw2FileProcessingService">The efw2 file processing service.</param>
            <param name="qrfFileProcessingService">The qrf file processing service.</param>
            <param name="messageHub">The message hub.</param>
            <param name="appLogger">The app logger.</param>
            <param name="metricsBuilder">The metrics builder.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestionService.ImportFileAuto(TaxHub.Models.YearEndIngestion.YEFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestionService.ImportFileManual(TaxHub.Hosting.Runtime.TemporaryStreamResult,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestionService.IngestFile(System.Guid,TaxHub.Models.InboundFileType,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestionService.GetFileContent(System.Guid,System.String,TaxHub.Models.InboundFileType,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestionService.RequestFileIngestion(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Requests file ingestion for all eligible files for the given YEProcessing
            </summary>
            <param name="yeProcessingId">The YEProcessing Id.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestionService.IncludeFiles(TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.YEFileIngestionResult">
            <summary>
            Represents the result of processing an MMREF file.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.IYERecordSanitizer">
            <summary>
            The ye record sanitizer interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYERecordSanitizer.SanitizeSsn(System.String,System.String)">
            <summary>
            Sanitizes a social security number.
            </summary>
            <param name="socialSecurityNumber">The social security number.</param>
            <param name="yeAgency">The ye agency.</param>
            <returns>The sanitized result.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.YERecordSanitizer">
            <summary>
            The ye record validator.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YERecordSanitizer.SanitizeSsn(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.SanitizedResult">
            <summary>
            The sanitized result.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.SanitizedResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.SanitizedResult"/> class.
            </summary>
            <param name="sanitizedValue">The sanitized value.</param>
            <param name="validationMessage">The validation message.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.SanitizedResult.SanitizedValue">
            <summary>
            Gets the sanitized value.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.SanitizedResult.ValidationMessage">
            <summary>
            Gets the validation message.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.IYEFileIngestor">
            <summary>
            Interface for file ingestors.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEFileIngestor.Ingest(TaxHub.Models.Commands.YEFileReceivedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Ingest the year end file.
            </summary>
            <param name="command">The command.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the file was ingested, false otherwise.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefFileProcessingService">
            <summary>
            Interface for MMREF file processing service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefFileProcessingService.ProcessEfw2File(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Method processes an MMREF file.
            </summary>
            <param name="inboundFileId">The inbound file id.</param>
            <param name="eventDataParams">The eventDataParams</param>
            <param name="cancellationToken">The cancellationToken</param>
            <returns>The result of the process</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.ProcessMmrefFileResult">
            <summary>
            Represents the result of processing an MMREF file.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.ProcessMmrefFileResult.Success">
            <summary>
            When processing an MMREF file was successful.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.ProcessMmrefFileResult.Failure">
            <summary>
            When processing an MMREF file failed and retrying will not fix the problem.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.ProcessMmrefFileResult.Skipped">
            <summary>
            When processing an MMREF file was ignored.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.ProcessMmrefFileResult.Conflict">
            <summary>
            When processing an MMREF file incurred in a conflict.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileProcessingService">
            <summary>
            The MMREF file processing service responsible for processing MMREF files and creating the year end records.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileProcessingService.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefFileIngestor[],TaxHub.CoreServices.Application.IInboundFileService,TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileProcessingService"/>.
            </summary>
            <param name="yeProcessingService">The year end processing service.</param>
            <param name="clientService">The client service.</param>
            <param name="mmrefFileIngestors">The MMREF file ingestors.</param>
            <param name="inboundFileService">The inbound file service.</param>
            <param name="yearEndAgencyService">The year end agency service.</param>
            <param name="logger">The application logger.</param>
            <param name="metricsBuilder">The metrics builder</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileProcessingService.ProcessEfw2File(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileProcessingService.GetStartFileIngestionCommand(TaxHub.CoreServices.Application.YearEndIngestion.YEPrepareProcessingResult)">
            <summary>
            Creates a command object to start ye file ingestion, using the CurrentYEFile info from a YEPrepareProcessingResult object.
            </summary>
            <param name="yeProcessingResult">The ye processing result.</param>
            <returns>The StartFileIngestionCommand object.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileProcessingService.SkipFileIngestion(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.YEFile,System.DateTime,System.DateTime,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Updates the YE Processing aggregate and YE file entity to skip ingestion of the YE File.
            </summary>
            <param name="yeProcessing">The YE Processing aggregate.</param>
            <param name="yeFile">The YE File being skipped.</param>
            <param name="ingestionStartDtm">The ingestion start date time.</param>
            <param name="ingestionEndDtm">The ingestion end date time.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="correlatedLogger">The correlated logged.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of skipping the ingestion.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.MmrefLogEntryType">
            <summary>
            Defines the set of log entry types for year end.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.MmrefLogEntryType.Unknown">
            <summary>
            Unknown error
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.MmrefLogEntryType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.MmrefLogEntryType.ValidationError">
            <summary>
            Validation error
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.MmrefLogEntryType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType">
            <summary>
            Defines the set of record types for year end.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType.RA">
            <summary>
            Submitter Record
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType.RE">
            <summary>
            Employer Record 
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType.RW">
            <summary>
            Employee Wage Record
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType.RO">
            <summary>
            Employee Wage Record Optional
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType.RS">
            <summary>
            State Wage Record
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType.RT">
            <summary>
            Total Record
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType.RU">
            <summary>
            Total Record Optional
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType.RV">
            <summary>
            State Total Record
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType.RF">
            <summary>
            Final Record
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefRecordIngestor">
            <summary>
            The mmref record ingestor interface.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefRecordIngestor.RecordType">
            <summary>
            Defines the record type this interface is able to process.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefRecordIngestor.Ingest(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Ingests a record.
            </summary>
            <param name="record">The record.</param>
            <param name="ingestionData">The ingestion data.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFederalFileIngestor">
            <summary>
            Defines the file ingestor for SSA files.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFederalFileIngestor.#ctor(TaxHub.CoreServices.Application.IInboundFileService,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefRecordIngestorLocator,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder,TaxHub.CoreServices.Application.YearEnd.IYearEndBulkService)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFederalFileIngestor" />.
            </summary>
            <param name="inboundFileService">The inbound file service.</param>
            <param name="mmrefRecordIngestorLocator">The mmref record processor factory.</param>
            <param name="logger">The logger.</param>
            <param name="metricsBuilder">The metrics builder</param>
            <param name="yearEndBulkService">The year end bulk service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFederalFileIngestor.IsFederal">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFederalFileIngestor.GetStateValidator">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefFileIngestor">
            <summary>
            Mmref file ingestor interface.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefFileIngestor.IsFederal">
            <summary>
            Gets the file type which the derived ingestor is able to ingest.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileIngestor">
            <summary>
            Defines the base class for file MMREF file ingestors.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileIngestor.#ctor(TaxHub.CoreServices.Application.IInboundFileService,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefRecordIngestorLocator,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder,TaxHub.CoreServices.Application.YearEnd.IYearEndBulkService)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileIngestor" />
            </summary>
            <param name="inboundFileService">The inbound file service.</param>
            <param name="mmrefRecordIngestorLocator">The mmref record processor factory.</param>
            <param name="logger">The logger.</param>
            <param name="metricsBuilder">The metrics builder</param>
            <param name="yearEndBulkService">The year end bulk service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileIngestor.IsFederal">
            <summary>
            Gets the file type this ingestor is able to ingest.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileIngestor.GetStateValidator">
            <summary>
            Gets the state validator.
            </summary>
            <returns>Returns the state validator.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileIngestor.Ingest(TaxHub.Models.Commands.YEFileReceivedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileIngestor.ProcessFileContent(TaxHub.Models.InboundFile,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Common.Logging.IAppLogger,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Parses the file and creates aggregates.
            </summary>
            <param name="file">The inbound file.</param>
            <param name="ingestionData">The ingestion data.</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns true if success, false otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefFileIngestor.SaveBufferedData(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,System.Int32,System.Boolean,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Writes the records in the buffer to the database.
            </summary>
            <param name="ingestionData">The ingestion data.</param>
            <param name="lineNumber">The line number.</param>
            <param name="forceCurrent">The force current flag.</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData">
            <summary>
            Defines the data associated with mmref file ingestion.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.FileName">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.TaxYear">
            <summary>
            Gets or sets the tax year.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.ClientId">
            <summary>
            Gets or sets the client id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.ClientTin">
            <summary>
            Gets or sets the client TIN.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.ClientLegalName">
            <summary>
            Gets or sets the legal name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.FileType">
            <summary>
            Gets or sets the mmref file type.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.YEAgency">
            <summary>
            The year end agency.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.HasErrors">
            <summary>
            Gets the has errors flag.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.HasWarnings">
            <summary>
            Gets the has warnings flag.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.RARecord">
            <summary>
            Gets or sets the RA identifier.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.RERecord">
            <summary>
            Gets or sets the RE year end info.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.WriteBuffer">
            <summary>
            The bulk write buffer.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.CurrentSsn">
            <summary>
            Gets or sets the current social security number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.RecordTypeStatistics">
            <summary>
            Gets the record type statistics
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.LogEntries">
            <summary>
            Returns the log entries.
            </summary>
            <returns>The log entries.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData"/>.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.AddLogEntry(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionLogEntry)">
            <summary>
            Adds a log entry.
            </summary>
            <param name="ingestionLogEntry">The ingestion log entry.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.AddLogEntry(System.String,System.Int32,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.MmrefLogEntryType,System.Exception)">
            <summary>
            Adds a log entry.
            </summary>
            <param name="message">The message.</param>
            <param name="lineNumber">The line number.</param>
            <param name="logEntryType">The log entry type.</param>
            <param name="exception">The exception if any.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.AddRecordCounter(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType)">
            <summary>
            Increments counter by record type and adds it to the dictionary if it does not exist.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.StartWatch(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType,TaxHub.CoreServices.Application.YearEndIngestion.WatchType)">
            <summary>
            Starts measuring the time for the given record type
            </summary>
            <param name="recordType">The record type</param>
            <param name="watchType">The watch type</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.StopWatch(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType,TaxHub.CoreServices.Application.YearEndIngestion.WatchType)">
            <summary>
            Stops the stopwatch for the given record type
            </summary>
            <param name="recordType">The record type</param>
            <param name="watchType">The watch type</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData.GetStopwatch(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType,TaxHub.CoreServices.Application.YearEndIngestion.WatchType)">
            <summary>
            Gets the elapsed processing time for a given record type
            </summary>
            <param name="recordType">The record type</param>
            <param name="watchType">The watch type</param>
            <returns>The elapsed time</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionLogEntry">
            <summary>
            Defines a log entry.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionLogEntry.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionLogEntry.EntryType">
            <summary>
            Gets or sets the entry type.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionLogEntry.LineNumber">
            <summary>
            Gets or sets the line number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionLogEntry.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefRARecordIngestor">
            <summary>
            The mmref RA record ingestor interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefRARecordIngestor.Fail(TaxHub.Models.YearEnd.YearEndRAInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Fails the RA record and associated RE record.
            </summary>
            <param name="yearEndRaInfo">The year end RA info.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True for success and false otherwise.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRARecordIngestor">
            <summary>
            Defines an RA record ingestor.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRARecordIngestor.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndRAService)">
            <summary>
            Constructor.
            </summary>
            <param name="yearEndRaService">The year end service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRARecordIngestor.RecordType">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRARecordIngestor.Ingest(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRARecordIngestor.Fail(TaxHub.Models.YearEnd.YearEndRAInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRARecordIngestor.GetRecord(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord">
            <summary>
            Represents a year end record 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord.Line">
            <summary>
            Gets the line.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord.LineNumber">
            <summary>
            The line number.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord.RecordType">
            <summary>
            Gets the record type
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord"/>.
            </summary>
            <param name="line">The line.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefRecordIngestorLocator">
            <summary>
            Defines an mmref record ingestor locator.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefRecordIngestorLocator.GetIngestor(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType)">
            <summary>
            Gets the correct mmref record ingestor by record type.
            </summary>
            <param name="recordType">The record type.</param>
            <returns>Returns the correct mmref record ingestor by record type.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestorLocator">
            <summary>
            Defines an mmref record ingestor locator.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestorLocator.#ctor(TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestorLocator"/>.
            </summary>
            <param name="domainService">The domain service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestorLocator.GetIngestor(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.Enums.YERecordType)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRTRecordIngestor">
            <summary>
            Defines an RT record ingestor.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRTRecordIngestor.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndRTService)">
            <summary>
            Constructor.
            </summary>
            <param name="yearEndRTService">The year end service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRTRecordIngestor.RecordType">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRTRecordIngestor.GetRecord(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefNonFederalFileIngestor">
            <summary>
            Defines the file ingestor for state MMREF files.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefNonFederalFileIngestor.#ctor(TaxHub.CoreServices.Application.IInboundFileService,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefRecordIngestorLocator,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder,TaxHub.CoreServices.Application.YearEnd.IYearEndBulkService)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefNonFederalFileIngestor"/>.
            </summary>
            <param name="inboundFileService">The inbound file service.</param>
            <param name="mmrefRecordIngestorLocator">The mmref record processor factory.</param>
            <param name="logger">The logger.</param>
            <param name="metricsBuilder">The metrics builder</param>
            <param name="yearEndBulkService">The year end bulk service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefNonFederalFileIngestor.IsFederal">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefNonFederalFileIngestor.GetStateValidator">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefNonFederalFileIngestor.SaveBufferedData(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,System.Int32,System.Boolean,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2">
            <inheritdoc />
            <summary>
            Base class for mmref record processors.
            </summary>
            <typeparam name="TA">The aggregate type.</typeparam>
            <typeparam name="TS">The service type.</typeparam>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2.#ctor(`1)">
            <summary>
            Constructor.
            </summary>
            <param name="aggregateService">The aggregate service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2.RecordType">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2.Ingest(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2.IngestRecord(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Ingests an mmref record to get a year end info base aggregate.
            </summary>
            <param name="record">The record.</param>
            <param name="ingestionData">The ingestion data.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The year end info base.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2.GetRecord(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Gets an aggregate from an mmref record.
            </summary>
            <param name="record">The mmref record.</param>
            <param name="ingestionData">The ingestion data.</param>
            <param name="eventDataParams">The event data params.</param>
            <returns>The aggregate.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2.GetString(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,System.Int32,System.Int32,System.String,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,System.Func{System.String,System.Boolean})">
            <summary>
            Gets a string from the record and adds validation errors if any.
            </summary>
            <param name="record">The record.</param>
            <param name="start">The start position.</param>
            <param name="end">The final position.</param>
            <param name="field">The name of the field.</param>
            <param name="ingestionData">The ingestion data.</param>
            <param name="isValid">A placeholder for additional validations</param>
            <returns>The string.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2.GetInt(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,System.Int32,System.Int32,System.String,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,System.Func{System.Int32,System.Boolean})">
            <summary>
            Gets an int from the record and adds validation errors if any.
            </summary>
            <param name="record">The record.</param>
            <param name="start">The start position.</param>
            <param name="end">The final position.</param>
            <param name="field">The name of the field.</param>
            <param name="ingestionData">The ingestion data.</param>
            <param name="isValid">A placeholder for additional validations</param>
            <returns>The int.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2.GetInt(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,System.Int32,System.Int32)">
            <summary>
            Gets an int from the record. This method does not perform any validation.
            </summary>
            <param name="record">The record.</param>
            <param name="start">The start position.</param>
            <param name="end">The final position.</param>
            <returns>The parsed value or 0 if the string could not be parsed</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2.GetDecimal(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a decimal from the record and adds validation errors if any.
            </summary>
            <param name="record">The record.</param>
            <param name="start">The start position.</param>
            <param name="end">The final position.</param>
            <param name="decimalPlaces">The decimal places. Default value is 2.</param>
            <returns>The decimal.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2.GetSubstring(System.String,System.Int32,System.Int32)">
            <summary> 
            Get substring with 1 based (inclusive) starting and ending positions.
            </summary> 
            <param name="line">The line.</param> 
            <param name="startPos">1 based starting point inclusive.</param> 
            <param name="endPos">1 based ending point inclusive.</param> 
            <returns>The substring.</returns> 
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2.Replace(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Replaces an instance of oldValue with newValue given start position and length.
            </summary>
            <param name="input">The input.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <returns>The input with the replaced value.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecordIngestor`2.SaveRecord(`0,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Saves an aggregate.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <param name="record">The record.</param>
            <param name="ingestionData">The ingestion data.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True for success and false otherwise.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRFRecordIngestor">
            <summary>
            Defines an RF record ingestor.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRFRecordIngestor.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndRFService)">
            <summary>
            Constructor.
            </summary>
            <param name="yearEndRFService">The year end service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRFRecordIngestor.RecordType">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRFRecordIngestor.GetRecord(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRURecordIngestor">
            <summary>
            Defines an RU record ingestor.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRURecordIngestor.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndRUService)">
            <summary>
            Constructor.
            </summary>
            <param name="yearEndRUService">The year end service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRURecordIngestor.RecordType">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRURecordIngestor.GetRecord(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRVRecordIngestor">
            <summary>
            Defines an RV record ingestor.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRVRecordIngestor.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndRVService)">
            <summary>
            Constructor.
            </summary>
            <param name="yearEndRVService">The year end service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRVRecordIngestor.RecordType">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRVRecordIngestor.GetRecord(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefRERecordIngestor">
            <summary>
            The mmref RA record ingestor interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.IMmrefRERecordIngestor.Fail(TaxHub.Models.YearEnd.YearEndREInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Fails the RA record and associated RE record.
            </summary>
            <param name="yearEndReInfo">The year end RE info.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True for success and false otherwise.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRERecordIngestor">
            <summary>
            Defines an RE record ingestor.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRERecordIngestor.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndREService,TaxHub.CoreServices.Application.YearEnd.IYearEndRAService)">
            <summary>
            Constructor.
            </summary>
            <param name="yearEndReService">The year end service.</param>
            <param name="yearEndRaService">The year end RA service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRERecordIngestor.RecordType">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRERecordIngestor.Ingest(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRERecordIngestor.GetRecord(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRERecordIngestor.Fail(TaxHub.Models.YearEnd.YearEndREInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRERecordIngestor.SaveRecord(TaxHub.Models.YearEnd.YearEndREInfo,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRORecordIngestor">
            <summary>
            Defines an RO record ingestor.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRORecordIngestor.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndROService)">
            <summary>
            Constructor.
            </summary>
            <param name="yearEndRoService">The year end service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRORecordIngestor.RecordType">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRORecordIngestor.GetRecord(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRSRecordIngestor">
            <summary>
            Defines an RS record ingestor.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRSRecordIngestor.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndRSService,TaxHub.CoreServices.Application.YearEnd.IYearEndRAService,TaxHub.CoreServices.Application.YearEnd.IYearEndREService,TaxHub.CoreServices.Application.YearEndIngestion.IYERecordSanitizer)">
            <summary>
            Constructor.
            </summary>
            <param name="yearEndRsService">The year end RS service.</param>
            <param name="yearEndRaService">The year end RA service.</param>
            <param name="yearEndReService">The year end RE service.</param>
            <param name="recordSanitizer">The record sanitizer.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRSRecordIngestor.RecordType">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRSRecordIngestor.GetRecord(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRWRecordIngestor">
            <summary>
            Defines an RW record ingestor.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRWRecordIngestor.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndRWService,TaxHub.CoreServices.Application.YearEndIngestion.IYERecordSanitizer)">
            <summary>
            Constructor.
            </summary>
            <param name="yearEndRwService">The year end service.</param>
            <param name="recordSanitizer">The record sanitizer.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRWRecordIngestor.RecordType">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRWRecordIngestor.GetRecord(TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRWRecordIngestor.SaveRecord(TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefRecord,TaxHub.CoreServices.Application.YearEndIngestion.Mmref.MmrefIngestionData,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestResult">
            <summary>
            Defines the year end ingest result.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestResult"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestResult.Status">
            <summary>
            Gets or sets the success flag.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestResult.IngestionSummary">
            <summary>
            Gets or sets the ingestion summary.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.YEIngestResult.FilePayees">
            <summary>
            Gets or sets the Year End Qrf File Payees.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.StateValidator`1">
            <summary>
            Defines a state validator.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.StateValidator`1.CurrentState">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.StateValidator`1.#ctor(System.Collections.Generic.Dictionary{`0,System.Collections.Generic.HashSet{`0}},System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0})">
            <summary>
            Initializes a new instance of StateValidator/>
            </summary>
            <param name="validStates">Valid states.</param>
            <param name="initialStates">The initial states.</param>
            <param name="finalStates">The final states.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.StateValidator`1.#ctor(System.Collections.Generic.Dictionary{`0,System.Collections.Generic.HashSet{`0}},`0,`0)">
            <summary>
            Initializes a new instance of StateValidator/>
            </summary>
            <param name="validStates">Valid states.</param>
            <param name="initialState">The initial state.</param>
            <param name="finalState">The final state.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.StateValidator`1.Move(`0)">
            <summary>
            Moves to the next state if possible.
            </summary>
            <param name="toState">The state to move to.</param>
            <returns>Returns true if moved otherwise false.</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.StateValidator`1.IsFinalized">
            <summary>
            Gets finalized state.
            </summary>
            <returns>True if finalized and false otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.StateValidator`1.Reset">
            <summary>
            Resets the state validator.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.IYEFileStorageService">
            <summary>
            This service is used to interact with InboundFileService to do operations related to Year End Processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEFileStorageService.GetFileContentStream(TaxHub.Models.InboundFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Gets the YE file content
            </summary>
            <param name="inboundFile">The inbound file</param>
            <param name="eventDataParams">The Event Data Params.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The file stream</returns>
            <remarks>Call TemporaryStreamResult.DestroyResources() after finishing using the stream.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEFileStorageService.GetFileContentStream(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Gets the YE file content
            </summary>
            <param name="inboundFileId">The inbound file id</param>
            <param name="eventDataParams">The Event Data Params.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The file stream</returns>
            <remarks>Call TemporaryStreamResult.DestroyResources() after finishing using the stream.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEFileStorageService.ImportFileFromUdes(TaxHub.Models.YearEndIngestion.YEFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Imports the YE File content from Udes into Object Store.
            </summary>
            <param name="yeFile">The ye file contains information about the file to import</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEFileStorageService.GetInboundFile(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Gets an inbound RTS file
            </summary>
            <param name="inboundFileId">Rts file Id.</param>
            <param name="eventDataParams">Event Data Params.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>InboundFile for the requested RTS file.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEFileStorageService.GetAllFiles(TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Gets a list of files from Udes (Including subfolders).
            </summary>
            <param name="eventDataParams">The event data params.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEFileStorageService.SaveManualFile(TaxHub.Hosting.Runtime.TemporaryStreamResult,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Saves a file
            </summary>
            <param name="fileStream">The file stream.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="token">The cancellation token.</param>
            <returns>
            True if successful, false otherwise
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEFileStorageService.DeleteFile(System.String,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Deletes a file
            </summary>
            <param name="fileName">The file name.</param>
            <param name="path">The file path.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.YEFileStorageService">
            <summary>
            This service is used to interact with InboundFileService to do operations related to Year End Processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEFileStorageService.#ctor(TaxHub.CoreServices.Application.IInboundFileService,TaxHub.Common.Configuration.IFileManagementConfiguration,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor for class <see cref="T:TaxHub.CoreServices.Application.QuarterEndIngestion.QEFileStorageService" />.
            </summary>
            <param name="inboundFileService">The file service. </param>
            <param name="fileManagementConfiguration">The file management configuration. </param>
            <param name="logger">The app logger. </param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEFileStorageService.GetInboundFile(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEFileStorageService.SaveManualFile(TaxHub.Hosting.Runtime.TemporaryStreamResult,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEFileStorageService.GetFileContentStream(TaxHub.Models.InboundFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEFileStorageService.GetFileContentStream(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEFileStorageService.ImportFileFromUdes(TaxHub.Models.YearEndIngestion.YEFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEFileStorageService.GetAllFiles(TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEFileStorageService.DeleteFile(System.String,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService">
            <summary>
            The YEProcessingService interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.IncludeFile(TaxHub.Models.Commands.YEProcessingIncludeFileRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Include the YEFile specified in the IncludeFileCommmand in the appropriate YEProcessing.
            </summary>
            <param name="request">The include file request.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The update aggregate result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the year end processing by id.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the year end processing with the given identifier.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.FindOne(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the YEProcessing by client identifier and tax year.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the YEProcessing for that clientId and taxYear</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.PrepareYEProcessing(TaxHub.Models.InboundFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Prepares YE processing
            </summary>
            <param name="inboundFile">The inboundFile object</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the status and the rts processing</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.FinalizeParsing(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.FinalizeParsingCommand,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Saves the yeFile parsing metadata after the parsing process is completed
            </summary>
            <param name="yeProcessing">The Year End Processing</param>
            <param name="command">The command containing the metadata values</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="logger">The logger</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.FinalizeQrfParsing(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.FinalizeQrfParsingCommand,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Finalizes the parsing process and stores the YE Agencies with activity during Qrf ingestion.
            </summary>
            <param name="yeProcessing">The Year End Processing</param>
            <param name="command">The command containing the metadata values</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="logger">The logger</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.FinalizeQrfProcessing(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.FinalizeQrfProcessingCommand,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Saves the yeFile parsing metadata after the processing phase is completed
            </summary>
            <param name="yeProcessing">The Year End Processing</param>
            <param name="command">The update command</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="logger">The logger</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.VoidYEFiles(TaxHub.Models.Commands.YEFileVoidCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Void year end files together with the corresponding RA/RE records.
            </summary>
            <param name="fileVoidCommand">The command containing file info.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if operation succeeds, or False otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.ForceYEFiles(TaxHub.Models.Commands.YEFileForceCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the status of the given Year End files to Forced.
            </summary>
            <param name="yeFileForceCommand">The command to force the status of the Year End files.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A boolean indicating the result of the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.StartFileIngestion(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.StartFileIngestionCommand,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Marks the beginning of the ye file ingestion. Sets the corresponding
            YEFile status to InProgress. Updates the YEFile object store id.
            </summary>
            <remarks>In the current workflow, the YEFile will already be InProgress when
            this method is called. However we might want to add another status in the future
            to reflect this step in the workflow.
            </remarks>
            <param name="yeProcessing">The ye processing.</param>
            <param name="command">The start ingestion command</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if operation succeeds, or false otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.SkipFileIngestion(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.SkipFileIngestionCommand,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Skips the ye file ingestion.
            </summary>
            <param name="yeProcessing">The ye processing.</param>
            <param name="command">The skip ye file ingestion command</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if operation succeeds, or false otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.PublishIngestionCompletedOrResumedEvent(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Publishes import completed or import resumed events if those are the cases.
            </summary>
            <param name="yeProcessingId">The ye processing identifier.</param>
            <param name="eventDataParams">The event data parameteres.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns true if success, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.UpdateStatus(System.String,System.Int32,TaxHub.Common.Enums.YearEndPhase,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update the status of a year end processing based on the year end phase.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="phase">The new year end phase.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns true if succeeded, or false otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.FinalizeCsv(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.FinalizeCsvCommand,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Finalize csv (including setting object store id and updating the file status).
            </summary>
            <param name="yeProcessing">The YEProcessing.</param>
            <param name="finalizeCsvCommand">The finalize csv command.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns true if succeeded, or false otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.Delete(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Delete the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>
            The result of deleting an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.YearEndIngestion.YEProcessing},System.Guid,TaxHub.Models.YearEndIngestion.YEProcessing,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params.</param>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="entity">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of updating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.GetFileCollectionView(System.Guid,System.String,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Method returns a YEIngestionFileCollection object for the corresponding client and tax year.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of ingested files for the specified client and tax year.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.GetFileLogs(System.Guid,System.String,System.Int32,System.String,TaxHub.Models.InboundFileType,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Gets the file logs.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="agency">The agency.</param>
            <param name="fileType">Type of the file.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A collection of logs for a certain file.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.CompleteEfw2Output(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.CompleteQrfEfw2OutputCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Completes the EFW2 output for the QRF file.
            </summary>
            <param name="yeProcessing">The YE Processing.</param>
            <param name="command">The Complete QRF Efw2 Output Command.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of updating an instance of the aggregate.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService.StartCsvOutput(TaxHub.Models.YearEndIngestion.YEProcessing,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Starts the CSV output for the QRF file.
            </summary>
            <param name="yeProcessing">The YE Processing.</param>
            <param name="fileNameReceived">The name of the file received in the event.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An UpdateAggregateExtendedResult object indicating the result of the operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService">
            <summary>
            The YEProcessingService class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.#ctor(TaxHub.CoreServices.DataAccess.IYEProcessingRepository,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.IClientAgencyService,TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService,TaxHub.CoreServices.Application.YearEnd.IYearEndRAService,TaxHub.Hosting.Runtime.IDomainService,TaxHub.CoreServices.Application.IYearlyTaxInstanceService,TaxHub.CoreServices.Application.ITenantService,TaxHub.CoreServices.Application.YearEnd.IYearEndCsvClientService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor.
            </summary>
            <param name="repository">The repository.</param>
            <param name="clientService">The client service.</param>
            <param name="clientAgencyService">The clientagency service.</param>
            <param name="yearEndAgencyService">The yearEndAgencyService service.</param>
            <param name="yeRaService">The ye ra service.</param>
            <param name="domainService">The domain service.</param>
            <param name="yearlyTaxInstanceService">The yearly tax instance service.</param>
            <param name="tenantService">The tenant service.</param>
            <param name="yearEndCsvClientService">The year end CSV client service.</param>
            <param name="messageHub">The message hub.</param>
            <param name="appLogger">The app logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.FindOne(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.InitializeNew(TaxHub.Models.YearEndIngestion.YEProcessing)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.IncludeFile(TaxHub.Models.Commands.YEProcessingIncludeFileRequest,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.PrepareYEProcessing(TaxHub.Models.InboundFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.FinalizeParsing(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.FinalizeParsingCommand,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.FinalizeQrfParsing(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.FinalizeQrfParsingCommand,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.FinalizeQrfProcessing(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.FinalizeQrfProcessingCommand,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.FinalizeCsv(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.FinalizeCsvCommand,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.StartFileIngestion(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.StartFileIngestionCommand,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.UpdateYeFileInboundFileId(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.InboundFileType,System.String,System.Guid,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Updates the inbound file ID of the given file.
            </summary>
            <param name="yeProcessing">The YE processing</param>
            <param name="fileType">The file type.</param>
            <param name="agency">The agency.</param>
            <param name="inboundFileId">The inbound file id</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if operation succeeds, or false otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.VoidYEFiles(TaxHub.Models.Commands.YEFileVoidCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.ForceYEFiles(TaxHub.Models.Commands.YEFileForceCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.PublishIngestionCompletedOrResumedEvent(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.UpdateStatus(System.String,System.Int32,TaxHub.Common.Enums.YearEndPhase,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.CompleteEfw2Output(TaxHub.Models.YearEndIngestion.YEProcessing,TaxHub.Models.YearEndIngestion.Commands.CompleteQrfEfw2OutputCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.StartCsvOutput(TaxHub.Models.YearEndIngestion.YEProcessing,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.YearEndIngestion.YEProcessing},System.Guid,TaxHub.Models.YearEndIngestion.YEProcessing,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="T:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.GetFileLogs(System.Guid,System.String,System.Int32,System.String,TaxHub.Models.InboundFileType,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEProcessingService.GetFileCollectionView(System.Guid,System.String,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEndIngestion.YEPrepareProcessingResult">
            <summary>
            PrepareYEProcessing result
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEndIngestion.YEPrepareProcessingResult.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.YEPrepareProcessingResult.Status">
            <summary>
            Gets or sets the status
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.YEPrepareProcessingResult.YEProcessing">
            <summary>
            Gets or sets the rts processing
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.YEPrepareProcessingResult.CurrentYEFile">
            <summary>
            Gets or sets the current YEFile
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEndIngestion.YEPrepareProcessingResult.Validations">
            <summary>
            Gets or sets the ingestion summary.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Acl.YearlyTotalAmountData">
            <summary>
            Represents the total tax amount processed for a client in a given tax year
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Acl.YearlyTotalAmountData.ClientId">
            <summary>
            The client id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Acl.YearlyTotalAmountData.TaxYear">
            <summary>
            The tax yea
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Acl.YearlyTotalAmountData.Amount">
            <summary>
            The tax amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Acl.YearlyTotalAmountData.FrequencyType">
            <summary>
            The tax frequency type
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Acl.TaxFrequencyType">
            <summary>
            Represents the type of tax process
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Acl.TaxFrequencyType.Unknown">
            <summary>
            Unknown type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Acl.TaxFrequencyType.DailyProcessing">
            <summary>
            Daily processing type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Acl.TaxFrequencyType.QeProcessing">
            <summary>
            Quarter end processing type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Acl.TaxFrequencyType.YeProcessing">
            <summary>
            Year end processing type
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Adapters.IDailyAndQeServiceAdapter">
            <summary>
            Adapter for getting daily and qe information from UTE
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Adapters.IDailyAndQeServiceAdapter.FindClientYearlyTotals(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the list of client yearly amounts from daily and qe processing systems
            </summary>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The yearly total amount data.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Adapters.DailyAndQeServiceAdapter">
            <inheritdoc cref="T:TaxHub.CoreServices.Application.YearEnd.Adapters.IDailyAndQeServiceAdapter"/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Adapters.DailyAndQeServiceAdapter.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPtmDbContextFactory)">
            <summary>
            Creates an instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.Adapters.DailyAndQeServiceAdapter"/> class.
            </summary>
            <param name="dbContextFactory">The context factory</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IDailyAndQeService">
            <summary>
            Service that helps retrieve information from daily and qe processes
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IDailyAndQeService.CheckForClientActivityByTaxYear(System.String,System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Determines if a client has had activity for daily or qe in a given tax year
            </summary>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns true if finds tax activity, else false.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.DailyAndQeService">
            <inheritdoc cref="T:TaxHub.CoreServices.Application.YearEnd.IDailyAndQeService"/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.DailyAndQeService.#ctor(TaxHub.CoreServices.Application.YearEnd.Adapters.IDailyAndQeServiceAdapter,TaxHub.Messaging.IMessageHub)">
            <summary>
            Creates an instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.Adapters.DailyAndQeServiceAdapter"/> class 
            </summary>
            <param name="dailyAndQeAdapter">The daily/qe adapter.</param>
            <param name="messageHub">The message hub.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.KYLOUISAnnualRecTokenModel">
            <inheritdoc />
            <summary>
            Token model for KYLOUIS Annual recs.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.KYLOUISAnnualRecTokenModel.#ctor(TaxHub.Models.YearEndAgencyTokenCreationData)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AnnualRecTokenModel" /> class.
            </summary>
            <param name="creationData">Year EndAgencyTokenCreationData</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.ALSWAnnualRecTokenModel">
            <inheritdoc />
            <summary>
            Token model for ALSW Annual recs.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.ALSWAnnualRecTokenModel.#ctor(TaxHub.Models.YearEndAgencyTokenCreationData)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AnnualRecTokenModel" /> class.
            </summary>
            <param name="creationData">Year end agency token creation data</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.ALSWAnnualRecTokenModel.PaymentMethod">
            <summary>
            This method returns char that indicates payment method.
            </summary>
            <returns>char that indicates payment method</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AnnualRecTokenModel">
            <inheritdoc />
            <summary>
            Token model for Annula recs.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AnnualRecTokenModel.#ctor(TaxHub.Models.AnnualRecAmounts)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AnnualRecTokenModel" /> class.
            </summary>
            <param name="annualRecAmounts">The monthly liablity and deposit amounts for the client from Post_Amount and steft, checking tables</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AnnualRecCustomTokenResolver">
            <summary>
            Resolves custom annual rec Tokens for payees in the same namespace as <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AnnualRecCustomTokenResolver"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AnnualRecCustomTokenResolver.GetCustomToken(System.String,TaxHub.Models.YearEndAgencyTokenCreationData,TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService)">
            <summary>
            Resolve a custom token for a payeeID.
            </summary>
            <param name="payeeID">The PayeeID</param>
            <param name="agencyTokenCreationData">YearEnd agency token creation data</param>
            <param name="annualRecService">The Annual Rec Service</param>
            <returns>The {PayeeID}AnnualRecTokenModel if it exists.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AZSWAnnualRecTokenModel">
            <inheritdoc />
            <summary>
            Token model for AZSW Annula recs.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AZSWAnnualRecTokenModel.#ctor(TaxHub.Models.YearEndAgencyTokenCreationData)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AZSWAnnualRecTokenModel" /> class.
            </summary>
            <param name="creationData">Year EndAgencyTokenCreationData</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AZSWAnnualRecTokenModel.DefineTokens">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.ClientTokenModel">
            <inheritdoc />
            <summary>
            Token model for Client.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.ClientTokenModel.#ctor(TaxHub.Models.Client,System.Collections.Generic.List{TaxHub.TokenParser.Core.Tokens.ITokenFunction})">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.ClientTokenModel" /> class.
            </summary>
            <param name="client">client</param>
            <param name="funcs">funcs</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.ClientTokenModel.DefineTokens">
            <summary>
            Creates the Dictionary of client data for the spec file.
            </summary>
            <returns>client data required for file generation</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.CombinedAgenciesTokenModel">
            <inheritdoc />
            <summary>
            Token model for combined agencies.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.CombinedAgenciesTokenModel.#ctor(System.Collections.Generic.List{TaxHub.Models.YearEndIngestion.YearlyUnit},System.Collections.Generic.List{TaxHub.Models.Agency},System.Collections.Generic.List{TaxHub.Models.Dto.STEFTModelThin})">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.CombinedAgenciesTokenModel" /> class.
            </summary>
            <param name="yearlyUnits">The yearly units of the combined agencies</param>
            <param name="combinedAgencies">The list of all agencies that combine into the main payee</param>
            <param name="combinedAgencyAmounts">The dictionary of local agencies and their AnnualRecAmounts</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.CTSWAnnualRecTokenModel.#ctor(TaxHub.Models.YearEndAgencyTokenCreationData)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.CTSWAnnualRecTokenModel" /> class.
            </summary>
            <param name="creationData">The creation data.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.DateTimeTokenModel">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.GASWAnnualRecTokenModel.#ctor(TaxHub.Models.YearEndAgencyTokenCreationData)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AnnualRecTokenModel" /> class.
            </summary>
            <param name="creationData">Year end agency token creation data</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.KSSWAnnualRecTokenModel">
            <inheritdoc />
            <summary>
            Token model for KSSW Annual recs.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.KSSWAnnualRecTokenModel.#ctor(TaxHub.Models.YearEndAgencyTokenCreationData,TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AnnualRecTokenModel" /> class.
            </summary>
            <param name="creationData">Year EndAgencyTokenCreationData</param>
            <param name="annualRecService">The annual rec service </param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.NCSWAnnualRecTokenModel">
            <inheritdoc />
            <summary>
            Token model for NCSW Annula recs.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.NCSWAnnualRecTokenModel.#ctor(TaxHub.Models.YearEndAgencyTokenCreationData)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.NCSWAnnualRecTokenModel" /> class.
            </summary>
            <param name="creationData">Year EndAgencyTokenCreationData</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.PASWAnnualRecTokenModel">
            <inheritdoc />
            <summary>
            Token model for NCSW Annual recs.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.PASWAnnualRecTokenModel.#ctor(TaxHub.Models.YearEndAgencyTokenCreationData)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.TokenModels.AnnualRecTokenModel" /> class.
            </summary>
            <param name="creationData">Year EndAgencyTokenCreationData</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService">
            <summary>
            AnnualRecService - Service to provide different functions for Annual Recs.
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService.#ctor(TaxHub.CoreServices.DataAccess.IAnnualRecRepository,TaxHub.CoreServices.Application.IScheduleService,TaxHub.CoreServices.Application.IPayeeEfileInfoService,TaxHub.CoreServices.Application.IYearlyTaxInstanceService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService"/> class.
            </summary>
            <param name="annualRecRepository">The annual record repository.</param>
            <param name="scheduleService">The schedule service.</param>
            <param name="payeeEfileInfoService">The payee efile information service.</param>
            <param name="yearlyTaxInstanceService">The yearly tax instance service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService.GetPostQeId(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the post qe info.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="quarter">The quarter.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            PostQEModelThin containing Post_Qe info
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService.GetAllQeAndLiabilityAmounts(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all qe and liability amounts.
            </summary>
            <param name="payeeId">The payee identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            AnnualRecAggregatedAmounts containing all Qe and Liability amounts
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService.GetLiabilityAndDepositAmounts(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the liability and deposit amounts.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="payeeId">The payee identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            AnnualRecAmounts containing liability and deposit amounts.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService.GetLocalAgencyDeposits(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the local agency deposits.
            </summary>
            <param name="request">The request.</param>
            <param name="clientId">The client identifier.</param>
            <param name="isCombinedAgency">if set to <c>true</c> [is combined agency].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            STEFTModelThin containing local agency deposits
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService.GetStEftDistributionPaymentAmount(System.String,System.String,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets the st eft distribution payment amount.
            </summary>
            <param name="payeeId">The payee identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            StateEft Distribution Payment Amount
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService.GetSteftAndCheckingAmountsForAllPayPeriods(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the steft and checking amounts for all pay periods.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="payeeId">The payee identifier.</param>
            <param name="year">The year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            List of SteftCheckingModelThin containing StEft and Checking amounts
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService.FindSchedule(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the schedule.
            </summary>
            <param name="scheduleId">The schedule identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Schedule</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService.IncrementSequentialFieldValue(System.String,System.String,System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Increments the sequential field value.
            </summary>
            <param name="payeeId">The payee identifier.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="incrementalStep">The incremental step.</param>
            <param name="resetDaily">if set to <c>true</c> [reset daily].</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            UpdateAggregateResultState
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService.GetCombinedAgenciesAmounts(TaxHub.Models.YearEndIngestion.YearlyTaxInstance,System.Collections.Generic.List{TaxHub.Models.Agency},System.Boolean)">
            <summary>
            Gets the combined agencies amounts.
            </summary>
            <param name="yearlyTaxInstance">The yearly tax instance.</param>
            <param name="combinedAgencies">The combined agencies.</param>
            <param name="isCombinedAgency">if set to <c>true</c> [is combined agency].</param>
            <returns>
            List of Yearly Units
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService.CheckZeroReturnAndInitializeAmounts(TaxHub.Models.YearEndIngestion.YearlyTaxInstance@,TaxHub.Models.YearEnd.PostQEModelThin@,TaxHub.Models.Dto.PostQEAmountModelThin@,TaxHub.Models.AnnualRecAmounts@,TaxHub.Models.YearEnd.YearEndPostREInfo,TaxHub.Models.TaxCode,TaxHub.Models.YearEnd.YearEndTaxFileRequest,TaxHub.Models.Client,System.Guid,System.Text.StringBuilder)">
            <summary>
            Checks the zero return and initialize amounts.
            </summary>
            <param name="yearlyTaxInstance">The yearly tax instance.</param>
            <param name="postQE">The post qe.</param>
            <param name="postQEYtdAmount">The post qe ytd amount.</param>
            <param name="annualRecAmounts">The annual record amounts.</param>
            <param name="postREEmployer">The post re employer.</param>
            <param name="taxCode">The tax code.</param>
            <param name="request">The request.</param>
            <param name="clientModel">The client model.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecService.GenerateYearlyTaxInstanceZeroReturnData(TaxHub.Models.TaxCode)">
            <summary>
            Generates the yearly tax instance zero return data.
            </summary>
            <param name="taxCode">The tax code.</param>
            <returns>
            YearlyTaxInstance
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.OHSDAnnualRecXMLDocument.SetTemplate(TaxHub.Filing.Models.AgencyFileTemplate)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.OHSDAnnualRecXMLDocument.AddSection(TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.FileSection,System.Collections.Generic.List{TaxHub.TokenParser.Core.Tokens.ITokenModel})">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.OHSDAnnualRecXMLDocument.GetAnnualRecFileName(System.Collections.Generic.List{TaxHub.TokenParser.Core.Tokens.ITokenModel})">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.OHSDAnnualRecXMLDocument.Validate(System.Collections.Generic.List{TaxHub.Models.Dto.YearEndGeneratedTaxFile})">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.OHSDAnnualRecXMLDocument.GenerateDocuments(System.Collections.Generic.List{TaxHub.Models.Dto.YearEndGeneratedTaxFile},System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.AnnualRecTextDocument.SetTemplate(TaxHub.Filing.Models.AgencyFileTemplate)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.AnnualRecTextDocument.AddSection(TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.FileSection,System.Collections.Generic.List{TaxHub.TokenParser.Core.Tokens.ITokenModel})">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.AnnualRecTextDocument.GetAnnualRecFileName(System.Collections.Generic.List{TaxHub.TokenParser.Core.Tokens.ITokenModel})">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.AnnualRecTextDocument.Validate(System.Collections.Generic.List{TaxHub.Models.Dto.YearEndGeneratedTaxFile})">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.WISWAnnualRecXMLDocument.SetTemplate(TaxHub.Filing.Models.AgencyFileTemplate)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.WISWAnnualRecXMLDocument.AddSection(TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.FileSection,System.Collections.Generic.List{TaxHub.TokenParser.Core.Tokens.ITokenModel})">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.WISWAnnualRecXMLDocument.GetAnnualRecFileName(System.Collections.Generic.List{TaxHub.TokenParser.Core.Tokens.ITokenModel})">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.WISWAnnualRecXMLDocument.Validate(System.Collections.Generic.List{TaxHub.Models.Dto.YearEndGeneratedTaxFile})">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.WISWAnnualRecXMLDocument.GenerateDocuments(System.Collections.Generic.List{TaxHub.Models.Dto.YearEndGeneratedTaxFile},System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.IAnnualRecDocument.SetTemplate(TaxHub.Filing.Models.AgencyFileTemplate)">
            <summary>
            Set the template for file generation.
            </summary>
            <param name="template">The AgencyFileTemplate.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.IAnnualRecDocument.Validate(System.Collections.Generic.List{TaxHub.Models.Dto.YearEndGeneratedTaxFile})">
            <summary>
            Run Document Level Validation.
            </summary>
            <returns>Validation Errors</returns>
            <param name="documents">The document to validate.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.IAnnualRecDocument.AddSection(TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.FileSection,System.Collections.Generic.List{TaxHub.TokenParser.Core.Tokens.ITokenModel})">
            <summary>
            Add a section of the file to be generated.
            </summary>
            <param name="section">The type of section.</param>
            <param name="tokensModels">The tokens to use to generate section.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.IAnnualRecDocument.GenerateDocuments(System.Collections.Generic.List{TaxHub.Models.Dto.YearEndGeneratedTaxFile},System.String,System.Int32)">
            <summary>
            Generate the Document.
            </summary>
            <param name="generatedTaxFiles">The generated Tax Files.</param>
            <param name="fileName">The file name to be generated.</param>
            <param name="taxID">The taxID to tagged created files.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Documents.IAnnualRecDocument.GetAnnualRecFileName(System.Collections.Generic.List{TaxHub.TokenParser.Core.Tokens.ITokenModel})">
            <summary>
            Get the fileName of the annual rec.
            </summary>
            <param name="tokens">The Tokens</param>
            <returns>The fileName</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService.GetPostQeId(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the post qe info.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="quarter">The quarter.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>PostQEModelThin containing Post_Qe info</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService.GetAllQeAndLiabilityAmounts(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all qe and liability amounts.
            </summary>
            <param name="payeeId">The payee identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>AnnualRecAggregatedAmounts containing all Qe and Liability amounts</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService.GetLiabilityAndDepositAmounts(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the liability and deposit amounts.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="payeeId">The payee identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>AnnualRecAmounts containing liability and deposit amounts.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService.GetLocalAgencyDeposits(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the local agency deposits.
            </summary>
            <param name="request">The request.</param>
            <param name="clientId">The client identifier.</param>
            <param name="isCombinedAgency">if set to <c>true</c> [is combined agency].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>STEFTModelThin containing local agency deposits</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService.GetStEftDistributionPaymentAmount(System.String,System.String,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets the st eft distribution payment amount.
            </summary>
            <param name="payeeId">The payee identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>StateEft Distribution Payment Amount</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService.GetSteftAndCheckingAmountsForAllPayPeriods(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the steft and checking amounts for all pay periods.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="payeeId">The payee identifier.</param>
            <param name="year">The year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of SteftCheckingModelThin containing StEft and Checking amounts</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService.FindSchedule(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the schedule.
            </summary>
            <param name="scheduleId">The schedule identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Schedule</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService.IncrementSequentialFieldValue(System.String,System.String,System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Increments the sequential field value.
            </summary>
            <param name="payeeId">The payee identifier.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="incrementalStep">The incremental step.</param>
            <param name="resetDaily">if set to <c>true</c> [reset daily].</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService.GetCombinedAgenciesAmounts(TaxHub.Models.YearEndIngestion.YearlyTaxInstance,System.Collections.Generic.List{TaxHub.Models.Agency},System.Boolean)">
            <summary>
            Gets the combined agencies amounts.
            </summary>
            <param name="yearlyTaxInstance">The yearly tax instance.</param>
            <param name="combinedAgencies">The combined agencies.</param>
            <param name="isCombinedAgency">if set to <c>true</c> [is combined agency].</param>
            <returns>List of Yearly Units</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecService.CheckZeroReturnAndInitializeAmounts(TaxHub.Models.YearEndIngestion.YearlyTaxInstance@,TaxHub.Models.YearEnd.PostQEModelThin@,TaxHub.Models.Dto.PostQEAmountModelThin@,TaxHub.Models.AnnualRecAmounts@,TaxHub.Models.YearEnd.YearEndPostREInfo,TaxHub.Models.TaxCode,TaxHub.Models.YearEnd.YearEndTaxFileRequest,TaxHub.Models.Client,System.Guid,System.Text.StringBuilder)">
            <summary>
            Checks the zero return and initialize amounts.
            </summary>
            <param name="yearlyTaxInstance">The yearly tax instance.</param>
            <param name="postQE">The post qe.</param>
            <param name="postQEYtdAmount">The post qe ytd amount.</param>
            <param name="annualRecAmounts">The annual record amounts.</param>
            <param name="postREEmployer">The post re employer.</param>
            <param name="taxCode">The tax code.</param>
            <param name="request">The request.</param>
            <param name="clientModel">The client model.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="messages">The messages.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderType.Jurisdiction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderType.TransmissionId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderType.Timestamp">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderType.Transmitter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderType.ProcessType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderType.AgentIdentifier">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderType.ReportingAgentSignature">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderType.AckAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderType.recordCount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderTypeTransmitter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderTypeTransmitter.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachmentType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachmentType.Reference">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachmentType.DocumentType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachmentType.DocumentTypeSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachmentType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachmentType.AttachmentLocation">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachmentTypeDocumentType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachmentTypeDocumentType.PDF">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.SSN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.Employee">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.TotalWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.TotalWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.TaxableWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.TaxableWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.TaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.TaxWithheldSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.EmployeeContribution">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.EmployeeContributionSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.UITotalWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.UITotalWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.UITaxableWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.UITaxableWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.WeeksWorked">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.DateFirstEmployed">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.DateFirstEmployedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.DateOfSeparation">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.DateOfSeparationSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeStateRecordType.StateOfResidence">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.IndividualNameType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.IndividualNameType.FirstName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.IndividualNameType.MiddleInitial">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.IndividualNameType.LastName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.IndividualNameType.NameSuffix">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.IndividualNameType.NameSuffixSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType.JR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType.SR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType.I">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType.II">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType.III">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType.IV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType.V">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType.VI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType.VII">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType.VIII">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType.IX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.GenerationalNameSuffixType.X">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AnnualPayRollType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AnnualPayRollType.Employee">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AnnualPayRollType.EmployeeNameFormat">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TaxRemittedPeriodAmountType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TaxRemittedPeriodAmountType.TaxRemittedPeriodEnd">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TaxRemittedPeriodAmountType.TaxRemittedPaymentDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TaxRemittedPeriodAmountType.TaxRemittedTaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TaxRemittedPeriodAmountType.TaxRemittedTaxPaid">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CurrentYearCreditType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CurrentYearCreditType.CurrentCreditDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CurrentYearCreditType.CurrentYearWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CurrentYearCreditType.CurrentYearPaid">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PriorYearCreditType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PriorYearCreditType.PriorCreditYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PriorYearCreditType.PriorYearWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PriorYearCreditType.PriorYearPaid">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountCompositeType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountCompositeType.ReceivingDFIName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountCompositeType.RoutingNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountCompositeType.AccountNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountCompositeType.AccountType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountCompositeType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountCompositeType.ItemElementName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountType.Item1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountType.Item2">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CheckboxType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CheckboxType.X">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType6">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType6.IsIATTransaction">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType6.NotIATTransaction">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EnrollmentFinancialInformationType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EnrollmentFinancialInformationType.Items">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EnrollmentFinancialInformationType.ItemsElementName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType.BankAccount">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType.CreditRemittance">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType.DebitRemittance">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType.PrenoteBankAccountInd">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType.UseMasterAccount">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType.UseTaxpayerAccount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINType.TypeStateEIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINType.StateEINValue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINType.StateEINExtension">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINTypeTypeStateEIN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINTypeTypeStateEIN.WithholdingAccountNo">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINTypeTypeStateEIN.UIAccountNo">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINTypeTypeStateEIN.StateControlNo">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINTypeTypeStateEIN.EFileAccountNo">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINTypeTypeStateEIN.EFTAccountNo">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINTypeTypeStateEIN.StateRegistrationNo">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINTypeTypeStateEIN.StateAccountID">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINTypeTypeStateEIN.CentralRegistrationNumber">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINTypeStateEINExtension">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateEINTypeStateEINExtension.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessAddressType.BusinessName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessAddressType.Address">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessAddressType.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessAddressType.ForeignPhoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessAddressType.TIN">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessNameType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessNameType.BusinessNameLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessNameType.BusinessNameLine2">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressType.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeForeignAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeForeignAddress.AddressLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeForeignAddress.AddressLine2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeForeignAddress.City">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeForeignAddress.ProvinceOrState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeForeignAddress.Country">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeForeignAddress.PostalCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeForeignAddress.InCareOfName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.XI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.XA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.XZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.FQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.XB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.IO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.VI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.UV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.KT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.IP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.VP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.IV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.HR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.EZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.DA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.DX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.DJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.DO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.DR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.EC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.EG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.ES">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.EK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.ER">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.EN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.ET">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.FK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.FO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.FM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.FJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.FI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.FR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.FP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.FS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.VC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.PU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.GY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.HA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.HM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.VT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.HO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.HK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.HQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.HU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.IC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.IN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.ID">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.IR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.IZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.EI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.IS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.IT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.JM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.JN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.JA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.DQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.JE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.JQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.JO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.KZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.KE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.KQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.KR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.KN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.KS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.KU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.KG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.LA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.LG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.LE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.LT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.LI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.LY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.LS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.LH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.LU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.ML">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.IM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.RM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.WA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.MU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.OC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.PK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.LQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.PS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.PM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.PP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.PF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.PA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.PE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.RP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.PC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.PL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.PO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.RQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.QA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.RO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.RS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.RW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.WS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.RI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.LO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.BP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.PG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.CE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.ST">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.VC1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.WZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.SY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.TV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.UG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.UP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.AE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.UK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.UY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.UZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.NH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.VE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.VM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.VQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.WQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.WF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.WI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.YM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.YI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.ZA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CountryType.ZI">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeUSAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeUSAddress.AddressLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeUSAddress.AddressLine2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeUSAddress.City">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeUSAddress.State">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeUSAddress.ZIPCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddressTypeUSAddress.InCareOfName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.AL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.AK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.AS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.AZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.AR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.CA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.CO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.MP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.CT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.DE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.DC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.FM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.FL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.GA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.GU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.HI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.ID">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.IL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.IN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.IA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.KS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.KY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.LA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.ME">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.MH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.MD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.MA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.MI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.MN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.MS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.MO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.MT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.NE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.NV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.NH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.NJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.NM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.NY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.NC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.ND">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.OH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.OK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.OR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.PW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.PA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.PR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.RI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.SC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.SD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.TN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.TX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.VI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.UT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.VT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.VA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.WA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.WV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.WI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.WY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.AA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.AE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateType.AP">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TINType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TINType.TypeTIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TINType.TINTypeValue">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TINTypeTypeTIN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TINTypeTypeTIN.FEIN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TINTypeTypeTIN.SSN">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.Employee">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.TotalWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.TotalWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.TaxableWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.TaxableWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.TaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.TaxWithheldSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.EmployeeContribution">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.EmployeeContributionSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.TypeOfEmployment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.TaxState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.WagePlan">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeType.OutOfStateWages">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.Title">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.FirstName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.MiddleInitial">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.LastName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.Address">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.EmailAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.BusinessPhoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.HomePhoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.FaxNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.SSN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.DateSigned">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.DateSignedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.DateReviewed">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.DateReviewedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.AuthorizeDiscuss">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.AuthorizeDiscussSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.Signature">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.Notes">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.Age">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.DateOfDeath">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.DateOfDeathSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.DateOfBirth">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.DateOfBirthSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.DecedentIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.DecedentIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.NewNameAddressChkBox">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.NewNameAddressChkBoxSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.InCareOf">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.Occupation">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.StateIdNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.PriorYearAGI">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonType.PriorYearAGISpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeTypeOutOfStateWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeTypeOutOfStateWages.TotalWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeTypeOutOfStateWages.TaxableWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EmployeeTypeOutOfStateWages.TaxState">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PayRollType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PayRollType.Employee">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PayRollType.EmployeeNameFormat">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DayDecimalType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DayDecimalType.ActivityDay">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DayDecimalType.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.Month1Liabilities">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.Month1Deposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalMonth1Liability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalMonth1LiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalMonth1Deposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalMonth1DepositsSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.Month2Liabilities">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.Month2Deposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalMonth2Liability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalMonth2LiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalMonth2Deposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalMonth2DepositsSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.Month3Liabilities">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.Month3Deposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalMonth3Liability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalMonth3LiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalMonth3Deposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalMonth3DepositsSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalQuarterLiability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalQuarterLiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalQuarterDeposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PaymentScheduleType.TotalQuarterDepositsSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.SignatureDocumentType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.SignatureDocumentType.referenceDocumentId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.SignatureDocumentType.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.SignatureDocumentEnumType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.SignatureDocumentEnumType.Retain">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.SignatureDocumentEnumType.Attach">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.SignatureDocumentEnumType.Mail">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATType.ForeignCurrency">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATType.PaymentDetail">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATType.ForeignDFI">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATType.Receiver">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrency">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrency.ForeignExchangeIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrency.ForeignExchangeIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrency.ForeignExchangeRefIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrency.ForeignExchangeRefIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrency.ForeignExchangeReference">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrency.OriginatingCurrencyCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrency.DestinationCurrencyCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrency.ForeignPaymentAmount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrencyForeignExchangeIndicator">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrencyForeignExchangeIndicator.FV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrencyForeignExchangeIndicator.VF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrencyForeignExchangeIndicator.FF">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrencyForeignExchangeRefIndicator">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrencyForeignExchangeRefIndicator.Item1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrencyForeignExchangeRefIndicator.Item2">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignCurrencyForeignExchangeRefIndicator.Item3">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypePaymentDetail">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypePaymentDetail.DestinationCountry">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.DZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.IO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.KH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.KY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.KM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.HR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.DK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.DJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.DM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.DO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.EC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.EG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.ER">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.EE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.ET">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.FK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.FO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.FJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.FI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.FR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.DE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.HT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.HM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.VA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.HN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.HK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.HU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.IS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.IN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.ID">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.IR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.IQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.IE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.IM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.IL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.IT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.JM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.JP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.JE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.JO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.KZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.KE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.KI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.KP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.KR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.KW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.KG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.LA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.LV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.LB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.LS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.LR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.LY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.LI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.LT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.LU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.ML">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.YT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.FM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.ME">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.NA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.NR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.NP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.NL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.NC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.NZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.NI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.NE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.NG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.NU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.NF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.NO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.OM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.QA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.RE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.RO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.RU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.RW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.BL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.KN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.LC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.MF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.PM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.VC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.WS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.ST">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.RS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.ZA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.ES">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.LK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.CH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.SY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.TV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.UG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.UA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.AE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.GB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.US">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.UM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.UY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.UZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.VU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.VE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.VN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.VG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.VI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.WF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.EH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.YE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.ZM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ISOCountryType.ZW">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignDFI">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignDFI.ForeignDFIName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignDFI.ForeignDFIIdentifier">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeForeignDFI.ForeignDFICountryCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeReceiver">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeReceiver.ReceiverName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeReceiver.ReceiverID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FullIATTypeReceiver.ReceiverAddress">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateDirectDepositType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateDirectDepositType.TelephoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateDirectDepositType.RoutingTransitNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateDirectDepositType.BankAccountNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateDirectDepositType.Amount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateDirectDepositType.AmountSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateDirectDepositType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateDirectDepositType.ItemElementName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType3">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType3.Checking">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType3.Savings">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHCreditDetailType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHCreditDetailType.PaymentAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHCreditDetailType.IdentificationNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHCreditDetailType.RequestedPaymentDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHCreditDetailType.RequestedPaymentDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHCreditDetailType.AddendaRecord">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddendaRecordType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddendaRecordType.TaxpayerIdentification">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddendaRecordType.TaxTypeCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddendaRecordType.TaxPeriodEndDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddendaRecordType.TaxPeriodEndDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddendaRecordType.TXPAmount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FTATaxTypeCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FTATaxTypeCode.FTACode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FTATaxTypeCode.StateTaxTypeCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddendaRecordTypeTXPAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddendaRecordTypeTXPAmount.SubAmountType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AddendaRecordTypeTXPAmount.SubAmount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType.ItemElementName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType.RoutingTransitNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType.BankAccountNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType.PaymentAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType.IdentificationNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType.AccountHolderType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType.AccountHolderTypeSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType.RequestedPaymentDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType.RequestedPaymentDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ACHEntityDetailType.AddendaRecord">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType2">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType2.Checking">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType2.Savings">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountHolderType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountHolderType.Item1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BankAccountHolderType.Item2">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.Title">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.PreparerName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.FirmName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.ContactName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.Address">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.EmailAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.FaxNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.EFIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.ETIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.PTIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.SSN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.FEIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.StateID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.IDNumberType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.DateSignedPrepared">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.DateSignedPreparedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.DateReviewed">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.DateReviewedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.AuthorizeDiscuss">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.AuthorizeDiscussSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.PreparerIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.PreparerIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.PreparerSelfEmployIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.PreparerSelfEmployIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.SignatureType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.Notes">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.PhoneType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.PhoneTypeSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PreparerType.PhoneExtension">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PhoneNumType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PhoneNumType.Home">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PhoneNumType.Work">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PhoneNumType.Cell">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PhoneNumType.Other">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonOrBusinessType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonOrBusinessType.TypeOfEntity">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonOrBusinessType.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Corporate">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Individualactive">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Individualpassive">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Partnership">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Exemptorg">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Nominee">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.LLP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.DomesticCorp">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.ForeignCorp">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Estate">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Trust">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.SMLLC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.SCorp">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.LLC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Generalpartnership">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Limitedpartnership">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Other">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.DisregardedEntity">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Individual">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.Fiduciary">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ShareholderEntityType.PTE">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessType.Name">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessType.Address">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessType.FEIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessType.StateID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessType.DateBegin">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessType.DateBeginSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessType.DateEnd">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessType.DateEndSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BusinessType.PhoneNumber">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.InternetProtocolType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.InternetProtocolType.IPAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.InternetProtocolType.IPTimestamp">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EntityDetailType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EntityDetailType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EntityDetailType.ItemElementName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EntityDetailType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EntityDetailType.TransactionIdCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EntityDetailType.Amount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.EntityDetailType.AmountSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType1.Date">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType1.Year">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType1.YearMonth">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.DeveloperName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.DeveloperID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.TransmitterName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.TransmitterID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.ContactName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.Address">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.EmailAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.FaxNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.EFIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.ETIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.FEIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.VersionID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.TestProductionIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.ProductType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.Date">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.DateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DeveloperTransmitterType.FreeFileCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DirectDepositType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DirectDepositType.DirectDepositAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DirectDepositType.RoutingTransitNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DirectDepositType.BankAccountNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.DirectDepositType.AccountType">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CharitableContributionType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CharitableContributionType.CharitableDonationAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CharitableContributionType.CharitableDonationAmountSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CharitableContributionType.CharityOrgCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.CharitableContributionType.CharityOrgName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AttachmentType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AttachmentType.Reference">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AttachmentType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AttachmentType.TypeAttachment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AttachmentType.TypeAttachmentSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AttachmentType.LinkToAttachment">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AttachmentTypeTypeAttachment">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AttachmentTypeTypeAttachment.ZIP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.AttachmentTypeTypeAttachment.PDF">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.VehicleDescriptionType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.VehicleDescriptionType.VehicleYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.VehicleDescriptionType.VehicleMake">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.VehicleDescriptionType.VehicleModel">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.IPAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.IPAddressType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.IPAddressType.ItemElementName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType.IPv4Address">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType.IPv6Address">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonFullNameType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonFullNameType.PersonFirstName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PersonFullNameType.PersonLastName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.NameAndAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.NameAndAddressType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.NameAndAddressType.Item1">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ForeignAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ForeignAddressType.AddressLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ForeignAddressType.AddressLine2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ForeignAddressType.City">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ForeignAddressType.ProvinceOrState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ForeignAddressType.Country">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ForeignAddressType.PostalCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.USAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.USAddressType.AddressLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.USAddressType.AddressLine2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.USAddressType.City">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.USAddressType.State">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.USAddressType.ZIPCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherForeignAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherForeignAddressType.AddressLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherForeignAddressType.AddressLine2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherForeignAddressType.City">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherForeignAddressType.ProvinceOrState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherForeignAddressType.Country">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherForeignAddressType.CountrySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherForeignAddressType.PostalCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherUSAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherUSAddressType.AddressLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherUSAddressType.AddressLine2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherUSAddressType.City">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherUSAddressType.State">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherUSAddressType.StateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OtherUSAddressType.ZIPCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ForeignItemizedEntryType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ForeignItemizedEntryType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ForeignItemizedEntryType.Amount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.USItemizedEntryType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.USItemizedEntryType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.USItemizedEntryType.Amount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderTypeProcessType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderTypeProcessType.T">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.TransmissionHeaderTypeProcessType.P">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.Jurisdiction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.Timestamp">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.TaxPeriodBeginDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.TaxPeriodBeginDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.TaxPeriodEndDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.TaxPeriodEndDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.TaxYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.DisasterRelief">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.ISPNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.PaidPreparerInformation">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.Originator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.SoftwareId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.SoftwareVersion">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.InternetProtocol">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.SignatureOption">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.AmendedReturnIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.AmendedReturnIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.OriginalSubmissionId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.OriginalSubmissionDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.OriginalSubmissionDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderType.binaryAttachmentCount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.DateSigned">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.DateSignedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.SelfEmployed">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.SelfEmployedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.ItemElementName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.Item1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.PreparerBusinessName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.PreparerPersonName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.Item2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.Item3">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.Item3ElementName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformation.EmailAddress">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType4">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType4.PTIN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType4.SSN">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformationMissingEINReason">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformationMissingEINReason.APPLDFOR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypePaidPreparerInformationMissingEINReason.FOREIGNUS">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.Item3ChoiceType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.Item3ChoiceType.ForeignPhone">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.Item3ChoiceType.Phone">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeOriginator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeOriginator.EFIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeOriginator.OriginatorTypeCd">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeOriginator.PractitionerPIN">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OriginatorType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OriginatorType.ERO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OriginatorType.OnlineFiler">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OriginatorType.ReportingAgent">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OriginatorType.IRSAgent">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OriginatorType.FinancialAgent">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.OriginatorType.LargeTaxpayer">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeOriginatorPractitionerPIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeOriginatorPractitionerPIN.EFIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeOriginatorPractitionerPIN.PIN">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeSignatureOption">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeSignatureOption.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeSignatureOptionSignaturePIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeSignatureOptionSignaturePIN.Signature">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeSignatureOptionSignaturePIN.PrimaryPINEnteredBy">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeSignatureOptionSignaturePIN.SecondaryPINEnteredBy">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnHeaderTypeSignatureOptionSignaturePIN.SecondaryPINEnteredBySpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PINCodeType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PINCodeType.Practitioner">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PINCodeType.SelfSelectPractitioner">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PINCodeType.SelfSelectOnLine">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PINEnteredByType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PINEnteredByType.Taxpayer">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.PINEnteredByType.ERO">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateType.Filer">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateType.ReturnQuarter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateType.DueDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateType.DueDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateType.Form">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateType.FilingAction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateType.FinalReturnElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateType.PaymentIncludedElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateType.PaymentIncludedElectSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateType.ThirdPartyAuthorization">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateType.AckAddress">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFiler">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFiler.TIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFiler.OtherTIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFiler.StateEIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFiler.StateEINExtension">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFiler.Name">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFiler.InCareOfName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFiler.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFiler.ItemElementName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFiler.Item1">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType5">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType5.CheckDigit">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType5.NameControl">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFilingAction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFilingAction.Action">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFilingAction.Reason">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFilingActionAction">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFilingActionAction.Original">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFilingActionAction.Amended">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFilingActionAction.Supplemental">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFinalReturnElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFinalReturnElect.DateFinalWagesPaid">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeFinalReturnElect.DateFinalWagesPaidSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeThirdPartyAuthorization">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeThirdPartyAuthorization.AuthorizeThirdPartyElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeThirdPartyAuthorization.DesigneeName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeThirdPartyAuthorization.DesigneePhone">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FSETReturnHeaderStateTypeThirdPartyAuthorization.DPIN">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.EmployerHealthInsuranceCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.BusinessAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.DeliveryAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.LocationAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.DoingBusinessAs">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.AddressChangeElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.AddressChangeElectSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.HouseholdEmployerElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.HouseholdEmployerElectSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.SeasonalEmployerElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.SeasonalEmployerElectSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.SellTransferIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.SellTransferIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.SellTransferWholeOrPart">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.OfficerCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.ReturnSigner">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationType.Contact">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationTypeReturnSigner">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationTypeReturnSigner.Name">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationTypeReturnSigner.Title">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationTypeReturnSigner.Phone">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationTypeReturnSigner.EmailAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationTypeReturnSigner.Signature">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationTypeReturnSigner.DateSigned">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationTypeContact">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateGeneralInformationTypeContact.ContactName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.NumberOfEmployees">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.NoPayrollElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.NoPayrollElectSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHTotalWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHTotalWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WithHoldingRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WithHoldingRateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.TotalIncomeTaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.TotalIncomeTaxWithheldSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHTaxableWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHTaxableWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHPaymentsOrDeposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHPaymentsOrDepositsSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHTotalPayments">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHTotalPaymentsSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHAmountRemitted">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHAmountRemittedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.AdjustedTotalIncomeTaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.AdjustedTotalIncomeTaxWithheldSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHAdjustmentPriorPeriod">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHAdjustmentPriorPeriodSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHOtherAdjustment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHOtherAdjustmentSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHAmountDuePreviousPeriod">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHAmountDuePreviousPeriodSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHNetTax">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHNetTaxSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHInterest">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHInterestSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.InterestPaid">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.InterestPaidSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHPenalty">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHPenaltySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.PenaltyPaid">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.PenaltyPaidSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHTotalTax">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHTotalTaxSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHAmountDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.WHAmountDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.PaymentsOverPaymentPrevious">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.PaymentsOverPaymentPreviousSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.LocalTaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.Credit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.PriorYearCredit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.CurrentYearCredit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.Month1Liability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.Month1LiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.Month2Liability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.Month2LiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.Month3Liability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.Month3LiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.TotalQuarterLiability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.TotalQuarterLiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.LiabilityPeriodAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHType.PaymentSchedule">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeWHOverpayment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeWHOverpayment.AmountOfOverpayment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeWHOverpayment.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeWHOverpayment.ItemElementName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType7">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType7.CreditElect">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType7.RefundElect">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeLocalTaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeLocalTaxWithheld.LocalJurisdiction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeLocalTaxWithheld.LocalTaxRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeLocalTaxWithheld.LocalTaxRateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeLocalTaxWithheld.LocalTaxAmount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeCredit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeCredit.CreditType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeCredit.CreditAmount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeLiabilityPeriodAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeLiabilityPeriodAmount.Period">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateWHTypeLiabilityPeriodAmount.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.ReimbursablelEmployerElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.ReimbursablelEmployerElectSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.NoPayrollElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.NoPayrollElectSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UITotalWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UITotalWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.ExcessWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.ExcessWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UITaxableWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UITaxableWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.ContributionRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.ContributionDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.ContributionDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.SurchargeRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.SurchargeRateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.SurchargeDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.SurchargeDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.DIContributionRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.DIContributionRateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.DIContributionDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.DIContributionDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.VoluntaryDIContributionDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.VoluntaryDIContributionDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.TrainingFundContribution">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.TrainingFundContributionSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.TotalContingencyAssessmentDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.TotalContingencyAssessmentDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UIAmountPaid">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UIAmountPaidSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UIAmountDuePreviousPeriod">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UIAmountDuePreviousPeriodSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UICreditPreviousPeriod">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UICreditPreviousPeriodSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UIInterest">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UIInterestSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.InterestPaid">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.InterestPaidSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UIPenalty">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UIPenaltySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.PenaltyPaid">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.PenaltyPaidSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UITotalDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.UITotalDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.CreditWeeks">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.PayRoll">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.NumberOfEmployees">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.Month1Employees">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.Month2Employees">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateUIType.Month3Employees">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.TaxYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.SubmitW2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.SubmitW2Specified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.Submit1099">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.Submit1099Specified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.NumberOfEmployees">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.NoPayrollElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.NoPayrollElectSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.NoPayrollAnnualElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.NoPayrollAnnualElectSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.NumberOfRecords">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.NumberOfPeriods">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.TotalWagesYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.TotalWagesYearSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.TotalIncomeTaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.TotalIncomeTaxWithheldSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.TaxWithheldYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.TaxWithheldYearSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.UITaxableWagesYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.UITaxableWagesYearSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.UITaxRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.UITaxRateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.UITaxesYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.UITaxesYearSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.EmploymentTrainingTaxRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.EmploymentTrainingTaxRateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.EmploymentTrainingTaxesYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.EmploymentTrainingTaxesYearSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.DITaxableWagesYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.DITaxableWagesYearSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.DITaxRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.DITaxRateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.DITaxesYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.DITaxesYearSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.TotalContributionsYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.TotalContributionsYearSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.Credit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.PriorYearCredit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.CurrentYearCredit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.TotalCreditsYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.TotalCreditsYearSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.Items">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.ItemsElementName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.LiabilityPeriodAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.TaxRemittedPeriodAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.AnnualPayRoll">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.AmountWithheld1stQuarter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.AmountWithheld1stQuarterSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.AmountWithheld2ndQuarter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.AmountWithheld2ndQuarterSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.AmountWithheld3rdQuarter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.AmountWithheld3rdQuarterSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.AmountWithheld4thQuarter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualType.AmountWithheld4thQuarterSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeSubmitW2">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeSubmitW2.Item1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeSubmitW2.Item2">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeSubmitW2.Item3">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeSubmit1099">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeSubmit1099.Item1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeSubmit1099.Item2">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeSubmit1099.Item3">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeNumberOfRecords">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeNumberOfRecords.RecordType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeNumberOfRecords.RecordTypeSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeNumberOfRecords.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeNumberOfRecordsRecordType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeNumberOfRecordsRecordType.W2">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeNumberOfRecordsRecordType.Item1099">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeNumberOfRecordsRecordType.Other">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeNumberOfRecordsRecordType.Total">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeCredit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeCredit.CreditType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeCredit.CreditAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeCredit.CreditAmountSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeWHOverpayment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeWHOverpayment.AmountOfOverpayment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeWHOverpayment.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeWHOverpayment.ItemElementName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType8">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType8.CreditElect">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType8.RefundElect">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType1.WHBalanceDue">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType1.WHInterestDue">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType1.WHOverpayment">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType1.WHPenalty">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemsChoiceType1.WHTotalBalanceDue">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeLiabilityPeriodAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeLiabilityPeriodAmount.Period">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateAnnualTypeLiabilityPeriodAmount.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.ReimbursableEmployerElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.ReimbursableEmployerElectSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.NumberOfEmployees">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.NoPayrollElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.NoPayrollElectSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.SellTransferIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.SellTransferIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.SellTransferWholeOrPart">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHTotalWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHTotalWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WithHoldingRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WithHoldingRateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.TotalIncomeTaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.TotalIncomeTaxWithheldSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHTaxableWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHTaxableWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHPaymentsOrDeposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHPaymentsOrDepositsSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHTotalPayments">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHTotalPaymentsSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHAmountRemitted">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHAmountRemittedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.AdjustedTotalIncomeTaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.AdjustedTotalIncomeTaxWithheldSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHAdjustmentPriorPeriod">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHAdjustmentPriorPeriodSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHOtherAdjustment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHOtherAdjustmentSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHAmountDuePreviousPeriod">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHAmountDuePreviousPeriodSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHNetTax">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHNetTaxSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHInterest">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHInterestSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHInterestPaid">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHInterestPaidSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHPenalty">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHPenaltySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHPenaltyPaid">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHPenaltyPaidSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHTotalTax">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHTotalTaxSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHAmountDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.WHAmountDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.PaymentsOverPaymentPrevious">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.PaymentsOverPaymentPreviousSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.LocalTaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.Credit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.PriorYearCredit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.CurrentYearCredit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.Month1Liability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.Month1LiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.Month2Liability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.Month2LiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.Month3Liability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.Month3LiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.TotalQuarterLiability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.TotalQuarterLiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.LiabilityPeriodAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UITotalWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UITotalWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.ExcessWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.ExcessWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UITaxableWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UITaxableWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.ContributionRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.ContributionRateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.ContributionDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.ContributionDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.SurchargeRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.SurchargeRateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.SurchargeDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.SurchargeDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.DIContributionRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.DIContributionRateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.DIContributionDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.DIContributionDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.TrainingFundContribution">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.TrainingFundContributionSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.TotalContingencyAssessmentDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.TotalContingencyAssessmentDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UIAmountPaid">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UIAmountDuePreviousPeriod">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UIAmountDuePreviousPeriodSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UICreditPreviousPeriod">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UICreditPreviousPeriodSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UIInterest">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UIInterestSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UIInterestPaid">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UIInterestPaidSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UIPenalty">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UIPenaltySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UIPenaltyPaid">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UIPenaltyPaidSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UITotalDue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.UITotalDueSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.CreditWeeks">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.PayRoll">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.Month1Employees">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.Month2Employees">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.Month3Employees">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedType.PaymentSchedule">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeWHOverpayment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeWHOverpayment.AmountOfOverpayment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeWHOverpayment.AmountOfOverpaymentSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeWHOverpayment.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeWHOverpayment.ItemElementName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType9">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType9.CreditElect">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ItemChoiceType9.RefundElect">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeLocalTaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeLocalTaxWithheld.LocalJurisdiction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeLocalTaxWithheld.LocalTaxRate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeLocalTaxWithheld.LocalTaxRateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeLocalTaxWithheld.LocalTaxAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeLocalTaxWithheld.LocalTaxAmountSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeCredit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeCredit.CreditType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeCredit.CreditAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeCredit.CreditAmountSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeLiabilityPeriodAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeLiabilityPeriodAmount.Period">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateCombinedTypeLiabilityPeriodAmount.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateNewEmployeeRegistryType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateNewEmployeeRegistryType.Employee">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateIndepContractorReportingType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.StateIndepContractorReportingType.Employee">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataState.SubmissionId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataState.StateGeneralInformation">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataState.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataStateRequestExtension">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataStateRequestExtension.TypeOfExtension">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataStateRequestExtension.ExtendedToDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataStateRequestExtension.ExtendedToDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataStateRequestExtension.ExtensionReason">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataStateRequestExtensionTypeOfExtension">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataStateRequestExtensionTypeOfExtension.StateWH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataStateRequestExtensionTypeOfExtension.StateUI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataStateRequestExtensionTypeOfExtension.StateCombined">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataStateRequestExtensionTypeOfExtension.StateAnnual">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataStateRequestExtensionTypeOfExtension.StateNewEmployee">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnDataStateRequestExtensionTypeOfExtension.StateIndependentContraxtor">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachment.documentId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachment.documentName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachment.softwareId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.BinaryAttachment.softwareVersion">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionType.Items">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionType.EstimatedPayments">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeACHCreditInfo">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeACHCreditInfo.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeACHCreditInfoIsIATTransaction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeACHCreditInfoIsIATTransaction.originatingDFIName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeACHCreditInfoIsIATTransaction.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeRefundDirectDeposit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeRefundDirectDeposit.Item1">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeRefundDirectDepositIsIATTransaction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeRefundDirectDepositIsIATTransaction.receivingDFIName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeRefundDirectDepositIsIATTransaction.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeStatePayment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeStatePayment.Item1">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeStatePaymentIsIATTransaction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeStatePaymentIsIATTransaction.receivingDFIName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeStatePaymentIsIATTransaction.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeEstimatedPayments">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeEstimatedPayments.Item1">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeEstimatedPaymentsIsIATTransaction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeEstimatedPaymentsIsIATTransaction.receivingDFIName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.FinancialTransactionTypeEstimatedPaymentsIsIATTransaction.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnState.ReturnHeaderState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnState.ReturnDataState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnState.BinaryAttachment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnState.FinancialTransaction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.ReturnState.stateSchemaVersion">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.Transmission">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.Transmission.TransmissionHeader">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.OHSD.Transmission.ReturnState">
            <remarks/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecProcessor.GenerateAnnualRecAsync(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Text.StringBuilder,System.Collections.Generic.List{TaxHub.Models.Dto.YearEndGeneratedTaxFile},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecProcessor.LogARFailure(System.Guid,System.String,System.Object[])">
            <summary>
            Logs error when AR failed to generate. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record failures.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecProcessor.LogARSuccess(System.Guid,System.String,System.Object[])">
            <summary>
            Logs when AR has successfully generated. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record success.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecProcessor.LogARSuccessfulClient(System.Guid,System.String,System.Object[])">
            <summary>
            Logs when AR has successfully generated for one client. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record success.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.AnnualRecProcessor.LogARClientSkipped(System.Guid,System.String,System.Object[])">
            <summary>
            Logs when AR skipped a client. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record success.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.ALSWAnnualRecValidator">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.AnnualRecAggregatedAmountsValidator.IsValidForAnnualRec">
            <summary>
            Returns true/false is model valid for annual reconciliation process
            </summary>
            <returns> true or false </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.AnnualRecAmountsValidator.IsValidForAnnualRec">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.AnnualRecAmountsValidator.GetRuleViolationsForAnnualRec">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.AZSWAnnualRecValidator">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.AnnualRecCustomValidatorResolver">
            <summary>
            Resolves custom annual rec validator for payees in the same namespace as <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.AnnualRecCustomValidatorResolver"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.AnnualRecCustomValidatorResolver.GetCustomValidator(System.String,TaxHub.Models.YearEndAgencyTokenCreationData,System.Collections.Generic.Dictionary{System.String,TaxHub.Common.Validations.CustomAnnualRecValidation})">
            <summary>
            Resolve a custom validator for a payeeID.
            </summary>
            <param name="payeeID">The PayeeID</param>
            <param name="agencyTokenCreationData">YearEnd agency token creation data we will reuse from the token resolver</param>
            <param name="customValidations">Custom validations holder to specify which of the agency's validation it should use</param>
            <returns>The {PayeeID}AnnualRecValidator if it exists.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.ClientAgencyAnnualRecValidator.IsValidForAnnualRec">
            <summary>
            Returns true/false is model valid for annual reconciliation process
            </summary>
            <returns> true or false </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.ClientModelValidator.IsValidForAnnualRec">
            <summary>
            Returns true/false is model valid for annual reconciliation process
            </summary>
            <returns> true or false </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.CombinedAgenciesValidator.IsValidForAnnualRec">
            <summary>
            Returns true/false is model valid for annual reconciliation process
            </summary>
            <returns> true or false </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.CTSWAnnualRecValidator">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.OHSDAnnualRecValidator">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.PaymentsWithHoldingsValidator">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.PaymentsWithHoldingsValidator.IsValidForAnnualRec">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.PostQeAnnualRecValidator.IsValidForAnnualRec">
            <summary>
            Returns true/false is model valid for annual reconciliation process
            </summary>
            <returns> true or false </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.PostQEAmountsAnnualRecValidator.IsValidForAnnualRec">
            <summary>
            Returns true/false is model valid for annual reconciliation process
            </summary>
            <returns> true or false </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.VTSWAnnualRecValidator.IsValidForAnnualRec">
            <summary>
            Returns true/false is model valid for annual reconciliation process
            </summary>
            <returns> true or false </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.Validations.YearlyTaxInstanceAnnualRecValidator.IsValidForAnnualRec">
            <summary>
            Returns true/false is model valid for annual reconciliation process
            </summary>
            <returns> true or false </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderType.Jurisdiction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderType.TransmissionId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderType.Timestamp">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderType.Transmitter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderType.ProcessType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderType.AgentIdentifier">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderType.ReportingAgentSignature">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderType.AckAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderType.recordCount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderTypeTransmitter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderTypeTransmitter.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachmentType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachmentType.Reference">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachmentType.DocumentType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachmentType.DocumentTypeSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachmentType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachmentType.AttachmentLocation">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachmentTypeDocumentType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachmentTypeDocumentType.PDF">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.SSN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.Employee">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.TotalWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.TotalWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.TaxableWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.TaxableWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.TaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.TaxWithheldSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.EmployeeContribution">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.EmployeeContributionSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.UITotalWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.UITotalWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.UITaxableWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.UITaxableWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.WeeksWorked">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.DateFirstEmployed">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.DateFirstEmployedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.DateOfSeparation">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.DateOfSeparationSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeStateRecordType.StateOfResidence">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.IndividualNameType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.IndividualNameType.FirstName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.IndividualNameType.MiddleInitial">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.IndividualNameType.LastName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.IndividualNameType.NameSuffix">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.IndividualNameType.NameSuffixSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType.JR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType.SR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType.I">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType.II">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType.III">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType.IV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType.V">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType.VI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType.VII">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType.VIII">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType.IX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.GenerationalNameSuffixType.X">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AnnualPayRollType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AnnualPayRollType.Employee">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AnnualPayRollType.EmployeeNameFormat">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TaxRemittedPeriodAmountType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TaxRemittedPeriodAmountType.TaxRemittedPeriodEnd">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TaxRemittedPeriodAmountType.TaxRemittedPaymentDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TaxRemittedPeriodAmountType.TaxRemittedTaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TaxRemittedPeriodAmountType.TaxRemittedTaxPaid">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CurrentYearCreditType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CurrentYearCreditType.CurrentCreditDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CurrentYearCreditType.CurrentYearWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CurrentYearCreditType.CurrentYearPaid">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PriorYearCreditType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PriorYearCreditType.PriorCreditYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PriorYearCreditType.PriorYearWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PriorYearCreditType.PriorYearPaid">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountCompositeType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountCompositeType.ReceivingDFIName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountCompositeType.RoutingNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountCompositeType.AccountNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountCompositeType.AccountType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountCompositeType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountCompositeType.ItemElementName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountType.Item1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountType.Item2">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CheckboxType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CheckboxType.X">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType5">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType5.IsIATTransaction">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType5.NotIATTransaction">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EnrollmentFinancialInformationType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EnrollmentFinancialInformationType.Items">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EnrollmentFinancialInformationType.ItemsElementName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemsChoiceType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemsChoiceType.BankAccount">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemsChoiceType.CreditRemittance">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemsChoiceType.DebitRemittance">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemsChoiceType.PrenoteBankAccountInd">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemsChoiceType.UseMasterAccount">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemsChoiceType.UseTaxpayerAccount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINType.TypeStateEIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINType.StateEINValue">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINType.StateEINExtension">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINTypeTypeStateEIN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINTypeTypeStateEIN.WithholdingAccountNo">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINTypeTypeStateEIN.UIAccountNo">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINTypeTypeStateEIN.StateControlNo">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINTypeTypeStateEIN.EFileAccountNo">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINTypeTypeStateEIN.EFTAccountNo">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINTypeTypeStateEIN.StateRegistrationNo">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINTypeTypeStateEIN.StateAccountID">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINTypeTypeStateEIN.CentralRegistrationNumber">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINTypeStateEINExtension">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateEINTypeStateEINExtension.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessAddressType.BusinessName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessAddressType.Address">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessAddressType.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessAddressType.ForeignPhoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessAddressType.TIN">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessNameType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessNameType.BusinessNameLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessNameType.BusinessNameLine2">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressType.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeForeignAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeForeignAddress.AddressLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeForeignAddress.AddressLine2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeForeignAddress.City">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeForeignAddress.ProvinceOrState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeForeignAddress.Country">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeForeignAddress.PostalCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeForeignAddress.InCareOfName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.XI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.XA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.XZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.FQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.XB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.IO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.VI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.UV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.KT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.IP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.VP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.IV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.HR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.EZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.DA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.DX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.DJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.DO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.DR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.EC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.EG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.ES">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.EK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.ER">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.EN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.ET">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.FK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.FO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.FM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.FJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.FI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.FR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.FP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.FS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.VC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.PU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.GY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.HA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.HM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.VT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.HO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.HK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.HQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.HU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.IC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.IN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.ID">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.IR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.IZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.EI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.IS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.IT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.JM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.JN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.JA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.DQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.JE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.JQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.JO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.KZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.KE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.KQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.KR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.KN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.KS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.KU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.KG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.LA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.LG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.LE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.LT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.LI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.LY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.LS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.LH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.LU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.ML">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.IM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.RM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.WA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.MU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.OC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.PK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.LQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.PS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.PM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.PP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.PF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.PA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.PE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.RP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.PC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.PL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.PO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.RQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.QA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.RO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.RS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.RW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.WS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.RI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.LO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.BP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.PG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.CE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.ST">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.VC1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.WZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.SY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.TV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.UG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.UP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.AE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.UK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.UY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.UZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.NH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.VE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.VM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.VQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.WQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.WF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.WI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.YM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.YI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.ZA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CountryType.ZI">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeUSAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeUSAddress.AddressLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeUSAddress.AddressLine2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeUSAddress.City">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeUSAddress.State">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeUSAddress.ZIPCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddressTypeUSAddress.InCareOfName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.AL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.AK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.AS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.AZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.AR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.CA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.CO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.MP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.CT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.DE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.DC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.FM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.FL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.GA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.GU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.HI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.ID">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.IL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.IN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.IA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.KS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.KY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.LA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.ME">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.MH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.MD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.MA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.MI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.MN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.MS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.MO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.MT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.NE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.NV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.NH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.NJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.NM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.NY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.NC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.ND">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.OH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.OK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.OR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.PW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.PA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.PR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.RI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.SC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.SD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.TN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.TX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.VI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.UT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.VT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.VA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.WA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.WV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.WI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.WY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.AA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.AE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateType.AP">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TINType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TINType.TypeTIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TINType.TINTypeValue">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TINTypeTypeTIN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TINTypeTypeTIN.FEIN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TINTypeTypeTIN.SSN">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.Employee">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.TotalWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.TotalWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.TaxableWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.TaxableWagesSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.TaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.TaxWithheldSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.EmployeeContribution">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.EmployeeContributionSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.TypeOfEmployment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.TaxState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.WagePlan">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeType.OutOfStateWages">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.Title">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.FirstName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.MiddleInitial">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.LastName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.Address">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.EmailAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.BusinessPhoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.HomePhoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.FaxNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.SSN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.DateSigned">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.DateSignedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.DateReviewed">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.DateReviewedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.AuthorizeDiscuss">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.AuthorizeDiscussSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.Signature">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.Notes">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.Age">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.DateOfDeath">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.DateOfDeathSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.DateOfBirth">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.DateOfBirthSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.DecedentIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.DecedentIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.NewNameAddressChkBox">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.NewNameAddressChkBoxSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.InCareOf">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.Occupation">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.StateIdNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.PriorYearAGI">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonType.PriorYearAGISpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeTypeOutOfStateWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeTypeOutOfStateWages.TotalWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeTypeOutOfStateWages.TaxableWages">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EmployeeTypeOutOfStateWages.TaxState">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PayRollType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PayRollType.Employee">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PayRollType.EmployeeNameFormat">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DayDecimalType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DayDecimalType.ActivityDay">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DayDecimalType.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.Month1Liabilities">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.Month1Deposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalMonth1Liability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalMonth1LiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalMonth1Deposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalMonth1DepositsSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.Month2Liabilities">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.Month2Deposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalMonth2Liability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalMonth2LiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalMonth2Deposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalMonth2DepositsSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.Month3Liabilities">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.Month3Deposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalMonth3Liability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalMonth3LiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalMonth3Deposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalMonth3DepositsSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalQuarterLiability">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalQuarterLiabilitySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalQuarterDeposits">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PaymentScheduleType.TotalQuarterDepositsSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.SignatureDocumentType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.SignatureDocumentType.referenceDocumentId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.SignatureDocumentType.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.SignatureDocumentEnumType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.SignatureDocumentEnumType.Retain">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.SignatureDocumentEnumType.Attach">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.SignatureDocumentEnumType.Mail">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATType.ForeignCurrency">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATType.PaymentDetail">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATType.ForeignDFI">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATType.Receiver">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrency">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrency.ForeignExchangeIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrency.ForeignExchangeIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrency.ForeignExchangeRefIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrency.ForeignExchangeRefIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrency.ForeignExchangeReference">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrency.OriginatingCurrencyCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrency.DestinationCurrencyCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrency.ForeignPaymentAmount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrencyForeignExchangeIndicator">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrencyForeignExchangeIndicator.FV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrencyForeignExchangeIndicator.VF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrencyForeignExchangeIndicator.FF">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrencyForeignExchangeRefIndicator">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrencyForeignExchangeRefIndicator.Item1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrencyForeignExchangeRefIndicator.Item2">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignCurrencyForeignExchangeRefIndicator.Item3">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypePaymentDetail">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypePaymentDetail.DestinationCountry">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.DZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.IO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.KH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.KY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.KM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.HR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.DK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.DJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.DM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.DO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.EC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.EG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.ER">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.EE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.ET">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.FK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.FO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.FJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.FI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.FR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.DE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.HT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.HM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.VA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.HN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.HK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.HU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.IS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.IN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.ID">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.IR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.IQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.IE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.IM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.IL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.IT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.JM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.JP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.JE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.JO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.KZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.KE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.KI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.KP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.KR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.KW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.KG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.LA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.LV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.LB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.LS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.LR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.LY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.LI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.LT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.LU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.ML">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MQ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.YT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MX">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.FM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.ME">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.NA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.NR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.NP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.NL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.NC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.NZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.NI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.NE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.NG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.NU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.NF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.NO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.OM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.QA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.RE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.RO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.RU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.RW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.BL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.KN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.LC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.MF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.PM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.VC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.WS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.ST">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.RS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.ZA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GS">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.ES">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.LK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SD">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.CH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.SY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TW">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TJ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TL">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TK">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TT">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.TV">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.UG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.UA">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.AE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.GB">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.US">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.UM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.UY">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.UZ">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.VU">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.VE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.VN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.VG">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.VI">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.WF">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.EH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.YE">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.ZM">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ISOCountryType.ZW">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignDFI">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignDFI.ForeignDFIName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignDFI.ForeignDFIIdentifier">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeForeignDFI.ForeignDFICountryCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeReceiver">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeReceiver.ReceiverName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeReceiver.ReceiverID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FullIATTypeReceiver.ReceiverAddress">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateDirectDepositType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateDirectDepositType.TelephoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateDirectDepositType.RoutingTransitNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateDirectDepositType.BankAccountNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateDirectDepositType.Amount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateDirectDepositType.AmountSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateDirectDepositType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateDirectDepositType.ItemElementName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType3">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType3.Checking">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType3.Savings">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHCreditDetailType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHCreditDetailType.PaymentAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHCreditDetailType.IdentificationNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHCreditDetailType.RequestedPaymentDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHCreditDetailType.RequestedPaymentDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHCreditDetailType.AddendaRecord">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddendaRecordType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddendaRecordType.TaxpayerIdentification">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddendaRecordType.TaxTypeCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddendaRecordType.TaxPeriodEndDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddendaRecordType.TaxPeriodEndDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddendaRecordType.TXPAmount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FTATaxTypeCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FTATaxTypeCode.FTACode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FTATaxTypeCode.StateTaxTypeCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddendaRecordTypeTXPAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddendaRecordTypeTXPAmount.SubAmountType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AddendaRecordTypeTXPAmount.SubAmount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType.ItemElementName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType.RoutingTransitNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType.BankAccountNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType.PaymentAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType.IdentificationNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType.AccountHolderType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType.AccountHolderTypeSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType.RequestedPaymentDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType.RequestedPaymentDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ACHEntityDetailType.AddendaRecord">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType2">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType2.Checking">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType2.Savings">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountHolderType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountHolderType.Item1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BankAccountHolderType.Item2">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.Title">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.PreparerName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.FirmName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.ContactName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.Address">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.EmailAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.FaxNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.EFIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.ETIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.PTIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.SSN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.FEIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.StateID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.IDNumberType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.DateSignedPrepared">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.DateSignedPreparedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.DateReviewed">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.DateReviewedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.AuthorizeDiscuss">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.AuthorizeDiscussSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.PreparerIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.PreparerIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.PreparerSelfEmployIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.PreparerSelfEmployIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.SignatureType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.Notes">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.PhoneType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.PhoneTypeSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PreparerType.PhoneExtension">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PhoneNumType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PhoneNumType.Home">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PhoneNumType.Work">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PhoneNumType.Cell">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PhoneNumType.Other">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonOrBusinessType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonOrBusinessType.TypeOfEntity">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonOrBusinessType.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Corporate">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Individualactive">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Individualpassive">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Partnership">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Exemptorg">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Nominee">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.LLP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.DomesticCorp">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.ForeignCorp">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Estate">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Trust">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.SMLLC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.SCorp">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.LLC">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Generalpartnership">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Limitedpartnership">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Other">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.DisregardedEntity">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Individual">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.Fiduciary">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ShareholderEntityType.PTE">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessType.Name">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessType.Address">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessType.FEIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessType.StateID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessType.DateBegin">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessType.DateBeginSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessType.DateEnd">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessType.DateEndSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BusinessType.PhoneNumber">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.InternetProtocolType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.InternetProtocolType.IPAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.InternetProtocolType.IPTimestamp">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EntityDetailType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EntityDetailType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EntityDetailType.ItemElementName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EntityDetailType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EntityDetailType.TransactionIdCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EntityDetailType.Amount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.EntityDetailType.AmountSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType1.Date">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType1.Year">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType1.YearMonth">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.DeveloperName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.DeveloperID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.TransmitterName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.TransmitterID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.ContactName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.Address">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.EmailAddress">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.FaxNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.EFIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.ETIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.FEIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.VersionID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.TestProductionIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.ProductType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.Date">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.DateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DeveloperTransmitterType.FreeFileCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DirectDepositType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DirectDepositType.DirectDepositAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DirectDepositType.RoutingTransitNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DirectDepositType.BankAccountNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.DirectDepositType.AccountType">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CharitableContributionType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CharitableContributionType.CharitableDonationAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CharitableContributionType.CharitableDonationAmountSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CharitableContributionType.CharityOrgCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.CharitableContributionType.CharityOrgName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AttachmentType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AttachmentType.Reference">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AttachmentType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AttachmentType.TypeAttachment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AttachmentType.TypeAttachmentSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AttachmentType.LinkToAttachment">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AttachmentTypeTypeAttachment">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AttachmentTypeTypeAttachment.ZIP">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.AttachmentTypeTypeAttachment.PDF">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.VehicleDescriptionType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.VehicleDescriptionType.VehicleYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.VehicleDescriptionType.VehicleMake">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.VehicleDescriptionType.VehicleModel">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.IPAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.IPAddressType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.IPAddressType.ItemElementName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType.IPv4Address">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType.IPv6Address">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonFullNameType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonFullNameType.PersonFirstName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PersonFullNameType.PersonLastName">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.NameAndAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.NameAndAddressType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.NameAndAddressType.Item1">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ForeignAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ForeignAddressType.AddressLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ForeignAddressType.AddressLine2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ForeignAddressType.City">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ForeignAddressType.ProvinceOrState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ForeignAddressType.Country">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ForeignAddressType.PostalCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.USAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.USAddressType.AddressLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.USAddressType.AddressLine2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.USAddressType.City">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.USAddressType.State">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.USAddressType.ZIPCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherForeignAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherForeignAddressType.AddressLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherForeignAddressType.AddressLine2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherForeignAddressType.City">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherForeignAddressType.ProvinceOrState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherForeignAddressType.Country">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherForeignAddressType.CountrySpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherForeignAddressType.PostalCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherUSAddressType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherUSAddressType.AddressLine1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherUSAddressType.AddressLine2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherUSAddressType.City">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherUSAddressType.State">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherUSAddressType.StateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OtherUSAddressType.ZIPCode">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ForeignItemizedEntryType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ForeignItemizedEntryType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ForeignItemizedEntryType.Amount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.USItemizedEntryType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.USItemizedEntryType.Description">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.USItemizedEntryType.Amount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderTypeProcessType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderTypeProcessType.T">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.TransmissionHeaderTypeProcessType.P">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.Jurisdiction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.Timestamp">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.TaxPeriodBeginDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.TaxPeriodBeginDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.TaxPeriodEndDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.TaxPeriodEndDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.TaxYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.DisasterRelief">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.ISPNumber">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.PaidPreparerInformation">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.Originator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.SoftwareId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.SoftwareVersion">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.InternetProtocol">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.SignatureOption">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.AmendedReturnIndicator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.AmendedReturnIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.OriginalSubmissionId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.OriginalSubmissionDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.OriginalSubmissionDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderType.binaryAttachmentCount">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.DateSigned">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.DateSignedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.SelfEmployed">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.SelfEmployedSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.ItemElementName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.Item1">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.PreparerBusinessName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.PreparerPersonName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.Item2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.Item3">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.Item3ElementName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformation.EmailAddress">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType4">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType4.PTIN">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ItemChoiceType4.SSN">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformationMissingEINReason">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformationMissingEINReason.APPLDFOR">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypePaidPreparerInformationMissingEINReason.FOREIGNUS">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.Item3ChoiceType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.Item3ChoiceType.ForeignPhone">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.Item3ChoiceType.Phone">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeOriginator">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeOriginator.EFIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeOriginator.OriginatorTypeCd">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeOriginator.PractitionerPIN">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OriginatorType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OriginatorType.ERO">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OriginatorType.OnlineFiler">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OriginatorType.ReportingAgent">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OriginatorType.IRSAgent">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OriginatorType.FinancialAgent">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.OriginatorType.LargeTaxpayer">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeOriginatorPractitionerPIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeOriginatorPractitionerPIN.EFIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeOriginatorPractitionerPIN.PIN">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeSignatureOption">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeSignatureOption.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeSignatureOptionSignaturePIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeSignatureOptionSignaturePIN.Signature">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeSignatureOptionSignaturePIN.PrimaryPINEnteredBy">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeSignatureOptionSignaturePIN.SecondaryPINEnteredBy">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnHeaderTypeSignatureOptionSignaturePIN.SecondaryPINEnteredBySpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PINCodeType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PINCodeType.Practitioner">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PINCodeType.SelfSelectPractitioner">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PINCodeType.SelfSelectOnLine">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PINEnteredByType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PINEnteredByType.Taxpayer">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.PINEnteredByType.ERO">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateType.Filer">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateType.Form">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateType.FilingAction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateType.FinalReturnElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateType.ThirdPartyAuthorization">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateType.AckAddress">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFiler">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFiler.TIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFiler.StateEIN">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFiler.Name">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFiler.InCareOfName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFiler.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFilingAction">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFilingAction.Action">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFilingAction.Reason">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFilingActionAction">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFilingActionAction.Original">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFilingActionAction.Amended">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFilingActionAction.Supplemental">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFinalReturnElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFinalReturnElect.DateFinalWagesPaid">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeFinalReturnElect.DateFinalWagesPaidSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeThirdPartyAuthorization">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeThirdPartyAuthorization.AuthorizeThirdPartyElect">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeThirdPartyAuthorization.DesigneeName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeThirdPartyAuthorization.DesigneePhone">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FSETReturnHeaderStateTypeThirdPartyAuthorization.DPIN">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.SubmitW2">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.Submit1099">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.Submit1099Specified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.NumberOfRecords">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.TotalWagesYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.TotalIncomeTaxWithheld">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.TotalCreditsYear">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.TotalCreditsYearSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.Item">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.LiabilityPeriodAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.AmountWithheld1stQuarter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.AmountWithheld1stQuarterSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.AmountWithheld2ndQuarter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.AmountWithheld2ndQuarterSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.AmountWithheld3rdQuarter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.AmountWithheld3rdQuarterSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.AmountWithheld4thQuarter">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualType.AmountWithheld4thQuarterSpecified">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeSubmitW2">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeSubmitW2.Item1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeSubmitW2.Item2">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeSubmitW2.Item3">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeSubmit1099">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeSubmit1099.Item1">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeSubmit1099.Item2">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeSubmit1099.Item3">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeNumberOfRecords">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeNumberOfRecords.RecordType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeNumberOfRecords.RecordTypeSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeNumberOfRecords.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeNumberOfRecordsRecordType">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeNumberOfRecordsRecordType.W2">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeNumberOfRecordsRecordType.Item1099">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeNumberOfRecordsRecordType.Other">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeNumberOfRecordsRecordType.Total">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeWHOverpayment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeWHOverpayment.AmountOfOverpayment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeWHOverpayment.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeLiabilityPeriodAmount">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeLiabilityPeriodAmount.Period">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.StateAnnualTypeLiabilityPeriodAmount.Value">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnDataState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnDataState.SubmissionId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnDataState.Item">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnDataStateRequestExtension">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnDataStateRequestExtension.TypeOfExtension">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnDataStateRequestExtension.ExtendedToDate">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnDataStateRequestExtension.ExtendedToDateSpecified">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnDataStateRequestExtension.ExtensionReason">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnDataStateRequestExtensionTypeOfExtension">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnDataStateRequestExtensionTypeOfExtension.StateWH">
            <remarks/>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnDataStateRequestExtensionTypeOfExtension.StateAnnual">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachment.documentId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachment.documentName">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachment.softwareId">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.BinaryAttachment.softwareVersion">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FinancialTransactionType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FinancialTransactionType.Items">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FinancialTransactionTypeRefundDirectDeposit">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FinancialTransactionTypeRefundDirectDeposit.Item1">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FinancialTransactionTypeStatePayment">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.FinancialTransactionTypeStatePayment.Item1">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnState">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnState.Items">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.ReturnState.stateSchemaVersion">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.Transmission">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.Transmission.TransmissionHeader">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.WISW.Transmission.ReturnState">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.YearEndStateLocalAgencyFileNames">
            <summary>
            Year End State and Local file names for an agency.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.YearEndStateLocalAgencyFileNames.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of YearEndStateLocalAgencyFileNames.
            </summary>
            <param name="details">The name of the file with the details.</param>
            <param name="exception">The name of the file with the details.</param>
            <param name="summary">The name of the file with the details.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.YearEndStateLocalAgencyFileNames.Details">
            <summary>
            Gets or sets the name of the file with the details.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.YearEndStateLocalAgencyFileNames.Exception">
            <summary>
            Gets or sets the name of the file with the exceptions.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.YearEndStateLocalAgencyFileNames.Summary">
            <summary>
            Gets or sets the name of the file with the summary.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecProcessor">
            <summary>
            Interface for annual rec
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecProcessor.GenerateAnnualRecAsync(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Text.StringBuilder,System.Collections.Generic.List{TaxHub.Models.Dto.YearEndGeneratedTaxFile},System.Threading.CancellationToken)">
            <summary>
            Generate Year End state and local files using PTM code.
            </summary>
            <param name="request">request</param>
            <param name="taxFileId">The id of the tax file</param>
            <param name="eventDataParams">event data params</param>
            <param name="messages">message</param>
            <param name="generatedTaxFiles">tax files generated</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>success</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.SummaryRow">
            <summary>
            summary row
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.SummaryRow.ClientId">
            <summary>
            Client Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.SummaryRow.AccountNo">
            <summary>
            Account number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.SummaryRow.EmpName">
            <summary>
            Employee Name
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.SummaryRow.Fein">
            <summary>
            FEIN
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.SummaryRow.EmployeeCount">
            <summary>
            Employee count
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.SummaryRow.Wages">
            <summary>
            Wages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.SummaryRow.TaxDeposit">
            <summary>
            TaxDeposit
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.SummaryRow.TaxDue">
            <summary>
            Taxdue
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.SummaryRow.TaxWithheld">
            <summary>
            tax withheld
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.EmployeeValidations.IYearEndGroupedAgencyAppliedForValidationService">
            <summary>
            AppliedFor validation rules for employees under agencies that group employees. 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.EmployeeValidations.IYearEndGroupedAgencyAppliedForValidationService.GetEmployeesForGroupedAgencyWithAppliedFor(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get a list of employees for those clients and agencies where the account number is "Applied"  and the agency accepts "Applied". 
            </summary>
            <param name="taxYear">The tax year.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of employees for those clients and agencies where the account number is "Applied"  and the agency accepts "Applied".</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.EmployeeValidations.YearEndEmployeeValidationService">
            <summary>
            Default implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.EmployeeValidations.IYearEndEmployeeValidationService"/> service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.EmployeeValidations.YearEndEmployeeValidationService.#ctor(TaxHub.CoreServices.Application.YearEnd.Process.EmployeeValidations.IYearEndGroupedAgencyAppliedForValidationService,TaxHub.CoreServices.DataAccess.IYearEndEmployeeValidationRepository)">
            <summary>
            Initializes an instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.EmployeeValidations.YearEndEmployeeValidationService"/>
            </summary>
            <param name="groupedAgencyAppliedForValidationService">The grouped agency applied for validation service</param>
            <param name="yearEndEmployeeValidationRepository">The repository.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.EmployeeValidations.YearEndEmployeeValidationService.GetAppliedForEmployees(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.EmployeeValidations.IYearEndEmployeeValidationService">
            <summary>
            Employee AppliedFor validation service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.EmployeeValidations.IYearEndEmployeeValidationService.GetAppliedForEmployees(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get a list of employees that match AppliedFor rule. 
            </summary>
            <param name="taxYear">The tax year.</param>
            <param name="correlationId">The correlation Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An enumerable set of employee models resulting of applying the validation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.IEmployeeGrouping.Group(System.Collections.Generic.IEnumerable{TaxHub.CoreServices.Application.YearEnd.Process.State.EmployeeProcessInfo})">
            <summary>
            Group employee records. 
            </summary>
            <param name="employees">Employees to groups</param>
            <returns>Enumerates the groups of employees</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.IEmployeeGrouping.WorkPsdCode(TaxHub.CoreServices.Application.YearEnd.Process.State.EmployeeProcessInfo)">
            <summary>
            Calculate the work PSD code for the grouping type
            </summary>
            <param name="employee">Employee</param>
            <returns>Work PSD Code</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.IEmployeeGrouping.ResidentPsdCode(TaxHub.CoreServices.Application.YearEnd.Process.State.EmployeeProcessInfo)">
            <summary>
            Calculate the resident PSD code for the grouping type
            </summary>
            <param name="employee">Employee</param>
            <returns>Resident PSD Code</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.IEmployeeGrouping.GetAppliedForEmployees(System.Collections.Generic.IEnumerable{TaxHub.CoreServices.Application.YearEnd.Process.State.EmployeeProcessInfo},TaxHub.CoreServices.Application.YearEnd.Process.State.StateProcessRequestContext,System.Threading.CancellationToken)">
            <summary>
            Get list of emnployee validation models for a client under an agency that applied for an account number.
            </summary>
            <param name="employees">List of client employees</param>
            <param name="context">Context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>List of validation models</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.EmployeeGrouping">
            <summary>
            This class implements the logic pf processing employees by groups, 
            depending on the year end agency's properties.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.EmployeeGrouping.Group(System.Collections.Generic.IEnumerable{TaxHub.CoreServices.Application.YearEnd.Process.State.EmployeeProcessInfo})">
            <summary>
            Group employee records. 
            </summary>
            <param name="employees">Employees to groups</param>
            <returns>Enumerates the groups of employees</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.EmployeeGrouping.WorkPsdCode(TaxHub.CoreServices.Application.YearEnd.Process.State.EmployeeProcessInfo)">
            <summary>
            Calculate the work PSD code for the grouping type
            </summary>
            <param name="employee">Employee</param>
            <returns>Work PSD Code</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.EmployeeGrouping.ResidentPsdCode(TaxHub.CoreServices.Application.YearEnd.Process.State.EmployeeProcessInfo)">
            <summary>
            Calculate the resident PSD code for the grouping type
            </summary>
            <param name="employee">Employee</param>
            <returns>Resident PSD Code</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.EmployeeGrouping.GetAppliedForEmployees(System.Collections.Generic.IEnumerable{TaxHub.CoreServices.Application.YearEnd.Process.State.EmployeeProcessInfo},TaxHub.CoreServices.Application.YearEnd.Process.State.StateProcessRequestContext,System.Threading.CancellationToken)">
            <summary>
            Get list of emnployee validation models for a client under an agency that applied for an account number.
            </summary>
            <param name="employees">List of client employees</param>
            <param name="context">Context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>List of validation models</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.EmployeeGroupingFactory">
            <summary>
            Factory fpr EmployeeGrouping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.EmployeeGroupingFactory.Create(TaxHub.CoreServices.Application.YearEnd.Process.State.StandardStateProcessBase,TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.IEmployeeProcessingService,TaxHub.CoreServices.Application.IAgencyService)">
            <summary>
            Creates an instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.EmployeeGrouping"/> class accoring to the processor.
            </summary>
            <param name="processor">State Processor</param>
            <param name="employeeProcessingService">Employee processing service</param>
            <param name="agencyService">Agency service.</param>
            <returns>An instance of the EmployeeGrouping.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.IEmployeeGroupingFactory">
            <summary>
            Factory fpr EmployeeGrouping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.IEmployeeGroupingFactory.Create(TaxHub.CoreServices.Application.YearEnd.Process.State.StandardStateProcessBase,TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.IEmployeeProcessingService,TaxHub.CoreServices.Application.IAgencyService)">
            <summary>
            Creates an instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.EmployeeGrouping"/> class accoring to the processor.
            </summary>
            <param name="processor">State Processor</param>
            <param name="employeeProcessingService">Employee processing service</param>
            <param name="agencyService">Agency service</param>
            <returns>An instance of the EmployeeGrouping.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.YearEndLocalClientAgencyDto">
            <summary>
            Light weigth model of the client agency to be used by Year End services.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.YearEndLocalClientAgencyDto.PayeeId">
            <summary>
            Gets or sets the PayeeId.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Groups.YearEndLocalClientAgencyDto.ClientTaxId">
            <summary>
            Gets or sets the Client Tax Id.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.CsvGeneration.IYearEndCsvGenerationService.GenerateCsvFile(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Bulk generate CSV file. 
            </summary>
            <param name="taxFileRequest">The request.</param>
            <param name="correlationId">The correlation Id.</param>
            <param name="eventDataParams">The event data parameteres.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the result code, the summary file, and the path of the generated file wrapped in csv generation result object.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.CsvGeneration.YearEndCsvGenerationService.GenerateCsvFile(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.CsvGeneration.YearEndCsvGenerationService.GenerateFileInfo(TaxHub.Models.YearEnd.YearEndTaxFileRequest,TaxHub.Common.Enums.YearEndTaxFileType,System.Guid)">
            <summary>
            This methods define the Generate FileInfo signature. Generates a file info.
            </summary>
            <param name="taxFileRequest">The tax file request</param>
            <param name="taxFileType">The tax file type</param>
            <param name="correlationId">The correlation id</param>
            <returns>Returns a file info</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.CsvGeneration.YearEndCsvGenerationService.LogCsvFailure(System.Guid,System.String,System.Object[])">
            <summary>
            Logs error when CSV failed to generate. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record failures.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.CsvGeneration.YearEndCsvGenerationService.LogCsvError(System.Guid,System.Exception,System.String,System.Object[])">
            <summary>
            Logs error when an exception occurs during CSV generation. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="exception">The exception that occured.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record failures.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.CsvGeneration.YearEndPaberkheimCsvGeneration.LoadAgencySpecificBusinessEmployeeValidations">
            <summary>
            PABERKHEIM Agency validations
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.CsvGeneration.YearEndPaberksCsvGeneration.LoadAgencySpecificBusinessEmployeeValidations">
            <summary>
            PABERKS Agency validations
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.CsvGeneration.YearEndPablairCsvGeneration.LoadAgencySpecificBusinessEmployeeValidations">
            <summary>
            PABLAIR Agency validations
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.CsvGeneration.YearEndStandardCsvGeneration.BusinessEmployeeValidations">
            <summary>
            Defines a list of validations that must be applied to each employee
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.CsvGeneration.YearEndStandardCsvGeneration.LoadAgencySpecificBusinessEmployeeValidations">
            <summary>
            Each inherited class (Agency Implementation) must load it's own validations, provides a default implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.CsvGeneration.YearEndStandardCsvGeneration.ApplyAgencySpecificValidations(TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext,TaxHub.Models.YearEnd.Csv.YearEndPostCsvEmployee,System.Func{TaxHub.Models.Events.TaxYearEndProcessInfoLogEvent,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Applies all agency specific validation 
            </summary>
            <param name="context">Year End CSV Process Request Context</param>
            <param name="employee">Year End Post CSV Employee</param>
            <param name="businessEventLogger">The business event logger</param>
            <returns>Result of all the validations applied</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.CsvFileGenerationResult">
            <summary>
            Metadata class that represents the result of CSV file generation at the employee, or file level
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.CsvFileGenerationResult.#ctor(TaxHub.Common.Runtime.ResultCode,System.String)">
            <summary>
            Creates a new instance of CsvFileGenerationResult using a message and result code
            </summary>
            <param name="resultCode">The result code.</param>
            <param name="message">The message accompanying the result.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.CsvFileGenerationResult.#ctor(TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployer,TaxHub.Common.Runtime.ResultCode,System.String)">
            <summary>
            Creates a new instance of CsvFileGenerationResult using a summary employer, message and result code
            </summary>
            <param name="summaryEmployer">The summary employer.</param>
            <param name="resultCode">The result code.</param>
            <param name="message">The message accompanying the result.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.CsvFileGenerationResult.#ctor(TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile,TaxHub.Common.Runtime.ResultCode,System.String)">
            <summary>
            Creates a new instance of CsvFileGenerationResult using a summary file, message and result code
            </summary>
            <param name="summaryFile">The summary file.</param>
            <param name="resultCode">The result code.</param>
            <param name="message">The message accompanying the result.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.CsvFileGenerationResult.OutputPath">
            <summary>
            The output path of the CSV file generated
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.CsvFileGenerationResult.SummaryFileEmployer">
            <summary>
            The summary file employer as a result of processing a client
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.CsvFileGenerationResult.SummaryFile">
            <summary>
            The summary file as a result of processing a request
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.IYearEndCsvProcessorService">
            <summary>
            Year End service to process ingested CSV files.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.IYearEndCsvProcessorService.GenerateCsvFile(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Bulk generate CSV file. 
            </summary>
            <param name="taxFileRequest">The request.</param>
            <param name="correlationId">The correlation Id.</param>
            <param name="eventDataParams">The event data parameteres.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the result code and the path of the generated file wrapped in an operation result.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.IYearEndFileWriter">
            <summary>
            Abstracts a CSV writer
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.IYearEndFileWriter.WriteLine(System.String[])">
            <summary>
            Writes an array of values conforming 
            a line to the output file.
            </summary>
            <param name="cells">The line values.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.IYearEndFileWriter.WriteLine(System.String)">
            <summary>
            Writes a line to the output file.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.IYearEndFileWriter.WriteToEnd(System.IO.TextReader)">
            <summary>
            Reads all the remaining lines from the reader 
            and writes them to the output file.
            </summary>
            <param name="reader">The reader to consume.</param>
            <returns>True when the last content written ended in new line system character.</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.IYearEndFileWriter.OutpufilePath">
            <summary>
            Gets the path of the file that was generated.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.IYearEndFileWriter.Encoding">
            <summary>
            Gets or sets the writer encoding.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.IYearEndFileWriter.Delimiter">
            <summary>
            Gets or sets the values delimiter. Used when customization to the 
            values are needed.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.IYearEndIngestedFilesStorageInfo">
            <summary>
            YE Ingested files object store informatino provider.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.IYearEndIngestedFilesStorageInfo.ObjectName(TaxHub.Models.YearEnd.YearEndIngestedFile)">
            <summary>
            The object name on the remote store.
            </summary>
            <param name="yeIngestedFile">YE Ingested File</param>
            <returns>The object's name</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.IYearEndIngestedFilesStorageInfo.ContainerName(TaxHub.Models.YearEnd.YearEndIngestedFile)">
            <summary>
            The name of the object's container on the rmeote store.
            </summary>
            <param name="yeIngestedFile">YE Ingested File</param>
            <returns>The container's name</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvFileWriter">
            <summary>
            Implements a CSV writer.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvFileWriter.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndLocalFileService,System.String)">
            <summary>
            Initializes the writer.
            </summary>
            <param name="yearEndLocalFileService">The yearEndLocalFileService.</param>
            <param name="extension">Output file extension. Defaulst to CSV. If null the extension is removed from the path.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvFileWriter.WriteLine(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvFileWriter.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvFileWriter.WriteToEnd(System.IO.TextReader)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvFileWriter.Dispose(System.Boolean)">
            <summary>
            Flush, closes and disposes the stream
            </summary>
            <param name="disposing">True when called from code to dispose managed resources.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessBase">
            <summary>
            CSV process base class
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessBase.BusinessEventLogger">
            <summary>
            Function used to raise a business class event that will be displayed in the site.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessBase.FileWriterFactory">
            <summary>
            Gets or sets the file writer factory.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessBase.Process(System.Linq.IOrderedEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext)">
            <summary>
            Process an ordered list of clients's CSV data 
            </summary>
            <param name="clientsFiles">The ordered list of (client, file) pairs</param>
            <param name="context">The request context.</param>
            <returns>A result code and the path of the bulk file.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessBase.CountyCode(System.String)">
            <summary>
            Transforms the PSD code into County Code. 
            </summary>
            <param name="psdCode">PSD Code</param>
            <returns>County Code</returns>
            <remarks>By default this base implementation defaults to E + psdCode since the 
            juridiction type of all the local payees for the main payees setup as CSV are EIT</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessFactory">
            <summary>
            A factory for CSV processors.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessFactory.Create(System.String,TaxHub.Hosting.Runtime.IDomainService,System.Func{TaxHub.Models.Events.TaxYearEndProcessInfoLogEvent,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Creates a CSV process class based on the agency.
            </summary>
            <param name="agency">The agency.</param>
            <param name="domainService">The domain service resolver.</param>
            <param name="businessEventLogger">The business event logger, if any. Optional.</param>
            <returns>The specific agency implementation of CSV Process.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext">
            <summary>
            Provides a context for the request when processing CSV files. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext.TaxYear">
            <summary>
            Gets or sets the tax year.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext.ClientId">
            <summary>
            gets or sets the ClientId.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext.LegalName">
            <summary>
            Gets or sets the legal name of the client being processed.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext.Fein">
            <summary>
            Gets or sets the federal id number for client.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext.PreparerName">
            <summary>
            Gets or sets the preparer name, typically UTE
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext.PayeeId">
            <summary>
            Gets or sets the PayeeId.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext.CorrelationId">
            <summary>
            Gets or sets the correlation Id. If not set it defaults to a new value.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext.Encoding">
            <summary>
            Gets or sets the encoding that will be used while reading/writing text data from/to CSV streams. Defaults to ASCII.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext.AccountColumnIndex">
            <summary>
            Gets or sets the index of the ACC column in the CSV file being prcessed. Defaults to -1.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext.WorkColumnIndex">
            <summary>
            Gets or sets the index of the WORK column in the CSV file being prcessed. Defaults to -1.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext.NumberOfColumns">
            <summary>
            Gets or sets the number of columns. Defaults to -1.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessRequestContext.EmployeeHashSet">
            <summary>
            A hashset with a unique hash per employee record
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessService.DownloadCSVFile(TaxHub.Models.YearEnd.YearEndIngestedFile,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Download the CSV file from object store to a local temp file and returns the file path.
            </summary>
            <param name="csvInfo">The csv info model.</param>
            <param name="correlationId">The correlation Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The downloaded file path.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessService.GenerateFile(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessService.GenerateFileInfo(TaxHub.Models.YearEnd.YearEndTaxFileRequest,TaxHub.Common.Enums.YearEndTaxFileType,System.Guid)">
            <summary>
            This methods define the Generate FileInfo signature. Generates a file info.
            </summary>
            <param name="taxFileRequest">The tax file request</param>
            <param name="taxFileType">The tax file type</param>
            <param name="correlationId">The correlation id</param>
            <returns>Returns a file info</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessService.LogCsvFailure(System.Guid,System.String,System.Object[])">
            <summary>
            Logs error when CSV failed to generate. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record failures.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndCsvProcessService.LogCsvSuccess(System.Guid,System.String,System.Object[])">
            <summary>
            Logs when CSV has successfully generated. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record success.</remarks>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndFileWriterBase.Null">
            <summary>
            Provides a IYearEndFileWriter with no backing store that can be written to, but not read from.
            </summary>
            <remarks>Use Null to redirect output to a stream that will not consume any operating system resources.</remarks>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndFileWriterBase.Delimiter">
            <summary>
            Gets or sets the cell values delimiter. Defaults to comma (,)
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndPaberkheimCsvProcess">
            <summary>
            Processor for PABERKHEIM file ingested. No posting required
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndPaberkheimCsvProcess.IsEmployerRecord(System.String)">
            <summary>
            Employer Records have 'E' on position 1, according to specs.
            </summary>
            <param name="line">The line</param>
            <returns>True if the line represents an employer record type.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndPaberksCsvProcess">
            <summary>
            Processor for PABERKS file ingested. No posting required
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndPaberksCsvProcess.IsEmployerRecord(System.String)">
            <summary>
            Employer Records have 'T' on position 70, according to specs. Employee records have a space character.
            </summary>
            <param name="line">The line</param>
            <returns>True if the line represents an employer record type.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndIngestedFilesStorageInfo">
            <summary>
            Default implementation.
            ContainerName and ObjectName should be provided by the Ingestion team and 
            should correspond to object store's container name and object name
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndPablaircolCsvProcess">
            <summary>
            CSV processor implementation for payee PABLAIRCOL
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndStandardCsvProcess">
            <summary>
            Standard processing of CSV files.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndXlsxFileWriter">
            <summary>
            Implements a XLSX writer using Open XML SDK.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndXlsxFileWriter.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndLocalFileService)">
            <summary>
            Initializes the writer.
            </summary>
            <param name="yearEndLocalFileService">The yearEndLocalFileService.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndXlsxFileWriter.WriteLine(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndXlsxFileWriter.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndXlsxFileWriter.WriteToEnd(System.IO.TextReader)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Csv.YearEndXlsxFileWriter.Dispose(System.Boolean)">
            <summary>
            Ends writing the spreadsheet, and clean resources
            </summary>
            <param name="disposing">True when called from code to dispose managed resources.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.IYearEndExceptionFileWriter">
            <summary>
            Abstract the generation of the tax file exceptions. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.IYearEndExceptionFileWriter.TaxFileName">
            <summary>
            The parent/associated TaxFileName.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.IYearEndExceptionFileWriter.Write(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndProcessInfo},System.Collections.Generic.IEnumerable{TaxHub.Models.ClientAgency},System.IO.TextWriter)">
            <summary>
            Writes a tax file summary content. 
            </summary>
            <param name="taxFileRequest">The taxFileRequest</param>
            <param name="processInfos">The processInfos</param>
            <param name="agencyInfos">The agencyInfos</param>
            <param name="writer">The content writer.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.IYearEndSummaryFileWriter">
            <summary>
            Abstract the generation of the tax file summary. 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.IYearEndSummaryFileWriter.Write(TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile,System.IO.TextWriter)">
            <summary>
            Writes a tax file summary content. 
            </summary>
            <param name="fileSummary">The file summary object.</param>
            <param name="writer">The content writer.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.IYearEndTransmittalFileWriterFactory">
            <summary>
            IYearEndTransmittalFileWriterFactory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.IYearEndTransmittalFileWriterFactory.CreateSummaryWriter(TaxHub.Common.Enums.AgencyLocalityType,System.Boolean)">
            <summary>
            CreateSummaryWriter
            </summary>
            <param name="agencyLocalityType">agencyLocalityType</param>
            <param name="isGrouped">isGrouped</param>
            <returns>IYearEndSummaryFileWriter</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.IYearEndTransmittalFileWriterFactory.CreateExceptionWriter(TaxHub.Common.Enums.AgencyLocalityType)">
            <summary>
            CreateExceptionWriter
            </summary>
            <param name="agencyLocalityType">agencyLocalityType</param>
            <returns>IYearEndExceptionFileWriter</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndExceptionFileWriter.TaxFileName">
            <summary>
            The parent/associated TaxFileName.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndExceptionFileWriter.Write(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndProcessInfo},System.Collections.Generic.IEnumerable{TaxHub.Models.ClientAgency},System.IO.TextWriter)">
            <summary>
            Write the ProcessInfo
            </summary>
            <param name="taxFileRequest">the taxFileRequest</param>
            <param name="processInfos">The processInfos</param>
            <param name="agencyInfos">The agencyInfos</param>
            <param name="writer">the writer</param>
            <returns>a task</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndFederalSummaryFileWriter">
            <summary>
            Writes the tax file summary for Federal agencies
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndFederalSummaryFileWriter.Write(TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile,System.IO.TextWriter)">
            <summary>
            Writes a tax file summary content. 
            </summary>
            <param name="fileSummary">The file summary object.</param>
            <param name="writer">The content writer.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndGroupedLocalSummaryFileWriter">
            <summary>
            Writes the tax file summary for local agencies that require special grouping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndGroupedLocalSummaryFileWriter.Write(TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile,System.IO.TextWriter)">
            <summary>
            Writes a tax file summary content. 
            </summary>
            <param name="fileSummary">The file summary object.</param>
            <param name="writer">The content writer.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndLocalSummaryFileWriter">
            <summary>
            Writes the tax file summary for local agencies that do not require special grouping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndLocalSummaryFileWriter.Write(TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile,System.IO.TextWriter)">
            <summary>
            Writes a tax file summary content. 
            </summary>
            <param name="fileSummary">The file summary object.</param>
            <param name="writer">The content writer.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndTransmittalFileWriterFactory">
            <summary>
            Factory class for instances of <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.IYearEndSummaryFileWriter"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndTransmittalFileWriterFactory.CreateSummaryWriter(TaxHub.Common.Enums.AgencyLocalityType,System.Boolean)">
            <summary>
            CreateSummaryWriter
            </summary>
            <param name="agencyLocalityType">agencyLocalityType</param>
            <param name="isGrouped">isGrouped</param>
            <returns>IYearEndSummaryFileWriter</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndTransmittalFileWriterFactory.CreateExceptionWriter(TaxHub.Common.Enums.AgencyLocalityType)">
            <summary>
            creates an instance of a Year End Exception File Writer
            </summary>
            <param name="agencyLocalityType">the agencyLocalityType</param>
            <returns>the exception writer</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndStateSummaryFileWriter">
            <summary>
            Writes the tax file summary for state agencies 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndStateSummaryFileWriter.Write(TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile,System.IO.TextWriter)">
            <summary>
            Writes a tax file summary content. 
            </summary>
            <param name="fileSummary">The file summary object.</param>
            <param name="writer">The content writer.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile">
            <summary>
            Summary for the file.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile.#ctor">
            <summary>
            Constructs an empty instance.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile.TrasmitterName">
            <summary>
            Gets or sets the name of the transmitter. (The Preparer's legal name)
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile.TaxYear">
            <summary>
            Gets or sets the tax year.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile.TaxFileName">
            <summary>
            Gets or sets the name of the main tax file.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile.FilePath">
            <summary>
            Gets or sets the path of the tax file.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile.PayeeId">
            <summary>
            Gets or sets the main Payee Id.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile.AddEmployerSummary(TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployer)">
            <summary>
            Adds an employer's summary record to the employer's list of groups. 
            </summary>
            <param name="employer">The employer's summary.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFile.Clients">
            <summary>
            Gets the list of employers
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.FederalWages">
            <summary>
            Gets or sets the federal wages amnunt.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.FederalTaxes">
            <summary>
            Gets or sets the federal taxes amnunt.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.SocialSecurityWages">
            <summary>
            Gets or sets the social security wages amnunt.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.SocialSecurityTaxes">
            <summary>
            Gets or sets the social security taxes amnunt.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.SocialSecurityTips">
            <summary>
            Gets or sets the total social security tips.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.MedicareWages">
            <summary>
            Gets or sets the medicare wages amnunt.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.MedicareTaxes">
            <summary>
            Gets or sets the medicare taxes amnunt.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.StateWages">
            <summary>
            Gets or sets the state wages amnunt.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.StateTaxes">
            <summary>
            Gets or sets the state taxes amnunt.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.LocalWages">
            <summary>
            Gets or sets the local wages amnunt.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.LocalTaxes">
            <summary>
            Gets or sets the local taxes amnunt.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.RSCount">
            <summary>
            Gets or sets the RS count.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.EmployeeCount">
            <summary>
            Gets or sets the Employee (distinct SSN) count.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileBase.RWCount">
            <summary>
            Gets or sets the RW count.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployeeGroup">
            <summary>
            Summary for a group of employees.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployeeGroup.#ctor">
            <summary>
            Constructs an empty instance.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployeeGroup.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance and initializes the account number, the PSD code and the payee Id 
            for the local payee where county code is the PSD code.
            </summary>
            <param name="accountNumber">The account number.</param>
            <param name="psd">The PSD code.</param>
            <param name="payeeId">The local payee Id for that PSD's county code.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployeeGroup.AccountNumber">
            <summary>
            Gets or sets the group's account number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployeeGroup.Psd">
            <summary>
            Gets or sets the group's PSD code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployeeGroup.PayeeId">
            <summary>
            Gets or sets the local payee id for the PSD's county code
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployer">
            <summary>
            Summary for an employer.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployer.#ctor">
            <summary>
            Constructs an empty instance.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployer.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance and initializes the client id, the legal name, and FEIN 
            for the employer summary.
            </summary>
            <param name="clientId">The employer client id.</param>
            <param name="legalName">The employer legal name.</param>
            <param name="fein">The employer FEIN.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployer.ClientId">
            <summary>
            Gets or sets the employer's client id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployer.LegalName">
            <summary>
            Gets or sets the employer's legal name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployer.Fein">
            <summary>
            Gets or sets the employer's FEIN.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployer.AddGroupSummary(TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployeeGroup)">
            <summary>
            Adds a group summary record to the employer's list of groups. 
            </summary>
            <param name="group">The group's summary.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployer.AddGroupSummaries(System.Collections.Generic.List{TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployeeGroup})">
            <summary>
            Adds a list of summary records to  the employer's list of groups
            </summary>
            <param name="newGroups">The group summaries.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.YearEndSummaryFileEmployer.Groups">
            <summary>
            Gets the list of groups
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndAnnualRecProcessService">
            <summary>
            handle annual rec generation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndAnnualRecProcessService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IClientAgencyService,TaxHub.CoreServices.Application.YearEnd.Process.AnnualRecs.IAnnualRecProcessor,TaxHub.CoreServices.DataAccess.IAnnualRecRepository)">
            <summary>
            Constructor for service
            </summary>
            <param name="appLogger">appLogger</param>
            <param name="clientAgencyService">clientAgencyService</param>
            <param name="annualRecProcessor">annualRecProcessor</param>
            <param name="annualRecRepository">annualRecRepository</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndAnnualRecProcessService.GenerateFile(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Generate annual rec files
            </summary>
            <param name="request">taxFileRequest</param>
            <param name="taxFileId">The tax file id</param>
            <param name="correlationId">correlationId</param>
            <param name="eventDataParams">eventDataParams</param>
            <param name="cancellation">cancellationToken</param>
            <returns>Generated files and result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndAnnualRecProcessService.GenerateFileInfo(TaxHub.Models.YearEnd.YearEndTaxFileRequest,TaxHub.Common.Enums.YearEndTaxFileType,System.Guid)">
            <summary>
            Get annual rec file info
            </summary>
            <param name="taxFileRequest">tax File Request</param>
            <param name="taxFileType">tax File Type</param>
            <param name="correlationId">correlationId</param>
            <returns>FileIndo</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndStateLocalProcessService">
            <summary>
            Process EFW2 for State and Local agencies.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndStateLocalProcessService.#ctor(TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Creates an instance of the service.
            </summary>
            <param name="domainService">The domain service resolver.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndStateLocalProcessService.GenerateFile(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This methods define the Generate File signature. Generates a tax file.
            </summary>
            <param name="request">A tax file request</param>
            <param name="taxFileId">The tax file id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>It returns an operation result and the year end file group</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndStateLocalProcessService.GenerateFileInfo(TaxHub.Models.YearEnd.YearEndTaxFileRequest,TaxHub.Common.Enums.YearEndTaxFileType,System.Guid)">
            <summary>
            This methods define the Generate FileInfo signature. Generates a file info.
            </summary>
            <param name="taxFileRequest">The tax file request</param>
            <param name="taxFileType">The tax file type</param>
            <param name="correlationId">The correlation id</param>
            <returns>Returns a file info</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndStateLocalProcessService.DefaultTaxFileName(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Nullable{System.DateTime})">
            <summary>
            Generates default value for a tax file.
            </summary>
            <param name="taxFileRequest">The tax file request</param>
            <param name="timeStamp">Optional timestamp.</param>
            <returns>A name for the main tax file.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndStateLocalProcessService.ProcessClient(TaxHub.CoreServices.Application.YearEnd.Process.State.StateProcessRequestContext,TaxHub.CoreServices.Application.YearEnd.Process.State.StandardStateProcessBase,TaxHub.Models.Preparer,System.Threading.CancellationToken)">
            <summary>
            Populates client data for state and local EFW2
            </summary>
            <param name="context">The process context</param>
            <param name="processor">The state processor</param>
            <param name="preparer">The preparer.</param>
            <param name="cancellation">The cancellation token.</param>
            <returns>An instance of <see cref="T:TaxHub.Common.Runtime.OperationResult"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndStateLocalProcessService.LogEfw2Failure(System.Guid,System.String,System.Object[])">
            <summary>
            Logs error when the files failed to generate. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record failures.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndStateLocalProcessService.LogEfw2Error(System.Guid,System.Exception,System.String,System.Object[])">
            <summary>
            Logs error when an exception occurs during the file generation. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="exception">The exception that occured.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record failures.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndStateLocalProcessService.LogEfw2Success(System.Guid,System.String,System.Object[])">
            <summary>
            Logs when files have successfully generated. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record success.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.YearEndStateLocalProcessService.GenerateTotals(System.String,System.Int32,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            This methods runs file generation logic just to count client employees and aggregate taxes and wages.
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="yeAgency">The YE agency</param>
            <param name="correlationId">The correlation Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>It returns the totals</returns>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.State.MDSWStateProcess.UserIdentificationNumber">
            <summary>
            User Identification Number. Used to generate RA. PTM knows it as Code. 
            This should ideally come from the agency setup and should be 
            populated during the creation, by passing the db context factory
            to the constructor as some other state processor classes are today.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.PASWStateProcess.CountyCode(System.String)">
            <summary>
            Transform the PSD code into County Code. 
            </summary>
            <param name="psdCode">PSD Code</param>
            <returns>County Code</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.StandardStateProcessBase.CountyCode(System.String)">
            <summary>
            Transform the PSD code into County Code. 
            </summary>
            <param name="psdCode">PSD Code</param>
            <returns>County Code</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.StandardStateProcessBase.CheckAndAdjustForeignAddressesForRW(System.String)">
            <summary>
            Adjusts the foreign state address for RW records
            </summary>
            <param name="recordContent">The record content.</param>
            <returns>The modified record content.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.StandardStateProcessBase.CheckAndAdjustForeignAddressesForRW(System.Text.StringBuilder)">
            <summary>
            Adjusts the foreign state address for RW records
            </summary>
            <param name="stringBuilder">The string builder for the record content.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.StandardStateProcessBase.CheckAndAdjustForeignAddressesForRS(System.String)">
            <summary>
            Adjusts the foreign state address for RS records
            </summary>
            <param name="recordContent">The record content.</param>
            <returns>The modified record content.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.State.StandardStateProcessBase.CheckAndAdjustForeignAddressesForRS(System.Text.StringBuilder)">
            <summary>
            Adjusts the foreign state address for RS records
            </summary>
            <param name="stringBuilder">The string builder for the record content.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.StateProcessRequestContext.TaxFileRequestId">
            <summary>
            Gets or sets the current tax file request id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.StateProcessRequestContext.PreparerId">
            <summary>
            Gets or sets the current preparer id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.StateProcessRequestContext.CurrentClientIndex">
            <summary>
            Gets or sets the index of the client being processed. Used to log the progress of the file generation.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.StateProcessRequestContext.ClientsTotal">
            <summary>
            Gets or sets the total num,number of clients being processed. Used to log the progress of the file generation.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.StateProcessRequestContext.DryRun">
            <summary>
            Gets or sets a flag to indicate if the process executing is only running totals and not genearting files. 
            True indicates the process is only generating totals. False indicates the process is generating the file. 
            Default is false.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.StateProcessRequestContext.EmployeeHashSet">
            <summary>
            A hashset with a unique hash per RS employee record
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.State.StateProcessRequestContext.AgencyLocalityType">
            <summary>
            Gets or sets the agency locality type
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.Process.State.VTSWStateProcess.UserIdentificationNumber">
            <summary>
            User Identification Number. Field used in the RA. PTM knows it as Code. 
            This should ideally come from the agency setup and should be 
            populated during the creation, by passing the db context factory
            to the constructor as some other state processor classes are today.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.CacheYearEndClientAgencyService">
            <inheritdoc />
            <summary>
            Decorator class. Cache Year End Agency entities.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.CacheYearEndClientAgencyService.#ctor(TaxHub.CoreServices.Application.YearEnd.Process.IYearEndClientAgencyService,TaxHub.CoreServices.Application.YearEnd.Process.IYearEndLocalPayeeCache,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Creates an instance of the type <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.CacheYearEndClientAgencyService" />.
            </summary>
            <param name="inner">Inner decorated instance.</param>
            <param name="cacheService">The cache instance.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService,TaxHub.CoreServices.Application.YearEnd.IYearEndPostRWService,TaxHub.CoreServices.Application.YearEnd.IYearEndPostROService,TaxHub.CoreServices.Application.YearEnd.Process.IYearEndPreparerService,TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Application.YearEnd.IYearEndLocalFileService,TaxHub.CoreServices.Application.YearEnd.Process.IYearEndFileGenerationProgressService,TaxHub.CoreServices.Application.YearEnd.IYearEndProcessInfoService,TaxHub.CoreServices.Application.YearEnd.Process.IYearEndClientAgencyService,TaxHub.CoreServices.Application.YearEnd.Process.State.Transmittal.IYearEndTransmittalFileWriterFactory)">
            <summary>
            The service constructor
            </summary>
            <param name="postReService">The Post RE Service</param>
            <param name="postRwService">The Post RW Service</param>
            <param name="postRoService">The Post RO service</param>
            <param name="preparerService">The preparer service</param>
            <param name="logger">The app logger</param>
            <param name="messageHub">The publishing message hub</param>
            <param name="localFileService">the localFileService</param>
            <param name="yearEndFileGenerationProgressService">The IYearEndFileGenerationProgressService</param>
            <param name="yearEndProcessInfoService">The IYearEndProcessInfoService</param>
            <param name="yearEndClientAgencyService">The yearEndclientAgencyService</param>
            <param name="yearEndTransmittalFileWriterFactory">The yearEndTransmittalFileWriterFactory</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.GenerateEfw2File(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.ProcessClient(System.Guid,TaxHub.Shared.Services.EventDataParams,TaxHub.Models.YearEnd.YearEndPostREInfo,System.IO.StreamWriter,TaxHub.Models.Preparer,System.String,TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Populates client data for the federal EFW2.
            </summary>
            <param name="correlationId">The correlationId.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="postReDetail">The post RE details.</param>
            <param name="stream">The stream.</param>
            <param name="preparer">The preparer.</param>
            <param name="efw2FileName">The filename</param>
            <param name="yeTaxFileRequest">The YE tax file request.</param>
            <param name="fileRwCount">The rw count for the file.</param>
            <param name="currentReIndex">Index of current RE record being prcessed. Used to show progress of generation.</param>
            <param name="totalReCount">Total count of RE records being prcessed. Used to show progress of generation.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.ProcessSsaClientResult"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.LogEfw2Failure(System.Guid,System.String,System.Object[])">
            <summary>
            Logs error when SSA failed to generate.
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record failures.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.LogEfw2Error(System.Guid,System.Exception,System.String,System.Object[])">
            <summary>
            Logs error when an exception occurs during SSA generation.
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="exception">The exception that occured.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record failures.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.LogEfw2Success(System.Guid,System.String,System.Object[])">
            <summary>
            Logs when SSA has successfully generated.
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="props">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record success.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.PopulateRoTotals(TaxHub.CoreServices.Application.YearEnd.ROProcessTotals,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.PopulateEerTotals(TaxHub.CoreServices.Application.YearEnd.RTProcessTotals,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.GenerateRfLineBuffer(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.GenerateRuLineBuffer(System.Int32,TaxHub.CoreServices.Application.YearEnd.ROProcessTotals)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.GenerateRtLineBuffer(System.Int32,TaxHub.CoreServices.Application.YearEnd.RTProcessTotals)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.GenerateRoLineBuffer(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.GenerateReLineBuffer(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.GenerateRaLineBuffer(TaxHub.Models.Preparer)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.GenerateRwLineBuffer(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.CheckAndAdjustForeignAddresses(System.Text.StringBuilder,System.String)">
            <summary>
            Check And Adjust Foreign Addresses
            </summary>
            <param name="stringBuilder">the stringBuilder</param>
            <param name="recordContent">the recordContent</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.GenerateFile(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.GenerateFileInfo(TaxHub.Models.YearEnd.YearEndTaxFileRequest,TaxHub.Common.Enums.YearEndTaxFileType,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.DefaultTaxFileName(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Nullable{System.DateTime})">
            <summary>
            Generates default value for a tax file.
            </summary>
            <param name="taxFileRequest">The tax file request</param>
            <param name="timeStamp">Optional timestamp.</param>
            <returns>A name for the main tax file.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.ProcessSsaClientResult">
            <summary>
            Contains the rw count, file rw count, and ro count for each client in the SSA
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.ProcessSsaClientResult.RwCount">
            <summary>
            The number of Rw lines for the client
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.ProcessSsaClientResult.FileRwCount">
            <summary>
            The number of Rw lines for the SSA file
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.ProcessSsaClientResult.RoCount">
            <summary>
            The number of Ro lines for the client
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.ProcessSsaClientResult.EmployerSummary">
            <summary>
            Gets or sets a summary with the totals for the processed employer.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.ProcessSsaClientResult.OperationResult">
            <summary>
            The operation result of the process
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.ProcessClientRequest">
            <summary>
            Request to process a single client.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.ProcessClientRequest.DryRun">
            <summary>
            Gets or sets a flag to indicate if the process executing is only running totals and not genearting files.
            True indicates the process is only generating totals. False indicates the process is generating the file.
            Default is false.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.Federal.Efw2FederalProcessService.ProcessClientRequest.EmployeeHashSet">
            <summary>
            A hashset with a unique hash per RW employee record
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.IEfw2FederalProcessService.GenerateEfw2File(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Generates an EFW2 file
            </summary>
            <param name="taxFileRequest">The tax file request</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellatin token</param>
            <returns>An OperationResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.IEfw2FederalProcessService.PopulateRoTotals(TaxHub.CoreServices.Application.YearEnd.ROProcessTotals,System.String)">
            <summary>
            Populates the RO total class
            </summary>
            <param name="roProcessTotals">The Process Totals</param>
            <param name="recordContent">The record content</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.IEfw2FederalProcessService.PopulateEerTotals(TaxHub.CoreServices.Application.YearEnd.RTProcessTotals,System.String)">
            <summary>
            Populates the Employee ER Record totals
            </summary>
            <param name="rtProcessTotals">The RT process totals</param>
            <param name="recordContent">The record</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.IEfw2FederalProcessService.GenerateRfLineBuffer(System.Int32)">
            <summary>
            Generates the RF Line Buffer
            </summary>
            <param name="fileRwCount">The fiel RW Count</param>
            <returns>The output string</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.IEfw2FederalProcessService.GenerateRuLineBuffer(System.Int32,TaxHub.CoreServices.Application.YearEnd.ROProcessTotals)">
            <summary>
            Generates an RU Line
            </summary>
            <param name="roCount">The RO count</param>
            <param name="roProcessTotals">The RO Process Totals</param>
            <returns>The RU output line</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.IEfw2FederalProcessService.GenerateRtLineBuffer(System.Int32,TaxHub.CoreServices.Application.YearEnd.RTProcessTotals)">
            <summary>
            Generates the RT Line
            </summary>
            <param name="rwCount">The RW count</param>
            <param name="rtProcessTotals">The RT Process totals</param>
            <returns>The generated RT Line</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.IEfw2FederalProcessService.GenerateRoLineBuffer(System.String,System.Boolean)">
            <summary>
            Generates the RO Line Item buffer
            </summary>
            <param name="recordContent">The Record Content</param>
            <param name="bypassRoTransformation">Bypass the RO transfornmation process</param>
            <returns>The RO Line buffer</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.IEfw2FederalProcessService.GenerateReLineBuffer(System.String)">
            <summary>
            Generates the RE Line
            </summary>
            <param name="recordContent">The Record Content</param>
            <returns>The RE Line Buffer</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.IEfw2FederalProcessService.GenerateRaLineBuffer(TaxHub.Models.Preparer)">
            <summary>
            Generates the RA Line
            </summary>
            <param name="preparer">The preparer</param>
            <returns>The generated RA line</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.Federal.IEfw2FederalProcessService.GenerateRwLineBuffer(System.String,System.Boolean)">
            <summary>
            Generartes the RW Recored
            </summary>
            <param name="recordContent">The record content</param>
            <param name="bypassRwTransformation">Bypass RW Transformation flag</param>
            <returns>The Generated RW Record</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndFileGenerationProgressService.Intervals">
            <summary>
            Number of times the progress will be recorded.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndFileGenerationProgressService.RecordProgress(TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressRequest,System.Guid)">
            <summary>
            Record file generation progress.
            </summary>
            <param name="request">The year edn file generation progress request.</param>
            <param name="correlationId">The correlation id.</param>
            <returns>A task.</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressRequest.CurrentEmployeeIndex">
            <summary>
            Gets or sets the current employee record index.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressRequest.TotalEmployeeCount">
            <summary>
            Gets or sets the total of RWs to be processed.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressRequest.CurrentClientIndex">
            <summary>
            Gets or sets the index of current client record being prcessed.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressRequest.TotalClientCount">
            <summary>
            Gets or sets the total count of client records being prcessed.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressRequest.ClientId">
            <summary>
            Gets or sets the client id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressRequest.TaxYear">
            <summary>
            Gets or sets the tax year.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressRequest.YeAgency">
            <summary>
            Gets or sets the YE agency.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressRequest.TaxFileRequestId">
            <summary>
            Gets or sets the tax file request id.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndLocalPayeeCache">
            <summary>
            Preparer cache
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.YearEndEndLocalPayeeCache">
            <inheritdoc cref="T:SmartHub.Hosting.Caching.CacheUtilizerServiceBase" />
            <inheritdoc cref="T:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndLocalPayeeCache" />
            <summary>
            Implements a cache for Preparer service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.YearEndEndLocalPayeeCache.#ctor(SmartHub.Hosting.Caching.IObjectCacheManager,System.Func{TaxHub.CoreServices.Application.YearEnd.Process.YearEndEndLocalPayeesCacheOptions})">
            <summary>
            Creates an instance of YearEndClientAgencyCache
            </summary>
            <param name="cacheManager">The cache manager.</param>
            <param name="optionsFactory">Configuration settings.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressService.Intervals">
            <summary>
            Number of times the progress will be recorded.
            Defauls to 4. (every 25%)
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressService.MaxReportingThreshold">
            <summary>
            Maximum number of items to wait before reporting anything.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressService.RecordProgress(TaxHub.CoreServices.Application.YearEnd.Process.YearEndFileGenerationProgressRequest,System.Guid)">
            <summary>
            Record file generation progress.
            </summary>
            <param name="request">The year edn file generation progress request.</param>
            <param name="correlationId">The correlation id.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndClientAgencyService">
            <summary>
            Year end service to resolve data from client, agency, filing collector groups, and client agency
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndClientAgencyService.FindValidClientAgenciesByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds active client agencies where client tax id is not "Applied".  
            </summary>
            <param name="clientId">The client id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of client agencies.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndClientAgencyService.FindActiveLocalPayeesByMainPayee(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds a collection of active local payees under a main payeeId. 
            </summary>
            <param name="mainPayeeId">The main payee's payeeId.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An enumerable set of local payees payeeIds with the county code.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndClientAgencyService.FilterClientAgencyByCountyCode(System.Collections.Generic.IEnumerable{TaxHub.CoreServices.Application.YearEnd.Process.YearEndLocalPayeeDto},System.Collections.Generic.IEnumerable{TaxHub.Models.ClientAgency},System.String)">
            <summary>
            Joins a list of local payees and client agencies by payeeId, filters by county code and returns the first matching agency or default.
            </summary>
            <param name="localPayees">An enumerable set of local payees</param>
            <param name="clientAgencies">An enumerable set of client agencies</param>
            <param name="countyCode">The payee county code.</param>
            <returns>First or default matching client agency.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndClientAgencyService.LookupByClientIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get client agency by client agency id
            </summary>
            <param name="payeeId">ClientAgency Id</param>
            <param name="clientId">ClientAgency Id</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Import Client Object if one Exist</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.YearEndLocalPayeeDto">
            <summary>
            Light weigth model of the agencyto be used by Year End services.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndLocalPayeeDto.PayeeId">
            <summary>
            Gets or sets the PayeeId.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndLocalPayeeDto.CountyCode">
            <summary>
            Gets or sets the county code.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.YearEndClientAgencyService">
            <summary>
            Default implementation of <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndClientAgencyService"/> using existing services.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.YearEndEndLocalPayeesCacheOptions">
            <summary>
            Configuration options for YearEndClientAgencyCacheService
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndEndLocalPayeesCacheOptions.CacheDurationSeconds">
            <summary>
            Gets or sets the global cache timeout in seconds.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.CacheYearEndPreparerService">
            <inheritdoc />
            <summary>
            Decorator class. Cache Year End Preparer service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.CacheYearEndPreparerService.#ctor(TaxHub.CoreServices.Application.IPreparerService,TaxHub.CoreServices.Application.YearEnd.Process.IYearEndPreparerCache,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Creates an instance of the type CachePreparerService.
            </summary>
            <param name="inner">Inner decorated instance.</param>
            <param name="cacheService">The cache instance.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndPreparerCache">
            <summary>
            Preparer cache
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndPreparerService">
            <summary>
            Marker to have a cache preparer service registered only for YE processing. 
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.YearEndPreparerCache">
            <inheritdoc cref="T:SmartHub.Hosting.Caching.CacheUtilizerServiceBase" />
            <inheritdoc cref="T:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndPreparerCache" />
            <summary>
            Implements a cache for Preparer service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.YearEndPreparerCache.#ctor(SmartHub.Hosting.Caching.IObjectCacheManager,System.Func{TaxHub.CoreServices.Application.YearEnd.Process.YearEndPreparerCacheOptions})">
            <summary>
            Creates an instance of LegacyPtsOptionCache
            </summary>
            <param name="cacheManager">The cache manager.</param>
            <param name="optionsFactory">Configuration settings.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.YearEndPreparerCacheOptions">
            <summary>
            Configuration options for YearEndPreparerCacheService
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Process.YearEndPreparerCacheOptions.CacheDurationSeconds">
            <summary>
            Gets or sets the global cache timeout in seconds.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGenerator">
            <summary>
            The tax file generator interface, it defines
            the way the tax file should be generated
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGenerator.GenerateFile(TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This methods define the Generate File signature. Generates a tax file.
            </summary>
            <param name="taxFileRequest">A tax file request</param>
            <param name="taxFileId">The tax file id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>It returns an operation result and the year end file group</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGenerator.GenerateFileInfo(TaxHub.Models.YearEnd.YearEndTaxFileRequest,TaxHub.Common.Enums.YearEndTaxFileType,System.Guid)">
            <summary>
            This methods define the Generate FileInfo signature. Generates a file info.
            </summary>
            <param name="taxFileRequest">The tax file request</param>
            <param name="taxFileType">The tax file ty,rspe</param>
            <param name="correlationId">The correlation id</param>
            <returns>Returns a file info</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGenerator.GenerateTotals(System.String,System.Int32,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            This methods runs file generation logic just to count client employees and aggregate taxes and wages.
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The Tax Year</param>
            <param name="yeAgency">The YE Agency</param>
            <param name="correlationId">The correlation Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>It returns the totals</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGeneratorFactoryService">
            <summary>
            Defines the Tax File Generator Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGeneratorFactoryService.CreateGenerator(System.String,TaxHub.Common.Enums.YearEndAgencyFileType)">
            <summary>
            Returns an implementation of a FileGenerator based on the agencyid
            and the tax file type
            </summary>
            <param name="agencyId">The agency id</param>
            <param name="taxFileType">The tax file type</param>
            <returns>A IFileGenerator concrete class</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Process.TaxFileGeneratorFactoryService">
            <summary>
            The concrete implementation of the FileGeneratorFactory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.TaxFileGeneratorFactoryService.#ctor(TaxHub.Hosting.Runtime.IDomainService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            The constructor
            </summary>
            <param name="domainService">The domain service</param>
            <param name="appLogger">The app logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Process.TaxFileGeneratorFactoryService.CreateGenerator(System.String,TaxHub.Common.Enums.YearEndAgencyFileType)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAutoPostService.FindEntryByClientTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/> by clientId and tax year
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAutoPostService.SuspendAutoPostUpdate(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the SuspendedAutoPost column value for a specific tax year
            </summary>
            <param name="taxYear">The tax year</param>
            <param name="suspendAutoPost">The value to set, true auto post is on false is not</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>True if operation succeeded, False if failed</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAutoPostService.AutoPostEnabledUpdate(System.String,System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Sets the AutoPostEnabled value for a particular client and a tax year
            </summary>
            <param name="clientId">The clientId</param>
            <param name="taxYear">The tax year</param>
            <param name="autoPostEnabled">The value to set. True auto post is On for the client the specific tax year, False the opposite</param>
            <param name="eventDataParams">The event params</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>True if operation succeeded, False if failed</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAutoPostService.IsAutoPostSuspended(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if the Auto post is Globaly enabled for a specific tax year
            </summary>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>True if operation succeeded, False if failed</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAutoPostService.BatchCreate(System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Bulk create a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/> items.
            </summary>
            <param name="taxYear">The tax year.</param>
            <param name="autoPostEnabled">AutoPost enabled flag.</param>
            <param name="eventDataParams">Metadata parameters needed for the operation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAutoPostService.AutoPostEnabledBatchUpdate(System.Collections.Generic.ICollection{System.String},System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Sets the AutoPostEnabled value for a collection of clients and a tax year
            </summary>
            <param name="clientIds">The clientIds</param>
            <param name="taxYear">The tax year</param>
            <param name="autoPostEnabled">The value to set. True auto post is On for the client the specific tax year, False the opposite</param>
            <param name="eventDataParams">The event params</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAutoPostService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndAutoPostRepository,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService,TaxHub.CoreServices.Application.IClientParentChildService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndAutoPostService" /> class.
            </summary>
            <param name="logger">The application logger</param>
            <param name="messageHub">The message hub</param>
            <param name="yearEndAutoPostRepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndAutoPostRepository" /></param>
            <param name="yearEndTaxProcessingService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService"/></param>
            <param name="clientParentChildService">The client parent child service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAutoPostService.FindEntryByClientTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAutoPostService.SuspendAutoPostUpdate(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAutoPostService.AutoPostEnabledUpdate(System.String,System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAutoPostService.IsAutoPostSuspended(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAutoPostService.BatchCreate(System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAutoPostService.AutoPostEnabledBatchUpdate(System.Collections.Generic.ICollection{System.String},System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAutoPostService.UpdatePublishMessages(TaxHub.Shared.Services.EventDataParams,System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData},TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Update publish messages. in batches
            </summary>
            <param name="eventDataParams">Event data parameters</param>
            <param name="events">List of events</param>
            <param name="logger">The application logger.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileProcessingService">
            <summary>
            File Processing operations
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileProcessingService.CreateYeEndAgencyTotals(TaxHub.Models.YearEnd.Commands.CreateYeAgencyTotalsCommand,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Create YE Agency Totals
            </summary>
            <param name="command">The request command</param>
            <param name="correlationId">The correlation id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileProcessingService">
            <summary>
            Default implementation of File Processing operations
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileProcessingService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGeneratorFactoryService,TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService)">
            <summary>
            The constructor of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileProcessingService" /> instance
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="taxFileFactoryService">The tax file generator factory service</param>
            <param name="yearEndAgencyService">The YE Agency Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileProcessingService.CreateYeEndAgencyTotals(TaxHub.Models.YearEnd.Commands.CreateYeAgencyTotalsCommand,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Create YE Agency Totals
            </summary>
            <param name="command">The request command</param>
            <param name="correlationId">The correlation id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndBulkService">
            <summary>
            The year end bulk service interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndBulkService.BulkInsert(System.Collections.Generic.IReadOnlyCollection{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YeRecordGroup},TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Bulk inserts the year end record groups.
            </summary>
            <param name="yeRecordGroups">The year end record groups.</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndCsvClientService">
            <summary>
            Interface for the YearEndCsvClientService class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndCsvClientService.FindAllForClientTaxYearAndFileName(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds YearEndCsvClient records for the given fileName, client identifier and tax year.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="fileName">The file name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Collection of matching YearEndCsvClient records.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndCsvClientService.ResolveYearEndCsvClients(System.String,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Finds or creates YearEndCsvClient records for the given file, client identifier, tax year and year end agencies.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="distinctPayeeIds">The distinct payee ids.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Collection of ResolveYearEndCsvClientsResult.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndCsvClientService.InvalidateRecords(System.String,System.Int32,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Marks all YearEndCsvClient records as invalid for the given client identifier, tax year and file name.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="fileName">The name of the file.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success, otherwise False.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndCsvEmployeeService">
            <summary>
            Interface for YearEndCsvEmployeeService.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndCsvEmployeeService.BulkCreate(System.Collections.Generic.List{TaxHub.Models.YearEnd.Csv.YearEndCsvEmployee},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the given year end CSV employees in bulk.
            </summary>
            <param name="yearEndCsvEmployees">The year end CSV employees.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A CreateAggregateResult indicating the result of the operation.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndMultiClientService">
            <summary>
            The Year End Common Pay and Multi FEIN service. Helps make decisions dependent on a type of posting 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndMultiClientService.ShouldProcessEmployees(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines if client should run process employees
            </summary>
            <param name="command">The year end command.</param>
            <param name="clientInfo">The client info.</param>
            <param name="yeAgency">The year end agency.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if employee should be processed, false otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndMultiClientService.UpdateClientIndicators(System.Text.StringBuilder,TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Updates the record content client indicator or fein depending on posting type
            </summary>
            <param name="content">The record content.</param>
            <param name="command">The post command.</param>
            <param name="clientInfo">The client info.</param>
            <param name="yeAgency">The year end agency.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndMultiClientService.ShouldProcessChildCompanies(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines if client should run process employees
            </summary>
            <param name="command">The year end command.</param>
            <param name="clientInfo">The client info.</param>
            <param name="yeAgency">The year end agency.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if employee should be processed, false otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndMultiClientService.GetClientChildren(TaxHub.Models.Commands.YearEndPostCommand,System.String)">
            <summary>
            Gets a list of children company ids for a client
            </summary>
            <param name="command">The post command.</param>
            <param name="yeAgency">The year end agency.</param>
            <returns>A list of strings with client ids.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndMultiClientService.GetCommonPayFamily(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the set of common pay family for a client
            </summary>
            <param name="clientId">The client Id.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task for the operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndMultiClientService.GetCommonPayFamily(System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the set of common pay families for a list of clients
            </summary>
            <param name="clientIds">The client Ids.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task for the operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndProcessEmployeesStrategy">
            <summary>
            Strategy interface for handling Processing Employees for Year End.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.IYearEndProcessEmployeesStrategy.HandleFederalAgenciesDifferently">
            <summary>
            Determines if we handle federal agencies different.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndProcessEmployeesStrategy.ShouldProcessEmployees(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Boolean)">
            <summary>
            Determines if we process employees for this command (client and agency)
            </summary>
            <param name="command">YearEndPostCommand that kicked off this service</param>
            <param name="client">Client from the command (used for YeCommonPayType)</param>
            <param name="yeAgency">YEAgency</param>
            <param name="isFederalAgency">Is this agency a federal agency</param>
            <returns>true if employees should be processed, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndProcessEmployeesStrategy.ShouldProcessChildCompanies(TaxHub.Models.Client,System.Boolean)">
            <summary>
            Determines if we should process employees for the passed in child companies
            </summary>
            <param name="client">Client (use for YeCommonPayType check)</param>
            <param name="isFederalAgency">is this a federal agency</param>
            <returns>true if child companies should be processed for this client</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndProcessEmployeesStrategy.GetChildren(TaxHub.Models.Commands.YearEndPostCommand,System.String)">
            <summary>
            Returns the child clients for this command type.
            </summary>
            <param name="command">YearEndPostCommand that kicked off this process</param>
            <param name="yeAgency">YeAgency</param>
            <returns>list of children to process</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndProcessEmployeesStrategy.UpdateClientFeinAndIndicator(System.Text.StringBuilder,TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Boolean,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Updates the record content in a string buffer with the correct indicator (for common pay) and fein numbers
            </summary>
            <param name="sb">string buffer representing the record content.</param>
            <param name="command">Year End Post Command</param>
            <param name="clientInfo">Current Client we are processing</param>
            <param name="yearEndAgency">YearEndAgency</param>
            <param name="isFederalAgency">isFederalAgency</param>
            <param name="correlationId">Correlation Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>true if the record content was successfully updated, false if not</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesCommonPayStrategy.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.IClientParentChildService)">
            <summary>
            Strategy for processing year end employees for common pay.
            </summary>
            <param name="logger">application logger</param>
            <param name="messageHub">message hub</param>
            <param name="clientService">client service</param>
            <param name="clientParentChildService">client parent child service</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesCommonPayStrategy.HandleFederalAgenciesDifferently">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesCommonPayStrategy.ShouldProcessEmployees(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesCommonPayStrategy.ShouldProcessChildCompanies(TaxHub.Models.Client,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesCommonPayStrategy.GetChildren(TaxHub.Models.Commands.YearEndPostCommand,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesCommonPayStrategy.UpdateClientFeinAndIndicator(System.Text.StringBuilder,TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Boolean,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesMultiFeinStrategy.HandleFederalAgenciesDifferently">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesMultiFeinStrategy.ShouldProcessEmployees(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesMultiFeinStrategy.ShouldProcessChildCompanies(TaxHub.Models.Client,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesMultiFeinStrategy.GetChildren(TaxHub.Models.Commands.YearEndPostCommand,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesMultiFeinStrategy.UpdateClientFeinAndIndicator(System.Text.StringBuilder,TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Boolean,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesDefaultStrategy.HandleFederalAgenciesDifferently">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesDefaultStrategy.ShouldProcessEmployees(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesDefaultStrategy.ShouldProcessChildCompanies(TaxHub.Models.Client,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesDefaultStrategy.GetChildren(TaxHub.Models.Commands.YearEndPostCommand,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ProcessYearEndEmployeesDefaultStrategy.UpdateClientFeinAndIndicator(System.Text.StringBuilder,TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Boolean,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndFileInfoService">
            <summary>
            The Interface for the Year End FileInfo Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndFileInfoService.CreateYeFileInfo(TaxHub.Models.YearEnd.YearEndFileInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Inserts a new record in the YeFileInfo Table.
            </summary>
            <param name="entity">The YeFileInfo record to insert.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An instance of <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndFileInfoService.FindById(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the instance of <see cref="T:TaxHub.Models.YearEnd.YearEndFileInfo"/> by the aggregate ID.
            </summary>
            <param name="id">The aggregate Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndFileInfo"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndFileInfoService.MarkYeFileInfoAsExported(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Marks the YeFileInfo as exported.
            </summary>
            <param name="id"> The YeFileInfo Id.</param>
            <param name="correlationId">The correlation ID.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndIngestedFileService.RegisterIngestedFiles(System.Collections.Generic.IEnumerable{TaxHub.Models.Commands.YearEndIngestedFileCommand},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Registers a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndIngestedFile" />
            </summary>
            <param name="ingestedFiles">The collection of commands with the ingested files</param>
            <param name="eventDataParams">The event params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if registered, False if not</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndIngestedFileService.InvalidateIngestedFiles(TaxHub.Models.Commands.YearEndIngestedFileCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Invalidates all ingested files for the client and tax year included in the command
            </summary>
            <param name="command">The command with the clientId and tax year</param>
            <param name="eventDataParams">The event params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if invalidated, False if not</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndIngestedFileService.FindByClientIdTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a collection of valid <see cref="T:TaxHub.Models.YearEnd.YearEndIngestedFile" /> instances
            </summary>
            <param name="clientId">The clientId</param>
            <param name="taxYear">The Tax Year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndIngestedFile" /> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndStagingREService.ExecuteStaging(TaxHub.Models.Commands.YearEndStagingCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Executes Staging of RE and RS Records for PAJORDAN with 88 or 99 work location
            </summary>
            <param name="command">An instance of <see cref="T:TaxHub.Models.Commands.YearEndStagingCommand" /></param>
            <param name="eventDataParams">The Event Data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An isntance of the Operation Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndStagingREService.RemoveStagingInfo(TaxHub.Models.Commands.YearEndStagingCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Removes any staging inforamtion
            </summary>
            <param name="command">An instance of <see cref="T:TaxHub.Models.Commands.YearEndStagingCommand" /></param>
            <param name="eventDataParams">The Event Data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndStagingREService.FindStagedInformation(System.String,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Finds any staging information based on clientId and tax year.
            </summary>
            <param name="clientId">The client id</param>
            <param name="taxYear">The tax year</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndStagingREInfo" /> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndStagingREService.MultiClientParentAddStagedREs(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Adds any missing REs to the Multi client Parent
            </summary>
            <param name="command">An instance of <see cref="T:TaxHub.Models.Commands.YearEndStagingCommand" /></param>
            <param name="eventDataParams">The Event Data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndStagingREService.DeleteSessionLock(TaxHub.Models.Commands.YearEndPostCommand,System.Threading.CancellationToken)">
            <summary>
            Deletes the YE locked session
            </summary>
            <param name="command">The command with the context info</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False of error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndStagingREService.AcquireSessionLock(TaxHub.Models.Commands.YearEndPostCommand,System.Threading.CancellationToken)">
            <summary>
            Locks the requested client
            </summary>
            <param name="command">The command with the context info</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if lock successful</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.OhketterinAccountMapper">
            <summary>
            OHKETTERIN RS record. 248 - 267 => Left justified, fill with blanks, alpha numeric.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.PacctbeitAccountMapper">
            <summary>
            224-253 30 Left justify and blank fill Account Number is on RE Record.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.PajordanAccountMapper">
            <summary>
            17-28 12 Numeric Only, right justify, zero fill Account Number is on RE Record
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.PaphilAccountMapper">
            <summary>
            Numeric Only, must be 7 digits Account Number is on RS Record. 331-337. 7
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.AlswAccountMapper">
            <summary>
            Alabama withholding tax account number ( Alabama withholding tax account number) 
            right justify, zero fill, length 10
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.ArswAccountMapper">
            <summary>
            Enter the EIN of the company as reported in the Code RE Record. 
            Only numeric characters. Omit hyphens Left justify and fill with blanks. Length
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.AsswAccountMapper">
            <summary>
            Enter American Samoa Identification Number. Right justify and zero fill
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.AzswAccountMapper">
            <summary>
            Left justify and fill with blanks.  Enter Tax Registration Number assigned by the Arizona Department of Revenue Services.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.CoswAccountMapper">
            <summary>
            Left justify and fill with blanks
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.CtswAccountMapper">
            <summary>
            Enter Connecticut Tax Registration Number assigned by Number Account DRS. 
            Left justify and fill unused positions with blanks. Do not enter hyphens.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.DcswAccountMapper">
            <summary>
            State Employer Account Number.  Right justify and fill with blanks
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.GaswAccountMapper">
            <summary>
            State Employer Account Number.  Right justify and fill with blanks
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.HiswAccountMapper">
            <summary>
            Must not be blank. State employer account number (identification number assigned by a State to an employer for 
            the purpose of filing wage and tax reports to State or local government taxing agencies). Applies to unemployment reporting.
            Only AlphaNumeric. Omit Hyphens. Left Justifies, space filled
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.IdswAccountMapper">
            <summary>
            Enter the 9-digit Idaho withholding account number. - Enter only numeric characters. - Omit hyphens. Right justify and zero fill.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.InswAccountMapper">
            <summary>
            Indiana Employer Taxpayer ID (TID)
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.MdswAccountMapper">
            <summary>
            8 digit Maryland Central Registration Number
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.MeswAccountMapper">
            <summary>
            Enter the 11 digit Maine State Withholding Account Number.  This account number is generally the reporting company’s EIN with a two digit suffix making the value 11 digits (e.g. 12345678900).  No hyphen. Left justify and fill with blanks.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.NcswAccountMapper">
            <summary>
            9 digit NC Employer ID (Withholding account number. Left justify and blank fill this field.) Numeric Only; APPLIEDFOR is not a valid entry
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.NeswAccountMapper">
            <summary>
            Enter Nebraska ID number. Right justify and zero fill. Do not enter ID Number the “21-” preceding the Nebraska ID number.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.NjswAccountMapper">
            <summary>
            Right justify and zero fill
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.NmswAccountMapper">
            <summary>
            Enter the employer’s CRS Identification Number. All numeric, no spaces, special characters or dashes. Drop the leading zero.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.OhswAccountMapper">
            <summary>
            Required field. The State Employer Account Number for Ohio will begin with a 51, 52, 53 or 54 and is 8 digits in length. Numeric characters only. Omit hyphens. Left justify and fill with blanks.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.OkswAccountMapper">
            <summary>
            Oklahoma withholding (WTH) Account Number THEN Example: WTH-99999999-01, Leave blank if reporting fora state other than OklahomaRequired
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.OrswAccountMapper">
            <summary>
            Oregon Withholding Account Number for the Employer.Right justify and zero fill to the left. 
            Use only numeric characters, do not drop leading zeroes. Ex: BIN of 1234567-8 is reported as 00000000000012345678
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.PaswAccountMapper">
            <summary>
            Enter 8-digit Employer Withholding Number. Right justify and zero fill
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.UtswAccountMapper">
            <summary>
            Do not enter hyphens. The number is 14 characters long (11 nu- meric followed by “WTH”). Left-justify and fill with spaces. THIS IS A REQUIRED FIELD
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.Efw2.WvswAccountMapper">
            <summary>
            Use 9 digit FEIN. Left justify.  No spaces or dashes.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.AccountNumberMapperBase">
            <summary>
            Base class for account number field mapper.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Mappers.AccountNumberMapperBase.#ctor(System.String)">
            <summary>
            Creates an instance of the mapper.
            </summary>
            <param name="rawValue">The new raw account number value to transform.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Mappers.AccountNumberMapperBase.RawValue">
            <summary>
            Get the raw value. 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Mappers.AccountNumberMapperBase.Value">
            <summary>
            Gets the record's new value
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Mappers.AccountNumberMapperBase.RecordContent">
            <summary>
            Get the new record's new content
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Mappers.AccountNumberMapperBase.Digest(System.String,System.String)">
            <summary>
            Digests the record content. Omits hyphens and spaces.
            </summary>
            <param name="value">The record's current value.</param>
            <param name="recordContent">The record's current content</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Mappers.AccountNumberMapperBase.ParseValue(System.Text.StringBuilder)">
            <summary>
            Parse the record content and return the account number value.
            </summary>
            <param name="content">The current record's content.</param>
            <returns>The parsed account number value.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Mappers.AccountNumberMapperBase.TransformValue(System.String,System.Text.StringBuilder)">
            <summary>
            Transform the account number and stuff it into the content.
            </summary>
            <param name="accountNumber">The current record's account number.</param>
            <param name="content">The current record's content.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.IAccountNumberMapperFactory">
            <summary>
            AccountNumber field mapper factory.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Mappers.IAccountNumberMapperFactory.Create(System.String,TaxHub.Common.Enums.YearEndRecordType,System.String)">
            <summary>
            Creates an account number field value mapper instance.
            </summary>
            <param name="payeeId">The client agency payee id.</param>
            <param name="yearEndRecordType">The record type</param>
            <param name="clientTaxId">the client agency tax id.</param>
            <returns>An instance of the field value mapper</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.AccountNumberMapperFactory">
            <summary>
            AccountNumber field mapper factory.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Mappers.AccountNumberMapperFactory.Create(System.String,TaxHub.Common.Enums.YearEndRecordType,System.String)">
            <summary>
            Creates an account number field value mapper instance.
            </summary>
            <param name="payeeId">The client agency payee id.</param>
            <param name="yearEndRecordType">The record type</param>
            /// <param name="clientTaxId">the client agency tax id.</param>
            <returns>An instance of the field value mapper</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Mappers.BypassFieldValueMapper.Value">
            <summary>
            Gets the record's new value
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Mappers.BypassFieldValueMapper.RecordContent">
            <summary>
            Get the new record's new content
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Mappers.BypassFieldValueMapper.Digest(System.String,System.String)">
            <summary>
            Digests the record content.
            </summary>
            <param name="value">The record's current value.</param>
            <param name="recordContent">The record's current content</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.Mappers.IFieldValueMapper">
            <summary>
            Field value mapper
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.Mappers.IFieldValueMapper.Digest(System.String,System.String)">
            <summary>
            Digests the record content.
            </summary>
            <param name="value">The record's current value.</param>
            <param name="recordContent">The record's current content</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Mappers.IFieldValueMapper.Value">
            <summary>
            Gets the record's new value
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.Mappers.IFieldValueMapper.RecordContent">
            <summary>
            Get the new record's new content
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndLocalFileService">
            <summary>
            IYearEndLocalFileService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndLocalFileService.FileExists(System.String)">
            <summary>
            FileExists
            </summary>
            <param name="filePath">filePath</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndLocalFileService.GetTempFileName">
            <summary>
            GetTempFileName
            </summary>
            <returns>temp file name</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndLocalFileService.GetTempFileNameWithExtension(System.String)">
            <summary>
            GetTempFileName with an extension.
            </summary>
            <param name="extension">The file extension.</param>
            <returns>temp file name</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndLocalFileService.CreateStreamWriter(System.String)">
            <summary>
            CreateStreamWriter
            </summary>
            <param name="filePath">the filePath</param>
            <returns>a StreamWriter</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndLocalFileService.CreateWriteStream(System.String)">
            <summary>
            Create Stream for writing
            </summary>
            <param name="filePath">the filePath</param>
            <returns>a Stream.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndLocalFileService.CreateTextReader(System.String,System.Text.Encoding)">
            <summary>
            Create Stream Reader
            </summary>
            <param name="filePath">the filePath</param>
            <param name="encoding">the optional encoding.</param>
            <returns>a StreamReader.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndLocalFileService.Dispose(System.IDisposable[])">
            <summary>
            Dispose
            </summary>
            <param name="disposables">the disposables</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndLocalFileService.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="filePath">The path of the file to delete.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService">
            <summary>
            The Year End Agency Service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService.FindOne(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the penalty interest by its id.
            </summary>
            <param name="id">The Year End Agency id</param>
            <param name="correlationId">The correlation id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Year End Agency</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns list of Year End agencies
            </summary>
            <param name="pageParams">Page parameters including sorting</param>
            <param name="correlationId">The correlation id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of year End Agency entries</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService.FindAllByYearEndAgencyIdAndTaxYear(System.String,System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns list of Year End agencies
            </summary>
            <param name="yearEndAgencyId">The Year End Agency Id</param>
            <param name="taxYear">The Tax Year</param>
            <param name="correlationId">The correlation id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>List of year End Agency entries</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService.FindOneByYearEndAgencyIdAndTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a Year End Agency by agency id and tax year.
            </summary>
            <param name="yearEndAgencyId">The Year End Agency Id</param>
            <param name="taxYear">The Tax Year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The Year End Agency</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService.FindAllByAgencies(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a collection of ye agency metadata matching the given year and list of payees
            </summary>
            <param name="agencies">The agencies to find.</param>
            <param name="year">The year.</param>
            <param name="cancellationToken">Cancellation Token.</param>
            <returns>The collection of ye agency metadata.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService.FindAllByClientId(System.String,System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns a collection of ye agency metadata for the given client and year.
            For agencies reporting to a tax collector (FILING_COLLECTOR_GROUP), the tax collector is returned (MAIN_PAYEE).
            For agencies reporting to a combine payee (COMBINE_PAYEE), the combine id is returned (COMBINE_ID).
            </summary>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="cancellationToken">Cancellation Token.</param>
            <returns>The collection of ye agency metadata.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService.FindOneByUltiProAgencyAndTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the one by UltiPro agency and tax year.
            </summary>
            <param name="ultiProAgency">The UltiPro agency.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Year End Agency</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService.Update(TaxHub.Models.YearEnd.YearEndAgency,TaxHub.Models.Commands.YearEndAgencyUpdateCommand,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update the YearEndAgency with a given set of data
            </summary>
            <param name="yearAgencyToUpdate">The YE Agency to Update</param>
            <param name="updateCommand">The update command</param>
            <param name="correlationId">The Correlation Id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellation">The Cancellation Token</param>
            <returns>An Operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService.Create(TaxHub.Models.YearEnd.YearEndAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This will create a new Year End Agency.
            </summary>
            <param name="yearEndAgencyToCreate">The agency.</param>
            <param name="dataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Creation result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService.FindAllThatGeneratesRW(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all ye agency flagged to generate RW record.
            </summary>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Sequence of ye agency.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService.IsFederalAgency(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds out if an agency id is federal
            </summary>
            <param name="agencyId">The agency id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True or false, depending on locality.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService.GetAgencyLocalityType(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the locality type of a certain year end agency
            </summary>
            <param name="payeeId">The payee id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The locality type.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndBulkService">
            <summary>
            The year end bulk service class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndBulkService.#ctor(TaxHub.CoreServices.DataAccess.IYearEndBulkRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndBulkService"/> class.
            </summary>
            <param name="yearEndBulkRepository">The year end bulk repository.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndBulkService.BulkInsert(System.Collections.Generic.IReadOnlyCollection{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YeRecordGroup},TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndCsvClientService.FindAllForClientTaxYearAndFileName(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndCsvClientService.ResolveYearEndCsvClients(System.String,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndCsvClientService.InvalidateRecords(System.String,System.Int32,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.ResolveYearEndCsvClientsResult">
            <summary>
            The result of resolving YearEndCsvClients records.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ResolveYearEndCsvClientsResult.PayeeId">
            <summary>
            Gets or sets the payee id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ResolveYearEndCsvClientsResult.YearEndCsvClient">
            <summary>
            Gets or sets the year end CSV client.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndCsvService.RaiseLogRegistrationEvent(TaxHub.Models.Events.TaxYearEndProcessInfoLogEvent)">
            <summary>
            Published the Year End Process Info Service Requested event
            </summary>
            <param name="logInfoEvent">The log event information</param>
            <returns>A flag indicating the status of the publishing</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndMultiClientService">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndMultiClientService.ShouldProcessEmployees(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndMultiClientService.UpdateClientIndicators(System.Text.StringBuilder,TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndMultiClientService.ShouldProcessChildCompanies(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.Client,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndMultiClientService.GetClientChildren(TaxHub.Models.Commands.YearEndPostCommand,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndMultiClientService.GetCommonPayFamily(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndMultiClientService.GetCommonPayFamily(System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndIngestedFileService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndIngestedFileRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndIngestedFileService" /> class.
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /></param>
            <param name="messageHub">An implementation of the <see cref="T:TaxHub.Messaging.IMessageHub" /></param>
            <param name="repository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndIngestedFileRepository" /></param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndIngestedFileService.FindByClientIdTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndIngestedFileService.RegisterIngestedFiles(System.Collections.Generic.IEnumerable{TaxHub.Models.Commands.YearEndIngestedFileCommand},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndIngestedFileService.InvalidateIngestedFiles(TaxHub.Models.Commands.YearEndIngestedFileCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndLocalFileService.Dispose(System.IDisposable[])">
            <summary>
            Dispose
            </summary>
            <param name="disposables">the disposables</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndLocalFileService.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="filePath">The path of the file to delete.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndStagingREService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndStagingREService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndStagingREService.InitializeNew(TaxHub.Models.YearEnd.YearEndStagingREInfo)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndStagingREService.ExecuteStaging(TaxHub.Models.Commands.YearEndStagingCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndStagingREService.RemoveStagingInfo(TaxHub.Models.Commands.YearEndStagingCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndStagingREService.FindStagedInformation(System.String,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndStagingREService.MultiClientParentAddStagedREs(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndStagingREService.GroupParentEntries(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndREInfo})">
            <summary>
            Group Parent Entries of interest ie. PAJORDAN and PAKEYSTEIT
            </summary>
            <param name="parentREs">Parent RE records</param>
            <returns>A dictionary of PSD codes by agency of the parent RE records</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndStagingREService.GetStagedDataForChildren(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Find all children entries that have staged data 
            For each client/tax year get the staged records
            </summary>
            <param name="command">The command</param>
            <param name="eventDataParams">The event data poaramnters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A dictionary of staged record contents by YE Agency for each of the clients in client map</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndStagingREService.RaiseLogRegistrationEvent(TaxHub.Models.Events.TaxYearEndProcessInfoLogEvent)">
            <summary>
            Published the Year End Process Info Service Requested event
            </summary>
            <param name="logInfoEvent">The log event information</param>
            <returns>A flag indicating the status of the publishing</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndStagingREService.DeleteSessionLock(TaxHub.Models.Commands.YearEndPostCommand,System.Threading.CancellationToken)">
            <summary>
            Deletes the YE locked session
            </summary>
            <param name="command">The command with the context info</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False of error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndStagingREService.AcquireSessionLock(TaxHub.Models.Commands.YearEndPostCommand,System.Threading.CancellationToken)">
            <summary>
            Locks the requested client
            </summary>
            <param name="command">The command with the context info</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if lock successful</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndStagingRSService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndStagingRSService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndStagingRSService.InitializeNew(TaxHub.Models.YearEnd.YearEndStagingRSInfo)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndFileInfoService">
            <inheritdoc cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndFileInfoService" />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndFileInfoService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndFileInfoService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndFileInfoService.InitializeNew(TaxHub.Models.YearEnd.YearEndFileInfo)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndFileInfoService.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.IYearEndFileInfoRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes an instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndFileInfoService"/>
            </summary>
            <param name="repository">The YeFileInfo repository</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndFileInfoService.CreateYeFileInfo(TaxHub.Models.YearEnd.YearEndFileInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndFileInfoService.FindById(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndFileInfoService.MarkYeFileInfoAsExported(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndFileInfoService.EnsureStatusChange(TaxHub.Models.Commands.YearEndFileInfoStatusUpdateCommand,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Ensures the status change
            </summary>
            <param name="updateCommand">The Update Command</param>
            <param name="correlationId">The Correlation id</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Operation Result</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRAService">
            <summary>
            Interface for Aggregate POST RA Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRAService.PostRA(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Executes the actual posting of Ingested RA records.
            </summary>
            <param name="command">The command info</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The POSTed RAID or zero in case of an error</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService">
            <summary>
            An interface for Aggregate POST RE Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService.PostRE(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.YearEnd.YearEndREInfo,System.Int32,TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Posts RE information from the ingestion tables to the Post ones.
            </summary>
            <param name="command">The command with the context info.</param>
            <param name="reInfo">The RE info.</param>
            <param name="postRAId">The Id of the RA posted already.</param>
            <param name="clientAgencyInfo">The client agency.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A response <see cref="T:TaxHub.CoreServices.Application.YearEnd.REProcessInfo"/> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService.GetPostREInfo(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the POSTed RE information.
            </summary>
            <param name="raId">The posted RAID</param>
            <param name="reId">The posted REID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo"/> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService.GetPostREInfos(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all the POSTed RE information by a collection of PostReIds.
            </summary>
            <param name="postReIds">The collection of PostREIds to search for</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo"/> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService.UpdateStatus(System.Int32,System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the Status of a POSTed Record
            </summary>
            <param name="raId">The posted RAID</param>
            <param name="reId">The posted REID</param>
            <param name="validStatus">The valid status flag</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of UpdateAggregateResultState type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService.GetPostREInfoByReId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a POSTed <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> instance
            </summary>
            <param name="reId">The POSTed employeer Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService.FindOneByAgency(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds a list of Valid YearEndREInfo records.
            </summary>
            <param name="clientId">The client identifier</param>
            <param name="taxYear">The tax year</param>
            <param name="agency">The agency ID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The matching YearEndREInfo list</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService.FindOneByClientId(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            FindOneByClientId
            </summary>
            <param name="clientId">clientId</param>
            <param name="taxYear">taxYear</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>The matching Re Info fo a client</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService.FindAllByClientAndYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by client is and year.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService.FindAll(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by client id, year and agency.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="agency">The agency.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService.UpdateRecordContent(System.Int32,System.Int32,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the recordContent of an POSTed <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> instance
            </summary>
            <param name="raId">The POSTed submitter Id</param>
            <param name="reId">The POSTed employeer Id</param>
            <param name="recordContent">The valid status</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An UpdateAggregateResultState value</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.REProcessInfo">
            <summary>
            POST RE response class
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.REProcessInfo.Success">
            <summary>
            Gets or sets the outcome of the operation
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.REProcessInfo.SourceREId">
            <summary>
            Gets or sets the ingestion table REID
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.REProcessInfo.PostRaId">
            <summary>
            Gets or sets the RaID of the POST RE record.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.REProcessInfo.PostREId">
            <summary>
            Gets or sets the REID of the POST RE record.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.REProcessInfo.AlreadyPosted">
            <summary>
            Used to indicate posting was already completed successfully
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostROService">
            <summary>
            An interface for Aggregate POST RO Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostROService.ProcessOptionalWages(System.Int32,System.Int32,System.Int32,System.Int32,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Process optional wages that pertain to RO data.
            </summary>
            <param name="raId">The posted RAID</param>
            <param name="reId">The posted REID</param>
            <param name="sourceReId">The REID from ingestion RO tables</param>
            <param name="rwId">The posted RWID</param>
            <param name="ssn">The customer SSN</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A response <see cref="T:TaxHub.CoreServices.Application.YearEnd.ROProcessResponse"/> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostROService.UpdateDuplicate(TaxHub.Models.YearEnd.Commands.YearEndPostRODuplicateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Searches and updates duplicate column of any RO records
            </summary>
            <param name="command">The command with the context info</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of UpdateAggregateResultState type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostROService.FindAllOptionalWages(System.Int32,System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Searches for all the optional wages given the REID and RWID
            </summary>
            <param name="reId">The Posted RE Id</param>
            <param name="rwId">The Posted RA Id</param>
            <param name="correlationId">The correlation id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An enumerable of Post RO Info</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.ROProcessResponse">
            <summary>
            POST RO response class
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessResponse.Success">
            <summary>
            Gets or sets the outcome of the operation
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessResponse.NoDataFound">
            <summary>
            Gets or sets info about whether data was found or not
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessResponse.LastLine">
            <summary>
            Gets or sets the last file line
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals">
            <summary>
            Class that holds the calculation totals of the RO post
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.#ctor">
            <summary>
            The class constructor
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.DigestRecordContent(TaxHub.Models.YearEnd.YearEndROInfo)">
            <summary>
            Process and ingested RO record and calculates totals.
            </summary>
            <param name="wageInfo">An instance of an ingested RO record of <see cref="T:TaxHub.Models.YearEnd.YearEndROInfo"/> type</param>
            <returns>An instance of this class</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.RebuildRecordContent">
            <summary>
            Rebuilds the record content based on the instance information.
            </summary>
            <returns>An instance of this class</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.AggregateROTotals(TaxHub.CoreServices.Application.YearEnd.ROProcessTotals)">
            <summary>
            Internal Aggregator for all Employee Optional Wages processed
            </summary>
            <param name="processTotals">A <see cref="T:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals" /> instance representing optinal wages of the last employee</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.AllTips">
            <summary>
            Gets or sets AllTips info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.UnTaxTips">
            <summary>
            Gets or sets UnTaxTips info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.MedSav">
            <summary>
            Gets or sets MedSav info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.SRetAcct">
            <summary>
            Gets or sets SRetAcct info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.AdopExpen">
            <summary>
            Gets or sets AdopExpen info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.UnSSTaxGTL">
            <summary>
            Gets or sets UnSSTaxGTL info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.UnMedTaxGTL">
            <summary>
            Gets or sets UnMedTaxGTL info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.NQ409A">
            <summary>
            Gets or sets NQ409A info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.HIREWages">
            <summary>
            Gets or sets HIREWages info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.DRC457b">
            <summary>
            Gets or sets DRC457b info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.EquityGrants">
            <summary>
            Gets or sets EquityGrants info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.AggregateDeferrals">
            <summary>
            Gets or sets AggregateDeferrals info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.PRWages">
            <summary>
            Gets or sets PRWages info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.PRComm">
            <summary>
            Gets or sets PRComm info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.PRAllow">
            <summary>
            Gets or sets PRAllow info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.PRTips">
            <summary>
            Gets or sets PRTips info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.PRTotalWages">
            <summary>
            Gets or sets PRTotalWages info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.PRTaxWithheld">
            <summary>
            Gets or sets PRTaxWithheld info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.RetFund">
            <summary>
            Gets or sets RetFund info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.VIWages">
            <summary>
            Gets or sets VIWages info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.VITaxWithheld">
            <summary>
            Gets or sets VITaxWithheld info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.W2c">
            <summary>
            Gets or sets W2c info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.Duplicate">
            <summary>
            Gets or sets Duplicate info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.Modify_User">
            <summary>
            Gets or sets Modify_User info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals.RecordContent">
            <summary>
            Gets RecordContent info
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRSService">
            <summary>
            An interface for Aggragate POST RS Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRSService.GetEmployeesToProcess(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a Hashset of all SSNs to process.
            </summary>
            <param name="reId">The POSTed REID under which the ingested RS records exist.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A Hashset of SSNs</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRSService.GetEmployeesToProcess(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a Hashset of all SSNs to process by searching with a collection of RSIDs.
            </summary>
            <param name="rsIds">The collection of RS Ids to check</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The collection of SSNs</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRSService.ProcessStateWages(System.Int32,System.Int32,System.Int32,System.Int32,System.String,TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes and POSTs an ingested RS record
            </summary>
            <param name="raId">The POSTED RAID</param>
            <param name="reId">The POSTED RAID</param>
            <param name="sourceREId">The ingested REID</param>
            <param name="rwId">The POSTED RWID</param>
            <param name="ssn">The SSN of the ingested RS record</param>
            <param name="clientAgencyInfo">The client agency.</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A response <see cref="T:TaxHub.CoreServices.Application.YearEnd.RSProcessResponse"/> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRSService.ProcessMultipleStateWages(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes and POSTs an ingested RS record
            </summary>
            <param name="raId">The POSTED RAID</param>
            <param name="reId">The POSTED RAID</param>
            <param name="sourceREId">The ingested REID</param>
            <param name="rwId">The POSTED RWID</param>
            <param name="sourceRWId">The ingested RWID</param>
            <param name="ssn">The SSN of the ingested RS record</param>
            <param name="taxYear">The current tax year</param>
            <param name="clientId">The current client id</param>
            <param name="clientAgencyInfo">The client agency.</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A response <see cref="T:TaxHub.CoreServices.Application.YearEnd.RSProcessResponse"/> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRSService.UpdateDuplicate(TaxHub.Models.YearEnd.Commands.YearEndPostRSDuplicateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Searches and updates duplicate column of any RS records
            </summary>
            <param name="command">The command with the context info</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of UpdateAggregateResultState type</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.RSProcessResponse">
            <summary>
            POST RS response class
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RSProcessResponse.Success">
            <summary>
            Gets or sets the outcome of the operation
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RSProcessResponse.NoDataFound">
            <summary>
            Gets or sets info about whether data was found or not
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.RSProcessTotals">
            <summary>
            Class that holds the calculation totals of the RS post
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.RSProcessTotals.#ctor">
            <summary>
            The class constructor
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.RSProcessTotals.DigestRecordContent(TaxHub.Models.YearEnd.YearEndRSInfo)">
            <summary>
            Process and ingested RS record and calculates totals.
            </summary>
            <param name="wageInfo">An instance of an ingested RO record of <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo"/> type</param>
            <returns>An instance of this class</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.RSProcessTotals.RebuildRecordContent">
            <summary>
            Rebuilds the record content based on the instance information.
            </summary>
            <returns>An instance of this class</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RSProcessTotals.StateTaxableWages">
            <summary>
            Gets or sets the StateTaxableWages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RSProcessTotals.StateTaxWithheld">
            <summary>
            Gets or sets the StateTaxWithheld
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RSProcessTotals.LocalTaxableWages">
            <summary>
            Gets or sets the LocalTaxableWages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RSProcessTotals.LocalTaxWithheld">
            <summary>
            Gets or sets the LocalTaxWithheld
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RSProcessTotals.SUIGrossWages">
            <summary>
            Gets or sets the SUIGrossWages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RSProcessTotals.SUITaxableWages">
            <summary>
            Gets or sets the SUITaxableWages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RSProcessTotals.RecordContent">
            <summary>
            Gets RecordContent info
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRTService">
            <summary>
            An interface for Aggragate POST RT Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRTService.ProcessEmployeeWagesTotals(System.Int32,System.Int32,TaxHub.CoreServices.Application.YearEnd.RWProcessTotals,System.Int32,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processs All Employees Wage Totals
            </summary>
            <param name="raId">The posted RAID</param>
            <param name="reId">The posted REID</param>
            <param name="rwProcessTotals">The sum of all employee wages</param>
            <param name="rwCounter">The number of employee wages Posted</param>
            <param name="line">The current file line number</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if succes, False if error</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals">
            <summary>
            Class that holds the calculation totals of the RT post
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.#ctor">
            <summary>
            The class constructor
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.RebuildRecordContent(TaxHub.CoreServices.Application.YearEnd.RWProcessTotals,System.Int32)">
            <summary>
            Rebuilds the record content based on the instance information.
            </summary>
            <param name="wagesTotals">An instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals"/> type with the calculated totals</param>
            <param name="rwCounter">The number of all employees having their wages included</param>
            <returns>An instance of this class</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.RecordContent">
            <summary>
            Gets RecordContent info
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.SSN">
            <summary>
            Gets, sets the SSN value
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.FirstName">
            <summary>
            Gets, sets the First Name value
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.MiddleName">
            <summary>
            Gets, sets the Middle Name value
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.LastName">
            <summary>
            Gets, sets the Last Name
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.City">
            <summary>
            Gets, set the City value
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.State">
            <summary>
            Gets, sets the State value
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.ZipCode">
            <summary>
            Gets, sets the Zipcode value
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.CountryCode">
            <summary>
            Gets, set the Country Code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.Address">
            <summary>
            Gets, sets the Address
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.Address2">
            <summary>
            Gets, sets the Address 2
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.PostalCode">
            <summary>
            Gets, sets the Postal Code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.StateProvince">
            <summary>
            Gets, sets the State or Province
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.TaxableWages">
            <summary>
            Gets, sets the Taxable Wages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.TaxWithheld">
            <summary>
            Gets, sets the Tax Withheld
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.SSWages">
            <summary>
            Gets, sets the SS Wages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.SSTips">
            <summary>
            Gets, sets the SS Tips
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.SSTax">
            <summary>
            Gets, sets the SS Tax
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.MedWages">
            <summary>
            Gets, sets the Med Wages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.MedTax">
            <summary>
            Gets, sets the Med tax
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.EIC">
            <summary>
            The Earned Income Credit amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.DepCare">
            <summary>
            The Dep Care amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.W401k">
            <summary>
            The W401k amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.W403b">
            <summary>
            The W403B amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.W408k">
            <summary>
            The W408k amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.W457b">
            <summary>
            The W457B amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.W501c">
            <summary>
            The W501c amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.MilPay">
            <summary>
            The Military pay
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.NQ457">
            <summary>
            The NQ 457 amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.ERHSA">
            <summary>
            The ERHSA amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.NQNon457">
            <summary>
            The Non Qualified 457 amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.NonTaxCB">
            <summary>
            The Non Tax Cb amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.ERGTL">
            <summary>
            The ERGTL amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.Stock">
            <summary>
            The Stock amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.Def409A">
            <summary>
            The Def 409a amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.Roth401k">
            <summary>
            The ROTH 401k amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.Roth403b">
            <summary>
            The ROTH 403b amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.ERHealth">
            <summary>
            The ER Health amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.QSEHRA">
            <summary>
            Gets or sets QSEHRA
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.CostERHealth">
            <summary>
            The Cost of ER Health amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.HRABenefits">
            <summary>
            The HRS Benefits
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.HRABen">
            <summary>
            The HRA Benefits
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.W2c">
            <summary>
            The W2c record
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.Duplicate">
            <summary>
            Flag to indicate if it's a duplicate
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.FileLineNo">
            <summary>
            The File Line Number
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RTProcessTotals.ModifyUser">
            <summary>
            The User that updated the record
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRUService">
            <summary>
            An interface for Aggragate POST RU Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRUService.ProcessEmployeeOptionalWagesTotals(System.Int32,System.Int32,TaxHub.CoreServices.Application.YearEnd.ROProcessTotals,System.Int32,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Process Totals of all employees optional wages
            </summary>
            <param name="raId">The posted RAID</param>
            <param name="reId">The posted REID</param>
            <param name="roProcessTotals">An instance <see cref="T:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals"/> type with the sum of all employee optional wages</param>
            <param name="roCounter">The number of employee optional wages Posted</param>
            <param name="line">The current file line number</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if sucess, False if error</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.RUProcessTotals">
            <summary>
            Class that holds the calculation totals of the RU post
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.RUProcessTotals.#ctor">
            <summary>
            The classs constructor
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.RUProcessTotals.RebuildRecordContent(TaxHub.CoreServices.Application.YearEnd.ROProcessTotals,System.Int32)">
            <summary>
            Rebuilds the record content based on the instance information.
            </summary>
            <param name="wagesTotals">An instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals"/> type with the calculated totals</param>
            <param name="roCounter">The number of all employees having their wages included</param>
            <returns>An instance of this class</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RUProcessTotals.RecordContent">
            <summary>
            Gets RecordContent info
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRWService">
            <summary>
            An interface for Aggragate POST RW Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRWService.GetEmployeesToProcess(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a Hashset of all SSNs to process.
            </summary>
            <param name="reId">The posted REID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A HashSet with the SSNs to process</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRWService.GetAllEmployeeFederalWages(System.Int32,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Gets an enumerable of RW infos per ssn and employee
            </summary>
            <param name="reId">The RE Id</param>
            <param name="ssn">The Social Security Number</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An Enumerable of YEarEndRWInfo</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRWService.ProcessFederalWages(System.Int32,System.Int32,System.Int32,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes and POST employee federal wages - RW Type
            </summary>
            <param name="raId">The posted RAID</param>
            <param name="reId">The posted REID</param>
            <param name="sourceReId">The ingestion REID</param>
            <param name="ssn">The SSN of the employee to process</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A response <see cref="T:TaxHub.CoreServices.Application.YearEnd.RWProcessResponse"/> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRWService.ProcessFederalWages(System.Int32,System.Int32,System.Int32,TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes and POST employee federal wages for a given RWInfo
            </summary>
            <param name="raId">The posted RAID</param>
            <param name="reId">The posted REID</param>
            <param name="sourceReId">The ingestion REID</param>
            <param name="rwInfo">The RW Info</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A response <see cref="T:TaxHub.CoreServices.Application.YearEnd.RWProcessResponse"/> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRWService.UpdateDuplicate(TaxHub.Models.YearEnd.Commands.YearEndPostRWDuplicateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Searches and updates duplicate column of any RW records
            </summary>
            <param name="command">The command with the context info</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of UpdateAggregateResultState type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRWService.GetEmployeesWageInfos(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of wage information for a given Post RE ID
            </summary>
            <param name="reId">The posted REID</param>
            <param name="correlationId">The correlation id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A HashSet with the SSNs to process</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRWService.FindPostRWDuplicates(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndPostRWInfo},System.Collections.Generic.Dictionary{System.Int32,TaxHub.Models.YearEnd.YearEndPostRWInfo},System.Collections.Generic.List{TaxHub.Models.YearEnd.YearEndPostRWInfo})">
            <summary>
            Finds a set of duplicate Posted RWs 
            </summary>
            <param name="collectionWithPossibleDuplicates">The list with possible duplicates</param>
            <param name="uniqueRWs">The unique set of results</param>
            <param name="duplicateRWs">The duplicates</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRWService.FindIngestionRWDuplicates(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndRWInfo},System.Collections.Generic.Dictionary{System.Int32,TaxHub.Models.YearEnd.YearEndRWInfo},System.Collections.Generic.List{TaxHub.Models.YearEnd.YearEndRWInfo})">
            <summary>
            Finds a set of duplicate Ingestion RWs 
            </summary>
            <param name="collectionWithPossibleDuplicates">The list with possible duplicates</param>
            <param name="uniqueRWs">The unique set of results</param>
            <param name="duplicateRWs">The duplicates</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.RWProcessResponse">
            <summary>
            POST RW response class
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessResponse.Success">
            <summary>
            Gets or sets the outcome of the operation
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessResponse.RWId">
            <summary>
            Gets ir sets he POSTed RWID
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessResponse.NoDataFound">
            <summary>
            Gets or sets info about whether data was found or not
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals">
            <summary>
            Class that holds the calculation totals of the RW post
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.#ctor">
            <summary>
            The class constructor
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.DigestRecordContent(TaxHub.Models.YearEnd.YearEndRWInfo)">
            <summary>
            Process and ingested RW record and calculates totals.
            </summary>
            <param name="wageInfo">An instance of an ingested RW record of <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo"/> type</param>
            <returns>An instance of this class</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.RebuildRecordContent">
            <summary>
            Rebuilds the record content based on the instance information.
            </summary>
            <returns>An instance of this class</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.Firstname">
            <summary>
            Gets or sets the Firstname
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.MiddleName">
            <summary>
            Gets or sets the MiddleName
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.Lastname">
            <summary>
            Gets or sets the Lastname
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.TaxableWages">
            <summary>
            Gets or sets the TaxableWages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.TaxWithheld">
            <summary>
            Gets or sets the TaxWithheld
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.SocialSecurityWages">
            <summary>
            Gets or sets the SocialSecurityWages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.SocialSecurityTips">
            <summary>
            Gets or sets the SocialSecurityTips
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.SocialSecurityTax">
            <summary>
            Gets or sets the SocialSecurityTax
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.MedicareWages">
            <summary>
            Gets or sets the MedicareWages
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.MedicareTax">
            <summary>
            Gets or sets the MedicareTax
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.EIC">
            <summary>
            Gets or sets the EIC
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.DepCare">
            <summary>
            Gets or sets the DepCare
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.W401k">
            <summary>
            Gets or sets the W401k
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.W403b">
            <summary>
            Gets or sets the W403b
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.W408k">
            <summary>
            Gets or sets the W408k
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.W457b">
            <summary>
            Gets or sets the W457b
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.W501c">
            <summary>
            Gets or sets the W501c
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.MilPay">
            <summary>
            Gets or sets the MilPay
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.NQ457">
            <summary>
            Gets or sets the NQ457
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.ERHSA">
            <summary>
            Gets or sets the ERHSA
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.NQNon457">
            <summary>
            Gets or sets the NQNon457
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.NonTaxCB">
            <summary>
            Gets or sets the NonTaxCB
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.ERGTL">
            <summary>
            Gets or sets the ERGTL
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.Stock">
            <summary>
            Gets or sets the Stock
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.Def409A">
            <summary>
            Gets or sets the Def409A
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.Roth401k">
            <summary>
            Gets or sets the Roth401k
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.Roth403b">
            <summary>
            Gets or sets the Roth403b
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.ERHealth">
            <summary>
            Gets or sets the ERHealth
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.QSEHRA">
            <summary>
            Gets or sets QSEHRA
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.W2c">
            <summary>
            Gets or sets the W2c
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.Duplicate">
            <summary>
            Gets or sets the Duplicate
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.FileLineNo">
            <summary>
            Gets or sets the FileLineNo
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.Modify_User">
            <summary>
            Gets or sets the Modify_User
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals.RecordContent">
            <summary>
            Gets the RecordContent
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndProcessInfoService">
            <summary>
            The interface for the YearEndProcessInfo functionality
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndProcessInfoService.RegisterProcessInfo(TaxHub.Models.Commands.YearEndProcessInfoCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Registers an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo" />
            </summary>
            <param name="processInfoCreateCommand">The command with the event info</param>
            <param name="eventDataParams">The event params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if registered, False if not</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndProcessInfoService.FindAllByCorrelationIdAndEventType(System.Guid,TaxHub.Common.Enums.YearEndProcessEventType,System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instances for a correlationId
            </summary>
            <param name="correlationId">The correlationId</param>
            <param name="eventType">The eventType</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instances</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndRFService">
            <inheritdoc />
            <summary>
            An interface for Aggregate Ingested RF Service.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndRVService">
            <inheritdoc />
            <summary>
            An interface for Aggregate Ingested RV Service.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndRUService">
            <inheritdoc />
            <summary>
            An interface for Aggregate Ingested RU Service.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndRTService">
            <inheritdoc />
            <summary>
            An interface for Aggregate Ingested RT Service.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndREService">
            <inheritdoc />
            <summary>
            An interface for Aggregate Ingested RE Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndREService.FindOneFederal(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method finds a Valid YearEndREInfo record.
            </summary>
            <param name="clientId">The client identifier</param>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The matching YearEndREInfo</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndREService.Fail(TaxHub.Models.YearEnd.YearEndREInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Marks an RE record as Fail.
            </summary>
            <param name="yearEndReInfo">The year end RE info.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success and false otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndREService.VoidRecords(System.Collections.Generic.ISet{System.Int32},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Voids the records.
            </summary>
            <param name="raIds">The ra ids.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            True if success and false otherwise.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndREService.FindAllByClientAndYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> by client and year.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndREService.FindAllByClientAndYearAndYeAgency(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> by client, year and yeagency.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="yeAgency">The year end agency</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndREService.UpdatePostInfo(TaxHub.Models.YearEnd.Commands.YearEndPostREPostInfoUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the Post Information of an RE record.
            </summary>
            <param name="command">The command to update the RE info.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success and false otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndREService.FindAllByRaIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Finds all RE records for the provided RA IDs.
            </summary>
            <param name="raIds">List of RA ids.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of matching YearEndREInfos.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndREService.FindOneByClientAndYearAndYeAgency(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the Re info record based on client id, year and yeAgency
            </summary>
            <param name="clientId"> The Client id</param>
            <param name="taxYear">Tax Year</param>
            <param name="yeAgency">Ye Agency</param>
            <param name="cancellationToken">The cancellation Token</param>
            <returns>Matching Re Cord</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndREService.FindAll(System.Int32,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets all RE records given an agency and a tax year.
            </summary>
            <param name="taxYear">The tax year.</param>
            <param name="agency">The agency.</param>
            <param name="pagedDataParameters">The paged data parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndREService.MultiClientParentAddREs(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Completes the parent client id REs with the ones missing.
            </summary>
            <param name="command">The initial post command</param>
            <param name="eventDataParams">An instance of event params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndREService.FindMultiClientParentMissingREs(TaxHub.Models.Commands.YearEndPostCommand,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all missing REs of a multiclient parent compared to the REs of the children
            </summary>
            <param name="command">The initial post command</param>
            <param name="correlationId">A correlation Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A dictionary of yeagency and clientid(s) where the missing Res can be found</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndRAService">
            <inheritdoc />
            <summary>
            An interface for Aggregate Ingested RA Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRAService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method finds a YearEndRAInfo record by raId.
            </summary>
            <param name="raId">The RA identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The matching YearEndRAInfo</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRAService.Fail(TaxHub.Models.YearEnd.YearEndRAInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Marks an RA record as Fail.
            </summary>
            <param name="yearEndRaInfo">The year end RA info.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success and false otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRAService.VoidRecords(System.Collections.Generic.ISet{System.String},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Voids the records.
            </summary>
            <param name="fileNames">The file names.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A set of ids of the records that were voided.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRAService.FindAll(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all YearEndRaInfos for the provided file names.
            </summary>
            <param name="federalFileName">The federal file name.</param>
            <param name="fileName">The state or local file name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of matching YearEndRAInfos.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRAService.ResolveRaAndReRecords(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Finds or creates RA and RE records for the federal file, state and local file, and Year End Agencies.
            </summary>
            <param name="federalFileName">The federal file name.</param>
            <param name="fileName">The state or local file name.</param>
            <param name="distinctPayeeId">The distinct payee ids.</param>
            <param name="eventDataParams">The event data params.</param>
            <returns>Dictionary of RA and it's corresponding RE record.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRAService.FindAll(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all YearEndRaInfos for the provided file name.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of matching YearEndRAInfos.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRAService.FailRecords(System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Set status to fail for all RA records with the given federal file name and import file name and sets the status to fail for all RE records related to those RA records.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success, otherwise false.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndROService">
            <summary>
            An interface for Aggregate Ingested RO Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndROService.FindOne(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds one RO record by RA/RE/RW id (IX_RA_RE_RW)
            </summary>
            <param name="raId">The RA identifier.</param>
            <param name="reId">The RE identifier.</param>
            <param name="rwId">The RW identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The RO record.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndROService.UpdateImportedROInfo(TaxHub.Models.YearEnd.Commands.YearEndPostRODuplicateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the ingested RO Record with the respective information.
            </summary>
            <param name="command">The command with the context info</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of UpdateAggregateResultState type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndROService.ResolveRoRecordForQrf(TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Resolves the RO record for QRF.
            </summary>
            <param name="fedRw">The federal RW record.</param>
            <param name="qrfRw">The RW record created for QRF.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The RO record.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndRSService">
            <summary>
            An interface for aggregate ingested RS service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRSService.UpdateImportedRSInfo(TaxHub.Models.YearEnd.Commands.YearEndPostRSDuplicateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the ingested RS Record with the respective information.
            </summary>
            <param name="command">The command with the context info.</param>
            <param name="eventData">The event data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An instance of UpdateAggregateResultState type.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRSService.FindAll(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all RS records given an ReId, RwId and a social security number.
            </summary>
            <param name="reId">The re id.</param>
            <param name="rwId">The rw id.</param>
            <param name="ssn">The social security number.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRSService.FindAllByREID(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all RS records given an ReId
            </summary>
            <param name="reId">The RE Id</param>
            <param name="cancellationToken">The Cancllation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRSService.FindAllByIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all RS records given a collection of RSIds
            </summary>
            <param name="rsIds">The collection of RS Ids to lookup</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndRWService">
            <summary>
            An interface for Aggregate Ingested RW Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRWService.UpdateImportedRWInfo(TaxHub.Models.YearEnd.Commands.YearEndPostRWDuplicateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the ingested RW Record with the respective post information
            </summary>
            <param name="command">The command with the context info</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of UpdateAggregateResultState type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRWService.FindAll(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds year end RW info record using the RE record ID and the SSN.
            </summary>
            <param name="reId">The RE id.</param>
            <param name="socialSecurityNumber">The social security number.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The year end RW info record.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRWService.FindAll(System.Int32,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all instances of <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> for the provided parameters.
            </summary>
            <remarks>Useful when querying for a specific employee by name when they all an SSN of all 0's</remarks>
            <param name="reId">The REID.</param>
            <param name="firstName">The employee first name.</param>
            <param name="lastName">The employee last name.</param>
            <param name="middleName">The employee middle name.</param>
            <param name="suffix">The employee suffix.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of YearEndRwInfo</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRWService.FindAll(System.Int32,System.String,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Retrieves all instances of <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> for the provided parameters.
            </summary>
            <param name="reId">The REID.</param>
            <param name="firstName">The employee first name.</param>
            <param name="lastName">The employee last name.</param>
            <param name="middleName">The employee middle name.</param>
            <param name="pagedDataParameters">The paged data parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of YearEndRwInfo</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRWService.FindOneForEmployee(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds one RW record for a given employee
            </summary>
            <param name="reId">The RE record identifier.</param>
            <param name="ssn">The employee's social security number.</param>
            <param name="firstName">The employee's first name.</param>
            <param name="lastName">The employee's last name.</param>
            <param name="middleName">The employee's middle name.</param>
            <param name="suffix">The employee's suffix.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The RW record.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndRWService.ResolveRwRecordForQrf(System.Int32,System.Int32,System.Int32,TaxHub.Models.YearEndIngestion.QrfEmployeeData,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Resolves the RW record for a given RE (employer), SSN (employee), YE_Agency (PayeeId) combination.
            If the RW record does not exist, it will be created and returned. Otherwise, the existing record will be returned.
            </summary>
            <param name="raId">The RA identifier.</param>
            <param name="reId">The RE identifier.</param>
            <param name="federalReId">The RE identifier of the IRS RE record for the given employer.</param>
            <param name="employeeData">The SSN of the employee.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The RW record resolve result for the given parameters.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService.MarkTaxFileRequestAsInProgress(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Will create a tax file with status unknown and mark the status of the request as InProgress
            </summary>
            <param name="taxFileRequestId">The Tax File Request Id</param>
            <param name="correlationId">The Correlation Id</param>
            <param name="eventData">The Event data</param>
            <returns>An Operation Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService.MarkTaxFileRequestAsFailed(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Will mark the status of the request as Failed
            </summary>
            <param name="taxFileRequestId">The Tax File Request Id</param>
            <param name="correlationId">The Correlation Id</param>
            <param name="eventData">The Event data</param>
            <returns>An Operation Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService.FindById(System.Int32,System.Guid)">
            <summary>
            Fetches a Tax File Request using an id
            </summary>
            <param name="taxFileRequestId">The id</param>
            <param name="correlationId">The correlaiton id</param>
            <returns>An instance of a Tax File Request</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService.FindByStatus(TaxHub.Common.Enums.YearEndTaxFileRequestStatus,System.Guid)">
            <summary>
            Retrieves all tax file requests by status
            </summary>
            <param name="taxFileRequestStatus">The tax file request ststus</param>
            <param name="correlationId">The correlation id</param>
            <returns>An enumerable of tax file requests</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService.ProcessInProgressStatus(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Processes the InProgress Status
            </summary>
            <param name="aggregateId">The Tax File Request Id</param>
            <param name="correlationId">The Correlation Id</param>
            <param name="eventDataParams">The event data params</param>
            <returns>An Operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService.ProcessFailedStatus(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Processes the Failed Status
            </summary>
            <param name="aggregateId">The Tax File Request Id</param>
            <param name="correlationId">The Correlation Id</param>
            <param name="eventDataParams">The event data params</param>
            <returns>An Operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService.UpdateStatus(TaxHub.Common.Enums.YearEndTaxFileRequestStatus,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Update the TaxFileRequest with a given Status
            </summary>
            <param name="newStatus">The new status</param>
            <param name="taxFileRequestId">The tax file request id</param>
            <param name="correlationId">The Correlation Id</param>
            <param name="eventDataParams">The event data params</param>
            <returns>An Operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService.ClientFilesInStatus(System.String,System.Int32,TaxHub.Common.Enums.YearEndTaxFileRequestStatus)">
            <summary>
            Validates if there are files in the status for the clientId and Tax Year
            </summary>
            <param name="clientId">The clientId</param>
            <param name="taxYear">The tax year</param>
            <param name="status">The request status</param>
            <returns>An instance of a Tax File Request</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService.HasExportedFiles(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            HasExportedFiles
            </summary>
            <param name="clientIds">clientIds</param>
            <param name="taxYear">taxYear</param>
            <returns>Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.CreateYearEndTaxFile(TaxHub.Models.YearEnd.YearEndTaxFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a Tax File
            </summary>
            <param name="yeTaxFile">The Tax File Instance to create (persist)</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.BulkCreateYearEndTaxFiles(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndTaxFile},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a a Collection of Tax Files
            </summary>
            <param name="yeTaxFiles">The Tax File Instance Collection to create (persist)</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.FindById(System.Int32,System.Guid)">
            <summary>
            Fetches a tax file from the repo
            </summary>
            <param name="taxFileId">The tax file id</param>
            <param name="correlationId">The correlation id</param>
            <returns>A tax file</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.FindByTaxFileRequestId(System.Int32,System.Guid)">
            <summary>
            Fetches a tax file from the repo
            </summary>
            <param name="taxFileRequestId">The tax file request id</param>
            <param name="correlationId">The correlation id</param>
            <returns>A tax file</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.FindAllByTaxFileRequestId(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Fetches all tax files from the repo by it's request id
            </summary>
            <param name="taxFileRequestId">The tax file request id</param>
            <param name="correlationId">The correlation id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A tax file</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.MarkTaxFileAsGenerating(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Marks the tax file as in progress
            </summary>
            <param name="id">The tax file id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data parameters</param>
            <returns>An Operation Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.MarkTaxFileAsSaved(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Marks the tax file as saved
            </summary>
            <param name="id">The tax file id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data parameters</param>
            <returns>An Operation Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.MarkTaxFileAsExported(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Marks the file as exported
            </summary>
            <param name="id">The tax file id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data parameters</param>
            <returns>An Operation Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.MarkTaxFileAsFailed(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Marks the tax file as failed
            </summary>
            <param name="id">The tax file id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data parameters</param>
            <returns>An Operation Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.SaveFileToRemoteStorage(System.Byte[],TaxHub.CommonServices.FileManagement.Models.FileInfo,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Saves the generated file to Object Storage
            </summary>
            <param name="fileContents">The file contents</param>
            <param name="fileInfoModel">The FileInfo Model</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data parameters</param>
            <returns>A bool with the results of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.SaveFileToRemoteStorage(System.String,TaxHub.CommonServices.FileManagement.Models.FileInfo,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Saves the generated file to Object Storage
            </summary>
            <param name="filePath">The file path</param>
            <param name="fileInfoModel">The FileInfo Model</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data parameters</param>
            <returns>A bool with the results of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.GetTaxFilesByAgency(System.String,System.Int32,TaxHub.Common.Enums.YearEndAgencyFileType,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Returns a collection of taxfiles per each agency
            </summary>
            <param name="yeAgencyId">The YE Agency</param>
            <param name="taxYear">The tax year</param>
            <param name="fileType">Yhe file type</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data parameters</param>
            <returns>An OperationResult and a collection of YearEndTaxFiles</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.UpdateFileInfosById(System.Int32,TaxHub.Models.Commands.YearEndTaxFileGeneratedCommand,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Update the tax file file info information
            </summary>
            <param name="id">The tax file id</param>
            <param name="updateCommand">The update command</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data parameters</param>
            <returns>An updateAggregateResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.FileExists(System.String)">
            <summary>
            FileExists
            </summary>
            <param name="filePath">filePath</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService.GetTempFileName">
            <summary>
            GetTempFileName
            </summary>
            <returns>temp file name</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService">
            <summary>
            An interface for the overall Year end processing service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.InitiateYearEndPost(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Initiates a Year End Post
            </summary>
            <param name="yePostCommand">The year-end post command.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.PostYearEnd(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Executes a full Year End POST process request
            </summary>
            <param name="command">The command with the context info</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False of error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.DeleteSessionLock(TaxHub.Models.Commands.YearEndPostCommand,System.Threading.CancellationToken)">
            <summary>
            Deletes the YE locked session
            </summary>
            <param name="command">The command with the context info</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False of error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.AcquireSessionLock(TaxHub.Models.Commands.YearEndPostCommand,System.Threading.CancellationToken)">
            <summary>
            Locks the requested client
            </summary>
            <param name="command">The command with the context info</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if lock successful</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.DeleteSessionLock(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Deletes the YE locked session for the given clientId/session id
            </summary>
            <param name="clientId">The clientId</param>
            <param name="sessionId">The session ID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False of error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.AcquireSessionLock(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Locks the requested client using the given sessionId
            </summary>
            <param name="clientId">The clientId</param>
            <param name="sessionId">The session ID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if lock successful</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.UpdatePhaseStatus(TaxHub.Models.YearEnd.YearEndProcessing,TaxHub.Common.Enums.YearEndPhaseStatus,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update the status of a W_phase record
            </summary>
            <param name="processInfo">The record to be updated.</param>
            <param name="status">The new status</param>
            <param name="eventDataParams">The event data instance</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The updated aggregate</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.UpdatePhaseStatus(System.Int32,TaxHub.Common.Enums.YearEndPhaseStatus,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update the status of a W_phase record
            </summary>
            <param name="phaseId">The Id of the record</param>
            <param name="status">The new status</param>
            <param name="eventDataParams">The event data instance</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The updated aggregate</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.PostCompleteYearEnd(TaxHub.Models.Commands.YearEndPostCompleteCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Executes a post completed service event that moves MultiFein children to Phase 6
            </summary>
            <param name="command">The command with the context info</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.UpdatePackageStatus(System.Int32,TaxHub.Models.YearEnd.YearEndProcessing,TaxHub.Models.PackageGeneration.PackageGenerationStatus,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the PackageGenerationStatus
            </summary>
            <param name="id">The phaseId</param>
            <param name="yearEndProcessing">The yearEndProcessing</param>
            <param name="status">The employer PackageGenerationStatus</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An UpdateAggregateResultState value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.UpdatePackageStatus(System.Int32,TaxHub.Models.YearEnd.YearEndProcessing,TaxHub.Models.YearEnd.Commands.UpdatePackageStatusCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the PackageGenerationStatus
            </summary>
            <param name="id">The phaseId</param>
            <param name="yearEndProcessing">The yearEndProcessing</param>
            <param name="updatePackageStatusCommand">Update package status command</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An UpdateAggregateResultState value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.FindOne(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds an instance by id.
            </summary>
            <param name="id">The id of the instance.</param>
            <param name="correlationId">A correlation Id</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The aggregate instance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.FindAllByTaxYear(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find all instances of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessing"/> by tax year
            </summary>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An enumeration of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessing"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.FindOneByProcessInfo(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds an instance by relevant process info.
            </summary>
            <param name="processorId">The processor Id</param>
            <param name="clientId">A client Id</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The aggregate instance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.FindPostInPhase(System.String,System.Int32,TaxHub.Common.Enums.YearEndPhase,System.Threading.CancellationToken)">
            <summary>
            Finds an instance by client, tax year and a particular phase
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="phase">The YE phase</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The aggregate instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.PostRollbackYearEnd(TaxHub.Models.Commands.YearEndPostRollbackCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Executes a full Year End POST Rollback
            </summary>
            <param name="command">The command with the context info</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False of error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.UpdatePhase(System.String,System.String,System.Int32,TaxHub.Common.Enums.YearEndPhase,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the current phase for a year end processing. 
            </summary>
            <param name="processorId">The processor id.</param>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="phase">The new year end phase.</param>
            <param name="eventDataParams">The event data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.UpdatePhase(System.String,System.Int32,TaxHub.Common.Enums.YearEndPhase,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the current phase for a year end processing. 
            </summary>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="phase">The new year end phase.</param>
            <param name="eventDataParams">The event data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.InitiatePostYearEndRollBack(TaxHub.Models.Commands.YearEndPostRollbackCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Initiates Post YearEnd RollBack
            </summary>
            <param name="command">YearEndPostRollbackCommand</param>
            <param name="eventDataParams">EventDataParams</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.PostRollbackYearEndMultiFein(TaxHub.Models.Commands.YearEndPostRollbackCommand,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Rollback YearEnd For MultiFein
            </summary>
            <param name="yearEndPostRollbackCommand">yearEndPostRollbackCommand</param>
            <param name="eventDataParams">EventDataParams</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.PostRollbackYearEndCommonPay(TaxHub.Models.Commands.YearEndPostRollbackCommand,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Rollback YearEnd For MultiFein
            </summary>
            <param name="yearEndPostRollbackCommand">yearEndPostRollbackCommand</param>
            <param name="eventDataParams">EventDataParams</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.PreparePostCompleteCommand(TaxHub.Models.Commands.YearEndPostCompleteCommand,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Prepares the post year end command by populating the client and agency collections
            </summary>
            <param name="command">The command to prepare.</param>
            <param name="correlationId">The collection id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task to await preparation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.ForcePostYearEnd(TaxHub.Models.Commands.YearEndForcePostCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Forces a client to be pushed to phase 6 without going through the typical process
            </summary>
            <param name="command">The force post command.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService.UnbalancedFederalTotals(System.String,System.Int32,System.Guid,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Retrieves the QRF and RW federal wages and taxes which should match or have a difference up to the acceptable difference
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="correlationId">The correlation Id</param>
            <param name="acceptableDifference">The acceptable difference margin</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if at least one amount is unbalance and outside the acceptable difference limit</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndProcessInfoService">
            <summary>
            The implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndProcessInfoService" />
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndProcessInfoService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndProcessInfoRepository)">
            <summary>
            The consstructor
            </summary>
            <param name="logger">The application Logger</param>
            <param name="messageHub">The messageHub for publishing events</param>
            <param name="yearEndProcessInfoRepository">The repository implementation</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndProcessInfoService.RegisterProcessInfo(TaxHub.Models.Commands.YearEndProcessInfoCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Registers an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo" />
            </summary>
            <param name="processInfoCreateCommand">The command with the event info</param>
            <param name="eventDataParams">The event params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if registered, False if not</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndProcessInfoService.FindAllByCorrelationIdAndEventType(System.Guid,TaxHub.Common.Enums.YearEndProcessEventType,System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instances for a correlationId
            </summary>
            <param name="correlationId">The correlationId</param>
            <param name="eventType">The eventType</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndProcessInfoService.CreateProcessInfo(TaxHub.Models.Commands.YearEndProcessInfoCreateCommand)">
            <summary>
            Converts a <see cref="T:TaxHub.Models.Commands.YearEndProcessInfoCreateCommand" /> instance to a <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo" /> one
            </summary>
            <param name="processInfoCreateCommand">The command with the info</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo" /> type</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndRAService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndRAService"/> implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRAService.#ctor(TaxHub.CoreServices.DataAccess.IYearEndRARepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndRAService" />.
            </summary>
            <param name="yearEndRARepository">The repository.</param>
            <param name="domainService">The domain service..</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The logger.</param>
            <param name="metricsBuilder">The metrics builder</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndRAService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndRAService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRAService.InitializeNew(TaxHub.Models.YearEnd.YearEndRAInfo)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRAService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRAService.FindAll(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRAService.FindAll(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRAService.Fail(TaxHub.Models.YearEnd.YearEndRAInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRAService.VoidRecords(System.Collections.Generic.ISet{System.String},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRAService.FailRecords(System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRAService.ResolveRaAndReRecords(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.ResolveRAAndRERecordsResult">
            <summary>
            The result of resolving RA and RE records.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ResolveRAAndRERecordsResult.PayeeId">
            <summary>
            Gets or sets the payee id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ResolveRAAndRERecordsResult.YearEndRAInfo">
            <summary>
            Gets or sets the year end RA info.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.ResolveRAAndRERecordsResult.YearEndREInfo">
            <summary>
            Gets or sets the year end RE info.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.InitializeNew(TaxHub.Models.YearEnd.YearEndAgency)">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.EventInstanceDeleted">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.FindAllByYearEndAgencyIdAndTaxYear(System.String,System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.FindOneByYearEndAgencyIdAndTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.FindAllByAgencies(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.FindOneByUltiProAgencyAndTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.FindOne(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.Update(TaxHub.Models.YearEnd.YearEndAgency,TaxHub.Models.Commands.YearEndAgencyUpdateCommand,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.FindAllThatGeneratesRW(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.IsFederalAgency(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndAgencyService.GetAgencyLocalityType(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndREService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndREService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.#ctor(TaxHub.CoreServices.DataAccess.IYearEndRERepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndREService" />
            </summary>
            <param name="yearEndRERepository">The repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndREService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndREService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.InitializeNew(TaxHub.Models.YearEnd.YearEndREInfo)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.FindAllByRaIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.FindOneFederal(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.Fail(TaxHub.Models.YearEnd.YearEndREInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.VoidRecords(System.Collections.Generic.ISet{System.Int32},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.UpdatePostInfo(TaxHub.Models.YearEnd.Commands.YearEndPostREPostInfoUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.FindAllByClientAndYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.FindOneByClientAndYearAndYeAgency(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.FindAllByClientAndYearAndYeAgency(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.FindAll(System.Int32,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.MultiClientParentAddREs(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.RaiseLogRegistrationEvent(TaxHub.Models.Events.TaxYearEndProcessInfoLogEvent)">
            <summary>
            Published the Year End Process Info Service Requested event
            </summary>
            <param name="logInfoEvent">The log event information</param>
            <returns>A flag indicating the status of the publishing</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndREService.FindMultiClientParentMissingREs(TaxHub.Models.Commands.YearEndPostCommand,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndRFService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndRFService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRFService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndRFRepository)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndRFService"/>.
            </summary>
            <param name="yearEndRFRepository">The repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndRFService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndRFService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRFService.InitializeNew(TaxHub.Models.YearEnd.YearEndRFInfo)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndRTService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndRTService"/> Implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRTService.#ctor(TaxHub.CoreServices.DataAccess.IYearEndRTRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndRTService"/>
            </summary>
            <param name="yearEndRTRepository">The repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndRTService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndRTService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRTService.InitializeNew(TaxHub.Models.YearEnd.YearEndRTInfo)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndRUService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndRUService"/> Implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRUService.#ctor(TaxHub.CoreServices.DataAccess.IYearEndRURepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndRUService"/>
            </summary>
            <param name="yearEndRURepository">The repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndRUService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndRUService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRUService.InitializeNew(TaxHub.Models.YearEnd.YearEndRUInfo)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndRVService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndRVService"/> Implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRVService.#ctor(TaxHub.CoreServices.DataAccess.IYearEndRVRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndRVService"/>
            </summary>
            <param name="yearEndRVRepository">The repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndRVService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndRVService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRVService.InitializeNew(TaxHub.Models.YearEnd.YearEndRVInfo)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostRAService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRAService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRAService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndRARepository,TaxHub.CoreServices.DataAccess.IYearEndPostRARepository)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostRAService" /> class.
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /></param>
            <param name="messageHub">An implementation of the <see cref="T:TaxHub.Messaging.IMessageHub" /></param>
            <param name="yearEndRARepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndRARepository" /></param>
            <param name="yearEndPostRARepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndPostRARepository" /></param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRAService.PostRA(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Executes the actual posting of Ingested RA records.
            </summary>
            <param name="command">The command info</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The POSTed RAID or zero in case of an error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRAService.DigestRAInfo(TaxHub.Models.YearEnd.YearEndRAInfo)">
            <summary>
            Digests and converts a <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo" /> instance to <see cref="T:TaxHub.Models.YearEnd.YearEndPostRAInfo" /> instance
            </summary>
            <param name="raInfo">A <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo" /> instance</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndPostRAInfo" /> instance</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndRERepository,TaxHub.CoreServices.DataAccess.IYearEndPostRERepository,TaxHub.CoreServices.Application.YearEnd.Mappers.IAccountNumberMapperFactory,TaxHub.CoreServices.Application.YearEnd.Process.IYearEndPreparerService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService" /> class.
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /></param>
            <param name="messageHub">An implementation of the <see cref="T:TaxHub.Messaging.IMessageHub" /></param>
            <param name="yearEndRERepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndRERepository" /></param>
            <param name="yearEndPostRERepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndPostRERepository" /></param>
            <param name="accountNumberMapperFactory">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Mappers.IAccountNumberMapperFactory" /></param>
            <param name="yearEndPreparerService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Process.IYearEndPreparerService"/></param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService.PostRE(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.YearEnd.YearEndREInfo,System.Int32,TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Executes the actual posting of Ingested RE records.
            </summary>
            <param name="command">The command info</param>
            <param name="reInfo">The RE info.</param>
            <param name="postRAId">The RAID from posting the ingested RA info</param>
            <param name="clientAgencyInfo">The client agency.</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.CoreServices.Application.YearEnd.REProcessInfo" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService.DigestREInfo(TaxHub.Models.YearEnd.YearEndREInfo)">
            <summary>
            Digests and converts a <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> instance to <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> instance
            </summary>
            <param name="reInfo">A <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> instance</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService.GetPostREInfo(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a POSTed <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> instance
            </summary>
            <param name="raId">The POSTed submitter Id</param>
            <param name="reId">The POSTed employeer Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService.UpdateStatus(System.Int32,System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the status of an POSTed <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> instance
            </summary>
            <param name="raId">The POSTed submitter Id</param>
            <param name="reId">The POSTed employeer Id</param>
            <param name="validStatus">The valid status</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An UpdateAggregateResultState value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService.UpdateRecordContent(System.Int32,System.Int32,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService.GetPostREInfos(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService.GetPostREInfoByReId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService.FindOneByAgency(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService.FindOneByClientId(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostREService.FindAllByClientAndYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostROService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostROService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostROService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndRORepository,TaxHub.CoreServices.DataAccess.IYearEndPostRORepository)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostROService" /> class.
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /></param>
            <param name="messageHub">An implementation of the <see cref="T:TaxHub.Messaging.IMessageHub" /></param>
            <param name="yearEndRORepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndRORepository" /></param>
            <param name="yearEndPostRORepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndPostRORepository" /></param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostROService.ProcessOptionalWages(System.Int32,System.Int32,System.Int32,System.Int32,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes and POSTs all Optional Wages for a particular employee
            </summary>
            <param name="raId">The POSTed submitter Id</param>
            <param name="reId">The POSTed employeer Id</param>
            <param name="sourceReId">The ingested RE Id</param>
            <param name="rwId">The Regular Wages Id</param>
            <param name="ssn">The employee SSN</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.CoreServices.Application.YearEnd.ROProcessResponse" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostROService.PostRO(TaxHub.Models.YearEnd.YearEndROInfo,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Prepares and executes the actual RO Posting
            </summary>
            <param name="roInfo">A <see cref="T:TaxHub.Models.YearEnd.YearEndROInfo" /> instance</param>
            <param name="recordContent">The Record Content</param>
            <param name="raId">The POSTed submitter Id</param>
            <param name="reId">The POSTed employeer Id</param>
            <param name="sourceReId">The ingested RE Id</param>
            <param name="rwId">The Regular Wages Id</param>
            <param name="line">The current file line number</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult" /> value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostROService.PreparePostROInfo(TaxHub.Models.YearEnd.YearEndROInfo,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Digests and converts a <see cref="T:TaxHub.Models.YearEnd.YearEndROInfo" /> instance to <see cref="T:TaxHub.Models.YearEnd.YearEndPostROInfo" /> instance
            </summary>
            <param name="roInfo">A <see cref="T:TaxHub.Models.YearEnd.YearEndROInfo" /> instance</param>
            <param name="recordContent">The instance Record content</param>
            <param name="raId">The POSTed submitter Id</param>
            <param name="reId">The POSTed employeer Id</param>
            <param name="sourceReId">The ingested RE Id</param>
            <param name="rwId">The Regular Wages Id</param>
            <param name="line">The current file line number</param>
            <param name="userId">The user</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndPostROInfo" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostROService.UpdateDuplicate(TaxHub.Models.YearEnd.Commands.YearEndPostRODuplicateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Searches and Updates any RO duplicate records
            </summary>
            <param name="command">The command data</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A UpdateAggregateResultState value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostROService.FindAllOptionalWages(System.Int32,System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRSService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndRSRepository,TaxHub.CoreServices.DataAccess.IYearEndPostRSRepository,TaxHub.CoreServices.Application.YearEnd.Mappers.IAccountNumberMapperFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService" /> class.
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /></param>
            <param name="messageHub">An implementation of the <see cref="T:TaxHub.Messaging.IMessageHub" /></param>
            <param name="yearEndRSRepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndRSRepository" /></param>
            <param name="yearEndPostRSRepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndPostRSRepository" /></param>
            <param name="accountNumberMapperFactory">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.Mappers.IAccountNumberMapperFactory" /></param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService.GetEmployeesToProcess(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a hashset with the Employees to be processed under the specific employeer Id
            </summary>
            <param name="reId">The employeer id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A HashSet with the employee SSNs to process</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService.ProcessStateWages(System.Int32,System.Int32,System.Int32,System.Int32,System.String,TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService.ProcessMultipleStateWages(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService.PostRS(TaxHub.Models.YearEnd.YearEndPostRSInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Executes the actual State wage posting
            </summary>
            <param name="postRSInfo">A <see cref="T:TaxHub.Models.YearEnd.YearEndPostRSInfo" /> instance</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult" /> value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService.PreparePostRSInfo(TaxHub.Models.YearEnd.YearEndRSInfo,TaxHub.CoreServices.Application.YearEnd.RSProcessTotals,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Digests and converts a <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo" /> instance to <see cref="T:TaxHub.Models.YearEnd.YearEndPostRSInfo" /> instance
            </summary>
            <param name="rsInfo">A <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo" /> instance</param>
            <param name="rsTotals">A <see cref="P:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService.RSProcessTotals" /> instance</param>
            <param name="raId">The POSTed submitter Id</param>
            <param name="reId">The POSTed employeer Id</param>
            <param name="sourceREId">The ingested RE Id</param>
            <param name="rwId">The Regular Wages Id</param>
            <param name="line">The current file line number</param>
            <param name="userId">The user</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndPostRSInfo" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService.UpdateDuplicate(TaxHub.Models.YearEnd.Commands.YearEndPostRSDuplicateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Searches and Updates any RS duplicate records
            </summary>
            <param name="command">The command data</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A UpdateAggregateResultState value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService.RaiseLogRegistrationEvent(TaxHub.Models.Events.TaxYearEndProcessInfoLogEvent)">
            <summary>
            Published the Year End Process Info Service Requested event
            </summary>
            <param name="logInfoEvent">The log event information</param>
            <returns>A flag indicating the status of the publishing</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService.CleanUpDuplicateRSRecords(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndRSInfo},System.String,System.Int32,System.Guid)">
            <summary>
            Cleans up list, grabs the first RS, checks against the rest,
            if it finds one, gets dropped from the final list and marked
            as a duplicate
            </summary>
            <param name="rsInfosWithPossibleDuplicates">List with possible duplicates</param>
            <param name="clientId">The client id</param>
            <param name="taxYear">The tax year</param>
            <param name="correlationId">The correlation id</param>
            <returns>Two enumerables, item1: the cleaned up list</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService.FindIngestionRSDuplicates(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndRSInfo},System.Collections.Generic.Dictionary{System.Int32,TaxHub.Models.YearEnd.YearEndRSInfo},System.Collections.Generic.List{TaxHub.Models.YearEnd.YearEndRSInfo})">
            <summary>
            Finds a set of duplicate Ingestion RS 
            </summary>
            <param name="collectionWithPossibleDuplicates">The list with possible duplicates</param>
            <param name="uniqueRSs">The unique set of results</param>
            <param name="duplicateRSs">The duplicates</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRSService.FindPostRSDuplicates(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndPostRSInfo},System.Collections.Generic.Dictionary{System.Int32,TaxHub.Models.YearEnd.YearEndPostRSInfo},System.Collections.Generic.List{TaxHub.Models.YearEnd.YearEndPostRSInfo})">
            <summary>
            Finds a set of duplicate Post RS 
            </summary>
            <param name="collectionWithPossibleDuplicates">The list with possible duplicates</param>
            <param name="uniqueRSs">The unique set of results</param>
            <param name="duplicateRSs">The duplicates</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostRTService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRTService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRTService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndRTRepository,TaxHub.CoreServices.DataAccess.IYearEndPostRTRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostRTService" /> class.
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /></param>
            <param name="messageHub">An implementation of the <see cref="T:TaxHub.Messaging.IMessageHub" /></param>
            <param name="yearEndRTRepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndRTRepository" /></param>
            <param name="yearEndPostRTRepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndPostRTRepository" /></param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRTService.ProcessEmployeeWagesTotals(System.Int32,System.Int32,TaxHub.CoreServices.Application.YearEnd.RWProcessTotals,System.Int32,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processses the totals of all employee wages
            </summary>
            <param name="raId">The POSTed submitter Id</param>
            <param name="reId">The POSTed employeer Id</param>
            <param name="rwProcessTotals">A <see cref="T:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals" /> with the Regular Wages Totals</param>
            <param name="rwCounter">All the regular wages instances</param>
            <param name="line">The current file line number</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRTService.PostRT(TaxHub.Models.YearEnd.YearEndPostRTInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Prepares and executes the actual RT Posting
            </summary>
            <param name="postRTInfo">A <see cref="T:TaxHub.Models.YearEnd.YearEndPostRTInfo" /> instance</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation tokens</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult" /> value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRTService.PreparePostRTInfo(System.Int32,System.Int32,System.Int32,System.String,TaxHub.CoreServices.Application.YearEnd.RWProcessTotals,System.Int32,System.String)">
            <summary>
            Digests and converts all infor to <see cref="T:TaxHub.Models.YearEnd.YearEndPostRTInfo" /> instance
            </summary>
            <param name="raId">The POSTed submitter Id</param>
            <param name="reId">The POSTed employeer Id</param>
            <param name="rwCounter">All the regular wages instances</param>
            <param name="recordContent">The current Record Content</param>
            <param name="rwProcessTotals">A <see cref="T:TaxHub.CoreServices.Application.YearEnd.RWProcessTotals" /> with the Regular Wages Totals</param>
            <param name="line">The current file line number</param>
            <param name="userId">The user</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndPostRTInfo" /> instance</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostRUService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRUService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRUService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndRURepository,TaxHub.CoreServices.DataAccess.IYearEndPostRURepository)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostRUService" /> class.
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /></param>
            <param name="messageHub">An implementation of the <see cref="T:TaxHub.Messaging.IMessageHub" /></param>
            <param name="yearEndRURepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndRURepository" /></param>
            <param name="yearEndPostRURepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndPostRURepository" /></param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRUService.ProcessEmployeeOptionalWagesTotals(System.Int32,System.Int32,TaxHub.CoreServices.Application.YearEnd.ROProcessTotals,System.Int32,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes all Employee optional wages totals
            </summary>
            <param name="raId">The POSTed submitter Id</param>
            <param name="reId">The POSTed employeer Id</param>
            <param name="roProcessTotals">A <see cref="T:TaxHub.CoreServices.Application.YearEnd.ROProcessTotals" /> instance</param>
            <param name="roCounter">The total counter of all optional wages</param>
            <param name="line">The current file line number</param>
            <param name="eventDataParams">The event date</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRUService.PostRU(TaxHub.Models.YearEnd.YearEndPostRUInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Executes the actual <see cref="T:TaxHub.Models.YearEnd.YearEndPostRUInfo" /> instance Posting
            </summary>
            <param name="postRUInfo">A <see cref="T:TaxHub.Models.YearEnd.YearEndPostRUInfo" /> instance</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult" /> value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRUService.PreparePostRUInfo(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Digests and converts all info to <see cref="T:TaxHub.Models.YearEnd.YearEndPostRUInfo" /> instance
            </summary>
            <param name="raId">The POSTed submitter Id</param>
            <param name="reId">The POSTed employeer Id</param>
            <param name="roCounter">The total counter of all optional wages</param>
            <param name="recordContent">The current Record content</param>
            <param name="line">The current line number</param>
            <param name="userId">The user</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndPostRUInfo" /> instance</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostRWService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndRWRepository,TaxHub.CoreServices.DataAccess.IYearEndPostRWRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService" /> class.
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /></param>
            <param name="messageHub">An implementation of the <see cref="T:TaxHub.Messaging.IMessageHub" /></param>
            <param name="yearEndRWRepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndRWRepository" /></param>
            <param name="yearEndPostRWRepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndPostRWRepository" /></param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService.GetEmployeesToProcess(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all employees with regular wages to be processed
            </summary>
            <param name="reId">The POSTed employer Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A hashset with all eligible employee SSNs</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService.GetAllEmployeeFederalWages(System.Int32,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService.ProcessFederalWages(System.Int32,System.Int32,System.Int32,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService.ProcessFederalWages(System.Int32,System.Int32,System.Int32,TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService.PostRW(TaxHub.Models.YearEnd.YearEndPostRWInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Executes the actual <see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo" /> instance POSTing
            </summary>
            <param name="postRWInfo">The <see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo" /> instance</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult" /> value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService.PreparePostRWInfo(TaxHub.Models.YearEnd.YearEndRWInfo,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Digests and converts a <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> instance to <see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo" /> instance
            </summary>
            <param name="rwInfo">A <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> instance</param>
            <param name="raId">The POSTed submitter Id</param>
            <param name="reId">The POSTed employeer Id</param>
            <param name="sourceReId">The ingested RE Id</param>
            <param name="line">The current file line number</param>
            <param name="userId">The user</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService.UpdateDuplicate(TaxHub.Models.YearEnd.Commands.YearEndPostRWDuplicateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Searches and Updates any RW duplicate records
            </summary>
            <param name="command">The command data</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A UpdateAggregateResultState value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService.GetEmployeesWageInfos(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService.FindPostRWDuplicates(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndPostRWInfo},System.Collections.Generic.Dictionary{System.Int32,TaxHub.Models.YearEnd.YearEndPostRWInfo},System.Collections.Generic.List{TaxHub.Models.YearEnd.YearEndPostRWInfo})">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndPostRWService.FindIngestionRWDuplicates(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndRWInfo},System.Collections.Generic.Dictionary{System.Int32,TaxHub.Models.YearEnd.YearEndRWInfo},System.Collections.Generic.List{TaxHub.Models.YearEnd.YearEndRWInfo})">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndROService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndROService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndROService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndRORepository,TaxHub.CoreServices.DataAccess.IYearEndRERepository)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndROService" /> class.
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /></param>
            <param name="messageHub">An implementation of the <see cref="T:TaxHub.Messaging.IMessageHub" /></param>
            <param name="yearEndRORepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndRORepository" /></param>
            <param name="yearEndRERepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndRERepository" /></param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndROService.UpdateImportedROInfo(TaxHub.Models.YearEnd.Commands.YearEndPostRODuplicateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the ingested RO Record with the respective post information
            </summary>
            <param name="command">A <see cref="T:TaxHub.Models.YearEnd.Commands.YearEndPostRODuplicateUpdateCommand" /> instance</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An UpdateAggregateResultState value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndROService.ResolveRoRecordForQrf(TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndRSService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndRSService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRSService.UpdateImportedRSInfo(TaxHub.Models.YearEnd.Commands.YearEndPostRSDuplicateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the ingested RS Record with the respective post information
            </summary>
            <param name="command">A <see cref="T:TaxHub.Models.YearEnd.Commands.YearEndPostRSDuplicateUpdateCommand" /> instance</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of UpdateAggregateResultState type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRSService.FindAll(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRSService.FindAllByREID(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRSService.FindAllByIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndRWService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndRWService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRWService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IYearEndRWRepository,TaxHub.CoreServices.DataAccess.IYearEndRERepository,TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndRWService" /> class.
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /></param>
            <param name="messageHub">An implementation of the <see cref="T:TaxHub.Messaging.IMessageHub" /></param>
            <param name="yearEndRWRepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndRWRepository" /></param>
            <param name="yearEndRERepository">An implementation of the <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndRERepository" /></param>
            <param name="domainService">The domain service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRWService.FindAll(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRWService.FindAll(System.Int32,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRWService.FindAll(System.Int32,System.String,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRWService.ResolveRwRecordForQrf(System.Int32,System.Int32,System.Int32,TaxHub.Models.YearEndIngestion.QrfEmployeeData,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndRWService.UpdateImportedRWInfo(TaxHub.Models.YearEnd.Commands.YearEndPostRWDuplicateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the ingested RW Record with the respective post information
            </summary>
            <param name="command">A <see cref="T:TaxHub.Models.YearEnd.Commands.YearEndPostRWDuplicateUpdateCommand" /> instance</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of UpdateAggregateResultState type</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.RwResolveResult">
            <summary>
            The RW resolve result class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RwResolveResult.QrfRwRecord">
            <summary>
            Gets or sets the qrf RW record.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.RwResolveResult.FedRwRecord">
            <summary>
            Gets or sets the federal RW record. 
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService">
            <summary>
            Year End Tax File Request Service Implementation
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.#ctor(TaxHub.CoreServices.DataAccess.IYearEndTaxFileRequestRepository,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            The service constructor 
            </summary>
            <param name="repository">The Tax File Request Repository</param>
            <param name="taxFileService">The tax file service</param>
            <param name="messageHub">The Message hub</param>
            <param name="logger">The App Logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.InitializeNew(TaxHub.Models.YearEnd.YearEndTaxFileRequest)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.GetActionByStatus(TaxHub.Common.Enums.YearEndTaxFileRequestStatus)">
            <summary>
            Returns an action based on the status
            </summary>
            <param name="status">The status</param>
            <returns>The resulting action</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.ChangeStatusHelper(TaxHub.Common.Enums.YearEndTaxFileRequestStatus,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Change Status Helper
            </summary>
            <param name="status">The new status</param>
            <param name="taxFileRequestId">The tax file request id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventData">The event data parameters</param>
            <returns>An Operation Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.EnsureStatusChange(TaxHub.Models.Commands.YearEndTaxFileRequestStatusUpdateCommand,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Ensures the status change
            </summary>
            <param name="updateCommand">The Update Command</param>
            <param name="correlationId">The Correlation id</param>
            <param name="eventData">The event data</param>
            <returns>The Operation Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.MarkTaxFileRequestAsInProgress(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.FindById(System.Int32,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.FindByStatus(TaxHub.Common.Enums.YearEndTaxFileRequestStatus,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.ValidateArguments(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Validates that all arguments are correct
            </summary>
            <param name="aggregateId">The aggregate id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data parameters</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.FetchTaxFileRequest(System.Int32,System.Guid)">
            <summary>
            Fetches a TaxFileRequest from the repository
            </summary>
            <param name="aggregateId">The tax file request id</param>
            <param name="correlationId">The correlation id</param>
            <returns>A tuple with the OperationResult and TaxFileRequest</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.FetchTaxFile(System.Int32,System.Guid)">
            <summary>
            Fetches a TaxFile from the repository
            </summary>
            <param name="aggregateId">The tax file id</param>
            <param name="correlationId">The correlation id</param>
            <returns>A tuple with the OperationResult and TaxFileRequest</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.ProcessInProgressStatus(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.MarkTaxFileRequestAsFailed(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.ProcessFailedStatus(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.UpdateStatus(TaxHub.Common.Enums.YearEndTaxFileRequestStatus,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.ClientFilesInStatus(System.String,System.Int32,TaxHub.Common.Enums.YearEndTaxFileRequestStatus)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileRequestService.HasExportedFiles(System.Collections.Generic.List{System.String},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService">
            <summary>
            Year End Tax File Service Implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.#ctor(TaxHub.CoreServices.DataAccess.IYearEndTaxFileRepository,TaxHub.CommonServices.FileManagement.Application.IFileService,TaxHub.CoreServices.Acl.YE.IYearEndTaxFileTypeMapper,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            The service constructor 
            </summary>
            <param name="repository">The Efw2 Repository</param>
            <param name="fileService">The Object storage file service</param>
            <param name="taxFileTypeMapper">The tax file type mapper</param>
            <param name="messageHub">The Message hub</param>
            <param name="logger">The App Logger</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.InitializeNew(TaxHub.Models.YearEnd.YearEndTaxFile)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.CreateYearEndTaxFile(TaxHub.Models.YearEnd.YearEndTaxFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.BulkCreateYearEndTaxFiles(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndTaxFile},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.FindById(System.Int32,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.FindByTaxFileRequestId(System.Int32,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.FindAllByTaxFileRequestId(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.MarkTaxFileAsGenerating(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.MarkTaxFileAsFailed(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.MarkTaxFileAsSaved(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.MarkTaxFileAsExported(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.ChangeStatusHelper(TaxHub.Common.Enums.YearEndTaxFileStatus,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Change status helper method
            </summary>
            <param name="status">The Status</param>
            <param name="id">The tax file id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">the event data parameters</param>
            <returns>An Operation Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.EnsureStatusChange(TaxHub.Models.Commands.YearEndTaxFileStatusUpdateCommand,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Ensures the status change
            </summary>
            <param name="updateCommand">The Update Command</param>
            <param name="correlationId">The Correlation id</param>
            <param name="eventData">The event data</param>
            <returns>The Operation Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.GetActionByStatus(TaxHub.Common.Enums.YearEndTaxFileStatus)">
            <summary>
            Returns an action based on the status
            </summary>
            <param name="status">The status</param>
            <returns>The resulting action</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.HandleFailedResult(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Marks and process a failed request
            </summary>
            <param name="aggregateId">The aggregate id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data params</param>
            <returns>a task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.GetTaxFilesByAgency(System.String,System.Int32,TaxHub.Common.Enums.YearEndAgencyFileType,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.SaveFileToRemoteStorage(System.Byte[],TaxHub.CommonServices.FileManagement.Models.FileInfo,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.SaveFileToRemoteStorage(System.String,TaxHub.CommonServices.FileManagement.Models.FileInfo,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.ConvertFileContents(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Convert and string enumerable into a byte array
            </summary>
            <param name="fileContents">The file contents as a string enumerable</param>
            <returns>The byte aray</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.UpdateFileInfosById(System.Int32,TaxHub.Models.Commands.YearEndTaxFileGeneratedCommand,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.FileExists(System.String)">
            <summary>
            FileExists
            </summary>
            <param name="filePath">filePath</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxFileService.GetTempFileName">
            <summary>
            GetTempFileName
            </summary>
            <returns>temp file name</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService">
            <summary>
            <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService"/> implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.#ctor(TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService" /> class.
            </summary>
            <param name="domainService">An implementation of the <see cref="T:TaxHub.Hosting.Runtime.IDomainService" /></param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.PostYearEnd(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.ProcessChildCompanies(TaxHub.Models.Client,TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,TaxHub.CoreServices.Application.YearEnd.ProcessEmployeeAccumulators,TaxHub.CoreServices.Application.YearEnd.REProcessInfo,System.String,TaxHub.Models.YearEnd.YearEndREInfo,System.Threading.CancellationToken)">
            <summary>
            Process all the child companies
            </summary>
            <param name="clientInfo">The client</param>
            <param name="command">A year end post command</param>
            <param name="clientAgencyInfo">Client Agency informations</param>
            <param name="eventDataParams">Event data parameters</param>
            <param name="employeeTotals">Employee Totals</param>
            <param name="postREInfo">The Post RE Information</param>
            <param name="yeAgency">The Year End Agency</param>
            <param name="processingRE">The current Processing RE (Ingestion RE)</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A flag with resul</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.PostRollbackYearEnd(TaxHub.Models.Commands.YearEndPostRollbackCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.ExecuteRollback(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Execute the rollback action
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A flag with the result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.RaiseRollbackCompletedEvent(TaxHub.Models.Commands.YearEndPostRollbackCommand,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Raises tax.year-end-post-rollback.completed event when roll back is completed.
            </summary>
            <param name="command">The roll back command.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <remarks>If metrics are needed to record rollbacks, use a different tag than the one used for posting.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.PostCompleteYearEnd(TaxHub.Models.Commands.YearEndPostCompleteCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.UpdatePackageStatus(System.Int32,TaxHub.Models.YearEnd.YearEndProcessing,TaxHub.Models.PackageGeneration.PackageGenerationStatus,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.UpdatePackageStatus(System.Int32,TaxHub.Models.YearEnd.YearEndProcessing,TaxHub.Models.YearEnd.Commands.UpdatePackageStatusCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.UpdatePhase(System.String,System.String,System.Int32,TaxHub.Common.Enums.YearEndPhase,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.UpdatePhase(System.String,System.Int32,TaxHub.Common.Enums.YearEndPhase,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.UpdatePhaseStatus(TaxHub.Models.YearEnd.YearEndProcessing,TaxHub.Common.Enums.YearEndPhaseStatus,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.InitiatePostYearEndRollBack(TaxHub.Models.Commands.YearEndPostRollbackCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.PostRollbackYearEndMultiFein(TaxHub.Models.Commands.YearEndPostRollbackCommand,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.PostRollbackYearEndCommonPay(TaxHub.Models.Commands.YearEndPostRollbackCommand,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.UpdatePhaseStatus(System.Int32,TaxHub.Common.Enums.YearEndPhaseStatus,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.DeleteSessionLock(TaxHub.Models.Commands.YearEndPostCommand,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.AcquireSessionLock(TaxHub.Models.Commands.YearEndPostCommand,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.DeleteSessionLock(System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.AcquireSessionLock(System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.UnbalancedFederalTotals(System.String,System.Int32,System.Guid,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.UpdatePostREStatus(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates the POST RE Status to Valid after everything under this employer was processed
            </summary>
            <param name="command">A <see cref="T:TaxHub.Models.Commands.YearEndPostCommand" /> instance</param>
            <param name="eventDataParams">The event data</param>
            <param name="postRAID">The posted RAID</param>
            <param name="postREID">The posted REID</param>
            <param name="validStatus">The valid status flag</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.InvalidatePostReData(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Int32,System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndREInfo},System.Threading.CancellationToken)">
            <summary>
            Reverses the valid RE Status
            </summary>
            <param name="command">The year end post command.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="postRAID">The post RA ID</param>
            <param name="reInfos">The list of Post RE</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.ProcessRAData(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Executes RA Info POST
            </summary>
            <param name="command">A <see cref="T:TaxHub.Models.Commands.YearEndPostCommand" /> instance</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The new Post RAID</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.ProcessREData(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.YearEnd.YearEndREInfo,TaxHub.Models.Client,System.Int32,TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Executes RE Info POST
            </summary>
            <param name="command">A <see cref="T:TaxHub.Models.Commands.YearEndPostCommand" /> instance</param>
            <param name="reInfo">The RE info.</param>
            <param name="clientInfo">The information about the client</param>
            <param name="postRAID">The posted RAID</param>
            <param name="clientAgencyInfo">The client agency.</param>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.UpdateClientInfo(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.YearEnd.YearEndREInfo,TaxHub.Models.Client,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Updates RE Record Content
            </summary>
            <param name="command">YearEndPostCommand</param>
            <param name="reInfo">The working RE Information</param>
            <param name="clientInfo">The target post client</param>
            <param name="correlationId">correlation Id for logging</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.ProcessEmployees(TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,TaxHub.CoreServices.Application.YearEnd.ProcessEmployeeAccumulators,System.Int32,System.Int32,System.Int32,TaxHub.Models.YearEnd.YearEndREInfo,System.Threading.CancellationToken)">
            <summary>
            Executes RW,RS, RO Info POST
            </summary>
            <param name="command">A <see cref="T:TaxHub.Models.Commands.YearEndPostCommand" /> instance</param>
            <param name="clientAgencyInfo">The client agency.</param>
            <param name="eventDataParams">The event data</param>
            <param name="accumulators">post process employee accumulators</param>
            <param name="postRAID">The posted RAID</param>
            <param name="sourceREID">The REID before POST</param>
            <param name="postREID">The posted REID</param>
            <param name="processingRE">An instance of the processing ingestion RE Record</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.RaiseLogRegistrationEvent(TaxHub.Models.Events.TaxYearEndProcessInfoLogEvent)">
            <summary>
            Published the Year End Process Info Service Requested event
            </summary>
            <param name="logInfoEvent">The log event information</param>
            <returns>A flag indicating the status of the publishing</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.FindOne(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.FindAllByTaxYear(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.FindPostInPhase(System.String,System.Int32,TaxHub.Common.Enums.YearEndPhase,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.FindOneByProcessInfo(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.ProcessRWInfo(System.Int32,System.Int32,System.Int32,System.String,TaxHub.Models.YearEnd.YearEndRWInfo,TaxHub.Models.Commands.YearEndPostCommand,TaxHub.CoreServices.Application.YearEnd.ProcessEmployeeAccumulators,TaxHub.Models.ClientAgency,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes an RWInfo, does not fetch for the FederalWages for the ssn,
            determine is SSN is a duplicate, mark as dupe
            </summary>
            <param name="postRAID">The Post RA Id</param>
            <param name="postREID">The Post RE Id</param>
            <param name="sourceREID">The source RE Id</param>
            <param name="ssn">The social security number</param>
            <param name="rwInfo">The rwinfo</param>
            <param name="command">The year en dpost command</param>
            <param name="accumulators">The process accumulators</param>
            <param name="clientAgencyInfo">The client agency information</param>
            <param name="processMultipleStateWages">Flag that indicates if we need to process multiple RSs </param>
            <param name="eventDataParams">The Event data params</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>A bool with the result of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.CleanUpDuplicateRWRecords(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEnd.YearEndRWInfo},TaxHub.Models.Commands.YearEndPostCommand,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Cleans up list, grabs the first RW, checks agains the rest,
            if it finds one, gets dropped from the final list and marked
            as a duplicate
            </summary>
            <param name="rwInfosWithPossibleDuplicates">List with possible duplictaes</param>
            <param name="command">The year end post command</param>
            <param name="eventDataParams">The event data parameters</param>
            <returns>An enumerable of YearEndRWInfo without duplicates</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndTaxProcessingService.PreparePostCompleteCommand(TaxHub.Models.Commands.YearEndPostCompleteCommand,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndUnityExtensions">
            <summary>
            Extension methods for UnityContainer
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUnityExtensions.RegisterYearEndTypes(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Add service registration for all services used by Year End process to the container.
            </summary>
            <param name="container">Service container</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearEnd.YearEndUtility">
            <summary>
            A class with a set of utilities necessary in the Year End formatting process
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.GetOnlyNumbers(System.String)">
            <summary>
            Retrieves only the digits from the input string
            </summary>
            <param name="str">The string to parse</param>
            <returns>The string with the sequence of digits</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.GetLettersOrDigits(System.String)">
            <summary>
            Retrieves only the letters or digits from the input string
            </summary>
            <param name="str">The string to parse</param>
            <returns>The string with the sequence of letter or digits</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.LeftFillZeros(System.String,System.Int32)">
            <summary>
            Pad Left with zeroes
            </summary>
            <param name="str">The string to Pad with zeroes</param>
            <param name="length">The length of the new string</param>
            <returns>The padded string</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.FillSpaces(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            Pad to the right with spaces and then returns the substring of len length
            </summary>
            <param name="sb">Buffer that accumulates the string being built.</param>
            <param name="str">The string to Pad with spaces.</param>
            <param name="length">Final length to truncate.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.GetSubString(System.String,System.Int32,System.Int32)">
            <summary>
            Returns substring if length of string greater than mentioned length.
            </summary>
            <param name="str">The string to process.</param>
            <param name="startIndex">Start index.</param>
            <param name="length">The length</param>
            <returns>The substring from startIndex if the index + length &lt; str.Length else returns the substring using 0 as startIndex.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.StuffString(System.Text.StringBuilder,System.Int32,System.Int32,System.String)">
            <summary>
            Pads a string
            </summary>
            <param name="text">The original stringbuilder</param>
            <param name="start">Starting position</param>
            <param name="length">Length to pad</param>
            <param name="subtext">The subtext</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.GetDecimalAmount(System.String,System.Int32,System.Int32)">
            <summary>
            Converts a substring of a EFW2 record content to a decimal value.
            </summary>
            <param name="recordContent">Record content</param>
            <param name="startIndex">Start index.</param>
            <param name="length">Lengt to extract. Defaults to 11.</param>
            <returns>The decimal value. The decimal point in the string is assumed (example: 00000005960 returns 59.60m</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.FormatAmount(System.String,System.Int32)">
            <summary>
            Format as amount and left fill with zeroes to match the length
            </summary>
            <param name="str">The string to format.</param>
            <param name="length">The length</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.FormatWholeNumber(System.Int32,System.Int32)">
            <summary>
            Format as a whole number and left fill with zeroes to match the length
            </summary>
            <param name="str">The integer number to format</param>
            <param name="length">The length</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.TransformToWholeNumber(System.Decimal)">
            <summary>
            Transforms a decimal number to a whole number string if it has two zero digits after the decimal
            Example: func(1300.00) = "1300", but func(1300.13) = "1300.13"
            </summary>
            <param name="number">The number to transforms.</param>
            <returns>A transformed string.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.GetSanitizedString(System.String,System.Int32,System.Int32)">
            <summary>
            Extracts a substring and deletes any:
                underscores
                asterisks (stars)
                open paren (
                close paren )
            </summary>
            <param name="value">The string to extract the sanitized string from</param>
            <param name="start">The starting position</param>
            <param name="length">The ending position</param>
            <returns>The sanitized string</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.YE_INBOUND_CONTAINER">
            <summary>
            The object store container name for inbound/imported files
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.YE_OUTBOUND_CONTAINER">
            <summary>
            The object store container name for outbound/output files
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.AddSpacesBegin(System.Int32,System.String)">
            <summary>
            Add spaces to the left side of the string
            </summary>
            <param name="length">Length</param>
            <param name="str">value to pad.</param>
            <returns>Padded value.</returns>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.StateCodes">
            <summary>
            Mapped American Samoa to some value temporarily to get the file generated until the code is updated to use YE Agency
            Mapped PH to PA temporarily to get the file generated until the code is updated to use YE Agency
            { "PH", 42 }, { "AS", 60 }, { "GU", 61 }, { "PR", 62 }, { "VI", 63 }
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.StateProvinceAPOSet">
            <summary>
            StateProvinceAPOSet is a quick lookup to drive behavior related to identifying foreign records
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.OmitHyphensAndSpaces(System.String)">
            <summary>
            Remove hyphens and spaces
            </summary>
            <param name="content">content</param>
            <returns>The value after replace</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.MaskSocialSecurityNumber(System.String)">
            <summary>
            Masks a SSN, leaves last four of the SSN
            unmasked, assumes the SSN is free of hyphens
            and has a length of 9 characters
            </summary>
            <param name="content">The SSN to mask</param>
            <returns>A Masked SSN</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearEnd.YearEndUtility.GetYETaxYear(System.DateTime)">
            <summary>
            Gets the current Tax Year based on filing periods
            </summary>
            <param name="currentDate">The current date.</param>
            <returns>The current filing year for YE</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.TenantService">
            <summary>
            Tenant service implementation.
            </summary>
            <summary>
            Tenant service implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantService.CorrectDedFiltersCreated(TaxHub.Models.Tenant,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantService.#ctor(TaxHub.CoreServices.DataAccess.ITenantRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Acl.Payment.IHubTenantServiceAdapter,TaxHub.Common.Logging.IAppLogger,SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService,TaxHub.CoreServices.Application.IInputTaxInstanceService,TaxHub.CoreServices.Application.IPeriodicTaxInstanceService,TaxHub.Common.Security.Application.ISecurityConfiguration,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.TenantService"/> class.
            </summary>
            <param name="repository">Repository</param>
            <param name="domainService">Domain Service</param>
            <param name="messageHub">The message hub.</param>
            <param name="adapter"> Service Adapter to Hub </param>
            <param name="logger">The application logger.</param>
            <param name="cacheRevocationService">The cache Revocation services</param>
            <param name="cacheManager">The Cache Manager</param>
            <param name="inputTaxInstanceService">The InputTaxInstance Service</param>
            <param name="periodicTaxInstanceService">PeriodicTaxInstance Service</param>
            <param name="securityConfig">Security Config</param>
            <param name="featureToggleConfiguration"> Feature toggle config</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantService.Create(TaxHub.Models.Tenant,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified tenant.
            </summary>
            <param name="tenant">The tenant to create.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating the tenant.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantService.Update(TaxHub.Models.Tenant,TaxHub.Models.Tenant,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates Tenant
            </summary>
            <param name="originalTenant"> The original tenant object</param>
            <param name="tenantCommand"> The tenant object to update</param>
            <param name="eventDataParams">The Event Data Params</param>
            <param name="cancellationToken"> The cancellation token</param>
            <returns> task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantService.SetCommonPay(System.Guid,TaxHub.Models.Commands.TenantCommonPayCommand,System.Guid,TaxHub.Common.Security.UserPrincipal,System.Threading.CancellationToken)">
            <summary>
            SetCommonPay
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="setCommonPayCommand">CommonPay command</param>
            <param name="correlationId">The correlation id</param>
            <param name="user">The User</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>CommonPay</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantService.UpdateSuiRateIntegration(System.Guid,System.Boolean,System.Guid,TaxHub.Common.Security.UserPrincipal,System.Threading.CancellationToken)">
            <summary>
            SUI Rate Integration field determines if Customer is included in receiving
            tax rate updates from UTE to Ulti-Pro. If not checked Customer's tax rate
            will remain as is in Ulti-Pro when UTE tax rate is updated in client agency.
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="value">SUI Rate integration value</param>
            <param name="correlationId">The correlation id</param>
            <param name="user">The User</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>SUI Rate Integration</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantService.CreateOrUpdateUccTenant(TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Tenant,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Update Ucc Tenant.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="tenantCommand">Tenant update command.</param>
            <param name="token">Cancellation Token</param>
            <param name="retryCount">Retry Count</param>
            <returns>
            Aggregate state
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantService.UpdateTenantIntegrationData(TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Tenant,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Update Tenant Integration data.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="tenantCommand">Tenant update command.</param>
            <param name="token">Cancellation Token</param>
            <param name="retryCount">Retry Count</param>
            <returns>
            Aggregate state
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantService.MapAliasToTenantId(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method maps tenant alias to its id.
            </summary>
            <param name="tenantAlias">The tenant alias.</param>
            <param name="correlationId">The correlationId</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Returns a guid.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantService.GetCacheKeys(TaxHub.Models.Tenant)">
            <summary>
            This creates an Array of Cachekeys used for revocation.
            </summary>
            <param name="tenant"> The tenant.</param>
            <returns>It returns an array of string </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IYearlyTaxInstanceService">
            <summary>
            Domain services related to YearlyTaxInstances
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.Create(TaxHub.Models.YearEndIngestion.YearlyTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified YearlyTaxInstance.
            </summary>
            <param name="yearlyTaxInstance">The YearlyTaxInstance.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult"/> representing the result of the operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.FindAll(System.Guid,System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Checks if a yearly tax instance is already imported.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="clientId">The client id.</param>
            <param name="year">The year.</param>
            <param name="isPost">Is post.</param>
            <param name="token">The cancellation token.</param>
            <returns>Matching yearly tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.FindAll(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if a yearly tax instance is already imported.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="clientId">The client id.</param>
            <param name="year">The year.</param>
            <param name="token">The cancellation token.</param>
            <returns>Matching yearly tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.FindAllCreatedPriorToDate(System.DateTime,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all created prior to date.
            </summary>
            <param name="date">The date.</param>
            <param name="pagedData">The paged data.</param>
            <param name="token">The token.</param>
            <returns>All yearly tax instances created prior to date.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.YearEndIngestion.YearlyTaxInstance},System.Int32,TaxHub.Models.YearEndIngestion.YearlyTaxInstance,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params1.</param>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="entity">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.ParentAggregationYearEnd(TaxHub.Models.Commands.YearEndParentAggregationCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Year End Parent Aggregation for Mult-FEIN and Common Pay
            </summary>
            <param name="yeParentAggregationCommand">The Parent Aggregation Command</param>
            <param name="eventDataParams">The Event Data Params</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success, Fallse if failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.Fail(System.Guid,System.String,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Set status to fail to all yearly tax instances for the given tenantid, clientid and tax year.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.FindByParentYeId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the ParentYeId
            </summary>
            <param name="parentYeId">parentYeId</param>
            <param name="token">token</param>
            <returns>ParentYeId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.FindYearlyAmounts(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Finds by the yearly amounts for given tax IDs and YE ID
            </summary>
            <param name="yeId">yeId</param>
            <param name="taxIds">taxIds</param>
            <returns>Returns the ParentYeId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.VoidPreviousYearlyTaxInstanceIfAny(System.Guid,System.String,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Voids the previous yearly tax instance if any.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if void was successful, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.FindCommonPayYearlyTaxInstanceByClientId(System.Guid,System.String,System.Int32,System.Boolean,TaxHub.Models.YearEndIngestion.YearlyTaxInstanceStatus,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Finds the combine payroll by client identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="year">The year.</param>
            <param name="isPost">The posted bit.</param>
            <param name="yearlyStatus">The status.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="token">The token.</param>
            <returns> Yearly Tax Instance of Common Pay Client </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.PostRollbackYearEndParentAggregation(TaxHub.Models.Commands.YearEndPostRollbackCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            PostRollbackYearEndParentAggregation
            </summary>
            <param name="yearEndPostRollbackCommand">YearEndPostRollbackCommand</param>
            <param name="eventDataParams">EventDataParams</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>True if RollBack is successful, otherwise false</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IYearlyTaxInstanceService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all yearly tax instances.
            </summary>
            <param name="pageParams">The page data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the list of yearly tax instances.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ISessionLockService">
            <summary>
            ISessionLockService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ISessionLockService.ClearSessionLock(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Clears session lock by given session Id and table suffix
            </summary>
            <param name="lockSuffix">table lock name suffix</param>
            <param name="sessionId">session id </param>
            <param name="cancellationToken">cancellation token </param>
            <returns>count of cleared locks</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.SessionLockNotFoundException">
            <summary>
            Instance of SessionLockNotFoundException
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SessionLockNotFoundException.#ctor">
            <summary>
            Initializes an instance of SessionLockNotFoundException
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SessionLockNotFoundException.#ctor(System.String)">
            <summary>
            Initializes an instance of SessionLockNotFoundException
            </summary> 
            <param name="message">message </param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SessionLockNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of SessionLockNotFoundException
            </summary>
            <param name="message">message </param>
            <param name="inner">inner exception </param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ITaxQuarterlyTaxProcessingMetricsService">
            <summary>
            A service for pushing various Tax QE metrics to AppMetrics.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxQuarterlyTaxProcessingMetricsService.ProcessCloseLedgerMetrics(System.Int32,System.Int32,System.Int32,System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Records metrics for the closed ledger.
            </summary>
            <param name="year">The quarter the ledger closed in.</param>
            <param name="quarter">The ear the ledger closed in.</param>
            <param name="ledgerId">A ledger id</param>
            <param name="postQeId">A post qe id.</param>
            <param name="correlationId">A correlation id</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns><value>true</value> if the operation succeeded.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxQuarterlyTaxProcessingMetricsService.ProcessQuarterEndPostedMetrics(System.Int32,System.Int32,System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Records metrics for the closed ledger.
            </summary>
            <param name="year">The year the ledger closed in.</param>
            <param name="quarter">The quarter the ledger closed in.</param>
            <param name="postQeId">A post qe id.</param>
            <param name="correlationId">A correlation id</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns><value>true</value> if the operation succeeded.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxQuarterlyTaxProcessingMetricsService.ProcessQuarterEndStatusMetrics(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Records metrics for the QE status.
            </summary>
            <param name="correlationId">A correlation id</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns><value>true</value> if the operation succeeded.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.YearlyTaxInstanceService">
            <summary>
            YearlyTaxInstance service implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearlyTaxInstanceService.#ctor(TaxHub.CoreServices.DataAccess.IYearlyTaxInstanceRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService,TaxHub.CoreServices.Application.IAgencyService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.YearlyTaxInstanceService"/> class.
            </summary>
            <param name="yearlyTaxInstanceRepository">Yearly tax instance repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
            <param name="ultiproTaxCodeMappingCacheService">UltiPro Tax Code Mapping Cache Service</param>
            <param name="agencyService">The Agency Service</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.YearlyTaxInstanceService.EventInstanceCreated">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearlyTaxInstanceService.InitializeNew(TaxHub.Models.YearEndIngestion.YearlyTaxInstance)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearlyTaxInstanceService.FindAll(System.Guid,System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearlyTaxInstanceService.FindAll(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearlyTaxInstanceService.FindAllCreatedPriorToDate(System.DateTime,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearlyTaxInstanceService.FindCommonPayYearlyTaxInstanceByClientId(System.Guid,System.String,System.Int32,System.Boolean,TaxHub.Models.YearEndIngestion.YearlyTaxInstanceStatus,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearlyTaxInstanceService.FindByParentYeId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearlyTaxInstanceService.Fail(System.Guid,System.String,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearlyTaxInstanceService.ParentAggregationYearEnd(TaxHub.Models.Commands.YearEndParentAggregationCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearlyTaxInstanceService.VoidPreviousYearlyTaxInstanceIfAny(System.Guid,System.String,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearlyTaxInstanceService.PostRollbackYearEndParentAggregation(TaxHub.Models.Commands.YearEndPostRollbackCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.YearlyTaxInstanceService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IUltiProTaxCodeMappingService">
            <summary>
            UltiProTaxCodeMapping service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IUltiProTaxCodeMappingService.GetMappingMetadata(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all instances of <see cref="T:TaxHub.Models.UteTaxCodeMetadata"/> by ultipro tax code and client id.
            </summary>
            <param name="ultiProTaxCode">The ultipro tax code.</param>
            <param name="clientId">The client id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Tax code mappings for the given UP tax code</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IUltiProTaxCodeMappingService.GetMappingMetadataForRts(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all instances of <see cref="T:TaxHub.Models.UteTaxCodeMetadata"/> by rts tax code and client id.
            </summary>
            <param name="rtsTaxCode">The rts tax code.</param>
            <param name="clientId">The client id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Tax code mappings for the given UP tax code alias (RTS tax code)</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IUltiProTaxCodeMappingService.GetMappingMetadataForPriorQuarterQrf(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all instances of <see cref="T:TaxHub.Models.UteTaxCodeMetadataExtended"/> by RTS tax code and client id.
            </summary>
            <param name="rtsTaxCode">The RTS tax code.</param>
            <param name="clientId">The client identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Tax code mappings for the given UltiPro tax code alias (RTS tax code)</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.UltiProTaxCodeMappingService">
            <summary>
            UltiProTaxCodeMapping service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiProTaxCodeMappingService.#ctor(TaxHub.Hosting.Runtime.IDomainService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.UltiProTaxCodeMappingService"/>.
            </summary>
            <param name="domainService">The ClientITaxDesc service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiProTaxCodeMappingService.GetMappingMetadata(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiProTaxCodeMappingService.GetMappingMetadataForRts(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiProTaxCodeMappingService.GetMappingMetadataForPriorQuarterQrf(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.UltiProTaxCodeMappingService.MetadataForTaxCodeMapping">
            <summary>
            Class represents mapping metadata for tax code mapping.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiProTaxCodeMappingService.MetadataForTaxCodeMapping.#ctor">
            <summary>
            Constructs and instance of the <see cref="T:TaxHub.CoreServices.Application.UltiProTaxCodeMappingService.MetadataForTaxCodeMapping"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PaymentAggregationService">
            <summary>
            Payment Aggregation Service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentAggregationService.#ctor(TaxHub.CoreServices.Application.IBankScheduleService,TaxHub.CoreServices.Application.ITaxCodeService,TaxHub.CoreServices.Application.IClientAgencyService,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.IAgencyService,TaxHub.CoreServices.Application.IPaymentScheduleService)">
            <summary>
            Payment Aggregation Service
            </summary>
            <param name="bankScheduleService">Bank Schedule Service</param>
            <param name="taxCodeService">TaxCode Service</param>
            <param name="clientAgencyService">Client Agency Service</param>
            <param name="clientService">Client Service</param>
            <param name="agencyService">Agency Service</param>
            <param name="paymentScheduleService">The payment factory helper.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentAggregationService.AggregatePayments(TaxHub.Models.Commands.PaymentsCreateCommand,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Aggregating and Creating payments
            </summary>
            <param name="paymentsCreateCommand">Payment Create Command</param>
            <param name="correlationId">Correlation Id</param>
            <param name="userid">User ID</param>
            <param name="userName">Username</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns a list of payments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.HolidayService.#ctor(TaxHub.CoreServices.DataAccess.IHolidayRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes Constructor
            </summary>
            <param name="holidayRepository">HolidayRepo</param>
            <param name="messageHub">MessageHub</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.HolidayService.IsHoliday(System.DateTime)">
            <summary>
            Whether date given is a holiday
            </summary>
            <param name="date">Date</param>
            <returns>Whether date given is a holiday</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.HolidayService.InitializeNew(TaxHub.Models.Holiday)">
            <summary>
            Returns an initialized holiday.
            </summary>
            <param name="holiday">Holiday</param>
            <returns>Returns an initialized holiday.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.HolidayService.FindOneByHolidayDate(System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IBankScheduleService.IsBankingDay(System.DateTime,System.Guid)">
            <summary>
            Determines whether the given date time falls on a banking day.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="correlationId">Correaltion Id.</param>
            <returns>
            True if the given date time falls on a banking day; false otherwise.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IBankScheduleService.FindPriorBankingDay(System.DateTime,System.Guid,System.Int32)">
            <summary>
            Given a date, it will find the date that is number of prior days before the specified date.
            </summary>
            <param name="date">The starting date.</param>
            <param name="correlationId">Correaltion Id.</param>
            <param name="priorDays">The number of days prior to find the date.</param>
            <returns>The prior banking date.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IBankScheduleService.FindNextBankingDay(System.DateTime,System.Guid,System.Int32)">
            <summary>
            Given a date, it will find the date that is number of after days after the specified date.
            </summary>
            <param name="date">The starting date.</param>
            <param name="correlationId">Correaltion Id.</param>
            <param name="afterDays">The number of days after to find the date.</param>
            <returns>The next banking date.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FilingCollectorGroupService">
            <summary>
            FilingCollectorGroup service implementation. (FILING_COLLECTOR_GROUP)
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FilingCollectorGroupService.#ctor(TaxHub.CoreServices.DataAccess.IFilingCollectorGroupRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.FilingCollectorGroupService"/> class.
            </summary>
            <param name="filingCollectorGroupRepository">Payee Efile Info Repository</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
            <param name="cacheManager">The cache manager.</param>
            <param name="cacheRevocationService">The cache revocation service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FilingCollectorGroupService.LookupCollectorByLocalPayeeId(System.String,System.Threading.CancellationToken)">
            <summary>
            Lookups the client by first attempting to retrieve from the cache.
            </summary>
            <param name="localPayeeId">The local payee Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The tenant with the given identifier.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IFailedPaysMigrationService">
            <summary>
            Failed Pays Migration Service Interface
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IFailedPaysMigrationService.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFailedPaysMigrationService.RetrieveAndConsumeFailedEvents(TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Retrieve and consume failed events
            </summary>
            <param name="eventDataParams">The event data parms</param>
            <returns>The results of the operation</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IAchFileService">
            <summary>
            ACH Service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAchFileService.VoidAchByFileInfoId(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Voids the ach file by File Request Id. Raises Voided ACH File Event
            </summary>
            <param name="fileInfoId">The file identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>true if voided all eft records and event raised successfully</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAchFileService.Create(TaxHub.Models.Commands.AchFileCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified file information identifier.
            </summary>
            <param name="achFileCreateCommand">The ach file create command.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>CreateAggregateResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAchFileService.FindByFileInfoId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds Ach file by File Request Id.
            </summary>
            <param name="fileRequestId">The file request identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>AchFile</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ICoverSheetService">
            <summary>
            Generates the cover sheet from a template
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICoverSheetService.Generate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates the cover sheet
            </summary>
            <param name="fieldMap">list of fields in the form and their values</param>
            <returns>byte array representing the cover sheet pdf with all the fields filled up</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICoverSheetService.Generate(TaxHub.CoreServices.Application.CoverSheetModel)">
            <summary>
             Generates the cover sheet
            </summary>
            <param name="model">the model representing the fields to be filled up</param>
            <returns>byte array representing the cover sheet pdf with all the fields filled up</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.CoverSheetModel">
            <summary>
            Model for populating the fields on the Cover Sheet
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CoverSheetModel.FileName">
            <summary>
            File Name to be filled in the form
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CoverSheetModel.Date">
            <summary>
            Distribution Date to be filled in the form
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CoverSheetModel.TotalDocumentPages">
            <summary>
            Total # of images per print stream, to be filled in the form
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CoverSheetModel.TotalMailingSheets">
            <summary>
            Total # of Address/Separator pages, to be filled in the form
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CoverSheetModel.TotalCoupons">
            <summary>
            Total # of Coupons/Returns/Transmittals, to be filled in the form
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CoverSheetModel.TotalChecks">
            <summary>
            Total # of Checks, to be filled in the form
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CoverSheetModel.FieldMap">
            <summary>
            The properties on this model mapped as a dictionary to be filled in the form
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IHolidayService">
            <summary>
            Defines holiday service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IHolidayService.IsHoliday(System.DateTime)">
            <summary>
            Whether date given is a holiday
            </summary>
            <param name="systemUtcDate">system Utc Date</param>
            <returns>Whether date given is a holiday</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IHolidayService.FindOneByHolidayDate(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Find holiday object by holiday date.
            </summary>
            <param name="holidayDate">The holiday date.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Holiday object</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IFilingCollectorGroupService">
            <summary>
            Domain services related to FilingCollectorGroup Instances
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFilingCollectorGroupService.FindByMainPayee(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds list by main payee.
            </summary>
            <param name="mainPayeeId">The main payee id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The FilingCollectorGroup with the given Id </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFilingCollectorGroupService.FindOne(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="mainPayeeId">The main payee id.</param>
            /// <param name="localPayeeId">The local payee id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The FilingCollectorGroup with the given Id </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFilingCollectorGroupService.LookupCollectorByLocalPayeeId(System.String,System.Threading.CancellationToken)">
            <summary>
            Looks up the Collector by LocalPayeeId.
            </summary>
            <param name="localPayeeId">The LocalPayeeId.</param>
            <param name="cancellationToken">The CancellationToken.</param>
            <returns>The Collector with the given LocalPayeeId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFilingCollectorGroupService.Create(TaxHub.Models.FilingCollectorGroup,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFilingCollectorGroupService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all records
            </summary>
            <param name="pageParams">pageParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>All records</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFilingCollectorGroupService.Delete(TaxHub.Models.FilingCollectorGroup,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Delete the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry before giving up.</param>
            <returns>
            The result of deleting an instance of the aggregate
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IMailSheetService">
            <summary>
            Interface to generate the mail sheet based on atemplate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMailSheetService.Generate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates a PDF mail sheet by mapping the supplied fields to the template
            </summary>
            <param name="fieldMap">A dictionary with the name of the fields and its values</param>
            <returns>a byte array with the content of the generated PDF</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMailSheetService.Generate(System.Collections.Generic.List{System.String})">
            <summary>
            Generates a PDF mail sheet with the address lines suplied
            </summary>
            <param name="lines">The address to include in the sheet, as a list of lines</param>
            <returns>a byte array with the content of the generated PDF</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMailSheetService.Generate(System.String)">
            <summary>
            Generates a PDF mail sheet with the address suplied
            </summary>
            <param name="address">The address to include in the sheet</param>
            <returns>a byte array with the content of the generated PDF</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IImportClientService">
            <summary>
            Data Contract for Import Client Service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IImportClientService.CorrectPayrollUnitId(TaxHub.Models.ImportClient,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Corrects the payroll unit identifier.
            </summary>
            <param name="importClient">The import client.</param>
            <param name="payrollUnitId">The payroll unit identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <returns>The update result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IImportClientService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find one import client with given Id.
            </summary>
            <param name="id">The id identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The import client with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IImportClientService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all import client's paged based on  page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of import clients.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IImportClientService.Create(TaxHub.Models.ImportClient,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Inserts new import client
            </summary>
            <param name="importClient"> Import Client instance</param>
            <param name="eventDataParams">The Event data params</param>
            <param name="cancellationToken"> The Cancellation token</param>
            <returns> Task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IImportClientService.Update(TaxHub.Models.ImportClient,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates import client
            </summary>
            <param name="importClient"> The import client object to update</param>
            <param name="eventDataParams">The Event Data Params</param>
            <param name="cancellationToken"> The cancellation token</param>
            <returns> task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IImportClientService.FindAllByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all Import clients by client id
            </summary>
            <param name="clientId"> clientId of importClient</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Matching Import Client Records</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IImportClientService.FindByCompanyId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get all Import clients by client id
            </summary>
            <param name="companyId"> companyId of importClient</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Matching Import Client Records</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IImportClientService.FindOneByImportClientId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the one by import client identifier.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="importClientId">The import client identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The import client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IImportClientService.FindAllByImportClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds many import clients by import client identifier (payrollCode).
            TODO AdamD This should be changed to findOne once ULTI-297261 has been played
            </summary>
            <param name="importClientId">The import client identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The import client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IImportClientService.UpdateClientDetails(TaxHub.Models.ImportClient,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the Client details for the Import Client Id.
            </summary>
            <param name="importClient">The Import Client Update Command.</param>
            <param name="eventDataParams">The Event data Params.</param>
            <param name="cancellationToken">The Cancellation Token.</param>
            <returns>Task bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IImportClientService.Delete(TaxHub.Models.ImportClient,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Delete the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>
            The result of deleting an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IImportClientService.LookupByPayrollUnitId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get's Import Client Record by PayrollUnitId
            </summary>
            <param name="payrollUnitId">payrollUnitId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Returns Import Client record</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ImportClientService">
            <summary>
            Import Client Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.CorrectPayrollUnitId(TaxHub.Models.ImportClient,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.ImportClientService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.#ctor(TaxHub.CoreServices.DataAccess.IImportClientRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService)">
            <summary>
            Initializes new instance of ImportClientService
            </summary>
            <param name="repository"> Import client repo</param>
            <param name="messageHub">Message Hub</param>
            <param name="logger">The app logger</param>
            <param name="cacheManager">The Cache Manager.</param>
            <param name="cacheRevocationService">The cache revocation services</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.InitializeNew(TaxHub.Models.ImportClient)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.FindAllByClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.FindOneByImportClientId(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.FindAllByImportClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.FindByCompanyId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.Update(TaxHub.Models.ImportClient,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.UpdateClientDetails(TaxHub.Models.ImportClient,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.Delete(TaxHub.Models.ImportClient,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.GetCacheKeys(TaxHub.Models.ImportClient)">
            <summary>
            This creates an Array of Cachekeys used for revocation.
            </summary>
            <param name="importClient"> The import client.</param>
            <returns>It returns an array of string </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.GetCacheKeyByPayrollUnitId(System.Guid)">
            <summary>
            Generates the cache key for companyId, payrollCode lookup
            </summary>
            <param name="payrollUnitId">The payroll unit identifier.</param>
            <returns>CacheKey for lookup by companyId and payrollCode</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ImportClientService.LookupByPayrollUnitId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.InboundFileService">
            <summary>
            The InboundFileService class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.InboundFileService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.InboundFileService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.InitializeNew(TaxHub.Models.InboundFile)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.#ctor(TaxHub.CoreServices.DataAccess.IInboundFileRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Common.GlobalServices.IUdesServiceClient,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder,TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub)">
            <summary>
            The constructor.
            </summary>
            <param name="repository">The repository.</param>
            <param name="domainService">Domain service.</param>
            <param name="udesServiceClient">The udes service client</param>
            <param name="metricsBuilder">The metric builder</param>
            <param name="logger">The app logger.</param>
            <param name="messageHub">The message hub.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.Create(TaxHub.Models.Commands.InboundFileCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.GetUdesFilesForImport(System.String,TaxHub.Models.InboundFileType,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.GetAllUdesFiles(System.String,System.String,System.IO.SearchOption,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.DownloadUdesFile(System.String,System.String,TaxHub.Models.InboundFileType,System.DateTime,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.MoveUdesFile(System.String,System.String,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.DeleteUdesFile(System.String,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.GetObjectStorageSaveResult(TaxHub.Hosting.Runtime.CreateAggregateExtendedResult{TaxHub.Models.InboundFile},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Used to return the appropriate save result after the object store failed to save a file.
            </summary>
            <param name="saveResult">The save result.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Checks the inbound file status, if it's SuccessfulUpload it returns AlreadyExists, otherwise returns Failure.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.CreateInboundFileAndRaiseCreatedEvent(TaxHub.Models.Commands.InboundFileCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Method to create a new inbound file and raise the inboundfile.created event
            IN CASE THE INBOUND FILE ALREADY EXIST IT WILL GET THE ORIGINAL FROM THE REPO (THIS IS ONLY AUTOIMPORTED FILES)
            </summary>
            <param name="createCommand">The Inbound File create command.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>the newly created inboundFile or the already existed one from the repo.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.UpdateStatus(TaxHub.Models.InboundFile,TaxHub.Models.InboundFileStatusUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the status.
            </summary>
            <param name="inboundFile">The inbound file.</param>
            <param name="statusUpdateCommand">The status update command.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an updateAggregateExtendedResult.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.GetFromObjectStorage(TaxHub.Models.InboundFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InboundFileService.GetFromObjectStorage(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.FileSaveResult">
            <summary>
            Represent the result of an operation involving an InboundFile.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileSaveResult.Success">
            <summary>
            The success
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FileSaveResult.InboundFile">
            <summary>
            The inbound file
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FileSaveResult.#ctor(System.Boolean,TaxHub.Models.InboundFile)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.FileSaveResult"/> class.
            </summary>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="inboundFile">The inbound file.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPayMappingService">
            <summary>
            Pay Mapping Service Interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayMappingService.MapPayToMappedTaxPay(TaxHub.Models.Tenant,TaxHub.CoreServices.Acl.Payment.PayView,TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Map Pays to MappedTaxPays
            </summary>
            <param name="tenant">Tenant</param>
            <param name="pay">PayView</param>
            <param name="periodicTaxProcessing">PeriodicTaxProcessing</param>
            <param name="eventDataParams">EventDataParams</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>PayMappingResult</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPayProcessingService">
            <summary>
            Pay processing service interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayProcessingService.ProcessPay(System.Guid,TaxHub.CoreServices.Acl.Payment.PayView,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Maps the pay to a mapped tax pay.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="pay">The pay view.</param>
            <param name="isReplay">Flag indicating if the method was triggered by a replay request.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPenaltyInterestService">
            <summary>
            Domain service related to PenaltyInterest
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.Create(System.Collections.Generic.IEnumerable{TaxHub.Models.PenaltyInterest},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a PenaltyInterest entry
            </summary>
            <param name="penaltyInterestEntries">PenaltyInterest entries to create</param>
            <param name="eventDataParams">Event params</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.ProcessPenaltyInterestPayments(System.Guid,System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Updates the status of all PenaltyInterest records associated with an operationId.
            </summary>
            <param name="penaltyInterestId">Instance of Event.</param>
            <param name="tenantId">Tenant Id</param>
            <param name="correlationId">Properties to be updated.</param>
            <param name="userId">User Id.</param>
            <param name="userName">User Name</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the penalty interest by its id.
            </summary>
            <param name="id">The Penalty Interest id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Penalty interest</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.UpdateLiabilityIdByEntrytId(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the liability Id for a given Penalty Interest
            </summary>
            <param name="entryId">Entry Id</param>
            <param name="liabilityId">The new liability Id to be assigned</param>
            <param name="eventDataParams">Event Data Parameters</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.FindOneByEntryId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds PenaltyInterest by Entry Id
            </summary>
            <param name="entryId">entryId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>PenaltyInterest if found, null otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.UpdateToStatusAssembledByEntryId(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the status to Assembled of PenaltyInterest with given Entry Id.
            </summary>
            <param name="entryId">entryId</param>
            <param name="eventDataParams">Instance of Event.</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>UpdateAggregateResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Returns dictionary that represents total count of matching to filters p and i
            </summary>
            <param name="filterParams">The filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Total count of matching instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Returns list of P and Is
            </summary>
            <param name="pageParams">Page parameters including sorting</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of Penalty interest entries</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.FindOneByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns a of penalty interest entry by liability Id
            </summary>
            <param name="liabilityId">The liabilityId</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of Penalty interest entries</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.GetTotals(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Returns model representing penalty and interest totals
            </summary>
            <param name="pageParams">Page parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>PenaltyInterestTotals</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.SetFundsRequestedByLiabilityId(System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Set funds requested for a P and I entry given corresponding liability Id
            </summary>
            <param name="liabilityId">Liability Id</param>
            <param name="correlationId">Correlation Id</param>
            <param name="userId"> User Id</param>
            <param name="userDescription"> User Description</param>
            <param name="cancellationToken"> Cancellation Token</param>
            <returns>UpdateAggregateResult status</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.UpdateIsCollectedByLiabilityId(System.Guid,System.Guid,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates IsCollected for penalty interest entries acossiated with collection Id
            </summary>
            <param name="liabilityId"> Liability If</param>
            <param name="correlationId"> Correlation Id</param>
            <param name="userId"> User Id</param>
            <param name="flag"> Update value</param>
            <param name="userDescription"> User description</param>
            <param name="cancellationToken"> Cancellation Token</param>
            <returns> Result of update action</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.VoidPenaltyByLiabilityId(System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Voids a penalty interest by liability Id
            </summary>
            <param name="liabilityId">Liability Id</param>
            <param name="correlationId">Correlation Id</param>
            <param name="userId">User Id</param>
            <param name="userName">User Name</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Voids a penalty interest by liability Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.VoidPenaltyInterestById(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Commands.PenaltyInterestUpdateStatusCommand,System.Threading.CancellationToken)">
            <summary>
            Voids a Penalty Interest by Id
            </summary>
            <param name="eventDataParams">Event Data Params</param>
            <param name="updateStatusCommand">Update Status Command</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Voids a Penalty Interest by Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPenaltyInterestService.IsVoidable(TaxHub.Shared.Services.EventDataParams,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Validates if a Penalty Interest is able to be void by its Id
            </summary>
            <param name="eventDataParams">Event Data Params</param>
            <param name="penaltyInterestId">Penalty Interest Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Validates if a Penalty Interest is able to be void by its Id</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPDFFormService">
            <summary>
            PDF Form manipulation services
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPDFFormService.FillAndGenerate(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads a form template, fills it up with the values specified on fieldMap and returns the resulting pdf as a byte array 
            </summary>
            <param name="formTemplate">Form template to be used</param>
            <param name="fieldMap">Dictionary with the form field names and their values</param>
            <returns>A byte array with the contents of the PDF correponding to the form with all the specified fields filled up</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPDFFormService.MergePdfs(System.Collections.Generic.List{TaxHub.Hosting.Runtime.TemporaryStreamResult},System.String)">
            <summary>
            This method creates a PDF with the provided list of byte[]
            </summary>
            <param name="listOfPdfs">The list to be used to create the PDF</param>
            <param name="collatedFileName">The name of the PDF to create</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPDFFormService.SetTemporaryStreamResultFromPdfInBytes(System.Byte[],System.String)">
            <summary>
            Reads a byte array and saves it into a temporary stream result
            </summary>
            <param name="incomingStream">The byte array containing the PDF</param>
            <param name="fileName">The file name to use</param>
            <returns>The temporary stream result with the loaded byte array</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPDFFormService.GetPdfInBytesFromTemporaryStreamResult(TaxHub.Hosting.Runtime.TemporaryStreamResult)">
            <summary>
            Read a temporary stream result into a byte array
            </summary>
            <param name="temporaryResult">The temporary stream result with the data to read</param>
            <returns>The byte array with the data read</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPDFFormService.GetNumberOfPagesInPdf(TaxHub.Hosting.Runtime.TemporaryStreamResult)">
            <summary>
            Get the number of pages for this temporary stream result as a PDF
            </summary>
            <param name="documentTemporaryStreamResult">The temporary stream result</param>
            <returns>The number of pages for this temporary stream result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPDFFormService.AddWaterMark(System.Byte[],System.String)">
            <summary>
            Add water mark to the byte[]
            </summary>
            <param name="currentPdf">The current PDF</param>
            <param name="mark">The mark to add to the PDF</param>
            <returns>The updated PDF</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPrintFileRequestService">
            <summary>
            Domain service related to PrintFileRequestService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.Create(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a print file request
            </summary>
            <param name="documentIds">The list of the documentIds to create a PrintFileRequest</param>
            <param name="isLocal">Indicates whether it is going to be generated on the fly</param>
            <param name="correlationId">Correlation id</param>
            <param name="userId">User id</param>
            <param name="userDescription">User description</param>
            <param name="cancellationToken">CancellationToken instance</param>
            <returns>Instance of created request</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find by print file request Id
            </summary>
            <param name="printFileRequestId">The PrintFileRequest identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the instance of <see cref="T:TaxHub.Models.PrintFileRequest"/> or null if not found</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.UpdateStatus(TaxHub.Models.PrintFileRequest,TaxHub.Common.Enums.PrintFileRequestStatus,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Set the PrintFileRequest status
            </summary>
            <param name="printFileRequest">The print file request</param>
            <param name="updateStatus">The update status</param>
            <param name="correlationId">The correlationId</param>
            <param name="userId">The user Id</param>
            <param name="userDescription">The user description</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The updated aggregate</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.ProcessPrintFileRequest(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.Boolean,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates request 
            </summary>
            <param name="documentIds">List of document ids for the request</param>
            <param name="isLocal">Indicates whether it is going to be generated on the fly</param>
            <param name="performValidation">Perform Validations Flag</param>
            <param name="correlationId">Correlation id</param>
            <param name="userId">User id</param>
            <param name="userDescription">User description</param>
            <param name="cancellationToken">CancellationToken instance</param>
            <returns>Instance of created request</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.AddBatchDocument(TaxHub.Models.PrintFileRequest,System.Collections.Generic.IEnumerable{TaxHub.Models.StagedPrintFile},TaxHub.Common.Enums.DocumentFilingType,System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Add a batch document to the Print File Request aggregate
            </summary>
            <param name="printFileRequest">The print file request</param>
            <param name="stagedPrintFiles">The staged print files</param>
            <param name="documentFilingType">The document filing type</param>
            <param name="batchDocumentId">The batch documentId associated with the provided stagedPrintFiles</param>
            <param name="correlationId">The correlation Id</param>
            <param name="userId">The user Id</param>
            <param name="userDescription">The user description</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The updated aggregate</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.UpdateBatchDocumentAndStagedPrintFilesStatus(TaxHub.Models.PrintFileRequest,System.Guid,TaxHub.Common.Enums.PrintFileRequestStatus,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates the staged print file associated to a batch document Id
            </summary>
            <param name="printFileRequest">The print file request</param>
            <param name="batchDocumentId">The batch document Id</param>
            <param name="printFileRequestStatus">The print file request status</param>
            <param name="correlationId">The correlation Id</param>
            <param name="userId">The user Id</param>
            <param name="userDescription">The user description</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The updated aggregate</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.UpdateSingleStagedPrintFileRequestStatus(TaxHub.Models.PrintFileRequest,System.Guid,TaxHub.Common.Enums.PrintFileRequestStatus,System.String,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Update single staged print file
            </summary>
            <param name="printFileRequest">The print file request aggregate</param>
            <param name="stagedPrintFileId">The staged print file identifier</param>
            <param name="printFileRequestStatus">The print file request status to update to</param>
            <param name="errorMessage">The message reflecting any information about status update</param>
            <param name="correlationId">The correlation Id</param>
            <param name="userId">The user Id</param>
            <param name="userDescription">The user description</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The updated aggregate</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.ProcessPrintDocumentsRequest(System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Sort/collate printable documents and send them to Object storage.
            <remarks>Will send to Udes if it's not local print request</remarks>
            </summary>
            <param name="printFileRequestId">The print file request Id</param>
            <param name="correlationId">The correlationId</param>
            <param name="userId">The user Id</param>
            <param name="userDescription">The user description</param>
            <returns>The result of the sorting and collation of the documents</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.SortPrintFileRequest(System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Method Sorts the Staged print files of a PrintFileRequest object
            </summary>
            <param name="printFileRequestId">The printFileRequest identifier</param>
            <param name="correlationId">The correlation Id</param>
            <param name="userId">The userId</param>
            <param name="userDescription">The user description</param>
            <returns>The result of Sorting a print file.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.CollateAndSavePrintFileRequest(System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Method collates and Saves Staged print files from a PrintFileRequest object
            </summary>
            <param name="printFileRequestId">The printFileRequest identifier</param>
            <param name="correlationId">The correlation Id</param>
            <param name="userId">The userId</param>
            <param name="userDescription">The user description</param>
            <returns>The result of Collate/Save of a staged print file.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.TransmitToUdesAndSetStatus(System.Guid,System.Guid,System.Guid,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Transmits the outbound file from the object store to udes and sets the status to Sent. 
            The method is written so that if it is invoked more than 1 time it does not fail, but instead returns an appropriate result.
            </summary>
            <param name="printFileRequestId">The print File Request Id.</param>
            <param name="fileId">The identifier of the outboundFile.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="userDescription">The user's description.</param>
            <param name="filePath">The path where we declaratively store the file</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the process of transmitting the file finished correctly. False otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.CollateAndSaveBatch(System.Guid,System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Collates and Saves docs under the particular batch.
            </summary>
            <param name="batchDocumentId">The batchId.</param>
            <param name="printFileRequestId">The printfile request identifier</param>
            <param name="correlationId">The correlation identifier</param>
            <param name="userId">The user identifier</param>
            <param name="userDescription">The user's description</param>
            <returns>The result of Collate/Save of a batch Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.FindByBatchId(System.Guid,TaxHub.Common.Enums.PrintFileRequestStatus,System.Threading.CancellationToken)">
            <summary>
            Find all docs under a batchId
            </summary>
            <param name="batchId">The batch identifier</param>
            <param name="printFileRequestStatus">The printfile request status</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns a collection of <see cref="T:TaxHub.Models.StagedPrintFile"/> or null if not found</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintFileRequestService.CreateAndAllocatePrintFileRequest(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintFileRequestVerificationResult},System.Boolean,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a print file request, then updates PrintableDocuments and Raise allocated event if not local print
            </summary>
            <param name="documentIds">The list of the documentIds to create a PrintFileRequest</param>
            <param name="validationResults">validation results</param>
            <param name="isLocal">Indicates whether it is going to be generated on the fly</param>
            <param name="correlationId">Correlation id</param>
            <param name="userId">User id</param>
            <param name="userDescription">User description</param>
            <param name="cancellationToken">CancellationToken instance</param>
            <returns>Instance of created request</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IProcessingTaxInstanceService">
            <summary>
            Contract for the Processing Tax Instance Service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IProcessingTaxInstanceService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="postPayrollId">The client identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PaymentScheduleService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentScheduleService.#ctor(TaxHub.CoreServices.Application.IScheduleService,TaxHub.CoreServices.Application.IClientAgencyService,TaxHub.CoreServices.Application.IDepositScheduleService)">
            <summary>
            Payment factory helper.
            </summary>
            <param name="scheduleService">The schedule service.</param>
            <param name="clientAgencyService">The client agency service.</param>
            <param name="depositScheduleService">The deposit schedule service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentScheduleService.GetFrequencyCategory(System.DateTime,System.DateTime,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentScheduleService.CalculatePaymentDueDate(System.String,System.String,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.QuarterEndIngestion.IRtsFileProcessingService">
            <summary>
            Interface for rts file processing service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.IRtsFileProcessingService.UploadRtsFile(TaxHub.Hosting.Runtime.TemporaryStreamResult,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Saves the Rts file in object storage.
            </summary>
            <param name="rtsFileStream">The RTS file stream.</param>
            <param name="autoImported">Indicates if the file was imported automatically by the system.</param>
            <param name="eventDataParams">The Event Data params.</param>
            <param name="token">The Cancellation Token.</param>
            <returns>Boolean Success or Failure.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.IRtsFileProcessingService.ProcessRtsFile(TaxHub.Models.Commands.RtsFileReceivedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Parses the RTS file and saves the QuarterlyTaxInstance.
            </summary>
            <param name="rtsFileReceivedCommand">The rts file received command</param>
            <param name="eventDataParams">The Event Data params.</param>
            <param name="token">The Cancellation Token.</param>
            <returns>Boolean Success or Failure.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.QuarterEndIngestion.IQEFileStorageService">
            <summary>
            Contract for QE file manager
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.IQEFileStorageService.SaveFile(TaxHub.Hosting.Runtime.TemporaryStreamResult,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Saves a file
            </summary>
            <param name="fileStream">The file stream.</param>
            <param name="autoImported">Determines if the file was auto-imported by the system.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="token">The cancellation token.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.IQEFileStorageService.GetInboundFile(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary> 
            Gets an inbound RTS file 
            </summary> 
            <param name="inboundFileId">Rts file Id.</param> 
            <param name="eventDataParams">Event Data Params.</param> 
            <param name="cancellationToken">Cancellation token.</param> 
            <returns>InboundFile for the requested RTS file.</returns> 
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.IQEFileStorageService.GetRtsFileContentStream(TaxHub.Models.InboundFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary> 
            Gets the Rts file content 
            </summary> 
            <param name="inboundFile">The inbound file</param> 
            <param name="eventDataParams">The Event Data Params.</param>
            <param name="cancellationToken">The cancellation token</param> 
            <returns>The file stream</returns> 
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.IQEFileStorageService.DownloadRtsFiles(TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Downloads the Rts Files
            </summary>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True for success and false for failure</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.QuarterEndIngestion.IRtsProcessingService">
            <summary>
            Interface for rts processing service.
             </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.IRtsProcessingService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.RtsProcessing},System.Guid,TaxHub.Models.RtsProcessing,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified rtsprocessing event data parameters.
            </summary>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="commandAction">The command action.</param>
            <param name="id">The identifier.</param>
            <param name="entity">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.IRtsProcessingService.Create(TaxHub.Models.RtsProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="rtsProcessing">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.IRtsProcessingService.TransitionAndAddQuarterlyTaxInstances(TaxHub.Models.RtsProcessing,TaxHub.Models.RtsProcessingStatus,System.Collections.Generic.HashSet{System.Int32},System.Collections.Generic.List{TaxHub.Models.FileIngestion.RtsPayrollValidation},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Transitions to the given status and adds the given quarterly tax instances to the rts processing
            </summary>
            <param name="rtsProcessing">The rts processing</param>
            <param name="newStatus">The new status</param>
            <param name="newQuarterlyTaxInstances">The new quarterly tax instances.</param>
            <param name="newPayrollValidations">The new rts payroll validations.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns true if success, otherwiser false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.IRtsProcessingService.PrepareRtsProcessing(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Prepares rts processing
            </summary>
            <param name="fileId">The file id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the status and the rts processing</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.QuarterEndIngestion.QEFileStorageService">
            <summary>
            Rts file manager
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.QEFileStorageService.#ctor(TaxHub.CoreServices.Application.IInboundFileService,TaxHub.Common.Configuration.IFileManagementConfiguration,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor for class <see cref="T:TaxHub.CoreServices.Application.QuarterEndIngestion.QEFileStorageService" />.
            </summary>
            <param name="inboundFileService">The file service. </param>
            <param name="fileManagementConfiguration">The file management configuration. </param>
            <param name="logger">The app logger. </param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.QEFileStorageService.SaveFile(TaxHub.Hosting.Runtime.TemporaryStreamResult,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.QEFileStorageService.GetInboundFile(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.QEFileStorageService.GetRtsFileContentStream(TaxHub.Models.InboundFile,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.QEFileStorageService.DownloadRtsFiles(TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsFileProcessingService">
            <inheritdoc />
            <summary>
            The RTS File Processor responsible for processing an RTS file and creating the Quarterly Tax Instance.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsFileProcessingService.EmployeeBatchSize">
            <summary>
            The employee batch size.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsFileProcessingService.#ctor(TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService,TaxHub.CoreServices.Application.IEmployeeQuarterlyService,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.QuarterEndIngestion.IQEFileStorageService,TaxHub.CoreServices.Application.QuarterEndIngestion.IRtsProcessingService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Configuration.ISystemConfiguration)">
            <summary>
            The constructor for the RTS file processor.
            </summary>
            <param name="quarterlyTaxInstanceService">The Quarterly Tax Instance Service</param>
            <param name="employeeQuarterlyService">The Employee Quarterly Service</param>
            <param name="domainService">The Domain Service.</param>
            <param name="logger">The App Logger.</param>
            <param name="fileStorageService">The rts file manager.</param>
            <param name="rtsProcessingService">The rts processing service.</param>
            <param name="messageHub">The message hub.</param>
            <param name="systemConfiguration">The system configuration</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsFileProcessingService.UploadRtsFile(TaxHub.Hosting.Runtime.TemporaryStreamResult,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsFileProcessingService.ProcessRtsFile(TaxHub.Models.Commands.RtsFileReceivedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsProcessingService">
            <summary>
            Rts tax processing service implementation.
             </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsProcessingService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.DataAccess.IRtsProcessingRepository,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsProcessingService"/> class.
            </summary>
            <param name="logger">Application logger</param>
            <param name="rtsProcessingRepository">The rts tax processing repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="quarterlyTaxInstanceService">The quarterly tax instance service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsProcessingService.EventInstanceCreated">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsProcessingService.EventInstanceDeleted">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsProcessingService.InitializeNew(TaxHub.Models.RtsProcessing)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsProcessingService.TransitionAndAddQuarterlyTaxInstances(TaxHub.Models.RtsProcessing,TaxHub.Models.RtsProcessingStatus,System.Collections.Generic.HashSet{System.Int32},System.Collections.Generic.List{TaxHub.Models.FileIngestion.RtsPayrollValidation},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterEndIngestion.RtsProcessingService.PrepareRtsProcessing(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.QuarterEndIngestion.PrepareRtsProcessingResult">
            <summary>
            Prepare rts processing result
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.QuarterEndIngestion.PrepareRtsProcessingResult.Status">
            <summary>
            Gets or sets the status
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.QuarterEndIngestion.PrepareRtsProcessingResult.RtsProcessing">
            <summary>
            Gets or sets the rts processing
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPrintableDocumentService">
            <summary>
            Domain service related to PrintableDocument
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Returns list of PrintableDocuments
            </summary>
            <param name="pageParams">Page parameters including sorting</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of PrinatableDocuments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.FindByIds(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Returns list of PrintableDocuments that match the ids
            </summary>
            <param name="ids">The list of ids of the printable documents to fetch</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of PrinatableDocuments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.FindReadyAndNonMatchingIds(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Returns list of PrintableDocuments that are in ready status that do not match the ids
            </summary>
            <param name="ids">The list of ids of the printable documents to fetch</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of PrinatableDocuments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds PrintableDocument by Id
            </summary>
            <param name="id">PrintableDocument Id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Associated PrintableDocument. Null if none exists
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.FindAll(System.Threading.CancellationToken)">
            <summary>
            Returns list of all Printable Documents
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of printable documents</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.FindAllByCheckId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns list of PrintableDocuments with given check ID
            </summary>
            <param name="checkId">Check Id to search for</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Matching PrintableDocument instance, null otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.Delete(TaxHub.Models.PrintableDocument,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Deletes the specfied instance of printable document
            </summary>
            <param name="entity">Printable document</param>
            <param name="eventDataParams">Event data parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="retryCount">Retry count</param>
            <returns>DeleteAggregateResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.UpdateStatus(TaxHub.Models.PrintableDocument,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Enums.DocumentStatus,System.Threading.CancellationToken)">
            <summary>
            Updates the PrintableDocument Status
            </summary>
            <param name="printableDocument">Document to update</param>
            <param name="eventDataParams">Instance of event</param>
            <param name="status">New status</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.UpdatePrintStatus(TaxHub.Models.PrintableDocument,TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Commands.PrintableDocumentUpdatePrintStatusCommand,System.Threading.CancellationToken)">
            <summary>
            Updates document print status
            </summary>
            <param name="printableDocument">Document to update</param>
            <param name="eventDataParams">Event param instance</param>
            <param name="printableDocumentStatusUpdateCommand">Holds changes</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Objec holding operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.UpdateBatchPrintInfo(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Commands.PrintableDocumentBatchInfoUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Updates Printable Document Batch Print Information.
            </summary>
            <param name="eventDataParams">Instance of Event.</param>
            <param name="batchInfoUpdateCommand">Properties to be updated.</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.Create(TaxHub.Models.PrintableDocument,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a PrintableDocument
            </summary>
            <param name="printableDocument">PrintableDocument to create</param>
            <param name="eventDataParams">Event params</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.CreatePrintableDocumentFromCheck(System.Int32,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a PrintableDocument from check
            </summary>
            <param name="checkId">Check ID</param>
            <param name="correlationId">Correlation ID</param>
            <param name="userId">User ID</param>
            <param name="userName">User name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>CreateAggregateResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.CreatePrintableDocumentFromFormDocument(TaxHub.Models.PrintableDocument,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a PrintableDocument from form
            </summary>
            <param name="printableDocument">PrintableDocument to create</param>
            <param name="eventDataParams">Event params</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Returns dictionary that represents total count of matching to filters printable documents
            </summary>
            <param name="filterParams">The filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Total count of matching instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.GetNumberOfPagesPerDocument(System.Guid,System.Guid)">
            <summary>
            Get the number of pages for the the FileInfo as PDF
            </summary>
            <param name="fileInfoId">The file info Id</param>
            <param name="correlationId">The correlation Id</param>
            <returns>The number of pages in this FileInfo as a PDF</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.UpdateStatusAndPrintOrigin(System.Boolean,TaxHub.Models.PrintableDocument,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Enums.DocumentPrintStatus,System.Threading.CancellationToken)">
            <summary>
            Updates the status of the printable document and the IsLocal column.
            </summary>
            <param name="isLocal">Local or Non Local print.</param>
            <param name="printableDocument">Document to update</param>
            <param name="eventDataParams">Instance of event</param>
            <param name="printStatus">The new status</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Objec holding operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPrintableDocumentService.FindAllByFormDocumentId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns list of PrintableDocuments with given check ID
            </summary>
            <param name="formDocumentId">form Document Id to search for</param>
            <param name="cancellationToken">Cancelation token</param>
            <returns>Matching PrintableDocument instance, null otherwise</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.CoverSheetService">
            <inheritdoc/>
            <summary>
            Class to generate the cover sheet based on a template
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CoverSheetService.#ctor(TaxHub.Common.Pdf.IPdfHelper,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPDFFormService)">
            <summary>
            Constructor override that allows to specify a custom helper
            </summary>
            <param name="pdfHelper">An object of a class that implements the IPDFHelper interface</param>
            <param name="logger">An object of a class that implements the IAppLogger interface</param>
            <param name="pdfFormService">The pdf form service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CoverSheetService.Generate(TaxHub.CoreServices.Application.CoverSheetModel)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CoverSheetService.Generate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ILiabilityService">
            <summary>
            Interface for corrections in Liability Service
            Will expose only the methods used by migrations (which are outside of any valid business flow)
            </summary>
            <summary>
            Interface for periodic tax processing service.
             </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.FindAllByOriginTypeCreationDate(TaxHub.Common.Enums.LiabilityOriginType,System.DateTime,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all liablities by origin type and creation utc date. Used for migration
            </summary>
            <param name="originType">Origin type</param>
            <param name="creationUtcDate"> Creation date </param>
            <param name="pageParams"> page params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns> List of matching liabilities</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.UpdateLiabilityOriginType(TaxHub.Models.Liability,TaxHub.Common.Enums.LiabilityOriginType,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates Liability Origin Type
            </summary>
            <param name="liability">Liability</param>
            <param name="originType">New origin type</param>
            <param name="eventDataParams">eventParams</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.UpdateLiabilityCashMgmtInfo(TaxHub.Models.Liability,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates Liability Cash Managemen Properties
            </summary>
            <param name="liability">Liability</param>
            <param name="referenceId">Reference Id</param>
            <param name="eventDataParams">eventParams</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.UpdateReferenceId(TaxHub.Models.Liability,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the Reference Id for a given Liability
            </summary>
            <param name="liabilityCommand">Command, must inlcude Liability Id and ReferenceId, can also include TenantId, assign empty Guid if not known</param>
            <param name="eventDataParams">Event data para meters</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Result of the update operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.UpdateLiabilityReportCompanyIdCorrections(TaxHub.Models.Liability,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates Liability Origin Type
            </summary>
            <param name="liability">Liability</param>
            <param name="reportCompanyId">New Report Company Id</param>
            <param name="eventDataParams">eventParams</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.CreateLiabilityForPeriodicTaxInstance(System.Guid,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a Liability.
            </summary>
            <param name="tenantId">The tenant ID.</param>
            <param name="periodicTaxInstanceId">The respective periodic tax instance.</param>
            <param name="eventData">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A boolean representing the result of the operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.CreateLiabilityForPenaltyInterest(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a Liability.
            </summary>
            <param name="penaltyInterestId">Penalty Interest ID.</param>
            <param name="eventData">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A boolean representing the result of the operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.UpdateCollectionId(System.Guid,System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update the collection ID for the given liability (used when a liability is assigned/reassigned to a collection).
            </summary>
            <param name="tenantId">The tenant Id.</param>
            <param name="liabilityId">The liability Id.</param>
            <param name="collectionId">The collection ID for the collection that the liability belongs to.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The liability.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.UpdateDueDateIfFedPaymentDueDateMovedForward(TaxHub.CoreServices.Acl.Payment.CollectionDueDateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update the due date.
            </summary>
            <param name="updateCommand">updateCommand object</param>
            <param name="eventData">evenData</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>true if the operation succesed false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.FindOne(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the liability with the given tenant and liability ID.
            </summary>
            <param name="tenantId">The tenant ID.</param>
            <param name="liabilityId">The liability ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The liability.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the liability with the given the liability ID.
            </summary>
            <param name="liabilityId">The liability ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The liability.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all liability
            </summary>
            <param name="pageParams">pageParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>All liabilities</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.FindAllHistory(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find all history
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="liabilityId">The liability ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Find all history</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.FindAllHistory(System.Guid,System.Threading.CancellationToken)">
            <summary>
            FindAllHistory
            </summary>
            <param name="liabilityId">The liability ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Domain events data</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.ResolveHistory(System.Guid,System.Threading.CancellationToken)">
            <summary>
            The entity history
            </summary>
            <param name="liabilityId">The liability ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>History events</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.CreateRefundLiabilityForVoidedPayment(System.Guid,System.Guid,TaxHub.CoreServices.Acl.Payment.RefundPaymentCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Issues a refund for a payment in a Liability
            </summary>
            <param name="tenantId">Tenant Id</param>
            <param name="liabilityId">Liability Id</param>
            <param name="refundPaymentCommand">Object containing the Payment Id and Amount</param>
            <param name="eventData">Event data</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>True if a Negative Liability was sucessfully created</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.CreateRefundLiabilityForQeNetVoidedPayment(System.Decimal,System.Int32,System.Int32,TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Issues a refund liability for QE-net voided payment
            </summary>
            <param name="refundAmount">Refund Amount</param>
            <param name="voidedPaymentId">Voided payment id</param>
            <param name="qeNetCreditTrackingId">Qe-net credit tracking id</param>
            <param name="sourcePayment">Payment</param>
            <param name="eventData">Event data</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>True if liability successfully created</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.CreateLiabilityForAppliedCreditRefund(System.Guid,System.Guid,TaxHub.CoreServices.Acl.Payment.RefundPaymentCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Issues a credit for a payment in a Liability
            </summary>
            <param name="tenantId">Tenant Id</param>
            <param name="liabilityId">Liability Id</param>
            <param name="refundPaymentCommand">Object containing the Payment Id and Amount</param>
            <param name="eventData">Event data</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>True if a Negative Liability was sucessfully created</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.FindPaymentLiability(System.Nullable{System.Guid},System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the payment liability.
            </summary>
            <param name="tenantId">The tennant id</param>
            <param name="paymentId">The payment id</param>
            <param name="correlationId">The correlation id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An instance of Liability</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.CreateLiabilityForInputTaxInstance(System.Guid,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a Liability
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="inputTaxInstanceId">The respective input tax instance</param>
            <param name="eventData">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A boolean representing the result of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.Contains(System.Guid,System.Threading.CancellationToken)">
            <summary>
            If a liability exits
            </summary>
            <param name="liabilityId">liabilityId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>A boolean</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.UpdateCashManagementLiabilityId(System.Guid,System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates cashMgmtLiabilityId
            </summary>
            <param name="tenantId">tenantId</param>
            <param name="liabilityId">liabilityId</param>
            <param name="cashMgmtLiabilityId">cashMgmtLiabilityId</param>
            <param name="eventDataParams">eventDataParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>UpdateAggregateResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.FindOneByCashMgmtLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            FindOneByCashMgmtLiabilityId.
            </summary>
            <param name="cashMgmtLiabilityId">Cash Management Liability Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the liability by the cash management liability id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.UpdateLiabilityStatus(TaxHub.Models.Liability,TaxHub.Models.LiabilityStatus,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the liability status field
            </summary>
            <param name="liability">liability</param>
            <param name="status">liability status</param>
            <param name="cashMgmtEventSeqNumber">cashMgmtEventSeqNumber</param>
            <param name="eventDataParams">eventDataParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Returns the updated liability instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.PublishLiabilityServiceAllocatedEventAndLog(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Liability,System.DateTime)">
            <summary>
            Publishes a service event for a Liability being allocated between its relations. 
            This method logs if the event was published or not
            </summary>
            <param name="eventDataParams">event params</param>
            <param name="liability">the liability</param>
            <param name="paymentEarliestDueDate">The earliest due date for the payments that are included in the liability.</param>
            <returns>True if the event was successfully published</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ILiabilityService.PublishRefundLiabilityServiceAllocatedEventAndLog(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Liability,TaxHub.Models.Liability)">
            <summary>
            Publishes a service event for a Refund Liability being allocated between its relations. 
            This method logs if the event was published or not
            </summary>
            <param name="eventDataParams">event params</param>
            <param name="refundLiability">the refund liability</param>
            <param name="positiveLiability">the positive liability from where the refund takes place</param>
            <returns>True if the event was successfully published</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.LiabilityService">
            <summary>
            This is the liability service
            </summary>
            <inheritdoc cref="T:TaxHub.CoreServices.Application.ILiabilityService"/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.UpdateReferenceId(TaxHub.Models.Liability,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.UpdateLiabilityOriginType(TaxHub.Models.Liability,TaxHub.Common.Enums.LiabilityOriginType,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates Liability Origin Type
            </summary>
            <param name="liability">Liability</param>
            <param name="originType">New origin type</param>
            <param name="eventDataParams">eventParams</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.UpdateLiabilityCashMgmtInfo(TaxHub.Models.Liability,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.UpdateLiabilityReportCompanyIdCorrections(TaxHub.Models.Liability,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.LiabilityService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.#ctor(TaxHub.CoreServices.DataAccess.ILiabilityRepository,TaxHub.CoreServices.Application.IPeriodicTaxInstanceService,TaxHub.CoreServices.Application.IInputTaxInstanceService,TaxHub.CoreServices.Application.IPaymentService,TaxHub.CoreServices.Acl.Payment.ILiabilityServiceAdapter,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration,TaxHub.CoreServices.Application.IPenaltyInterestService,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.IImportClientService,TaxHub.CoreServices.Application.ITenantService,TaxHub.CoreServices.Application.IClientParentChildService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.LiabilityService"/> class.
            </summary>
            <param name="liabilityRepository">Liability Repository</param>
            <param name="periodicTaxInstanceService">Periodic Tax Instance Service</param>
            <param name="inputTaxInstanceService">Input Tax Instance Service</param>
            <param name="paymentService">Payment Service</param>
            <param name="liabilityServiceAdapter">The service adapter to communicate with smarthub - Liabilities</param>
            <param name="domainService">The service adapter to communicate with smarthub</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
            <param name="featureToggleConfiguration">Feature Toggles</param>
            <param name="penaltyInterestService">Penalty Interest Service</param>
            <param name="clientService">Client Service</param>
            <param name="importClientService">Import Client Service</param>
            <param name="tenantService">Tenant Service</param>
            <param name="clientParentChildService">ClientParent Child Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all based in filtering
            </summary>
            <param name="pageParams">pageParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Liability collection</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.UpdateCollectionId(System.Guid,System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update the collection id to the liability instance (for collection assignment or reassignment).
            </summary>
            <param name="tenantId">tenantId</param>
            <param name="liabilityId">liabilityId</param>
            <param name="collectionId">collectionId</param>
            <param name="eventDataParams">eventDataParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Update aggregate result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.FindAllHistory(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Resolve the event history
            </summary>
            <param name="tenantId">tenantId</param>
            <param name="liabilityId">liabilityId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>The event history with all details</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.FindAllHistory(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Resolve the event history
            </summary>
            <param name="liabilityId">liabilityId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>The event history with all details</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.ResolveHistory(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Resolve the event history
            </summary>
            <param name="liabilityId">liabilityId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>The event history</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.InitializeNew(TaxHub.Models.Liability)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.CreateLiabilityForPeriodicTaxInstance(System.Guid,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a Liability.
            </summary>
            <param name="tenantId">The tenantId</param>
            <param name="periodicTaxInstanceId">The respective periodic tax instance id.</param>
            <param name="eventData">The event data params</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult"/> representing the result of the operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.CreateLiabilityForPenaltyInterest(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.FindOne(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find a liability by id and tenant id
            </summary>
            <param name="tenantId">tenantId</param>
            <param name="liabilityId">liabilityId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Liability</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.FindOneByCashMgmtLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.Contains(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find if a liability exists or not
            </summary>
            <param name="liabilityId">liabilityId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>A boolean</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.UpdateLiabilityStatus(TaxHub.Models.Liability,TaxHub.Models.LiabilityStatus,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.UpdateDueDateIfFedPaymentDueDateMovedForward(TaxHub.CoreServices.Acl.Payment.CollectionDueDateUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.CreateAlert(TaxHub.Models.Alert,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Created an alert
            </summary>
            <param name="alert">The alert</param>
            <param name="logErrorMessage">A message to log if the alert creation fails</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A Task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.FindPaymentLiability(System.Nullable{System.Guid},System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.CreateLiabilityForAppliedCreditRefund(System.Guid,System.Guid,TaxHub.CoreServices.Acl.Payment.RefundPaymentCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.CreateRefundLiabilityForVoidedPayment(System.Guid,System.Guid,TaxHub.CoreServices.Acl.Payment.RefundPaymentCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.CreateLiabilityRefund(System.Guid,TaxHub.Models.Liability,TaxHub.Models.Payment,TaxHub.CoreServices.Acl.Payment.RefundLiabilityCommand,TaxHub.Common.Enums.LiabilityOriginType,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Method to Create a negative liability from a credit or a refund
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="originLiability">The original liability for the payment</param>
            <param name="payment">The payment to be refunded or credited</param>
            <param name="refundLiabilityCommand">The command with credit applied or payment amount to be refunded</param>
            <param name="originType">The liability origin type</param>
            <param name="payrollUnitId">The payroll unit id</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The Refund/Credit(Negative) created liability</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.CreateRefundLiabilityForQeNetVoidedPayment(System.Decimal,System.Int32,System.Int32,TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.GetEarliestDueDateForPayments(System.Collections.Generic.IEnumerable{TaxHub.Models.Payment})">
            <summary>
            Gets the earliest due date for a collection of payments
            </summary>
            <param name="payments">The payments</param>
            <returns>The earliest due date</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.CreateLiabilityForInputTaxInstance(System.Guid,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a Liability
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="inputTaxInstanceId">The respective input tax instance id</param>
            <param name="eventData">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult"/> representing the result of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.FindAllByOriginTypeCreationDate(TaxHub.Common.Enums.LiabilityOriginType,System.DateTime,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.CreateAlertWhenLiabilityCreationFailedForRefundPayment(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates an alert when there is a failure in the liability creation process for a refund
            </summary>
            <param name="payment">The payment being voided</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.CreateAlertWhenLiabilityCreationFailedForAppliedCreditToPayment(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates an alert when there is a failure in the liability creation process for a credit
            </summary>
            <param name="payment">The payment being applied a credit</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.UpdateCashManagementLiabilityId(System.Guid,System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.PublishLiabilityServiceAllocatedEventAndLog(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Liability,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.LiabilityService.PublishRefundLiabilityServiceAllocatedEventAndLog(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Liability,TaxHub.Models.Liability)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PayMappingService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayMappingService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IImportClientService,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.ICompanyService,TaxHub.CoreServices.Acl.Payment.IPayMapper,TaxHub.CoreServices.Application.IClientParentChildService,TaxHub.CoreServices.Application.IMappedTaxPayService,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Constructor
            </summary>
            <param name="appLogger">IAppLogger</param>
            <param name="importClientService">IImportClientService</param>
            <param name="clientService">IClientService</param>
            <param name="companyService">ICompanyService</param>
            <param name="payMapper">IPayMapper</param>
            <param name="clientParentChildService">IClientParentChildService</param>
            <param name="mappedTaxPayService">IMappedTaxPayService</param>
            <param name="applicationMetricsBuilder">The application metrics builder.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayMappingService.MapPayToMappedTaxPay(TaxHub.Models.Tenant,TaxHub.CoreServices.Acl.Payment.PayView,TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayMappingService.IsVoidingObPrepaidTransaction(TaxHub.CoreServices.Acl.Payment.PayView,System.DateTime)">
            <summary>
            Determines if the given pay voids a current/prior quarter OB or prepaid transaction.
            </summary>
            <param name="pay">The pay</param>
            <param name="clientStartingDate">The client's starting date</param>
            <returns>Returns true if the given pay voids an OB or prepaid transaction, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayMappingService.IsTaxReconObPrepaidTransaction(TaxHub.CoreServices.Acl.Payment.PayView,System.DateTime)">
            <summary>
            Determines if the given pay is a Tax Recon adjusting an OB or prepaid transaction
            </summary>
            <param name="pay">The pay</param>
            <param name="clientStartingDate">The client's starting date.</param>
            <returns>Returns true if the given pay is a Tax Recon adjusting an OB or prepaid transaction, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayMappingService.IsSuiRetroCalcObPrepaidTransaction(TaxHub.CoreServices.Acl.Payment.PayView,System.DateTime)">
            <summary>
            Determines if the given pay is a SUI retro calc - current quarter - adjusting an OB or prepaid transaction
            </summary>
            <param name="pay">The pay</param>
            <param name="clientStartingDate">The client's starting date.</param>
            <returns>Returns true if the given pay is a SUI retro calc - current quarter - adjusting an OB or prepaid transaction, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayMappingService.IsAdjustmentToObPrepaidTransaction(TaxHub.CoreServices.Acl.Payment.PayView,System.DateTime)">
            <summary>
            Determines if the given pay is an adjustment to an OB or prepaid transaction
            </summary>
            <param name="pay">The pay</param>
            <param name="clientStartingDate">The client's starting date.</param>
            <returns>Returns true if the given pay is an adjustment to an OB or prepaid transaction, otherwise false.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PayProcessingService">
            <summary>
            Pay processing service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayProcessingService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPeriodicTaxProcessingService,TaxHub.CoreServices.Application.ITenantService,TaxHub.CoreServices.Application.IPayTrackingService,TaxHub.CoreServices.Application.IPayMappingService,TaxHub.CoreServices.Application.IMappedTaxPayService,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Contructor
            </summary>
            <param name="appLogger">IAppLogger</param>
            <param name="periodicTaxProcessingService">IPeriodicTaxProcessingService</param>
            <param name="tenantService">ITenantService</param>
            <param name="payTrackingService">IPayTrackingService</param>
            <param name="payMappingService">IPayMappingService</param>
            <param name="mappedTaxPayService">IMappedTaxPayService</param>
            <param name="applicationMetricsBuilder">The application metrics builder.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayProcessingService.ProcessPay(System.Guid,TaxHub.CoreServices.Acl.Payment.PayView,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PenaltyInterestService">
            <summary>
            PenaltyInterest Service implementation
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.PenaltyInterestService.PnIRunNumber">
            <summary> 
            Run Number to be used on Penalty INterest Liabilities 
            </summary> 
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.#ctor(TaxHub.CoreServices.DataAccess.IPenaltyInterestRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration,TaxHub.CoreServices.Application.IAgencyService,TaxHub.CoreServices.Application.IClientAgencyService,TaxHub.CoreServices.Application.IPaymentService,TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Initializes a new instance of PenaltyInterestService service
            </summary>
            <param name="repository">Repository instance</param>
            <param name="messageHub">Message hub instance</param>
            <param name="logger">Application logger instance</param>
            <param name="featureToggleConfiguration">An IFeatureToggleConfiguration implementation instance</param>
            <param name="agencyService">Agency Service instance</param> 
            <param name="clientAgencyService">Client Agency Service instance</param> 
            <param name="paymentService">Payment Service.</param>
            <param name="domainService">Domain Service</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PenaltyInterestService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.InitializeNew(TaxHub.Models.PenaltyInterest)">
            <summary>
            Initializes PenaltyInterest instance
            </summary>
            <param name="penaltyInterest"> Instance of PenaltyInterest</param>
            <returns>Initialized instance of PenaltyInterest</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.Create(System.Collections.Generic.IEnumerable{TaxHub.Models.PenaltyInterest},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.IsVoidable(TaxHub.Shared.Services.EventDataParams,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.VoidPenaltyInterestById(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Commands.PenaltyInterestUpdateStatusCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.ProcessPenaltyInterestPayments(System.Guid,System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Processes a penalty and interest payment
            </summary>
            <param name="penaltyInterestId">Penalty Interest Id</param>
            <param name="tenantId">Tenant Id</param>
            <param name="correlationId">Correlation Id</param>
            <param name="userId">User Id</param>
            <param name="userName">User Name</param>
            <returns>A bool depending on the processing success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.FindOneByEntryId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc /> 
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.UpdateLiabilityIdByEntrytId(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/> 
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.UpdateToStatusAssembledByEntryId(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc /> 
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.GetTotals(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.FindOneByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.SetFundsRequestedByLiabilityId(System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.UpdateIsCollectedByLiabilityId(System.Guid,System.Guid,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.UpdateStatus(TaxHub.Models.PenaltyInterest,TaxHub.Common.Enums.PenaltyInterestStatus,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates Status of Penalty Interest
            </summary>
            <param name="penaltyInterest">Penalty Interest</param>
            <param name="penaltyInterestStatus">Penalty Interest Update Status</param>
            <param name="eventDataParams">Event Data Params</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Updates Status of Penalty Interest</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestService.VoidPenaltyByLiabilityId(System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Voids a penalty interest by liability Id
            </summary>
            <param name="liabilityId">Liability Id</param>
            <param name="correlationId">Correlation Id</param>
            <param name="userId">User Id</param>
            <param name="userName">User Name</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Voids a penalty interest by liability Id</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PenaltyInterestMapper">
            <summary>
            Mapper from Penalty Interest to PaymentsCreateCommand
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PenaltyInterestMapper.FromPenaltyInterestToPaymentCreateCommand(TaxHub.Models.PenaltyInterest)">
            <summary>
            Takes in a penalty and interest object and returns a generic payment object.
            </summary>
            <returns>Returns a generic payment type</returns>
            <param name="penaltyInterest">Penalty Interest</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintableDocumentService">
            <summary>
            PrintableDocument implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.#ctor(TaxHub.CoreServices.DataAccess.IPrintableDocumentRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ICheckService,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.IAgencyService,TaxHub.CoreServices.Application.IClientAgencyService,TaxHub.CoreServices.Application.IScheduleService,TaxHub.CommonServices.FileManagement.Application.IFileService,TaxHub.CoreServices.Application.IPDFFormService)">
            <summary>
            Initializes a new instance of PrintableDocument service
            </summary>
            <param name="repository">Repository instance</param>
            <param name="messageHub">Message hub instance</param>
            <param name="logger">Application logger instance</param>
            <param name="checkService">CheckService instance</param>
            <param name="clientService">ClientService instance</param>
            <param name="agencyService">AgencyService instance</param>
            <param name="clientAgencyService">ClientAgencyService instance</param>
            <param name="scheduleService">ScheduleService instance</param>
            <param name="fileService">FileService instance</param>
            <param name="pdfFormService">PDFFormService instance</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentService.EventInstanceCreated">
            <summary>
            Gets i
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.InitializeNew(TaxHub.Models.PrintableDocument)">
            <summary>
            Initializes PrintableDocument instance
            </summary>
            <param name="printableDocument"> Instance of printable document</param>
            <returns>Initialized instance of PrintableDocument</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Returns dictionary that represents total count of matching to filters printable documents
            </summary>
            <param name="filterParams">The filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Total count of matching instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Returns list of PrintableDocuments
            </summary>
            <param name="pageParams">Page parameters including sorting</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of PrinatableDocuments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.FindByIds(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.FindReadyAndNonMatchingIds(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns PrintableDocument with specific id
            </summary>
            <param name="id">Id to search for</param>
            <param name="cancellationToken">Cancelation token</param>
            <returns>Matching PrintableDocument instance, null otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.FindAllByCheckId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns list of PrintableDocuments with given check ID
            </summary>
            <param name="checkId">Check Id to search for</param>
            <param name="cancellationToken">Cancelation token</param>
            <returns>Matching PrintableDocument instance, null otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.FindAllByFormDocumentId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns list of PrintableDocuments with given check ID
            </summary>
            <param name="formDocumentId">form Document Id to search for</param>
            <param name="cancellationToken">Cancelation token</param>
            <returns>Matching PrintableDocument instance, null otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.FindAll(System.Threading.CancellationToken)">
            <summary>
            Returns list of all Printable Documents
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of printable documents</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.UpdateStatus(TaxHub.Models.PrintableDocument,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Enums.DocumentStatus,System.Threading.CancellationToken)">
            <summary>
            Updates document status
            </summary>
            <param name="printableDocument">Document to update</param>
            <param name="eventDataParams">Event param instance</param>
            <param name="status">New status</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Object holding operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.UpdatePrintStatus(TaxHub.Models.PrintableDocument,TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Commands.PrintableDocumentUpdatePrintStatusCommand,System.Threading.CancellationToken)">
            <summary>
            Updates document print status
            </summary>
            <param name="printableDocument">Document to update</param>
            <param name="eventDataParams">Event param instance</param>
            <param name="printableDocumentStatusUpdateCommand">Holds changes</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Object holding operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.UpdateStatusAndPrintOrigin(System.Boolean,TaxHub.Models.PrintableDocument,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Enums.DocumentPrintStatus,System.Threading.CancellationToken)">
            <summary>
            Updates the status of the printable document and the IsLocal column.
            </summary>
            <param name="isLocal">Local or Non Local print.</param>
            <param name="printableDocument">Document to update</param>
            <param name="eventDataParams">Instance of event</param>
            <param name="printStatus">The new status</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Object holding operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.UpdateBatchPrintInfo(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Commands.PrintableDocumentBatchInfoUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Updates Printable Document Batch Print Information.
            </summary>
            <param name="eventDataParams">Instance of Event.</param>
            <param name="batchInfoUpdateCommand">Properties to be updated.</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.Create(TaxHub.Models.PrintableDocument,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates new PrintableDocument
            </summary>
            <param name="printableDocument">PrintableDocument to create</param>
            <param name="eventDataParams">event params</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Object holding operation result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.CreatePrintableDocumentFromCheck(System.Int32,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a PrintableDocument from check
            </summary>
            <param name="checkId">Check ID</param>
            <param name="correlationId">Correlation ID</param>
            <param name="userId">User ID</param>
            <param name="userName">User name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>CreateAggregateResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.CreatePrintableDocumentFromFormDocument(TaxHub.Models.PrintableDocument,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentService.GetNumberOfPagesPerDocument(System.Guid,System.Guid)">
            <summary>
            Get the number of pages for the the FileInfo as PDF
            </summary>
            <param name="fileInfoId">The file info Id</param>
            <param name="correlationId">The correlation Id</param>
            <returns>The number of pages in this FileInfo as a PDF</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeMappingService.LookupOneById(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of UltiProTaxCodeMapping by mapping id.
            </summary>
            <param name="mappingId">The mapping id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An instance of <see cref="T:TaxHub.Models.TaxCodeMapping"/> if found in the database, or null otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeMappingService.LookupAllByUltiProTaxCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Find by UTE Tax Code
            </summary>
            <param name="taxCode">The UltiPro Tax Code</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The tax code mappings</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeMappingService.LookupAllByRtsTaxCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Find by UTE Tax Code
            </summary>
            <param name="rtsTaxCode">The RTS Tax Code</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The tax code mappings</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeMappingService.DeleteAsync(TaxHub.Models.TaxCodeMapping,System.Threading.CancellationToken)">
            <summary>
            Rollback the entity.
            </summary>
            <param name="entity">The TaxCodeMapping.</param>
            <param name="cancellationToken">The Token</param>
            <returns>Rollbacks the given TaxCodeMappingObject</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeMappingService.FindAllByUltiProAndUteTaxCode(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds by ultipro and UtetaxCode
            </summary>
            <param name="ultiProTaxCode">The ultiproTaxCode.</param>
            <param name="uteTaxCode">The uteTaxCode.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>TaxCodeMapping</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeMappingService.FindOneByUltiProAndUteTaxCode(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds by ultipro and UtetaxCode
            </summary>
            <param name="ultiProTaxCode">The ultiproTaxCode.</param>
            <param name="uteTaxCode">The uteTaxCode.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>TaxCodeMapping</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeMappingService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all tax code mappings 
            </summary>
            <param name="pageParameters">The page data parameters.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns a list of tax code mappings.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintFileRequestVerificationResult">
            <summary>
            The print file request verification result
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintFileRequestVerificationResult.PrintableVerificationDetails">
            <summary>
            A dictionary of the printable documents with its verification result details
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintFileRequestVerificationResult.Message">
            <summary>
            Holds a string with the result of the verifications
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintFileRequestVerificationResult.Result">
            <summary>
            Gets the result of the operation
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintFileRequestVerificationResult">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintFileRequestVerificationResult.#ctor">
            <summary>
            The default initializer
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintFileRequestVerificationResult.PrintableVerificationDetails">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintFileRequestVerificationResult.Message">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintFileRequestVerificationResult.Result">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintableDocumentVerification.CheckVerification">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.CheckVerification.#ctor(TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor
            </summary>
            <param name="appLogger">The app logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.CheckVerification.LoadVerifications">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.CheckVerification.LoadExclusions">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintableDocumentVerification.CouponVerification">
            <summary>
            Applies verficiation to coupons
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.CouponVerification.#ctor(TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor
            </summary>
            <param name="appLogger">The app logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.CouponVerification.LoadVerifications">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.CouponVerification.LoadExclusions">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerificationFactory">
            <summary>
            Will create a verification instance based on the document type
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerificationFactory.GetVerifier(TaxHub.Common.Enums.DocumentType)">
            <summary>
            Returns the Verification based on the type
            </summary>
            <param name="documentType">The document type</param>
            <returns>An IPrintableDocumentVerification</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerificationResult">
            <summary>
            Defines the verification result
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerificationResult.Result">
            <summary>
            Gets the result of the operation
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerificationResult.ErrorMessage">
            <summary>
            Gets the error message
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintableDocumentVerification">
            <summary>
            The printable document verification base class
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintableDocumentVerification.#ctor(TaxHub.Common.Logging.IAppLogger)">
            <summary>
            The constuctor
            </summary>
            <param name="logger">The app logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintableDocumentVerification.LoadVerifications">
            <summary>
            Loads all the verifications
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintableDocumentVerification.LoadExclusions">
            <summary>
            Loads all the exclusions
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintableDocumentVerificationFactory">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintableDocumentVerificationFactory.#ctor(TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerification,TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerification,TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerification)">
            <summary>
            Constructor
            </summary>
            <param name="checkVerification">The check verifier</param>
            <param name="returnVerification">The return verifier</param>
            <param name="couponVerification">The coupon verifier</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintableDocumentVerificationFactory.GetVerifier(TaxHub.Common.Enums.DocumentType)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintableDocumentVerificationResult">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintableDocumentVerificationResult.Result">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentVerification.PrintableDocumentVerificationResult.ErrorMessage">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintableDocumentVerification.ReturnVerification">
            <summary>
            Applies verficiation to returns
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.ReturnVerification.#ctor(TaxHub.CoreServices.Application.IClientAgencyService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor
            </summary>
            <param name="appLogger">The app logger</param>
            <param name="clientAgencyService">The client agency service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.ReturnVerification.LoadVerifications">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.ReturnVerification.LoadExclusions">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerification">
            <summary>
            Defines the verification that must be performed on each printable document
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerification.VerificationExclusions">
            <summary>
            Hold a list of all the verification exclusions
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerification.Verifications">
            <summary>
            Hold a list of all the verifications
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerification.Apply(System.Guid,System.Collections.Generic.IEnumerable{TaxHub.Models.PrintableDocument},System.Guid)">
            <summary>
            Apply all the rules
            </summary>
            <param name="printableDocumentId">The printable document id of the document to verify</param>
            <param name="printableDocuments">The list of printable documents to verify against</param>
            <param name="correlationId">The correlation id</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService">
            <summary>
            QuarterlyQuarterlyTaxInstance Corrections service implementation.
            </summary>
            <summary>
            QuarterlyQuarterlyTaxInstance service implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.VoidAndSetIsPostedToNo(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.#ctor(TaxHub.CoreServices.DataAccess.IQuarterlyTaxInstanceRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService"/> class.
            </summary>
            <param name="quarterlyTaxInstanceRepository">Quarterly Tax Instance Repository</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.EventInstanceCreated">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.InitializeNew(TaxHub.Models.QuarterlyTaxInstance)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.FindOne(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.FindAll(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.Count(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.Count(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.VoidPriorNonPostedQuarterEnd(System.String,System.Guid,System.Int16,System.Int16,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.IsQuarterlyEndClosed(System.Guid,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.IsQuarterlyEndPosted(System.Guid,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.MarkReady(System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.MarkReady(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceService.VoidIfNonPosted(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceServiceCorrections">
            <summary>
            Service used to correct <see cref="T:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceServiceCorrections.VoidAndSetIsPostedToNo(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Finds quarterly tax instance by id and sets its status to void regardless of status.
            </summary>
            <param name="id">The id</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the quarterly tax instance with the given id</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Results.ImportCodeResult">
            <summary>
            Represents the result of loading the import code table
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.ImportCodeResult.Success">
            <summary>
            Gets or sets the success value.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.ImportCodeResult.ImportCodes">
            <summary>
            Gets or sets the import codes.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Results.ImportCode">
            <summary>
            Represents a record in Import_code table
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.ImportCode.TaxId">
            <summary>
            Gets or sets the tax identifier.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.ImportCode.IsTax">
            <summary>
            Gets or sets if is tax
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.ImportCode.Status">
            <summary>
            Gets or sets the status
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.ImportCode.EntityCode">
            <summary>
            Get or sets the Entity Code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.ImportCode.StateCode">
            <summary>
            Get or sets the State code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.ImportCode.LocalCode">
            <summary>
            Gets or sets the Local code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.ImportCode.PayeeId">
            <summary>
            Gets or sets the PayeeId
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.ImportCode.WagesId">
            <summary>
            Gets or sets the Wages Id
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Results.PayMappingResult">
            <summary>
            Result of Pay Mapping Process
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.PayMappingResult.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.PayMappingResult.ShouldTransitionToFailed">
            <summary>
            Should Transition To Failed
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.PayMappingResult.MappingMetadata">
            <summary>
            Mapping Metadata
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.PayMappingResult.PayTracking">
            <summary>
            Pay Tracking
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Results.PayMappingResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Results.PayMappingResult.#ctor(TaxHub.Models.PayTracking,System.Boolean,TaxHub.Models.ExcludedReason,System.String)">
            <summary>
            Constructor from PayTracking info
            </summary>
            <param name="payTracking">PayTracking</param>
            <param name="isExcluded">IsExcluded</param>
            <param name="excludedReason">ExcludedReason</param>
            <param name="clientId">string</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Results.TaxProcessingResult">
            <summary>
            Tax processing result.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.Results.TaxProcessingResult.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.Results.TaxProcessingResult.Failure">
            <summary>
            Failure
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.Results.TaxProcessingResult.ProcessOwnerWasChangedByAnotherProcess">
            <summary>
            Process owner was changed by another process.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Results.TaxProcessingExtendedResult`1">
            <summary>
            Class which wraps the TaxProcessingResult with a message. Useful
            for sending warnings describing the the result.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.TaxProcessingExtendedResult`1.Result">
            <summary>
            The tax processing result
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.TaxProcessingExtendedResult`1.Message">
            <summary>
            The message
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.Results.TaxProcessingExtendedResult`1.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Results.TaxProcessingExtendedResult`1.#ctor">
            <summary>
            Default constructor with string.empty message.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Results.TaxProcessingExtendedResult`1.#ctor(TaxHub.CoreServices.Application.Results.TaxProcessingResult,`0,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="result">The TaxProcessingResult.</param>
            <param name="data">The data of type T.</param>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Results.TaxProcessingExtendedResult`1.SetResult(TaxHub.CoreServices.Application.Results.TaxProcessingResult,System.String,System.Object[])">
            <summary>
            Method sets result and message.
            </summary>
            <param name="result">The TaxProcessingResult.</param>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.Results.TaxProcessingResultExtensions">
            <summary>
            Extension methods to wrap an object inside a TaxProcessingExtendedResult object.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Results.TaxProcessingResultExtensions.AsSuccessTaxProcessingResult``1(``0)">
            <summary>
            Returns a TaxProcessingExtendedResult with Success result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aggregate">The aggregate.</param>
            <returns>The aggregate with success result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.Results.TaxProcessingResultExtensions.AsTaxProcessingExtendedResult``1(``0,TaxHub.CoreServices.Application.Results.TaxProcessingResult,System.String)">
            <summary>
            Returns a TaxProcessingExtendedResult;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aggregate">The aggregate.</param>
            <param name="result">The result code.</param>
            <param name="message">The message.</param>
            <returns>The aggregate with failed result.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintFileRequestModerator.IPrintFileModeratorService">
            <summary>
            Blueprint for PrintFileRequestManager classes
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.IPrintFileModeratorService.VerifyPrintableDocuments(System.Collections.Generic.IEnumerable{TaxHub.Models.PrintableDocument},System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether documents in list can be sent to print
            </summary>
            <param name="printableDocuments">The printable document list</param>
            <param name="correlationId">The correlation id</param>
            <param name="userId">The user id</param>
            <param name="userDescription">The user description</param>
            <param name="cancellationToken">CancellationToken instance</param>
            <returns>Whether or no documents list can be sent to print</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.IPrintFileModeratorService.SortPrintableDocuments(TaxHub.Models.PrintFileRequest,System.Int32,System.Guid)">
            <summary>
            Sort the printable documents in the PrintFileRequest
            </summary>
            <param name="printFileRequest">The print file request</param>
            <param name="maxNumberOfDocsPerPdf">Choose how many documents per PDF</param>
            <param name="correlationId">The correlation id</param>
            <returns>The result of the sorting</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.IPrintFileModeratorService.CollateStagedPrintFiles(System.Collections.Generic.List{TaxHub.Models.StagedPrintFile},TaxHub.Models.BatchDocument,System.Guid)">
            <summary>
            Collate staged print files into a temporary stream result
            </summary>
            <param name="stagedPrintFileList">The staged print files to collate</param>
            <param name="batchDocument">The Batch document object</param>
            <param name="correlationId">The correlation Id</param>
            <returns>The collated temporary stream result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.IPrintFileModeratorService.SaveBatchDocumentToObjectStorage(TaxHub.Models.BatchDocument,System.Collections.Generic.List{TaxHub.Hosting.Runtime.TemporaryStreamResult},System.Guid,System.Guid,System.String)">
            <summary>
            Save the batch document to Object storage
            </summary>
            <param name="batchDocument">The batch document object</param>I'
            <param name="collatedTemporaryStreamResult">The stream holding the collated PDFs</param>
            <param name="correlationId">The correlation Id</param>
            <param name="userId">The user Id</param>
            <param name="userDescription">The user description</param>
            <returns>The result of the save operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.IPrintFileModeratorService.VerifyWysuiPrintableDocuments(System.Collections.Generic.IEnumerable{TaxHub.Models.PrintableDocument},System.Boolean,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether WYSUI documents in list are printed locally
            </summary>
            <param name="wsyuiPrintableDocuments">The WYSUI printable documents</param>
            <param name="isLocal">Flag indicating if it's a local print</param>
            <param name="correlationId">The correlation id</param>
            <param name="userId">The User Id</param>
            <param name="userDescription">The User Description</param>
            <param name="cancellationToken">CancellationToken instance</param>
            <returns>Whether or no documents list can be sent to print</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.#ctor(TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintableDocumentVerificationFactory,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPrintableDocumentService,TaxHub.CommonServices.FileManagement.Application.IFileService,TaxHub.CoreServices.Application.IPDFFormService,TaxHub.CoreServices.Application.IMailSheetService,TaxHub.CoreServices.Application.ICoverSheetService,TaxHub.CoreServices.Application.IAgencyService)">
            <summary>
            The Constructor
            </summary>
            <param name="verificationFactory">Printable Document Verification Factory</param>
            <param name="logger">Application Logger</param>
            <param name="printableDocumentService">Printable document service</param>
            <param name="fileService">File service</param>
            <param name="pdfFormService">PDF Form service</param>
            <param name="mailSheetService">Mail Sheet service</param>
            <param name="coverSheetService">Cover sheet service</param>
            <param name="agencyService">The agency service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.VerifyPrintableDocuments(System.Collections.Generic.IEnumerable{TaxHub.Models.PrintableDocument},System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.SortPrintableDocuments(TaxHub.Models.PrintFileRequest,System.Int32,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.GetSortDocumentItems(System.Collections.Generic.List{TaxHub.Models.StagedPrintFile},System.Guid,System.Guid)">
            <summary>
            Populates the sort document items with information obtained from PrintableDocument
            </summary>
            <param name="stagedPrintFiles">The staged print file to sort</param>
            <param name="printFileRequestId">The print file request identifier</param>
            <param name="correlationId">The correlation Id</param>
            <returns>The list of items to sort</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.GetSortDocumentItemsLookup(System.Collections.Generic.List{TaxHub.Models.Helpers.SortDocumentItem},System.Collections.Generic.Dictionary{TaxHub.Common.Enums.DocumentFilingType,System.Collections.Generic.List{TaxHub.Models.Helpers.SortDocumentItem}},System.Collections.Generic.Dictionary{TaxHub.Common.Enums.DocumentFilingType,System.Collections.Generic.List{TaxHub.Models.Helpers.SortDocumentItem}},System.Collections.Generic.Dictionary{TaxHub.Common.Enums.DocumentFilingType,System.Collections.Generic.List{TaxHub.Models.Helpers.SortDocumentItem}})">
            <summary>
            Create groups of document filing type
            </summary>
            <param name="sortDocumentItemsList">The list of items to sort</param>
            <param name="bulkAgenciesLookup">The lookup for bulk agencies</param>
            <param name="wySuiAgenciesLookup">The lookup for WYSUI payments</param>
            <param name="sortDocumentItemsWithErrorsLookup">The lookup for staged print files with errors</param>
            <returns>The grouped list of items to sort</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.ProcessSortDocumentItems(System.Collections.Generic.KeyValuePair{TaxHub.Common.Enums.DocumentFilingType,System.Collections.Generic.List{TaxHub.Models.Helpers.SortDocumentItem}},TaxHub.Models.Helpers.BatchDocumentLimitsEnforcer)">
            <summary>
            Add a batchDocumentId, pageNumber and keep a count of the StagedPrintFiles
            by agency group to the StagedPrintFile list
            </summary>
            <param name="groupOfSortDocumentItems">The lookup for items to sort by document filing type</param>
            <param name="batchDocumentLimits">Batch document limits enforcer</param>
            <returns>The sorted staged print files</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.ProcessSortDocumentsWithErrors(System.Collections.Generic.Dictionary{TaxHub.Common.Enums.DocumentFilingType,System.Collections.Generic.List{TaxHub.Models.Helpers.SortDocumentItem}},TaxHub.Common.Enums.DocumentFilingType)">
            <summary>
            Mark the corresponding StagedPrintFile as failed
            </summary>
            <param name="sortDocumentItemsWithErrorsLookup">The dictionary of sort document items with errors</param>
            <param name="documentFilingType">The document filing type</param>
            <returns>The staged print files with errors</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.CollateStagedPrintFiles(System.Collections.Generic.List{TaxHub.Models.StagedPrintFile},TaxHub.Models.BatchDocument,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.GetFileAssociatedToPrintableDoc(System.Guid,System.Guid)">
            <summary>
            Get File associated to printable document.
            </summary>
            <param name="fileInfoId">The file info indentifier.</param>
            <param name="correlationId">The correlation identifier.</param>
            <returns>FileResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.SaveBatchDocumentToObjectStorage(TaxHub.Models.BatchDocument,System.Collections.Generic.List{TaxHub.Hosting.Runtime.TemporaryStreamResult},System.Guid,System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.CreateTemporaryStreamResultFromCollatedBatch(System.Collections.Generic.List{TaxHub.Hosting.Runtime.TemporaryStreamResult},System.String,System.String)">
            <summary>
            Merge collatedBatch and create temporary stream result
            </summary>
            <param name="collatedBatch">The collated batch</param>
            <param name="pathFileName">The file name in disk</param>
            <param name="batchFileName">The batch's file name</param>
            <returns>Collated temporary stream result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.SaveFile(System.String,System.Byte[],TaxHub.Common.Enums.FileServiceDocumentType,System.String,System.Guid,System.Guid,System.String,System.Guid)">
            <summary>
            saves the file to the object storage
            </summary>
            <param name="fileName">file name</param>
            <param name="bytes">file contents</param>
            <param name="printJobFile">file type</param>
            <param name="filePath">server file path</param>
            <param name="batchDocumentId">batch id</param>
            <param name="userId">user if</param>
            <param name="userDescription">user description</param>
            <param name="correlationId">correlation id</param>
            <returns>FileInfo</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestModerator.PrintFileModeratorService.VerifyWysuiPrintableDocuments(System.Collections.Generic.IEnumerable{TaxHub.Models.PrintableDocument},System.Boolean,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PrintFileRequestService">
            <summary>
            Domain service related to PrintFileRequestService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.#ctor(TaxHub.CoreServices.DataAccess.IPrintFileRequestRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.PrintFileRequestModerator.IPrintFileModeratorService,TaxHub.CoreServices.Application.IPrintableDocumentService,TaxHub.CommonServices.FileManagement.Application.IFileService)">
            <summary>
            Constructus a new instance of <see cref="T:TaxHub.CoreServices.Application.PrintFileRequestService">class</see>.
            </summary>
            <param name="repository">PrintFileRequestRepository instance</param>
            <param name="messageHub">MessageHub instance</param>
            <param name="logger">Logger instance</param>
            <param name="printFileModeratorService">PrintFIleModeratorService instance</param>
            <param name="printableDocumentService">The Printable Document Service</param>
            <param name="fileService">An instance of the IFileService implementation</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintFileRequestService.EventInstanceCreated">
            <summary>
            Gets created event's name
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PrintFileRequestService.EventInstanceDeleted">
            <summary>
            Gets deleted event's name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.InitializeNew(TaxHub.Models.PrintFileRequest)">
            <summary>
            Initialize a PrintFileRequest instance
            </summary>
            <param name="request">PrintFileRequest instance to initialize</param>
            <returns>Initialized PrintFileRequest instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.Create(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a print file request
            </summary>
            <param name="documentIds">The list of the documentIds to create a PrintFileRequest</param>
            <param name="isLocal">Indicates whether it is going to be generated on the fly</param>
            <param name="correlationId">Correlation id</param>
            <param name="userId">User id</param>
            <param name="userDescription">User description</param>
            <param name="cancellationToken">CancellationToken instance</param>
            <returns>Instance of created request</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.UpdateStatus(TaxHub.Models.PrintFileRequest,TaxHub.Common.Enums.PrintFileRequestStatus,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.TransmitToUdesAndSetStatus(System.Guid,System.Guid,System.Guid,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Transmits the outbound file from the object store to udes and sets the status to Sent. 
            The method is written so that if it is invoked more than 1 time it does not fail, but instead returns an appropriate result.
            </summary>
            <param name="printFileRequestId">The print File Request Id.</param>
            <param name="fileId">The identifier of the outboundFile.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="userDescription">The user's description.</param>
            <param name="filePath">The path where we declaratively store the file</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the process of transmitting the file finished correctly. False otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.FindByBatchId(System.Guid,TaxHub.Common.Enums.PrintFileRequestStatus,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.ProcessPrintFileRequest(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.Boolean,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.MapToCreateAggregateResult(TaxHub.Models.SortAndCollateProcessExplainedResult)">
            <summary>
            Maps the PrintFileRequestStatus to a CreateAggregateResult status
            </summary>
            <param name="sortAndCollateResult">The Sort and Collate Result</param>
            <returns>Create Aggregate Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.CreateAndAllocatePrintFileRequest(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintFileRequestVerificationResult},System.Boolean,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.UpdatePrintableDocumentStatusAndPrintOrigin(System.Guid,TaxHub.Common.Enums.DocumentPrintStatus,System.Boolean,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            This will update the printable document status
            </summary>
            <param name="pDocId">The printable document Id</param>
            <param name="documentPrintStatus">The document status</param>
            <param name="isLocal">The indicator whether the document is printing locally</param>
            <param name="correlationId">The correlation id</param>
            <param name="userId">The user id</param>
            <param name="userDescription">The user description</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.AddBatchDocument(TaxHub.Models.PrintFileRequest,System.Collections.Generic.IEnumerable{TaxHub.Models.StagedPrintFile},TaxHub.Common.Enums.DocumentFilingType,System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.UpdateBatchDocumentAndStagedPrintFilesStatus(TaxHub.Models.PrintFileRequest,System.Guid,TaxHub.Common.Enums.PrintFileRequestStatus,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.UpdateSingleStagedPrintFileRequestStatus(TaxHub.Models.PrintFileRequest,System.Guid,TaxHub.Common.Enums.PrintFileRequestStatus,System.String,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.ProcessPrintDocumentsRequest(System.Guid,System.Guid,System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.SortPrintFileRequest(System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Method Sorts the Staged print files of a PrintFileRequest object
            </summary>
            <param name="printFileRequestId">The printFileRequest identifier</param>
            <param name="correlationId">The correlation Id</param>
            <param name="userId">The userId</param>
            <param name="userDescription">The user description</param>
            <returns>The result of Sorting a print file.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.CollateAndSaveBatch(System.Guid,System.Guid,System.Guid,System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.CollateAndSavePrintFileRequest(System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Method collates and Saves Staged print files from a PrintFileRequest object
            </summary>
            <param name="printFileRequestId">The printFileRequest identifier</param>
            <param name="correlationId">The correlation Id</param>
            <param name="userId">The userId</param>
            <param name="userDescription">The user description</param>
            <returns>The result of Collate/Save of a staged print file.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.CreateSummaryValidationResultMessage(System.Collections.Generic.IEnumerable{TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintFileRequestVerificationResult})">
            <summary>
            Create the summary message from the failed validations
            </summary>
            <param name="validationResults">An enumerable with all the validation results</param>
            <returns>The summary message and count</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.CreatePrintFileRequestCreationMessageWithValidationResults(TaxHub.Hosting.Runtime.CreateAggregateExtendedResult{TaxHub.Models.PrintFileRequest},System.Collections.Generic.IEnumerable{TaxHub.CoreServices.Application.PrintableDocumentVerification.IPrintFileRequestVerificationResult})">
            <summary>
            Creates a result message for a PrintFileRequest with validation results
            </summary>
            <param name="printFileRequestResult">The newly create Print File Request</param>
            <param name="validationResults">The validation results</param>
            <returns>A formatted message</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.EnsurePrintableDocumentsStatusByStagedPrintFileStatus(System.Guid,System.Guid,System.String,TaxHub.Models.PrintFileRequest,System.Threading.CancellationToken)">
            <summary>
            Set all the PDocs to the Print File Request Status
            </summary>
            <param name="correlationId">The correlation id</param>
            <param name="userId">The user id</param>
            <param name="userDescription">The user description</param>
            <param name="printFileRequest">The created print file request</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A Task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.MapToDocumentPrintStatus(TaxHub.Common.Enums.PrintFileRequestStatus)">
            <summary>
            Maps the PrintFileRequestStatus to a DocumentPrintStatus
            </summary>
            <param name="printFileRequestStatus">The Print File Request Status</param>
            <returns>A Document Print Status</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PrintFileRequestService.UpdatePrintableDocument(System.Guid,TaxHub.Common.Enums.DocumentPrintStatus,System.Guid,System.Guid,System.String,System.Threading.CancellationToken,System.String)">
            <summary>
            This will update the printable document status
            </summary>
            <param name="pDocId">The printable document Id</param>
            <param name="documentPrintStatus">The document status</param>
            <param name="correlationId">The correlation id</param>
            <param name="userId">The user id</param>
            <param name="userDescription">The user description</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="errorMessage">Error message</param>
            <returns>A task</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ProcessingTaxInstanceService">
            <summary>
            The implementation of ProcessingTaxInstance service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ProcessingTaxInstanceService.#ctor(TaxHub.CoreServices.DataAccess.IProcessingTaxInstanceRepository)">
            <summary>
            Initialices ProcessingTaxInstance Service
            </summary>
            <param name="repository">The ProcessingTaxInstance repository</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ProcessingTaxInstanceService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds one the processingTaxInstance matching with PostPayrollId
            </summary>
            <param name="postPayrollId">postPayrollId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>A ProcessingTaxInstance that matches that postPayrollId</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.TaxCodeMappingService">
            <summary>
            Service layer for tax code mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeMappingService.#ctor(SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService,TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeMappingRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PaymentService" /> class.
            </summary>
            <param name="cacheManager">The Cache Manager</param>
            <param name="cacheRevocationService">The Cache Revocation Service</param>
            <param name="repository">Repository</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.TaxCodeMappingService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.TaxCodeMappingService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeMappingService.InitializeNew(TaxHub.Models.TaxCodeMapping)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeMappingService.LookupOneById(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeMappingService.LookupAllByUltiProTaxCode(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeMappingService.LookupAllByRtsTaxCode(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeMappingService.DeleteAsync(TaxHub.Models.TaxCodeMapping,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeMappingService.FindAllByUltiProAndUteTaxCode(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeMappingService.FindOneByUltiProAndUteTaxCode(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeMappingService.ReplayAggregateEvents(TaxHub.Common.EventStore.IAggregateSnapshotFilter,System.Func{TaxHub.Common.Models.ISnapshotable,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Raise observed events for TaxCodeMappings described by the filter.
            </summary>
            <param name="eventsFilter">Filter for DB query.</param>
            <param name="func">Action to apply.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeMappingService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeMappingService.GetCacheKeys(TaxHub.Models.TaxCodeMapping)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.StateElectronicTransferService">
            <summary>
            Implementation of application layer for State Electronic Transfer aggregate
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.StateElectronicTransferService.EftType">
            <summary>
            Eft type used as metadata
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.StateElectronicTransferService.#ctor(TaxHub.CoreServices.DataAccess.IStateElectronicTransferRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.StateElectronicTransferService"/> class.
            </summary>
            <param name="repository">Repository</param>
            <param name="domainService">Domain service</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ClientAgencyService">
            <summary>
            Client Agency Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyService.#ctor(SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService,TaxHub.CoreServices.DataAccess.IClientAgencyRepository,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.IAgencyService,TaxHub.CoreServices.Application.IScheduleService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes new instance of ClientAgencyService
            </summary>
            <param name="cacheManager">The cache manager.</param>
            <param name="cacheRevocationService">The cache revocation service.</param>
            <param name="repository"> client agency repo</param>
            <param name="clientService">Client Service</param>
            <param name="agencyService">Agency (Payee) Service</param>
            <param name="scheduleService"> Schedule Service</param>
            <param name="messageHub">Message Hub</param>
            <param name="logger">The app logger</param>
            <param name="featureToggleConfiguration">The featureToggleConfiguration</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyService.FindByScheduleIds(System.String[],SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyService.Update(TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyService.FindByPayeeIdAndFein(System.String,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyService.Delete(TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyService.FindAllByLastChange(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyService.GetCacheKeys(TaxHub.Models.ClientAgency)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientAgencyService.Create(TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.ClientDraftService">
            <summary>
            Implements client service interface.
            </summary>
            <seealso cref="T:TaxHub.Models.ClientDraft" />
            <seealso cref="T:TaxHub.CoreServices.Application.IClientDraftService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientDraftService.#ctor(TaxHub.CoreServices.DataAccess.IClientDraftRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor to create instance
            </summary>
            <param name="repository">Repository</param>
            <param name="messageHub">Messagehub</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientDraftService.FindAll(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds All the Clientdrafts Matching with ClientId
            </summary>
            <param name="clientId">clientId</param>
            <param name="pageParams">pageParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>List of Client Drafts fot that ClientId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientDraftService.Delete(TaxHub.Models.ClientDraft,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.ClientNoteService">
            <summary>
            The implementation of ClientNote service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientNoteService.#ctor(TaxHub.CoreServices.DataAccess.IClientNoteRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initialices ClientNote Service
            </summary>
            <param name="repository">The ClientNote repository</param>
            <param name="messageHub">The message hub</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientNoteService.Delete(TaxHub.Models.ClientNote,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.ClientParentChildService">
            <summary>
            Client parent/child relation service
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.ClientParentChildService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.#ctor(TaxHub.CoreServices.DataAccess.IClientParentChildRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.ITenantService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes new instance of ClientParentChildService
            </summary>
            <param name="repository"> client agency repo</param>
            <param name="messageHub">Message Hub</param>
            <param name="logger">The app logger</param>
            <param name="cacheManager">The Cache Manager.</param>
            <param name="cacheRevocationService">The cache revocation services</param>
            <param name="clientService"> client service</param>
            <param name="tenantService"> client service</param>
            <param name="featureToggleConfiguration">Feature toggle configuration</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.InitializeNew(TaxHub.Models.ClientParentChild)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.FindByTenant(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.FindAllByParentClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.FindAllChildrenClientIdsByParentClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.FindAllByChildClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.LookUpParentByMultiFeinChildClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.IsCommonPayAgentByClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.IsMultiFeinAgentByClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.CanBeMultiFeinChild(System.Guid,System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.CanBeMultiFeinParent(System.Guid,System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.CanBeCommonPayParent(System.Guid,System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.CanBeCommonPayChild(System.Guid,System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.Create(TaxHub.Models.ClientParentChild,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc cref="M:TaxHub.CoreServices.Application.IClientParentChildService.Create(TaxHub.Models.ClientParentChild,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.Delete(TaxHub.Models.ClientParentChild,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.Delete(System.String,System.String,System.String,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.Delete(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.DeleteParentSet(System.String,System.String,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.DeleteChildSet(System.String,System.String,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.GetCacheKeys(TaxHub.Models.ClientParentChild)">
            <summary>
            This creates an Array of Cachekeys used for revocation.
            </summary>
            <param name="clientParentChild"> The client.</param>
            <returns>It returns an array of string </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.LookUpByChildClientIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.Update(TaxHub.Models.ClientParentChild,TaxHub.Models.ClientParentChild,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.HasRecordsForTenant(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.GetClientParentChildIdSet(System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientParentChildService.GetPayeeToYeAgencyMapByClient(System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.ClientPayrollService">
            <summary>
            Client Payroll Service.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.ClientPayrollService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.#ctor(TaxHub.CoreServices.DataAccess.IClientPayrollRepository,TaxHub.CoreServices.Application.IImportClientService,TaxHub.CoreServices.Acl.Payment.IHubPayrollUnitServiceAdapter,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes new instance of ClientPayrollService
            </summary>
            <param name="repository"> client repo</param>
            <param name="importClientService"> import client service</param>
            <param name="hubPayrollUnitServiceAdapter"> hub payroll unit service adapter</param>
            <param name="domainService"> Domain service </param>
            <param name="messageHub">Message Hub</param>
            <param name="logger">The app logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.InitializeNew(TaxHub.Models.ClientPayroll)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get All client payroll records
            </summary>
            <param name="pageParams"> The Paged Params</param>
            <param name="cancellationToken"> The Cancellation token</param>
            <returns> List of available client payroll record</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.FindAllByClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.FindOneByClientIdPayrollId(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.FindOneByPayrollUnitId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.Update(TaxHub.Models.ClientPayroll,TaxHub.Models.PayrollUnitCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.UpdatePayrollUnitClientIdFromUI(TaxHub.Models.Commands.ClientPayrollClientUpdatedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.Update(TaxHub.Models.ClientPayroll,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.SyncPayrollUnitsFromHubForTenant(System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Syncs payroll units
            </summary>
            <param name="tenantId"> Tenant Id </param>
            <param name="eventDataParams"> Event data params </param>
            <returns> success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.CreatePayrollUnitFromCommand(TaxHub.Models.PayrollUnitCommand,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Creates a payroll unit from Command
            </summary>
            <param name="payrollUnit"> The payroll unit </param>
            <param name="eventDataParams"> Event Data Params</param>
            <returns> success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.CreatePayrollUnit(TaxHub.Models.PayrollUnitCommand,TaxHub.Models.Client,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Creates a payroll unit
            </summary>
            <param name="createCommand"> Payroll unit command</param>
            <param name="client"> the client</param>
            <param name="evd"> event data params</param>
            <returns> Agrregate result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.UpdateClientPayroll(TaxHub.Models.PayrollUnitCommand,System.String,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Updates a payroll unit.
            </summary>
            <param name="updateCommand"> Update command </param>
            <param name="clientId"> The clientId </param>
            <param name="eventDataParams"> Event Data params</param>
            <returns> Update Aggregate result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientPayrollService.Delete(TaxHub.Models.ClientPayroll,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IDedSubscriptionSetupUpdater">
            <summary>
            The tenant management service interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDedSubscriptionSetupUpdater.CreateSubscriber(System.String,System.String,TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Creates the subscriber.
            </summary>
            <param name="dedSubscriberCode">The ded subscriber code.</param>
            <param name="dedSubscriberDescription">The ded subscriber description.</param>
            <param name="dataCenter">The data center.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDedSubscriptionSetupUpdater.CreateSubscriptions(System.String,System.Boolean,System.UInt16,System.UInt16,TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Creates subscriptions.
            </summary>
            <param name="dedSubscriptionName">Name of the ded subscription.</param>
            <param name="dedSubscriptionEnabled">if set to <c>true</c> [ded subscription enabled].</param>
            <param name="dedSubscriptionConnTimeout">The ded subscription connection timeout.</param>
            <param name="dedSubscriptionMsgPerMin">The ded subscription MSG per minimum.</param>
            <param name="dataCenter">The data center.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDedSubscriptionSetupUpdater.CreateSubscription(System.String,System.Boolean,System.UInt16,System.UInt16,System.String,System.String,TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Creates the subscription.
            </summary>
            <param name="dedSubscriptionName">Name of the ded subscription.</param>
            <param name="dedSubscriptionEnabled">if set to <c>true</c> [ded subscription enabled].</param>
            <param name="dedSubscriptionConnTimeout">The ded subscription connection timeout.</param>
            <param name="dedSubscriptionMsgPerMin">The ded subscription MSG per minimum.</param>
            <param name="dedApiServicePostUri">The ded API service post URI.</param>
            <param name="subscriptionKeyName">Name of the subscription key.</param>
            <param name="dataCenter">The data center.</param>
            <returns>True if subscription created successfully, otherwise false.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.DedSubscriptionSetupUpdater">
            <summary>
            Ded Subscription setup updater.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DedSubscriptionSetupUpdater.#ctor(TaxHub.Common.GlobalServices.Ded.IDedApiServiceClient,TaxHub.Common.GlobalServices.Ded.IDedSubscriptionInfoService,TaxHub.Common.Security.KeyServer.IDedHmacConfigProvider,TaxHub.Common.Configuration.IHttpServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.DedSubscriptionSetupUpdater"/> class.
            </summary>
            <param name="dedApiServiceClient">The ded API service client.</param>
            <param name="dedSubscriptionInfoService">The ded subscription information service.</param>
            <param name="dedHmacConfigProvider">The ded hmac configuration provider.</param>
            <param name="httpServiceLocator">The HTTP service locator.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DedSubscriptionSetupUpdater.CreateSubscriber(System.String,System.String,TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Creates the subscriber.
            </summary>
            <param name="dedSubscriberCode">The ded subscriber code.</param>
            <param name="dedSubscriberDescription">The ded subscriber description.</param>
            <param name="dataCenter">The data center.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DedSubscriptionSetupUpdater.CreateSubscriptions(System.String,System.Boolean,System.UInt16,System.UInt16,TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Creates the subscription.
            </summary>
            <param name="dedSubscriptionName">Name of the ded subscription.</param>
            <param name="dedSubscriptionEnabled">if set to <c>true</c> [ded subscription enabled].</param>
            <param name="dedSubscriptionConnTimeout">The ded subscription connection timeout.</param>
            <param name="dedSubscriptionMsgPerMin">The ded subscription MSG per minimum.</param>
            <param name="dataCenter">The data center.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DedSubscriptionSetupUpdater.CreateSubscription(System.String,System.Boolean,System.UInt16,System.UInt16,System.String,System.String,TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Creates the subscription.
            </summary>
            <param name="dedSubscriptionName">Name of the ded subscription.</param>
            <param name="dedSubscriptionEnabled">if set to <c>true</c> [ded subscription enabled].</param>
            <param name="dedSubscriptionConnTimeout">The ded subscription connection timeout.</param>
            <param name="dedSubscriptionMsgPerMin">The ded subscription MSG per minimum.</param>
            <param name="dedApiServicePostUri">The ded API service post URI.</param>
            <param name="subscriptionKeyName">Name of the subscription key.</param>
            <param name="dataCenter">The data center.</param>
            <returns>True if subscription created successfully, otherwise false.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IClientNoteService">
            <summary>
            Contract for the ClientNote service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientNoteService.GetLatestNoteByClientIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns the latest note added for the given parameters
            </summary>
            <param name="clientId">The clientid</param>
            <param name="payeeId">The payeeId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the latest note</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientNoteService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all client notes paged based on  page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of client agencys.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientNoteService.GetAllNotesByClientIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns all the notes added for the given parameters
            </summary>
            <param name="clientId">The clientid</param>
            <param name="payeeId">The payeeId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns all the notes</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientNoteService.FindAllByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all notes by client Id.
            </summary>
            <param name="clientId">The Client Id</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>List of client notes</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IMappedTaxPayMigrationService">
            <summary>
            Mapped Tax Pay migration service declaration
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayMigrationService.PublishMappedTaxPayInvalidTypesMigrationRequest(TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Publish fix invalid types request command
            </summary>
            <param name="eventDataParams">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayMigrationService.MigrateMappedTaxPaysInvalidTypes(TaxHub.Models.Commands.MappedTaxPayInvalidTypesMigrateCommand,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Migrates the MappedTaxPays invalid types
            </summary>
            <param name="mappedTaxPayMigrateCommand">The MappedTaxPay command</param>
            <param name="eventDataParams">The event data</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IMappedTaxPayService">
            <summary>
            Interface for mapped tax pay service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.MapTo(TaxHub.Models.SupplementalPay,System.String,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Map from taxPay to a list of mapped tax pays.
            </summary>
            <param name="supplementalPay">The supplemental pay.</param>
            /// <param name="clientId">The client Id.</param>
            <param name="eventDataParams">The event data params.</param>
            <returns>The mapped tax pay and the list of tax code validations.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.Create(TaxHub.Models.MappedTaxPay,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Create the specified mapped tax pay.
            </summary>
            <param name="mappedTaxPay">The mapped tax pay.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult" /> representing the result of the operation.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all MappedTaxPay paged based on page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of MappedTaxPay.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all MappedTaxPay paged based on tenant identifier and page parameters.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of MappedTaxPay.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.FindAll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all mapped tax pays paged based on tenant identifier, payroll instance identifier and page parameters.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payrollInstanceId">The payroll instance identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of MappedTaxPay.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.FindAllPeriodicPayroll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all payroll mapped tax pays paged based on tenant identifier, payroll instance identifier and page parameters.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payrollInstanceId">The payroll instance identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of MappedTaxPay.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.FindAllPeriodicNonPayroll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all MappedTaxPay paged based on tenant identifier, payroll instance identifier and page parameters.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of MappedTaxPay.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.FindAllPeriodic(System.Guid,System.Guid,System.Boolean,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all MappedTaxPay paged based on tenant identifier, payroll instance identifier and page parameters.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="isPayroll">Denotes payroll vs nonpayroll.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of MappedTaxPay.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.BulkCreate(System.Collections.Generic.List{TaxHub.Models.MappedTaxPay},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Bulk creates mapped tax pays.
            </summary>
            <param name="mappedTaxPays">List of mapped tax pays.</param>
            <param name="eventDataParams">Event Data Params.</param>
            <param name="cancellationToken">Cancellation Token.</param>
            <returns>Bulk Create Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="payId">The pay identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The mapped tax pay</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.FindOne(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payId">The pay identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The mapped tax pay</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.UpdateMappedTaxPayEmployeeInfo(TaxHub.Models.MappedTaxPay,TaxHub.Models.EmployeeInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the mapped tax pay employee information.
            </summary>
            <param name="mappedTaxPay">The mapped tax pay.</param>
            <param name="employeeInfo">The employee information.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns true if successfull.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.MappedTaxPay},System.Guid,TaxHub.Models.MappedTaxPay,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified event data parameters.
            </summary>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="commandAction">The command action.</param>
            <param name="id">The identifier.</param>
            <param name="entity">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.CreateOrUpdate(TaxHub.Models.MappedTaxPay,System.Action{TaxHub.Models.MappedTaxPay},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates or Updates a MappedTaxPay
            </summary>
            <param name="mappedTaxPay">The MappedTaxPay</param>
            <param name="commandAction">The Update Action</param>
            <param name="eventDataParams">The Event Data Params</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Returns true if successfull.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappedTaxPayService.ApplyMapCorrections(TaxHub.Models.MappedTaxPay,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Applies all the corrections.
            </summary>
            <param name="mappedTaxPay">The mapped tax pay.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <returns>Returns true if success, otherwise false.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IClientParentChildService">
            <summary>
            Data Contract for client parent/child relation Service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find one client parent/child relation with given Id.
            </summary>
            <param name="id">The id identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The client parent/child relation with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all client parent/child relation's paged based on  page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of client parent/child relations.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.FindByTenant(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all client parent/child relation's with the given tenantId.
            </summary>
            <param name="tenantId">tenantId</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of client parent/child relations with this tenantId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.Create(TaxHub.Models.ClientParentChild,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Inserts new client parent/child relation
            </summary>
            <param name="clientParentChild"> client parent/child relation instance</param>
            <param name="eventDataParams">The Event data params</param>
            <param name="cancellationToken"> The Cancellation token</param>
            <returns> Task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.Delete(TaxHub.Models.ClientParentChild,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Deletes client parent/child relation
            </summary>
            <param name="clientParentChild">the client parent/child relation to delete</param>
            <param name="eventData">EventData</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>true if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.FindAllByParentClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all client parent/child relation's by client id
            </summary>
            <param name="parentClientId"> parentClientId of ClientParentChild</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Matching client parent/child relation Records</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.FindAllChildrenClientIdsByParentClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all children client Ids by parent client id
            </summary>
            <param name="parentClientId"> parentClientId of ClientParentChild</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>A collection of the children client Ids Records</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.FindAllByChildClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the client parent/child relation's by child client id
            </summary>
            <param name="childClientId"> childClientId of ClientParentChild</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Matching client parent/child relation Records</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.CanBeMultiFeinChild(System.Guid,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the passed in client can be added as a child in multi-fein parent-child relationship
            </summary>
            <param name="tenantId">Client to check</param>
            <param name="clientId">Client to check</param>
            <param name="correlationId">correlationId</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>true if this clietn can be added as a child</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.CanBeMultiFeinParent(System.Guid,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the passed in client can be added as a parent in multi-fein parent-child relationship
            </summary>
            <param name="tenantId">Client to check</param>
            <param name="clientId">Client to check</param>
            <param name="correlationId">correlationId</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>true if this clietn can be added as a child</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.CanBeCommonPayChild(System.Guid,System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the passed in client can be added as a child in common pay parent-child relationship
            </summary>
            <param name="tenantId">Client to check</param>
            <param name="clientId">Client to check</param>
            <param name="payeeId">Agency Id to check</param>
            <param name="correlationId">correlationId</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>true if this clietn can be added as a common pay child</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.CanBeCommonPayParent(System.Guid,System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the passed in client can be added as a parent int the common pay relationship
            </summary>
            <param name="tenantId">Client to check</param>
            <param name="clientId">Client to check</param>
            <param name="payeeId">Agency Id to check</param>
            <param name="correlationId">correlationId</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>true if this clietn can be added as a common pay parent</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.LookUpParentByMultiFeinChildClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the client parent/child relation's by child client id
            </summary>
            <param name="childClientId"> childClientId of ClientParentChild</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Matching client parent/child relation Records set up for multifein</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.LookUpByChildClientIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Lookup by child client id, payee id
            </summary>
            <param name="childClientId"> Child client id</param>
            <param name="payeeId">payee id</param>
            <param name="cancellationToken">the cancellation token</param>
            <returns>returns parent</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.Delete(System.String,System.String,System.String,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Deletes client parent child record
            </summary>
            <param name="parentClientId"> parent client id</param>
            <param name="childClientId"> child client id</param>
            <param name="payeeId">payee id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventData">EventDataParams</param>
            <param name="cancellationToken"> The cancellation token</param>
            <returns> success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.Delete(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Deletes client parent child record
            </summary>
            <param name="clientParentChildId"> The id of the record</param>
            <param name="eventData">EventDataParams</param>
            <param name="cancellationToken"> The cancellation token</param>
            <returns> success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.Update(TaxHub.Models.ClientParentChild,TaxHub.Models.ClientParentChild,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the entity
            </summary>
            <param name="command">The command</param>
            <param name="item"> Original Item</param>
            <param name="eventDataParams"> event data param</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Update result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.DeleteParentSet(System.String,System.String,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Deletes a set of MF of CP setup
            </summary>
            <param name="parentClientId">The parent client id</param>
            <param name="payeeId">Payee Id</param>
            <param name="correlationId"> The Correllation id </param>
            <param name="eventData">EventDataParams</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Success or Failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.HasRecordsForTenant(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method checks if Tenant has ClientParentChildSet
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns Boolean value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.DeleteChildSet(System.String,System.String,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Deletes a set of MF of CP setup
            </summary>
            <param name="childClientId">The Child client id</param>
            <param name="payeeId">Payee Id</param>
            <param name="correlationId"> The Correllation id </param>
            <param name="eventData">EventDataParams</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Success or Failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.GetClientParentChildIdSet(System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Builds up all the clients in a multi-fein set
            </summary>
            <param name="clientId">The Child client id</param>
            <param name="payeeId">The agency to pay</param>
            <param name="correlationId"> The Correllation id </param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>The set of clients in this set (if multi-fein)</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.IsMultiFeinAgentByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            is clientId multifein
            </summary>
            <param name="clientId">The Child client id</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>boolean if clientID is multi-fein</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.IsCommonPayAgentByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            is clientId commonpay
            </summary>
            <param name="clientId">The Child client id</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>boolean if clientID is common-pay</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientParentChildService.GetPayeeToYeAgencyMapByClient(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets Payee to YeAgency map for all mapeed payees of passed in client
            </summary>
            <param name="clientId"> The client Id</param>
            <param name="correlationId">The Correlation ID</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns> Dictionary of mapping</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.InitializeTenantDataCenterService">
            <summary>
            Service to initialize tenants' data centers
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.InitializeTenantDataCenterService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Acl.Payment.IHubTenantServiceAdapter,TaxHub.CoreServices.Application.ITenantService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.InitializeTenantDataCenterService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="messageHub">The Message HUB</param>
            <param name="hubTenantServiceAdapter">The hub tenant service adapter.</param>
            <param name="tenantService">The tenant service.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPayeeEfileInfoService">
            <summary>
            Domain services related to AgencyAchTaxInstances
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayeeEfileInfoService.FindOne(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="payeeId">The payee id.</param>
            <param name="fieldName">The payee id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The PayeeEfileInfo with the given Id </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayeeEfileInfoService.Create(TaxHub.Models.PayeeEfileInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayeeEfileInfoService.UpdateFieldValue(TaxHub.Models.PayeeEfileInfo,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="fieldValue">The new value to be inserted.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayeeEfileInfoService.IncrementSequentialFieldValue(System.String,System.String,System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Increments a field value.
            </summary>
            <param name="payeeId">The payee identifier.</param>
            <param name="fieldName">Field name for the value.</param>
            <param name="incrementalStep">The incremental step.</param>
            <param name="resetDaily">Determine if this value should reset after a day.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns> The result of updating an instance of the aggregate </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPayTrackingMigrationService">
            <summary>
            PayTracking Migration Service Interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayTrackingMigrationService.MigratePayTrackingsInMappingStatus(TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Migrates the PayTrackings for Periodic Tax Processings in Mapping status
            </summary>
            <param name="eventDataParams">EventDataParams</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayTrackingMigrationService.MigratePayTrackings(TaxHub.Models.Commands.PayTrackingMigrateCommand,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Migrates the PayTrackings
            </summary>
            <param name="payTrackingMigrateCommand">The PayTracking command</param>
            <param name="eventDataParams">The event data</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayTrackingMigrationService.PublishPayTrackingMigrationRequest(TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Publishes the Migration Request Commands
            </summary>
            <param name="eventDataParams">The event data</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayTrackingMigrationService.DeletePayTrackings">
            <summary>
            Delete the PayTracking Collection
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IQuarterEndPhaseService">
            <summary>
            The QE Phase service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterEndPhaseService.GetAsync(System.Nullable{System.DateTime},SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the specified from date.
            </summary>
            <param name="fromDate">From date.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Qe phase elements starting from the given date</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterEndPhaseService.GetCountAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets the count asynchronous.
            </summary>
            <param name="fromDate">From date.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of rows to be returned by the GetAsync method</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterEndPhaseService.ChangePhase(TaxHub.Models.Quarter_End_Phase.ChangePhaseCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates Phase for given data
            </summary>
            <param name="command">The ChangePhaseCommand</param>
            <param name="eventDataParams">The EventDataParams</param>
            <param name="cancellationToken">The CancellationToken</param>
            <returns>returns UpdateAggregateExtendedResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterEndPhaseService.FindOneByClientIdAndPeriod(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a qePhase record that matches clientId and period
            </summary>
            <param name="clientId">The ClientId</param>
            <param name="period">The Period</param>
            <param name="cancellationToken">The cancellationToken</param>
            <returns>returns QuarterEndPhase</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterEndPhaseService.FindCurrentQuarterEndInfoForClient(System.String,System.Threading.CancellationToken)">
            <summary>
            Find current quarter end info for client.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The current quarter end phase information</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ISUIRateImportService">
            <summary>
            Contract for ISUIRateImport service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ISUIRateImportService.ImportRates(TaxHub.Models.ImportSUIRateModel,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Validates the data for the SUIImport process
            </summary>
            <param name="impSUIModel">List of ImpSUIRate models to validate</param>
            <param name="eventDataParams">The event data parameters id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>ImpSUIRateSummary with the validation results</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IInitializeTenantDataCenterService">
            <summary>
            Interface for Tenant Data Center Initializer Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInitializeTenantDataCenterService.PublishInitializeTenantsDataCenterRequest(TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Publish a tenants data center initilizer request message.
            </summary>
            <param name="eventDataParams">The Event Data Params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInitializeTenantDataCenterService.InitializeTenantsDataCenter(TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Initialize Tenants Data Center.
            </summary>
            <param name="eventDataParams">The Event Data Params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PayeeEfileInfoService">
            <summary>
            AgencyAch service implementation. (AGENCY_ACH)
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayeeEfileInfoService.#ctor(TaxHub.CoreServices.DataAccess.IPayeeEfileInfoRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IClientService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PayeeEfileInfoService"/> class.
            </summary>
            <param name="payeeEfileInfoRepository">Payee Efile Info Repository</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
            <param name="clientService">The client service.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.MappedTaxPayMigrationService">
            <summary>
            Mapped Tax Pay migration service implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayMigrationService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Application.IPeriodicTaxProcessingService,TaxHub.CoreServices.Application.IMappedTaxPayService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.MappedTaxPayMigrationService"/> class.
            Initializes a new instance of the service
            </summary>
            <param name="appLogger">The Logger</param>
            <param name="messageHub">The Message Hub</param>
            <param name="periodicTaxProcessingService">The Periodic Tax Processing Service.</param>
            <param name="mappedTaxPayService">The mapped tax pay service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayMigrationService.PublishMappedTaxPayInvalidTypesMigrationRequest(TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayMigrationService.MigrateMappedTaxPaysInvalidTypes(TaxHub.Models.Commands.MappedTaxPayInvalidTypesMigrateCommand,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.MappedTaxPayService">
            <summary>
            Mapped tax pay service implementation.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.MappedTaxPayService.EventInstanceCreated">
            <summary>
            Gets the event instance created.
            </summary>
            <value>
            The event instance created.
            </value>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayService.#ctor(TaxHub.CoreServices.DataAccess.IMappedTaxPayRepository,TaxHub.CoreServices.Application.IUltiProTaxCodeMappingService,TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.Models.TaxItemMappingRules.IPeriodicMapRule[],TaxHub.CoreServices.Application.IMapCorrection[],TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.MappedTaxPayService" /> class.
            </summary>
            <param name="mappedTaxPayRepository">The mapped tax pay repository.</param>
            <param name="ultiproTaxCodeMappingService">The ultipro tax code mapping service.</param>
            <param name="ultiproTaxCodeMappingCacheService">The old ultipro tax code mapping cache</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
            <param name="periodicMapRules">The Matching Map Rules</param>
            <param name="mapCorrections">The map corrections.</param>
            <param name="applicationMetricsBuilder">The application metrics builder.</param>
            <param name="featureToggleConfiguration">The feature toggle configuration</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayService.InitializeNew(TaxHub.Models.MappedTaxPay)">
            <summary>
            Initializes the new.
            </summary>
            <param name="mappedTaxPay">The MappedTaxPay.</param>
            <returns>Factory method that returns the new aggregate </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayService.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayService.FindOne(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayService.FindAll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayService.FindAllPeriodicPayroll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayService.FindAllPeriodicNonPayroll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayService.FindAllPeriodic(System.Guid,System.Guid,System.Boolean,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayService.UpdateMappedTaxPayEmployeeInfo(TaxHub.Models.MappedTaxPay,TaxHub.Models.EmployeeInfo,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayService.CreateOrUpdate(TaxHub.Models.MappedTaxPay,System.Action{TaxHub.Models.MappedTaxPay},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.MappedTaxPayService.ApplyMapCorrections(TaxHub.Models.MappedTaxPay,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PaymentService">
            <summary>
            Check service functionality that is not valid business flow
            </summary>
            <summary>
            Payment service implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdateClientId(TaxHub.Models.Payment,System.String,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Updates the ClientId
            </summary>
            <param name="payment">The payment.</param>
            <param name="clientId">The client identifier.</param>
            <param name="eventDataParams">The event data params.</param>
            <returns>The update aggregate result state.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdatePaymentCompanyId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Payement CompanyId
            </summary>
            <param name="paymentId">Payment Identifier</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Returns Boolean Value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.#ctor(TaxHub.CoreServices.DataAccess.IPaymentRepositoryFactory,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.Hosting.Runtime.IDomainService,TaxHub.CoreServices.Application.IPaymentAggregationService,TaxHub.CoreServices.Application.IPaymentScheduleService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PaymentService"/> class.
            </summary>
            <param name="paymentRepoFactory">Repository factory</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
            <param name="domainService">The Domain Service.</param>
            <param name="paymentAggregationService">The Payment Aggregation Service</param>
            <param name="paymentScheduleService">The payment schedule service.</param>
            <param name="featureToggleConfiguration">The featureToggleConfiguration service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentService.EventInstanceCreated">
            <summary>
            Create event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.InitializeNew(TaxHub.Models.Payment)">
            <summary>
            Get a new instance of a payment
            </summary>
            <param name="payment">The payment to initialize</param>
            <returns>The initialized instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdateChildClientId(TaxHub.Models.Payment,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdateRefundLiabilityId(TaxHub.Models.Payment,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdateAgencyRefunded(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdateCreditLiabilityReferenceLiabilityReduction(TaxHub.Models.Commands.UpdatePaymentCreditLiabilityCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdateCreditLiabilityReference(TaxHub.Models.Payment,System.Guid,System.Guid,TaxHub.Models.EffectOnLiability,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdateRefundLiabilityByCreditTracking(TaxHub.Models.Payment,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdateCreditTrackingQeAdjPaymentRefundLiabilityId(TaxHub.Models.Payment,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.AllocateCreditTransactionLiability(System.Int32,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdateStatusToCashMgmtLiabilityAssigned(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdateStatus(TaxHub.Models.Payment,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.RaiseMissingEvent(System.Int32,TaxHub.Models.Commands.RaiseMissingEventCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.GetPaymentAmounts(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.BulkUpdatePaymentStatus(TaxHub.Models.Commands.PaymentBulkUpdateStatusCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.BulkVoidPayment(TaxHub.Models.Commands.PaymentBulkVoidCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPayrollId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentsByPeriodicTaxInstanceId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentsByPeriodicTaxInstanceIdFromValidPostPayroll(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentsByPenaltyInterestId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindInputPayrollId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindAllNotExported(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentsByInputTaxInstanceId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentInfoByInputTaxInstanceId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentInfoByPeriodicTaxInstanceId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentsByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentsByLiabilityId(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.AssignLiabilityId(System.Collections.Generic.List{System.Int32},System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Assigns liability to payments of the same payroll whose payments haven't already been assigned a liability id.
            </summary>
            <param name="paymentIds">The payment ids.</param>
            <param name="liabilityId">The liability id.</param>
            <param name="eventDataParams">Event data params.</param>
            <returns>The bulk update result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentInfoByLiabilityId(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.GetPaymentByRefundLiabilityIdDueCreditApplied(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method to get the payment associated to a credit liability (credit applied)
            </summary>
            <param name="refundLiabilityId">The refund liability Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The payment associated with the refund liability</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.GetPaymentByRefundLiabilityIdDuePaymentVoided(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method to get the payment associated to a refund liability (Payment Voided)
            </summary>
            <param name="refundLiabilityId">The refund liability Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The payment associated with the refund liability</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.GetPaymentsByInputTaxInstanceLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method to get the payment list (amounts >= 0) associated to a input tax instance liability
            </summary>
            <param name="inputTaxInstanceliabilityId">The input tax instance liability</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The lias of payments associated with the input tax instance liability</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.GetPaymentsByPeriodicTaxInstanceLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method to get the payment list (amounts >= 0) associated to a periodic tax instance liability
            </summary>
            <param name="periodicTaxInstanceliabilityId">The periodic tax instance liability id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The list of payment associated to the periodic tax instance liabilityid</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FilterPaymentsByValidPostPayrollIds(System.Collections.Generic.IEnumerable{TaxHub.Models.Payment},System.Threading.CancellationToken)">
            <summary>
            Method to get valid payments by checking the status of the postPayroll it is associated with.
            </summary>
            <param name="payments">A list of payments</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The list of payment that are associated with valid postPayrolls</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.GetPaymentInfosFromPaymentList(System.Collections.Generic.IEnumerable{TaxHub.Models.Payment},System.Threading.CancellationToken)">
            <summary>
            Method that projects the payment information into a PaymentInfos reducing the amount of information from the payment and doing a join to Client and Company
            </summary>
            <param name="paymentsToBeProjected">The list of payments to project into payment infos</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>List of payment info from the original payment list with agency and company information</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.PopulateAgency(System.Collections.Generic.IEnumerable{TaxHub.CoreServices.Application.CreditTrackingInfo},System.Collections.Generic.Dictionary{System.String,TaxHub.Models.Agency},System.Threading.CancellationToken)">
            <summary>
            Populate the necessary agency data for the AppliedCreditsThatReducedPaymentLiabilityToBeCollected
            </summary>
            <param name="appliedCreditsThatReducedPaymentLiability">Applied credits that reduced liability</param>
            <param name="agencyCache">The agency cache</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdatePaymentReconciliationByCheck(System.Boolean,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UpdatePaymentReconciliationByEft(System.Boolean,System.Guid,System.String,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.MarkQuarterPaymentCreditsAsAgencyRefunded(System.String,TaxHub.Common.Models.Quarter,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Marks credits with a remaining un-applied portion for a certain client and quarter, which their payee/agency does not allow credit carry forwards, as agency refunded
            </summary>
            <param name="clientId">The client Id</param>
            <param name="quarter">The quarter</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>true if it succeeds</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.RevertQuarterPaymentCreditsAgencyRefunded(System.String,TaxHub.Common.Models.Quarter,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.DepositPayment(TaxHub.Models.Payment,System.Guid,System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.GetAllPaymentsByFedEftId(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.GetAllPaymentsByStateEftId(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.GetAllPaymentsByCheckId(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.ReopenPaymentForCheckId(System.Int32,System.DateTime,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.ReopenPaymentForStateEftId(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.ReopenPaymentForFedEftId(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.ReopenPayment(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Reopen payment
            </summary>
            <param name="paymentId">Payment Id</param>
            <param name="eventDataParams">Event data params</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.ReopenPayment(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Reopen payment
            </summary>
            <param name="payment">The payment to reopen</param>
            <param name="eventDataParams">Event data params</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UnexportPayment(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Unexport the payment by payment identifier
            </summary>
            <param name="paymentId">The payment id</param>
            <param name="eventDataParams">Event data params</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UnexportPayment(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Unexport the payment by payment identifier
            </summary>
            <param name="payment">The payment to unexport</param>
            <param name="eventDataParams">Event data params</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UnapplyCredit(System.Int32,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.ReopenAndUnexportPayment(TaxHub.Models.Payment,System.DateTime,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.Unexport(TaxHub.Models.Payment,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Unexports the specified payment if is not Reconciled.
            </summary>
            <param name="payment">The payment.</param>
            <param name="eventData">The event data.</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.SetReconciliationPayment(System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.SetReconciliationPayment(TaxHub.Models.Payment,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UnexportFederalPayment(System.Int32,TaxHub.Common.EventStore.DomainEventData)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.UnexportStatePayment(System.Int32,TaxHub.Common.EventStore.DomainEventData)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.NotifyLedgerUnexportedPayment(System.Int32,TaxHub.Shared.Services.EventDataParams,System.String)">
            <summary>
            Notifies the ledger unexported payment.
            </summary>
            <param name="paymentId">The payment identifier</param>
            <param name="eventDataParams">The event data params</param>
            <param name="checkNumber">The check number</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.NotifyLedgerUnexportedPayment(TaxHub.Models.Payment,TaxHub.Shared.Services.EventDataParams,System.String)">
            <summary>
            Notify ledger of unexported payment
            </summary>
            <param name="payment">The unexported payment</param>
            <param name="eventDataParams">The event data params</param>
            <param name="checkNumber">The check number</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.WirePaymentsByFedeftId(System.Guid,TaxHub.Shared.Services.EventDataParams,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Wire payments: update IsExported to true and set WireId to fedefUId
            </summary>
            <param name="fedeftId">The fedeft id</param>
            <param name="eventDataParams">Event data params</param>
            <param name="transactionInitiatedUtcDateTime">Utc time and date of transaction</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.CreatePayment(TaxHub.Models.Commands.PaymentsCreateCommand,System.Guid,System.Guid,System.String)">
            <summary>
            Accepts a generic object to create payment and then insert it to the associated table
            </summary>
            <param name="paymentsCreateCommand">Command to create payments</param>
            <param name="correlationId">Correlation Id</param>
            <param name="userId">User Id</param>
            <param name="userName">User Name</param>
            <returns>Boolean for success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.ResolveFallout(TaxHub.Models.Commands.ResolveFalloutCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.ApplyCredit(System.Guid,System.Int32,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.CalculateTotalLiabilityAmount(System.Collections.Generic.List{TaxHub.Models.Payment},System.Int32,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentCreditReductionInfoForCrossAgencyApplicationByPostPayroll(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentsByIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindAllRelatedCreditTrackings(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentsByQeNetPaymentId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentsByPostPayrollId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.GetPositivePaymentsForCreditApplication(System.String,System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.GetNegativePaymentsForCreditApplication(System.String,System.Collections.Generic.IList{TaxHub.Models.Banking.CreditApplication.CreditRequestPayeeDateRange},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.GetAgencyCreditPaymentsForCreditApplication(System.String,System.String[],System.String,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentByCreditTrackingId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentService.FindPaymentByCreditTransactionId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.ITaxCodeServiceCache">
            <summary>
            Defines Tax Code Service Cache
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeServiceCache.GetFromCache(System.String)">
            <summary>
            Gets from cache.
            </summary>
            <param name="key">The key.</param>
            <returns>The tax code from cache.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeServiceCache.Add(System.String,TaxHub.Models.TaxCode)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="taxCode">The tax code.</param>
            <returns>True if added successfully.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PayTrackingMigrationService">
            <summary>
            PayTracking Migration Service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayTrackingMigrationService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.DataAccess.IPayTrackingRepository,TaxHub.CoreServices.DataAccess.IPayTrackingRepositoryTaxHub,TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PayTrackingMigrationService"/> class.
            </summary>
            <param name="appLogger">IAppLogger</param>
            <param name="messageHub">IMessageHub</param>
            <param name="payTrackingRepository">IPayTrackingRepository</param>
            <param name="payTrackingRepositoryTaxHub">IPayTrackingRepositoryTaxHub</param>
            <param name="periodicTaxProcessingRepository">IPeriodicTaxProcessingRepository</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayTrackingMigrationService.MigratePayTrackingsInMappingStatus(TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Migrates the PayTrackings for Periodic Tax Processings in Mapping status
            </summary>
            <param name="eventDataParams">EventDataParams</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayTrackingMigrationService.MigratePayTrackings(TaxHub.Models.Commands.PayTrackingMigrateCommand,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Migrates the PayTrackings
            </summary>
            <param name="payTrackingMigrateCommand">The PayTracking command</param>
            <param name="eventDataParams">The event data</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayTrackingMigrationService.PublishPayTrackingMigrationRequest(TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Publishes the Migration Request Commands
            </summary>
            <param name="eventDataParams">The event data</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayTrackingMigrationService.DeletePayTrackings">
            <summary>
            Delete the PayTracking Collection
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PayTrackingService">
            <summary>
            TrackedPayService.  Used to store pays that were processed during periodic.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PayTrackingService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayTrackingService.#ctor(TaxHub.CoreServices.DataAccess.IPayTrackingRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PayTrackingService" /> class.
            </summary>
            <param name="payTrackingRepository">The TrackedPayRepository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayTrackingService.CountByPayrollInstanceId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayTrackingService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayTrackingService.FindOne(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayTrackingService.GetPayrollValidationSummaryFromExcludedPays(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayTrackingService.InitializeNew(TaxHub.Models.PayTracking)">
            <summary>
            Initializes a new PayTracking entity
            </summary>
            <param name="entity">The PayTracking entity</param>
            <returns>The initialized payTracking entity</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FederalElectronicTransferService">
            <summary>
            Implementation of application layer for Federal Electronic Transfer aggregate
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.FederalElectronicTransferService.EftType">
            <summary>
            Eft type used as metadata
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FederalElectronicTransferService.#ctor(TaxHub.CoreServices.DataAccess.IFederalElectronicTransferRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.FederalElectronicTransferService"/> class.
            </summary>
            <param name="repository">Repository</param>
            <param name="domainService">The domain service</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FederalElectronicTransferService.UnexportByFileId(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.EmployeeQuarterlyService">
            <summary>
            Implements employee payroll service.
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.IEmployeeQuarterlyService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.EmployeeQuarterlyService.#ctor(TaxHub.CoreServices.DataAccess.IEmployeeQuarterlyRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IClientService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.EmployeeQuarterlyService"/> class.
            </summary>
            <param name="employeeQuarterlyRepository">The employee payroll repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The app logger.</param>
            <param name="clientService">The client service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.EmployeeQuarterlyService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.EmployeeQuarterlyService.InitializeNew(TaxHub.Models.EmployeeQuarterly)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.EmployeeQuarterlyService.SaveEmployee(TaxHub.Models.CompanyEmployee,System.Guid,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.EmployeeQuarterlyService.FindOneBySsnEntityStateLocalEmployeeCode(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.EmployeeQuarterlyService.FindOneByEmployeeIdQuarterlyTaxProcessingIdStateIdLocalIdAndEntityId(System.String,System.Guid,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IAgencyAchService">
            <summary>
            Domain services related to AgencyAchTaxInstances
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyAchService.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="agencyId">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The AgencyAch with the given Id </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyAchService.Create(TaxHub.Models.AgencyAch,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyAchService.FindAllByRoutingNumber(System.String,System.Threading.CancellationToken)">
            <summary>
            Find all AgencyAch by RoutingNumber
            </summary>
            <param name="routingNumber">Routing Number</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>IEnumerable of AgencyAch</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyAchService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all records
            </summary>
            <param name="pageParams">pageParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>All records</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyAchService.UpdateAgencyAch(TaxHub.Models.AgencyAch,TaxHub.Shared.Services.EventDataParams,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Performs validations on the entity and updates an AgencyAch record.
            </summary>
            <param name="entity">The entity to be updated.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="correlationId">The correlation Id for logging</param>
            <param name="token">The cancellation token.</param>
            <returns>The result of the operation.</returns>     
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyAchService.CreateAgencyAch(TaxHub.Models.AgencyAch,TaxHub.Shared.Services.EventDataParams,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Performs validations on the entity and creates a new AgencyAch record.
            </summary>
            <param name="entity">The entity to be created.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="correlationId">The correlation Id for logging</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>X </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ICheckService">
            <summary>
            Interface for application layer of Check aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds a single check record.
            </summary>
            <param name="id">GUID that represents check.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A single check.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.FindOneByCheckId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds a single check record 
            </summary>
            <param name="checkId">The check identifier.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A single check.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.FindAllByBulkCheckId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find all check records by the supplied bulk check identifier
            </summary>
            <param name="bulkCheckId">The bulk check identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of checks</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.FindAllInfosByBulkCheckId(System.Int32,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all check info records by the supplied bulk check identifier
            </summary>
            <param name="bulkCheckId">The bulk check identifier</param>
            <param name="pageParams">The paging parameters.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of checks</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.VoidCheck(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Check,TaxHub.Models.Commands.CheckVoidCommand,System.Threading.CancellationToken)">
            <summary>
            Initiate the voiding process of a check. This method will deal with
            regular checks, bulk checks, and nft checks
            </summary>
            <param name="eventDataParams">The event data params</param>
            <param name="check">The check to be updated</param>
            <param name="checkToVoidCommand">Check to void command</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.ReopenAllCheckPayments(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
             Reopen all related payments if the check is void
            </summary>
            <param name="checkId">The integer check id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if the operation succeed, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.UnexportAllPaymentsAssociatedToCheck(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Unexport all the payments related to this check
            </summary>
            <param name="checkId">The check id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if the operation succeed</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.UnassignChildrenChecksFromBulkCheck(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Unassing all the nft childs that are attach to a bulk check
            </summary>
            <param name="bulkCheckId">The bulk check integer id</param>
            <param name="eventDataParams">The even data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns true if all the nft children were succesfully unassigned</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.UnexportNftCheck(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Unexport all the nft checks
            </summary>
            <param name="checkId">The check if</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns true if the nft check was unexported</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.ExportChildrenChecksOfBulkCheck(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Export all nft checks associated to a Bulk Check
            </summary>
            <param name="bulkCheckId">The Id of the bulk check</param>
            <param name="eventDataParams">The even data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns true if all the nft children were successfully exported</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.SetReconciliationToChildrenNft(System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updated all the nft children reconcile status
            </summary>
            <param name="bulkCheckId">the bulk check id</param>
            <param name="reconcile">the reconcile flag</param>
            <param name="eventDataParams">the event data params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>Returns true if all were succesfully updated</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.SetPaymentsReconciliation(System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update payments children reconcile status
            </summary>
            <param name="checkId">check id</param>
            <param name="reconcile">reconcile value</param>
            <param name="eventDataParams">event data params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>True if all payments were succesfully updated</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.SetReconciliation(System.Guid,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Reconcile/Unreconcile the check
            </summary>
            <param name="checkGuid">The check guid</param>
            <param name="reconcile">Reconcile value</param>
            <param name="eventDataParams">Event data params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>The updated aggregate</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.CreateCheck(TaxHub.Models.Commands.CheckCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Create the Check pdf and update the FileInfo
            </summary>
            <param name="checkCreateCommand">The create command</param>
            <param name="eventDataParams">Event data params</param>
            <param name="cancellationToken">Cacnellation token</param>
            <returns>The updatetd aggregate</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.UnvoidCheck(TaxHub.Models.Check,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update check to status valid 
            </summary>
            <param name="check">The check.</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An update extended result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.GetExportedChecks(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all valid and reconciled paginated
            </summary>
            <param name="pageParams">page params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>A file info collection</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICheckService.UnAssignChildCheckFromBulkCheck(TaxHub.Models.Check,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            IMPORTANT: Correction method to un-assign a child NFT check from its parent (bulk check). Not to be used in regular production cases
            This method handles issues with NFT children checks with a "ZERO" as Bulk Check Identifier. 
            </summary>
            <param name="check">The nft check to un-assign.</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The update result.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IClientDraftService">
            <summary>
            Defines client service interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientDraftService.Count(System.Threading.CancellationToken)">
            <summary>
            Counts the specified cancellation token.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientDraftService.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientDraftService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all Client Drafts paged based on  page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of Client Drafts.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientDraftService.Create(TaxHub.Models.ClientDraft,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientDraftService.Update(TaxHub.Shared.Services.EventDataParams,System.Guid,TaxHub.Models.ClientDraft,System.Threading.CancellationToken)">
            <summary>
            Update ClientDraft
            </summary>
            <param name="eventParams">The event data parameters.</param>
            <param name="id">The identifier</param>
            <param name="item">The item to update.</param>
            <param name="token">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientDraftService.FindAll(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the clientId.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="pageParams">pageParams</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns an instance or null, if not found.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientDraftService.FindAllByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all client Drafts by client id
            </summary>
            <param name="clientId">The client Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Client drafts</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientDraftService.Delete(TaxHub.Models.ClientDraft,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Delete the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>
            The result of deleting an instance of the aggregate
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IClientPayrollService">
            <summary>
            Data Contract For Client Payroll Service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find one client payroll with given Id.
            </summary>
            <param name="id">The id identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The client payroll with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all client payroll paged based on  page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of client Payrolls.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.Create(TaxHub.Models.ClientPayroll,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Inserts new client payroll
            </summary>
            <param name="clientPayroll"> Client Payroll instance</param>
            <param name="eventDataParams">The Event data params</param>
            <param name="cancellationToken"> The Cancellation token</param>
            <returns> Task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.Update(TaxHub.Models.ClientPayroll,TaxHub.Models.PayrollUnitCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates client payroll
            </summary>
            <param name="clientPayroll"> The client payroll object to update</param>
            <param name="command">The PayrollUnit Command</param>
            <param name="eventDataParams">The Event Data Params</param>
            <param name="cancellationToken"> The cancellation token</param>
            <returns> task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.UpdatePayrollUnitClientIdFromUI(TaxHub.Models.Commands.ClientPayrollClientUpdatedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the payroll Unit Client Id.
            </summary>
            <param name="clientPayroll">The client payroll object to update</param>
            <param name="eventDataParams">The Event Data Params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.FindAllByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all client payroll by client id
            </summary>
            <param name="clientId"> clientId of client payroll</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Matching Client payroll Records</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.FindOneByClientIdPayrollId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get client payroll by clientId and payrollId
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="payrollId">payroll Id</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>
            Client payroll Object if one Exist
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.FindOneByPayrollUnitId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get client payroll by payroll id
            </summary>
            <param name="payrollUnitId">payroll Id</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Client payroll Object if one Exist</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.SyncPayrollUnitsFromHubForTenant(System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Syncs PayrollUnits from the Hub for a given Tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <returns><c>true</c> if sync succeeded; otherwise, <c>false</c></returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.CreatePayrollUnitFromCommand(TaxHub.Models.PayrollUnitCommand,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Creates the payroll unit from command.
            </summary>
            <param name="payrollUnit">The payroll unit.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <returns>The create result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.CreatePayrollUnit(TaxHub.Models.PayrollUnitCommand,TaxHub.Models.Client,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Creates the payroll unit.
            </summary>
            <param name="payrollUnit">The pay unit.</param>
            <param name="client">The client.</param>
            <param name="eventParams">The event parameters.</param>
            <returns>A bool representing success/failure.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.UpdateClientPayroll(TaxHub.Models.PayrollUnitCommand,System.String,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Updates the payroll unit desc.
            </summary>
            <param name="updateCommand">The update command.</param>
            <param name="clientId">The clientId.</param>
            <param name="eventDataParams">The event data params.</param>
            <returns>A bool representing success/failure.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.Update(TaxHub.Models.ClientPayroll,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates a Client Payroll
            </summary>
            <param name="clientPayroll">The client Payroll</param>
            <param name="eventDataParams"> The eventDataParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns> The Update Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientPayrollService.Delete(TaxHub.Models.ClientPayroll,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Delete the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>
            The result of deleting an instance of the aggregate
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IClientAgencyService">
            <summary>
            Data Contract for Client Agency Service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find one client agency with given Id.
            </summary>
            <param name="id">The id identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The client agency with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all client agency's paged based on  page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of client agencys.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.Create(TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Inserts new client agency
            </summary>
            <param name="clientAgency"> Client Agency instance</param>
            <param name="eventDataParams">The Event data params</param>
            <param name="cancellationToken"> The Cancellation token</param>
            <returns> Task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.CreateDefaultAgencies(TaxHub.Models.Client,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Inserts default client agency
            </summary>
            <param name="client"> Client instance</param>
            <param name="eventDataParams">The Event data params</param>
            <param name="cancellationToken"> The Cancellation token</param>
            <returns> Task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.LookupByClientIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get client agency by client agency id
            </summary>
            <param name="payeeId">ClientAgency Id</param>
            <param name="clientId">ClientAgency Id</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Import Client Object if one Exist</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.Update(TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates client agency
            </summary>
            <param name="clientAgency"> The client agency object to update</param>
            <param name="eventDataParams">The Event Data Params</param>
            <param name="cancellationToken"> The cancellation token</param>
            <returns> task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.ClientAgency},System.Guid,TaxHub.Models.ClientAgency,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params1.</param>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="entity">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.FindByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all client agency's by client id
            </summary>
            <param name="clientId"> clientId of ClientAgency</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Matching Client Agency Records</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.FindByClientAgencyId(System.String,System.Threading.CancellationToken)">
            <summary>
            Get client agency by client agency id
            </summary>
            <param name="clientAgencyId">ClientAgency Id</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>Import Client Object if one Exist</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.AddClientAgency(TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Inserts Client Agency
            </summary>
            <param name="clientAgency"> The client agency object to insert</param>
            <param name="eventDataParams">The Event Data Params</param>
            <param name="cancellationToken"> The cancellation token</param>
            <returns> Task of UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.AddClientAgency(System.Collections.Generic.List{TaxHub.Models.ClientAgency},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
             Inserts List of Client Agency
            </summary>
            <param name="clientAgencyliList"> The list of client agency objects to insert</param>
            <param name="eventDataParams">The Event Data Params</param>
            <param name="cancellationToken"> The cancellation token</param>
            <returns> List of UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.FindByPayeeId(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by payee id.
            </summary>
            <param name="payeeId">The payee id.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of Client Agency records for the payee.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.FindByClientIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Find client agency by client id and payee id
            </summary>
            <param name="clientId">Client Id</param>
            <param name="payeeId">Payee Id</param>
            <param name="cancellationToken">cancelation token</param>
            <returns>Client Agency</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.Delete(TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Delete the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>
            The result of deleting an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.FindByPayeeIdAndFein(System.String,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Finds all clients with same fein and returns list of the agencies attached to that client
            </summary>
            <param name="payeeId">Payee Id</param>
            <param name="fein">FEIN</param>
            <param name="eventDataParams">the event data parameters</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>List of ClientAgency</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.FindAllByLastChange(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
             <summary>
             Returns the elements that have any change after the given lastChange
             </summary>
             <param name="lastChange">
             Base64 String representation of a byte[]. This value is same we have in table AgencyId.LastChange
             The type in SQL is RowVersion that maps to byte[] in .net.
            
             If no value is provided for this parameter then everything is returned.
             </param>
             <param name="pagedDataParameters">the paged data parameters</param>
             <param name="cancellationToken">the cancellation token</param>
             <returns>Elements that have any modification after the lastChange parameter.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.FindByScheduleIds(System.String[],SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get client agencies by schedule identifiers.
            </summary>
            <param name="scheduleIds">The list of schedule identifiers.</param>
            <param name="pageParameters">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of client agencies.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientAgencyService.UpdateExistingRefs(TaxHub.Models.ClientAgency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Used by Migration to update existing refs
            </summary>
            <param name="item">The Item needs to be updated</param>
            <param name="eventDataParams">Event data params</param>
            <param name="cancellationToken">The cancellayion token</param>
            <returns> Success or failure</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IEmployeeMappingRuleProcessor">
            <summary>
            Defines the employee mapping rule processor.
            </summary>
            <seealso cref="T:TaxHub.Models.EmployeePayroll" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IEmployeeMappingRuleProcessor.SendAggregatedResult(System.Func{TaxHub.Models.CompanyEmployee,System.Threading.Tasks.Task})">
            <summary>
            Process the dictionaries and send the appropriate data for each rule
            </summary>
            <param name="sendCallBack">The method for sending along the aggregated result.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IMappingRuleProcessor">
            <summary>
            Map Rule Processor directs the mapped tax item's to their rule for aggregation/assembly along with tracking the aggregation data through the process.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappingRuleProcessor.Configure(System.Int32,System.Int32)">
            <summary>
            Configuring the Map Rule Processor
            </summary>
            <param name="quarter">The quarter.</param>
            <param name="year">The year.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMappingRuleProcessor.Aggregate(TaxHub.Models.MappedTaxItem)">
            <summary>
            Run the appropriate aggregation rule for the given mapped tax item
            </summary>
            <param name="mappedTaxItem">The mapped tax item</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceEmployeeService">
            <summary>
            Domain services related to Employee
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceEmployeeService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find one Employee with given Id.
            </summary>
            <param name="employeeId">The tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The QuarterlyQuarterlyTaxInstance with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceEmployeeService.FindAll(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all Employee's paged based on tenant identifier and page parameters.
            </summary>
            <param name="quarterlyId">The tenant identifier.</param>       
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of QuarterlyQuarterlyTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceEmployeeService.Create(TaxHub.Models.EmployeeQuarterly,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified QuarterlyTaxInstanceEmployee.
            </summary>
            <param name="employeeQuarterly">The employeeinstance.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult"/> representing the result of the operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceEmployeeService.Update(TaxHub.Models.EmployeeQuarterly,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the specified QuarterlyTaxInstanceEmployee.
            </summary>
            <param name="employeeQuarterly">The employeeinstance.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Boolean"/> representing the result of the operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceEmployeeService.FindAll(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all Employee's paged based on tenant identifier.
            </summary>
            <param name="tenantId">The Tenant id.</param>       
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.UpdateAggregateResult"/> representing the result of the operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPayTrackingService">
            <summary>
            Interface for the TrackedPayService. Used to store pays that were not processed during periodic.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayTrackingService.Create(TaxHub.Models.PayTracking,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the given pay ID exists in the PayTracking collection.
            </summary>
            <param name="payTracking">The ignored pay.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The CancellationToken.</param>
            <returns>True if the pay id exists in the PayTracking collection.  False otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayTrackingService.CreateOrUpdate(TaxHub.Models.PayTracking,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Checks to see if the given pay ID exists in the PayTracking collection.
            </summary>
            <param name="payTracking">The pay tracking record.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The CancellationToken.</param>
            <returns>True if the pay id exists in the PayTracking collection.  False otherwise.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayTrackingService.CountByPayrollInstanceId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns the count of tracked pays for the given payroll instance id
            </summary>
            <param name="tenantId">The tenant ID</param>
            <param name="payrollInstanceId">The payroll instance id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of pays tracked for the given payrollInstanceId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayTrackingService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one by payTracking Id.
            </summary>
            <param name="id">The pay tracking identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayTrackingService.FindOne(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds one by tenant and payId
            </summary>
            <param name="tenantId">The payroll instance id.</param>
            <param name="payId">The payroll instance id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Pay Tracking record for the given payId/Tenant</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayTrackingService.GetPayrollValidationSummaryFromExcludedPays(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method obtains the payroll validation summary from excluded pays.
            </summary>
            /// <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of PayTracking records  </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IQuarterlyMappingRuleProcessor">
            <summary>
            Defines the quarterly mapping rule processor.
            </summary>
            <seealso cref="T:TaxHub.Models.QuarterlyTaxInstanceData" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyMappingRuleProcessor.Configure(System.Int32,System.Int32)">
            <summary>
            Configuring the Map Rule Processor
            </summary>
            <param name="quarter">The quarter.</param>
            <param name="year">The year.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyMappingRuleProcessor.Aggregate(TaxHub.Models.MappedTaxItem)">
            <summary>
            Run the appropriate aggregation rule for the given mapped tax item
            </summary>
            <param name="mappedTaxItem">The mapped tax item.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyMappingRuleProcessor.SendAggregatedResult(System.Func{System.Guid,TaxHub.Models.QuarterlyTaxInstanceData,System.Threading.Tasks.Task})">
            <summary>
            Process the dictionaries and send the appropriate data for each rule based on reporting company identifier.
            </summary>
            <param name="sendCallBack">The method for sending along the aggregated result.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPeriodicTaxInstanceEmployeeService">
            <summary>
            Domain services related to EmployeePayroll
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceEmployeeService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find one EmployeePayroll with given Id.
            </summary>
            <param name="employeeId">The tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The QuarterlyQuarterlyTaxInstance with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceEmployeeService.FindAll(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all EmployeePayroll's paged based on tenant identifier and page parameters.
            </summary>
            <param name="payrollId">The tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of QuarterlyQuarterlyTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceEmployeeService.Create(TaxHub.Models.EmployeePayroll,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified PeriodicTaxInstanceEmployee.
            </summary>
            <param name="employeePayroll">The employeeinstance.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult"/> representing the result of the operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IReplayPayrollService">
            <summary>
            Interface for Replay Payroll service.
             </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IReplayPayrollService.PublishReplayPayrollRequest(TaxHub.Models.Commands.ReplayPayrollCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Publish a replay request message.
            </summary>
            <param name="replayPayrollCommand">The ReplayPayrollCommand</param>
            <param name="eventDataParams">The Event Data Params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IReplayPayrollService.ReplayPayroll(TaxHub.Models.Commands.ReplayPayrollCommand,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Replay a given payroll.
            </summary>
            <param name="replayPayrollCommand">The ReplayPayrollCommand</param>
            <param name="eventDataParams">The Event Data Params.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IReplayPayrollService.PublishReplayPayMappingRequest(TaxHub.Models.Commands.ReplayPayMappingCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Publishes the replay pay mapping request.
            </summary>
            <param name="replayPayMappingCommand">The replay pay mapping command.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IReplayPayrollService.ReplayPayMapping(TaxHub.Models.Commands.ReplayPayMappingCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Replays the pay mapping.
            </summary>
            <param name="replayPayMappingCommand">The replay pay mapping command.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>Returns true is successfull.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IFederalElectronicTransferService">
            <summary>
            The application layer of the Federal Electronic Transfer aggregate.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFederalElectronicTransferService.UnexportByFileId(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Unexport all Federal EFTs based on EFT File ID
            </summary>
            <param name="fileId"> EFT File ID</param>
            <param name="eventData"> Event parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns> returns all unexported fed eft's including a message with the fed eft ids that failed if the operation failed</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFederalElectronicTransferService.FindOneById(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds a single Fed EFT by id.
            </summary>
            <param name="fedEftId">Federal eft id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A Fed EFT.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFederalElectronicTransferService.FindOneById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds a single Fed EFT by id.
            </summary>
            <param name="id">Federal eft id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A Fed EFT.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFederalElectronicTransferService.Contains(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Check if the eft exist in the database
            </summary>
            <param name="id">Federal eft id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if exist, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFederalElectronicTransferService.ReopenAllFedEftPayments(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Reopen all related payments if the eft is void
            </summary>
            <param name="id">The federal id.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if all succeed, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFederalElectronicTransferService.FindAllByExportedFileId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all Fed EFTs by exported file Id.
            </summary>
            <param name="fileId">Exported file id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>IEnumerable of FederalElectronicTransfer</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFederalElectronicTransferService.UnexportAllPaymentsAssociatedToFederalEft(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method will unexport the payments associated to a federal eft
            through the checking payment distribution reference
            </summary>
            <param name="federalEftId">The federal eft id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFederalElectronicTransferService.VoidFedEft(TaxHub.Models.FederalElectronicTransfer,TaxHub.Models.Commands.FederalEftVoidCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Initiate the voiding process of a Fed EFT.
            </summary>
            <param name="fedEftToVoid">The Fed eft to be voided</param>
            <param name="fedEftToVoidCommand">The Fed eft void command</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFederalElectronicTransferService.SetPaymentsReconciliation(System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update payments children reconcile status
            </summary>
            <param name="federalEftId">federal eft id</param>
            <param name="reconcile">reconcile value</param>
            <param name="eventDataParams">event data params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>True if all payments were succesfully updated</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFederalElectronicTransferService.SetReconciliationByFileId(System.Guid,System.Boolean,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Reconcile/Unreconcile the federal efts by file request id
            </summary>
            <param name="fileId">The file id</param>
            <param name="reconcile">Reconcile value</param>
            <param name="eventDataParams">Event data params</param>
            <returns>true if all operations succeed</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFederalElectronicTransferService.WireFedEft(System.Int32,TaxHub.Models.Commands.FederalEftWireUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Wires Fed eft: sets Transaction type = Wire, IsExported = true, ExportedDate = now
            </summary>
            <param name="fedEftId">FedEft id</param>
            <param name="fedEftToWireCommand">Updated Fedeft</param>
            <param name="eventDataParams">Event data parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IFederalElectronicTransferService.GetPaymentDistributionCountsByExportedFileId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the total payment count of all Fed EFTs in an Exported File (one ach file is composed by many fed Efts).
            Gets:
            - total payment count of all Fed EFTs in an Exported File (one ach file is composed by many fed Efts)
            - positive payment count of all Fed EFTs in an Exported File (one ach file is composed by many fed Efts).
            Postive payments are the ones that actually got paid (no credit or smaller than amount credit was applied)
            </summary>
            <param name="fileId">Exported File Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>total of Payments</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IEmployeeQuarterlyService">
            <summary>
            Interface for employee payroll.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IEmployeeQuarterlyService.SaveEmployee(TaxHub.Models.CompanyEmployee,System.Guid,System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams,TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Creates or updates the EmployeeQuarterly object.
            </summary>
            <param name="companyEmployee">The companyEmployee.</param>
            <param name="quarterlyTaxProcessingId">The quarterlyTaxProcessing identifier.</param>
            <param name="quarterlyTaxInstanceId">The quarterlyTaxInstance identifier.</param>
            <param name="tenantId">The tenant identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            true if successful, false otherwise.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IEmployeeQuarterlyService.Create(TaxHub.Models.EmployeeQuarterly,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified employee quarterly.
            </summary>
            <param name="employeeQuarterly">The employee quarterly.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating the Employee Quarterly
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IEmployeeQuarterlyService.BulkCreate(System.Collections.Generic.List{TaxHub.Models.EmployeeQuarterly},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entities.
            </summary>
            <param name="entities">The entities.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of bulk creating several instances of the aggregate.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IEmployeeQuarterlyService.FindOneBySsnEntityStateLocalEmployeeCode(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds one employee quarterly having the values provided.
            </summary>
            <param name="qeId">The QE ID</param>
            <param name="ssn">The Employee SSN</param>
            <param name="localCode">The local code.</param>
            <param name="stateCode">The state code.</param>
            <param name="entityCode">The entity code.</param>
            <param name="employeeCode">The employeeCode code. This parameter will be "" by default</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the employee quarterly having the values provided.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IEmployeeQuarterlyService.FindOneByEmployeeIdQuarterlyTaxProcessingIdStateIdLocalIdAndEntityId(System.String,System.Guid,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds one employee quarterly having the values provided. These values define a unique index in the db.
            </summary>
            <param name="employeeId">The EeId</param>
            <param name="quarterlyTaxProcessingId">The Quarterly Tax Processing ID</param>
            <param name="stateCode">The State Code</param>
            <param name="localCode">The Local Code</param>
            <param name="entityCode">The Entity Code</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>The Employee Quarterly Record</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IEmployeeQuarterlyService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.EmployeeQuarterly},System.Int32,TaxHub.Models.EmployeeQuarterly,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params1.</param>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="entity">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.INonPayrollProcessingService">
            <summary>
            Interface for non payroll processing services.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INonPayrollProcessingService.ProcessNonPayrollTaxes(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes the non periodic taxes.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="legalEntityCoIds">The list of legalEntity coIds.</param>
            <param name="periodicTaxProcessingId">The periodicTaxProcessingId.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INonPayrollProcessingService.RequestMetadata(System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Requests the metadata.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INonPayrollProcessingService.GetMissingPaysCount(System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Checks if non-periodic taxes were received
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodicTaxProcessingId.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns boolean value if non-periodic taxes were received.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INonPayrollProcessingService.ProcessMetadataReceived(TaxHub.Models.Commands.TaxPeriodicTaxProcessingMetadataReceivedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes Meta Data Received Event
            </summary>
            <param name="command">The command</param>
            <param name="eventDataParams"> event data params </param>
            <param name="token">Cancellation token</param>
            <returns>Success or Failure</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.InputTaxInstanceService">
            <summary>
            InputTaxInstance service implementation. InputTaxInstances are known as Input Payrolls in PTM.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.InputTaxInstanceService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.#ctor(TaxHub.CoreServices.DataAccess.IInputTaxInstanceRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.CoreServices.Application.ITaxCodeService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.InputTaxInstanceService"/> class.
            </summary>
            <param name="inputTaxInstanceRepository">Input Tax Instance Repository</param>
            <param name="domainService">Domain service</param>
            <param name="taxCodeService">The tax code service (import_code)</param>
            <param name="messageHub">The message hub</param>
            <param name="logger">The application logger</param>
            <param name="featureToggleConfiguration">The feature Toggle Configuration</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.InitializeNew(TaxHub.Models.InputTaxInstance)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.FindOne(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.ChangeStatus(TaxHub.Models.InputTaxInstance,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.FindOneByCheckDateAndId(System.DateTime,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.FindAll(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.CreateExtended(TaxHub.Models.InputTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.Create(System.IO.Stream,System.Boolean,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.InputTaxInstanceService.InputTaxInstanceData">
            <summary>
            This class is used for parsing InputTaxInstanceData from a csv
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.Update(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.InputTaxInstance,TaxHub.Models.Dto.InputTaxInstanceUpdateConsumerCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.Update(TaxHub.Shared.Services.EventDataParams,System.Int32,TaxHub.Models.InputTaxInstance,System.Collections.Generic.List{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken,System.Int32)">
            <summary>
            since events are to be generated by the aggregate changes not passed as parameter.
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params1.</param>
            <param name="id">The id of the entity.</param>
            <param name="entity">The updated entity.</param>
            <param name="events">The list of events to publish.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.RequestAssembly(System.Collections.Generic.IEnumerable{System.Int32},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            request assembly of liability for each periodic tax instance
            </summary>
            <param name="inputPayrollIds">The input payrolls Ids.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>
            update result
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.UpdateLiabilityId(System.Guid,TaxHub.Models.InputTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.FindByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.UpdateToAssembledStatus(TaxHub.Models.InputTaxInstance,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.UpdateToCollectionNotRequiredAssemblyStatus(TaxHub.Models.InputTaxInstance,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.ResolveHistory(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.Count(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.GetTotalTaxSumOfInputInstances(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.GetCountByTenant(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InputTaxInstanceService.HasPayrollForClient(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.InfoProcessedInputInstances">
            <summary>
            Encapsulates the result of processing a batch of input tax instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.InfoProcessedInputInstances.Total">
            <summary>
            Total of operations
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.InfoProcessedInputInstances.SuccessTotal">
            <summary>
            Total of successful operations
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IInputTaxInstanceService">
            <summary>
            Domain services related to InputTaxInstance
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets input tax instance by its ID
            </summary>
            <param name="id">The input tax instance ID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>InputTaxInstance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.FindOne(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets input tax instance by its ID and tenant ID
            </summary>
            <param name="tenantId">The tenant ID</param>
            <param name="id">The input tax instance ID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>InputTaxInstance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets all input tax instances
            </summary>
            <param name="pageParams">The page paramenters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>List of input tax instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.FindAll(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets all input tax instances for the specified tenant
            </summary>
            <param name="tenantId">The tenant ID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>List of input tax instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.Count(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets count of input tax instances
            </summary>
            <param name="pageParams">The page paramenters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Number of tax input instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.GetTotalTaxSumOfInputInstances(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the sum of tax amounts of all input tax instances
            </summary>
            <param name="pageParams">The page paramenters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Total sum of tax amount</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.CreateExtended(TaxHub.Models.InputTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a new input tax instance  and returns extended results.
            </summary>
            <param name="entity">The input instance to be created</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Extended Aggregate results</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.Create(System.IO.Stream,System.Boolean,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates new input tax instances based on stream of csv data and returns extended results.
            </summary>
            <param name="csvStream">csv stream</param>
            <param name="isPeriodic">use per control</param>
            <param name="userName">user name</param>
            <param name="eventDataParams">event data params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>create aggregate extended result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.Update(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.InputTaxInstance,TaxHub.Models.Dto.InputTaxInstanceUpdateConsumerCommand,System.Threading.CancellationToken)">
            <summary>
            Updates the specified inout tax instance
            </summary>
            <param name="eventDataParams">The event data parameters</param>
            <param name="originalInputTaxInstance">The input instance to be updated</param>
            /// <param name="consumerUpdateCommand">The  input tax instance with updates</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.RequestAssembly(System.Collections.Generic.IEnumerable{System.Int32},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Request assembly of liability for each input tax instance
            </summary>
            <param name="inputPayrollsIds">The input payroll Ids.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>
            update result
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.UpdateLiabilityId(System.Guid,TaxHub.Models.InputTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update Liability id field
            </summary>
            <param name="liabilityId">Liability Id</param>
            <param name="inputTaxInstance">Input Tax Instance</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Update result on the aggregate</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.FindByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the Input Tax Instance by Liability Identifier
            </summary>
            <param name="liabilityId">The liability identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The input tax instance requested</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.UpdateToAssembledStatus(TaxHub.Models.InputTaxInstance,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the assembly status of an Input Tax Instance
            </summary>
            <param name="inputTaxInstance">The input tax instance</param>
            <param name="id">The input tax instance identifer</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The updated input tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.UpdateToCollectionNotRequiredAssemblyStatus(TaxHub.Models.InputTaxInstance,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the assembly status of an Input Tax Instance to CollectionNotRequired
            </summary>
            <param name="inputTaxInstance">The input tax instance</param>
            <param name="id">The input tax instance identifer</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The updated input tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.ResolveHistory(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Resolves the history of an Input Tax Instance
            </summary>
            <param name="tenantId">The tenant identifier</param>
            <param name="inputTaxInstanceId">The input tax instance identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task that resolves in the history of an input tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.Delete(TaxHub.Models.InputTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Deletes the InputTaxInstance
            </summary>
            <param name="entity">InputTaxInstance to be deleted</param>
            <param name="eventDataParams">Event Data parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="retryCount">The retry count.</param>
            <returns>DeleteAggregateResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.GetCountByTenant(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the counts of input tax instance for this tenant.
            </summary>
            <param name="tenantId">guid tenant id</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>the count as a long</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.HasPayrollForClient(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if there are any InputTaxInstances for this companyId
            </summary>
            <param name="clientId">CompanyId to search</param>
            <param name="cancellationToken">cancellation Token</param>
            <returns>true if there are any InputTaxInstances for this companyId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.ChangeStatus(TaxHub.Models.InputTaxInstance,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Modifies the input payroll status
            </summary>
            <param name="inputpayroll">The input payroll</param>
            <param name="newStatus">The new status</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation Token</param>
            <returns>
            A <see cref="T:TaxHub.Hosting.Runtime.UpdateAggregateResult" /> representing the result of the operation.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IInputTaxInstanceService.FindOneByCheckDateAndId(System.DateTime,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Determine if Company Has an Input Tax Instance
            </summary>
            <param name="checkdate">The checkdate</param>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task that returns true if the company has an InputTaxInstance</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.CompanyService">
            <summary>
            The Company Service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.#ctor(TaxHub.CoreServices.DataAccess.ICompanyRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Acl.Payment.IHubCompanyServiceAdapter,SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.CompanyService" /> class.
            </summary>
            <param name="repository">Company repository</param>
            <param name="messageHub">Message Hub</param>
            <param name="logger">Logger</param>
            <param name="clientService">The client service.</param>
            <param name="hubCompanyServiceAdapter">The hub company service adapter.</param>
            <param name="cacheManager">The cache manager.</param>
            <param name="cacheRevocationService">The cache Revocation Services.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CompanyService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.InitializeNew(TaxHub.Models.Company)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.Create(TaxHub.Models.Company,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds a company.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The company.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.LookupOneByCoidandTenantid(System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.FindAllComponentCompanies(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find all component companies whose legal entity has the given company id.
            </summary>
            <param name="leCompanyId">The legal entity company id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The component companies.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all component companies whose legal entity has the given company id.
            </summary>
            <param name="pageParams">PagedDataParameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The component companies.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.UpdateFromEvent(TaxHub.Models.Commands.CompanyUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates from event.
            </summary>
            <param name="command">The command action.</param>
            <param name="eventDataParams">The Event Data Params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>The update aggregate result state.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.SyncCompaniesFromHubForTenant(System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Synchronizes the companies from hub for tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <returns>
              <c>true</c> if success; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.GetCacheKeys(TaxHub.Models.Company)">
            <summary>
            This creates an Array of Cachekeys used for revocation.
            </summary>
            <param name="company"> The company.</param>
            <returns>It returns an array of string </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.LookupById(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.UpdateProductActivation(System.Guid,System.Boolean,TaxHub.Common.Models.StatusCode,System.Boolean,System.DateTime,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.ProcessCompanyCreatedEvent(TaxHub.Models.Company,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.ProcessCompanyUpdateEvent(TaxHub.Models.Commands.CompanyUpdateCommand,TaxHub.Models.Commands.ClientUpdateCommand,TaxHub.Models.Tenant,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.CompanyService.FindAllCompanyIdsFromCoIds(System.Collections.Generic.IEnumerable{System.String},System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.ICompanyService">
            <summary>
            Defines Company Service Interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICompanyService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="companyId">The company identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The company.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICompanyService.FindAllComponentCompanies(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find all component companies whose legal entity has the given company id.
            </summary>
            <param name="leCompanyId">The legal entity company id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The component companies.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICompanyService.Create(TaxHub.Models.Company,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICompanyService.SyncCompaniesFromHubForTenant(System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Synchronizes the companies from hub for tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <returns>
              <c>true</c> if success; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICompanyService.LookupOneByCoidandTenantid(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Lookups a company by CoId and Tenant Id
            It will first try to get it from the cache before asking the repository.
            </summary>
            <param name="coid">The coid.</param>
            <param name="tenantId">The tenantId</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICompanyService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all component companies whose legal entity has the given company id.
            </summary>
            <param name="pageParams">PagedDataParameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The component companies.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICompanyService.LookupById(System.Guid,System.Threading.CancellationToken)">
            <summary>
             Lookups the tenant.
            It will first try to get it from the cache before asking the repository.
            </summary>
            <param name="companyId">The Tenant Identifier</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The tenant with the given identifier.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICompanyService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.Company},System.Guid,TaxHub.Models.Company,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates company
            </summary>
            <param name="eventDataParams">Event Data Params</param>
            <param name="commandAction">Company Command Action</param>
            <param name="companyId">CompanyId up company to update</param>
            <param name="entity">company to update</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Retry Count</param>
            <returns>The update aggregate extended result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICompanyService.UpdateProductActivation(System.Guid,System.Boolean,TaxHub.Common.Models.StatusCode,System.Boolean,System.DateTime,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Handles product activation Message from SPS
            </summary>
            <param name="aggregateId"> Hub Company Id</param>
            <param name="hasNewStatus"> Indicates if status changed</param>
            <param name="status"> Status from Hub</param>
            <param name="hasNewActivationDate"> indicates if activation date changed</param>
            <param name="activationDate"> Activation Date from Hub</param>
            <param name="eventParams"> Event Data</param>
            <param name="token"> Cancellation Token</param>
            <returns> Returns updated result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICompanyService.ProcessCompanyCreatedEvent(TaxHub.Models.Company,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Process Company Created Event from SPS
            </summary>
            <param name="createCommand"> The Company Create Command</param>
            <param name="eventDataParams">The event data params</param>
            <param name="token"> Cancellation token</param>
            <returns> Create aggregate result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICompanyService.ProcessCompanyUpdateEvent(TaxHub.Models.Commands.CompanyUpdateCommand,TaxHub.Models.Commands.ClientUpdateCommand,TaxHub.Models.Tenant,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Process Company updated Event from SPS
            </summary>
            <param name="companyCommand"> Company update command </param>
            <param name="clientCommand"> client update command</param>
            <param name="tenant">Tenant Object</param>
            <param name="eventDataParams">The event data params</param>
            <param name="token"> Cancellation token</param>
            <returns> update aggregate result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICompanyService.FindAllCompanyIdsFromCoIds(System.Collections.Generic.IEnumerable{System.String},System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all company identifiers by coIds and tenantId.
            </summary>
            <param name="coIds">The list of coIds.</param>
            <param name="tenantId">The tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of company identifiers.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPayrollProcessingService">
            <summary>
            Defines payroll processing service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPayrollProcessingService.ProcessPeriodicTaxes(TaxHub.Models.Commands.PaymentPayrollInstanceClosedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Process taxes for a given payroll based on the tenant and payrollInstanceId:
            1- Pull all pays for the corresponding PerControl and PayGroup via SPS Api
            2- Map each pay to a PayTaxMetaData object and save it into the Staging DB
            3- When all pay records have been pulled, mapped and stored, a function or process will aggregate all TaxITem's by code and push the results to PTM.
            </summary>
            <param name="command">The payrollInstance closed command.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            True if all Periodic taxes were sucessfully pulled, mapped and stored
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPeriodicAggregationService">
            <summary>
            Interface for periodic aggregation service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicAggregationService.Aggregate(System.Func{System.Int32,System.Int32,System.Threading.Tasks.Task{System.Collections.Generic.ICollection{TaxHub.Models.MappedTaxPay}}},TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="mappedTaxPayLoader">Func for retrieving batches of mapped tax pays.</param>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="eventData">The event data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPreparerCheckService">
            <summary>
            Preparer service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerCheckService.Count(System.Threading.CancellationToken)">
            <summary> 
            Counts the Preparer Checks in the system.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A dictionary with a count key and the number of NTRs.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerCheckService.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary> 
            Counts the Preparer Checks in the system by status.
            </summary>
            <param name="filterParams">The filter parameters for th count function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A dictionary with a count key and the number of NTRs.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerCheckService.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Find one PreparerCheck with given Preparer Check Id.
            </summary>
            <param name="preparerCheckId">The preparer identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Preparer Check with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerCheckService.FindUteDefaultPreparerCheck(System.Threading.CancellationToken)">
            <summary>
            Finds the default preparer check
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The defaukt preparer check</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerCheckService.FindOneByPreparerCheckId(System.String,System.Threading.CancellationToken)">
            <summary>
            Find one PreparerCheck with given Preparer Id.
            </summary>
            <param name="preparerCheckId">The preparer identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The preparer check for the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerCheckService.FindAllByStatus(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all PreparerCheck with given status.
            </summary>
            <param name="status">The preparer check status.</param>
            <param name="pageParams">The page data parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Preparer check with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerCheckService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all PreparerChecks.
            </summary>
            <param name="pageParams">The page data parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Preparer check with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerCheckService.Create(TaxHub.Models.Commands.PreparerCheckCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="createCommand">The create command</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerCheckService.UpdateEftBankInformation(TaxHub.Models.Commands.PreparerCheckTaxEftAccountCommand,TaxHub.Models.PreparerCheck,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the Bank EFT bank information 
            </summary>
            <param name="updateCommand">The Update command</param>
            <param name="preparerCheck">The preparer check</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of updating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerCheckService.UpdateCheckBankInformation(TaxHub.Models.Commands.PreparerCheckTaxCheckAccountCommand,TaxHub.Models.PreparerCheck,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the Bank check bank information 
            </summary>
            <param name="updateCommand">The Update command</param>
            <param name="preparerCheck">The preparer check</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of updating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerCheckService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.PreparerCheck},System.Guid,TaxHub.Models.PreparerCheck,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params1.</param>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="preparerCheck">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IStateElectronicTransferService">
            <summary>
            The application layer of the State Electronic Transfer aggregate.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.FindOneByExportedFileId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds a single State EFT by its exported file id.
            </summary>
            <param name="fileId">Exported file id.</param>
            <param name="cancellationToken">Cancellation Token.</param>
            <returns>A State EFT.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.FindAllByBulkEftId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all State EFTs based on the Bulk EFT ID.
            </summary>
            <param name="bulkEftId">Bulk EFT ID.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Returns a list of transfer records.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.FindAllInfosByBulkEftId(System.Int32,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all State EFT Infos based on the Bulk EFT ID.
            </summary>
            <param name="bulkEftId">Bulk EFT ID.</param>
            <param name="pageParams">Paging parameters.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Returns a list of transfer records.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.FindOneById(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find the state eft by int id
            </summary>
            <param name="eftStateId">The id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>State electronic transfer</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.ReopenAllStateEftPayments(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Reopen all the payments related to the state eft
            </summary>
            <param name="id">The id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if all payments were reopened, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.VoidStateEft(TaxHub.Models.StateElectronicTransfer,TaxHub.Models.Commands.StateEftVoidCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Initiate the voiding process of a State EFT.
            This will deal with regular State EFTs and Bulk State EFts
            </summary>
            <param name="stateEftToVoid">The state eft to be voided</param>
            <param name="stateEftToVoidCommand">The state eft void command</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.UnexportByFileId(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Unexport all State EFTs based on EFT File ID
            </summary>
            <param name="fileId"> EFT File ID</param>
            <param name="eventData"> Event Data Parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns> returns total or distributions "unexported" within the given FileId including a message with the state eft ids that failed if the operation failed</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.FindAllByExportedFileId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all State EFTs by its exported file id.
            </summary>
            <param name="fileId">Exported file id.</param>
            <param name="cancellationToken">Cancellation Token.</param>
            <returns>IEnumerable of StateElectronicTransfer.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.Update(TaxHub.Models.StateElectronicTransfer,System.Threading.CancellationToken)">
            <summary>
            Updates all fields of given state EFT
            </summary>
            <param name="steft">THe state EFT to be updated</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Boolean indicating success or failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.FindOneByGuidId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the state EFT by its guid ID
            </summary>
            <param name="guidId">The guid ID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>State electronic transfer</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.UnexportAllPaymentsAssociatedToStateEft(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method will unexport the payments associated to a state eft
            through the checking payment distribution reference
            </summary>
            <param name="stateEftId">The state eft id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.UnexportChildrenEftsFromBulkStateEft(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method unassigns NFT state eft that were previously assigned to a bulk state eft
            </summary>
            <param name="bulkStateEftId">The bulk state eft id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.UnassignChildrenStatesFromBulk(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method unassigns NFT state eft that were previously assigned to a bulk state
            </summary>
            <param name="bulkStateId">The bulk state eft id</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.SetReconciliationToChildrenNft(System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updated all the nft children reconcile status
            </summary>
            <param name="bulkStateEftId">the bulk state id</param>
            <param name="reconcile">the reconcile flag</param>
            <param name="eventDataParams">the event data params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>Returns true if all were succesfully updated</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.SetPaymentsReconciliation(System.Int32,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update payments children reconcile status
            </summary>
            <param name="stateEftId">check id</param>
            <param name="reconcile">reconcile value</param>
            <param name="eventDataParams">event data params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>True if all payments were succesfully updated</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.SetReconciliationByFileId(System.Guid,System.Boolean,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Reconcile/Unreconcile the state efts by file request id
            </summary>
            <param name="fileId">The file id</param>
            <param name="reconcile">Reconcile value</param>
            <param name="eventDataParams">Event data params</param>
            <returns>true if all operations succeed</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.GetPaymentDistributionCountsByExportedFileId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the total payment count of all State EFTs in an Exported File (one ach file could be composed by many state Efts).
            Gets:
            - total payment count of all State EFTs in an Exported File (one ach file could be composed by many state Efts).
            - the positive payment count of all State EFTs in an Exported File (one ach file is composed by many fed Efts).
            Postive payments are the ones that actually got paid (no credit or smaller than amount credit was applied)
            </summary>
            <param name="fileId">Exported File Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>total of Payments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.Export(TaxHub.Models.StateElectronicTransfer,System.Guid,System.DateTime,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Correction Method required by ULTI-353940 to update a steft to the correct status.
            </summary>
            <param name="steft">The steft</param>
            <param name="exportedFileId">The exported file id</param>
            <param name="exportDate">The export date</param>
            <param name="eventDataParams">The event data params</param>
            <returns>The result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IStateElectronicTransferService.VoidStateEfts(System.Collections.Generic.List{TaxHub.Models.Commands.StateEftVoidCommand},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Void many state EFTs.
            TODO: make this a bulk update.
            </summary>
            <param name="stateEftVoidCommands">List of void commands.</param>
            <param name="createEventDataParams">Context</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Bulk update result</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.QuarterlyTaxInstanceEmployeeService">
            <summary>
            PeriodicTaxInstanceEmployee service implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceEmployeeService.#ctor(TaxHub.CoreServices.DataAccess.IEmployeeQuarterlyRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PeriodicTaxInstanceEmployeeService"/> class.
            </summary>
            <param name="employeeQuarterlyRepository">employee payroll instance Repository</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.QuarterlyTaxInstanceEmployeeService.EventInstanceCreated">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceEmployeeService.InitializeNew(TaxHub.Models.EmployeeQuarterly)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceEmployeeService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceEmployeeService.FindAll(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.QuarterlyTaxInstanceEmployeeService.FindAll(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PeriodicTaxInstanceEmployeeService">
            <summary>
            PeriodicTaxInstanceEmployee service implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceEmployeeService.#ctor(TaxHub.CoreServices.DataAccess.IEmployeePayrollRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PeriodicTaxInstanceEmployeeService"/> class.
            </summary>
            <param name="employeePayrollRepository">employee payroll instance Repository</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PeriodicTaxInstanceEmployeeService.EventInstanceCreated">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceEmployeeService.InitializeNew(TaxHub.Models.EmployeePayroll)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceEmployeeService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceEmployeeService.FindAll(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ReplayPayrollService">
            <summary>
            Periodic tax processing service implementation.
             </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ReplayPayrollService.#ctor(TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Acl.Payment.IPayServiceAdapter,TaxHub.CoreServices.Acl.Payment.IPayrollInstanceServiceAdapter,TaxHub.CoreServices.Application.IPayProcessingService,TaxHub.CoreServices.Application.IPayrollProcessingService,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPeriodicTaxProcessingService,TaxHub.CoreServices.Application.IMappedTaxPayService,TaxHub.CoreServices.Acl.Payment.IPayMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.ReplayPayrollService"/> class.
            </summary>
            <param name="messageHub">The Message HUB</param>
            <param name="payServiceAdapter">The Pay Service Adapter used to pull pays from the SPS API.</param>
            <param name="payrollInstanceServiceAdapter">The Payroll Instance Service Adapter used to pull a payroll instance from the SPS API.</param>
            <param name="payProcessingService">The pay processing service.</param>
            <param name="payrollProcessingService">The payroll processing service.</param>
            <param name="logger">The application logger.</param>
            <param name="periodicTaxProcessingService">The PeriodicTaxProcessing service.</param>
            <param name="mappedTaxPayService">The mapped tax pay service.</param>
            <param name="payMapper">The pay mapper.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ReplayPayrollService.PublishReplayPayrollRequest(TaxHub.Models.Commands.ReplayPayrollCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ReplayPayrollService.PublishReplayPayMappingRequest(TaxHub.Models.Commands.ReplayPayMappingCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ReplayPayrollService.ReplayPayMapping(TaxHub.Models.Commands.ReplayPayMappingCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ReplayPayrollService.ReplayPayroll(TaxHub.Models.Commands.ReplayPayrollCommand,TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.ReplayPayrollService.ReplayResult">
            <summary>
            This enum represents the result of a replay
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.ReplayPayrollService.ReplayResult.FailureShouldNotRetry">
            <summary>
            Failure in a scenario where we should not retry
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.ReplayPayrollService.ReplayResult.FailureShouldRetry">
            <summary>
            Failures in a scenario where we should retry
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Application.ReplayPayrollService.ReplayResult.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.NonPayrollProcessingService">
            <summary>
            Non payroll processing service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.NonPayrollProcessingService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IMappedTaxPayService,TaxHub.CoreServices.Application.IPeriodicTaxProcessingService,TaxHub.CoreServices.Application.IPeriodicAggregationService,TaxHub.CoreServices.Application.IPayTrackingService,TaxHub.Common.Runtime.IDelayProcess,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.NonPayrollProcessingService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="mappedTaxPayService">The mapped tax item service.</param>
            <param name="periodicTaxProcessingService">The periodic tax processing service.</param>
            <param name="periodicAggregationService">The periodic aggregation service.</param>
            <param name="payTrackingService">The pay tracking service.</param>
            <param name="delayProcess">The delay process</param>
            <param name="messageHub">The Message Hub</param>
            <param name="applicationMetricsBuilder">The application metrics builder.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.NonPayrollProcessingService.ProcessNonPayrollTaxes(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.NonPayrollProcessingService.RequestMetadata(System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.NonPayrollProcessingService.GetMissingPaysCount(System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.NonPayrollProcessingService.ProcessMetadataReceived(TaxHub.Models.Commands.TaxPeriodicTaxProcessingMetadataReceivedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.NonPayrollProcessingService.TrackSLA(TaxHub.Models.PeriodicTaxProcessing)">
            <summary>
            Records if the non-payroll processing time meets the SLA or not.
            </summary>
            <param name="periodicTaxProcessing">The PeriodicTaxProcessing to track processing time.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PeriodicAggregationService">
            <summary>
            Periodic aggregation service.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PeriodicAggregationService.MaxDegreeOfParallelism">
            <summary>
            The maximum degree of parallelism
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicAggregationService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPeriodicTaxProcessingService,TaxHub.CoreServices.Application.IPeriodicTaxInstanceService,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.IImportClientService,TaxHub.CoreServices.Application.IEmployeePayrollService,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PeriodicAggregationService" /> class.
            </summary>
            <param name="logger">Application logger</param>
            <param name="periodicTaxProcessingService">The periodic tax processing service.</param>
            <param name="periodicTaxInstanceService">The periodic tax unit service.</param>
            <param name="clientService">The client service</param>
            <param name="importClientService">The Import client service</param>
            <param name="employeePayrollService">The employee payroll service</param>
            <param name="applicationMetricsBuilder">The application metrics builder.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicAggregationService.Aggregate(System.Func{System.Int32,System.Int32,System.Threading.Tasks.Task{System.Collections.Generic.ICollection{TaxHub.Models.MappedTaxPay}}},TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="mappedTaxPayLoader">A func used for retrieving batches of mapped tax items.</param>
            <param name="periodicTaxProcessing">The periodicTaxProcessing.</param>
            <param name="eventData">The event data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicAggregationService.DeterminePeriodicTaxInstanceStatus(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Models.PeriodicIngestion.ValidatedPeriodicTaxInstance)">
            <summary>
            Method determines the status of the PeriodicTaxInstance.
            Status is set to Check for all non-payrolls except for current quarter adjustments.
            Status is also set to Check when it is Prepaid or if there are CheckDate validation errors.
            </summary>
            <param name="periodicTaxProcessing">The periodicTaxProcessing.</param>
            <param name="validatedPeriodicTaxInstance">The validated PeriodicTaxInstance.</param>
            <returns>A string representing the PeriodicTaxInstance status.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PeriodicAggregationService.DataflowManager">
            <summary>
            Helper class used to manage the Periodic Aggregation Dataflow and encapsulate common parameters.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PayrollProcessingService">
            <summary>
            Payroll processing service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayrollProcessingService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IMappedTaxPayService,TaxHub.CoreServices.Application.IPeriodicTaxProcessingService,TaxHub.CoreServices.Application.IPeriodicAggregationService,TaxHub.CoreServices.Application.IPayTrackingService,TaxHub.CoreServices.Application.IClientService,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PayrollProcessingService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="mappedTaxPayService">The mapped tax item service.</param>
            <param name="periodicTaxProcessingService">The periodic tax processing service.</param>
            <param name="periodicAggregationService">The periodic aggregation service.</param>
            <param name="payTrackingService">The tracked pay service.</param>
            <param name="clientService">The client service.</param>
            <param name="messageHub">The message hub.</param>
            <param name="applicationMetricsBuilder">The application metrics builder.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayrollProcessingService.ProcessPeriodicTaxes(TaxHub.Models.Commands.PaymentPayrollInstanceClosedCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PayrollProcessingService.TrackSLA(TaxHub.Models.PeriodicTaxProcessing)">
            <summary>
            Records if the payroll processing time meets the SLA or not.
            </summary>
            <param name="periodicTaxProcessing">The PeriodicTaxProcessing to track processing time.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeService.LookupOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Lookups the tax code.
            It will first try to get it from the cache before asking the repository.
            </summary>
            <param name="taxId">The tax identifier.</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>The tax code with the given identifier.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find a record by id.
            </summary>
            <param name="id">The tax id.</param>
            <param name="token">The cancellation token.</param>
            <returns>The record matched.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeService.FindByDescription(System.String,System.Threading.CancellationToken)">
            <summary>
            Find by Description
            </summary>
            <param name="description">Description - case sensitive</param>
            <param name="token">cancellationToken-Tax</param>
            <returns>Tax Desc</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeService.Delete(TaxHub.Models.TaxCode,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Deletes the entity.
            </summary>
            <param name="taxCode">The taxCode.</param>
            <param name="eventDataParams">The event data Params.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Deletes the given taxCodeObject</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeService.FindAllByTaxCodeIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Find all records associated to the tax code id given.
            </summary>
            <param name="taxCodeids">Tax Code Id.</param>
            <param name="token">Cancellation Token.</param>
            <returns>Find all records associated to the tax code id given.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeService.FindAllByStateTransactionAndEntityCode(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Find all records by StateCode, TransactionCode and EntityCode.
            </summary>
            <param name="stateCode">The state code.</param>
            <param name="transactionCode">The transaction code.</param>
            <param name="entityCode">The entity code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All records by StateCode, TransactionCode and EntityCode.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all records
            </summary>
            <param name="pageParams">pageParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>All records</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeService.LookupOneByEntityStateAndLocalCode(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Looks up the TaxCode based on the entity, state, and local code
            </summary>
            <param name="entityCode">The entity code</param>
            <param name="stateCode">The state code</param>
            <param name="localCode">The local code</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The tax code.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITaxCodeService.FindAllByPayee(System.String,System.Threading.CancellationToken)">
            <summary>
            Find all by payee.
            </summary>
            <param name="payeeId">The payee identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All records by payee id.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPreparerService">
            <summary>
            Preparer service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerService.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Find one TaxDisbursementAccount with given Preparer Id.
            </summary>
            <param name="preparerId">The tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Tenant with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerService.FindUteDefaultPreparer(System.Threading.CancellationToken)">
            <summary>
            Returns the default preparer in PTM 
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The UTE Default Preparer (PTMNEW)</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerService.Count(System.Threading.CancellationToken)">
            <summary>
            Get total number of preparers
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Dictionary with the count</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerService.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Get total number of preparers using a filter
            </summary>
            <param name="filterParams"> The filter params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Dictionary with the count of preparers that meat the filter </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerService.FindAllbyStatus(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all Preparers with a status
            </summary>
            <param name="preparerStatus">The status</param>
            <param name="pageParams">Page parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>All Preparers with a given status</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get all Preparers
            </summary>
            <param name="pageParams">Page parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>All preparers in an enumerable object</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerService.Create(TaxHub.Models.PreparerCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates a new preparer
            </summary>
            <param name="createCommand">The create command</param>
            <param name="eventData">The event data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Result from creation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerService.Update(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Preparer,TaxHub.Models.PreparerUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params1.</param>
            <param name="preparer">Preparer instance to update</param>
            <param name="updateCommand">The command containing update</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns> The result of creating an instance of the aggregate </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPreparerService.UpdateEftBankInformation(TaxHub.Models.Commands.PreparerTaxEftAccountCommand,TaxHub.Models.Preparer,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the Preparer EFT Bank Information
            </summary>
            <param name="updateCommand">The update command</param>
            <param name="preparer">The preparer</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The result of the update operation</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ClientService">
            <summary>
            Implements client service interface.
            </summary>
            <seealso cref="T:TaxHub.Models.Client" />
            <seealso cref="T:TaxHub.CoreServices.Application.IClientService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.DataAccess.IClientRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.CoreServices.Application.IAgencyService,TaxHub.CoreServices.Application.IScheduleService,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Application.IClientDraftService,TaxHub.CoreServices.DataAccess.ICompanyRepository,SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.ClientService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="repository">The repository.</param>
            <param name="domainService">The domain service.</param>
            <param name="agencyService">The agency service.</param>
            <param name="scheduleService">The schedule service.</param>
            <param name="messageHub">The message hub.</param>
            <param name="clientDraftService">client draft service</param>
            <param name="companyRepository">The message hub.</param>
            <param name="cacheManager">The Cache Manager.</param>
            <param name="cacheRevocationService">The cache revocation services</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.ClientService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.Count(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindAll(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindAllByTenantId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindBulkClient(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindOne(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindOne(System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindAllByClientIds(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindOneByCompanyId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindOneClientIdInfo(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindAllContainsCompanyCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Find all companies with same company code
            </summary>
            <param name="companyCode"> The company code</param>
            <param name="cancellationToken">The Cancellation token</param>
            <returns>List of Companies</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.Create(TaxHub.Models.Client,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc cref="M:TaxHub.CoreServices.Application.IClientService.Create(TaxHub.Models.Client,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.InitializeNew(TaxHub.Models.Client)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.Update(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Client,TaxHub.Models.Commands.ClientUpdateCommand,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.Update(TaxHub.Shared.Services.EventDataParams,System.Guid,TaxHub.Models.Client,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.UpdateFromEvent(TaxHub.Models.Commands.ClientUpdateCommand,System.Guid,TaxHub.Models.FeinType,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.ReplayAggregateEvents(TaxHub.Common.EventStore.IAggregateSnapshotFilter,System.Func{TaxHub.Common.Models.ISnapshotable,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Raise observed evetns for Client described by the filter.
            </summary>
            <param name="eventsFilter">Filter for DB query.</param>
            <param name="func">Action to apply</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.GetCacheKeys(TaxHub.Models.Client)">
            <summary>
            This creates an Array of Cachekeys used for revocation.
            </summary>
            <param name="client"> The client.</param>
            <returns>It returns an array of string </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.LookupClientByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Lookups the client by first attempting to retrieve from the cache.
            </summary>
            <param name="clientId">The importrClient identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The tenant with the given identifier.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.LookupHasActiveClientByTenantId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindAllByFein(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.LookupClientByCompanyId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.HasPayrollBeenProcessed(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if payroll has been processed
            </summary>
            <param name="clientId">Company Id</param>
            <param name="token">Cancellation Token</param>
            <returns>true if payroll has been run</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.CreateClientFromCompany(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.CreateClientFromCompany(TaxHub.Models.Company,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.FindAllMatching(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.DeleteClient(System.String,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Removes the client and reassigns the Payroll Units back to the company in SPS.
            </summary>
            <param name="clientId">The Client to remove.</param>
            <param name="tenantId">The Tenant Id.</param>
            <param name="eventDataParams">The Eventdata Params.</param>
            <param name="cancellationToken">The Cancellation Token.</param>
            <returns>Removes the client</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ClientService.Delete(TaxHub.Models.Client,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.CollectionDetailService">
            <summary>
            The CollectionDetail service
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.ICollectionDetailService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.CollectionDetailService.#ctor(TaxHub.CoreServices.DataAccess.ICollectionDetailRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.CollectionDetailService"/> class.
            </summary>
            <param name="collectionDetailRepository">The collection detail repository.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CollectionDetailService.GetDetailsExtended(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.CollectionDetailService.GetDetailsExtendedCount(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.CollectionDetailService.GetFtr(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IDedService">
            <summary>
            Inteface for DED Service.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IDedService.CreateOrUpdateDedEventFilter(TaxHub.Models.Tenant,System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Creates or updates Ded Event filter.
            </summary>
            <param name="tenant">The tenant.</param>
            <param name="eventCollectionName">Name of the event collection.</param>
            <param name="eventName">Name of the event.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A result that indicates whether the filter was successfully set up or not.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.DedService">
            <summary>
             Implements DED service class to support setup of filters for DED.
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.IDedService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.DedService.#ctor(TaxHub.Hosting.Runtime.IDomainService,TaxHub.Common.Configuration.ISystemConfiguration,TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfoService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.DedService" /> class.
            </summary>
            <param name="domainService">The domain service.</param>
            <param name="systemConfig">The system configuration.</param>
            <param name="dedSubscriptionInfoService">The ded subscription information service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DedService.CreateOrUpdateDedEventFilter(TaxHub.Models.Tenant,System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Creates employee's date of birth change filter.
            </summary>
            <param name="tenant">The tenant.</param>
            <param name="eventCollectionName">Name of the event collection.</param>
            <param name="eventName">Event name.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A result that indicates whether the filter was successfully set up or not.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.EmployeePayrollService">
            <summary>
            Implements employeePayroll service.
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.IEmployeePayrollService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.EmployeePayrollService.#ctor(TaxHub.CoreServices.DataAccess.IEmployeePayrollRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.EmployeePayrollService"/> class.
            </summary>
            <param name="employeePayrollRepository">The employeePayroll repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The app logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.EmployeePayrollService.BulkUpsert(System.Collections.Generic.ICollection{TaxHub.Models.EmployeePayroll},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.IAlertService">
            <summary>
            Interface for UTE Alerts Service
             </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAlertService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets Alert by alert ID
            </summary>
            <param name="alertId"> Alert ID </param>
            <param name="cancellationToken"> The cancellation token </param>
            <returns> Alert </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAlertService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.Alert},System.Int32,TaxHub.Models.Alert,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified event data parameters.
            </summary>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="commandAction">The command action.</param>
            <param name="id">The identifier.</param>
            <param name="entity">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAlertService.Create(TaxHub.Models.Alert,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>CreateAggregateResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAlertService.SendAlertsFromPayrollValidationSummary(TaxHub.Models.Commands.PayrollValidationSummaryCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes the payroll validation summary.
            </summary>
            <param name="validationSummaryCommand">The periodic payroll validation summary command.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>CreateAggregateResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAlertService.SendAlertsFromPeriodicTaxInstanceValidationSummary(TaxHub.Models.Commands.PeriodicTaxInstanceValidationSummaryCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Processes the periodic tax instance validation summary.
            </summary>
            <param name="validationSummary">The periodic tax instance validation summary command.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>CreateAggregateResult</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ICollectionDetailService">
            <summary>
            Collection Detail Service interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICollectionDetailService.GetDetailsExtended(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get relevant data for the pair tenant id / collection Id. This data is used for the FTR integration.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="collectionId">The collection Id</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Data related with the collection id provided
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICollectionDetailService.GetDetailsExtendedCount(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the details extended count.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="collectionId">The collection identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The number of rows to be returned by the GetDeailsExtended method
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ICollectionDetailService.GetFtr(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get relevant data for the FTR report (Publication).
            </summary>
            <param name="collectionId">The collection Id</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Data related with the collection id provided
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IEmployeePayrollService">
            <summary>
            Inteface for employee payroll.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IEmployeePayrollService.DeleteByPayrollId(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Deletes the employee by payroll identifier.
            </summary>
            <param name="payrollId">The payroll identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A result indicating if the deletion was successful.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IEmployeePayrollService.FindOneByEmployeeId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the employee by employee identifier.
            </summary>
            <param name="employeeId">The employee payroll identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The employee payroll instance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IEmployeePayrollService.FindOne(System.Int32,System.String,System.Guid,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an employee by its unique index
            </summary>
            <param name="payrollId">The payroll identifier</param>
            <param name="eeid">The employee id number</param>
            <param name="tenantId">The tenant identifier</param>
            <param name="entityCode">The entity code</param>
            <param name="stateCode">The state code</param>
            <param name="localCode">The local code</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The employee payroll instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IEmployeePayrollService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all instances of employee payrolls
            </summary>
            <param name="pagedParams">The paged parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The employee payroll instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IEmployeePayrollService.BulkUpsert(System.Collections.Generic.ICollection{TaxHub.Models.EmployeePayroll},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Inserts the collection of EmployeePayroll objects in bulk, if some of them already exist, it tries to updated the records individually.
            </summary>
            <param name="employeePayrolls">The employee payrolls.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The operation result.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IClientService">
            <summary>
            Defines client service interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.Count(System.Threading.CancellationToken)">
            <summary>
            Counts the clients
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindAll(System.Threading.CancellationToken)">
            <summary>
            Finds all.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets all clients by tenant ID and page parameters
            </summary>
            <param name="tenantId">Tenant ID</param>
            <param name="pageParams">Page parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of clients corresponding to the tenant ID and page parameters</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindOne(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds a single client by TenantId and ClientId.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindAllByClientIds(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Finds all clients with the given ids.
            </summary>
            <param name="clientIds">The import client id (payrollCode in UltiPro)</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.Create(TaxHub.Models.Client,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindOneByCompanyId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds one Client by company identifier.
            </summary>
            <param name="companyId">The company identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindOneClientIdInfo(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds one client id info by the ultiProClientId and client access key and reportingcompany code.
            </summary>
            <param name="ultiProClientId">The tenant's UltiProClientId.</param>
            <param name="clientAccessKey">The tenant's ClientAccessKey.</param>
            <param name="coId">The client's CoId.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.Update(TaxHub.Shared.Services.EventDataParams,System.Guid,TaxHub.Models.Client,System.Threading.CancellationToken)">
            <summary>
            Update Client
            </summary>
            <param name="eventParams">The event data parameters.</param>
            <param name="id">The identifier</param>
            <param name="item">The item to update.</param>
            <param name="token">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.Update(TaxHub.Shared.Services.EventDataParams,TaxHub.Models.Client,TaxHub.Models.Commands.ClientUpdateCommand,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Update Client
            </summary>
            <param name="eventParams">The event data parameters.</param>
            <param name="item">The item to update.</param>
            <param name="command">The command that represents the update</param>
            <param name="token">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.UpdateFromEvent(TaxHub.Models.Commands.ClientUpdateCommand,System.Guid,TaxHub.Models.FeinType,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
             <summary>
             Updates from event.
             </summary>
             <param name="command">The client command.</param>
             <param name="companyId">The company id.</param>
             <param name="feinType">Fein Type</param>
             <param name="eventDataParams">The event data params.</param>
             <param name="cancellationToken">The cancellation token.</param>
             <param name="retryCount">The retry count.</param>
            
             <returns>UpdateAggregateResultState representing result of asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindAllByTenantId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find clients for a tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of clients.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindBulkClient(System.Threading.CancellationToken)">
            <summary>
            This will get the special bulk client by its client id.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The client with the given client id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindAllContainsCompanyCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Find all companies with same company code
            </summary>
            <param name="companyCode"> The company code</param>
            <param name="cancellationToken">The Cancellation token</param>
            <returns>List of Companies</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.LookupClientByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Lookups the client in cache.
            It will first try to get it from the cache before asking the repository.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The client with the given identifier.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.LookupHasActiveClientByTenantId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Lookups the client in cache.
            It will first try to get it from the cache before asking the repository.
            </summary>
            <param name="activeTenantId">The Active tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The client with the given identifier.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindAllByFein(System.String,System.Threading.CancellationToken)">
            <summary>
            Find all companies with same fein
            </summary>
            <param name="fein"> fein of the company</param>
            <param name="cancellationToken"> The Cancellation token</param>
            <returns> List of PTM Companies</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.LookupClientByCompanyId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Lookups in cache the client by company identifier.
            </summary>
            <param name="companyId">The company identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> The client with the given identifier.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.CreateClientFromCompany(System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Create a client from the Company with the given identifier
            </summary>
            <param name="companyId">The company identifier.</param>
            <param name="eventDataParams">event params</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>the CreateAggregateExtendedResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.CreateClientFromCompany(TaxHub.Models.Company,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Create a client from the passed in Company
            </summary>
            <param name="company">Company to create from</param>
            <param name="eventDataParams">event params</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>The CreateAggregateExtendedResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.Delete(TaxHub.Models.Client,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Delete the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>
            The result of deleting an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.HasPayrollBeenProcessed(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if payroll has been processed
            </summary>
            <param name="clientId">Company Id</param>
            <param name="token">Cancellation Token</param>
            <returns>true if payroll has been run</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.DeleteClient(System.String,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Removes the client and reassigns the Payroll Units back to the company in SPS.
            </summary>
            <param name="clientId">The Client to remove.</param>
            <param name="tenantId">The Tenant Id.</param>
            <param name="eventDataParams">The Eventdata Params.</param>
            <param name="cancellationToken">The Cancellation Token.</param>
            <returns>Removes the client</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IClientService.FindAllMatching(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            This method returns a list of Clients matching a given search pattern.
            The pattern is matched against the ClientId and LegalName fields.
            If the pattern is a valid Guid, it will be matched against the aggregate Id field.
            If tenantId is not empty, it will also be included in the query filter.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="pattern">The search pattern.</param>
            <param name="top">The max number of results to display.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of matching clients.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Find one Agency with given Id.
            </summary>
            <param name="payeeId">The Agency identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Agency with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.LookupOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Looks up an agency by the payee Id.
            </summary>
            <param name="payeeId">The payee id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The agency.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.LookupAllByCorrespondingTaxId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Looks up an agency by the corresponding tax ID
            </summary>
            <param name="correspondingTaxId">The corresponding tax ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The agencies</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.FindAllMatching(System.String,System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a list of agencies/payees that match the provided state and payeeId patters
            </summary>
            <param name="state">The 2-letter state code</param>
            <param name="payeePattern">The patterns to search for</param>
            <param name="top">The maximum number of agencies to return</param>
            <param name="activeOnly">A flag indicating whether or not only active agencies should be returned</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of matching agencies/payees</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.FindAllMatching(TaxHub.Common.Models.AgencyAuthority,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a list of agencies/payees that match the provided status and type and authority
            </summary>
            <param name="agencyAuthority">The patterns to search for</param>
            <param name="activeOnly">A flag indicating whether or not only active agencies should be returned</param>
            <param name="top">The maximum number of agencies to return</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of matching agencies/payees</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.FindAndCalculateCreditCarryover(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if the agency allows for credit carryover.
            </summary>
            <param name="agencyId">The tenant Identifier.</param>
            <param name="quarter">The closing quarter.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A tuple with the Agency and a bool indicating if the Agency allows credit carry over.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.GetUteToUltiProMapping(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the mapping between Ute to Ultipro Agencies
            </summary>
            <param name="pagedDataParameters">Tha paging parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of the mappings between Ute Agency to UltiPro tax code</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.GetUteToUltiProMappingCount(System.Threading.CancellationToken)">
            <summary>
             Gets the number of elements in the mapping between Ute to UltiPro Agencies
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The number of rows existing in the mapping</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.FindAllByPayeeIds(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the agencies based on Payee Ids
            </summary>
            <param name="payeeIds">List of Payee Ids</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Gets the agencies based on Payee Ids</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.FindAllCombinedAgencies(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the combined agencies based on Payee Id
            </summary>
            <param name="payeeId">Payee Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Gets the combined agencies based on Payee Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.FindAllCombinedAgencies(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the combined agencies based on Payee Ids
            </summary>
            <param name="payeeIds">Payee Ids</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Gets the combined agencies based on Payee Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.FindAllByIds(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get all Agencies by list of payee ids.
            </summary>
            <param name="payeeIds">List of payees.</param>
            <param name="includeCombinePayee">Wether to include combine payees.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of agencies.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get All agencies
            </summary>
            <param name="pageParams">PagedDataParameters</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>List of Agencies</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.Update(TaxHub.Models.Agency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update Payee
            </summary>
            <param name="agency">Agency</param>
            <param name="eventDataParams">EventData</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>Boolean Values</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.UpdateAgencyQtrFreqToNull(TaxHub.Models.Agency,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update Payee QtrFreq to Null
            </summary>
            <param name="agency">Agency</param>
            <param name="eventDataParams">EventData</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>Boolean Value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.FindAllByCountyCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all agencies by county code
            </summary>
            <param name="countyCode">The county code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All of the agencies with the corresponding county code.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.UpdateCombinePayeeExceptionRules(System.String,TaxHub.Models.Commands.CombinePayeeCreditExceptionRulesUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update agency's combine payee exception rules
            </summary>
            <param name="agencyId">The agency to update</param>
            <param name="updateCommand">The update command</param>
            <param name="eventDataParams">The create event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>AggregateResultState for agency updated</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IAgencyService.FindOneWithParentSchedules(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all valid schedules for the passed in payee
            </summary>
            <param name="payeeId">The Payee Id</param>
            <param name="cancellationToken">The Cancellation token</param>
            <returns>List of Schedules for passed in payee plus it's parents.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService">
            <summary>
            Domain services related to QuarterlyQuarterlyTaxInstances
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.FindOne(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find one QuarterlyQuarterlyTaxInstance with given Id.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="id">the identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The QuarterlyQuarterlyTaxInstance with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.FindAll(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all QuarterlyQuarterlyTaxInstance's paged based on tenant identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>   
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of QuarterlyQuarterlyTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all QuarterlyQuarterlyTaxInstance's paged based on tenant identifier and page parameters.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of QuarterlyQuarterlyTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all QuarterlyQuarterlyTaxInstance's paged based on page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of QuarterlyQuarterlyTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.Create(TaxHub.Models.QuarterlyTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified QuarterlyQuarterlyTaxInstance.
            </summary>
            <param name="quarterlyTaxInstance">The QuarterlyQuarterlyTaxInstance.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult"/> representing the result of the operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.Count(System.Threading.CancellationToken)">
            <summary>
            Counts the QuarterlyQuarterlyTaxInstance's in the system.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A dictionary with a count key and the number of QuarterlyQuarterlyTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.Count(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Counts the QuarterlyQuarterlyTaxInstance's in the system by tenant identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A dictionary with a count key and the number of QuarterlyQuarterlyTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.VoidPriorNonPostedQuarterEnd(System.String,System.Guid,System.Int16,System.Int16,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Voids the previous non posted quarterly tax instances for the same client, quarter and year of the new instance
            </summary>
            <param name="clientId">The client Id.</param>
            <param name="quarterlyTaxProcessingId">The quarterly tax processing id.</param>
            <param name="quarter">The quarter.</param>
            <param name="year">The year.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:TaxHub.Hosting.Runtime.UpdateAggregateResult"/> representing the result of the operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.IsQuarterlyEndClosed(System.Guid,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            Check if the quarter end has been closed already. 
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="quarter">The quarter.</param>
            <param name="year">The year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A QuarterlyQuarterlyTaxInstance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.IsQuarterlyEndPosted(System.Guid,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            Check if the quarter end has been posted already. 
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="quarter">The quarter.</param>
            <param name="year">The year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A QuarterlyQuarterlyTaxInstance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.FindOneByQuarterlyTaxProcessingId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets Quaterrly tax instance by quarterly tax processing id.
            </summary>
            <param name="tenantId">the Tenant id.</param>
            <param name="quarterlyTaxProcessingId">The quarterlyTaxProcessingId</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A QuarterlyQuarterlyTaxInstance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.FindOneByQuarterlyTaxProcessingIdAndClientCode(System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets Quaterrly tax instance by quarterly tax processing id.
            </summary>
            <param name="tenantId">the Tenant id.</param>
            <param name="quarterlyTaxProcessingId">The quarterlyTaxProcessingId.</param>
            <param name="clientCode">The client code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A QuarterlyQuarterlyTaxInstance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.FindAllByQuarterlyTaxProcessingId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns quarterly tax instance
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="quarterlyTaxProcessingId">The quarterly tax processing id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Return quarterly tax instance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.Save(TaxHub.Models.QuarterlyTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates import client
            </summary>
            <param name="quarterlyTaxInstance"> The import client object to update</param>
            <param name="eventDataParams">The Event Data Params</param>
            <param name="cancellationToken"> The cancellation token</param>
            <returns> task of bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.FindAllByValidStatus(System.Guid,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all QuarterlyQuarterlyTaxInstance's paged based on tenant identifier and valid status identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="quarter">The quarter identifier.</param>
            <param name="year">The year identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of QuarterlyQuarterlyTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.FindAllByVoidStatus(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all QuarterlyQuarterlyTaxInstance's paged based on tenant identifier and valid status identifier.
            </summary>
            <param name="page">The page.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of QuarterlyQuarterlyTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.Delete(TaxHub.Models.QuarterlyTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Deletes the specified QuarterlyTaxInstance.
            </summary>
            <param name="quarterlyTaxInstance">The quarterly tax instance.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>
            A <see cref="T:TaxHub.Hosting.Runtime.DeleteAggregateResult" /> representing the result of the operation.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.MarkReady(System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Mark QuarterlyTaxInstance as visible for the user in UTE.
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="quarterlyTaxProcessingId">The quarterly processing id</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.MarkReady(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Mark QuarterlyTaxInstance as visible for the user in UTE.
            </summary>
            <param name="quarterlyTaxInstanceId">The quarterly tax instance id</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IQuarterlyTaxInstanceService.VoidIfNonPosted(System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Finds quarterly tax instance by id and sets its status to void if it's not posted already
            </summary>
            <param name="id">The id</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the quarterly tax instance with the given id</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.INamedTaxRepresentativeService">
            <summary>
            Domain services related to NTR in PTM
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INamedTaxRepresentativeService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find one Tenant with given Id.
            </summary>
            <param name="ntrId">The NTR identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The NTR with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INamedTaxRepresentativeService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all NTRs paged based on  page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of NTRs.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INamedTaxRepresentativeService.Count(System.Threading.CancellationToken)">
            <summary>
            Counts the NTRs in the system.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A dictionary with a count key and the number of NTRs.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INamedTaxRepresentativeService.FindOneByName(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets NTR Object By name
            </summary>
            <param name="name"> Name of the Rep</param>
            <param name="cancellationToken"> Cancellation Token </param>
            <returns> NTR Object</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INamedTaxRepresentativeService.FindOneByTenantId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find one by tenant Id
            </summary>
            <param name="tenantId">Tenant Id</param>
            <param name="cancellationToken"> Cancellation Token </param>
            <returns> NTR Object</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INamedTaxRepresentativeService.FindAllHistory(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the tenant change history
            </summary>
            <param name="tenantId">The tenant identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of DomainEventData changes</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INamedTaxRepresentativeService.Create(TaxHub.Models.Commands.NamedTaxRepresentativeCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="ntrCreateCommand">The ntr create command</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INamedTaxRepresentativeService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.NamedTaxRepresentative},System.Guid,TaxHub.Models.NamedTaxRepresentative,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params1.</param>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="ntr">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.INamedTaxRepresentativeService.Delete(TaxHub.Models.NamedTaxRepresentative,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Delete the specified entity.
            </summary>
            <param name="ntr">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of deleting an instance of the aggregate
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService">
            <summary>
            Interface for periodic tax processing service.
             </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.Create(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified PeriodicTaxProcessing.
            </summary>
            <param name="periodicTaxProcessing">The PeriodicTaxProcessing.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult" /> representing the result of the operation.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.PeriodicTaxProcessing},System.Guid,TaxHub.Models.PeriodicTaxProcessing,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified event data parameters.
            </summary>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="commandAction">The command action.</param>
            <param name="id">The identifier.</param>
            <param name="entity">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.Delete(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Deletes the specified PeriodicTaxProcessing.
            </summary>
            <param name="periodicTaxProcessing">The PeriodicTaxProcessing.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count.</param>
            <returns>
            A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult" /> representing the result of the operation.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one by periodic tax processin identifier.
            </summary>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.FindOne(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one by the TenantId and the periodicTaxProcessingId.
            </summary>
            <param name="tenantId">The tenant ID.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.FindOnePayrollByPayrollInstance(System.Guid,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Finds the one payroll by payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="isPayroll">Ith is payroll</param>
            <param name="token">The token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.FindLastNonPayrollByPayrollInstance(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the last non payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched Periodic Instance that whose all Mapped Tax Items are already saved.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.FindLastByPayrollInstance(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the last payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched Periodic Instance that all Mapped Tax Items are already saved.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.FindAllByProcessingStatus(TaxHub.Models.ProcessingStatus,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all periodic tax processings by current Processing Status.
            </summary>
            <param name="processingStatus">ProcessingStatus</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of periodic tax processings.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.FindAllWithMinId(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all with identifier greater than the given value.
            </summary>
            <param name="minId">The minimum identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched PeriodicTaxProcessing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all PeriodicTaxProcessing
            </summary>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All PeriodicTaxProcessings.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.FindAllByTenantPayGroupPerControl(System.Guid,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all PeriodicTaxProcessing
            </summary>
            <param name="tenantId">The tenant ID.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The Percontrol.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All PeriodicTaxProcessings.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.CountByTenantPayGroupPerControl(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Counts all PeriodicTaxProcessings
            </summary>
            <param name="tenantId">The tenant ID.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The Percontrol.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Count of all PeriodicTaxProcessings.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.FindOneNonPayrollFailed(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds one non-payroll PeriodicTaxProcessing in processing status MappingFailed or Failed considering a sort definition.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The period control.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched PeriodicTaxProcessing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.IsPeriodicTaxProcessingCurrentProcessOwner(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Determines if the periodic tax processing with the given identifier is the current owner of the process.
            </summary>
            <param name="periodicTaxProcessingId">Periodic tax processing identifier.</param>
            <param name="processOwnerId">Process owner identifier.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Return true if the periodic tax processing is the current owner of the process.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.LookupByPeriodicTaxProcessingId(System.Guid,System.Threading.CancellationToken)">
            <summary>
             Lookups the tenant.
            It will first try to get it from the cache before asking the repository.
            </summary>
            <param name="periodicTaxProcessingId">The Periodic Tax Processing Identifier</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The tenant with the given identifier.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.LookupByTenantIdAndPeriodicTaxProcessingIdAsync(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
             Lookups the PeriodicTaxProcessing by tenant id and periodicTax processing Id.
            It will first try to get it from the cache before asking the repository.
            </summary>
            <param name="tenantId">The TenantId</param>
            <param name="periodicTaxProcessingId">PeriodicTaxProcessingId.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The company with the given identifier.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.LookupNonPayrollByPayrollInstanceAndProcessingStatusAsync(System.Guid,System.String,System.String,TaxHub.Models.ProcessingStatus,System.Threading.CancellationToken)">
            <summary>
            Finds the one by non payroll instance and processing status.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="processingStatus">The processing status.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.LookupPayrollByPayrollInstanceAsync(System.Guid,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Finds the one by non payroll instance and processing status.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="isPayroll">is Payroll</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.TransitionToComplete(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Completes the periodic tax processing.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.TransitionToFailed(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Fails the periodic tax processing.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.TransitionToMappingFailed(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Fails the periodic tax processing indicating that failed while mapping tax item.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.TransitionToMapping(TaxHub.Models.PeriodicTaxProcessing,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Transition the periodic tax processing to mapping status.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="isReplay">Flag determining if this update is from a replay.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.TransitionToAggregating(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Transition the periodic tax processing to mapping status.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.TransitionToAggregating(TaxHub.Models.PeriodicTaxProcessing,System.DateTime,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Transition the periodic tax processing to mapping status.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="slaStartDateTime">THe SLA start date/time.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.TransitionToCompletedWithoutAggregation(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Transitions to completed without aggregation.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.MigratePeriodicTaxProcessingToFailure(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method should only be used in a migration. This method is used to migrate a periodic tax processing to the failure status.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.RequestMetadata(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Mark metadata requested.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.RequestMetadata(TaxHub.Models.PeriodicTaxProcessing,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Mark metadata requested.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="metadataRequestedCount">The metadata requested count.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.UpdateBatchCount(TaxHub.Models.PeriodicTaxProcessing,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update batch count.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="batchCount">The batch count.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Wraps business logic for all updates done in the Service</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.UpdateValidationSummary(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Models.ValidationSummary,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the validation summary.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="validationSummary">The validation summary.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>validation summary </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.UpdateTotalPaysToProcessById(System.Guid,System.Guid,System.Int64,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the total pays to process for mapping status.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodicTaxProcessingId.</param>
            <param name="payCount">The pay count.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns boolean value if operation has succeeded.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.UpdateTotalPaysToProcess(TaxHub.Models.PeriodicTaxProcessing,System.Int64,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the total pays to process.
            </summary>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="payCount">The pay count.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns a TaxProcessingResult</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.AddPeriodicTaxInstanceValidation(TaxHub.Models.Validations.PeriodicTaxInstanceValidation,TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Adds a periodic tax instance validation
            </summary>
            <param name="periodicTaxInstanceValidation">The periodic tax instance validation.</param>
            <param name="periodicTaxProcessing">The periodic tax processing.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the periodic tax instance validation was added, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.SetProcessOwner(TaxHub.Models.PeriodicTaxProcessing,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Sets the process owner identifier.
            </summary>
            <param name="periodicTaxProcessing">Periodic tax processing to be updated.</param>
            <param name="processOwnerId">New process owner identifier.</param>
            <param name="eventDataParams">Event data params</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Returns true if success, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.PrepareForMapping(System.Guid,TaxHub.CoreServices.Acl.Payment.PayView,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Finds a Periodic Tax Processing and transitions it to Mapping status or creates a new one in mapping status
            </summary>
            <param name="tenantId">The tenant Id</param>
            <param name="pay">The pay</param>
            <param name="isReplay">Tha is replay flag</param>
            <param name="eventDataParams">The event data parms</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The Periodic Tax Processing</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.UpdateMetadataRequestInProgress(System.Boolean,TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the MetadataRequestInProgress flag
            </summary>
            <param name="updatedValue">The new flag value.</param>
            <param name="periodicTaxProcessing">The periodic tax processing to be updated.</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns true if success, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxProcessingService.FindAllBetweenPerControlsGetOnlyIdAndPerControl(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all PeriodicTaxProcessing
            </summary>
            <param name="pagedDataParameters">The pagedDataParameters token.</param>
            <param name="tenantId">The tenant Id.</param>
            <param name="minimumPerControl">The minimum perControl.</param>
            <param name="maximumPerControl">The maximum perControl.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All PeriodicTaxProcessings.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService">
            <summary>
            Domain services related to PeriodicPeriodicTaxInstances
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.FindOne(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find one PeriodicPeriodicTaxInstance with given Id.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="id">the identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The PeriodicPeriodicTaxInstance with the given Id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.FindOne(System.String,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds periodic tax instance by payroll code, periodic tax processing identifier, combined transaction type and isPayroll
            </summary>
            <param name="payrollCode">The payroll code.</param>
            <param name="periodicTaxProcessingId">The PeriodicTaxProcessing identifier.</param>
            <param name="isPayroll">The is payroll value.</param>
            <param name="combinedTransactionType">The combined transaction type.</param>
            <param name="cancellationToken">The cancellation tocken.</param>
            <returns>Periodic tax instance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.FindAll(System.String,System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Finds periodic tax instance by payroll code, periodic tax processing identifier, combined transaction type and isPayroll
            </summary>
            <param name="payrollCode">The payroll code.</param>
            <param name="periodicTaxProcessingId">The PeriodicTaxProcessing identifier.</param>
            <param name="isPayroll">The is payroll value.</param>
            <param name="cancellationToken">The cancellation tocken.</param>
            <returns>Periodic tax instance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all PeriodicTaxInstance's paged based on tenant identifier and page parameters.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of PeriodicTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all PeriodicTaxInstance's paged based on page parameters.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of PeriodicTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.FindAllCompanyIds(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Finds all existing company identifiers by periodic tax processing identifier and isPayroll.
            </summary>
            <param name="periodicTaxProcessingId">The periodicTaxProcessing identifier.</param>
            <param name="isPayroll">The is payroll value.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Guid list of company identifiers.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.Create(TaxHub.Models.PeriodicTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified PeriodicPeriodicTaxInstance.
            </summary>
            <param name="periodicTaxInstance">The PeriodicPeriodicTaxInstance.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult" /> representing the result of the operation.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.UpdateStatusAndMarkReady(TaxHub.Models.PeriodicTaxInstance,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the status and marks the periodic tax instance ready.
            </summary>
            <param name="periodicTaxInstance">The periodic tax instance.</param>
            <param name="status">The status.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An UpdateAggregateResultState representing the result of the operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.PeriodicTaxInstance},System.Int32,TaxHub.Models.PeriodicTaxInstance,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params1.</param>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="entity">The entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.Count(System.Threading.CancellationToken)">
            <summary>
            Counts the PeriodicPeriodicTaxInstance's in the system.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A dictionary with a count key and the number of PeriodicPeriodicTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.Count(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Counts the PeriodicPeriodicTaxInstance's in the system by tenant identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A dictionary with a count key and the number of PeriodicPeriodicTaxInstance's.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.Update(TaxHub.Models.PeriodicTaxInstance,TaxHub.Models.Commands.PeriodicTaxInstanceUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update an existing periodic tax instance.
            </summary>
            <param name="existingPeriodicTaxInstance">The existing periodic tax instance.</param>
            <param name="periodicTaxInstanceCommand">The periodic tax instance update command.</param>
            <param name="eventDataParams">The event data params.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The update result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.UpdateYtdAndQtdValues(TaxHub.Models.PeriodicTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update the YTD and QTD values.
            </summary>
            <param name="periodicTaxInstance">The periodic tax instance.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="ct">The cancellation Token.</param>
            <returns>
            A <see cref="T:TaxHub.Hosting.Runtime.CreateAggregateResult" /> representing the result of the operation.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.RequestAssembly(System.Collections.Generic.IEnumerable{System.Int32},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            request assembly of liability for each periodic tax instance
            </summary>
            <param name="importPayrollIds">This parameter indicates the list of periodic tax instances to assemble.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>
            update result
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.Reverse(System.Guid,System.Int32,System.Collections.Generic.IEnumerable{System.Int32},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            reverse one or more tax units of this periodic tax instance
            </summary>
            <param name="tenantId">the tenant of the periodic tax instance</param>
            <param name="id">the id of the periodic tax instance</param>
            <param name="taxIds">ids of taxunits that need to be reversed</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">the cancellation token.</param>
            <returns>Create aggregate extended result that holds the reversal periodic tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.Delete(TaxHub.Models.PeriodicTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Deletes the periodic tax instance.
            </summary>
            <param name="periodicTaxInstance">The periodic tax Instance</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">The retry count</param>
            <returns>true if the operation was successful, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.DeleteByPayrollInstanceId(System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Deletes by tenant identifier and payroll instance identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payrollInstanceId">The payroll instance identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if the operation was successful, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.FindAllHistory(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all history.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxInstanceId">The periodic tax instance identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.FindAllHistory(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all history.
            </summary>
            <param name="periodicTaxInstanceId">The periodic tax instance identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.ResolveHistory(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Resolves the history.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxInstanceId">The periodic tax instance identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.UpdateLiabilityId(System.Guid,TaxHub.Models.PeriodicTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update Liability id field
            </summary>
            <param name="liabilityId">liability id</param>
            <param name="periodicTaxInstance">periodic tax instance</param>
            <param name="eventDataParams">event params</param>
            <param name="ct">cancel token</param>
            <returns>update result on the agreggate</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.GetPeriodicTaxInstancesExtended(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the periodic tax instances detail.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of the periodic tax instances detail</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.GetPeriodicTaxInstancesExtendedCount(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the periodic tax instances extended count.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of elements</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.GetPeriodicTaxInstancesExtendedExceptions(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the periodic tax instances payroll exceptions detail.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of the periodic tax instances detail</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.FindByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the Periodic Tax Instance by liability identifier.
            </summary>
            <param name="liabilityId">The liability identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Periodic Tax Instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.UpdateToAssembledStatus(TaxHub.Models.PeriodicTaxInstance,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the assembly status.
            </summary>
            <param name="periodicTaxInstance">Periodic tax instance.</param>
            <param name="id">The Periodic tax instance identifier.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the updated  Periodic tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.UpdateToCollectionNotRequiredAssemblyStatus(TaxHub.Models.PeriodicTaxInstance,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates the assembly status of Periodict Tax Instance to CollectionNotRequired 
            </summary>
            <param name="periodicTaxInstance">The periodic tax instance</param>
            <param name="id">The periodic tax instance identifer</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The updated periodic tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.GetCountByTenant(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all periodic tax instances by payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The count of all periodic tax instances by tenantId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.RecalculateAllPeriodicTaxInstancesYtdAndQtdValues(TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates all periodic tax instances ytd and QTD values.
            </summary>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="ct">The ct.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.HasPayrollForClient(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks to see if there are any Periodic Tax Instances for this companyid
            </summary>
            <param name="clientId">CompanyId to search</param>
            <param name="cancellationToken">cancellation Token</param>
            <returns>true if there is a periodic tax instance for this company id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.UpdateAllPeriodicTaxInstancesPrePaidValues(TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Updates all periodic tax instances prepaid values.
            </summary>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="ct">The ct.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPeriodicTaxInstanceService.PublishCreateFinishedEvent(TaxHub.Models.PeriodicTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Publish the event for when a periodic tax instance creation is completed during the aggregation process
            </summary>
            <param name="entity">The periodic tax instance that got finished</param>
            <param name="eventDataParams">The event data params</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns><code>true</code> if publishing succeeded, <code>false</code> otherwise</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IScheduleService">
            <summary>
            ScheduleService Interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IScheduleService.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the aggregateId.
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns instance of Schedule or Null if not found
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IScheduleService.Contains(System.String,System.Threading.CancellationToken)">
            <summary>
            Method checks if repository contains an aggregate with specified aggregateId.
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns boolean value
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IScheduleService.IsDueDatePriorHolidaysOrWeekends(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns if the due date is Prior to Holiday/Weekends for a given ScheduleId
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>returns a boolean value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IScheduleService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all schedules.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of schedules.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IScheduleService.Create(TaxHub.Models.Schedule,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IScheduleService.UpdatePaymentFrequencyCategory(TaxHub.Models.Schedule,TaxHub.Models.Commands.ScheduleUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Update schedule payment frequency category.
            </summary>
            <param name="schedule">The schedule.</param>
            <param name="scheduleUpdateCommand">The commmand.</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result state</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.NamedTaxRepresentativeService">
            <summary>
            Named Tax Representative Class
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.Repository">
            <summary>
            Gets the repository.
            </summary>
            <value>
            The repository.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.MessageHub">
            <summary>
            Gets the message hub.
            </summary>
            <value>
            The message hub.
            </value>
        </member>
        <member name="M:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.#ctor(TaxHub.CoreServices.DataAccess.INamedTaxRepresentativeRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.NamedTaxRepresentativeService"/> class.
            </summary>
            <param name="repository">Repository</param>
            <param name="domainService">Domain Service</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.InitializeNew(TaxHub.Models.NamedTaxRepresentative)">
            <summary>
            Creates a new instance
            </summary>
            <param name="entity">Base entity</param>
            <returns>A new NTR instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.Count(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.FindOneByName(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.FindOneByTenantId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.FindAllHistory(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.Create(TaxHub.Models.Commands.NamedTaxRepresentativeCreateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Creates the specified entity.
            </summary>
            <param name="ntrCreateCommand">The NTR Create Command</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.Update(TaxHub.Shared.Services.EventDataParams,System.Action{TaxHub.Models.NamedTaxRepresentative},System.Guid,TaxHub.Models.NamedTaxRepresentative,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="eventDataParams">The event data params1.</param>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="ntr">The NTR</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.NamedTaxRepresentativeService.Delete(TaxHub.Models.NamedTaxRepresentative,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Delete the specified entity.
            </summary>
            <param name="ntr">The entity.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of deleting an instance of the aggregate
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PeriodicTaxProcessingService">
            <summary>
            Periodic tax processing service implementation.
             </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.EventInstanceCreated">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository,TaxHub.Messaging.IMessageHub,SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService,TaxHub.CoreServices.Application.IPayTrackingService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PeriodicTaxProcessingService" /> class.
            </summary>
            <param name="logger">Application logger</param>
            <param name="periodicTaxProcessingRepository">The periodic tax processing repository.</param>
            <param name="messageHub">The message hub.</param>
            <param name="cacheManager">The Cache Manager.</param>
            <param name="cacheRevocationService">The Cache Revocation Services.</param>
            <param name="payTrackingService">The pay tracking service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.FindOne(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.FindOnePayrollByPayrollInstance(System.Guid,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.FindLastNonPayrollByPayrollInstance(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.FindLastByPayrollInstance(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.FindAllByProcessingStatus(TaxHub.Models.ProcessingStatus,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.FindAllWithMinId(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.FindAllByTenantPayGroupPerControl(System.Guid,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.CountByTenantPayGroupPerControl(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.FindOneNonPayrollFailed(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.IsPeriodicTaxProcessingCurrentProcessOwner(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.LookupByPeriodicTaxProcessingId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.LookupByTenantIdAndPeriodicTaxProcessingIdAsync(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.LookupNonPayrollByPayrollInstanceAndProcessingStatusAsync(System.Guid,System.String,System.String,TaxHub.Models.ProcessingStatus,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.LookupPayrollByPayrollInstanceAsync(System.Guid,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.TransitionToComplete(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.TransitionToFailed(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.TransitionToMappingFailed(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.TransitionToMapping(TaxHub.Models.PeriodicTaxProcessing,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.TransitionToAggregating(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.TransitionToAggregating(TaxHub.Models.PeriodicTaxProcessing,System.DateTime,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.TransitionToCompletedWithoutAggregation(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.MigratePeriodicTaxProcessingToFailure(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.RequestMetadata(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.RequestMetadata(TaxHub.Models.PeriodicTaxProcessing,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.UpdateBatchCount(TaxHub.Models.PeriodicTaxProcessing,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.UpdateValidationSummary(TaxHub.Models.PeriodicTaxProcessing,TaxHub.Models.ValidationSummary,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.UpdateTotalPaysToProcessById(System.Guid,System.Guid,System.Int64,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.UpdateTotalPaysToProcess(TaxHub.Models.PeriodicTaxProcessing,System.Int64,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.UpdateMetadataRequestInProgress(System.Boolean,TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.AddPeriodicTaxInstanceValidation(TaxHub.Models.Validations.PeriodicTaxInstanceValidation,TaxHub.Models.PeriodicTaxProcessing,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.SetProcessOwner(TaxHub.Models.PeriodicTaxProcessing,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.PrepareForMapping(System.Guid,TaxHub.CoreServices.Acl.Payment.PayView,System.Boolean,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.GetCacheKeys(TaxHub.Models.PeriodicTaxProcessing)">
            <summary>
            This creates an Array of Cachekeys used for revocation.
            </summary>
            <param name="periodicTaxProcessing"> The periodic tax processing.</param>
            <returns>It returns an array of string </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxProcessingService.FindAllBetweenPerControlsGetOnlyIdAndPerControl(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PeriodicTaxInstanceService">
            <summary>
            PeriodicPeriodicTaxInstance service implementation. (IMPORT_PAYROLL)
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.EventInstanceCreated">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.#ctor(TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IClientService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PeriodicTaxInstanceService"/> class.
            </summary>
            <param name="periodicTaxInstanceRepository">Periodic Tax Instance Repository</param>
            <param name="domainService">Domain service</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
            <param name="clientService">The client service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.InitializeNew(TaxHub.Models.PeriodicTaxInstance)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.FindOne(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.FindOne(System.String,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.FindAll(System.String,System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.FindByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.UpdateToAssembledStatus(TaxHub.Models.PeriodicTaxInstance,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.UpdateToCollectionNotRequiredAssemblyStatus(TaxHub.Models.PeriodicTaxInstance,System.Int32,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.FindAllCompanyIds(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.Count(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.Count(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.UpdateYtdAndQtdValues(TaxHub.Models.PeriodicTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.UpdateStatusAndMarkReady(TaxHub.Models.PeriodicTaxInstance,System.String,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.UpdateAllPeriodicTaxInstancesPrePaidValues(TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.RecalculateAllPeriodicTaxInstancesYtdAndQtdValues(TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.UpdateLiabilityId(System.Guid,TaxHub.Models.PeriodicTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.Reverse(System.Guid,System.Int32,System.Collections.Generic.IEnumerable{System.Int32},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.DeleteByPayrollInstanceId(System.Guid,System.Guid,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.ComputeYtd(System.Collections.Generic.IEnumerable{TaxHub.Models.Dto.TaxUnitPayDate})">
            <summary>
            Computes the Year to Date value.
            </summary>
            <param name="taxUnitsWithPayDate">The tax units with pay date.</param>
            <returns>The accumulated value for the YTD</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.ComputeQtd(System.Collections.Generic.IEnumerable{TaxHub.Models.Dto.TaxUnitPayDate},System.DateTime)">
            <summary>
            Computes the QTD value.
            </summary>
            <param name="taxUnitsWithPayDate">The tax units with pay date.</param>
            <param name="date">Date in the quarter to be computed.</param>
            <returns>
            The accumulated value of the QTD
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.RequestAssembly(System.Collections.Generic.IEnumerable{System.Int32},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            request assembly of liability for each periodic tax instance
            </summary>
            <param name="importPayrollIds">This parameter indicates which periodic tax instances to assemble.</param>
            <param name="eventDataParams">The event data parameters.</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>
            update result
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.ResolveHistory(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns the event history
            </summary>
            <param name="tenantId">tenantId</param>
            <param name="periodicTaxInstanceId">periodicTaxInstanceId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>HistoryEvent collection</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.FindAllHistory(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Event history
            </summary>
            <param name="tenantId">tenantId</param>
            <param name="periodicTaxInstanceId">periodicTaxInstanceId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Returns the event history with all details</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.FindAllHistory(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Event history
            </summary>
            <param name="periodicTaxInstanceId">periodicTaxInstanceId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Returns the event history with all details</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.GetPeriodicTaxInstancesExtended(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.GetPeriodicTaxInstancesExtendedCount(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.GetPeriodicTaxInstancesExtendedExceptions(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.GetCountByTenant(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all periodic tax instances by payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The count of all periodic tax instances by tenantId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.HasPayrollForClient(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PeriodicTaxInstanceService.PublishCreateFinishedEvent(TaxHub.Models.PeriodicTaxInstance,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.InfoProcessedPeriodicInstances">
            <summary>
            Encapsulates the result of processing a batch of periodic tax instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.InfoProcessedPeriodicInstances.Total">
            <summary>
            Total of operations
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.InfoProcessedPeriodicInstances.SuccessTotal">
            <summary>
            Total of succesful operations
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ScheduleService">
            <summary>
            ScheduleService
            </summary>
            <seealso cref="T:TaxHub.CoreServices.Application.IScheduleService" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ScheduleService.#ctor(TaxHub.CoreServices.DataAccess.IScheduleRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.ScheduleService"/> class.
            </summary>
            <param name="repository">Repository</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.ScheduleService.EventInstanceCreated">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.ScheduleService.EventInstanceDeleted">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ScheduleService.InitializeNew(TaxHub.Models.Schedule)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ScheduleService.FindOne(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ScheduleService.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ScheduleService.Contains(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ScheduleService.IsDueDatePriorHolidaysOrWeekends(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.ScheduleService.UpdatePaymentFrequencyCategory(TaxHub.Models.Schedule,TaxHub.Models.Commands.ScheduleUpdateCommand,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.SUIRateImportService">
            <summary>
            Implements SUIRateImportService interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SUIRateImportService.#ctor(TaxHub.CoreServices.Application.IAgencyService,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.IClientAgencyService,TaxHub.CoreServices.Application.IClientNoteService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.SUIRateImportService"/> class.
            </summary>
            <param name="agencyService">The agency service.</param>
            <param name="clientService">The client service.</param>
            <param name="clientAgencyService">The clientAgency service.</param>
            <param name="clientNoteService">The clientNote service.</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SUIRateImportService.ImportRates(TaxHub.Models.ImportSUIRateModel,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            Validates the data for the SUIImport process
            </summary>
            <param name="suiModelList">List of ImpSUIRate models to validate</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>ImpSUIRateSummary with the validation results</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SUIRateImportService.SaveToUte(TaxHub.Models.ClientAgency,System.Nullable{System.Double},System.Nullable{System.DateTime},TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <summary>
            This method will save the new rate into UTE DB. It will also create a new note if the rate was saved successfully.
            </summary>
            <param name="clientAgency">The client agency object</param>
            <param name="rate">The rate value</param>
            <param name="effectiveDate">The effective date value</param>
            <param name="eventDataParams">The event data parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns true if the rate was updated and note created. Otherwise will return false</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SUIRateImportService.FormatFEIN(TaxHub.Models.ImpSUIRate,System.Int32,System.Text.StringBuilder)">
            <summary>
            Validates that the input fein can be formatted
            </summary>
            <param name="suiModel">The Import SUI Rate Model</param>
            <param name="rowNumber">The number of the current row that is being processed (For logging pourposes)</param>
            <param name="sbErrors"> String Builder for logging all the validation errors</param>
            <returns>If the fein can be formatted it will return the formatted fein, otherwise it will return an empty string</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SUIRateImportService.RemoveFEINPunctuation(System.String)">
            <summary>
            Removes the punctiation characters from the fein provided
            </summary>
            <param name="fein">The fein</param>
            <returns>Returns the fein without the punctiation characters</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SUIRateImportService.ValidRate(TaxHub.Models.ImpSUIRate,System.Int32,System.Text.StringBuilder)">
            <summary>
            Check if the rate is valid
            </summary>
            <param name="suiModel">The import SUI rate model</param>
            <param name="rowNumber">The number of the current row that is being processed (For logging pourposes)</param>
            <param name="sbErrors"> String Builder for logging all the validation errors</param>
            <returns>True if the rate is valid, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SUIRateImportService.GetValidEffectiveDate(TaxHub.Models.ImpSUIRate,System.DateTime,System.Int32,System.Text.StringBuilder)">
            <summary>
            Validates that the effective date has the correct format
            </summary>
            <param name="suiModel">The import SUI rate model</param>
            <param name="defaultEffectiveDate">The default effective date. This value will be used if no effective date is provided in the suiModel parameter</param>
            <param name="rowNumber">The number of the current row that is being processed (For logging pourposes)</param>
            <param name="sbErrors"> String Builder for logging all the validation errors</param>
            <returns>True if the date has the correct format, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SUIRateImportService.ValidAgency(TaxHub.Models.ImpSUIRate,System.Int32,System.Guid,System.Threading.CancellationToken,System.Text.StringBuilder)">
            <summary>
            Validate that the input agency exists
            </summary>
            <param name="suiModel">The import SUI rate model</param>
            <param name="rowNumber">The number of the current row that is being processed (For logging pourposes)</param>
            <param name="correlationId">The correlation id</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="sbErrors"> String Builder for logging all the validation errors</param>
            <returns>Returns true if the agency was found, false otherwise</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.ISystemManagementService">
            <summary>
            The service that provides ability to manage the TaxHub.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ISystemManagementService.RequeueFailedToConsumeEvent(System.Guid,System.Guid,TaxHub.Common.Security.UserPrincipal)">
            <summary>
            Method re-queues failed to consume event into the message queue, assuming that all preconditions were verified by the command sender.
            </summary>
            <param name="id">The domain event data ID.</param>
            <param name="correlationId">The correlation ID.</param>
            <param name="userPrincipal">The user principal.</param>
            <returns>True if success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ISystemManagementService.RepublishFailedToPublishEvent(System.Guid,System.Guid,TaxHub.Common.Security.UserPrincipal)">
            <summary>
            Method re-queues failed to publish event into the message queue, assuming that all preconditions were verified by the command sender.
            </summary>
            <param name="id">The domain event data ID.</param>
            <param name="correlationId">The correlation ID.</param>
            <param name="userPrincipal">The user principal.</param>
            <returns>True if success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ISystemManagementService.RequestReplay(TaxHub.Messaging.Replay.AggregateEventsReplayFilter,System.Guid,TaxHub.Common.Security.UserPrincipal)">
            <summary>
            Method raises "payment.service.replay-requested" message for a given event.
            </summary>
            <param name="replayFilter">The replay filter.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="userPrincipal">The user principal.</param>
            <returns>True if the message was published successfully.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.SystemManagementService">
            <summary>
            The service that provides ability to manage the TaxHub.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SystemManagementService.#ctor(TaxHub.Messaging.IMessageHub,TaxHub.Common.EventStore.IQueryableEventStore,TaxHub.Common.EventStore.IEventStore,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Application service provides management capabilities to the TaxHub.
            </summary>
            <param name="messageHub">The message hub.</param>
            <param name="queryableEventStore">The queryable event store.</param>
            <param name="eventStore">The event store.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SystemManagementService.RequeueFailedToConsumeEvent(System.Guid,System.Guid,TaxHub.Common.Security.UserPrincipal)">
            <summary>
            Method re-queues failed to consume event into the message queue, assuming that all preconditions were verified by the command sender.
            </summary>
            <param name="id">The domain event data ID.</param>
            <param name="correlationId">The correlation ID.</param>
            <param name="userPrincipal">The user principal.</param>
            <returns>True if success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SystemManagementService.RepublishFailedToPublishEvent(System.Guid,System.Guid,TaxHub.Common.Security.UserPrincipal)">
            <summary>
            Method re-queues failed to publish event into the message queue, assuming that all preconditions were verified by the command sender.
            </summary>
            <param name="id">The domain event data ID.</param>
            <param name="correlationId">The correlation ID.</param>
            <param name="userPrincipal">The user principal.</param>
            <returns>True if success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.SystemManagementService.RequestReplay(TaxHub.Messaging.Replay.AggregateEventsReplayFilter,System.Guid,TaxHub.Common.Security.UserPrincipal)">
            <summary>
            Method raises "payment.service.replay-requested" message for a given event.
            </summary>
            <param name="replayFilter">The replay filter.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="userPrincipal">The user principal.</param>
            <returns>True if the message was published successfully.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.TaxCodeService">
            <summary>
            Service layer for tax code
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeService.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeRepository,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger,SmartHub.Hosting.Caching.IObjectCacheManager,TaxHub.Messaging.ICacheRevocationService,TaxHub.CoreServices.DataAccess.IAgencyRepository,TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PaymentService" /> class.
            </summary>
            <param name="repository">Repository</param>
            <param name="messageHub">The message hub.</param>
            <param name="logger">The application logger.</param>
            <param name="objectCacheManager">The application logger.</param>
            <param name="cacheRevocationService">The application logger.</param>
            <param name="agencyRepository">The agency repository.</param>
            <param name="ultiproTaxCodeMappingCacheService">The ultipro mappings.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeService.LookupOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeService.ReplayAggregateEvents(TaxHub.Common.EventStore.IAggregateSnapshotFilter,System.Func{TaxHub.Common.Models.ISnapshotable,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Raise observed events for TaxCodes described by the filter.
            </summary>
            <param name="eventsFilter">Filter for DB query.</param>
            <param name="func">Action to apply.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeService.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeService.Delete(TaxHub.Models.TaxCode,TaxHub.Shared.Services.EventDataParams,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeService.FindAllByStateTransactionAndEntityCode(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Find all records by StateCode, TransactionCode and EntityCode.
            </summary>
            <param name="stateCode">The state code.</param>
            <param name="transactionCode">The transaction code.</param>
            <param name="entityCode">The entity code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All records by StateCode, TransactionCode and EntityCode.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeService.LookupOneByEntityStateAndLocalCode(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeService.FindAllByPayee(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeService.GetCacheKeys(TaxHub.Models.TaxCode)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PreparerService">
            <summary>
            Service for the Preparer Aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PreparerService.#ctor(TaxHub.CoreServices.DataAccess.IPreparerRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PreparerService"/> class.
            </summary>
            <param name="repository">service</param>
            <param name="domainService">domain service</param>
            <param name="messageHub">interface for messager</param>
            <param name="logger">logger for log messages</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PreparerService.InitializeNew(TaxHub.Models.Preparer)">
            <summary>
            Initialize a new Preparer
            </summary>
            <param name="preparer">New Preparer</param>
            <returns>Account with information included.</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PreparerService.EventInstanceCreated">
            <summary>
            Event creation
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PreparerService.EventInstanceDeleted">
            <summary>
            Event deletion 
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.TaxCodeServiceCache">
            <summary>
            The cache for the tax code service.
            </summary>
            <seealso cref="T:SmartHub.Hosting.Caching.CacheUtilizerServiceBase" />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeServiceCache.#ctor(SmartHub.Hosting.Caching.IObjectCacheManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.TaxCodeServiceCache"/> class.
            </summary>
            <param name="cacheManager">Cache manager.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeServiceCache.GetFromCache(System.String)">
            <summary>
            Gets from cache.
            </summary>
            <param name="key">The key.</param>
            <returns>The tax code from cache.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxCodeServiceCache.Add(System.String,TaxHub.Models.TaxCode)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="taxCode">The tax code.</param>
            <returns>True if added successfully.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.TaxQuarterlyTaxProcessingMetricsService">
            <summary>
            An instance of <see cref="T:TaxHub.CoreServices.Application.ITaxQuarterlyTaxProcessingMetricsService"/>.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxQuarterlyTaxProcessingMetricsService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.DataAccess.IReadOnlyObject{TaxHub.CoreServices.DataAccess.IQuarterEndRepository},SmartHub.Metrics.IAppMetricsFactory)">
            <summary>
            The constructor.
            </summary>
            <param name="appLogger">An instance of the <see cref="T:TaxHub.Common.Logging.IAppLogger"/>.</param>
            <param name="quarterEndRepository">An read-only instance of <see cref="T:TaxHub.CoreServices.DataAccess.IQuarterEndRepository"/>.</param>
            <param name="appMetricsFactory">An instance of the <see cref="T:SmartHub.Metrics.IAppMetricsFactory"/>.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxQuarterlyTaxProcessingMetricsService.ProcessCloseLedgerMetrics(System.Int32,System.Int32,System.Int32,System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxQuarterlyTaxProcessingMetricsService.ProcessQuarterEndPostedMetrics(System.Int32,System.Int32,System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.TaxQuarterlyTaxProcessingMetricsService.ProcessQuarterEndStatusMetrics(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.ITenantManagementService">
            <summary>
            The tenant management service interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantManagementService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a single tenant instance based on the tenantId.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.ITenantManagementService.UpdateIntegrationData(System.Guid,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.TenantIntegrationUpdatedEventData,System.Threading.CancellationToken)">
            <summary>
            Updates the integration data.
            </summary>
            <param name="tenantId">The tenant.</param>
            <param name="eventData">The event data.</param>
            <param name="tenantIntegrationUpdatedEventData">The tenant integration updated event data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            True if updating integration data and creating DED filters succeeds, otherwise false
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.TenantManagementService">
            <summary>
            This class implements the tenant management service.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.TenantManagementService.Repository">
            <summary>
            Gets the repository.
            </summary>
            <value>
            The repository.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Application.TenantManagementService.MessageHub">
            <summary>
            Gets the Message Hub
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.TenantManagementService.DomainService">
            <summary>
            Gets the domain service.
            </summary>
            <value>
            The domain service.
            </value>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantManagementService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ITenantService,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Application.IDedService,TaxHub.Hosting.Runtime.IDomainService,TaxHub.CoreServices.Acl.Tenant.ITenantMapper,TaxHub.Common.Configuration.IFeatureToggleConfiguration,TaxHub.CoreServices.Acl.Payment.IHubTenantServiceAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.TenantManagementService" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="tenantService">The tenant service.</param>
            <param name="messageHub">The message hub.</param>
            <param name="dedService">The ded service.</param>
            <param name="domainService">The domain service.</param>
            <param name="tenantMapper">The tenant mapper.</param>
            <param name="featureToggleConfiguration">The feature toggle configuration.</param>
            <param name="hubTenantServiceAdapter">The hub tenant service adapter.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantManagementService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a single tenant instance based on the tenantId.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.TenantManagementService.UpdateIntegrationData(System.Guid,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.TenantIntegrationUpdatedEventData,System.Threading.CancellationToken)">
            <summary>
            Updates the integration data.
            </summary>
            <param name="tenantId">Tenant id</param>
            <param name="eventData">The event data.</param>
            <param name="tenantIntegrationUpdatedEventData">The tenant integration updated event data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            True if updating integration data and creating DED filters succeeds, otherwise false
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.MailSheetService">
            <inheritdoc/>
            <summary>
            Class to generate the mail sheet based on atemplate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MailSheetService.#ctor(TaxHub.CoreServices.Application.IPDFFormService)">
            <summary>
            Constructor override that allows to specify a custom helper
            </summary>
            <param name="ipdfFormService">The pdf form service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MailSheetService.Generate(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MailSheetService.Generate(System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.MailSheetService.Generate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService">
            <summary>
            Interface for ultpro tax code mapping cache.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService.UltiProToUteMap">
            <summary>
            Return cached utiPro to Ute tax code mappings.
            </summary>
            <returns>Returns a list of ultipro taxcode mappings. </returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService.UltiProTaxcodeMappings">
            <summary>
            Return cached utiPro to Ute tax code mappings.
            </summary>
            <returns>Returns a list of ultipro taxcode mappings. </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService.UltiproToUteMapByClientId(System.String)">
            <summary>
            Find the UltiproToUte mappings for a specific clientId
            </summary>
            <param name="clientId">the clientId</param>
            <returns>Returns the UltiproToUte mappings for the given clientId </returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService.TaxIdToUteMap">
            <summary>
            Finds the TaxIdToUte mappings grouped by tax id.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService.Refresh">
            <summary>
            Refresh the mapping dictionary.
            </summary>
            <returns>Returns true if was successfully refreshed, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService.GetImportCodes">
            <summary>
            Gets all the import codes.
            </summary>
            <returns>Returns the list of import codes grouped by taxId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService.GetImportCodesByPayee">
            <summary>
            Gets all the import codes by payee id.
            </summary>
            <returns>Returns the list of import codes grouped by paye.</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService.TaxIdToUteMapByClient">
            <summary>
            Find the TaxIdToUte mappings grouped by taxId and client id
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService.RtsToUteMapByClientId(System.String)">
            <summary>
            Find the Rts to ute mappings for a specific clientId
            </summary>
            <param name="clientId">the clientId</param>
            <returns>Returns the rts to ute tax code mappings for the given clientId </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService.GetUteTaxCode(System.Int32)">
            <summary>
            Find the UteTaxCode from the taxId
            </summary>
            <param name="taxId">the taxId to look u</param>
            <returns>Returns the UteTaxCode from the taxId</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService">
            <summary>
            Class that implements ultiro tax code matting cache.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.#ctor(TaxHub.CoreServices.DataAccess.IUltiproTaxCodeMappingRepository,TaxHub.Common.Configuration.ISystemConfiguration,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService"/> class.
            </summary>
            <param name="mappingRepo">The UltiProToUte mapping repo</param>
            <param name="configuration">The system configuration</param>
            <param name="logger">The logger</param>
            <param name="featureToggleConfiguration">The FeatureToggle</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.UltiproToUteMapByClientId(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.RtsToUteMapByClientId(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.GetUteTaxCode(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.UltiProToUteMap">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.TaxIdToUteMap">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.UltiProTaxcodeMappings">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.TaxIdToUteMapByClient">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.GetImportCodes">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.GetImportCodesByPayee">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.TimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Timer Elapsed
            </summary>
            <param name="sender">object</param>
            <param name="e">ElapsedEventArgs</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.Refresh">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.UltiproTaxCodeMappingCacheService.WaitIfLoading">
            <summary>
            Waits for the initial load to happen withing the initial Load timeout interval.
            </summary>
            <returns>Task</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.DuplicatedTaxCodeMapCorrection">
            <summary>
            Defines a map correction to eliminate duplicated tax codes.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.DuplicatedTaxCodeMapCorrection.#ctor(TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Application.DuplicatedTaxCodeMapCorrection"/>
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.FailedPaysMigrationService">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.FailedPaysMigrationService.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FailedPaysMigrationService.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.EventStore.IQueryableEventStore,TaxHub.Common.EventStore.IEventStore,TaxHub.CoreServices.Application.IPeriodicTaxProcessingService,TaxHub.CoreServices.Application.IPayTrackingService,TaxHub.CoreServices.Application.IPayMappingService,TaxHub.CoreServices.Application.IMappedTaxPayService,TaxHub.CoreServices.Application.ITenantService)">
            <summary>
            Constructor
            </summary>
            <param name="appLogger">IAppLogger</param>
            <param name="queryableEventStore">IQueryableEventStore</param>
            <param name="eventStore">IEventStore</param>
            <param name="periodicTaxProcessingService">IPeriodicTaxProcessingService</param>
            <param name="payTrackingService">IPayTrackingService</param>
            <param name="payMappingService">IPayMappingService</param>
            <param name="mappedTaxPayService">IMappedTaxPayService</param>
            <param name="tenantService">ITenantService</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.FailedPaysMigrationService.RetrieveAndConsumeFailedEvents(TaxHub.Shared.Services.EventDataParams)">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.Application.FailedPaysMigrationService.TemporaryDomainEventData.Body">
            <summary>
            Gets or sets the details of event. 
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IMapCorrection">
            <summary>
            Defines a map correction
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.IMapCorrection.Order">
            <summary>
            Gets or sets the order of execution
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IMapCorrection.Apply(TaxHub.Models.MappedTaxPay)">
            <summary>
            Applies the map correction to the mapped tax pay.
            </summary>
            <param name="mappedTaxPay">The mapped tax pay.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.InvalidTaxCodeForTaxIdMapCorrection">
            <summary>
            Defines a map correction to ensure the right tax code for each tax id.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.InvalidTaxCodeForTaxIdMapCorrection.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IUltiproTaxCodeMappingCacheService)">
            <summary>
            Initializes a new intance of <see cref="T:TaxHub.CoreServices.Application.InvalidTaxCodeForTaxIdMapCorrection"/>
            </summary>
            <param name="logger">The logger.</param>
            <param name="ultiproTaxCodeMappingCache">The tax code mapping cache service.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Application.InvalidTaxCodeForTaxIdMapCorrection.Order">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.InvalidTaxCodeForTaxIdMapCorrection.Apply(TaxHub.Models.MappedTaxPay)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Application.PDFFormService">
            <inheritdoc/>
            <summary>
            Class to generate forms based on PDF templates
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PDFFormService.#ctor(TaxHub.Common.Pdf.IPdfHelper,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor override that allows to specify a custom PDF helper
            </summary>
            <param name="pdfHelper">An object of a class that implements the IPDFHelper interface</param>
            <param name="logger">An object of a class that implements the IAppLogger interface</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PDFFormService.FillAndGenerate(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PDFFormService.MergePdfs(System.Collections.Generic.List{TaxHub.Hosting.Runtime.TemporaryStreamResult},System.String)">
            <summary>
            This method creates a PDF with the provided list of byte[]
            </summary>
            <param name="listOfPdfs">The list to be used to create the PDF</param>
            <param name="collatedFileName">The name of the PDF to create</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PDFFormService.SetTemporaryStreamResultFromPdfInBytes(System.Byte[],System.String)">
            <summary>
            Reads a byte array and saves it into a temporary stream result
            </summary>
            <param name="incomingStream">The byte array containing the PDF</param>
            <param name="fileName">The file name to use</param>
            <returns>The temporary stream result with the loaded byte array</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PDFFormService.GetPdfInBytesFromTemporaryStreamResult(TaxHub.Hosting.Runtime.TemporaryStreamResult)">
            <summary>
            Read a temporary stream result into a byte array
            </summary>
            <param name="temporaryResult">The temporary stream result with the data to read</param>
            <returns>The byte array with the data read</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PDFFormService.GetNumberOfPagesInPdf(TaxHub.Hosting.Runtime.TemporaryStreamResult)">
            <summary>
            Get the number of pages for this temporary stream result as a PDF
            </summary>
            <param name="documentTemporaryStreamResult">The temporary stream result</param>
            <returns>The number of pages for this temporary stream result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PDFFormService.AddWaterMark(System.Byte[],System.String)">
            <summary>
            Add water mark to the byte[]
            </summary>
            <param name="currentPdf">The current PDF</param>
            <param name="mark">The mark to add to the PDF</param>
            <returns>The updated PDF</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PaymentInfo">
            <summary>
            Info needed for payments in Boki app
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentInfo.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentInfo.TenantId">
            <summary>
            Tenant id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentInfo.CompanyId">
            <summary>
            Client id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentInfo.CompanyCode">
            <summary>
            Company code
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentInfo.AgencyState">
            <summary>
            State
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentInfo.Agency">
            <summary>
            Agency
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentInfo.AgencyDescription">
            <summary>
            Agency description
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentInfo.PaymentId">
            <summary>
            Payment id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentInfo.AmountAfterCredit">
            <summary>
            Amount after credit applied to the payment
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentInfo.CreditLiabilityId">
            <summary>
            The credit liability Id associated with the payment if the payment recevied a credit on depositpayment step
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentInfo.RefundLiabilityId">
            <summary>
            The refund liability Id associated with the payment if the payment was voided
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PaymentInfo.AppliedCreditsThatReducedPaymentLiabilityToBeCollected">
            <summary>
            The list of credits that was applied to a payment and which reduced the payment's liability to be collected
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.CreditTrackingInfo">
            <summary>
            Info needed for credits applied to payments in Boki app
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CreditTrackingInfo.Id">
            <summary>
            The unique Credit Tracking Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CreditTrackingInfo.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CreditTrackingInfo.AgencyState">
            <summary>
            State
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CreditTrackingInfo.Agency">
            <summary>
            Agency
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CreditTrackingInfo.AgencyDescription">
            <summary>
            Agency description
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CreditTrackingInfo.PaymentId">
            <summary>
            The unique Guid Payment id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Application.CreditTrackingInfo.PaymentIntId">
            <summary>
            Non-transmitted property (for internal use only)
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PaymentDueDateKey">
            <summary>
            Value object needed to provide the structure for dictionary keys in order to cache calculated payment due date results.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PaymentFrequencyCategoryKey">
            <summary>
            Value object needed to provide the structure for dictionary keys in order to cache calculated payment frequency category results.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PaymentAction">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentAction.#ctor(TaxHub.Models.Payment,System.Action{TaxHub.Models.Payment})">
            <summary>
            Payment action constructor
            </summary>
            <param name="payment">The payment aggregate</param>
            <param name="action">The payment behavior action.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PaymentAction.#ctor(TaxHub.Models.Payment,System.Func{TaxHub.Models.Payment,System.Threading.Tasks.Task})">
            <summary>
            Payment action constructor.
            </summary>
            <param name="payment">The payment aggregate</param>
            <param name="action">The payment behavior action.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Application.PreparerCheckService">
            <summary>
            Service for the Preparer Check Aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PreparerCheckService.#ctor(TaxHub.CoreServices.DataAccess.IPreparerCheckRepository,TaxHub.Hosting.Runtime.IDomainService,TaxHub.Messaging.IMessageHub,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Application.PreparerCheckService"/> class.
            </summary>
            <param name="repository">service</param>
            <param name="domainService">domain service</param>
            <param name="messageHub">interface for messager</param>
            <param name="logger">logger for log messages</param>
        </member>
        <member name="M:TaxHub.CoreServices.Application.PreparerCheckService.InitializeNew(TaxHub.Models.PreparerCheck)">
            <summary>
            Initialize a new PreparerCheck
            </summary>
            <param name="preparerCheck">New Preparer Check</param>
            <returns>Account with information included.</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Application.PreparerCheckService.EventInstanceDeleted">
            <summary>
            Event deletion 
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Application.IPaymentAggregationService">
            <summary>
            Payment Aggregation Service
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Application.IPaymentAggregationService.AggregatePayments(TaxHub.Models.Commands.PaymentsCreateCommand,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Aggregates Payments
            </summary>
            <param name="paymentsCreateCommand">Payment Create Command</param>
            <param name="correlationId">Correlation Id</param>
            <param name="userid">User Id</param>
            <param name="userName">Username</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns a list of aggregated payments</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.YearEndValidationsController">
            <summary>
            Api controller for Year End validations
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YearEndValidationsController.#ctor(TaxHub.CoreServices.Application.YearEnd.Process.EmployeeValidations.IYearEndEmployeeValidationService)">
            <summary>
            Initializes an instance of the controller
            </summary>
            <param name="yearEndValidationService">The year end employee validation service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YearEndValidationsController.GetAppliedForEmployees(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves employees that result of appying AppliedFor validation.
            </summary>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The folder path.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.ClientV2Controller">
            <summary>
            The API controller providing client related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientV2Controller.#ctor(TaxHub.CoreServices.Application.IClientService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.ClientV2Controller"/> class.
            </summary>
            <param name="clientService">The client domain service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientV2Controller.Get(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns specific client by its TenantId and ClientId.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="clientId">The clientId (string).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with pay data.</returns>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The client not found.</response>
            <remarks>Required entitlements: ViewClient</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientV2Controller.GetMany(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of clients.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of periodic tax units.</returns>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <remarks>Required entitlements: ViewClient</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientV2Controller.FindAllMatching(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            This method returns a list of Clients matching a given search pattern.
            The pattern is matched against the ClientId and LegalName fields.
            If the pattern is a valid Guid, it will be matched against the aggregate Id field.
            If tenantId is not empty, it will also be included in the query filter.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="pattern">The search pattern.</param>
            <param name="top">The max number of results to display.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of matching clients.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.IngestPriorQuarter.PriorQuarterQrfProcessingController">
            <summary>
            The Prior Quarter QRF Processing Controller
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.IngestPriorQuarter.PriorQuarterQrfProcessingController.#ctor(TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterQrfProcessingService,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.IngestPriorQuarter.PriorQuarterQrfProcessingController"/> class.
            </summary>
            <param name="priorQuarterQrfProcessingService">The prior quarter qrf processing service.</param>
            <param name="appLogger">The app logger.</param>
            <param name="metricsBuilder">The metrics builder.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.IngestPriorQuarter.PriorQuarterQrfProcessingController.PostAsync(System.Threading.CancellationToken)">
            <summary>
            Create a prior quarter qrf processing by uploading a file.
            </summary>
            <param name="cancellationToken">token</param>
            <returns>if created, a PriorQuarterQrfProcessing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.IngestPriorQuarter.PriorQuarterQrfProcessingController.GetAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get a prior quarter qrf processing by id.
            </summary>
            <param name="priorQuarterQrfProcessingId">The prior quarter qrf processing id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>If found, a PriorQuarterQrfProcessing.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.ClientAgencyImportController">
            <summary>
            The api controller for client agency import
            </summary>
            <seealso cref="T:System.Web.Http.ApiController" />
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientAgencyImportController.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get ClientAgencyImportRequest
            </summary>
            <param name="pageParams">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An HTTP Response message containing the file contents.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientAgencyImportController.Count(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the total number of clientAgencyImportRequests with teh specified Filters.
            </summary>
            <param name="filterParams">The filter parameters to apply.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the JSON with count+number value pair.</returns>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientAgencyImportController.Get(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get ClientAgencyImportRequest
            </summary>
            <param name="id">The file identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An HTTP Response message containing the file contents.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientAgencyImportController.GetFile(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get ClientAgencyImportRequest file contents from Object Storage
            </summary>
            <param name="fileId">The file identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An HTTP Response message containing the file contents.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientAgencyImportController.Create(System.Threading.CancellationToken)">
            <summary>
            Create ClientAgencyImport Request
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An HTTP Response message representing the result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientAgencyImportController.ResolveImportStatus(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Create ClientAgencyImport Request
            </summary>
            <param name="id">The file identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The results on updating the status to Resolved.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.ExportZeroEftTrackerController">
            <summary>
            The Api Controller for the ExportZeroEftTracker/ExportZeroEftTrackerDistribution aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ExportZeroEftTrackerController.#ctor(TaxHub.CoreServices.Application.IExportZeroEftTrackerService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.ExportZeroEftTrackerController"/>
            </summary>
            <param name="exportZeroEftTrackerService">The Export Zero Eft Tracker Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ExportZeroEftTrackerController.ReleaseExportZeroEftTrackerInProgress(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Release export zero eft tracker in progress.
            </summary>
            <param name="id">identifier</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an HttpResponseMessage.</returns>
            <response code="200">Success.</response>
            <response code="400">Bad request.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="500">Service failure.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.MappedTaxPayCleanupConfigController.#ctor(TaxHub.CoreServices.Application.IMappedTaxPayCleanupConfigService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.MappedTaxPayCleanupConfigController" /> class.
            </summary>
            <param name="mappedTaxPayCleanupConfigService">The service</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.MappedTaxPayCleanupConfigController.UpdateServiceEnabled(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates the serviceEnabled flag
            </summary>
            <param name="serviceEnabled">The flag</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An Http Reponse</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.MappedTaxPayCleanupConfigController.UpdateServiceRunning(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates the serviceRunning flag
            </summary>
            <param name="serviceRunning">The flag</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An Http Reponse</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.MappedTaxPayCleanupConfigController.UpdateServiceRunning(System.String,System.Threading.CancellationToken)">
            <summary>
            Updates the last processed tenant alias
            </summary>
            <param name="lastProcessedTenantAlias">The last processed tenant alias</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An Http Reponse</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YearEndTaxProcessingController.RequestSyncPostCompleteYe(TaxHub.Models.Commands.YearEndPostCompleteCommand,System.Threading.CancellationToken)">
            <summary>
            Requests Post Complete YE
            </summary>
            <param name="command">The Year end post complete command.</param>
            <param name="cancellationToken">The Cancellation Token.</param>
            <returns>The response.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YearEndTaxProcessingController.UpdatePackageStatus(System.Int32,TaxHub.Models.YearEnd.Commands.UpdatePackageStatusCommand,System.Threading.CancellationToken)">
            <summary>
            Updates a Package generation Status.
            </summary>
            <param name="id">The id of the instance</param>
            <param name="updatePackageStatusCommand"> updatePackageStatusCommand model</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Returns Api result</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.YEProcessingController">
            <summary>
            The API controller providing year end ingestion file service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YEProcessingController.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.YEProcessingController" /> class.
            </summary>
            <param name="yeProcessingService">The ye processing service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YEProcessingController.GetAsync(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method returns a YEIngestionFileCollection object for the specified client and tax year.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token object.</param>
            <returns>A YEIngestionFileCollection object for the specified client and tax year.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YEProcessingController.GetFileLogAsync(System.Guid,System.String,System.Int32,System.String,TaxHub.Models.InboundFileType,System.Threading.CancellationToken)">
            <summary>
            Gets the file log.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="agency">The agency.</param>
            <param name="fileType">Type of the file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The file log for the specified file id.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YEProcessingController.VoidFilesAsync(System.Guid,System.String,System.Int32,TaxHub.Models.YearEndIngestion.YEFileMetadata[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Voids the files asynchronous.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="yeFilesMetadata">The ye files metadata.</param>
            <param name="ignoreValidation">if set to <c>true</c> [ignore validation].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The result of the operation.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The operation result was unexpected.</exception>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YEProcessingController.ForceYeFilesAsync(System.Guid,System.String,System.Int32,TaxHub.Models.YearEndIngestion.YEFileMetadata[],System.Threading.CancellationToken)">
            <summary>
            Updates the status of the given YE files to Forced.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="yeFilesMetadata">The list of YE file metadata.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>HTTP response message including the status code and data from the request.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.ClientAgencyController">
            <summary>
            The API controller providing Client Agency related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientAgencyController.#ctor(TaxHub.CoreServices.Application.IClientAgencyService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.ClientAgencyController"/> class.
            </summary>
            <param name="clientAgencyService">The ClientAgency domain Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientAgencyController.PostAsync(TaxHub.Models.ClientAgency,System.Threading.CancellationToken)">
            <summary>
            Inserts a Client Agency
            </summary>
            <param name="clientAgency"> Client Agency model</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Returns the Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientAgencyController.Putasync(TaxHub.Models.ClientAgency,System.Threading.CancellationToken)">
            <summary>
            Updates a Client Agency.
            </summary>
            <param name="clientAgencyCommand"> Client Parent child model</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Returns Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientAgencyController.DeleteClientAgency(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the ClientParentChild Relation
            </summary>
            <param name="clientId"> Child client id</param>
            <param name="payeeId"> payeeId</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientAgencyController.GetAllAsync(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
             <summary>
             Get all the values. If lastChange is provided, then only changes after lastChange are returned
             </summary>
             <param name="lastChange">
             Base64 String representation of a byte[]. This value is same we have in table AgencyId.LastChange
             The type in SQL is RowVersion that maps to byte[] in .net.
            
             If no value is provided for this parameter then everything is returned.
             </param>
             <param name="pagedDataParameters">Pagination parameters.</param>
             <param name="cancellationToken">Cancellation token.</param>
             <returns>The data for ClientAgency</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientAgencyController.GetAgenciesForClientAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all agencies for a client.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The data for ClientAgency</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.DepositScheduleController">
            <summary>
            The API controller providing Deposit Schedule related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.DepositScheduleController.#ctor(TaxHub.CoreServices.Application.IDepositScheduleService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.DepositScheduleController"/> class.
            </summary>
            <param name="depositScheduleService">The deposit schedule service.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.DepositScheduleController.IsScheduleIdExtended(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            IsScheduleIdExtendedForCurrentYear
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.DepositScheduleController.PutAsync(TaxHub.Models.DepositSchedule,System.Threading.CancellationToken)">
            <summary>
            UPdates schedule due date and/or notes
            </summary>
            <param name="depositScheduleCommand"> Deposit schedule Command</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.DepositScheduleController.CreateDepositSchedule(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            CreateDepositSchedule
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.Filing.EFilingController">
            <summary>
            Electronic file transfer controller.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.Filing.EFilingController.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Filing.IEFilingCompositeService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.Filing.EFilingController"/> class.
            </summary>
            <param name="appLogger">The app logger.</param>
            <param name="compositeEFilingService">The composite efile service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.AlertController.#ctor(TaxHub.CoreServices.Application.IAlertService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.AlertController"/> class.
            </summary>
            <param name="service">The alert domain service</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.AlertController.GetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method returns specific alert by its Id
            </summary>
            <param name="id">The alert Id</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with the named tax representative.</returns>
            <remarks>Required entitlements: ViewAlert</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The pay not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.AlertController.PutAsync(System.Int32,TaxHub.Models.Alert,System.Threading.CancellationToken)">
            <summary>
            Method updates the ntr information.
            </summary>
            <param name="id">The id of the alert to update</param>
            <param name="alert">The alert</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: UpdateAlert</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.AlertController.PostAsync(TaxHub.Models.Alert,System.Threading.CancellationToken)">
            <summary>
            Method creates a new alert
            </summary>
            <param name="alert">The alert</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: CreateAlert</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.AgencyController">
            <summary>
            The API controller providing agency related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.AgencyController.#ctor(TaxHub.CoreServices.Application.IAgencyService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.AgencyController"/> class.
            </summary>
            <param name="agencyService">The agency domain service.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.AgencyController.GetAsync(System.String,System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of agencies filtered by the state and payee pattern.
            </summary>
            <param name="state">The 2-letter state code</param>
            <param name="pattern">The patterns to search for</param>
            <param name="top">The maximum number of agencies to return</param>
            <param name="activeOnly">A flag indicating whether or not only active agencies should be returned</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of periodic tax units.</returns>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.AgencyController.GetAgencyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns Agency associated with payee identifier
            </summary>
            <param name="agencyId">The Agency identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The Http message with the agency found</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.AgencyController.UpdateCombinePayeeExceptionRules(System.String,TaxHub.Models.Commands.CombinePayeeCreditExceptionRulesUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Method in charge of handling updates for CombinePayee exceptions
            </summary>
            <param name="agencyId">The agencyId</param>
            <param name="updateCommand">The updateCommand</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.CheckController">
            <summary>
            The Api Controller for the Check/Check_Payment_Dist aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.CheckController.#ctor(TaxHub.CoreServices.Application.ICheckService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.CheckController"/>
            </summary>
            <param name="checkService">The Check Service</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.CheckController.GetCheckByCheckIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method returns check associated with check identifier
            </summary>
            <param name="checkId">The check identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the Http message with the list of identifiers</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.CheckController.FindChecksByBulkCheckId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method returns all check records associated with the bulk check identifier
            </summary>
            <param name="bulkCheckId">The bulk check identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the Http message with the list of identifiers</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.CheckController.FindCheckInfosByBulkCheckId(System.Int32,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns info objects of all check records associated with the bulk check identifier
            </summary>
            <param name="bulkCheckId">The bulk check identifier</param>
            <param name="pageParams">The paging parameters.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the Http message with the list of identifiers</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.CheckController.VoidCheck(System.Int32,TaxHub.Models.Commands.CheckVoidCommand,System.Threading.CancellationToken)">
            <summary>
            Method initiates the void process of a check and the chain of events related to it
            </summary>
            <param name="checkId">The check identifier</param>
            <param name="checkVoidCommand">The check void command</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.ClientPayrollController">
            <summary>
            The API controller providing Client Payroll related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientPayrollController.#ctor(TaxHub.CoreServices.Application.IClientPayrollService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.ClientPayrollController"/> class.
            </summary>
            <param name="clientPayrollService"> The Client Payroll Service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientPayrollController.UpdateClientId(TaxHub.Models.Commands.ClientPayrollClientUpdatedCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates Payment Status to Void.
            </summary>
            <param name="command">The command carying the version of the payment to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: VoidPayment</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.ClientParentChildController">
            <summary>
            The API controller providing Client Parent Child service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.#ctor(TaxHub.CoreServices.Application.IClientParentChildService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.ClientParentChildController"/> class.
            </summary>
            <param name="clientParentChildService">The client Parent Child domain Service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.PostAsync(TaxHub.Models.ClientParentChild,System.Threading.CancellationToken)">
            <summary>
            Inserts a clientParentChild Relation
            </summary>
            <param name="clientParentChild"> Client Parent child model</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.PutAsync(TaxHub.Models.ClientParentChild,System.Threading.CancellationToken)">
            <summary>
            UPdates a clientParentChild Relation
            </summary>
            <param name="clientParentChildCommand"> Client Parent child model</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.UnmapClientParentChild(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Unmaps a clientParentChild Relation
            </summary>
            <param name="parentClientId"> Parent client id</param>
            <param name="childClientId"> child client id</param>
            <param name="payeeId"> payeeId</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.DeleteParentSet(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the ClientParentChild Relation
            </summary>
            <param name="tenantId">The tenant owner of the client</param>
            <param name="parentClientId"> Parent client id</param>
            <param name="payeeId"> payeeId</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.DeleteChildSet(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the ClientParentChild Relation
            </summary>
            <param name="childClientId"> Child client id</param>
            <param name="payeeId"> payeeId</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.UnmapClientParentChild(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Deletes the ClientParentChild Relation
            </summary>
            <param name="id"> The id</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.GetClientCanBeMultiFeinParentCandidate(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a client can be a parent in a client parent child multi-fein relationship
            </summary>
            <param name="tenantId"> Parent client id</param>
            <param name="clientId"> child client id</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.GetClientCanBeMultiFeinChildCandidate(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a client can be a child in a client parent child multi-fein relationship
            </summary>
            <param name="tenantId"> Parent client id</param>
            <param name="clientId"> child client id</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.GetClientCanBeCommonPayParentCandidate(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a client can be a child in a client parent child common pay relationship
            </summary>
            <param name="tenantId"> Parent client id</param>
            <param name="clientId"> child client id</param>
            <param name="payeeId"> payeeId</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.GetClientCanBeCommonPayChildCandidate(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a client can be a child in a client parent child common pay relationship
            </summary>
            <param name="tenantId">TenantId</param>
            <param name="clientId"> child client id</param>
            <param name="payeeId"> payeeId</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.GetClientParentChildIdSet(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the multifein set for a client
            </summary>
            <param name="tenantId">TenantId</param>
            <param name="clientId"> child client id</param>
            <param name="payeeId">payeeId</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientParentChildController.GetClientParentChildren(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Inserts a clientParentChild Relation
            </summary>
            <param name="tenantId"> Tenant Id</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Api result</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.FederalElectronicTransferController">
            <summary>
            The Api Controller for the FederalElectronicTransfer/FederalElectronicTransferDistribution aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.FederalElectronicTransferController.#ctor(TaxHub.CoreServices.Application.IFederalElectronicTransferService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.FederalElectronicTransferController"/>
            </summary>
            <param name="fedEftService">The Fed EFT Service</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.FederalElectronicTransferController.VoidFederalEft(System.Int32,TaxHub.Models.Commands.FederalEftVoidCommand,System.Threading.CancellationToken)">
            <summary>
            Method initiates the void process of a Fed Eft and the chain of event related to it
            </summary>
            <param name="fedEftId">The fed eft identifier</param>
            <param name="federalEftVoidCommand">The fed eft void command</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.FederalElectronicTransferController.UnexportFederalEft(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method that un-export all federal eft's by file identifier.
            </summary>
            <param name="fileId">The file identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.FederalElectronicTransferController.WireFederalEft(System.Int32,TaxHub.Models.Commands.FederalEftWireUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Method initiates the wire process of a Fed Eft and the chain of event related to it
            </summary>
            <param name="fedEftId">The fed eft identifier</param>
            <param name="federalEftCommand">The fed eft wire update command</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.YEInboundFileController">
            <summary>
            The api controller for ye ingestion
            </summary>
            <seealso cref="T:System.Web.Http.ApiController" />
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YEInboundFileController.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.IYEIngestionService,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Constructor.
            </summary>
            <param name="yeIngestionService">The ye ingestion service.</param>
            <param name="appLogger">The app logger.</param>
            <param name="metricsBuilder">The application metrics builder</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YEInboundFileController.GetAsync(System.Guid,System.String,TaxHub.Models.InboundFileType,System.Threading.CancellationToken)">
            <summary>
            Gets a YEFile content asynchronously
            </summary>
            <param name="yeProcessingId">The ye processing identifier.</param>
            <param name="agency">The agency.</param>
            <param name="fileType">Type of the file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An HttpResponseMessage containing the YEFile content.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The operation result was not expected.</exception>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YEInboundFileController.PostAsync(System.Threading.CancellationToken)">
            <summary>
            Post RTS file
            </summary>
            <param name="cancellationToken">token</param>
            <returns>result</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.InputTaxInstanceController">
            <summary>
            The API controller providing periodic tax units related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.InputTaxInstanceController.#ctor(TaxHub.CoreServices.Application.IInputTaxInstanceService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.InputTaxInstanceController"/> class.
            </summary>
            <param name="inputTaxInstanceService">The input tax instance domain service</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.InputTaxInstanceController.GetAsync(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method returns specific input tax instance by its root tenantId and id.
            </summary>
            <param name="tenantId">The tenant id (GUID)</param>
            <param name="id">The input tax instance id (int)</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the HTTP message with pay data</returns>
            <remarks>Required entitlements: ViewInputTaxInstance</remarks>
            <response code="200">Success</response>
            <response code="401">Authentication or application-level authorization failed</response>
            <response code="403">Service-specific authorization failed</response>
            <response code="404">The pay not found</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.InputTaxInstanceController.GetAllAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of input tax instances for specific tenant.
            </summary>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns an array of input tax instances</returns>
            <remarks>Required entitlements: ViewInputTaxInstanceAll</remarks>
            <response code="200">Success</response>
            <response code="401">Authentication or application-level authorization failed</response>
            <response code="403">Service-specific authorization failed</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.InputTaxInstanceController.PostAsync(System.Guid,TaxHub.Models.InputTaxInstance,System.Threading.CancellationToken)">
            <summary>
            Method creates new input tax instance
            </summary>
            <param name="tenantId">The tenantId under which to create the pay</param>
            <param name="inputTaxInstance">The input tax instance to create</param>
            <param name="cancellationToken">The cancellation token to cancel the async operation</param>
            <returns>Returns HTTP message.</returns>
            <remarks>Service may return a Warning header containing an additional information in case of failure</remarks>
            <remarks>Required entitlements: CreateExtended</remarks>
            <response code="201">Success, the periodic tax unit has been created. Response body contains the input tax unit</response>
            <response code="400">Bad request - the input tax instance data is incomplete or invalid</response>
            <response code="401">Authentication or application-level authorization failed</response>
            <response code="403">Service-specific authorization failed</response>
            <response code="409">A conflict - an instance of input tax instance with the same hash key already exists in the system</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.InputTaxInstanceController.PostPeriodicCSVAsync(System.Threading.CancellationToken)">
            <summary>
            Post CsV
            </summary>
            <param name="cancellationToken">token</param>
            <returns>result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.InputTaxInstanceController.PutAsync(System.Guid,TaxHub.Models.Dto.InputTaxInstanceUpdateConsumerCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates input tax instance
            </summary>
            <param name="tenantId">Tenant ID</param>
            <param name="updateCommand">Input tax instance to be updated</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Http response of pass or fail</returns>
            <remarks>Required entitlements: UpdateInputTaxInstance</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.InputTaxInstanceController.GetCountAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the input tax instances total count based on a filter
            </summary>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation tokens</param>
            <returns>Dictionary with the totals</returns>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The resource was not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.InputTaxInstanceController.GetTotalTaxSumAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets total sum of tax amounts of all input tax instances based on a filter
            </summary>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation tokens</param>
            <returns>Dictionary with the totals</returns>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The resource was not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.InputTaxInstanceController.CreateAssembled(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Method will find all unassembled input tax instances request assembly
            </summary>
            <param name="inputPayrollIds">The input payrolls Ids.</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>
            an http response of pass or fail
            </returns>
            <remarks>Required entitlements: CreateInputTaxInstanceAssembled</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.InputTaxInstanceController.GetHistory(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method will get the history associated with this input payroll instance
            </summary>
            <param name="tenantId">The tenant identifier</param>
            <param name="inputTaxInstanceId">The input tax instance identifer</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The history of this input tax instance</returns>
            <remarks>Required entitlements: ViewInputTaxInstanceHistory</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.ClientController">
            <summary>
            The API controller providing client related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientController.#ctor(TaxHub.CoreServices.Application.IClientService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.ClientController"/> class.
            </summary>
            <param name="clientService">The client domain service.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientController.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns specific client by its clientId.
            </summary>
            <param name="clientId">The clientId (string).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with pay data.</returns>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The pay not found.</response>
            <remarks>Required entitlements: ViewClient</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientController.GetAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of clients.
            </summary>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of periodic tax units.</returns>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <remarks>Required entitlements: ViewClient</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientController.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Method returns all tenants.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of periodic tax units.</returns>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <remarks>Required entitlements: ViewClientAll</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientController.GetBulkClientAsync(System.Threading.CancellationToken)">
            <summary>
            Method returns the bulk payment client.  Calls find by client id which checks the client id.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of periodic tax units.</returns>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <remarks>Required entitlements: ViewClient</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientController.GetCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the tenant total count
            </summary>
            <param name="cancellationToken">The cancellation tokens</param>
            <returns>Dictionary with the totals</returns>
            <remarks>Required entitlements: ViewClient</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientController.PutAsync(System.Guid,TaxHub.Models.Commands.ClientUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Updates a client
            </summary>
            <param name="tenantId">The tenant owner of the client</param>
            <param name="clientCommand">The client object to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The updated client</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientController.PostAsync(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            This method will create a client for the given company
            </summary>
            <param name="tenantId">the tenant Id</param>
            <param name="companyId">the id of the company to use to create this client</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The client created</returns>
            <remarks>Required entitlements: CreateClient</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientController.RemoveClient(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            This method will delete a client for the given company
            </summary>
            <param name="tenantId">the tenant Id.</param>
            <param name="clientId">the clientId for client removal</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The client deleted</returns>
            <remarks>Required entitlements: DeleteClient</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientController.PostAsync(System.Guid,TaxHub.Models.Commands.ClientCreationCommand,System.Threading.CancellationToken)">
            <summary>
            This method will create a client
            </summary>
            <param name="tenantId">The tenant owner of the client</param>
            <param name="createCommand">The client create command</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The client created</returns>
            <remarks>Required entitlements: CreateClient</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.ClientController.GetHistory(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns specific client history by its clientId.
            </summary>
            <param name="tenantId">The tenantId(guid).</param>
            <param name="clientId">The clientId (string).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with pay data.</returns>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The pay not found.</response>
            <remarks>Required entitlements: ViewClientHistory</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.CollectionController">
            <summary>
            The API controller that provides information about collections
            </summary>
            <seealso cref="T:System.Web.Http.ApiController" />
        </member>
        <member name="M:TaxHub.CoreServices.Controller.CollectionController.#ctor(TaxHub.CoreServices.Application.ICollectionDetailService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.CollectionController"/> class.
            </summary>
            <param name="collectionDetailService">The collection detail service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.CollectionController.GetDetailsAsync(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the collection details.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="collectionId">The collection identifier.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Returns HTTP message.
            </returns>
            <remarks>Required entitlements: ViewLiabilityCollectionTaxDetails</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.CollectionController.GetFtrAsync(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get the data for the FTR report (Publication)
            </summary>
            <param name="collectionId">The collectionId</param>
            <param name="pagedDataParameters">The paged data parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The data for the FTR report</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.CollectionController.GetDetailsCountAsync(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the details asynchronous count.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="collectionId">The collection identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Returns the http message
            </returns>
            <remarks>Required entitlements: ViewLiabilityCollectionTaxDetails</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.EventStoreController">
            <summary>
            The API controller that provides access to the event store resource.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.EventStoreController.#ctor(TaxHub.Common.EventStore.IQueryableEventStore)">
            <summary>
            Create event store controller.
            </summary>
            <param name="eventStore">Instance of the event store.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.EventStoreController.GetFailedToConsume(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of failed events, optionally filtered by specific tenant.
            </summary>
            <param name="tenantId">The tenantId. Can be an empty GUID.</param>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of DomainEventData.</returns>
            <remarks>Required entitlements: ViewFailedDomainEventData</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.EventStoreController.CountFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns the total number of failed events, optionally filtered by specific tenant.
            </summary>
            <param name="tenantId">The tenantId. Can be an empty GUID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the JSON with count+number value pair.</returns>
            <remarks>Required entitlements: ViewFailedDomainEventData</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.EventStoreController.GetFailedToConsume(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns the DomainEventData with the given id, if it exists in failed events.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The DomainEventData id (GUID).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with domain event data.</returns>
            <remarks>Required entitlements: ViewFailedDomainEventData</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">Didn't find the event data.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.EventStoreController.DeleteFailedToConsume(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes the DomainEventData with the given id, if it exists in failed to consume events.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The DomainEventData id (GUID).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with domain event data.</returns>
            <remarks>Required entitlements: DeleteFailedDomainEventData</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">Didn't find the event data.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.EventStoreController.GetFailedToPublish(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of incomplete (failed to queue) events, optionally filtered by specific tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of DomainEventData.</returns>
            <remarks>Required entitlements: ViewFailedDomainEventData</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.EventStoreController.CountFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns the total number of failed events, optionally filtered by specific tenant.
            </summary>
            <param name="tenantId">The tenantId. Can be an empty GUID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the JSON with count+number value pair.</returns>
            <remarks>Required entitlements: ViewFailedDomainEventData</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.EventStoreController.GetFailedToPublish(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns the DomainEventData with the given id, considering the event incomplete (unable to to send to message queue), if it exists.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The DomainEventData id (GUID).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with domain event data.</returns>
            <remarks>Required entitlements: ViewFailedDomainEventData</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">Didn't find the event data.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.EventStoreController.DeleteFailedToPublish(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes the DomainEventData with the given id, if it exists in failed to publish events.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The DomainEventData id (GUID).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with domain event data.</returns>
            <remarks>Required entitlements: DeleteFailedDomainEventData</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">Didn't find the event data.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.EventStoreController.Get(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns the DomainEventData with the given id, if it exists.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The DomainEventData id (GUID).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with domain event data.</returns>
            <remarks>Required entitlements: ViewDomainEventData</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">Didn't find the event data.</response>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.YearEndPostREController">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YearEndPostREController.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.YearEndPostREController"/> class.
            </summary>
            <param name="yearEndPostReService">The yearEndPostRe service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YearEndPostREController.GetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves postReId information.
            </summary>
            <param name="postReId">The poseRe Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The folder path.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.LiabilityController">
            <summary>
            Liability Controller
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.LiabilityController.#ctor(TaxHub.CoreServices.Application.ILiabilityService,TaxHub.CoreServices.Application.IPeriodicTaxInstanceService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.LiabilityController"/> class.
            </summary>
            <param name="liabilityService">The liability domain service.</param>
            <param name="periodicPeriodicTaxInstanceService">The periodicPeriodicTaxInstanceService domain service.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.LiabilityController.HasCollection(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            HasCollection
            </summary>
            <param name="tenantId">tenantId</param>
            <param name="periodicTaxInstanceId">periodicTaxInstanceId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>HasCollection</returns>
            <remarks>Required entitlements: ViewLiability</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.LiabilityController.GetHistory(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            GetHistory
            </summary>
            <param name="tenantId">tenantId</param>
            <param name="liabilityId">liabilityId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>History</returns>
            <remarks>Required entitlements: ViewLiabilityHistory</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.LiabilityController.Refund(System.Guid,System.Guid,TaxHub.CoreServices.Acl.Payment.RefundPaymentCommand,System.Threading.CancellationToken)">
            <summary>
            Refunds a payment
            </summary>
            <param name="tenantId">Tenant Id</param>
            <param name="liabilityId">Liability Id</param>
            <param name="refundPaymentCommand">Object containing payment Id and payment amount</param>
            <param name="cancellationToken">Cancellatioh Token</param>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: RefundLiability</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.NamedTaxRepresentativeController">
            <summary>
            The API controller providing Named Tax Representatives related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeController.#ctor(TaxHub.CoreServices.Application.INamedTaxRepresentativeService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.TenantController"/> class.
            </summary>
            <param name="ntrService">The ntr domain service.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeController.GetCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the ntr total count
            </summary>
            <param name="cancellationToken">The cancellation tokens</param>
            <returns>Dictionary with the totals</returns>
            <remarks>Required entitlements: ViewNamedTaxRepresentative</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeController.GetAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns specific named tax representative by its ntrId.
            </summary>
            <param name="ntrId">The ntrId (GUID).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with the named tax representative.</returns>
            <remarks>Required entitlements: ViewNamedTaxRepresentative</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The pay not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeController.GetAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of tenants.
            </summary>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of named tax representatives.</returns>
            <remarks>Required entitlements: ViewNamedTaxRepresentative</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeController.PutAsync(System.Guid,TaxHub.Models.Commands.NamedTaxRepresentativeUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the ntr information.
            </summary>
            <param name="ntrId">The id of the ntr to update</param>
            <param name="ntrUpdateCommand">The Ntr</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: UpdateNamedTaxRepresentative</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeController.PostAsync(TaxHub.Models.Commands.NamedTaxRepresentativeCreateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the tenant information.
            </summary>
            <param name="ntrCreateCommand">The NTR Create Command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: CreateNamedTaxRepresentative</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeController.GetHistory(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns specific tenant by its tenantId.
            </summary>
            <param name="ntrId">The tenantId.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with tenant history data.</returns>
            <remarks>Required entitlements: ViewNamedTaxRepresentativeHistory</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The tenant not found.</response>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.NamedTaxRepresentativeV2Controller">
            <summary>
            The API controller providing Named Tax Representatives related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeV2Controller.#ctor(TaxHub.CoreServices.Application.INamedTaxRepresentativeService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.TenantController"/> class.
            </summary>
            <param name="namedTaxRepresentativeService">The named tax representative domain service.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeV2Controller.GetCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the named tax representative total count
            </summary>
            <param name="cancellationToken">The cancellation tokens</param>
            <returns>Dictionary with the totals</returns>
            <remarks>Required entitlements: ViewNamedTaxRepresentative</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeV2Controller.GetAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns specific named tax representative by its Id.
            </summary>
            <param name="id">The named tax representative id</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with the named tax representative.</returns>
            <remarks>Required entitlements: ViewNamedTaxRepresentative</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The pay not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeV2Controller.GetAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of tenants.
            </summary>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of named tax representatives.</returns>
            <remarks>Required entitlements: ViewNamedTaxRepresentative</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeV2Controller.PutAsync(System.Guid,TaxHub.Models.Commands.NamedTaxRepresentativeUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the named tax representative information.
            </summary>
            <param name="id">The named tax representative id</param>
            <param name="namedTaxRepresentativeUpdateCommand">The named tax representative update command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: UpdateNamedTaxRepresentative</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeV2Controller.PostAsync(TaxHub.Models.Commands.NamedTaxRepresentativeCreateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the tenant information.
            </summary>
            <param name="namedTaxRepresentativeCreateCommand">The named tax representative Create Command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: CreateNamedTaxRepresentative</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.NamedTaxRepresentativeV2Controller.GetHistory(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns specific tenant by its tenantId.
            </summary>
            <param name="id">The named tax representative id</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with tenant history data.</returns>
            <remarks>Required entitlements: ViewNamedTaxRepresentativeHistory</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The tenant not found.</response>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.AgencyAchController">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Controller.AgencyAchController.#ctor(TaxHub.CoreServices.Application.IAgencyAchService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.AgencyAchController"/> class.
            </summary>
            <param name="agencyAchService">The payee eFile info service.</param>
            <param name="appLogger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.AgencyAchController.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves an agency's ACH information.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The agency's ACH information.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.AgencyAchController.PostAsync(TaxHub.Models.Commands.AgencyAchCreateCommand,System.Threading.CancellationToken)">
            <summary>
            Creates a new agency ACH entry.
            </summary>
            <param name="command">The agency ACH data to create a new agency ACH with.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <response code="201">Created.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="409">Conflict.</response>
            <response code="500">Internal server error.</response>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.AgencyAchController.PostAsync(TaxHub.Models.Commands.AgencyAchUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Updates a new agency ACH entry.
            </summary>
            <param name="command">The agency ACH data to update an exisiting agency ACH with.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="409">Conflict.</response>
            <response code="500">Internal server error.</response>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.PayeeEfileInfoController">
            <summary>
            The API controller providing Payments related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PayeeEfileInfoController.#ctor(TaxHub.CoreServices.Application.IPayeeEfileInfoService,TaxHub.Common.Logging.IAppLogger,TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.PayeeEfileInfoController"/> class.
            </summary>
            <param name="payeeEfileInfoService">The payee eFile info service.</param>
            <param name="logger">The application logger.</param>
            <param name="domainService">The domain service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PayeeEfileInfoController.PostAsync(TaxHub.Models.Commands.PayeeEfileInfoUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates Payment Status to Void.
            </summary>
            <param name="command">The name of the field to update.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <returns>Result of the operation</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.PaymentController">
            <summary>
            The API controller providing Payments related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PaymentController.#ctor(TaxHub.CoreServices.Application.IPaymentService,TaxHub.CoreServices.Application.IPaymentReportingService,TaxHub.Common.Logging.IAppLogger,TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.PaymentController"/> class.
            </summary>
            <param name="paymentService">The payment service.</param>
            <param name="paymentReportingService">The payment reporting service.</param>
            <param name="logger">The application logger.</param>
            <param name="domainService">The domain service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PaymentController.VoidPayment(System.Int32,TaxHub.Models.Commands.PaymentVoidCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates Payment Status to Void.
            </summary>
            <param name="paymentId">The id of the payment to update</param>
            <param name="voidCommand">The command carying the version of the payment to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: VoidPayment</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PaymentController.BulkVoidPayment(TaxHub.Models.Commands.PaymentBulkVoidCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates Payment Status to Void in bulk.
            </summary>
            <param name="voidCommand">The command carrying the payment id and version of the payment to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: VoidPayment</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PaymentController.BulkUpdatePaymentStatus(TaxHub.Models.Commands.PaymentBulkUpdateStatusCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates Payments Statuses in bulk.
            </summary>
            <param name="updateStatusCommand">The command carrying the payment id and version of the payments to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation, includes a list of payment ids changed</returns>
            <remarks>Required entitlements: BulkUpdateStatus</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PaymentController.GetAsync(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            TODO: When this controller gets refactored to a V2, this endpoint should be removed and instead use the paymentinfos enpoint with a liabilityId filter
            <summary>
            GetAsync
            </summary>
            <param name="liabilityId">liabilityId</param>
            <param name="pageParams">pageParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PaymentController.GetPaymentInfosAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets a list of payments info that matches the filter (projection with a subset of data from of the full payment)
            </summary>
            <param name="pageParams">pageParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PaymentController.UpdateAgencyRefunded(TaxHub.Models.Commands.PaymentAgencyRefundedUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Updates agencyrefunded flag given list of payment ids
            </summary>
            <param name="updateCommand">updateCommand</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PaymentController.RaiseMissingEvent(System.Int32,TaxHub.Models.Commands.RaiseMissingEventCommand,System.Threading.CancellationToken)">
            <summary>
            Method to raise missing events for a given payment.The event should fulfill the following conditions:
            1-> It should have a version and sequence number less or equal than the version or sequence number of the corresponding aggregate
            2-> Should not exist in raw events another event with the same sequence number.
            </summary>
            <param name="paymentId">The payment id</param>
            <param name="missingEventCommand">The missing event command</param>
            <param name="cancellationToken">The cancellation token.</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="409">Conflict.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: RaiseMissingEvent</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PaymentController.DetermineCreditApplicationDetails(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method to determine credit application liability details
            </summary>
            <param name="paymentId">Payment id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of credit application liability details</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.PenaltyInterestController">
            <summary>
            The Api controller for the penalty interests
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PenaltyInterestController.#ctor(TaxHub.CoreServices.Application.IPenaltyInterestService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.PenaltyInterestController"/> class.
            </summary>
            <param name="piService">The Penanlty Interest service</param>
            <param name="logger">The logger instance</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PenaltyInterestController.PostAsync(System.Guid,System.Collections.Generic.IEnumerable{TaxHub.Models.PenaltyInterest},System.Threading.CancellationToken)">
            <summary>
            Creates a Penalty and Interest entry in the repository
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="penaltyInterestEntries">The P and I entries</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An http response message</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PenaltyInterestController.IsVoidable(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method determines whether the penalty interest can be voided.
            </summary>
            <param name="penaltyInterestId">The Aggregate Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PenaltyInterestController.Void(System.Guid,TaxHub.Models.Commands.VoidPenaltyInterestCommand,System.Threading.CancellationToken)">
            <summary>
            Method initiates the void process for tyhe penalty interest by its id.
            </summary>
            <param name="penaltyInterestId">The Aggregate Id</param>
            <param name="voidPenaltyInterestCommand">voidPenaltyInterestCommand</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PenaltyInterestController.GetTotals(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns totals for filters.
            </summary>
            <param name="pageParams">The page parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns total amount for filters</returns>
            <remarks>Required entitlements: ViewInputPenaltyInterest</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            /// <response code="404">The resource was not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PenaltyInterestController.GetAllAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of p and i.
            </summary>
            <param name="pageParams">The page parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns a list of p and i</returns>
            <remarks>Required entitlements: ViewInputPenaltyInterest</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            /// <response code="404">The resource was not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PenaltyInterestController.GetCountAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the penalties and intrests total count based on a filter
            </summary>
            <param name="pageParams">The page parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Dictionary with the totals</returns>
            <remarks>Required entitlements: ViewInputPenaltyInterest</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The resource was not found.</response>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController">
            <summary>
            The API controller providing periodic tax units related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController.#ctor(TaxHub.CoreServices.Application.IPeriodicTaxInstanceService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController"/> class.
            </summary>
            <param name="periodicTaxInstanceService">The periodic tax unit domain service.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController.GetPeriodicTaxInstancesExtendedAsync(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the details asynchronous.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Returns the HTTP message with the periodic tax instance detail
            </returns>
            <remarks>Required entitlements: ViewPeriodicTaxInstance</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController.GetPeriodicTaxInstancesExtendedExceptionsAsync(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the exceptions details asynchronous.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Returns the HTTP message with the payr roll exception detail
            </returns>
            <remarks>Required entitlements: ViewPeriodicTaxInstance</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController.GetPeriodicTaxInstancesExtendedCountAsync(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the periodic tax instances count asynchronous.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The count of the total of elements</returns>
            <remarks>Required entitlements: ViewPeriodicTaxInstance</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController.GetAsync(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method returns specific periodic tax unit by its root tenantId and id.
            </summary>
            <param name="tenantId">The tenant id (GUID).</param>
            <param name="id">The periodic tax unit id (GUID).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with pay data.</returns>
            <remarks>Required entitlements: ViewPeriodicTaxInstance</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The pay not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController.GetAsync(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of periodic tax units for specific tenant.
            </summary>
            <param name="tenantId">The tenantId. This value can be empty guid to access all pays in the system, but appropriate permissions are required.</param>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of periodic tax units.</returns>
            <remarks>Required entitlements: ViewPeriodicTaxInstance</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController.PostAsync(System.Guid,TaxHub.Models.PeriodicTaxInstance,System.Threading.CancellationToken)">
            <summary>
            Method creates new periodic tax unit instance.
            </summary>
            <param name="tenantId">The tenantId under which to create the pay.</param>
            <param name="periodicTaxInstance">The periodic tax unit to create.</param>
            <param name="cancellationToken">The cancellation token to cancel the async operation</param>
            <returns>Returns HTTP message.</returns>
            <remarks>Service may return a Warning header containing an additional information in case of failure.</remarks>
            <remarks>Required entitlements: CreatePeriodicTaxInstance</remarks>
            <response code="201">Success, the periodic tax unit has been created. Response body contains the periodic tax unit.</response>
            <response code="400">Bad request - the periodic tax unit data is incorrect or invalid.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="409">A conflict - an instance of periodic tax unit with the same hash key already exists in the system.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController.Reverse(System.Guid,System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Method creates new periodic tax unit instance.
            </summary>
            <param name="tenantId">The tenantId under which to create the pay.</param>
            <param name="id">The periodic tax unit to create.</param>
            <param name="taxIds">The list of import amount ids that must be reversed.</param>
            <param name="cancellationToken">The cancellation token to cancel the async operation</param>
            <returns>Returns HTTP message.</returns>
            <remarks>Service may return a Warning header containing an additional information in case of failure.</remarks>
            <remarks>Required entitlements: CreatePeriodicTaxInstance</remarks>
            <response code="201">Success, the periodic tax unit has been created. Response body contains the periodic tax unit.</response>
            <response code="400">Bad request - the periodic tax unit data is incorrect or invalid.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="409">A conflict - an instance of periodic tax unit with the same hash key already exists in the system.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController.CountAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns the total number of periodic tax units for particular tenant in the system.
            </summary>
            <param name="tenantId">The tenantId. This value can be empty guid to access all pays in the system, but appropriate permissions are required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the JSON with count+number value pair.</returns>
            <remarks>Required entitlements: ViewPeriodicTaxInstance</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController.GetRawHistory(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            GetRawHistory
            </summary>
            <param name="tenantId">tenantId</param>
            <param name="periodicTaxInstanceId">periodicTaxInstanceId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>GetRawHistory</returns>
            <remarks>Required entitlements: ViewPeriodicTaxInstanceRawHistory</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController.GetHistory(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            GetHistory
            </summary>
            <param name="tenantId">tenantId</param>
            <param name="periodicTaxInstanceId">periodicTaxInstanceId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>GetHistory</returns>
            <remarks>Required entitlements: ViewPeriodicTaxInstanceHistory</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxInstanceController.CreateAssembled(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Method will find all unassembled tax instances request assembly
            </summary>
            <param name="importPayrollIds">List of periodic tax instances to assemble.</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>
            an http response of pass or fail
            </returns>
            <remarks>Required entitlements: CreatePeriodicTaxInstanceAssembled</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.PreparerCheckController">
            <summary>
            The Api controller for the Preparers
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckController.#ctor(TaxHub.CoreServices.Application.IPreparerCheckService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.PreparerCheckController"/> class.
            </summary>
            <param name="preparerCheckService">The Preparer Check Service</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckController.GetCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the preparer check total count
            </summary>
            <param name="cancellationToken">The cancellation tokens</param>
            <returns>Dictionary with the totals</returns>
            <remarks>Required entitlements: ViewPreparerCheck</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckController.GetCountByStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the preparer check total count
            </summary>
            <param name="preparerCheckStatus">The Preparer Check Status</param>
            <param name="cancellationToken">The cancellation tokens</param>
            <returns>Dictionary with the totals</returns>
            <remarks>Required entitlements: ViewPreparerCheck</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckController.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns specific named tax representative by its ntrId.
            </summary>
            <param name="preparerCheckId">The preparerCheck Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with the named tax representative.</returns>
            <remarks>Required entitlements: ViewPreparerCheck</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The pay not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckController.GetByStatusAsync(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of preparer check by status.
            </summary>
            <param name="preparerCheckStatus">The preparer check status</param>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of named tax representatives.</returns>
            <remarks>Required entitlements: ViewNamedTaxRepresentative</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckController.GetAllAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of preparer checks.
            </summary>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of named tax representatives.</returns>
            <remarks>Required entitlements: ViewNamedTaxRepresentative</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckController.PutAsync(System.String,TaxHub.Models.Commands.PreparerCheckUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the preparer check information.
            </summary>
            <param name="preparerCheckId">The preparer check id</param>
            <param name="updateCommand">The preparer check update command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: UpdateNamedTaxRepresentative</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckController.PostAsync(TaxHub.Models.Commands.PreparerCheckCreateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the tenant information.
            </summary>
            <param name="createCommand">The Preparer create command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: CreateNamedTaxRepresentative</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.PreparerCheckV2Controller">
            <summary>
            The Api controller for the Preparers
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckV2Controller.#ctor(TaxHub.CoreServices.Application.IPreparerCheckService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.PreparerCheckV2Controller"/> class.
            </summary>
            <param name="preparerCheckService">The Preparer Check Service</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckV2Controller.GetCountAsync(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the preparer check total count
            </summary>
            <param name="filterParams">The filterParams </param>
            <param name="cancellationToken">The cancellation tokens</param>
            <returns>Dictionary with the totals</returns>
            <remarks>Required entitlements: ViewPreparerCheck</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckV2Controller.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns specific named tax representative by its ntrId.
            </summary>
            <param name="preparerCheckId">The preparerCheck Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with the named tax representative.</returns>
            <remarks>Required entitlements: ViewPreparerCheck</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The pay not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckV2Controller.GetAllAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of preparer checks.
            </summary>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of named tax representatives.</returns>
            <remarks>Required entitlements: ViewNamedTaxRepresentative</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckV2Controller.PutAsync(System.String,TaxHub.Models.Commands.PreparerCheckUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the preparer check information.
            </summary>
            <param name="preparerCheckId">The preparer check id</param>
            <param name="updateCommand">The preparer check update command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: UpdateNamedTaxRepresentative</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerCheckV2Controller.PostAsync(TaxHub.Models.Commands.PreparerCheckCreateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the tenant information.
            </summary>
            <param name="createCommand">The Preparer create command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: CreateNamedTaxRepresentative</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.PreparerController">
            <summary>
            The Api controller for the Preparers
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerController.#ctor(TaxHub.CoreServices.Application.IPreparerService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.PreparerController"/> class.
            </summary>
            <param name="preparerService">The Preparer Check Service</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerController.GetCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the preparer total count
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Dictionary with the totals</returns>
            <remarks>Required entitlements: ViewPreparer</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerController.GetCountByStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the preparer count by status
            </summary>
            <param name="preparerStatus">Status for count</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Dictionary with the totals</returns>
            <remarks>Required entitlements: ViewPreparer</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerController.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns specific preparer by its preparerId.
            </summary>
            <param name="preparerId">The preparer Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with the preparer.</returns>
            <remarks>Required entitlements: ViewPreparer</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The preparer not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerController.GetByStatusAsync(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of preparer by status.
            </summary>
            <param name="preparerStatus">The preparer status</param>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of preparers.</returns>
            <remarks>Required entitlements: ViewPreparer</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerController.GetAllAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of preparers.
            </summary>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of preparers.</returns>
            <remarks>Required entitlements: ViewPreparer</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerController.PutAsync(System.String,TaxHub.Models.PreparerUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the preparer information.
            </summary>
            <param name="preparerId">The preparer id</param>
            <param name="updateCommand">The preparer update command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The preparer is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: UpdatePreparer</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerController.PostAsync(TaxHub.Models.PreparerCreateCommand,System.Threading.CancellationToken)">
            <summary>
            Method creates the preparer information.
            </summary>
            <param name="createCommand">The Preparer create command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="409">The preparer already exists.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: CreatePreparer</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.PreparerV2Controller">
            <summary>
            The Api controller for the Preparers
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerV2Controller.#ctor(TaxHub.CoreServices.Application.IPreparerService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.PreparerV2Controller"/> class.
            </summary>
            <param name="preparerService">The Preparer Check Service</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerV2Controller.GetCountAsync(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the preparer total count
            </summary>
            <param name="filterParams">The filter to use for the count operation</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Dictionary with the totals</returns>
            <remarks>Required entitlements: ViewPreparer</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerV2Controller.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns specific preparer by its preparerId.
            </summary>
            <param name="preparerId">The preparer Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with the preparer.</returns>
            <remarks>Required entitlements: ViewPreparer</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The preparer not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerV2Controller.GetAllAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of preparers.
            </summary>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of preparers.</returns>
            <remarks>Required entitlements: ViewPreparer</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerV2Controller.PutAsync(System.String,TaxHub.Models.PreparerUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the preparer information.
            </summary>
            <param name="preparerId">The preparer id</param>
            <param name="updateCommand">The preparer update command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The preparer is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: UpdatePreparer</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PreparerV2Controller.PostAsync(TaxHub.Models.PreparerCreateCommand,System.Threading.CancellationToken)">
            <summary>
            Method creates the preparer information.
            </summary>
            <param name="createCommand">The Preparer create command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="409">The preparer already exists.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: CreatePreparer</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.PrintableDocumentController">
            <summary>
            The Api controller for the printable document
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PrintableDocumentController.#ctor(TaxHub.CoreServices.Application.IPrintableDocumentService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.PrintableDocumentController"/> class.
            </summary>
            <param name="documentService">The printable document service</param>
            <param name="logger">The application logger. </param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PrintableDocumentController.GetAllAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of preparers.
            </summary>
            <param name="pageParams">The page parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns a list of printable documents.</returns>
            <remarks>Required entitlements: ViewPrintDocuments</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            /// <response code="404">The resource was not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PrintableDocumentController.GetCountAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the printable document total count based on a filter
            </summary>
            <param name="pageParams">The page parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Dictionary with the totals</returns>
            <remarks>Required entitlements: ViewPrintDocuments</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The resource was not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PrintableDocumentController.UpdatePrintStatus(TaxHub.Models.Commands.PrintableDocumentSetUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the status of a list of printable documents
            </summary>
            <param name="updateCommand">The printable document set update command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: DeleteFailedToConsume</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PrintableDocumentController.UpdateDocumentStatus(TaxHub.Models.Commands.PrintableDocumentUpdateDocumentStatusCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the document status of a list of printable documents
            </summary>
            <param name="updateCommand">The printable document set update document status command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: DeleteFailedToConsume</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.PrintFileRequestController">
            <summary>
            API controller providing print file requests related service end-points
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PrintFileRequestController.#ctor(TaxHub.CoreServices.Application.IPrintFileRequestService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Createa PrintFileRequestController instance
            </summary>
            <param name="fileRequestService">Injected instance of FileRequestService</param>
            <param name="logger">The app logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PrintFileRequestController.Create(TaxHub.Models.Commands.PrintableDocumentPrintRequestCommand,System.Threading.CancellationToken)">
            <summary>
            Returns whether a request was able to be created
            </summary>
            <param name="printRequestCommand">The print request command</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Whether or no was able to create the request</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PrintFileRequestController.PatchAsync(System.Guid,TaxHub.Models.Commands.PrintFileRequestUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates the status of a list of print file requests
            </summary>
            <param name="id">The Id of the print file request</param>
            <param name="updateCommand">The print file request set update command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: DeleteFailedToConsume</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PrintFileRequestController.UpdatePrintFileRequestBatchDocumentStatusAsync(System.Guid,System.Guid,TaxHub.Models.Commands.PrintFileRequestStatusUpdateCommand,System.Threading.CancellationToken)">
            <summary>
            Method updates a print file request's batch document's status
            </summary>
            <param name="printFileRequestId">The print file request identifier</param>
            <param name="batchDocumentId">The batch document identifier</param>
            <param name="updateCommand">The update command</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.QuarterEndPhaseController">
            <summary>
            The Api controller for the QE Phase
            </summary>
            <seealso cref="T:System.Web.Http.ApiController" />
        </member>
        <member name="M:TaxHub.CoreServices.Controller.QuarterEndPhaseController.#ctor(TaxHub.CoreServices.Application.IQuarterEndPhaseService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.QuarterEndPhaseController"/> class.
            </summary>
            <param name="quarterEndPhaseService">The qe phase service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.QuarterEndPhaseController.GetAsync(System.Nullable{System.DateTime},SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the asynchronous.
            </summary>
            <param name="fromDate">From date.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Elements from the given date</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.QuarterEndPhaseController.GetCountAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets the count asynchronous.
            </summary>
            <param name="fromDate">From date.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Number of elements from the given date</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.RtsFileProcessingController">
            <summary>
            The Api controller for the rts inbound file.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.RtsFileProcessingController.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.QuarterEndIngestion.IRtsFileProcessingService,TaxHub.Common.Configuration.IFeatureToggleConfiguration,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.RtsFileProcessingController"/> class.
            </summary>
            <param name="logger">The application logger. </param>
            <param name="rtsFileProcessingService">The Rts file processing service. </param>
            <param name="featureToggleConfiguration">The feature toggle configuration. </param>
            <param name="metricsBuilder">The application metrics builder</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.RtsFileProcessingController.PostAsync(System.Threading.CancellationToken)">
            <summary>
            Post RTS file
            </summary>
            <param name="cancellationToken">token</param>
            <returns>result</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.SessionLockController">
            <summary>
            SessionLock Controller
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.SessionLockController.#ctor(TaxHub.CoreServices.Application.ISessionLockService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes SessionLockController
            </summary>
            <param name="sessionLockService">ISessionLockService</param>
            <param name="logger">applogger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.SessionLockController.ClearSessionLockAsync(TaxHub.CoreServices.Controller.SessionLockController.SessionLockCommand,System.Threading.CancellationToken)">
            <summary>
            Method clears session lock.
            </summary>
            <param name="sessionLockCommand">sessionId.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an HttpResponseMessage.</returns>
            <response code="200">Success.</response>
            <response code="400">Bad request.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.SessionLockController.SessionLockCommand">
            <summary>
            SessionLockCommand
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Controller.SessionLockController.SessionLockCommand.SessionId">
            <summary>
            Session Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Controller.SessionLockController.SessionLockCommand.LockSuffix">
            <summary>
            Table lock suffix
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.StateElectronicTransferController">
            <summary>
            The Api Controller for the StateElectronicTransfer/StateElectronicTransferDistribution aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.StateElectronicTransferController.#ctor(TaxHub.CoreServices.Application.IStateElectronicTransferService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.StateElectronicTransferController"/>
            </summary>
            <param name="stateEftService">The State EFT Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.StateElectronicTransferController.GetAllByBulkEftIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method returns all check records associated with the bulk check identifier
            </summary>
            <param name="bulkEftId">The bulk check identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the Http message with the list of identifiers</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.StateElectronicTransferController.GetAllByBulkEftIdAsync(System.Int32,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns all check info records associated with the bulk check identifier
            </summary>
            <param name="bulkEftId">The bulk check identifier</param>
            <param name="pageParams">The paging parameters.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the Http message with the list of identifiers</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.StateElectronicTransferController.VoidStateEft(System.Int32,TaxHub.Models.Commands.StateEftVoidCommand,System.Threading.CancellationToken)">
            <summary>
            Method initiates the void process of a state Eft and the chain of event related to it
            </summary>
            <param name="stateEftId">The state eft identifier</param>
            <param name="stateEftVoidCommand">The state eft void command</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.StateElectronicTransferController.VoidStateEfts(System.Collections.Generic.List{TaxHub.Models.Commands.StateEftVoidCommand},System.Threading.CancellationToken)">
            <summary>
            Method initiates the void process of a state Eft and the chain of event related to it
            </summary>
            <param name="stateEftVoidCommands">The state eft void commands</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.StateElectronicTransferController.UnexportStateEft(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method that un-export all state eft's by file identifier.
            </summary>
            <param name="fileId">The file identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>HttpResponseMessage</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.SuiRateImportController">
            <summary>
            Api controller for SUIRateImport
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.SuiRateImportController.#ctor(TaxHub.CoreServices.Application.ISUIRateImportService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.CheckController"/>
            </summary>
            <param name="suiRateImportService">The sui rate import service</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.SuiRateImportController.SUIRateImportAsync(TaxHub.Models.ImportSUIRateModel,System.Threading.CancellationToken)">
            <summary>
            Validates the import SUI Rate data
            </summary>
            <param name="impSuiRateContent">Import SUI Rate data</param>
            <param name="cancellationToken">the cancellation token</param>
            <returns>Returns the HTTP message with validation summary data.</returns>
            <remarks>Required entitlements: UpdateSUIRateImport</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.SuiRateImportController.CreateEventDataParams">
            <summary>
            Create Event data parameters using the User Principal
            </summary>
            <returns>The created EventDataParams</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.SystemManagementController">
            <summary>
            The API controller that provides ability to manage the TaxHub.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.SystemManagementController.#ctor(TaxHub.CoreServices.Application.ISystemManagementService)">
            <summary>
            Creates controller.
            </summary>
            <param name="service">The system management service. </param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.SystemManagementController.RequeueFailedToConsumeEvent(System.Guid)">
            <summary>
            Method re-queues failed to consume event into the message queue, assuming that all preconditions were verified by the command sender.
            </summary>
            <param name="id">The domain event data ID.</param>
            <returns>Returns HTTP message.</returns>
            <response code="202">Accepted, the message was published to the message queue.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="500">Unexpected error.  Unable to send a command.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.SystemManagementController.RepublishFailedToPublish(System.Guid)">
            <summary>
            Method re-publishes failed to publish event into the message queue, assuming that all preconditions were verified by the command sender.
            </summary>
            <param name="id">The domain event data ID.</param>
            <returns>Returns HTTP message.</returns>
            <response code="202">Accepted, the message was published to the message queue.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="500">Unexpected error.  Unable to send a command.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.SystemManagementController.RequestReplay(TaxHub.Messaging.Replay.AggregateEventsReplayFilter)">
            <summary>
            Method raises "tax.service.replay-requested" message for a given event.
            </summary>
            <param name="replayFilter">The replay filter.</param>
            <returns>Accepted if the message was published successfully, otherwise Conflict.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.TenantAliasMappingController">
            <summary>
            The API controller providing tenant-related services.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.TenantAliasMappingController.#ctor(TaxHub.CoreServices.Application.ITenantService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.TenantAliasMappingController"/> class.
            </summary>
            <param name="service">Tenant service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.TenantAliasMappingController.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns specific tenant identifier for tenant alias.
            </summary>
            <param name="tenantAlias">The tenant alias.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with tenant identifier.</returns>
            <response code="200">Success.</response>
            <response code="404">The tenant was not found.</response>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.PeriodicTaxProcessingController">
            <summary>
            PeriodicTaxProcessing Controller
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxProcessingController.#ctor(TaxHub.CoreServices.Application.IPeriodicTaxProcessingService,TaxHub.CoreServices.Application.IReplayPayrollService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.PeriodicTaxProcessingController"/> class.
            </summary>
            <param name="periodicTaxProcessingService">The periodic tax processing service</param>
            <param name="replayPayrollService">The Replay Service responsible for raising the event.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxProcessingController.GetAsync(System.Guid,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of periodic tax processing records associated with a tenant/paygroup/percontrol
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The perControl.</param>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of periodic tax processing records associated with a tenant/paygroup/percontrol.</returns>
            <remarks>Required entitlements: ViewPeriodicTaxInstance</remarks>
            <response code="200">Success.</response>
            <response code="400">Invalid request parameters.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxProcessingController.CountAsync(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of periodic tax processing records associated with a tenant/paygroup/percontrol
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The perControl.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of periodic tax processing records associated with a tenant/paygroup/percontrol.</returns>
            <remarks>Required entitlements: ViewPeriodicTaxInstance</remarks>
            <response code="200">Success.</response>
            <response code="400">Invalid request parameters.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.PeriodicTaxProcessingController.PostAsync(TaxHub.Models.Commands.ReplayPayrollCommand,System.Threading.CancellationToken)">
            <summary>
            Saves MappedTaxPays for a given PayGroup and PerControl.
            </summary>
            <param name="replayPayrollCommand">The command containing the information required to replay the payroll.</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="400">Invalid or Incorrect JSON.</response>
            <response code="500">Failed to publish event.</response>
            <remarks>Required entitlements: ReplaySupplementalPayroll</remarks>
            <returns>Message indicating a successful request.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.TenantController">
            <summary>
            The API controller providing tenant related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.TenantController.#ctor(TaxHub.CoreServices.Application.ITenantService,TaxHub.CoreServices.Application.ITenantManagementService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.TenantController"/> class.
            </summary>
            <param name="tenantService">The tenant domain service.</param>
            <param name="tenantManagementService">The tenant management service.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.TenantController.GetAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns specific tenant by its tenantId.
            </summary>
            <param name="tenantId">The tenantId (GUID).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with pay data.</returns>
            <remarks>Required entitlements: ViewTenant</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The resource was not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.TenantController.GetAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the paged list of tenants.
            </summary>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an array of periodic tax units.</returns>
            <remarks>Required entitlements: ViewTenant</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The resource was not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.TenantController.GetCountAsync(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the tenant total count based on a filter
            </summary>
            <param name="pageParams">The page parameters - page size (per_page=20), page number (page=1), sorting column name (sort_by=field1 ASC,field2 DESC) can be passed via query string.</param>
            <param name="cancellationToken">The cancellation tokens</param>
            <returns>Dictionary with the totals</returns>
            <remarks>Required entitlements: ViewTenant</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The resource was not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.TenantController.GetHistory(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns specific tenant by its tenantId.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with tenant history data.</returns>
            <remarks>Required entitlements: ViewTenantHistory</remarks>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The tenant not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.TenantController.SwapNtrAsync(System.Guid,TaxHub.Models.Commands.TenantNamedTaxRepresentativeSwapCommand,System.Threading.CancellationToken)">
            <summary>
            Swaps the NTR on the Tenant
            </summary>
            <param name="tenantId">The id of the tenant to update</param>
            <param name="swapNtrCommand">The NTR Swap Command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: SwapTenantNTR</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.TenantController.SetNtrEffectiveFromAsync(System.Guid,TaxHub.Models.Commands.TenantNamedTaxRepresentativeSetEffectiveFromCommand,System.Threading.CancellationToken)">
            <summary>
            Updates the NTR EffectiveFrom on the Tenant
            </summary>
            <param name="tenantId">The id of the tenant to update</param>
            <param name="setEffectiveFromCommand">The SetEffectiveFrom Date Command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: SetEffectiveFrom</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.TenantController.SetCommonPayAsync(System.Guid,TaxHub.Models.Commands.TenantCommonPayCommand,System.Threading.CancellationToken)">
            <summary>
            Updates the CommonPay on the Tenant
            </summary>
            <param name="tenantId">The id of the tenant to update</param>
            <param name="setCommonPayCommand">The CommonPay Command</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.TenantController.RequestSyncTenantData(System.Guid)">
            <summary>
            Requests sync for tenant data
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns>The response.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.TenantController.SetSuiRateIntegration(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates the SUI Rate Integration on the Tenant
            </summary>
            <param name="tenantId">The id of the tenant to update</param>
            <param name="suiRateIntegration">The id of the tenant to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="410">The tenant is gone.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.YearEndAgencyController">
            <summary>
            The API controller providing agency related service end-points.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YearEndAgencyController.#ctor(TaxHub.CoreServices.Application.YearEnd.IYearEndAgencyService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Controller.YearEndAgencyController"/> class.
            </summary>
            <param name="agencyService">The year end agency domain service.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YearEndAgencyController.Post(TaxHub.Models.YearEnd.YearEndAgency,System.Threading.CancellationToken)">
            <summary>
            Method creates a new year end agency and returns a response
            </summary>
            <param name="yeAgency">The Agency to add.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Http response for the creation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YearEndAgencyController.GetYearEndAgencyAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method returns a Year End Agency associated with the identifier
            </summary>
            <param name="yearEndAgencyId">The Agency identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The Http message with the agency found</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.YearEndAgencyController.UpdateYearEndAgency(TaxHub.Models.Commands.YearEndAgencyUpdateCommand,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method updates the year end agency
            </summary>
            <param name="updateCommand">The ye agency update document</param>
            <param name="yearEndAgencyId">The year end agency id</param>
            <param name="cancellationToken">The cancellation token</param>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <returns>Result of the operation</returns>
            <remarks>Required entitlements: DeleteFailedToConsume</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Controller.Quarterly_Variance_Report.QuarterlyVarianceReportController">
            <summary>
            The controller providing QVR related service end points
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.Quarterly_Variance_Report.QuarterlyVarianceReportController.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportService)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Controller.Quarterly_Variance_Report.QuarterlyVarianceReportController"/>
            </summary>
            <param name="logger">The application logger.</param>
            <param name="quarterlyVarianceReportService">The Yearly Variance Report domain Service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Controller.Quarterly_Variance_Report.QuarterlyVarianceReportController.CreateQuarterlyVarianceReportRequest(TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand,System.Threading.CancellationToken)">
            <summary>
            Initializes a new YearlyVarianceReportRequest
            </summary>
            <param name="quarterlyVarianceReportCreateCommand">The yearly variance report command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The HTTP response.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndEmployeeValidationRepository">
            <summary>
            Year End employee validation repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndEmployeeValidationRepository.GetEmployeesForUngroupedAgencyWithAppliedFor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Run AppliedFor validation for agencies that do not use grouping.
            </summary>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of employees results of the validation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndStateLocalProcessRepository">
            <summary>
            Legacy Repo to temporarily wrap legacy calls for YE State and Local filing functionality being moved as-is from PTM
            A separate story will be created to refactor this code and move it to the corresponding repos/services
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndStateLocalProcessRepository.CalculateQuarterAmount(System.String,System.Int32,System.Nullable{System.Int32},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Calls _Post_QE_Amount_GetQtdAmendmentSum to calculate the Quarter amount.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="taxId">The tax id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Quarter amount.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndStateLocalProcessRepository.GetEmployees``1(System.String,System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Calls _W_Post_RE_Employer_GetList to get new W2 details
            </summary>
            <param name="clientId">The client id.</param>
            <param name="year">The year.</param>
            <param name="stateCode">The state code.</param>
            <param name="payeeId">The payee Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of W2 details.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndStateLocalProcessRepository.FindLocalClientAgencyByCountyCode``1(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Find client agency by agency's county code and client id. 
            </summary>
            <param name="clientId">The client id.</param>
            <param name="countyCode">The agency's county code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The first client agency matched, or the default value if none matched.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndStateLocalProcessRepository.GetEmployeesForGroupedAgencyWithAppliedFor``1(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Run AppliedFor validations for agencies that accept grouping of their employees by PSD code for a specific tax year.
            </summary>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns a list of employees affected by the validation</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndEmployeeValidationDbContextFactory">
            <summary>
            YearEndEmployeeValidationDbContext factory creates new YearEndEmployeeValidationDbContext instances
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndEmployeeValidationDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndEmployeeValidationDbContext">
            <summary>
            DbContext for YearEndEmployeeValidation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndEmployeeValidationDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndEmployeeValidationDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndEmployeeValidationDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndEmployeeValidationDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndEmployeeValidationDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndEmployeeValidationDbContext.YearEndEmployeeValidationDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndEmployeeValidationDbContext.YearEndEmployeeValidationDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndEmployeeValidationDbContext.YearEndEmployeeValidationDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndEmployeeValidationDbContext.YearEndEmployeeValidationDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CreditApplicationLockingDbContext">
            <summary>
            CreditApplicationLockingDbContext
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CreditApplicationLockingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CreditApplicationLockingDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CreditApplicationLockingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CreditApplicationLockingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CreditApplicationLockingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CreditApplicationLockingDbContext.CreditApplicationLockingDbContextFactory">
            <summary>
            CreditApplicationLockingDbContextFactory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CreditApplicationLockingDbContext.CreditApplicationLockingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            CreditApplicationLockingDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CreditApplicationLockingDbContext.CreditApplicationLockingDbContextFactory.Create">
            <summary>
            Creates the DB context
            </summary>
            <returns>The DB context</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CreditTrackingMap">
            <summary>
            Credit tracking map
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CreditTrackingMap.#ctor">
            <summary>
            Credit tracking map
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PayeeScheduleMap">
            <summary>
            Combine Payee EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PayeeScheduleMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Models.PayeeSchedule"/> class
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.DomainEventOutboxMap">
            <summary>
            The DomainEventOutbox db context map.
            </summary>
            <seealso cref="T:TaxHub.Models.Schedule" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.DomainEventOutboxMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.DomainEventOutboxMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PostPayrollMap">
            <summary>
            Maps to PTM table post_payroll
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PostPayrollMap.#ctor">
            <summary>
            Initializes a new instance of the PostPayrollMap
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PostAmountMap">
            <summary>
            Entity Framework mapping for PortAmount
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PostAmountMap.#ctor">
            <summary>
            Initialize the instance of the mapping class
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndCsvClientMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndCsvClient"/> Ef mapping
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndCsvEmployeeMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndCsvEmployee"/> Ef mapping
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostCsvClientMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndPostCsvClient"/> Ef mapping
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyEmployeeTipsMap">
            <summary>
            Mapping from <see cref="T:TaxHub.Models.QuarterlyEmployeeTips"/> to IMPORT_QE_EETIPS
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.StateMap">
            <summary>
            Mapping file for STATE table
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.StateMap.#ctor">
            <summary>
            Initializes an instance of a <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.StateMap"/>
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ExportZeroEftTrackerMap">
            <summary>
            The ExportZeroEftTracker db context map.
            </summary>
            <seealso cref="T:TaxHub.Models.ExportZeroEftTracker" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ExportZeroEftTrackerMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ExportZeroEftTrackerMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndFileInfoMap">
            <summary>
            Represents the mapping for year end FileInfo
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndFileInfoMap.#ctor">
            <summary>
            Constructs the mapping to YeFileInfo
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PaymentAmountMap">
            <summary>
            Maps a PaymentAmount to a DB entity
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PaymentAmountMap.#ctor">
            <summary>
            Maps a PaymentAmount to a DB entity
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearlyUnitMap">
            <summary>
            Mapping from YearlyUnit to IMPORT_YE_AMOUNT
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearlyUnitMap.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearlyUnitMap"/>.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearlyTaxInstanceMap">
            <summary>
            Mapping from YearlyInstance to IMPORT_YE
            </summary>
            <seealso cref="T:TaxHub.Models.YearEndIngestion.YearlyTaxInstance" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearlyTaxInstanceMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearlyTaxInstanceMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientITaxDescMap">
            <summary>
            Mapping file for CLIENT_ITAX_DESC table
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientITaxDescMap.#ctor">
            <summary>
            Initializes an instance of a <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientITaxDescMap"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndAgencyFileMap.#ctor">
            <summary>
            Maps a YearEndAgencyFile to a DB entity
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndAgencyMap">
            <summary>
            <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndAgencyMap"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndAgencyMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearlyCountMap">
            <summary>
            Mapping from YearlyCount to IMPORT_YE_COUNT
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearlyCountMap.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearlyCountMap"/>.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.DepositScheduleMap">
            <summary>
            This class represents UTE Schedule_Table table mappings
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.DepositScheduleMap.#ctor">
            <summary>
            The Default Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingPayeeReturnTypeMap">
            <summary>
            EfilingPayeeRetrunType Mapping Class 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingPayeeReturnTypeMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingPayeeReturnTypeMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.HolidayMap">
            <summary>
            Holiday EF Mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.HolidayMap.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PenaltyInterestDetailMap">
            <summary>
            Maps a PenaltyInterestDetail to a DB entity
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PenaltyInterestDetailMap.#ctor">
            <summary>
            Maps a PenaltyInterestDetail to a DB entity
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PenaltyInterestMap">
            <summary>
            Maps a PrintableDocument to a DB entity
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PenaltyInterestMap.#ctor">
            <summary>
            Maps a PenaltyInterest to a DB entity
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndTaxFileRequestDetailsMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndTaxFileRequestDetail"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndTaxFileRequestDetailsMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndTaxFileMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndTaxFile"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndTaxFileMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndTaxFileRequestMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndTaxFileRequest"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndTaxFileRequestMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostRAMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndPostRAInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostRAMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostREMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo"/> Ef mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostREMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostROMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndPostROInfo"/> Ef mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostROMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostRSMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndPostRSInfo"/> Ef mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostRSMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostRTMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndPostRTInfo"/> Ef mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostRTMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostRUMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndPostRUInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostRUMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostRVMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndRVInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostRVMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostRWMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndPostRWMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndProcessMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndProcessing"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndProcessMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRAMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRAMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndREMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndREMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRFMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndRFInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRFMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndROMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndROInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndROMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRSMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRSMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRTMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndRTInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRTMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRUMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndRUInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRUMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRVMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndRVInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRVMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.YearEndRWMap">
            <summary>
            <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo"/> EF mapping
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.FilingCollectorGroupMap">
            <summary>
            Mapping from FilingCollectorGroup to FILING_COLLECTOR_GROUP
            </summary>
            <seealso cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.FilingCollectorGroupMap" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.FilingCollectorGroupMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Models.FilingCollectorGroup"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AgencyAchMap">
            <summary>
            Mapping from AgencyAch to AGENCY_ACH
            </summary>
            <seealso cref="T:TaxHub.Models.AgencyAch" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AgencyAchMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AgencyAchMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AgencyCheckingInfoMap">
            <summary>
            Agency Checking Info
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AgencyCheckingInfoMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AgencyCheckingInfoMap"/> class
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CheckDistributionMap">
            <summary>
            The Check distribution db context map.
            </summary>
            <seealso cref="T:TaxHub.Models.Check" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CheckDistributionMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CheckDistributionMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CheckMap">
            <summary>
            The Check db context map.
            </summary>
            <seealso cref="T:TaxHub.Models.Check" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CheckMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CheckMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientParentChildMap">
            <summary>
            Map for ClientParentChild table
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientParentChildMap.#ctor">
            <summary>
            Client parent/child relation mapping
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CreditTransactionMap">
            <summary>
            Credit transaction map
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CreditTransactionMap.#ctor">
            <summary>
            Credit tracking map
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientNoteMap">
            <summary>
            Class maps a note to a DB entity
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientNoteMap.#ctor">
            <summary>
            Will map a note to DB entity
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingAcknowledgmentMap">
            <summary>
            The Efiling acknowledgment Mappings.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingAcknowledgmentMap.#ctor">
            <summary>
            Constructor Efiling Acknowledgement map
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingAcknowlegmentAlertMap">
            <summary>
            Maps Efiling Acknowledgement alert.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingAcknowlegmentAlertMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingAcknowlegmentAlertMap"/> class.
            
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingClientStatusMap">
            <summary>
            EFilingClientStatus EntityMap
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingClientStatusMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingClientStatusMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingMap">
            <summary>
            The UTE EFiling
            </summary>
            <seealso cref="T:TaxHub.Models.EFiling" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EFilingMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.FederalElectronicTransferDistributionMap">
            <summary>
            The Federal electronic transfer distribution db context map.
            </summary>
            <seealso cref="T:TaxHub.Models.Check" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.FederalElectronicTransferDistributionMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.FederalElectronicTransferDistributionMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.FederalElectronicTransferMap">
            <summary>
            The Federal Electronic Transfer db context map.
            </summary>
            <seealso cref="T:TaxHub.Models.FederalElectronicTransfer" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.FederalElectronicTransferMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.FederalElectronicTransferMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.MailingAddressMap">
            <summary>
            Mailing address map
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.MailingAddressMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.MailingAddressMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ProcessingTaxInstanceMap">
            <summary>
            Processing Tax Instance map
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ProcessingTaxInstanceMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.TaxCodeMappingMap">
            <summary>
            TaxCodeMapping EF mapping
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.NonPublicColumnAttributeConvention">
            <summary>
            Convention to support binding private or protected properties to EF columns.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.NonPublicColumnAttributeConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.NonPublicColumnAttributeConvention"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PayeeEfileInfoMap">
            <summary>
            Mapping from AgencyAch to AGENCY_ACH
            </summary>
            <seealso cref="T:TaxHub.Models.PayeeEfileInfo" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PayeeEfileInfoMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AgencyAchMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PreparerCheckMap">
            <summary>
            Preparer Check Map
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PreparerCheckMap.#ctor">
            <summary>
            Preparer Check Map
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PreparerMap">
            <summary>
            Preparer map
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PreparerMap.#ctor">
            <summary>
            Preparar map
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PrintableDocumentMap">
            <summary>
            Maps a PrintableDocument to a DB entity
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PrintableDocumentMap.#ctor">
            <summary>
            Maps a PrintableDocument to Db entity
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.StateElectronicTransferDistributionMap">
            <summary>
            The Federal electronic transfer distribution db context map.
            </summary>
            <seealso cref="T:TaxHub.Models.Check" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.StateElectronicTransferDistributionMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.StateElectronicTransferDistributionMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.StateElectronicTransferMap">
            <summary>
            The State Electronic Transfer db context map.
            </summary>
            <seealso cref="T:TaxHub.Models.StateElectronicTransfer" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.StateElectronicTransferMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.StateElectronicTransferMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.TaxCodeMap">
            <summary>
            TaxCode EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.TaxCodeMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientPayrollMap">
            <summary>
            Mapping to client_payroll table
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientPayrollMap.#ctor">
            <summary>
            The Ctor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CombinePayeeMap">
            <summary>
            Combine Payee EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CombinePayeeMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Models.CombinePayee"/> class
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AddressMap">
            <summary>
            Map for Address Model
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AddressMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AddressMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AlertMap">
            <summary>
            The Alert EF mapping class
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AlertMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.InputTaxUnitMap">
            <summary>
             The Input Tax Unit db context map.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.InputTaxUnitMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.InputTaxUnitMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.InputTaxInstanceMap">
            <summary>
            Maps InputTaxInstance to PTM table input_payroll
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.InputTaxInstanceMap.#ctor">
            <summary>
            Initializes a new instance of the InputTaxInstanceMap
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CompanyContactMap">
            <summary>
            This class represents the CompanyContact
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CompanyContactMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CompanyContactMap"/> class.
            
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CompanyMap">
            <summary>
            Client map for Company model
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CompanyMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.CompanyMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PaymentMap">
            <summary>
            Class maps a payment to a DB entity
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PaymentMap.#ctor">
            <summary>
            Will map a Payment to a DB Entity
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PostDistributionMap">
            <summary>
            Class maps a PostDistribution to a DB entity
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PostDistributionMap.#ctor">
            <summary>
            Will map a PostDistribution to a DB Entity
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EmployeeQuarterlyMap">
            <summary>
            Mapping from Employee to IMPORT_QE_EMPLOYEE
            </summary>
            <seealso cref="T:TaxHub.Models.EmployeeQuarterly" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EmployeeQuarterlyMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EmployeeQuarterlyMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AgencyMap">
            <summary>
            The Agency db context map.
            </summary>
            <seealso cref="T:TaxHub.Models.Agency" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AgencyMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AgencyMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.NamedTaxRepresentativeMap">
            <summary>
            The NTR EF mapping class
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.NamedTaxRepresentativeMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PeriodicTaxInstanceMap">
            <summary>
            Mapping from PeriodicTaxInstance to IMPORT_PAYROLL
            </summary>
            <seealso cref="T:TaxHub.Models.PeriodicTaxInstance" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PeriodicTaxInstanceMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.PeriodicTaxInstanceMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyCountMap">
            <summary>
            Mapping from QuarterlyCount to IMPORT_QE_COUNT
            </summary>
            <seealso cref="T:TaxHub.Models.QuarterlyCount" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyCountMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyEmployeeMiscMap">
            <summary>
            Mapping from QuarterlyEmployeeMisc to IMPORT_QE_EEMISC
            </summary>
            <seealso cref="T:TaxHub.Models.QuarterlyEmployeeMisc" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyEmployeeMiscMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyEmployeeMiscMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyMiscUnitMap">
            <summary>
            Mapping from QuarterlyMiscUnit to IMPORT_QE_MISC
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyMiscUnitMap.#ctor">
            <summary>
            Mapping from QuarterlyMiscUnit to IMPORT_QE_MISC
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyTaxInstanceMap">
            <summary>
            Mapping from QuarterlyInstance to IMPORT_QE
            </summary>
            <seealso cref="T:TaxHub.Models.QuarterlyTaxInstance" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyTaxInstanceMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyTaxInstanceMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientDraftMap">
            <summary>
            Client draft map
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientDraftMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyUnitMap">
            <summary>
            Mapping from QuarterlyUnit to IMPORT_QE_AMOUNT
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.QuarterlyUnitMap.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientMap">
            <summary>
            The UTE client map.
            </summary>
            <seealso cref="T:TaxHub.Models.Client" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ClientMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EmployeePayrollMap">
            <summary>
            Mapping from EmployeePayroll to IMPORT_EMPLOYEE
            </summary>
            <seealso cref="T:TaxHub.Models.EmployeePayroll" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EmployeePayrollMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.EmployeePayrollMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ImportClientMap">
            <summary>
            ImportClient mapping
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ImportClientMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ImportClientMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ScheduleMap">
            <summary>
            The Schedule db context map.
            </summary>
            <seealso cref="T:TaxHub.Models.Schedule" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ScheduleMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.ScheduleMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.LiabilityMap">
            <summary>
            Class maps a liablity to a DB entity
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.LiabilityMap.#ctor">
            <summary>
            Will map a Liability to a DB Entity
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.TaxUnitMap">
            <summary>
            Entity Framework mapping alcass for TaxUnit
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.TaxUnitMap.#ctor">
            <summary>
            Initialize the instance of the mapping class
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.TenantMap">
            <summary>
            The Tenant EF mapping class
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.TenantMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICreditApplicationLockingDbContextFactory">
            <summary>
            Factory to create SessionLock dbcontext.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICreditApplicationLockingDbContextFactory.Create">
            <summary>
            Create instance.
            </summary>
            <returns>DbContext</returns>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndAutoPostDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAutoPostDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAutoPostDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAutoPostDbContext.YearEndAutoPostDbContextFactory">
            <summary>
            YearEndPostRWDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAutoPostDbContext.YearEndAutoPostDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAutoPostDbContext.YearEndAutoPostDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAutoPostDbContext.YearEndAutoPostDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAutoPostDbContext.YearEndAutoPostDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IDomainEventOutboxDbContextFactory">
            <summary>
            Factory to create DomainEventOutbox dbcontext.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IDomainEventOutboxDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DomainEventOutboxDbContext">
            <summary>
            DomainEventOutboxDbContext
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DomainEventOutboxDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DomainEventOutboxDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DomainEventOutboxDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DomainEventOutboxDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DomainEventOutboxDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DomainEventOutboxDbContext.DomainEventOutboxDbContextFactory">
            <summary>
            DomainEventOutboxDbContextFactory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DomainEventOutboxDbContext.DomainEventOutboxDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            DomainEventOutboxDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DomainEventOutboxDbContext.DomainEventOutboxDbContextFactory.Create">
            <summary>
            Creates the DB context
            </summary>
            <returns>The DB context</returns>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DomainEventOutboxDbContext.DomainEventOutboxDbContextFactory.Recreate">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPostPayrollDbContextFactory">
            <summary>
            PostPayrollDbContext factory creates new PostPayrollDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPostPayrollDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PostPayrollDbContext">
            <summary>
            DbContext for root aggregate PostPayroll
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PostPayrollDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PostPayrollDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PostPayrollDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PostPayrollDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PostPayrollDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PostPayrollDbContext.PostPayrollDbContextFactory">
            <summary>
            PostPayrollDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PostPayrollDbContext.PostPayrollDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PostPayrollDbContext.PostPayrollDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PostPayrollDbContext.PostPayrollDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PostPayrollDbContext.PostPayrollDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndCsvClientDbContextFactory">
            <summary>
            IYearEndCsvClientDbContextFactory factory creates new YearEndCsvClientDbContextFactory instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndCsvClientDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndCsvEmployeeDbContextFactory">
            <summary>
            IYearEndCsvEmployeeDbContextFactory factory creates new YearEndCsvEmployeeDbContextFactory instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndCsvEmployeeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostCsvClientDbContextFactory">
            <summary>
            IYearEndPostCsvClientDbContextFactory factory creates new YearEndPostCsvClientDbContextFactory instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostCsvClientDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostCsvEmployeeDbContextFactory">
            <summary>
            IYearEndPostCsvEmployeeDbContextFactory factory creates new YearEndPostCsvEmployeeDbContextFactory instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostCsvEmployeeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndCsvClientDbContext.YearEndCsvClientDbContextFactory">
            <summary>
            YearEndCsvClientDbContextFactory Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndCsvClientDbContext.YearEndCsvClientDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndCsvClientDbContext.YearEndCsvClientDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndCsvClientDbContext.YearEndCsvClientDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndCsvClientDbContext.YearEndCsvClientDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndCsvEmployeeDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndCsvEmployeeDbContext.YearEndCsvEmployeeDbContextFactory">
            <summary>
            YearEndCsvClientDbContextFactory Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndCsvEmployeeDbContext.YearEndCsvEmployeeDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndCsvEmployeeDbContext.YearEndCsvEmployeeDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndCsvEmployeeDbContext.YearEndCsvEmployeeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndCsvEmployeeDbContext.YearEndCsvEmployeeDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostCsvClientDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostCsvClientDbContext.YearEndPostCsvClientDbContextFactory">
            <summary>
            YearEndCsvClientDbContextFactory Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostCsvClientDbContext.YearEndPostCsvClientDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostCsvClientDbContext.YearEndPostCsvClientDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostCsvClientDbContext.YearEndPostCsvClientDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostCsvClientDbContext.YearEndPostCsvClientDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostCsvEmployeeDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostCsvEmployeeDbContext.YearEndPostCsvEmployeeDbContextFactory">
            <summary>
            YearEndCsvClientDbContextFactory Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostCsvEmployeeDbContext.YearEndPostCsvEmployeeDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostCsvEmployeeDbContext.YearEndPostCsvEmployeeDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostCsvEmployeeDbContext.YearEndPostCsvEmployeeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostCsvEmployeeDbContext.YearEndPostCsvEmployeeDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateDbContext.StateDbContextFactory">
            <summary>
            ClientDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateDbContext.StateDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateDbContext.StateDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateDbContext.StateDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateDbContext.StateDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IStateDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ExportZeroEftTrackerDbContext">
            <summary>
            DbContext for root aggregate ExportZeroEftTracker
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ExportZeroEftTrackerDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ExportZeroEftTrackerDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ExportZeroEftTrackerDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ExportZeroEftTrackerDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ExportZeroEftTrackerDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ExportZeroEftTrackerDbContext.ExportZeroEftTrackerDbContextFactory">
            <summary>
            ExportZeroEftTrackerDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ExportZeroEftTrackerDbContext.ExportZeroEftTrackerDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ExportZeroEftTrackerDbContext.ExportZeroEftTrackerDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ExportZeroEftTrackerDbContext.ExportZeroEftTrackerDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ExportZeroEftTrackerDbContext.ExportZeroEftTrackerDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IExportZeroEftTrackerDbContextFactory">
            <summary>
            IExportZeroEftTrackerDbContextFactory factory creates new ExportZeroEftTrackerDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IExportZeroEftTrackerDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndStagingDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndStagingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndStagingDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndStagingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndStagingDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndStagingDbContext.YearEndStagingDbContextFactory">
            <summary>
            YearEndREDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndStagingDbContext.YearEndStagingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndStagingDbContext.YearEndStagingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndStagingDbContext.YearEndStagingDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndStagingDbContext.YearEndStagingDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndIngestedFileDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndIngestedFileDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessInfoDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndIngestedFileDbContext.YearEndIngestedFileDbContextFactory">
            <summary>
            YearEndIngestedFileDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndIngestedFileDbContext.YearEndIngestedFileDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndIngestedFileDbContext.YearEndIngestedFileDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndIngestedFileDbContext.YearEndIngestedFileDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndIngestedFileDbContext.YearEndIngestedFileDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndFileInfoDbContextFactory">
            <summary>
            The year end file info Database context factory
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndFileInfoDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndFileInfoDbContext">
            <summary>
            The database context for year end file info
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndFileInfoDbContext.#ctor">
            <summary>
            Initializes an instance of <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndFileInfoDbContext"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndFileInfoDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes an instance of <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndFileInfoDbContext"/>
            </summary>
            <param name="connectionString">The connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndFileInfoDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndFileInfoDbContext.YearEndFileInfoDbContextFactory">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndFileInfoDbContext.YearEndFileInfoDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes an instance of <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndFileInfoDbContext.YearEndFileInfoDbContextFactory"/>
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndFileInfoDbContext.YearEndFileInfoDbContextFactory.Create">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndFileInfoDbContext.YearEndFileInfoDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientITaxDescDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientITaxDescDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientITaxDescDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientITaxDescDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientITaxDescDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientITaxDescDbContext.ClientITaxDescDbContextFactory">
            <summary>
            ClientDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientITaxDescDbContext.ClientITaxDescDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientITaxDescDbContext.ClientITaxDescDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientITaxDescDbContext.ClientITaxDescDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientITaxDescDbContext.ClientITaxDescDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientITaxDescDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext"/> class.
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext"/> class.
            </summary>
            <param name="conncectionString">The conncection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext.EFilingPayeeReturnTypeDbContextFactory">
            <summary>
            EFiling Payee Return Type DbContext Factory
            </summary>
            <seealso cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEFilingPayeeReturnTypeDbContextFactory" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext.EFilingPayeeReturnTypeDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext.EFilingPayeeReturnTypeDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext.EFilingPayeeReturnTypeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext" /> is recreate.
            </summary>
            <value>
              <c>true</c> if recreate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingPayeeReturnTypeDbContext.EFilingPayeeReturnTypeDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndProcessInfoDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndAgencyDbContextFactory">
            <summary>
            IYearEndAgencyDbContextFactory factory creates new YearEndAgencyDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndAgencyDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearlyTaxInstanceDbContextFactory">
            <summary>
            Interface for YearlyTaxInstanceDbContextFactory.
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearlyTaxInstanceDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessInfoDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessInfoDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessInfoDbContext.YearEndProcessInfoDbContextFactory">
            <summary>
            YearEndPostRWDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessInfoDbContext.YearEndProcessInfoDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessInfoDbContext.YearEndProcessInfoDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessInfoDbContext.YearEndProcessInfoDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessInfoDbContext.YearEndProcessInfoDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearlyTaxInstanceDbContext">
            <summary>
            The yearly tax instance dbcontext.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearlyTaxInstanceDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearlyTaxInstanceDbContext"/> class.
            Constructor
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearlyTaxInstanceDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearlyTaxInstanceDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate"> need to recreate</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearlyTaxInstanceDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            Executed while creating the model
            </summary>
            <param name="modelBuilder">Model Builder</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearlyTaxInstanceDbContext.YearlyTaxInstanceDbContextFactory">
            <summary>
             YearlyTaxInstanceDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearlyTaxInstanceDbContext.YearlyTaxInstanceDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearlyTaxInstanceDbContext.YearlyTaxInstanceDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearlyTaxInstanceDbContext.YearlyTaxInstanceDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearlyTaxInstanceDbContext.YearlyTaxInstanceDbContextFactory.Create">
            <summary>
            Creates DB Context
            </summary>
            <returns> DB Context </returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAgencyDbContext">
            <summary>
            DbContext for root aggregate YearEndEfw2File
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAgencyDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAgencyDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAgencyDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAgencyDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAgencyDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAgencyDbContext.YearEndAgencyDbContextFactory">
            <summary>
            YearEndPostREDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAgencyDbContext.YearEndAgencyDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAgencyDbContext.YearEndAgencyDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAgencyDbContext.YearEndAgencyDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndAgencyDbContext.YearEndAgencyDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.HolidayDbContext">
            <summary>
            Holiday Db context
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.HolidayDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.HolidayDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.HolidayDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize Constructor
            </summary>
            <param name="connectionstring">Connection String</param>
            <param name="recreate">Recreate</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.HolidayDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.HolidayDbContext.HolidayDbContextFactory">
            <summary>
            Holiday Db Context
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.HolidayDbContext.HolidayDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.HolidayDbContext.HolidayDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.HolidayDbContext.HolidayDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.HolidayDbContext.HolidayDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IDepositScheduleDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEFilingPayeeReturnTypeDbContextFactory">
            <summary>
            EFiling Payee Return Type DB Context Factory
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEFilingPayeeReturnTypeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IHolidayDbContextFactory">
            <summary>
            HolidayDbContext factory creates new HolidayDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IHolidayDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPenaltyInterestDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ISessionLockDbContextFactory">
            <summary>
            Factory to create SessionLock dbcontext.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ISessionLockDbContextFactory.Create">
            <summary>
            Create instance.
            </summary>
            <returns>DbContext</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndTaxFileDbContextFactory">
            <summary>
            IYearEndEfw2FileDbContextFactory factory creates new YearEndPostREDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndTaxFileDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndTaxFileRequestDbContextFactory">
            <summary>
            IYearEndEfw2FileDbContextFactory factory creates new YearEndPostREDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndTaxFileRequestDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRADbContextFactory">
            <summary>
            IYearEndPostRADbContextFactory factory creates new YearEndPostRADbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRADbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostREDbContextFactory">
            <summary>
            IYearEndPostREDbContextFactory factory creates new YearEndPostREDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostREDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRODbContextFactory">
            <summary>
            IYearEndPostRODbContextFactory factory creates new YearEndPostRODbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRODbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRSDbContextFactory">
            <summary>
            IYearEndPostRSDbContextFactory factory creates new YearEndPostRSDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRSDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRTDbContextFactory">
            <summary>
            IYearEndPostRTDbContextFactory factory creates new YearEndPostRTDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRTDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRUDbContextFactory">
            <summary>
            IYearEndPostRUDbContextFactory factory creates new YearEndPostRUDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRUDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRVDbContextFactory">
            <summary>
            IYearEndPostRVDbContextFactory factory creates new YearEndPostRVDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRVDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRWDbContextFactory">
            <summary>
            IYearEndPostRWDbContextFactory factory creates new YearEndPostRWDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRWDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndProcessDbContextFactory">
            <summary>
            IYearEndProcessDbContextFactory factory creates new YearEndProcessDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndProcessDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRADbContextFactory">
            <summary>
            IYearEndRADbContextFactory factory creates new YearEndRADbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRADbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndREDbContextFactory">
            <summary>
            IYearEndREDbContextFactory factory creates new YearEndREDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndREDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRFDbContextFactory">
            <summary>
            IYearEndRFDbContextFactory factory creates new YearEndRFDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRFDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRODbContextFactory">
            <summary>
            IYearEndRODbContextFactory factory creates new YearEndRODbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRODbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRSDbContextFactory">
            <summary>
            IYearEndRSDbContextFactory factory creates new YearEndRSDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRSDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRTDbContextFactory">
            <summary>
            IYearEndRTDbContextFactory factory creates new YearEndRTDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRTDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRUDbContextFactory">
            <summary>
            IYearEndRUDbContextFactory factory creates new YearEndRUDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRUDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRVDbContextFactory">
            <summary>
            IYearEndRVDbContextFactory factory creates new YearEndRVDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRVDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRWDbContextFactory">
            <summary>
            IYearEndRWDbContextFactory factory creates new YearEndRWDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRWDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PenaltyInterestDbContext">
            <summary>
            DbContext for root aggregate PenaltyInterest 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PenaltyInterestDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PenaltyInterestDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PenaltyInterestDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PenaltyInterestDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PenaltyInterestDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PenaltyInterestDbContext.PenaltyInterestDbContextFactory">
            <summary>
            PenaltyInterestDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PenaltyInterestDbContext.PenaltyInterestDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PenaltyInterestDbContext.PenaltyInterestDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PenaltyInterestDbContext.PenaltyInterestDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PenaltyInterestDbContext.PenaltyInterestDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FilingCollectorGroupDbContext">
            <summary>
            DbContext for FilingCollectorGroup (FILING_COLLECTOR_GROUP)
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FilingCollectorGroupDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FilingCollectorGroupDbContext"/> class
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FilingCollectorGroupDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FilingCollectorGroupDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FilingCollectorGroupDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FilingCollectorGroupDbContext.FilingCollectorGroupDbContextFactory">
            <summary>
            FilingCollectorGroupDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FilingCollectorGroupDbContext.FilingCollectorGroupDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FilingCollectorGroupDbContext.FilingCollectorGroupDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FilingCollectorGroupDbContext.FilingCollectorGroupDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FilingCollectorGroupDbContext.FilingCollectorGroupDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IFilingCollectorGroupDbContextFactory">
            <summary>
            FilingCollectorGroupDbContext factory creates new FilingCollectorGroupDbContextFactory instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IFilingCollectorGroupDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DepositScheduleDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DepositScheduleDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DepositScheduleDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DepositScheduleDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DepositScheduleDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DepositScheduleDbContext.DepositScheduleDbContextFactory">
            <summary>
            DepositScheduleDbContextFactory factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DepositScheduleDbContext.DepositScheduleDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DepositScheduleDbContext.DepositScheduleDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DepositScheduleDbContext.DepositScheduleDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.DepositScheduleDbContext.DepositScheduleDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.SessionLockDbContext">
            <summary>
            SessionLockDbContext
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.SessionLockDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.SessionLockDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.SessionLockDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.SessionLockDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.SessionLockDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.SessionLockDbContext.SessionLockDbContextFactory">
            <summary>
            SessionLockDbContextFactory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.SessionLockDbContext.SessionLockDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            SessionLockDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.SessionLockDbContext.SessionLockDbContextFactory.Create">
            <summary>
            Creates the DB context
            </summary>
            <returns>The DB context</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileDbContext">
            <summary>
            DbContext for root aggregate YearEndEfw2File
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileDbContext.YearEndTaxFileDbContextFactory">
            <summary>
            YearEndPostREDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileDbContext.YearEndTaxFileDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileDbContext.YearEndTaxFileDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileDbContext.YearEndTaxFileDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileDbContext.YearEndTaxFileDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileRequestDbContext">
            <summary>
            DbContext for root aggregate YearEndEfw2File
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileRequestDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileRequestDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileRequestDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileRequestDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileRequestDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileRequestDbContext.YearEndTaxFileRequestDbContextFactory">
            <summary>
            YearEndPostREDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileRequestDbContext.YearEndTaxFileRequestDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileRequestDbContext.YearEndTaxFileRequestDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileRequestDbContext.YearEndTaxFileRequestDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndTaxFileRequestDbContext.YearEndTaxFileRequestDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRADbContext">
            <summary>
            DbContext for root aggregate YearEndPostRA
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRADbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRADbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRADbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRADbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRADbContext.YearEndPostRADbContextFactory">
            <summary>
            YearEndPostRADbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRADbContext.YearEndPostRADbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRADbContext.YearEndPostRADbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRADbContext.YearEndPostRADbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRADbContext.YearEndPostRADbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostREDbContext">
            <summary>
            DbContext for root aggregate YearEndPostRE
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostREDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostREDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostREDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostREDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostREDbContext.YearEndPostREDbContextFactory">
            <summary>
            YearEndPostREDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostREDbContext.YearEndPostREDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostREDbContext.YearEndPostREDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostREDbContext.YearEndPostREDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostREDbContext.YearEndPostREDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRODbContext">
            <summary>
            DbContext for root aggregate YearEndPostRO
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRODbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRODbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRODbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRODbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRODbContext.YearEndPostRODbContextFactory">
            <summary>
            YearEndPostRODbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRODbContext.YearEndPostRODbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRODbContext.YearEndPostRODbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRODbContext.YearEndPostRODbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRODbContext.YearEndPostRODbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRSDbContext">
            <summary>
            DbContext for root aggregate YearEndPostRS
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRSDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRSDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRSDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRSDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRSDbContext.YearEndPostRSDbContextFactory">
            <summary>
            YearEndPostRSDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRSDbContext.YearEndPostRSDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRSDbContext.YearEndPostRSDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRSDbContext.YearEndPostRSDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRSDbContext.YearEndPostRSDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRTDbContext">
            <summary>
            DbContext for root aggregate YearEndPostRT
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRTDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRTDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRTDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRTDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRTDbContext.YearEndPostRTDbContextFactory">
            <summary>
            YearEndPostRTDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRTDbContext.YearEndPostRTDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRTDbContext.YearEndPostRTDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRTDbContext.YearEndPostRTDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRTDbContext.YearEndPostRTDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRUDbContext">
            <summary>
            DbContext for root aggregate YearEndPostRU
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRUDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRUDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRUDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRUDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRUDbContext.YearEndPostRUDbContextFactory">
            <summary>
            YearEndPostRUDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRUDbContext.YearEndPostRUDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRUDbContext.YearEndPostRUDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRUDbContext.YearEndPostRUDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRUDbContext.YearEndPostRUDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRVDbContext">
            <summary>
            DbContext for root aggregate YearEndPostRV
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRVDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRVDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRVDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRVDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRVDbContext.YearEndPostRVDbContextFactory">
            <summary>
            YearEndPostRVDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRVDbContext.YearEndPostRVDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRVDbContext.YearEndPostRVDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRVDbContext.YearEndPostRVDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRVDbContext.YearEndPostRVDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRWDbContext">
            <summary>
            DbContext for root aggregate YearEndPostRW
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRWDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRWDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRWDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRWDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRWDbContext.YearEndPostRWDbContextFactory">
            <summary>
            YearEndPostRWDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRWDbContext.YearEndPostRWDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRWDbContext.YearEndPostRWDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRWDbContext.YearEndPostRWDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndPostRWDbContext.YearEndPostRWDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessDbContext">
            <summary>
            DbContext for root aggregate YearEndProcess
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessDbContext.YearEndProcessDbContextFactory">
            <summary>
            YearEndProcessDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessDbContext.YearEndProcessDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessDbContext.YearEndProcessDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessDbContext.YearEndProcessDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndProcessDbContext.YearEndProcessDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRADbContext">
            <summary>
            DbContext for root aggregate YearEndRA
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRADbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRADbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRADbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRADbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRADbContext.YearEndRADbContextFactory">
            <summary>
            YearEndRADbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRADbContext.YearEndRADbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRADbContext.YearEndRADbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRADbContext.YearEndRADbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRADbContext.YearEndRADbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndREDbContext">
            <summary>
            DbContext for root aggregate YearEndRE
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndREDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndREDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndREDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndREDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndREDbContext.YearEndREDbContextFactory">
            <summary>
            YearEndREDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndREDbContext.YearEndREDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndREDbContext.YearEndREDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndREDbContext.YearEndREDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndREDbContext.YearEndREDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRFDbContext">
            <summary>
            DbContext for root aggregate YearEndRF
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRFDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRFDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRFDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRFDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRFDbContext.YearEndRFDbContextFactory">
            <summary>
            YearEndRFDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRFDbContext.YearEndRFDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRFDbContext.YearEndRFDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRFDbContext.YearEndRFDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRFDbContext.YearEndRFDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRODbContext">
            <summary>
            DbContext for root aggregate YearEndRO
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRODbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRODbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRODbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRODbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRODbContext.YearEndRODbContextFactory">
            <summary>
            YearEndRODbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRODbContext.YearEndRODbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRODbContext.YearEndRODbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRODbContext.YearEndRODbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRODbContext.YearEndRODbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRSDbContext">
            <summary>
            DbContext for root aggregate YearEndRS
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRSDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRSDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRSDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRSDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRSDbContext.YearEndRSDbContextFactory">
            <summary>
            YearEndRSDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRSDbContext.YearEndRSDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRSDbContext.YearEndRSDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRSDbContext.YearEndRSDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRSDbContext.YearEndRSDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRTDbContext">
            <summary>
            DbContext for root aggregate YearEndRT
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRTDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRTDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRTDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRTDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRTDbContext.YearEndRTDbContextFactory">
            <summary>
            YearEndRTDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRTDbContext.YearEndRTDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRTDbContext.YearEndRTDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRTDbContext.YearEndRTDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRTDbContext.YearEndRTDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRUDbContext">
            <summary>
            DbContext for root aggregate YearEndRU
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRUDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRUDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRUDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRUDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRUDbContext.YearEndRUDbContextFactory">
            <summary>
            YearEndRUDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRUDbContext.YearEndRUDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRUDbContext.YearEndRUDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRUDbContext.YearEndRUDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRUDbContext.YearEndRUDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRVDbContext">
            <summary>
            DbContext for root aggregate YearEndRV
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRVDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRVDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRVDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRVDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRVDbContext.YearEndRVDbContextFactory">
            <summary>
            YearEndRVDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRVDbContext.YearEndRVDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRVDbContext.YearEndRVDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRVDbContext.YearEndRVDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRVDbContext.YearEndRVDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRWDbContext">
            <summary>
            DbContext for root aggregate YearEndRW
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRWDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRWDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRWDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRWDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRWDbContext.YearEndRWDbContextFactory">
            <summary>
            YearEndRWDbContext Factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRWDbContext.YearEndRWDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRWDbContext.YearEndRWDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRWDbContext.YearEndRWDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.YearEndRWDbContext.YearEndRWDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyAchDbContext">
            <summary>
            DbContext for AgencyAch (AGENCY_ACH)
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyAchDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyAchDbContext"/> class
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyAchDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyAchDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyAchDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyAchDbContext.AgencyAchDbContextFactory">
            <summary>
            AgencyAchDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyAchDbContext.AgencyAchDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyAchDbContext.AgencyAchDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyAchDbContext.AgencyAchDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyAchDbContext.AgencyAchDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyCheckingInfoDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyCheckingInfoDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyCheckingInfoDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyCheckingInfoDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyCheckingInfoDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyCheckingInfoDbContext.AgencyCheckingInfoDbContextFactory">
            <summary>
            AgencyCheckingInfoDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyCheckingInfoDbContext.AgencyCheckingInfoDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyCheckingInfoDbContext.AgencyCheckingInfoDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyCheckingInfoDbContext.AgencyCheckingInfoDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyCheckingInfoDbContext.AgencyCheckingInfoDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CheckDbContext">
            <summary>
            DbContext for root aggregate Check 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CheckDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CheckDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CheckDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CheckDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CheckDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CheckDbContext.CheckDbContextFactory">
            <summary>
            CheckDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CheckDbContext.CheckDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CheckDbContext.CheckDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CheckDbContext.CheckDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CheckDbContext.CheckDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientAgencyDbContext">
            <summary>
            DbContext for root agregate ClientAgency
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientAgencyDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientAgencyDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientAgencyDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientAgencyDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientAgencyDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientAgencyDbContext.ClientAgencyDbContextFactory">
            <summary>
            ClientAgencyDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientAgencyDbContext.ClientAgencyDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientAgencyDbContext.ClientAgencyDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientAgencyDbContext.ClientAgencyDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientAgencyDbContext.ClientAgencyDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientParentChildDbContext">
            <summary>
            DbContext for root aggregate ClientParentChild
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientParentChildDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientParentChildDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientParentChildDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientParentChildDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientParentChildDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientParentChildDbContext.ClientParentChildDbContextFactory">
            <summary>
            ClientParentChildDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientParentChildDbContext.ClientParentChildDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientParentChildDbContext.ClientParentChildDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientParentChildDbContext.ClientParentChildDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientParentChildDbContext.ClientParentChildDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientPayrollDbContext">
            <summary>
            Client Payroll DB Context
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientPayrollDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientPayrollDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientPayrollDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientPayrollDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientPayrollDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            This method is called when the model for a derived context has been initialized, but
            before the model has been locked down and used to initialize the context.  The default
            implementation of this method does nothing, but it can be overridden in a derived class
            such that the model can be further configured before it is locked down.
            </summary>
            <remarks>
            Typically, this method is called only once when the first instance of a derived context
            is created.  The model for that context is then cached and is for all further instances of
            the context in the app domain.  This caching can be disabled by setting the ModelCaching
            property on the given ModelBuidler, but note that this can seriously degrade performance.
            More control over caching is provided through use of the DbModelBuilder and DbContextFactory
            classes directly.
            </remarks>
            <param name="modelBuilder"> The builder that defines the model for the context being created. </param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientPayrollDbContext.ClientPayrollDbContextFactory">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientPayrollDbContext.ClientPayrollDbContextFactory"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientPayrollDbContext.ClientPayrollDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientPayrollDbContext.ClientPayrollDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientPayrollDbContext.ClientPayrollDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientPayrollDbContext.ClientPayrollDbContextFactory.Create">
            <summary>
            Creates DB Context
            </summary>
            <returns> DB Context </returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingAcknowledgmentDbContext">
            <summary>
            The Efiling Acknowledgement dbcontext.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingAcknowledgmentDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingAcknowledgmentDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingAcknowledgmentDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingAcknowledgmentDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingAcknowledgmentDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingAcknowledgmentDbContext.EFilingAcknowledgementDbContextFactory">
            <summary>
             EFiling DbContext Factory
            </summary>     
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingAcknowledgmentDbContext.EFilingAcknowledgementDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingAcknowledgmentDbContext"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingAcknowledgmentDbContext.EFilingAcknowledgementDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingAcknowledgmentDbContext.EFilingAcknowledgementDbContextFactory" /> is recreate.
            </summary>
            <value>
              <c>true</c> if recreate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingAcknowledgmentDbContext.EFilingAcknowledgementDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext">
            <summary>
             DbContext for EFiling
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext.EFilingDbContextFactory">
            <summary>
             EFiling DbContext Factory
            </summary>
            <seealso cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext.EFilingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext.EFilingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext.EFilingDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext.EFilingDbContextFactory" /> is recreate.
            </summary>
            <value>
              <c>true</c> if recreate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EFilingDbContext.EFilingDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEFilingAcknowledgmentDbContextFactory">
            <summary>
            EFiling Acknowledgement DB Context Factory
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEFilingAcknowledgmentDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IAgencyAchDbContextFactory">
            <summary>
            AgencyAchDbContext factory creates new AgencyAchDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IAgencyAchDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IAgencyCheckingInfoDbContextFactory">
            <summary>
            Agency Checking Info DB 
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IAgencyCheckingInfoDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientAgencyDbContextFactory">
            <summary>
            IUteClientAgencyDbContextFactory creates new IUteClientAgencytDbContextFactory
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientAgencyDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FederalElectronicTransferDbContext">
            <summary>
            DbContext for root aggregate Federal Electronic Transfer 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FederalElectronicTransferDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FederalElectronicTransferDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FederalElectronicTransferDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FederalElectronicTransferDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FederalElectronicTransferDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FederalElectronicTransferDbContext.FederalElectronicTransferDbContextFactory">
            <summary>
            FederalElectronicTransferDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FederalElectronicTransferDbContext.FederalElectronicTransferDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FederalElectronicTransferDbContext.FederalElectronicTransferDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FederalElectronicTransferDbContext.FederalElectronicTransferDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.FederalElectronicTransferDbContext.FederalElectronicTransferDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientParentChildDbContextFactory">
            <summary>
            Client parent/child relation db context factory
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientParentChildDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEFilingDbContextFactory">
            <summary>
            EFiling DB Context Factory
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEFilingDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IProcessingTaxInstanceDbContextFactory">
            <summary>
            ProcessingTaxInstanceDbContextFactory factory creates new ProcessingTaxInstanceDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IProcessingTaxInstanceDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ITaxCodeMappingDbContextFactory">
            <summary>
            TaxCodeMappingDbContext factory creates new TaxCodeMappingDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ITaxCodeMappingDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ImportClientDbContext">
            <summary>
            DbContext for root agregate ImportClient
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ImportClientDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ImportClientDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ImportClientDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ImportClientDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ImportClientDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ImportClientDbContext.ImportClientDbContextFactory">
            <summary>
            ImportClientDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ImportClientDbContext.ImportClientDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ImportClientDbContext.ImportClientDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ImportClientDbContext.ImportClientDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ImportClientDbContext.ImportClientDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPayeeEfileInfoDbContextFactory">
            <summary>
            PayeeEfileInfoDbContext factory creates new PayeeEfileInfoDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPayeeEfileInfoDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPrintableDocumentDbContextFactory">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPrintableDocumentDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether or not recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IStateElectronicTransferDbContextFactory">
            <summary>
            State electronic transfer DB Context Factory
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IStateElectronicTransferDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICombinePayeeDbContextFactory">
            <summary>
            CombineDbContext factory creates new <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CombinePayeeDbContext"/>
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICombinePayeeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ProcessingTaxInstanceDbContext">
            <summary>
            DbContext for root aggregate ProcessingTaxInstance
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ProcessingTaxInstanceDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ProcessingTaxInstanceDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ProcessingTaxInstanceDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ProcessingTaxInstanceDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ProcessingTaxInstanceDbContext.ProcessingTaxInstances">
            <summary>
            Sets of gets Processing Tax Instances
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ProcessingTaxInstanceDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ProcessingTaxInstanceDbContext.ProcessingTaxInstaceDbContextFactory">
            <summary>
            ProcessingTaxInstaceDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ProcessingTaxInstanceDbContext.ProcessingTaxInstaceDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the ProcessingTaxInstaceDbContextFactory/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ProcessingTaxInstanceDbContext.ProcessingTaxInstaceDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ProcessingTaxInstanceDbContext.ProcessingTaxInstaceDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeMappingDbContext.#ctor">
            <summary>F
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeMappingDbContext"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeMappingDbContext.TaxCodeMappings">
            <summary>
            Sets of gets Tenants
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeMappingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeMappingDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeMappingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeMappingDbContext.TaxCodeMappingDbContextFactory">
            <summary>
            TaxCodeMappingDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeMappingDbContext.TaxCodeMappingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeMappingDbContext.TaxCodeMappingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeMappingDbContext.TaxCodeMappingDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeMappingDbContext.TaxCodeMappingDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PayeeEfileInfoDbContext">
            <summary>
            DbContext for PayeeEfileInfo (Payee_EFile_Info)
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PayeeEfileInfoDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PayeeEfileInfoDbContext"/> class
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PayeeEfileInfoDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PayeeEfileInfoDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PayeeEfileInfoDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PayeeEfileInfoDbContext.PayeeEfileInfoDbContextFactory">
            <summary>
            PayeeEfileInfoDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PayeeEfileInfoDbContext.PayeeEfileInfoDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PayeeEfileInfoDbContext.PayeeEfileInfoDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PayeeEfileInfoDbContext.PayeeEfileInfoDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PayeeEfileInfoDbContext.PayeeEfileInfoDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PrintableDocumentDbContext">
            <summary>
            DbContext for root aggregate PrintableDocument
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PrintableDocumentDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PrintableDocumentDbContext.PrintableDocumentDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext.PaymentDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PrintableDocumentDbContext.PrintableDocumentDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PrintableDocumentDbContext.PrintableDocumentDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateElectronicTransferDbContext">
            <summary>
            DbContext for root aggregate State Electronic Transfer 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateElectronicTransferDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateElectronicTransferDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateElectronicTransferDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateElectronicTransferDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateElectronicTransferDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateElectronicTransferDbContext.StateElectronicTransferDbContextFactory">
            <summary>
            StateElectronicTransferDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateElectronicTransferDbContext.StateElectronicTransferDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateElectronicTransferDbContext.StateElectronicTransferDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateElectronicTransferDbContext.StateElectronicTransferDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.StateElectronicTransferDbContext.StateElectronicTransferDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CombinePayeeDbContext">
            <summary>
            Tax Code Db Context
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CombinePayeeDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CombinePayeeDbContext"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CombinePayeeDbContext.CombinePayees">
            <summary>
            Sets of gets Tenants
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CombinePayeeDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CombinePayeeDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CombinePayeeDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CombinePayeeDbContext.CombinePayeeDbContextFactory">
            <summary>
            CombinePayeeDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CombinePayeeDbContext.CombinePayeeDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext.TenantDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CombinePayeeDbContext.CombinePayeeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CombinePayeeDbContext.CombinePayeeDbContextFactory.Create">
            <summary>
            Create method
            </summary>
            <returns>Return dbContext</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICheckDbContextFactory">
            <summary>
            Check DB Context Factory that generates new Check db instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICheckDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IFederalElectronicTransferDbContextFactory">
            <summary>
            Federal electronic transfer DB Context Factory
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IFederalElectronicTransferDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPreparerCheckDbContextFactory">
            <summary>
            Interface for the Preparer Check Db Context
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPreparerCheckDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ITaxCodeDbContextFactory">
            <summary>
            TenantDbContext factory creates new TenantDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ITaxCodeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPreparerDbContextFactory">
            <summary>
            PreparerDbContext factory creates new PreparerDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPreparerDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IUltiproSyncTxTbMastDbContextFactory">
            <summary>
            UltiproSyncTxTbMastDbContext factory creates new UltiproSyncTxTbMastDbContext instances
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IUltiproSyncTxTbMastDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IUltiproSyncTxCdMastDbContextFactory">
            <summary>
            UltiproSyncTxCdMastDbContext factory creates new UltiproSyncTxCdMastDbContext instances
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IUltiproSyncTxCdMastDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerCheckDbContext">
            <summary>
            DbContext for root agregate PreparerCheck
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerCheckDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerCheckDbContext"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerCheckDbContext.PreparerChecks">
            <summary>
            Sets of gets Preparer Checks
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerCheckDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerCheckDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerCheckDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerCheckDbContext.PreparerCheckDbContextFactory">
            <summary>
            PreparerCheck factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerCheckDbContext.PreparerCheckDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerCheckDbContext.PreparerCheckDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerCheckDbContext.PreparerCheckDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerCheckDbContext.PreparerCheckDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeDbContext">
            <summary>
            Tax Code Db Context
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeDbContext"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeDbContext.TaxCodes">
            <summary>
            Sets of gets Tenants
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeDbContext.TaxCodeDbContextFactory">
            <summary>
            TenantDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeDbContext.TaxCodeDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext.TenantDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeDbContext.TaxCodeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TaxCodeDbContext.TaxCodeDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerDbContext">
            <summary>
            DbContext for root agregate TaxDisbursementAccount
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerDbContext"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerDbContext.Preparers">
            <summary>
            Sets of gets Preparers
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerDbContext.PreparerDbContextFactory">
            <summary>
            TaxDisbursementDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerDbContext.PreparerDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerDbContext.PreparerDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerDbContext.PreparerDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PreparerDbContext.PreparerDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AlertDbContext">
            <summary>
            Alert db context
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AlertDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AlertDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AlertDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AlertDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AlertDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AlertDbContext.AlertDbContextFactory">
            <summary>
            AlertDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AlertDbContext.AlertDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AlertDbContext.AlertDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AlertDbContext.AlertDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AlertDbContext.AlertDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.InputTaxInstanceDbContext">
            <summary>
            DbContext for root aggregate InputTaxInstance
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.InputTaxInstanceDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.InputTaxInstanceDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.InputTaxInstanceDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.InputTaxInstanceDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.InputTaxInstanceDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.InputTaxInstanceDbContext.InputTaxInstanceDbContextFactory">
            <summary>
            InputTaxInstanceDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.InputTaxInstanceDbContext.InputTaxInstanceDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.InputTaxInstanceDbContext.InputTaxInstanceDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.InputTaxInstanceDbContext.InputTaxInstanceDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.InputTaxInstanceDbContext.InputTaxInstanceDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CompanyDbContext">
            <summary>
            DbContext for company aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CompanyDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CompanyDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CompanyDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CompanyDbContext"/> class.
            
            </summary>
            <param name="connectionString">the connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CompanyDbContext.CompanyDbContextFactory">
            <summary>
            ClientDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CompanyDbContext.CompanyDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CompanyDbContext.CompanyDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CompanyDbContext.CompanyDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CompanyDbContext.CompanyDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPaymentDbContextFactory">
            <summary>
            PaymentDbContext factory creates new PaymentDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPaymentDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext">
            <summary>
            DbContext for root aggregate Payment
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext.Payments">
            <summary>
            Sets of gets Payments
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext.PaymentDbContextFactory">
            <summary>
            PaymentDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext.PaymentDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext.PaymentDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext.PaymentDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PaymentDbContext.PaymentDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IInputTaxInstanceDbContextFactory">
            <summary>
            InputTaxInstanceDbContext factory creates new InputTaxInstanceDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IInputTaxInstanceDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICompanyDbContextFactory">
            <summary>
            Company Database Context Factory
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICompanyDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether to recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ScheduleDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ScheduleDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ScheduleDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ScheduleDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ScheduleDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ScheduleDbContext.ScheduleDbContextFactory">
            <summary>
            AgencyDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ScheduleDbContext.ScheduleDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ScheduleDbContext.ScheduleDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ScheduleDbContext.ScheduleDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ScheduleDbContext.ScheduleDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IAlertDbContextFactory">
            <summary>
            Interface for DbContextFactory
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IAlertDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientPayrollDbContextFactory">
            <summary>
            ClientPayrollDbContext factory creates new ClientPayrollDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientPayrollDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeeQuarterlyDbContext">
            <summary>
            DbContext for root aggregate Employee quarterly.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeeQuarterlyDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeeQuarterlyDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeeQuarterlyDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeeQuarterlyDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeeQuarterlyDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeeQuarterlyDbContext.EmployeeQuarterlyDbContextFactory">
            <summary>
            EmployeeQuarterlyDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeeQuarterlyDbContext.EmployeeQuarterlyDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeeQuarterlyDbContext.EmployeeQuarterlyDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeeQuarterlyDbContext.EmployeeQuarterlyDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeeQuarterlyDbContext.EmployeeQuarterlyDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CollectionDetailDbContext">
            <summary>
            DbContext for collection detail access
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CollectionDetailDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CollectionDetailDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CollectionDetailDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CollectionDetailDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CollectionDetailDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CollectionDetailDbContext.CollectionDetailContextFactory">
            <summary>
            CollectionDetail context factory
            </summary>
            <seealso cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICollectionDetailContextFactory" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CollectionDetailDbContext.CollectionDetailContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CollectionDetailDbContext.CollectionDetailContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CollectionDetailDbContext.CollectionDetailContextFactory.Recreate">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.CollectionDetailDbContext.CollectionDetailContextFactory.Create">
            <summary>
            Create DbContext
            </summary>
            <returns>
            new DbContext instance
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICollectionDetailContextFactory">
            <summary>
            CollectionDetailContext creates new context instances
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICollectionDetailContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICollectionDetailContextFactory"/> will recreate the database.
            </summary>
            <value>
              <c>true</c> if recreate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientDraftDbContextFactory">
            <summary>
            PeriodicTaxProcessingDbContext factory creates new ClientDraftDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientDraftDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyDbContext.AgencyDbContextFactory">
            <summary>
            AgencyDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyDbContext.AgencyDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyDbContext.AgencyDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyDbContext.AgencyDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.AgencyDbContext.AgencyDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDraftDbContext">
            <summary>
            DbContext for root aggregate Client
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDraftDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDraftDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDraftDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDraftDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDraftDbContext.Clients">
            <summary>
            Sets or gets the client
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDraftDbContext.ClientDrafts">
            <summary>
            Sets of gets Client Drafts
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDraftDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDraftDbContext.ClientDraftDbContextFactory">
            <summary>
            ClientDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDraftDbContext.ClientDraftDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the ClientDratDbContextFactory/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDraftDbContext.ClientDraftDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDraftDbContext.ClientDraftDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEmployeeQuarterlyDbContextFactory">
            <summary>
            EmployeeDbContext factory creates new EmployeeQuarterlyDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEmployeeQuarterlyDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ILiabilityDbContextFactory">
            <summary>
            LiabilityDbContextFactory creates new LiabilityDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ILiabilityDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IAgencyDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientDbContextFactory">
            <summary>
            PeriodicTaxProcessingDbContext factory creates new ClientDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IMarketTypeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.INamedTaxRepresentativeDbContextFactory">
            <summary>
            NamedTaxRepresentativeDbContext factory creates new NamedTaxRepresentativeDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.INamedTaxRepresentativeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEmployeePayrollDbContextFactory">
            <summary>
            EmployeeDbContext factory creates new EmployeePayrollDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEmployeePayrollDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPtmDbContextFactory">
            <summary>
            PtmDbContext factory creates new PtmDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPtmDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IScheduleDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ITenantDbContextFactory">
            <summary>
            TenantDbContext factory creates new TenantDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ITenantDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPeriodicTaxInstanceDbContextFactory">
            <summary>
            PeriodicTaxInstanceDbContext factory creates new PeriodicTaxInstanceDbContext instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPeriodicTaxInstanceDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IImportClientDbContextFactory">
            <summary>
            IUteImportClientDbContextFactory creates new IUteImportClientDbContextFactory
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IImportClientDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IQuarterlyTaxInstanceDbContextFactory">
            <summary>
            Inteface for QuarterlyTaxInstanceDbContextFactory.
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IQuarterlyTaxInstanceDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.LiabilityDbContext">
            <summary>
            DbContext for root aggregate PeriodicTaxInstance
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.LiabilityDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.LiabilityDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.LiabilityDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PeriodicTaxInstanceDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.LiabilityDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.LiabilityDbContext.LiabilityDbContextFactory">
            <summary>
            PeriodicTaxInstanceDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.LiabilityDbContext.LiabilityDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.LiabilityDbContext.LiabilityDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.LiabilityDbContext.LiabilityDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.LiabilityDbContext.LiabilityDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDbContext">
            <summary>
            DbContext for root aggregate Client
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDbContext.ClientDbContextFactory">
            <summary>
            ClientDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDbContext.ClientDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDbContext.ClientDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDbContext.ClientDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ClientDbContext.ClientDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.NamedTaxRepresentativeDbContext">
            <summary>
            DbContext for root aggregate NamedTaxRepresentative
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.NamedTaxRepresentativeDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.NamedTaxRepresentativeDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.NamedTaxRepresentativeDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.NamedTaxRepresentativeDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.NamedTaxRepresentativeDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.NamedTaxRepresentativeDbContext.NamedTaxRepresentativeDbContextFactory">
            <summary>
            PeriodicTaxInstanceDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.NamedTaxRepresentativeDbContext.NamedTaxRepresentativeDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.NamedTaxRepresentativeDbContext.NamedTaxRepresentativeDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.NamedTaxRepresentativeDbContext.NamedTaxRepresentativeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.NamedTaxRepresentativeDbContext.NamedTaxRepresentativeDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeePayrollDbContext">
            <summary>
            DbContext for root aggregate EmployeePayroll.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeePayrollDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeePayrollDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeePayrollDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeePayrollDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeePayrollDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeePayrollDbContext.EmployeePayrollDbContextFactory">
            <summary>
            EmployeePayrollDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeePayrollDbContext.EmployeePayrollDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeePayrollDbContext.EmployeePayrollDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeePayrollDbContext.EmployeePayrollDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EmployeePayrollDbContext.EmployeePayrollDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PeriodicTaxInstanceDbContext">
            <summary>
            DbContext for root aggregate PeriodicTaxInstance (IMPORT_PAYROLL)
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PeriodicTaxInstanceDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PeriodicTaxInstanceDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PeriodicTaxInstanceDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PeriodicTaxInstanceDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PeriodicTaxInstanceDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PeriodicTaxInstanceDbContext.PeriodicTaxInstanceDbContextFactory">
            <summary>
            PeriodicTaxInstanceDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PeriodicTaxInstanceDbContext.PeriodicTaxInstanceDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PeriodicTaxInstanceDbContext.PeriodicTaxInstanceDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PeriodicTaxInstanceDbContext.PeriodicTaxInstanceDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PeriodicTaxInstanceDbContext.PeriodicTaxInstanceDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PtmDbContext">
            <summary>
            DbContext only for store procedures access to the Ptm database.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PtmDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PtmDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PtmDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PtmDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PtmDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PtmDbContext.PtmDbContextFactory">
            <summary>
            PtmDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PtmDbContext.PtmDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PtmDbContext.PtmDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PtmDbContext.PtmDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.PtmDbContext.PtmDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.QuarterlyTaxInstanceDbContext">
            <summary>
            The quarterly tax instance dbcontext.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.QuarterlyTaxInstanceDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.QuarterlyTaxInstanceDbContext"/> class.
            Constructor
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.QuarterlyTaxInstanceDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.QuarterlyTaxInstanceDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate"> need to recreate</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.QuarterlyTaxInstanceDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            Executed while creating the model
            </summary>
            <param name="modelBuilder">Model Builder</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.QuarterlyTaxInstanceDbContext.QuarterlyTaxInstanceDbContextFactory">
            <summary>
             ClientMigrationStatusDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.QuarterlyTaxInstanceDbContext.QuarterlyTaxInstanceDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.QuarterlyTaxInstanceDbContext.QuarterlyTaxInstanceDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.QuarterlyTaxInstanceDbContext.QuarterlyTaxInstanceDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.QuarterlyTaxInstanceDbContext.QuarterlyTaxInstanceDbContextFactory.Create">
            <summary>
            Creates DB Context
            </summary>
            <returns> DB Context </returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext">
            <summary>
            DbContext for root agregate Tenant
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext.Tenants">
            <summary>
            Sets of gets Tenants
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext.TenantDbContextFactory">
            <summary>
            TenantDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext.TenantDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext.TenantDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext.TenantDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.TenantDbContext.TenantDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.SqlParameterHelperExtensions">
            <summary>
            Sql parameter helper extensions
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.SqlParameterHelperExtensions.ToDataTableSqlParameter(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Convert from a string array to a sql parameter data table.
            </summary>
            <param name="values">The values</param>
            <param name="parameterName">The name of the sql parameter</param>
            <returns>The sql parameter</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.SqlParameterHelperExtensions.ToSqlParameter``1(``0,System.String)">
            <summary>
            Convert from a value to a sql parameter.
            </summary>
            <param name="value">The value</param>
            <param name="parameterName">The name of the sql parameter</param>
            <returns>The sql parameter</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.SqlParameterHelperExtensions.ToDataTableSqlParameter(System.Collections.Generic.IList{TaxHub.Models.Banking.CreditApplication.CreditRequestPayeeDateRange},System.String)">
            <summary>
            Convert from payeeDateRanges tp sql parameter data table.
            </summary>
            <param name="payeeDateRanges">The payee data ranges</param>
            <param name="parameterName">The parameter name</param>
            <returns>The sql parameter</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndEmployeeValidationRepository">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndEmployeeValidationRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndEmployeeValidationDbContextFactory)">
            <summary>
            Initializes an instance of <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndEmployeeValidationRepository"/>
            </summary>
            <param name="dbContextFactory">The database context factory.</param>
            <seealso cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndEmployeeValidationDbContextFactory"/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndEmployeeValidationRepository.GetEmployeesForUngroupedAgencyWithAppliedFor(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PostPayrollRepository">
            <summary>
            PostPayroll repository
            </summary>
            <summary>
            PostPayroll repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PostPayrollRepository.CorrectionFindAllStartingFromId(System.Int32,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PostPayrollRepository.CorrectionFindAllUpToId(System.Int32,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PostPayrollRepository.FindAllForIdRangesExcludingReversePayrolls(System.Int32,System.Int32,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PostPayrollRepository.CorrectionUpdatePostPayrollsSeqNumToOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PostPayrollRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPostPayrollDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PostPayrollRepository" /> class.
            </summary>
            <param name="contextFactory">The input tax instance context factory</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PostPayrollRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PostPayrollRepository.FindOneByVoidedPaymentId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PostPayrollRepository.Delete(TaxHub.Models.PostPayroll,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAutoPostRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndAutoPostDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAutoPostRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAutoPostRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAutoPostRepository.FindEntryByClientTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAutoPostRepository.FindAllByTaxYear(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAutoPostRepository.AutoPostEnabledBatchUpdate(System.Collections.Generic.ICollection{TaxHub.Models.YearEnd.YearEndAutoPost},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAutoPostRepository.BatchCreate(System.Collections.Generic.ICollection{TaxHub.Models.YearEnd.YearEndAutoPost},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DomainEventOutboxRepository">
            <summary>
            Data access layer implementation for State Electronic Transfer aggregate.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DomainEventOutboxRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IDomainEventOutboxDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DomainEventOutboxRepository" /> class.
            </summary>
            <param name="dbContextFactory">The DomainEventOutbox context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.DomainEventOutboxRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.IStateRepository">
            <summary>
            State repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.IStateRepository.FindOneByStateAbbreviation(System.String,System.Threading.CancellationToken)">
            <summary>
            Find one by state abbrevation
            </summary>
            <param name="stateAbbreviation">The client desc id (UTE Tax ID)</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The client Itax Desc records</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.StateRepository">
            <summary>
            Staet Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IStateDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Creates a new instance of <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.StateRepository"/>
            </summary>
            <param name="dbContextFactory">The context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateRepository.Contains(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateRepository.FindOneByStateAbbreviation(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ExportZeroEftTrackerRepository">
            <summary>
            ExportZeroEftTracker Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ExportZeroEftTrackerRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IExportZeroEftTrackerDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository" /> class.
            </summary>
            <param name="contextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ExportZeroEftTrackerRepository.Contains(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ExportZeroEftTrackerRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ExportZeroEftTrackerRepository.GetLastExportZeroEftTracker(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ExportZeroEftTrackerRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.IYearEndFileInfoRepository">
            <summary>
            The Repository for YeFileInfo
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndBulkRepository">
            <summary>
            The year end bulk repository class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndBulkRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPtmDbContextFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndBulkRepository"/> class. 
            </summary>
            <param name="dbContextFactory">The db context factory.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndBulkRepository.BulkInsert(System.Collections.Generic.IReadOnlyCollection{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YeRecordGroup},TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndCsvClientRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndCsvClientDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndCsvClientRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndCsvClientRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndCsvClient" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.Csv.YearEndCsvClient" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndCsvClientRepository.FindAllByProcessInfo(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndCsvClientRepository.FindAllForClientTaxYearAndFileName(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndCsvEmployeeRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndCsvEmployeeDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndCsvEmployeeRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndCsvEmployeeRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndCsvEmployee" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.Csv.YearEndCsvEmployee" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndCsvEmployeeRepository.FindByCsvClientId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndIngestedFileRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndIngestedFileDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndIngestedFileRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndIngestedFileRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndIngestedFile" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndIngestedFile" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndIngestedFileRepository.FindValidFilesByClientIdAndTaxYear(System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndFileInfoRepository">
            <inheritdoc cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.IYearEndFileInfoRepository" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndFileInfoRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndFileInfoDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes an instance of <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndFileInfoRepository"/>
            </summary>
            <param name="dbContextFactory">The DB Context Factory</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndFileInfoRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndFileInfoRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.IYearEndFileInfoRepository" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndFileInfoRepository.Contains(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.IYearEndFileInfoRepository" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostCsvClientRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostCsvClientDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndCsvClientRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostCsvClientRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndPostCsvClient" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.Csv.YearEndPostCsvClient" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostCsvClientRepository.FindAllByProcessInfo(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostCsvClientRepository.FindOneByProcessInfo(System.String,System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostCsvEmployeeRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostCsvEmployeeDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostCsvEmployeeRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostCsvEmployeeRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndPostCsvEmployee" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.Csv.YearEndPostCsvEmployee" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostCsvEmployeeRepository.FindByCsvClientId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndStagingRERepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndStagingDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndStagingRERepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndStagingRERepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndStagingREInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndStagingREInfo" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndStagingRSRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndStagingDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndStagingRSRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndStagingRSRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndStagingRSInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndStagingREInfo" /> IQueryable</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndStateLocalProcessRepository">
            <inheritdoc />
            <summary>
            Legacy. Repo to lookup sequence number from PTM table QE_EFILE_CLIENT.
            <remarks>Query: Select batch_no from Qe_Efile_client
            where payee_id=@PayeeID and agency=@AgencyID and period=@Period
            group by batch_no</remarks>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndStateLocalProcessRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPtmDbContextFactory)">
            <summary>
            Creates an instance of the repo.
            </summary>
            <param name="dbContextFactory">The DB context factory.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndStateLocalProcessRepository.CalculateQuarterAmount(System.String,System.Int32,System.Nullable{System.Int32},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Calls _Post_QE_Amount_GetQtdAmendmentSum to calculate the Quarter amount.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="taxId">The tax id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Quarter amount.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndStateLocalProcessRepository.GetEmployees``1(System.String,System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Calls _W_Post_RE_Employer_GetList to get new W2 details
            </summary>
            <param name="clientId">The client id.</param>
            <param name="year">The year.</param>
            <param name="stateCode">The state code.</param>
            <param name="payeeId">The payee Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of W2 details.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndStateLocalProcessRepository.FindLocalClientAgencyByCountyCode``1(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Find client agency by agency's county code and client id. 
            </summary>
            <param name="clientId">The client id.</param>
            <param name="countyCode">The agency's county code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The first client agency matched, or the default value if none matched.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndStateLocalProcessRepository.GetEmployeesForGroupedAgencyWithAppliedFor``1(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository">
            <summary>
            Repository methods used by Annual Rec
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPtmDbContextFactory)">
            <summary>
            Creates an instance of the repo.
            </summary>
            <param name="dbContextFactory">The DB context factory.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository.FindFilingMethod``1(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the Filing_Method
            </summary>
            <param name="stateAgency">state agency</param>
            <param name="clientId">client ID</param>
            <param name="period">period</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>filing Method</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository.GetQtdYtdAmount``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the Qtd_Amount, Ytd_Amount from the table Post_Qe inner join Post_Qe_Amount
            </summary>
            <typeparam name="T"></typeparam>
            <param name="postQeID">postqeid</param>
            <param name="taxID">taxid</param>
            <param name="qtr">qtr</param>
            <param name="year">year</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>The PostQE QTD amounts</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository.GetMonthlyPostAmountSum``1(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the Post amount sum for all the 12 months
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientID">Client Id</param>
            <param name="taxID">taxid</param>
            <param name="year">year</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>The PostQE QTD amounts</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository.GetMonthlyStefAndCheckingPaidAmountsSum``1(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository.GetStEftDistributionPaymentAmount``1(System.String,System.String,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository.GetSteftAndCheckingAmountsForAllPayPeriods``1(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets list of STEFT and CHECKING paid amounts for each scheduled pay period for specified client/payee/year.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientId">The client identifier.</param>
            <param name="payeeId">The payee identifier.</param>
            <param name="year">The year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            List of of STEFT and CHECKING paid amounts for each scheduled pay period for specified client/payee/year.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository.GetStCheckEftSum``1(System.String,System.String,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Get sum of check and EFT for given dates
            </summary>
            <param name="payeeid">payeeid</param>
            <param name="clientid">clientid</param>
            <param name="fromdate">fromdate</param>
            <param name="todate">todate</param>
            <param name="cancellationToken">cancellationToken</param>
            <typeparam name="T"></typeparam>
            <returns>Check and Eft sum</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository.GetAllQtrAmounts``1(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the sum of Qtd_Amount and Amendment_Amount for each qtr from the tables Post_Qe_Amount inner join Post_Qe
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientID">client id</param>
            <param name="year">year</param>
            <param name="taxCode">taxcode</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>quarter wages</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository.GetCurrentAmtSum``1(System.DateTime,System.DateTime,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the Sum of the Current_Amount from the table Post_Amount and Post_Payroll (through inner join)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fromDate">from date</param>
            <param name="toDate">to date</param>
            <param name="taxID">taxID</param>
            <param name="clientID">client id</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>quarter wages</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository.GetQeYTDAmount(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns Qtd Amount for quarter
            </summary>
            <param name="clientId">clientId</param>
            <param name="year">year</param>
            <param name="taxId">taxId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>the QTD amount</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AnnualRecRepository.GetPostQeId``1(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get post Qe Id
            </summary>
            <param name="clientId">clientId</param>
            <param name="year">year</param>
            <param name="quarter">quarter</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>post qe id model</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.IClientITaxDescRepository">
            <summary>
            Client Itax Desc repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.IClientITaxDescRepository.FindAllByClientDescId(System.String,System.Threading.CancellationToken)">
            <summary>
            Find one by client desc id
            </summary>
            <param name="clientDescId">The client desc id (UTE Tax ID)</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The client Itax Desc records</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientITaxDescRepository">
            <summary>
            ClientITax Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientITaxDescRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientITaxDescDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Creates a new instance of <see cref="T:TaxHub.Models.ClientITaxDesc"/>
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientITaxDescRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientITaxDescRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientITaxDescRepository.Contains(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientITaxDescRepository.FindAllByClientDescId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingAcknowledgmentRepository">
            <summary>
            Implements Efiling Acknowledgments
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingAcknowledgmentRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEFilingAcknowledgmentDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingAcknowledgmentRepository"/> class.
            </summary>
            <param name="contextFactory">The context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingAcknowledgmentRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>EFilingAcknowledgment task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingAcknowledgmentRepository.Contains(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Determines whether [contains] [the specified identifier].
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingAcknowledgmentRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Gets the aggregate set.
            </summary>
            <param name="dbContext">The database context.</param>
            <returns>EFilingAcknowledgment queryable list</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingAcknowledgmentRepository.FindOneBySubmissionId(System.String,System.Threading.CancellationToken)">
            <summary>
            Find Record By SubmissionID
            </summary>
            <param name="submissionId">submissionId</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>
            returns EfilingAcknowledgement Record
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingPayeeReturnTypeRepository">
            <summary>
             Data Access layer to EFiling Payee Retrun Type Aggregate   
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingPayeeReturnTypeRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEFilingPayeeReturnTypeDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingPayeeReturnTypeRepository"/> class.
            </summary>
            <param name="contextFactory">The context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingPayeeReturnTypeRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>EFiling task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingPayeeReturnTypeRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Gets the aggregate set.
            </summary>
            <param name="dbContext">The database context.</param>
            <returns>EFiling queryable list</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingPayeeReturnTypeRepository.Contains(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Determines whether [contains] [the specified identifier].
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task bool</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingRepository">
            <summary>
             Data access layer implementation for EFiling aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEFilingDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingRepository"/> class.
            </summary>
            <param name="contextFactory">The context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>EFiling task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingRepository.Contains(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Determines whether [contains] [the specified identifier].
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Gets the aggregate set.
            </summary>
            <param name="dbContext">The database context.</param>
            <returns>EFiling queryable list</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingRepository.FindAllEFileSubmission(System.String,System.Int32,System.Int32,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingRepository.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Int32,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingRepository.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Counts the EFiling records matching filter parameters.
            </summary>
            <param name="filterParams">The filter parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Count of EFiling records matching filter paramaters.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingRepository.CreatePredicateFromFilters(SmartHub.Hosting.DataAccess.FilterParameters)">
            <summary>
            Creates a compound Filter expression from a filterParameters.
            </summary>
            <param name="filterParams">The filter Parameters</param>
            <returns>The expression that represents the filter parameters.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.Filing.EFilingRepository.Update(System.Guid,TaxHub.Models.EFiling,System.Threading.CancellationToken)">
            <summary>
            Updates the Entity.
            </summary>
            <param name="id">The identifier.</param>
            <param name="updatedEntity">The updated entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true when the update was done</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyAchRepository">
            <summary>
            AgencyAch Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyAchRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IAgencyAchDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyAchRepository" /> class.
            </summary>
            <param name="contextFactory">The AgencyAch context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyAchRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyAchRepository.Delete(TaxHub.Models.AgencyAch,System.Threading.CancellationToken)">
            <summary>
            Delete AgencyAch records
            </summary>
            <param name="item">The item</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The success result</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository">
            <summary>
            Agency Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.DetachedUpdate(TaxHub.Models.Agency,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IAgencyDbContextFactory,TaxHub.Common.Logging.IAppLogger,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository" /> class.
            </summary>
            <param name="contextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
            <param name="withContext">The context flag</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.FindAllMatching(System.String,System.String,System.Boolean,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets a list of agencies/payees that match the provided agency state and payee patterns
            </summary>
            <param name="agencyState">The 2-letter state code</param>
            <param name="payeePattern">The patterns to search for</param>
            <param name="activeOnly">A flag indicating whether or not only active agencies should be returned</param>
            <param name="pageParams">The paging parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of matching agencies/payees</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.FindAllMatching(TaxHub.Common.Models.AgencyAuthority,System.Boolean,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets a list of agencies/payees that match the provided authority federal/state/local
            </summary>
            <param name="authority">federal/state/local</param>
            <param name="activeOnly">A flag indicating whether or not only active agencies should be returned</param>
            <param name="pageParams">The paging parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of matching agencies/payees</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.GetUteToUltiProMapping``1(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.FindAllByIds(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.FindAllCombinedAgencies(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.FindAllCombinedAgencies(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.Delete(TaxHub.Models.Agency,System.Threading.CancellationToken)">
            <summary>
            Delete Agency and all related combine payee records
            </summary>
            <param name="item">The item</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The success result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.FindAllByPayeeIds(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets all agencies based on payee Id
            </summary>
            <param name="payeeIds">Payee Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Gets all agencies based on payee Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.CreatePredicateFromFilters(SmartHub.Hosting.DataAccess.FilterCollection)">
            <summary>
            Creates a predicate func based of a filter collection
            </summary>
            <param name="filters">Filter collection to parse into expression</param>
            <returns>Expression to use in linq where clause</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.FindAllByCorrespondingTaxId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository.FindAllByCountyCode(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.IAgencyRepositoryCorrections">
            <summary>
            Interface used for accessing corrections on <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.IAgencyRepositoryCorrections.DetachedUpdate(TaxHub.Models.Agency,System.Threading.CancellationToken)">
            <summary>
            Detaches the mapped child properties from the from the EF context and updates only the parent <see cref="T:TaxHub.Models.Agency"/> entity.
            </summary>
            <param name="updatedEntity">The updated entity.</param>
            <param name="ct">The cancellation token.</param>
            <returns><value>true</value> if the update succeeds, <value>false</value> if it fails.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.AlertRepository">
            <summary>
            Alert Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AlertRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IAlertDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository" /> class.
            </summary>
            <param name="contextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.AlertRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.CheckRepository">
            <summary>
            Data access layer implementation for Check aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CheckRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICheckDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.AgencyRepository" /> class.
            </summary>
            <param name="contextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CheckRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CheckRepository.Delete(TaxHub.Models.Check,System.Threading.CancellationToken)">
            <summary>
            Method deletes a single Check aggregate and all Check Distribution child aggregates.
            </summary>
            <param name="check">The Check aggregate.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CheckRepository.DeleteByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.Check,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Delete Check aggregates and all Check Distribution child aggregates for the expression.
            </summary>
            <param name="expression">A function to test each element for a condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CheckRepository.GetExportedChecks(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get all exported checks
            </summary>
            <param name="pageParams">b</param>
            <param name="cancellationToken">c</param>
            <returns>Returns a collection of checks</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientDraftRepository">
            <summary>
            Clientdraft Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientDraftRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientDraftDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientDraftRepository" /> class.
            </summary>
            <param name="contextFactory">The ClientDraft context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientDraftRepository.FindByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a clientDraft by client id.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of clientDraft records for the client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientDraftRepository.FindAll(System.Threading.CancellationToken)">
            <summary>
            Finds all the Client Draft records.
            </summary>
            <param name="cancellationToken">cancellationToken</param>
            <returns>List of ClientDrafts </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientDraftRepository.FindAll(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finad All Client Drafts By ClientId
            </summary>
            <param name="clientid">clientid</param>
            <param name="pageParams">pageParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>List Of Client Drafts for that ClientId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientDraftRepository.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all Client Draft Records
            </summary>
            <param name="pageParams">pageParams</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns> List of ClientDrafts</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientDraftRepository.Delete(TaxHub.Models.ClientDraft,System.Threading.CancellationToken)">
            <summary>
            Delete ClientDraft and all related entries
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The success result.</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientDraftRepository.Update(System.Guid,TaxHub.Models.ClientDraft,System.Threading.CancellationToken)">
            <summary>
            Updates the Entity.
            </summary>
            <param name="id">The identifier.</param>
            <param name="updatedEntity">The updated entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true when the update was done</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientDraftRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientAgencyRepository">
            <summary>
            Class for Client Agency Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientAgencyRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientAgencyDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientAgencyRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client Agency Context Factory</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientAgencyRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientAgencyRepository.FindByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by client agency id.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of Client Agency records for the client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientAgencyRepository.FindByPayeeId(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by payee id.
            </summary>
            <param name="payeeId">The payee id.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of Client Agency records for the payee.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientAgencyRepository.FindOneByClientAgencyId(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by client agency id.
            </summary>
            <param name="clientAgencyId">The Client Agency.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a Client Agency object or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientAgencyRepository.FindAllByClientFein``1(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientAgencyRepository.FindAllByLastChange(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteDbContext.ClientNoteDbContextFactory">
            <summary>
            ClientNoteDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteDbContext.ClientNoteDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteDbContext.ClientNoteDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteDbContext.ClientNoteDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteDbContext.ClientNoteDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteRepository">
            <summary>
            Class for client note repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.IClientNoteDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initilices a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteRepository" /> class.
            </summary>
            <param name="dbContextFactory">The client note context factory</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteRepository.GetLatestNoteByClientIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the last note added for the given clientId and payeeid
            </summary>
            <param name="clientId">The client Id</param>
            <param name="payeeId">The payee Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the latest note according the CreateUtcDt value </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientNoteRepository.GetAllNotesByClientIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all the notes for a given clientId and payeeId
            </summary>
            <param name="clientId">The clientId</param>
            <param name="payeeId">The payeeId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the list of the notes</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository">
            <summary>
            Client parent/child relation repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientParentChildDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client Agency Context Factory</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.Contains(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindOneByChildClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindAllByChildClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindAllByParentClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.IsCommonPayByClient(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.IsMultiFeinsByClient(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindAllMultiFeinsByTenant``1(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindAllMultiFeins``1(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindAllMultiFeinClientsByTenant``1(System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindOneByChildAndPayee(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindOneByParentAndPayee(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindOneByParentAndChildAndPayee(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindOneByParentOrChildAndPayee(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindOneByParentOrChild(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindAllByParentIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.ContainsAnyRecordsForTenant(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.FindByTenant(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientParentChildRepository.GetPayeeToYeAgencyMapByClient(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientPayrollRepository">
            <summary>
            Class for Client Payroll
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientPayrollRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientPayrollDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository" /> class.
            </summary>
            <param name="dbContextFactory">The import client Context Factory</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientPayrollRepository.Contains(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientPayrollRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientPayrollRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientPayrollRepository.FindAll(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientPayrollRepository.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientPayrollRepository.FindAllByClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientPayrollRepository.FindOneByClientIdPayrollId(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientPayrollRepository.FindOneByPayrollUnitId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.FederalElectronicTransferRepository">
            <summary>
            Data access layer implementation for Federal Electronic Transfer aggregate.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.FederalElectronicTransferRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IFederalElectronicTransferDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.FederalElectronicTransferRepository" /> class.
            </summary>
            <param name="contextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.FederalElectronicTransferRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.FederalElectronicTransferRepository.Delete(TaxHub.Models.FederalElectronicTransfer,System.Threading.CancellationToken)">
            <summary>
            Method deletes a single Fed EFT aggregate and all Fed EFT Distribution child aggregates.
            </summary>
            <param name="fedEft">The Fed EFT aggregate.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.FederalElectronicTransferRepository.DeleteByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.FederalElectronicTransfer,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Delete Fed EFT aggregates and all Fed EFT Distribution child aggregates for the expression.
            </summary>
            <param name="expression">A function to test each element for a condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.FilingCollectorGroupRepository">
            <summary>
            FilingCollectorGroup Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.FilingCollectorGroupRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IFilingCollectorGroupDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.FilingCollectorGroupRepository" /> class.
            </summary>
            <param name="contextFactory">The FilingCollectorGroupRepository context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.HolidayRepository">
            <summary>
            Holiday Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.HolidayRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IHolidayDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initiliazes constructor
            </summary>
            <param name="holidayContextFactory"> Holiday DbContext Fectory</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.HolidayRepository.IsHoliday(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Whether date given is a holiday
            </summary>
            <param name="systemUtcDate">System Utc Date</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Whether date given is a holiday</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.HolidayRepository.FindOneByHolidayDate(System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.IClientNoteDbContextFactory">
            <summary>
            Check DB Context Factory that generates new Check db instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.SqlDbStore.IClientNoteDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeMappingRepository">
            <summary>
            Tax Code Mapping Repository Interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeMappingRepository.FindAllByUltiProAndUteTaxCode(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds by ultipro and UtetaxCode
            </summary>
            <param name="ultiProTaxCode">The ultiproTaxCode.</param>
            <param name="uteTaxCode">The uteTaxCode.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>TaxCodeMapping</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeMappingRepository.FindOneByUltiProAndUteTaxCode(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds by ultipro and UtetaxCode
            </summary>
            <param name="ultiProTaxCode">The ultiproTaxCode.</param>
            <param name="uteTaxCode">The uteTaxCode.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>TaxCodeMapping</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeMappingRepository.GetTaxIdByUteTaxCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve the taxId by UteTaxCode
            </summary>
            <param name="uteTaxCode">uteTaxCode</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>taxId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeMappingRepository.FindAllByUltiProTaxCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Find by UTE Tax Code
            </summary>
            <param name="taxCode">The UltiPro Tax Code</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The tax code mappings</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeMappingRepository.FindAllByRtsTaxCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Find by UTE Tax Code
            </summary>
            <param name="rtsTaxCode">The RTS Tax Code</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The tax code mappings</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository">
            <summary>
            Class for Import Client Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IImportClientDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository" /> class.
            </summary>
            <param name="dbContextFactory">The import client Context Factory</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository.Contains(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository.FindAll(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository.FindAllByClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository.FindAllByImportClientId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository.FindAllByCompanyId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method searches for a import client by import client id.
            </summary>
            <param name="companyId">The companyId on importClient.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of import client records for the client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository.FindOneByClientIdAndImportClientId(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ImportClientRepository.FindOneByPayrollUnitId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository">
            <summary>
            InputTaxInstance repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IInputTaxInstanceDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository" /> class.
            </summary>
            <param name="contextFactory">The input tax instance context factory</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository.FindOne(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository.FindOnebyCheckDateAndId(System.DateTime,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository.FindAll(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.InputTaxInstance,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository.FindAll(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository.FindAllByPayrollCode(System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository.FindOthersByImportClientAndCheckDate(System.Guid,System.String,System.DateTime,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository.Update(System.Int32,TaxHub.Models.InputTaxInstance,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository.CreatePredicateFromFilters(SmartHub.Hosting.DataAccess.FilterCollection)">
            <summary>
            Create predicate from filters
            </summary>
            <param name="filters">The filters.</param>
            <returns>The predicate.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository">
            <summary>
            Company Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICompanyDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository"/> class.
            </summary>
            <param name="contextFactory">The Company context factor</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository.FindOneByTenantIdAndCoId(System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository.FindAllByTenantIdAndCoIds(System.Guid,System.String[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository.FindAllComponentCompanies(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository.FindAllLegalUSEntities(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository.FindOneByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.Company,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository.Update(System.Guid,TaxHub.Models.Company,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository.Delete(TaxHub.Models.Company,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The success result</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CompanyRepository.FindAll(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeePayrollRepository">
            <summary>
            Implements Repository for EmployeePayrollDbContext.
            </summary>
            <seealso>
                <cref>TaxHub.Common.DataAccess.SqlDataStore.SqlServerIntRepository{TaxHub.Models.Employee}</cref>
            </seealso>
            <seealso>
                <cref>TaxHub.CoreServices.DataAccess.IEmployeePayrollRepository</cref>
            </seealso>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeePayrollRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEmployeePayrollDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeePayrollRepository"/> class.
            </summary>
            <param name="employeePayrollDbContextFactory">The employee payroll database context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeePayrollRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeePayrollRepository.BulkCreate(System.Collections.Generic.ICollection{TaxHub.Models.EmployeePayroll},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository">
            <summary>
            Implements Repository for EmployeeQuarterlyDbContext.
            </summary>
            <seealso>
                <cref>TaxHub.Common.DataAccess.SqlDataStore.SqlServerIntRepository{TaxHub.Models.Employee}</cref>
            </seealso>
            <seealso cref="T:TaxHub.CoreServices.DataAccess.IEmployeeQuarterlyRepository" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IEmployeeQuarterlyDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository"/> class.
            </summary>
            <param name="employeeQuarterlyDbContextFactory">The employee Quarterly database context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.FindAllByQuarterlyId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.FindAllByTenantId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.FindOneByEmployeeId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.Delete(TaxHub.Models.EmployeeQuarterly,System.Threading.CancellationToken)">
            <summary>
            Delete EmployeeQuarterly and related EmployeeMisc
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>the success result</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.FindOneByEmployeeIdQuarterlyTaxProcessingIdStateIdLocalIdAndEntityId(System.String,System.Guid,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.FindOneBySsnEntityStateLocalEmployeeCode(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.FindOneByTenantIdQuarterlyTaxProcessingId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.Update(System.Int32,TaxHub.Models.EmployeeQuarterly,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.FindOneByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.EmployeeQuarterly,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.FindAllByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.EmployeeQuarterly,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.EmployeeQuarterlyRepository.FindAllByQuarterlyIdAndEntityCode(System.Int32,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.CollectionDetailRepository">
            <summary>
            Collection Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CollectionDetailRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ICollectionDetailContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.CollectionDetailRepository" /> class.
            </summary>
            <param name="collectionContextFactory">The collection context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CollectionDetailRepository.GetDetailsExtended``1(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.CollectionDetailRepository.GetFtr``1(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeRepository">
            <summary>
            Tax Code Repository Interface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeRepository.FindByDescription(System.String,System.Threading.CancellationToken)">
            <summary>
            Find by Description
            </summary>
            <param name="description">Description - case sensitive</param>
            <param name="cancellationToken">cancellationToken-Tax</param>
            <returns>Tax Desc</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeRepository.FindAllByTaxCodeIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets TaxCodes based on Ids
            </summary>
            <param name="taxcodeIds">TaxCode Ids</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Gets TaxCodes based on Ids</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeRepository.FindAllByStateTransactionAndEntityCode(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Find all records by StateCode, TransactionCode and EntityCode. 
            </summary>
            <param name="stateCode">The state code.</param>
            <param name="transactionCode">The transaction code.</param>
            <param name="entityCode">The entity code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All records by StateCode, TransactionCode and EntityCode.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeRepository.FindOneByEntityStateAndLocalCode(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Find One by entity/state/local code
            </summary>
            <param name="entityCode">The entity code</param>
            <param name="stateCode">The state code</param>
            <param name="localCode">The local code</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The tax code</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ITaxCodeRepository.FindAllByPayee(System.String,System.Threading.CancellationToken)">
            <summary>
            Find all by payee.
            </summary>
            <param name="payeeId">The payee identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All records by payee id.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PenaltyInterestRepository">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PenaltyInterestRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPenaltyInterestDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new penalty interest instance
            </summary>
            <param name="dbContextFactory">Penalty interest context factory</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PenaltyInterestRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns PenaltyInterest dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns>PenaltyInterest IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PenaltyInterestRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns a Penalty Interest Id with its children
            </summary>
            <param name="id">Penalty Interest Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns Penalty Interest and its children</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PenaltyInterestRepository.Create(System.Collections.Generic.IEnumerable{TaxHub.Models.PenaltyInterest},System.Threading.CancellationToken)">
            <summary>
            Creates all Penalty Interest records along with their respective details.
            </summary>
            <param name="penaltyInterest">The collection of the Penalty Interest.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PenaltyInterestRepository.FindAllByOperationId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns list of PenaltyInterest with given operation ID
            </summary>
            <param name="operationId">Operation Id to search for</param>
            <param name="cancellationToken">Cancelation token</param>
            <returns>Matching PenaltyInterest collection, empty list otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PenaltyInterestRepository.FindOneByEntryId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PenaltyInterestRepository.FindOneByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PenaltyInterestRepository.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Gets count by status
            </summary>
            <param name="filterParams">The filter parameters to search for</param>
            <param name="cancellationToken">cancellation token.</param>
            <returns>Count of preparers with the given status.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PenaltyInterestRepository.GetPITypeTotals(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PenaltyInterestRepository.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PenaltyInterestRepository.CreatePredicateFromFilters(SmartHub.Hosting.DataAccess.FilterCollection)">
            <summary>
            Create predicate from filters
            </summary>
            <param name="filters">The filters.</param>
            <returns>The predicate</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ProcessingTaxInstanceRepository">
            <summary>
            ProcessingTaxInstance Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ProcessingTaxInstanceRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IProcessingTaxInstanceDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ProcessingTaxInstanceRepository" /> class.
            </summary>
            <param name="contextFactory">The ProcessingTaxInstance context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ProcessingTaxInstanceRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ProcessingTaxInstanceRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method searches for a ProcessingTaxInstance by postPayrollId id.
            </summary>
            <param name="postPayrollId">The postPayrollId id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a processingTaxInstance record</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterEndRepository">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterEndRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPtmDbContextFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IQuarterEndRepository"/> class.
            </summary>
            <param name="ptmDbContext">The PTM database context.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterEndRepository.GetEmployeeCountByPostQeId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterEndRepository.GetAgencyCountByPostQeId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterEndRepository.GetAgencyCountByLedgerId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterEndRepository.GetQVRStatuses``1(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterEndRepository.GetQEPhases``1(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterEndRepository.GetQEPackageStatuses``1(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository">
            <summary>
            The yearly tax instance repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearlyTaxInstanceDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository"/> class.
            Constructor
            </summary>
            <param name="dbContextFactory">DB Context Factory</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.FindAll(System.Guid,System.String,System.Int32,System.Boolean,TaxHub.Models.YearEndIngestion.YearlyTaxInstanceStatus,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.FindAll(System.Guid,System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.FindAll(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.FindAll(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.FindAllCreatedPriorToDate(System.DateTime,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.FindOne(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.Update(System.Int32,TaxHub.Models.YearEndIngestion.YearlyTaxInstance,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.Update(System.Int32,System.Int32,TaxHub.Models.YearEndIngestion.YearlyTaxInstance,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.Delete(TaxHub.Models.YearEndIngestion.YearlyTaxInstance,System.Threading.CancellationToken)">
            <summary>
            Deletes YearlyTaxInstance and related YearlyUnits
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>the success result</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.FindByParentYeId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearlyTaxInstanceRepository.FindYearlyAmounts(System.Int32,System.Collections.Generic.List{System.Int32})">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.SessionLockRepository">
            <summary>
            Data access layer implementation for State Electronic Transfer aggregate.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.DataAccess.SqlDbStore.SessionLockRepository.SessionLocks">
            <summary>
            Available Locks in the system
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.SessionLockRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ISessionLockDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.SessionLockRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.SessionLockRepository.ClearSessionLockByLockSuffix(System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.TaxCodeMappingRepository">
            <summary>
            InputTaxInstance repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TaxCodeMappingRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ITaxCodeMappingDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository" /> class.
            </summary>
            <param name="contextFactory">The input tax instance context factory</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TaxCodeMappingRepository.Delete(TaxHub.Models.TaxCodeMapping,System.Threading.CancellationToken)">
            <summary>
            Delete TaxCodeMapping records
            </summary>
            <param name="item">The item</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The success result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TaxCodeMappingRepository.FindAllByUltiProAndUteTaxCode(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TaxCodeMappingRepository.FindOneByUltiProAndUteTaxCode(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TaxCodeMappingRepository.FindAllByUltiProTaxCode(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TaxCodeMappingRepository.FindAllByRtsTaxCode(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PayeeEfileInfoRepository">
            <summary>
            AgencyAch Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PayeeEfileInfoRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPayeeEfileInfoDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PayeeEfileInfoRepository" /> class.
            </summary>
            <param name="contextFactory">The PayeeEfileInfo context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PayeeEfileInfoRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository">
            <summary>
            Payment Repository
            </summary>
            <summary>
            Payment Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.GetCreditTrackingIdByRefundLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Return the min credit tracking id for this Refund Liability Id
            </summary>
            <param name="liabilityId">Liability that was created due a Refund to a client because a credit was applied </param>
            <param name="cancellationToken">cancellation token</param>
            <returns>The mininum CreditTracking Id if more than one</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPaymentDbContextFactory,TaxHub.Common.Logging.IAppLogger,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Payment Context Factory</param>
            <param name="logger">The logger.</param>
            <param name="withContext">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.FindPaymentByRefundLiabilityIdDueCreditApplied(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method to get the payment Id from a credit liability Id
            This relationship is 1 to 1 to a payment
            Due to performance problem we added a store procedure to calculate the payment id and then do the find one.
            </summary>
            <param name="liabilityId">The credit liability Id</param>
            <param name="cancellationToken">The cancelation token</param>
            <returns>The payment related to the credit or null if not found</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.GetPaymentIdForCreditLiabilityIdWithStoreProcCall(System.Guid,System.Data.Entity.DbContext)">
            <summary>
            Method to call a stored procedure to get the payment id related to a credit
            </summary>
            <param name="liabilityId">The credit liability Id</param>
            <param name="dbContext">The dbContext</param>
            <returns>The payment Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.FindPaymentsByPenaltyInterestId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.FindRemainingCreditsInClientQuarter(System.String,System.DateTime,System.DateTime,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.FindPaymentCreditsAgencyRefundedByClientIdAndDateRange(System.String,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.FindPaymentsByPostPayroll(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.FindAllNotExported(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.FindAllFalloutsByClientIdAndPayeeId(SmartHub.Hosting.DataAccess.PagedDataParameters,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.FindPaymentCreditReductionInfoForCrossAgencyApplicationByPostPayroll(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.FindPaymentsByQeNetPaymentId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.GetPositivePaymentsForCreditApplication(System.String,System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.GetNegativePaymentsForCreditApplication(System.String,System.Collections.Generic.IList{TaxHub.Models.Banking.CreditApplication.CreditRequestPayeeDateRange},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.FindPaymentByCreditTrackingId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.GetAgencyCreditPaymentsForCreditApplication(System.String,System.String[],System.String,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PaymentRepository.FindPaymentByCreditTransactionId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PreparerCheckRepository">
            <summary>
            Preparer Check Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PreparerCheckRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPreparerCheckDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            The Preparer Check repository
            </summary>
            <param name="dbContextFactory">The context factory</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PreparerCheckRepository.CreatePreparerFilterExpression(SmartHub.Hosting.DataAccess.FilterParameters)">
            <summary>
            Creates a compound Filter expression from a filterParameters.
            </summary>
            <param name="filterParams">The filter Parameters</param>
            <returns>The expression that represents the filter parameters.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PreparerCheckRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PrintableDocumentRepository">
            <summary>
            PrintableDocument aggregate data access layer implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PrintableDocumentRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPrintableDocumentDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new printable document instance
            </summary>
            <param name="dbContextFactory">Printable document context factory</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PrintableDocumentRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns PrintableDocument dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns>PrintableDocument IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PrintableDocumentRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns a matching printable document by id
            </summary>
            <param name="id">Printable document id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Matching printable document</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PrintableDocumentRepository.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PrintableDocumentRepository.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Gets count by status
            </summary>
            <param name="filterParams">The filter parameters to search for</param>
            <param name="cancellationToken">cancellation token.</param>
            <returns>Count of preparers with the given status.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PrintableDocumentRepository.FindByIds(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PrintableDocumentRepository.FindReadyAndNonMatchingIds(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PrintableDocumentRepository.FindAllByCheckId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a list of printable documents with given check ID
            </summary>
            <param name="checkId">Check id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of matching printable documents</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PrintableDocumentRepository.FindAllByFormDocumentId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns a list of printable documents with given form document ID
            </summary>
            <param name="formDocumentId">Form DocumentId</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of matching printable documents</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PrintableDocumentRepository.Contains(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Checks if a printable document exists
            </summary>
            <param name="id">Printable document id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Wheter or not a printable document exists</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PrintableDocumentRepository.CreatePredicateFromFilters(SmartHub.Hosting.DataAccess.FilterCollection)">
            <summary>
            Create predicate from filters
            </summary>
            <param name="filters">The filters.</param>
            <returns>The predicate</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.StateElectronicTransferRepository">
            <summary>
            Data access layer implementation for State Electronic Transfer aggregate.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateElectronicTransferRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IStateElectronicTransferDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.StateElectronicTransferRepository" /> class.
            </summary>
            <param name="contextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateElectronicTransferRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateElectronicTransferRepository.DeleteByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.StateElectronicTransfer,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Delete State Eft aggregates and all State Eft Distribution child aggregates for the expression.
            </summary>
            <param name="expression">A function to test each element for a condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateElectronicTransferRepository.FindOneById(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateElectronicTransferRepository.FindOneByGuidId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateElectronicTransferRepository.GetLastBatchNoByDate(System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateElectronicTransferRepository.Update(System.Guid,TaxHub.Models.StateElectronicTransfer,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.StateElectronicTransferRepository.Delete(TaxHub.Models.StateElectronicTransfer,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.TaxCodeRepository">
            <summary>
            InputTaxInstance repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TaxCodeRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ITaxCodeDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.InputTaxInstanceRepository" /> class.
            </summary>
            <param name="contextFactory">The input tax instance context factory</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TaxCodeRepository.Delete(TaxHub.Models.TaxCode,System.Threading.CancellationToken)">
            <summary>
            Delete TaxCodeMapping records
            </summary>
            <param name="item">The item</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The success result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TaxCodeRepository.FindAllByStateTransactionAndEntityCode(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Find all records by StateCode, TransactionCode and EntityCode.
            </summary>
            <param name="stateCode">The state code.</param>
            <param name="transactionCode">The transaction code.</param>
            <param name="entityCode">The entity code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All records by StateCode, TransactionCode and EntityCode.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TaxCodeRepository.FindOneByEntityStateAndLocalCode(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PreparerRepository">
            <summary>
            Preparer Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PreparerRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPreparerDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PreparerRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Tenant Context Factory</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PreparerRepository.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the clientId.
            </summary>
            <param name="preparerId">The client identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns an instance or null, if not found.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PreparerRepository.FindAllByStatus(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all Preparers by Status
            </summary>
            <param name="status">status to find by</param>
            <param name="pageParams">the pagination parameters</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>List of all the Preparers</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PreparerRepository.CreatePreparerFilterExpression(SmartHub.Hosting.DataAccess.FilterParameters)">
            <summary>
            Creates a compound Filter expression from a filterParameters.
            </summary>
            <param name="filterParams">The filter Parameters</param>
            <returns>The expression that represents the filter parameters.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PreparerRepository.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Gets count by status
            </summary>
            <param name="filterParams">The filter parameters to search for</param>
            <param name="cancellationToken">cancellation token.</param>
            <returns>Count of preparers with the given status.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PreparerRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.LiabilityRepository">
            <summary>
            PeriodicTaxInstance Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.LiabilityRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ILiabilityDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.LiabilityRepository" /> class.
            </summary>
            <param name="contextFactory">The liability context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.LiabilityRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.LiabilityRepository.FindAllByOriginTypeCreationDate(TaxHub.Common.Enums.LiabilityOriginType,System.DateTime,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.LiabilityRepository.FindOneByCashMgmtLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.LiabilityRepository.FindOneByOriginTypeAndReferenceId(TaxHub.Common.Enums.LiabilityOriginType,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository">
            <summary>
            Client Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IClientDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository" /> class.
            </summary>
            <param name="contextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindOne(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindOne(System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindAllByClientIds(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all clients with a given TenantId, and returns a page of data based on PagedDataParameters
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="pageParams">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindAllByTenantId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindOneActiveClientWithTenantId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindAllMatching(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindAll(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.Delete(TaxHub.Models.Client,System.Threading.CancellationToken)">
            <summary>
            Delete Client and all related entries
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The success result.</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindByFein(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all the clients by Company Fein
            </summary>
            <param name="fein"> The fein</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns> Ute Company</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindAllByFein(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all the clients by Company Fein
            </summary>
            <param name="fein"> The fein</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns> Ute Company</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindOneByCompanyId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get all the clients by Company Id
            </summary>
            <param name="companyId"> The Company Id from SPS</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>UTE Company</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindOneClientIdInfo(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.Update(System.Guid,TaxHub.Models.Client,System.Threading.CancellationToken)">
            <summary>
            Updates the Entity.
            </summary>
            <param name="id">The identifier.</param>
            <param name="updatedEntity">The updated entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true when the update was done</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindOneByTenantId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets a client based on the tenant id
            </summary>
            <param name="tenantId">The tenant Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The matching client</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.ClientRepository.FindAllContainsCompanyCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all the clients by Company Id
            </summary>
            <param name="companyCode"> The Company code from SPS</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>UTE Company</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.NamedTaxRepresentativeRepository">
            <summary>
            NTR Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.NamedTaxRepresentativeRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.INamedTaxRepresentativeDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.NamedTaxRepresentativeRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Tenant Context Factory</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.NamedTaxRepresentativeRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.NamedTaxRepresentativeRepository.Insert(TaxHub.Models.NamedTaxRepresentative,System.Threading.CancellationToken)">
            <summary>
            Inserts a new NTR in the PTM repository
            </summary>
            <param name="ntrInsertCommand">The NTR to insert</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.NamedTaxRepresentativeRepository.Update(TaxHub.Models.NamedTaxRepresentative,System.Threading.CancellationToken)">
            <summary>
            Updates the NTR
            </summary>
            <param name="updatedEntity">The NTR to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.NamedTaxRepresentativeRepository.FindOneByName(System.String,System.Threading.CancellationToken)">
            <summary>
            Find one bye NTR name
            </summary>
            <param name="name">NTR name</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>The found named tax representative</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.NamedTaxRepresentativeRepository.FindOneByTenantId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find one by tenant Id
            </summary>
            <param name="tenantId">NTR name</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>The found named tax representative</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PredicateBuilder">
            <summary>
            Helper class to create predicates, use to create expressions from filters
            Original author here --> http://www.albahari.com/nutshell/predicatebuilder.aspx
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PredicateBuilder.True``1">
            <summary>
            Compares to true
            </summary>
            <typeparam name="T"></typeparam>
            <returns>An Expression that evaluates to true</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PredicateBuilder.False``1">
            <summary>
            Compares to false
            </summary>
            <typeparam name="T"></typeparam>
            <returns>An Expression that evaluates to false</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Chains an expression through an Or
            </summary>
            <param name="expr1">Expression 1</param>
            <param name="expr2">Expression 2</param>
            <typeparam name="T"></typeparam>
            <returns>An Or chained expression</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Chanins an expression through an And
            </summary>
            <param name="expr1">Expression 1</param>
            <param name="expr2">Expression 2</param>
            <typeparam name="T"></typeparam>
            <returns>An And chained expression</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PtmRepository">
            <summary>
            Ptm Repository implementation.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PtmRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPtmDbContextFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PtmRepository"/> class.
            </summary>
            <param name="ptmContextFactory">DBContext factory</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository">
            <summary>
            PeriodicTaxInstance Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPeriodicTaxInstanceDbContextFactory,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository" /> class.
            </summary>
            <param name="contextFactory">The periodic tax instance context factory.</param>
            <param name="logger">The logger.</param>
            <param name="featureToggleConfiguration">The feature toggle configuration.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.FindOne(System.String,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.FindAll(System.String,System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.FindOneByPayrollCode(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.FindAllByPayrollCode(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.FindByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.FindAllByProcessingDate(System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.FindAll(System.Guid,TaxHub.Models.TaxUnit,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.FindAllCompanyIds(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.Update(System.Int32,TaxHub.Models.PeriodicTaxInstance,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.Delete(TaxHub.Models.PeriodicTaxInstance,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.GetPeriodicTaxInstancesExtended``1(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.GetPeriodicTaxInstancesExtendedExceptions(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.FindAllByPayrollInstanceId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.PeriodicTaxInstanceRepository.HasPayrollForClient(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterlyTaxInstanceRepository">
            <summary>
            The quarterly tax instance repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterlyTaxInstanceRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IQuarterlyTaxInstanceDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterlyTaxInstanceRepository"/> class.
            Constructor
            </summary>
            <param name="dbContextFactory">DB Context Factory</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterlyTaxInstanceRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterlyTaxInstanceRepository.Delete(TaxHub.Models.QuarterlyTaxInstance,System.Threading.CancellationToken)">
            <summary>
            Delete QuarterlyTaxInstance and related QuarterlyUnits
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>the success result</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterlyTaxInstanceRepository.FindOneByClientId(System.String,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            Checks if a quarterly instance already imported.
            </summary>
            <param name="clientId">The client identifier</param>
            <param name="quarter"> Quarter </param>
            <param name="year"> Year </param>
            <param name="token"> Cancellation token</param>
            <returns> Matching Qaurterly instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterlyTaxInstanceRepository.FindOneByTenantId(System.Guid,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            Checks if a quarterly instance already imported.
            </summary>
            <param name="tenantId">Tenant id.</param>
            <param name="quarter"> Quarter </param>
            <param name="year"> Year </param>
            <param name="token"> Cancellation token</param>
            <returns> Matching Qaurterly instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterlyTaxInstanceRepository.FindAllByClientId(System.String,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            Finds all quarterly instances already imported.
            </summary>
            <param name="clientId">The client identifier</param>
            <param name="quarter"> Quarter </param>
            <param name="year"> Year </param>
            <param name="token"> Cancellation token</param>
            <returns> Matching Qaurterly instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterlyTaxInstanceRepository.FindOneByTenantIdAndIsPost(System.Guid,System.Int16,System.Int16,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if the quarterly instance for this tenant and period already posted.
            </summary>
            <param name="tenantId">Tenant id.</param>
            <param name="quarter"> Quarter </param>
            <param name="year"> Year </param>
            <param name="isPost">"Yes" or "No"</param>
            <param name="token"> Cancellation token</param>
            <returns> Matching Qaurterly instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterlyTaxInstanceRepository.FindAllByQuarterlyTaxProcessingId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all quarterly instances already imported.
            </summary>
            <param name="tenantId"> client code</param>
            <param name="quarterlyTaxProcessingId">The periodic Tax processing id.</param>
            <param name="token"> Cancellation token</param>
            <returns> Matching Qaurterly instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterlyTaxInstanceRepository.FindAllByValidStatus(System.Guid,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.QuarterlyTaxInstanceRepository.Update(System.Int32,TaxHub.Models.QuarterlyTaxInstance,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.TenantRepository">
            <summary>
            Tenant Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TenantRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.ITenantDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.TenantRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Tenant Context Factory</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TenantRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TenantRepository.FindOneByAlias(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Tenant by its Alias.
            </summary>
            <param name="tenantAlias">The tenant alias.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a Tenant object or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TenantRepository.CreatePredicateFromFilters(SmartHub.Hosting.DataAccess.FilterCollection)">
            <summary>
            Creates a predicate func based of a filter collection
            </summary>
            <param name="filters">Filter collection to parse into expression</param>
            <returns>Expression to use in linq where clause</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.TenantRepository.FindAllTenantsWithDedFilters(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.UltiproTaxCodeMappingRepository">
            <summary>
            Implementation for UltiproTaxCodeMappingCache repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.UltiproTaxCodeMappingRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IPtmDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Creates an instance of <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.UltiproTaxCodeMappingRepository"/>
            </summary>
            <param name="contextFactory">The context factory</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.UltiproTaxCodeMappingRepository.GetUltiProToUteMap(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.UltiproTaxCodeMappingRepository.GetImportCodes(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.UltiproTaxCodeMappingRepository.GetUteTaxCode(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndProcessInfoRepository">
            <summary>
            The implementation of <see cref="T:TaxHub.CoreServices.DataAccess.IYearEndProcessInfoRepository"/>
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndProcessInfoRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndProcessInfoDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndProcessInfoRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndProcessInfoRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndProcessInfoRepository.RegisterProcessInfo(TaxHub.Models.YearEnd.YearEndProcessInfo,System.Threading.CancellationToken)">
            <summary>
            Registers a <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> entry to the database
            </summary>
            <param name="entry">A <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instance</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndProcessInfoRepository.FindAllByClientTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instances for a clientId and a tax year
            </summary>
            <param name="clientId">The Client Id to lookup</param>
            <param name="taxYear">The Tax Year to lookup</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndProcessInfoRepository.FindAllByCorrelationIdAndEventType(System.Guid,TaxHub.Common.Enums.YearEndProcessEventType,System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instances for a correlationId
            </summary>
            <param name="correlationId">The correlationId</param>
            <param name="eventType">The correlationId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instances</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAgencyRepository">
            <summary>
            Year End Agency Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAgencyRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndAgencyDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Year End Agency Repository Constructor
            </summary>
            <param name="dbContextFactory">The dbContext factory</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAgencyRepository.Contains(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAgencyRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAgencyRepository.FindByAgencyIdAndTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAgencyRepository.FindOneByAgencyIdAndTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAgencyRepository.FindAllByAgencies(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAgencyRepository.FindOneByUltiProAgencyAndTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAgencyRepository.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAgencyRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAgencyRepository.Update(System.Int32,System.Int32,TaxHub.Models.YearEnd.YearEndAgency,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndAgencyRepository.CreatePredicateFromFilters(SmartHub.Hosting.DataAccess.FilterCollection)">
            <summary>
            Create predicate from filters
            </summary>
            <param name="filters">The filters.</param>
            <returns>The predicate</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRepository">
            <summary>
            The Year End EFW2 File Repository Implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndTaxFileDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRepository.FindByProcessInfo(System.String,System.Int32,TaxHub.Common.Enums.YearEndTaxFileStatus,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a Year End EFW2 File with its children
            </summary>
            <param name="id">EFW2 Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns Penalty Interest and its children</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRepository.FindAllByTaxFileRequestId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRepository.Contains(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRequestRepository">
            <summary>
            The Year End EFW2 File Repository Implementation
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRequestRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndTaxFileRequestDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRequestRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRequestRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRequestRepository.FindByProcessInfo(System.String,System.Int32,TaxHub.Common.Enums.YearEndTaxFileStatus,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRequestRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a Year End EFW2 File with its children
            </summary>
            <param name="id">EFW2 Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns Penalty Interest and its children</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRequestRepository.FindByStatus(TaxHub.Common.Enums.YearEndTaxFileRequestStatus,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRequestRepository.Contains(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRequestRepository.ClientFilesInStatus(System.String,System.Int32,TaxHub.Common.Enums.YearEndTaxFileRequestStatus,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxFileRequestRepository.ClientFilesInStatus(System.Collections.Generic.List{System.String},System.Int32,TaxHub.Common.Enums.YearEndTaxFileRequestStatus,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRARepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRADbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRARepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRARepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndPostRAInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndPostRAInfo" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRARepository.FindByProcessInfo(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Find POST RA information
            </summary>
            <param name="processorId">The processorId</param>
            <param name="taxYear">The tax year</param>
            <param name="status">The instance status</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndPostRAInfo" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRARepository.FindNextBatchNo(System.Threading.CancellationToken)">
            <summary>
            Finds the next available batch no to assign to the <see cref="T:TaxHub.Models.YearEnd.YearEndPostRAInfo" /> instance
            </summary>
            <param name="cancellationToken">The cancellation tokens</param>
            <returns>An integer with the next batch number or zero in case of an error</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRERepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRERepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostREDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRERepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRERepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRERepository.FindByProcessInfo(System.String,System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by process information
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="yeAgency">The YE Agency</param>
            <param name="status">The status</param>
            <param name="cancellationToken">The cancelation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRERepository.FindByProcessInfo(System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRERepository.FindOneByAgency(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by agency Id, client Id and tax year
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="agency">The agency Id</param>
            <param name="cancellationToken">The cancelation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRERepository.FindOneByClientId(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by agency Id, client Id and tax year
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancelation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRERepository.FindById(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by RAID and REID
            </summary>
            <param name="raId">The posted RAID</param>
            <param name="reId">The posted REID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRERepository.FindByIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRERepository.FindAllByClientAndYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds a collection of valid <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by client id and tax year.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRERepository.FindAll(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by client id, year and agency.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="agency">The agency.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> </returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRORepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndPostROInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRORepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRODbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRORepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRORepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndPostROInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndPostROInfo" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRORepository.FindAllEntriesForEmployee(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all posted optional wages from the employee infor
            </summary>
            <param name="reId">The posted REID</param>
            <param name="socialSecurityNumber">The SSN</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostROInfo" /> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRORepository.FindAllEntriesForEmployee(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRSRepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndPostRSInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRSRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRSDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRSRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRSRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndPostRSInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndPostRSInfo" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRSRepository.FindAllEntriesForEmployee(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all posted state wages for the employee
            </summary>
            <param name="reId">The posted REID</param>
            <param name="socialSecurityNumber">The employye SSN</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostRSInfo" /> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRSRepository.FindAllNonDuplicateEntriesForEmployee(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRTRepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndPostRTInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRTRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRTDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRTRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRTRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndPostRTInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndPostRTInfo" /> IQueryable</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRURepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndPostRUInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRURepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRUDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRURepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRURepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndPostRUInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndPostRUInfo" /> IQueryable</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRVRepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndRVInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRVRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRVDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRVRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRVRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndRVInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndRVInfo" /> IQueryable</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRWRepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRWRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndPostRWDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRWRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRWRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRWRepository.FindAllEntriesForEmployee(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Find all the POSTed RW Entries for an employee
            </summary>
            <param name="reId">The POSTed REID</param>
            <param name="socialSecurityNumber">The SSN</param>
            <param name="cancellationToken">The cancelllation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo" /> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRWRepository.FindAllEntriesForEmployee(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndPostRWRepository.FindAllNonDuplicateEntriesForEmployee(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRARepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRARepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRADbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRARepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRARepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRARepository.FindAll(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRARepository.FindAll(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRARepository.FindByProcessInfo(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo" />
            </summary>
            <param name="processorId">The processor Id</param>
            <param name="taxYear">The Tax Year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo" /></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRARepository.FindAll(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRARepository.FindAll(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRERepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRERepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndREDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRERepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRERepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRERepository.FindByProcessInfo(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRERepository.FindFederalByProcessInfo(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRERepository.FindOneByClientAndYearAndYeAgency(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRERepository.FindAllByClientAndYearAndYeAgency(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRERepository.FindAllByRaIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRERepository.FindAll(System.Int32,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRFRepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndRFInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRFRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRFDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRFRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRFRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndRFInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndRFInfo" /> IQueryable</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRORepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndROInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRORepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRODbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRORepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRORepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndROInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndROInfo" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRORepository.Contains(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRORepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRORepository.FindOne(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRORepository.GetEmployeeOptionalWages(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRORepository.GetAllEmployeeOptionalWages(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRSRepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRSRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRSDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRSRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRSRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRSRepository.Contains(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRSRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRSRepository.GetEmployeesToProcess(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRSRepository.GetEmployeeStateWages(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRSRepository.GetAllEmployeeStateWages(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRSRepository.GetEmployeeStateWage(System.Int32,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRSRepository.FindAll(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRTRepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndRTInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRTRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRTDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRTRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRTRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndRTInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndRTInfo" /> IQueryable</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRURepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndRUInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRURepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRUDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRURepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRURepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndRUInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndRUInfo" /> IQueryable</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRVRepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndRVInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRVRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRVDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRVRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRVRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndRVInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndRVInfo" /> IQueryable</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRWRepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRWRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndRWDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRWRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRWRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRWRepository.Contains(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRWRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRWRepository.FindAll(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRWRepository.FindAll(System.Int32,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRWRepository.FindAll(System.Int32,System.String,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRWRepository.GetEmployeesToProcess(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a HashSet with the employees to process under the specific REID
            </summary>
            <param name="reId">The REID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A HashSet with the SSNs</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRWRepository.GetEmployeeFederalWages(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> with the employee federal wages
            </summary>
            <param name="reId">The REID</param>
            <param name="ssn">The employee ssn</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndRWRepository.GetAllEmployeeFederalWages(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository">
            <summary>
            Data access layer implementation for <see cref="T:TaxHub.Models.YearEnd.YearEndProcessing" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IYearEndProcessDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Client context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Returns <see cref="T:TaxHub.Models.YearEnd.YearEndProcessing" /> dbset
            </summary>
            <param name="dbContext">DbContext instance</param>
            <returns><see cref="T:TaxHub.Models.YearEnd.YearEndProcessing" /> IQueryable</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository.FindByProcessInfo(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves information about the initiated POST process
            </summary>
            <param name="processorId">The processor Id</param>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndProcessing" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository.FindPostInPhase(System.String,System.Int32,TaxHub.Common.Enums.YearEndPhase,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository.FindByClientIdTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository.DeleteSessionLock(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a YE Lock Session
            </summary>
            <param name="sessionId">The session Id</param>
            <param name="clientId">The client Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository.LockOneClient(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Locks the specified client for the sessionid
            </summary>
            <param name="sessionId">The session Id</param>
            <param name="clientId">The client Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if lock successfully acquired, False if not</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository.CheckClientFamilyAtPhaseOrGreater(System.String,System.Int32,System.Boolean,TaxHub.Models.YearEndPostType,TaxHub.Common.Enums.YearEndPhase,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository.RollBackPost(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository.UnbalancedFederalTotals``1(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.SqlDbStore.YearEndTaxProcessingRepository.FindAllByTaxYear(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.YearEnd.YearEndAutoPostByClientIdTaxYearComparer">
            <summary>
            This is an implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare by ClientId and TaxYear.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.YearEnd.YearEndAutoPostByClientIdTaxYearComparer.Equals(TaxHub.Models.YearEnd.YearEndAutoPost,TaxHub.Models.YearEnd.YearEndAutoPost)">
            <summary>
            Determines if two records of type <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/> are equals based on their ClientId and TaxYear field values.
            </summary>
            <param name="x">First record</param>
            <param name="y">Second record</param>
            <returns>true if they both have the same ClientId and TaxYear, or are both instances null.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.YearEnd.YearEndAutoPostByClientIdTaxYearComparer.GetHashCode(TaxHub.Models.YearEnd.YearEndAutoPost)">
            <summary>
            Unique hash code of a <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/> record. It uses the ClientId and TaxYear. 
            </summary>
            <param name="obj">The record to get the hash from.</param>
            <returns>An int value representing a unique code.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.YearEnd.YearEndAutoPostByIdComparer">
            <summary>
            This is an implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare by id.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.YearEnd.YearEndAutoPostByIdComparer.Equals(TaxHub.Models.YearEnd.YearEndAutoPost,TaxHub.Models.YearEnd.YearEndAutoPost)">
            <summary>
            Determines if two records of type <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/> are equals based on their Ids.
            </summary>
            <param name="x">First record</param>
            <param name="y">Second record</param>
            <returns>true if they both have the same Id or are both null.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.YearEnd.YearEndAutoPostByIdComparer.GetHashCode(TaxHub.Models.YearEnd.YearEndAutoPost)">
            <summary>
            Unique hash code of a <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/> record. It uses the Id. 
            </summary>
            <param name="obj">The record to get the hash from.</param>
            <returns>An int value representing a unique code.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterEmployeeMap">
            <summary>
            Mapping from Prior Quarter Employee to IMPORT_PRIORQUARTER_EMPLOYEE
            </summary>
            <seealso cref="T:TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterEmployeeMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterEmployeeMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterEmployeeMiscMap">
            <summary>
            Mapping from <see cref="T:TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployeeMisc"/> to IMPORT_PRIORQUARTER_EEMISC
            </summary>
            <seealso cref="T:TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployeeMisc" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterEmployeeMiscMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterEmployeeMiscMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterEmployeeTipsMap">
            <summary>
            Mapping from <see cref="T:TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployeeTips"/> to IMPORT_PRIORQUARTER_EETIPS
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterEmployeeTipsMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterEmployeeTipsMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterQrfCountMap">
            <summary>
            The prior quarter QRF count map
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterQrfCountMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterQrfCountMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterQrfInstanceMap">
            <summary>
            The prior quarter QRF instance map
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterQrfInstanceMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterQrfInstanceMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterQrfMiscUnitMap">
            <summary>
            The prior quarter QRF count map
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterQrfMiscUnitMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterQrfMiscUnitMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterQrfUnitMap">
            <summary>
            The prior quarter QRF unit map
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterQrfUnitMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.EntityMappings.PriorQuarterQrfUnitMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.IPriorQuarterEmployeeDbContextFactory">
            <summary>
            PriorQuarterEmployeeDbContext factory creates new <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterEmployeeDbContext"/> instances
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.IPriorQuarterEmployeeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterEmployeeDbContext">
            <summary>
            DbContext for root aggregate Prior Quarter Employee.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterEmployeeDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterEmployeeDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterEmployeeDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterEmployeeDbContext"/> class.
            </summary>
            <param name="connectionString">connection string.</param>
            <param name="recreate">recreate the database.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterEmployeeDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterEmployeeDbContext.PriorQuarterEmployeeDbContextFactory">
            <summary>
            PriorQuarterEmployeeDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterEmployeeDbContext.PriorQuarterEmployeeDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterEmployeeDbContext.PriorQuarterEmployeeDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterEmployeeDbContext.PriorQuarterEmployeeDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterEmployeeDbContext.PriorQuarterEmployeeDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterQrfInstanceDbContext">
            <summary>
            The prior quarter qrf instance db context.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterQrfInstanceDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterQrfInstanceDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterQrfInstanceDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterQrfInstanceDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">Should we recreate</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterQrfInstanceDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterQrfInstanceDbContext.PriorQuarterQrfInstanceDbContextFactory">
            <summary>
             PriorQuarterQrfInstanceDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterQrfInstanceDbContext.PriorQuarterQrfInstanceDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterQrfInstanceDbContext.PriorQuarterQrfInstanceDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterQrfInstanceDbContext.PriorQuarterQrfInstanceDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.PriorQuarterQrfInstanceDbContext.PriorQuarterQrfInstanceDbContextFactory.Create">
            <summary>
            Creates DB Context
            </summary>
            <returns> DB Context </returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository">
            <summary>
            Implements Repository for PriorQuarterEmployeeDbContext.
            </summary>
            <seealso>
                <cref>TaxHub.Common.DataAccess.SqlDataStore.SqlServerIntRepository{TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee}</cref>
            </seealso>
            <seealso cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.#ctor(TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.DbContexts.IPriorQuarterEmployeeDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository"/> class.
            </summary>
            <param name="priorQuarterEmployeeDbContextFactory">The prior quarter employee database context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.FindAllByPriorQuarterId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.FindAllByTenantId(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.FindOneByEmployeeId(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.Delete(TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee,System.Threading.CancellationToken)">
            <summary>
            Delete given PriorQuarterEmployee
            </summary>
            <param name="item">The item to delete.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The success result.</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user.</exception>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.FindOneByEmployeeIdPriorQuarterQrfProcessingIdStateIdLocalIdAndEntityId(System.String,System.Guid,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.FindOneByPriorQuarterIdSsnEntityStateLocalEmployeeCode(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.FindOneByTenantIdAndPriorQuarterQrfProcessingId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.Update(System.Int32,TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.FindOneByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.FindAllByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterEmployeeRepository.FindAllByPriorQuarterIdAndEntityCode(System.Int32,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterEmployeeRepository">
            <summary>
            Represents repository interface for PriorQuarterEmployeeDbContext.
            </summary>
            <seealso>
                <cref>TaxHub.Common.DataAccess.ISimpleRepository{TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee, System.Int32}</cref>
            </seealso>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterEmployeeRepository.FindAllByPriorQuarterId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all employees by unique employee identifier.
            </summary>
            <param name="priorQuarterId">The prior quarter identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of <see cref="T:TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee"/>.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterEmployeeRepository.FindAllByTenantId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all employees by the tenant identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of <see cref="T:TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee"/>.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterEmployeeRepository.FindOneByEmployeeId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds one employee by UTE employee identifier.
            </summary>
            <param name="id">The employee identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The <see cref="T:TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee"/>.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterEmployeeRepository.FindOneByEmployeeIdPriorQuarterQrfProcessingIdStateIdLocalIdAndEntityId(System.String,System.Guid,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds one employee by unique employee identifier.
            </summary>
            <param name="eeId">The UltiPro employee identifier.</param>
            <param name="priorQuarterQrfProcessingId">The prior quarter Qrf processing identifier.</param>
            <param name="stateCode">The State Code.</param>
            <param name="localCode">The Local code.</param>
            <param name="entityCode">The entity Code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The <see cref="T:TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee"/>.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterEmployeeRepository.FindOneByPriorQuarterIdSsnEntityStateLocalEmployeeCode(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds one employee by unique employee identifier.
            </summary>
            <param name="priorQuarterId">The prior quarter identifier.</param>
            <param name="ssn">The SSN.</param>
            <param name="entityCode">The entity Code.</param>
            <param name="stateCode">The State Code.</param>
            <param name="localCode">The Local code.</param>
            <param name="employeeCode">The employee code. This parameter is optional. If not present it will have "" by default</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The <see cref="T:TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee"/>.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterEmployeeRepository.FindOneByTenantIdAndPriorQuarterQrfProcessingId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds one employee by tenant and prior quarter Qrf processing identifiers.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="priorQuarterQrfProcessingId">The prior quarter Qrf processing Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The <see cref="T:TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee"/>.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterEmployeeRepository.FindAllByPriorQuarterIdAndEntityCode(System.Int32,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all employees by unique employee identifier, considering paged data parameters.
            </summary>
            <param name="priorQuarterId">The prior quarter identifier.</param>
            <param name="entityCode">The entityCode.</param>
            <param name="pageParams">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of <see cref="T:TaxHub.Models.IngestPriorQuarter.PriorQuarterEmployee"/>.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterQrfInstanceRepository">
            <summary>
            The SQL Repository for the Prior Quarter QRF Instance interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterQrfInstanceRepository.FindAllByClientId(System.String,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            Finds all prior quarter qrf instances already for a given client, tax quarter, and tax year.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="quarter">The tax quarter.</param>
            <param name="year">The tax year.</param>
            <param name="token">The Cancellation token</param>
            <returns>Matching instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.IPriorQuarterQrfInstanceRepository.FindAllByPriorQuarterQrfProcessingId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all prior quarter qrf instances already for a given prior quarter qrf processing id.
            </summary>
            <param name="priorQuarterQrfProcessingId">The prior quarter qrf processing id.</param>
            <param name="token">The cancellation token.</param>
            <returns>Matching instances</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterQrfInstanceRepository">
            <summary>
            The SQL Repository for the Prior Quarter QRF Instance
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterQrfInstanceRepository.#ctor(TaxHub.CoreServices.DataAccess.Ingestion.PriorQuarter.SqlDbStore.DbContexts.IPriorQuarterQrfInstanceDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterQrfInstanceRepository"/> class.
            </summary>
            <param name="dbContextFactory">The DB Context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterQrfInstanceRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterQrfInstanceRepository.FindAllByClientId(System.String,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            Finds all prior quarter qrf instances already for a given client, tax quarter, and tax year.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="quarter">The tax quarter.</param>
            <param name="year">The tax year.</param>
            <param name="token">The Cancellation token</param>
            <returns>Matching instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterQrfInstanceRepository.FindAllByPriorQuarterQrfProcessingId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all prior quarter qrf instances already for a given prior quarter qrf processing id.
            </summary>
            <param name="priorQuarterQrfProcessingId">The prior quarter qrf processing id.</param>
            <param name="token">The cancellation token.</param>
            <returns>Matching instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.SqlDbStore.PriorQuarterQrfInstanceRepository.Delete(TaxHub.Models.IngestPriorQuarter.PriorQuarterQrfInstance,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.MongoDbStore.IPriorQuarterQrfProcessingRepository">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.MongoDbStore.IPriorQuarterQrfProcessingRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops collection and recreates it with all required indexes.
            Default implementation ignores the recreation option as collection will be created on demand by MongoDB when data is being written.
            </summary>
            <param name="withDrop">If true enforces dropping the collection.</param>
            <remarks>This method is used by Data Seeder and tests. It must not be called from production code.</remarks>
            <returns>Returns Task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.MongoDbStore.PriorQuarterQrfProcessingMongoDbRepository">
            <summary>
            The prior quarter QRF processing Mongo DB Repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.MongoDbStore.PriorQuarterQrfProcessingMongoDbRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.MongoDbStore.PriorQuarterQrfProcessingMongoDbRepository" /> class.
            </summary>
            <param name="connectivityProvider">The connectivity provider.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.MongoDbStore.PriorQuarterQrfProcessingMongoDbRepository.Delete(TaxHub.Models.IngestPriorQuarter.PriorQuarterQrfProcessing,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.MongoDbStore.PriorQuarterQrfProcessingMongoDbRepository.Create(TaxHub.Models.IngestPriorQuarter.PriorQuarterQrfProcessing,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.MongoDbStore.PriorQuarterQrfProcessingMongoDbRepository.EnsureCollection(System.Boolean)">
            <inheritdoc cref="T:TaxHub.CoreServices.DataAccess.IngestPriorQuarter.MongoDbStore.IPriorQuarterQrfProcessingRepository"/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndAutoPostRepository.FindEntryByClientTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/> by clientId and tax year
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndAutoPostRepository.FindAllByTaxYear(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find all instances of <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/> by tax year
            </summary>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An enumeration of <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndAutoPostRepository.AutoPostEnabledBatchUpdate(System.Collections.Generic.ICollection{TaxHub.Models.YearEnd.YearEndAutoPost},System.Threading.CancellationToken)">
            <summary>
            Updates AutoPostEnabled for a batch of <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/> entries. 
            </summary>
            <param name="yearEndAutoPosts">A collection of items to update AutoPostEnabled.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Bulk operation results</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndAutoPostRepository.BatchCreate(System.Collections.Generic.ICollection{TaxHub.Models.YearEnd.YearEndAutoPost},System.Threading.CancellationToken)">
            <summary>
            Creates a batch of <see cref="T:TaxHub.Models.YearEnd.YearEndAutoPost"/> entries. 
            </summary>
            <param name="yearEndAutoPosts">A collection of items to create.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Bulk operation results</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeFederalW2Repository.Create(TaxHub.Models.YearEndIngestion.QrfEmployeeFederalW2,System.Threading.CancellationToken)">
            <summary>
            Creates new aggregates in the repository. It uses  Settings.DefaultWriteConcern by default.
            </summary>
            <param name="item">New aggregate to create.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeFederalW2Repository.FindAllByQrfEmployees(System.Guid,System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployee},System.Threading.CancellationToken)">
            <summary>
            Finds all QrfEmployeeFederalW2s by QRF employees, grouped and summed by TaxCode.
            </summary>
            <param name="inboundFileId">The inbound file identifier.</param>
            <param name="qrfEmployees">The QRF employees.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of grouped QrfEmployeeStateAndLocalW2s</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeFederalW2Repository.DeleteFile(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete qrf employee's federal w2 info
            </summary>
            <param name="inboundFileId">The inbound file id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Delete result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeFederalW2Repository.BulkCreate(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeFederalW2},System.Threading.CancellationToken)">
            <summary>
            Creates the specified federal w2s.
            </summary>
            <param name="items">Federal w2s.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeFederalW2MongoDbRepository">
            <inheritdoc cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeFederalW2Repository" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeFederalW2MongoDbRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeFederalW2MongoDbRepository" /> class.
            </summary>
            <param name="connectivityProvider">The connectivity provider.</param>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeFederalW2MongoDbRepository.FindAllByQrfEmployees(System.Guid,System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployee},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeFederalW2MongoDbRepository.DeleteFile(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeFederalW2MongoDbRepository.Delete(TaxHub.Models.YearEndIngestion.QrfEmployeeFederalW2,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeFederalW2MongoDbRepository.EnsureCollection(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.Banking.CreditApplication.ICreditRequestRepository.FindFirstCreditRequestInCreatedStatus(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method to get the next credit request for the same Client, payee and period that is still in created status and try to move it to matching.
            </summary>
            <param name="clientId">The client Id.</param>
            <param name="majorPayee">The major payee.</param>
            <param name="period">The period</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the first credit request for the given parameters ordered by created utc date.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.Banking.CreditApplication.CreditRequestRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes. 
            </summary>
            <param name="withDrop">If true enforces dropping the collection.</param>
            <remarks>This method is used by Data Seeder and tests. It must not be called from production code.</remarks>
            <returns>Returns Task.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.ClientAgencyImportRequestMongoDbRepository.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.ClientAgencyImportRequestMongoDbRepository.BuildPageParamFilters(SmartHub.Hosting.DataAccess.FilterParameters)">
            <summary>
            Creates a filter definitions objects for each KeyValuePair string,string
            in the filter params. This is constructed based upon the options available
            in the UI.
            </summary>
            <param name="filterParams">filter params</param>
            <returns>Filter definitions</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.ClientAgencyImportRequestMongoDbRepository.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Method counts all clientAgencyImportRequests.
            </summary>
            <param name="filterParams">The filter parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a long value.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.ClientAgencyImportRequestMongoDbRepository.Create(TaxHub.Models.ClientAgencyImport.ClientAgencyImportRequest,System.Threading.CancellationToken)">
            <summary>
            Creates new ClientAgencyImportRequest aggregate in the repository.
            </summary>
            <param name="item">New ClientAgencyImportRequest aggregate to create.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.ClientAgencyImportRequestMongoDbRepository.Delete(TaxHub.Models.ClientAgencyImport.ClientAgencyImportRequest,System.Threading.CancellationToken)">
            <summary>
            Method deletes a single aggregate instance making Concurrency Checks.
            </summary>
            <param name="item">The aggregate.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.ClientAgencyImportRequestMongoDbRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes.
            </summary>
            <param name="withDrop">If true enforces dropping the collection.</param>
            <remarks>This method is used by Data Seeder and tests. It must not be called from production code.</remarks>
            <returns>Returns Task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayCleanupTenantStatusRepository">
            <summary>
            The MappedTaxPayCleanupTenantStatusRepository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayCleanupTenantStatusRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayCleanupTenantStatusRepository"/> class.
            </summary>
            <param name="connectivityProvider">connectivityProvider</param>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.IPeriodicTaxProcessingRepositoryCorrections">
            <summary>
            Repository methods used by migrations ONLY.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IPeriodicTaxProcessingRepositoryCorrections.FindAllNonStandardUpdatedAfterDateAndInMappingStatus(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Finds the one non payroll instance and processing status mapping or failed.
            </summary>
            <param name="updatedUtcDate">The .</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched periodic tax processing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IPeriodicTaxProcessingRepositoryCorrections.FindAllInMappingStatusForMigrationSortingByUniquePartialIndex(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Please don't use this anymore as it's performance is now lacking.  Instead use something like the other methods in this corrections file.
            Finds all PeriodicTaxProcessings that are in a mapping status.  This is intended to only be used for migrations.
            </summary>
            <param name="pageParams">The page parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of PeriodicTaxProcessings</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository">
            <summary>
             PeriodicTaxProcessing mongoDB Repository.
            </summary>
            <summary>
             PeriodicTaxProcessing mongoDB Repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository.FindAllInMappingStatusForMigrationSortingByUniquePartialIndex(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository.FindAllNonStandardUpdatedAfterDateAndInMappingStatus(System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository"/> class.
            </summary>
            <param name="connectivityProvider">The connectivity provider</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository.Create(TaxHub.Models.PeriodicTaxProcessing,System.Threading.CancellationToken)">
            <summary>
            Creates new PeriodicTaxProcessing aggregate in the repository.
            </summary>
            <param name="periodicTaxProcessing">New PeriodicTaxProcessing aggregate to create.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository.FindAllPayrollByPayrollInstance(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all payroll by payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All matched periodic tax processing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository.FindAllByProcessingStatus(TaxHub.Models.ProcessingStatus,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all PeriodicTaxProcessings matching the given processing status
            </summary>
            <param name="processingStatus">The processing status</param>
            <param name="pageParams">The page parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of PeriodicTaxProcessings</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository.FindOneFailed(System.Guid,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository.FindAllByTenantPayGroupPerControl(System.Guid,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository.CountByTenantPayGroupPerControl(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes.
            </summary>
            <param name="withDrop">If true enforces </param>
            <returns>Returns Task.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PeriodicTaxProcessingRepository.FindAllBetweenPerControlsGetOnlyIdAndPerControl(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayCleanupConfigRepository">
            <summary>
            The MappedTaxPayCleanupConfigRepository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayCleanupConfigRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayCleanupConfigRepository"/> class.
            </summary>
            <param name="connectivityProvider">connectivityProvider</param>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeRepository">
            <summary>
            Repository for QrfEmployee.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeRepository.Create(TaxHub.Models.YearEndIngestion.QrfEmployeeEntry,System.Threading.CancellationToken)">
            <summary>
            Creates the specified QRF employee.
            </summary>
            <param name="qrfEmployeeEntry">The QRF employee.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True iff successful.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeRepository.GetDistinctHashCodes(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the distinct hash codes.
            </summary>
            <param name="inboundFileId">The inbound file identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Distinct HashCodes by File.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeRepository.GetQrfEmployeesByHashCodes(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the QRF employees by hash codes.
            </summary>
            <param name="inboundFileId">The inbound file identifier.</param>
            <param name="hashCodes">The hash codes.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>QRF Employees for the given HashCodes</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeRepository.DeleteFile(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete qrf employee data related to the given inbound file id.
            </summary>
            <param name="inboundFileId">The inbound file id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Delete result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeRepository.EnsureCollection(System.Boolean)">
            <summary>
            Ensure Collection and Index creation
            </summary>
            <param name="withDrop">Determines whether we drop the existing collection and recreate</param>
            <returns>Task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeRepository.BulkCreate(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeEntry},System.Threading.CancellationToken)">
            <summary>
            Creates the specified qrf employee entries.
            </summary>
            <param name="qrfEmployeeEntries">The qrf employee entries.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeStateAndLocalW2Repository">
            <summary>
            Repository for QrfEmployeeStateAndLocalW2
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeStateAndLocalW2Repository.Create(TaxHub.Models.YearEndIngestion.QrfEmployeeStateAndLocalW2,System.Threading.CancellationToken)">
            <summary>
            Creates the specified QRF employee.
            </summary>
            <param name="qrfEmployee">The QRF employee.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True iff successful.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeStateAndLocalW2Repository.GetDistinctTaxCodes(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the distinct tax codes.
            </summary>
            <param name="inboundFileId">The inbound file identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The distinct TaxCodes for a File.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeStateAndLocalW2Repository.FindAllByQrfEmployees(System.Guid,System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployee},System.Threading.CancellationToken)">
            <summary>
            Finds all QrfEmployeeStateAndLocalW2s by QRF employees, grouped and summed by TaxCode.
            </summary>
            <param name="inboundFileId">The inbound file identifier.</param>
            <param name="qrfEmployees">The QRF employees.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of grouped QrfEmployeeStateAndLocalW2s</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeStateAndLocalW2Repository.DeleteFile(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete qrf employee's state and local w2 info
            </summary>
            <param name="inboundFileId">The inbound file id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Delete result.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeStateAndLocalW2Repository.EnsureCollection(System.Boolean)">
            <summary>
            Ensure Collection and Index creation
            </summary>
            <param name="withDrop">Determines whether we drop the existing collection and recreate</param>
            <returns>Task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeStateAndLocalW2Repository.BulkCreate(System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployeeStateAndLocalW2},System.Threading.CancellationToken)">
            <summary>
            Creates the specified state and local w2s.
            </summary>
            <param name="stateAndLocalW2s">The state and local w2s.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeMongoDbRepository">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeMongoDbRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeMongoDbRepository"/> class.
            </summary>
            <param name="connectivityProvider">The connectivity provider.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeMongoDbRepository.GetDistinctHashCodes(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeMongoDbRepository.GetQrfEmployeesByHashCodes(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeMongoDbRepository.DeleteFile(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeMongoDbRepository.Delete(TaxHub.Models.YearEndIngestion.QrfEmployeeEntry,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeMongoDbRepository.EnsureCollection(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeStateAndLocalW2MongoDbRepository">
            <inheritdoc cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.IQrfEmployeeStateAndLocalW2Repository" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeStateAndLocalW2MongoDbRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeStateAndLocalW2MongoDbRepository" /> class.
            </summary>
            <param name="connectivityProvider">The connectivity provider.</param>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeStateAndLocalW2MongoDbRepository.FindAllByQrfEmployees(System.Guid,System.Collections.Generic.IEnumerable{TaxHub.Models.YearEndIngestion.QrfEmployee},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeStateAndLocalW2MongoDbRepository.GetDistinctTaxCodes(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeStateAndLocalW2MongoDbRepository.DeleteFile(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeStateAndLocalW2MongoDbRepository.Delete(TaxHub.Models.YearEndIngestion.QrfEmployeeStateAndLocalW2,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.QrfEmployeeStateAndLocalW2MongoDbRepository.EnsureCollection(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.RtsProcessingRepository">
            <summary>
             RtsProcessing mongoDB Repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.RtsProcessingRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.RtsProcessingRepository"/> class.
            </summary>
            <param name="connectivityProvider">The connectivity provider</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.RtsProcessingRepository.Create(TaxHub.Models.RtsProcessing,System.Threading.CancellationToken)">
            <summary>
            Creates new RtsProcessing aggregate in the repository.
            </summary>
            <param name="rtsProcessing">New RtsProcessing aggregate to create.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.RtsProcessingRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes.
            </summary>
            <param name="withDrop">If true enforces </param>
            <returns>Returns Task.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.RtsProcessingRepository.Delete(TaxHub.Models.RtsProcessing,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.YEProcessingRepository">
            <inheritdoc cref="T:TaxHub.CoreServices.DataAccess.IYEProcessingRepository" />
            <summary>
            The YEProcessing repository class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.YEProcessingRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.YEProcessingRepository" /> class.
            </summary>
            <param name="connectivityProvider">The connectivity provider.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.YEProcessingRepository.FindOne(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.YEProcessingRepository.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.YEProcessingRepository.Create(TaxHub.Models.YearEndIngestion.YEProcessing,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Creates new YEProcessing aggregate in the repository.
            </summary>
            <param name="yEProcessing">The YEProcessing to create.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.YEProcessingRepository.EnsureCollection(System.Boolean)">
            <inheritdoc cref="M:TaxHub.CoreServices.DataAccess.IYEProcessingRepository.EnsureCollection(System.Boolean)" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.YEProcessingRepository.Delete(TaxHub.Models.YearEndIngestion.YEProcessing,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.InboundFileMongoDbRepository">
            <summary>
            Implementation of IInboundFileRepository using MongoDb
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.InboundFileMongoDbRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.InboundFileMongoDbRepository"/> class.
            </summary>
            <param name="connectivityProvider">The connectivity provider</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.InboundFileMongoDbRepository.Create(TaxHub.Models.InboundFile,System.Threading.CancellationToken)">
            <summary>
            Creates new InboundFile aggregate in the repository.
            </summary>
            <param name="inboundFile">New inboundFile aggregate to create.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.InboundFileMongoDbRepository.Delete(TaxHub.Models.InboundFile,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.InboundFileMongoDbRepository.FindFirstByFileNameAndFileTypeAndAutoImportedAsync(System.String,TaxHub.Models.InboundFileType,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.InboundFileMongoDbRepository.FindAllAutoImportedByFileNames(System.Collections.Generic.IEnumerable{System.String},TaxHub.Models.InboundFileType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.InboundFileMongoDbRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes. 
            </summary>
            <param name="withDrop">If true enforces dropping the collection.</param>
            <remarks>This method is used by Data Seeder and tests. It must not be called from production code.</remarks>
            <returns>Returns Task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.AchFileRepository">
            <summary>
            AchFile MongoDb Repo
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.AchFileRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.AchFileRepository"/> class.
            </summary>
            <param name="connectivityProvider">connectivityProvider</param>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.AchFileRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes. 
            </summary>
            <param name="withDrop">If true enforces dropping the collection.</param>
            <remarks>This method is used by Data Seeder and tests. It must not be called from production code.</remarks>
            <returns>Returns Task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayRepository">
            <summary>
             MappedTaxPayMongoDb Repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayRepository"/> class.
            </summary>
            <param name="connectivityProvider">The connectivity provider</param>
            <param name="logger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayRepository.FindAll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all MappedTaxItems by the specified tenantId and perControl.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payrollInstanceId">The payroll instance identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>MappedTaxPays in the specified year.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayRepository.FindAllPeriodicPayroll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all payroll MappedTaxItems by payroll instance identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payrollInstanceId">The payroll instance identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>MappedTaxPays in the specified year.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayRepository.FindAllPeriodicNonPayroll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all non payroll MappedTaxItems by periodic tax processing identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched MappedTaxPays.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayRepository.FindAllPeriodic(System.Guid,System.Guid,System.Boolean,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all payroll MappedTaxItems by periodic tax processing identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="isPayroll">Denotes payroll vs nonpayroll.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched MappedTaxPays.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayRepository.Create(TaxHub.Models.MappedTaxPay,System.Threading.CancellationToken)">
            <summary>
            Creates new MappedTaxPay aggregate in the repository.
            </summary>
            <param name="mappedTaxPay">New MappedTaxPay aggregate to create.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes.
            </summary>
            <param name="withDrop">If true enforces </param>
            <returns>Returns Task.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.MappedTaxPayRepository.FindAllGetOnlyIdAndTenantId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.PayTrackingRepository">
            <summary>
             TrackedPayRepository Repository.  Stores pay ids that were processed during periodic processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PayTrackingRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.PayTrackingRepository"/> class.
            </summary>
            <param name="connectivityProvider">The connectivity provider.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PayTrackingRepository.FindAllGetOnlyIdAndTenantId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PayTrackingRepository.UpdateDocument(MongoDB.Driver.FilterDefinition{MongoDB.Bson.BsonDocument},MongoDB.Driver.UpdateDefinition{MongoDB.Bson.BsonDocument},System.Threading.CancellationToken)">
            <summary>
            Updates documents in the collection using the update criteria to apply modifications.
            </summary>
            <param name="filterDefinition">The filter definition object.</param>
            <param name="updateDefinition">The update definition object.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Boolean result of the operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PayTrackingRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes.
            </summary>
            <param name="withDrop">If true enforces </param>
            <returns>Returns Task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.PayTrackingRepositoryTaxHub">
            <summary>
            The PayTracking Repository for the TaxHub Collection
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PayTrackingRepositoryTaxHub.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.PayTrackingRepositoryTaxHub"/> class.
            </summary>
            <param name="connectivityProvider">The connectivity provider.</param>
            <param name="logger">Application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PayTrackingRepositoryTaxHub.FindAll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all the PayTrackings given the tenant and periodic tax processing
            </summary>
            <param name="tenantId">Guid</param>
            <param name="periodicTaxProcessingId">Guid</param>
            <param name="pageParams">PagedDataParameters</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PayTrackingRepositoryTaxHub.Delete(TaxHub.Models.PayTracking,System.Threading.CancellationToken)">
            <summary>
            Deletes a PayTracking
            </summary>
            <param name="item">PayTracking</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.MongoDbStore.PrintFileRequestRepository">
            <summary>
            PrintFileRequest MongoDb Repo
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PrintFileRequestRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.MongoDbStore.PrintFileRequestRepository"/> class.
            </summary>
            <param name="connectivityProvider">connectivityProvider</param>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.MongoDbStore.PrintFileRequestRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes. 
            </summary>
            <param name="withDrop">If true enforces dropping the collection.</param>
            <remarks>This method is used by Data Seeder and tests. It must not be called from production code.</remarks>
            <returns>Returns Task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.IQuarterEndPhaseDbContextFactory">
            <summary>
            The ContextFactory for QuarterEndPhaseDbContext
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.IQuarterEndPhaseDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.QuarterEndPhaseDbContext">
            <summary>
            QuarterEndPhase db context
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.QuarterEndPhaseDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.QuarterEndPhaseDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.QuarterEndPhaseDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.QuarterEndPhaseDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.QuarterEndPhaseDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.QuarterEndPhaseDbContext.QuarterEndPhaseDbContextFactory">
            <summary>
            QuarterEndPhaseDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.QuarterEndPhaseDbContext.QuarterEndPhaseDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.QuarterEndPhaseDbContext.QuarterEndPhaseDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.QuarterEndPhaseDbContext.QuarterEndPhaseDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.QuarterEndPhaseDbContext.QuarterEndPhaseDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.EntityMappings.QuarterEndPhaseMap">
            <summary>
            The Agency db context map.
            </summary>
            <seealso cref="T:TaxHub.Models.Agency" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.EntityMappings.QuarterEndPhaseMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.EntityMappings.AgencyMap"/> class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.IQuarterEndPhaseRepository">
            <summary>
            Interface for QE Phase repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.IQuarterEndPhaseRepository.GetAsync``1(System.Nullable{System.DateTime},SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fromDate">From date.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Qe phase items after the given date</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.IQuarterEndPhaseRepository.FindOneByClientIdAndPeriod(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a qePhase record that matches clientId and period
            </summary>
            <param name="clientId">The ClientId</param>
            <param name="period">The Period</param>
            <param name="cancellationToken">The cancellationToken</param>
            <returns>returns QuarterEndPhase</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.IQuarterEndPhaseRepository.UpdatePhase(System.String,System.String,System.Int16,System.Int16,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates phase value
            </summary>
            <param name="clientId">The ClientId</param>
            <param name="period">The clients period</param>
            <param name="oldPhase">The clients current phase</param>
            <param name="newPhase">The clients new phase</param>
            <param name="version">The Version number</param>
            <param name="userName">The UserName(modifiedBy)</param>
            <param name="cancellationToken">The cancellation Token</param>
            <returns>Updates QuarterEndPhase Data</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.IQuarterEndPhaseRepository.FindCurrentQuarterEndInfoForClient(System.String,System.Threading.CancellationToken)">
            <summary>
            Find current quarter end info for client.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The current quarter end phase information</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.QuarterEndPhaseRepository">
            <summary>
            Qe Phase repository
            </summary>
            <seealso cref="T:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.IQuarterEndPhaseRepository" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.QuarterEndPhaseRepository.#ctor(TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.DbContexts.IQuarterEndPhaseDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.QuarterEndPhaseRepository"/> class.
            </summary>
            <param name="contextFactory">The PTM database context.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.QuarterEndPhaseRepository.GetAsync``1(System.Nullable{System.DateTime},SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.QuarterEndPhaseRepository.FindOneByClientIdAndPeriod(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.QuarterEndPhaseRepository.UpdatePhase(System.String,System.String,System.Int16,System.Int16,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarter_End_Phase.SqlDbStore.QuarterEndPhaseRepository.FindCurrentQuarterEndInfoForClient(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPaymentRepository">
            <summary>
            Repository methods used by migrations ONLY.
            </summary>
            <summary>
            Class for Payment repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindDepositedPaymentInfos">
            <summary>
            Get deposited payment info for all payments created after a
            certain date.
            </summary>
            <returns>List of payment infos</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindUnsentPALocalEftPaymentsFromQ1(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <summary>
            Gets all unset PA Local EFT payments from Q1
            </summary>
            <param name="eftRequired">EFT requirement</param>
            <param name="pageParams">Paging parameters</param>
            <returns>Payments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.ExistsPaymentWithRefundLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Checks if there is a payment with given RefundLiabilityId
            </summary>
            <param name="liabilityId">Refund Liability Id</param>
            <param name="cancellationToken">Cancellation token </param>
            <returns>True if a payment with the given RefundLiabilityId was found</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.CorrectionFindAllValidNegativePrepaidPayments(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all valid prepaid payments with negative amounts.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of payments.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindImportPayrollId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the import payroll identifier.
            </summary>
            <param name="paymentId">The payment identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Import Payroll Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindInputPayrollId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the input payroll identifier.
            </summary>
            <param name="paymentId">The payment identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Input Payroll Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentsByPeriodicTaxInstanceId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the payments by periodic tax instance identifier (Import Payroll Id).
            </summary>
            <param name="periodicTaxInstanceId">The periodic tax instance identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>IEnumerable&lt;Payment&gt;</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentsByInputTaxInstanceId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the payments by Input Tax Instance identifier (Input Payroll)
            </summary>
            <param name="inputTaxInstanceId">The input tax instance identifer</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task that results in a collection of <see cref="T:TaxHub.Models.Payment"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentByRefundLiabilityIdDueCreditApplied(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find a payment by its refund liability id, the refund liabilities are made of only one payment and the payment has the liabilityid on its
            CreditLiabilityId column or a credit Tracking
            </summary>
            <param name="refundLiabilityId">The refund libility id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The payment associated to this liability on its refundlibitlyid column or creditliabilityid column</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentByRefundLiabilityIdDuePaymentVoided(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find a payment by its refund liability id, the refund liabilities are made of only one payment and the payment has the liabilityid on its
            RefundLibitlityId column
            </summary>
            <param name="refundLiabilityId">The refund libility id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The payment associated to this liability on its refundlibitlyid column or creditliabilityid column</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindRemainingCreditsInClientQuarter(System.String,System.DateTime,System.DateTime,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Finds a list of credits with a remaining un-applied portion for a certain client, date range and agency refunded field (default false).
            </summary>
            <param name="clientId">The client Id</param>
            <param name="dateFrom">The date from</param>
            <param name="dateTo">The date to</param>
            <param name="agencyRefunded">The agency refunded parameter</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of payments/credits</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentCreditsAgencyRefundedByClientIdAndDateRange(System.String,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Finds a list of credits with that were set as AgencyRefunded for a certain client and date range
            </summary>
            <param name="clientId">The client Id</param>
            <param name="dateFrom">The date from</param>
            <param name="dateTo">The date to</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of payments/credits</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentsWithCreditAppliedAndNoLiabilityAssigned(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the payments that had some credit applied and does not have the liability id assigned to
            </summary>
            <param name="pageIndex">the page index for paging</param>
            <param name="pageSize">the page size</param>
            <param name="cancellationToken">the cancellation token</param>
            <returns>The list of payments for the current page</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentByClientIdAndAmountAndCheckDateAndPostPayrollIdAndPayeeId(System.String,System.Nullable{System.Decimal},System.DateTime,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds a payment by client id, amount, check date, post payroll id, and payee id.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="paymentAmount">The payment id.</param>
            <param name="checkDate">The check date.</param>
            <param name="postPayrollId">The post payroll id.</param>
            <param name="payeeId">The payee id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A payment.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentsByPenaltyInterestId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all payments associated to a penaltyInterestId
            </summary>
            <param name="penaltyInterestId">Penalty Interest Identfier</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>A colection of payments associated to the specified penalty id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentsByPostPayroll(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets payment by post payroll Id, payee Id and amount
            </summary>
            <param name="postPayrollId">The post payroll Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Payment</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindAllNotExported(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get payment's that are not exported.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of payments.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindAllFalloutsByClientIdAndPayeeId(SmartHub.Hosting.DataAccess.PagedDataParameters,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get all falllout payments by clientId and payeeId.
            </summary>
            <param name="pageParams">The page parameters.</param>
            <param name="clientId">The client identifier.</param>
            <param name="payeeId">The payee identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of payments</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.GetPaymentAmountsForPayment(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the list of payment amount models children of a given payment using a sql query.
            NOTE: We need this method until we attach the payment amount list to the payment model once the whole payment is moved to the reusable repo pattern
            </summary>
            <param name="paymentId">The payment id</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of payment amounts that are related to the given payment.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentCreditReductionInfoForCrossAgencyApplicationByPostPayroll(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get information for payment and credit tracking identifiers that were involved in the application of credits for QEADJ reductions. 
            These payment identifiers are payments that don't belong to the payroll were the positive payments were created. They are the existing collected source of the money when
            the system did the net out.
            </summary>
            <param name="postPayrollId">The post payroll id of the positive payments that made the liability amount.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of payment and credit tracking identifiers that were involved in the reduction of the payroll liability and don't belong to the post payroll.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindAllRelatedCreditTrackings(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all credit trackings that reference payment id
            </summary>
            <param name="paymentId">The payment Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of credit trackings.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentsByQeNetPaymentId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all credit trackings for payment reduced in QE Adj
            </summary>
            <param name="qeNetPaymentId">The payment Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of credit trackings.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.InsertPaymentAmount(TaxHub.Models.PaymentAmount,System.Threading.CancellationToken)">
            <summary>
            Insert payment amount.
            </summary>
            <param name="paymentAmount">The payment amount.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The inserted payment amount</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.DeletePaymentAmount(TaxHub.Models.PaymentAmount,System.Threading.CancellationToken)">
            <summary>
            Delete payment amount.
            </summary>
            <param name="paymentAmount">The payment amount.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Result</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindCreditTrackingByPaymentEventInfo(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Patch method to get information for missing credit-tracking-created events. 
            It searches a credit tracking by properties that are not mapped to credit tracking entity
            </summary>
            <param name="paymentId">The payment Id</param>
            <param name="paymentVersion">The payment version of the missing event that gets copied in CreditTracking table for legacy</param>
            <param name="paymentSequenceNumber">The payment EventSequenceNumber of the missing event that gets copied in CreditTracking table for legacy</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>The list of creditTracking Ids, which in theory should be only one</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.GetPositivePaymentsForCreditApplication(System.String,System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Find positive payments for credit application
            </summary>
            <param name="clientId">The clientId</param>
            <param name="payees">The payees</param>
            <param name="checkDateFrom">Look for payments from this date</param>
            <param name="checkDateTo">Look for payments to this date</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>List of payments for credit application</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.GetNegativePaymentsForCreditApplication(System.String,System.Collections.Generic.IList{TaxHub.Models.Banking.CreditApplication.CreditRequestPayeeDateRange},System.Threading.CancellationToken)">
            <summary>
            Find Negative payments for credit application
            </summary>
            <param name="clientId">The clientId</param>
            <param name="payeeDateRanges">Payee date ranges</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>List of payments for credit application</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentByCreditTrackingId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find the payment with the supplied credit tracking
            </summary>
            <param name="creditTrackingId">The credit tracking identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The payment if found</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.GetAgencyCreditPaymentsForCreditApplication(System.String,System.String[],System.String,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Finds the payments type AgencyCredit in the Agency Open Period
            </summary>
            <param name="clientId">The clientId</param>
            <param name="payees">The agencies</param>
            <param name="agencyPeriod">The agency open period</param>
            <param name="dateStart">start date that it's going to be used as deposit start period</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>List of AgencyCredits for credit application</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPaymentRepository.FindPaymentByCreditTransactionId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find payment with credit transaction id.
            </summary>
            <param name="creditTransactionId">The credit transaction id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The payment, if any.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPostPayrollRepository">
            <summary>
            post payroll repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPostPayrollRepository.CorrectionFindAllStartingFromId(System.Int32,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all starting from post payroll identifier.
            </summary>
            <param name="postPayrollId">The starting post payroll identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of post payrolls</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPostPayrollRepository.CorrectionFindAllUpToId(System.Int32,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Correction method to find all post payrolls up to and including the given postPayrollId
            </summary>
            <param name="postPayrollId">The end of range post payroll id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of post payrolls</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPostPayrollRepository.FindAllForIdRangesExcludingReversePayrolls(System.Int32,System.Int32,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find post payrolls in a range of Ids and skiping reverse post Payrolls.
            </summary>
            <param name="startingPostPayrollId">The starting post payroll identifier (inclusive).</param>
            <param name="endingPostPayrollId">The ending post payroll identifier (inclusive).</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of post payrolls</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPostPayrollRepository.CorrectionUpdatePostPayrollsSeqNumToOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update post payroll's sequence number to 1
            </summary>
            <param name="postPayrollEndId">The last post payroll id to correct</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns count of updated post payrolls.</returns>
            <remarks>THIS METHOD SHOULD ONLY BE USED IN MIGRATIONS</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPostPayrollRepository.FindOneByVoidedPaymentId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find one by voided payment identifier.
            </summary>
            <param name="paymentId">The payment identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The PostPayroll found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPostPayrollRepository.FindOldestValidPayrollCheckDate(System.String,System.Threading.CancellationToken)">
            <summary>
            Find oldest valid payroll check date:
            - status: valid
            - prepaid: No
            - type: regular or qeadj
            </summary>
            <param name="clientId">The client identifier</param>
            <param name="cancellationToken">The cancellation token,</param>
            <returns>default date if no payroll found, otherwise the oldest check date.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Ingestion.PriorQuarter.SqlDbStore.DbContexts.IPriorQuarterQrfInstanceDbContextFactory">
            <summary>
            Interface for PriorQuarterQrfInstanceDbContextFactory.
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.Ingestion.PriorQuarter.SqlDbStore.DbContexts.IPriorQuarterQrfInstanceDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IDomainEventOutboxRepository">
            <summary>
            Interface for DomainEventOutboxRepository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IDomainEventOutboxRepository.FindAllOlderThan(System.DateTime,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find events in outbox ready to publish.
            </summary>
            <param name="maxUtcDt">Maximum utc datetime.</param>
            <param name="pageParams">The paged data parameters.</param>
            <param name="ct">The cancellation token.</param>
            <returns>The list of outbox events.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientAgencyImportRequestRepository.EnsureCollection(System.Boolean)">
            <summary>
            Ensures the collection is created.
            </summary>
            <param name="withDrop">with drop.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientAgencyImportRequestRepository.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Method counts all collections.
            </summary>
            <param name="filterParams">The filter parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a long value.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IExportZeroEftTrackerRepository">
            <summary>
            Interface for ExportZeroEftTrackerRepository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IExportZeroEftTrackerRepository.GetLastExportZeroEftTracker(System.Threading.CancellationToken)">
            <summary>
            Get last exported zero eft tracker.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>ExportZeroEftTracker</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IMappedTaxPayCleanupTenantStatusRepository">
            <summary>
            IMappedTaxPayCleanupTenantStatusRepository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IMappedTaxPayCleanupTenantStatusRepository.EnsureCollection(System.Boolean)">
            <summary>
            Ensure Collection and Index creation
            </summary>
            <param name="withDrop">Determines whether we drop the existing collection and recreate</param>
            <returns>Task</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IMappedTaxPayCleanupConfigRepository">
            <summary>
            BIMappedTaxPayCleanupConfigRepository
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndBulkRepository">
            <summary>
            The year end bulk repository interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndBulkRepository.BulkInsert(System.Collections.Generic.IReadOnlyCollection{TaxHub.CoreServices.Application.YearEndIngestion.Qrf.Dtos.YeRecordGroup},TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Bulk inserts the year end record groups.
            </summary>
            <param name="yeRecordGroups">The year end record groups.</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndCsvClientRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndCsvClient" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndCsvClientRepository.FindAllByProcessInfo(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find ingested CsvClient information registrations using ClientId and Tax Year
            </summary>
            <param name="clientId">The clientId to lookup</param>
            <param name="taxYear">The Tax year to lookup</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndCsvClient" /> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndCsvClientRepository.FindAllForClientTaxYearAndFileName(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds YearEndCsvClient records for the given fileName, client identifier and tax year.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="fileName">The file name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Collection of matching YearEndCsvClient records.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndCsvEmployeeRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndCsvEmployee" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndCsvEmployeeRepository.FindByCsvClientId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find Csv Employee ingested information registrations using csvClientID
            </summary>
            <param name="csvClientId">The csvClientId to lookup</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndCsvEmployee" /> instances</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndPostCsvClientRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndPostCsvClient" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostCsvClientRepository.FindAllByProcessInfo(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find PostCsvClient information registrations using ClientId and Tax Year
            </summary>
            <param name="clientId">The clientId to lookup</param>
            <param name="taxYear">The Tax year to lookup</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndPostCsvClient" /> instances</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndPostCsvEmployeeRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndPostCsvEmployee" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostCsvEmployeeRepository.FindByCsvClientId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find all Post Csv Employee Records based on the CsvClientId
            </summary>
            <param name="csvClientId">The CsvClientId</param>
            <param name="cancellationToken">A cancellation Token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.Csv.YearEndPostCsvEmployee" /> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndIngestedFileRepository.FindValidFilesByClientIdAndTaxYear(System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Find all <see cref="T:TaxHub.Models.YearEnd.YearEndIngestedFile" /> by Client Id and tax year and IsValid true
            </summary>
            <param name="clientId">The Client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="validOnly">Indicates that we need to return only the valid files only</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndIngestedFile" /> instances</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyLedgerRepository">
            <summary>
            Class for QuarterlyLedgerRepository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyLedgerRepository.FindOne(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on tenantId and aggregateId.
            </summary>
            <param name="ledgerId">The tenantId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>       
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyLedgerRepository.FindByClientId(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            FindOne By ClientId, quarter, year
            </summary>
            <param name="clientId">clientId</param>
            <param name="quarter">The quarter</param>
            <param name="year">The year</param>
            <param name="cancellationToken">The CancellationToken</param>
            <returns>QuarterlyLedger data</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.EntityMappings.QuarterlyLedgerMap">
            <summary>
            The QuarterlyLedger EF mapping class
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.EntityMappings.QuarterlyLedgerMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.EntityMappings.QuarterlyVarianceReportRequestMap">
            <summary>
            This class represents Requests table mappings
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.EntityMappings.QuarterlyVarianceReportRequestMap.#ctor">
            <summary>
            The Default Constructor
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.IQuarterlyLedgerDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyLedgerDbContext">
            <summary>
            DbContext for root aggregate Close ledger
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyLedgerDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyLedgerDbContext"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyLedgerDbContext.QuarterlyLedgers">
            <summary>
            Sets of gets Quarterly ledgers
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyLedgerDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyLedgerDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyLedgerDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyLedgerDbContext.QuarterlyLedgerDbContextFactory">
            <summary>
            Quarterly ledger DbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyLedgerDbContext.QuarterlyLedgerDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyLedgerDbContext.QuarterlyLedgerDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyLedgerDbContext.QuarterlyLedgerDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyLedgerDbContext.QuarterlyLedgerDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.IQuarterlyVarianceReportRequestDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyVarianceReportRequestDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyVarianceReportRequestDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyVarianceReportRequestDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyVarianceReportRequestDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyVarianceReportRequestDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyVarianceReportRequestDbContext.QuarterlyVarianceReportRequestDbContextFactory">
            <summary>
            DepositScheduleDbContextFactory factory
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyVarianceReportRequestDbContext.QuarterlyVarianceReportRequestDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyVarianceReportRequestDbContext"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyVarianceReportRequestDbContext.QuarterlyVarianceReportRequestDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.QuarterlyVarianceReportRequestDbContext.QuarterlyVarianceReportRequestDbContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.QuarterlyLedgerRepository">
            <summary>
            QuarterlyLedger Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.QuarterlyLedgerRepository.#ctor(TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.IQuarterlyLedgerDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.SqlDbStore.TenantRepository" /> class.
            </summary>
            <param name="dbContextFactory">The Tenant Context Factory</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.QuarterlyLedgerRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.QuarterlyLedgerRepository.FindByClientId(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyVarianceReportRepository">
            <summary>
            QVR repo.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyVarianceReportRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            GetAggregateSet
            </summary>
            <param name="dbContext">The dbContext</param>
            <returns>YearlyVarianceReportRequest</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyVarianceReportRepository.FindAllByClientId(System.String,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            FindAll By ClientId, quarter, year
            </summary>
            <param name="clientId">clientId</param>
            <param name="quarter">The quarter</param>
            <param name="year">The year</param>
            <param name="token">The CancellationToken</param>
            <returns>Client data</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyVarianceReportRepository.FindOneByExpression(System.String,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            FindOne By ClientId, quarter, year
            </summary>
            <param name="clientId">clientId</param>
            <param name="quarter">The quarter</param>
            <param name="year">The year</param>
            <param name="token">The CancellationToken</param>
            <returns>Client data</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyVarianceReportRepository.Insert(TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest,System.Threading.CancellationToken)">
            <summary>
            Insert into Requests table
            </summary>
            <param name="item">model</param>
            <param name="cancellationToken">The CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyVarianceReportRepository.Contains(System.Guid,System.Threading.CancellationToken)">
            <summary>
            FindOne
            </summary>
            <param name="guid">model</param>
            <param name="token">The CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyVarianceReportRepository.GetAllClientsInvolvedInMultiFeinOrCommonPayRelationshipsWithPhase``1(System.String,System.String,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Gets a list of all clients involved in a relationship and returns their phases and if they are in the <paramref name="phasesToAllow"/> list.
            </summary>
            <typeparam name="TModel">The model to populate results in.</typeparam>
            <param name="clientId">A client id that is part of a relationship.</param>
            <param name="period">A period to look for phase data</param>
            <param name="phasesToAllow">A list of phases to check if the clients are in.</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns T Model.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyVarianceReportRepository.UpdateQVRStatus(System.Int32,System.Int16,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            Updates QVR to a certain status
            </summary>
            <param name="ledgerId">The ledger Id</param>
            <param name="quarter">A period to look for phase data</param>
            <param name="year">A period to look for phase data</param>
            <param name="status">A period to look for phase data</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns boolean value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyVarianceReportRepository.GetQePhase``1(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get records from QE_Phase for the supplied period,if supplied client ID is null so it will consider all clients,else it will take supplied client_ID
            </summary>
            <param name="period">Tenant Id</param>
            <param name="clientID">Client TIN</param>
            <param name="cancellationToken">Cancellation Token</param>
            <typeparam name="T"></typeparam>
            <returns>List of Clients order by Agency Count and alphabetical</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyVarianceReportRepository.GetFolderPath(System.String,System.Threading.CancellationToken)">
            <summary>
            quick fix for BLOCKER ULTI-345683
            </summary>
            <param name="name">folder name</param>
            <param name="cancellationToken">cancelation token</param>
            <returns>folder path</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.IQuarterlyVarianceReportRepository.FindAllByStatusAndModifyDateThreshold(TaxHub.Common.Enums.Quarterly_Variance_Report.QuarterlyVarianceReportStatus,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Finds all request with the given status and the updated date is less than the threshold.
            </summary>
            <param name="status">The status of the report</param>
            <param name="modifyDateThreshold">The cutoff for the update date</param>
            <param name="token">The cancellation token.</param>
            <returns>Returns a list of QVR requests.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.#ctor(TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.SqlDbStore.DbContexts.IQuarterlyVarianceReportRequestDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository" /> class.
            </summary>
            <param name="contextFactory">The input tax instance context factory</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.FindAllByClientId(System.String,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            FindAll By ClientId, quarter, year
            </summary>
            <param name="clientId">clientId</param>
            <param name="quarter">The quarter</param>
            <param name="year">The year</param>
            <param name="token">The CancellationToken</param>
            <returns>Client data</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.FindOneByExpression(System.String,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            FindOne By ClientId, quarter, year
            </summary>
            <param name="clientId">clientId</param>
            <param name="quarter">The quarter</param>
            <param name="year">The year</param>
            <param name="token">The CancellationToken</param>
            <returns>Client data</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.FindAllByStatusAndModifyDateThreshold(TaxHub.Common.Enums.Quarterly_Variance_Report.QuarterlyVarianceReportStatus,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.Insert(TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest,System.Threading.CancellationToken)">
            <summary>
            Insert into Requests table
            </summary>
            <param name="item">model</param>
            <param name="token">The CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.UpdateStatus(TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest,System.Threading.CancellationToken)">
            <summary>
            Update status
            </summary>
            <param name="item">model</param>
            <param name="token">The CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            FindOne
            </summary>
            <param name="id">ID</param>
            <param name="token">The CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.Contains(System.Guid,System.Threading.CancellationToken)">
            <summary>
            FindOne
            </summary>
            <param name="guid">ID</param>
            <param name="token">The CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.UpdateQVRStatus(System.Int32,System.Int16,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.GetQePhase``1(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.GetAllClientsInvolvedInMultiFeinOrCommonPayRelationshipsWithPhase``1(System.String,System.String,System.Int32[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Quarterly_Variance_Report.QuarterlyVarianceReportRepository.GetFolderPath(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IAnnualRecRepository">
            <summary>
            Repositroy interface for annual rec
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.FindFilingMethod``1(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds filing method
            </summary>
            <param name="stateAgency">stateAgency</param>
            <param name="clientId">clientId</param>
            <param name="period">period</param>
            <param name="cancellationToken">cancellationToken</param>
            <typeparam name="T"></typeparam>
            <returns>Filing method</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetQtdYtdAmount``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the Qtd_Amount, Ytd_Amount from the table Post_Qe inner join Post_Qe_Amount
            </summary>
            <typeparam name="T"></typeparam>
            <param name="postQeID">postqeid</param>
            <param name="taxID">taxid</param>
            <param name="qtr">qtr</param>
            <param name="year">year</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>The PostQE QTD amounts</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetStCheckEftSum``1(System.String,System.String,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Get sum of check and EFT for given dates
            </summary>
            <param name="payeeid">payeeid</param>
            <param name="clientid">clientid</param>
            <param name="fromdate">fromdate</param>
            <param name="todate">todate</param>
            <param name="cancellationToken">cancellationToken</param>
            <typeparam name="T"></typeparam>
            <returns>Check and Eft sum</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetAllQtrAmounts``1(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the sum of Qtd_Amount and Amendment_Amount for each qtr from the tables Post_Qe_Amount inner join Post_Qe
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientID">client id</param>
            <param name="year">year</param>
            <param name="taxCode">taxcode</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>quarter wages</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetCurrentAmtSum``1(System.DateTime,System.DateTime,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the Sum of the Current_Amount from the table Post_Amount and Post_Payroll (through inner join)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fromDate">from date</param>
            <param name="toDate">to date</param>
            <param name="taxID">taxID</param>
            <param name="clientID">client id</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>quarter wages</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetPostQeId``1(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Post qe Id information
            </summary>
            <param name="clientId">clientId</param>
            <param name="year">year</param>
            <param name="quarter">quarter</param>
            <param name="cancellationToken">cancellationToken</param>
            <typeparam name="T"></typeparam>
            <returns>Post Qe Id model</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetPostQeYtdAmount``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Post qe ytd amount
            </summary>
            <param name="postQEId">post QE Id</param>
            <param name="taxId">taxId</param>
            <param name="year">year</param>
            <param name="quarter">quarter</param>
            <param name="cancellationToken">cancellationToken</param>
            <typeparam name="T"></typeparam>
            <returns>Post Qe model</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetQeYTDAmount(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns YTD Amount for quarter
            </summary>
            <param name="clientId">clientId</param>
            <param name="year">year</param>
            <param name="taxId">taxId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>the QTD amount</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetMonthlyPostAmountSum``1(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the monthly post amount sum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientID">The client identifier.</param>
            <param name="taxID">The tax identifier.</param>
            <param name="year">The year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The monthly post amount sums</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetAmountForEachQtrAndYTDAmount``1(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets YTD Amount as well as the quarterly amounts for both taxes and Wages.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientID">The client identifier.</param>
            <param name="taxID">THe tax identifier for taxes.</param>
            <param name="year">The Year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The YTD Amount and Quarterly QTD amounts</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetMonthlyStefAndCheckingPaidAmountsSum``1(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the stef and checking amounts sum for all the 12 months
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientID">Client Id</param>
            <param name="payeeId">payee id</param>
            <param name="year">year</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>The Steft and checking monthly sum</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetSteftDistributions``1(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the steft distributions for payee
            </summary>
            <typeparam name="T"></typeparam>
            <param name="payeeId">payee id</param>
            <param name="year">year</param>
            <param name="clientId">Client Id</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>The list of STEFT distribution amounts and payee info</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetSteftAndCheckingAmountsForAllPayPeriods``1(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets list of STEFT and CHECKING paid amounts for each scheduled pay period for specified client/payee/year.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientId">The client identifier.</param>
            <param name="payeeId">The payee identifier.</param>
            <param name="year">The year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            List of of STEFT and CHECKING paid amounts for each scheduled pay period for specified client/payee/year.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetAllQEAndLiabilityAmounts``1(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all of the Post QE and Post Amount liabilities for an agency, including it's the 1099 taxcodes.
            </summary>
            <param name="agencyId">The Agency Id.</param>
            <param name="clientId">The Client Id.</param>
            <param name="taxYear">The Year.</param>
            <param name="cancellationToken">The Cancellation Token.</param>
            <returns> List of Amounts for POST_QE (Q1-4, and Q4 YTD) and Post_Amount (aggregated monthly).</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAnnualRecRepository.GetStEftDistributionPaymentAmount``1(System.String,System.String,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Get sum of Payment Amount from StEft_Distribution table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="payeeId">Payee Id</param>
            <param name="clientId">Client Id.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>
            Get sum of Payment Amount from StEft_Distribution table.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Filing.IEFilingPayeeReturnTypeRepository">
            <summary>
            Data Access layer to EFiling Payee Retrun Type Aggregate    
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Filing.IEFilingAcknowledgmentRepository">
            <summary>
            Interface for Efiling Acknowledgment
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Filing.IEFilingAcknowledgmentRepository.FindOneBySubmissionId(System.String,System.Threading.CancellationToken)">
            <summary>
            Find Record By SubmissionID
            </summary>
            <param name="submissionId">submissionId</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>returns EfilingAcknowledgement Record</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.Filing.IEFilingRepository">
            <summary>
            Data access layer to Electronic File Transfer aggregate.
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.ISimpleRepository`2" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Filing.IEFilingRepository.FindAllEFileSubmission(System.String,System.Int32,System.Int32,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <summary>
            Finds all Efile submissions.
            </summary>
            <param name="payeeId">The payee id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="status">The status.</param>
            <param name="cancellationToken">The cancellation Token.</param>
            <param name="pageParams">The Paged Params</param>
            <returns>Return Efiling list<see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Filing.IEFilingRepository.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Int32,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <summary>
            Finds all Efile submissions.
            </summary>
            <param name="payeeId">The payee id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="returnTypeID">The ID of the return type.</param>
            <param name="status">The status.</param>
            <param name="cancellationToken">The cancellation Token.</param>
            <param name="pageParams">The Paged Params</param>
            <returns>Return Efiling list<see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Filing.IEFilingRepository.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <summary>
            Finds all Efile submissions.
            </summary>
            <param name="payeeId">The payee id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="cancellationToken">The cancellation Token.</param>
            <param name="pageParams">The Paged Params</param>
            <returns>Return Efiling list<see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Filing.IEFilingRepository.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken,SmartHub.Hosting.DataAccess.PagedDataParameters)">
            <summary>
            Finds all Efile submissions.
            </summary>
            <param name="payeeId">The payee id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="returnTypeID">The ID of the return type.</param>
            <param name="cancellationToken">The cancellation Token.</param>
            <param name="pageParams">The Paged Params</param>
            <returns>Return Efiling list<see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Filing.IEFilingRepository.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Int32,TaxHub.Models.EFilingStatus,System.Threading.CancellationToken)">
            <summary>
            Finds all Efile submissions.
            </summary>
            <param name="payeeId">The payee id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="typeId">Return type id</param>
            <param name="status">The status.</param>
            <param name="cancellationToken">The cancellation Token.</param>       
            <returns>Return Efiling list<see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Filing.IEFilingRepository.FindAllEFileSubmission(System.String,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all Efile submissions.
            </summary>
            <param name="payeeId">The payee id.</param>
            <param name="year">The year.</param>
            <param name="quarter">The quarter.</param>
            <param name="typeId">Return type id</param>
            <param name="cancellationToken">The cancellation Token.</param>       
            <returns>Return Efiling list<see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Filing.IEFilingRepository.FindAllLike(TaxHub.Models.EFiling,System.Threading.CancellationToken)">
            <summary>
            Find all EFile Submissions whose fields match the passed in object.
            </summary>
            <param name="submission">The submission with the target values.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Return Efiling list<see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.Filing.IEFilingRepository.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Counts the number of EFiling record that match filterParameters.
            </summary>
            <param name="filterParams">The filter parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Count of EFiling records that match filterParameters.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearlyTaxInstanceRepository">
            <summary>
            Repository for Import_YE table
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearlyTaxInstanceRepository.FindAll(System.Guid,System.String,System.Int32,System.Boolean,TaxHub.Models.YearEndIngestion.YearlyTaxInstanceStatus,System.Threading.CancellationToken)">
            <summary>
            Checks if a yearly tax instance is already imported.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="clientId">The client id.</param>
            <param name="year">The year.</param>
            <param name="isPost">Is post.</param>
            <param name="yearlyTaxInstanceStatus">The status.</param>
            <param name="token">The cancellation token.</param>
            <returns>Matching yearly tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearlyTaxInstanceRepository.FindAll(System.Guid,System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Checks if a yearly tax instance is already imported.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="clientId">The client id.</param>
            <param name="year">The year.</param>
            <param name="isPost">Is post.</param>
            <param name="token">The cancellation token.</param>
            <returns>Matching yearly tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearlyTaxInstanceRepository.FindAll(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if a yearly tax instance is already imported.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="clientId">The client id.</param>
            <param name="year">The year.</param>
            <param name="token">The cancellation token.</param>
            <returns>Matching yearly tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearlyTaxInstanceRepository.FindOne(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if a yearly tax instance is already imported.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="year">The year.</param>
            <param name="token">The cancellation token.</param>
            <returns>Matching yearly tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearlyTaxInstanceRepository.FindByParentYeId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds by the ParentYeId YearlyTaxInstance
            </summary>
            <param name="parentYeId">parentYeId</param>
            <param name="token">token</param>
            <returns>Returns the ParentYeId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearlyTaxInstanceRepository.FindAll(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if a yearly tax instance is already imported.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="year">The year.</param>
            <param name="token">The cancellation token.</param>
            <returns>Matching yearly tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearlyTaxInstanceRepository.FindYearlyAmounts(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Finds by the yearly amounts for given tax IDs and YE ID
            </summary>
            <param name="yeId">yeId</param>
            <param name="taxIds">taxIds</param>
            <returns>Returns the ParentYeId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearlyTaxInstanceRepository.FindAllCreatedPriorToDate(System.DateTime,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all yearly tax instances created prior to date.
            </summary>
            <param name="date">The date.</param>
            <param name="pagedData">The paged data.</param>
            <param name="token">The token.</param>
            <returns>All yearly tax instances prior to the specified date.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IRtsProcessingRepository">
            <summary>
            Class for RtsProcessing mongoDB repository.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndProcessInfoRepository">
            <summary>
            The interface for the <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> functionality
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndProcessInfoRepository.RegisterProcessInfo(TaxHub.Models.YearEnd.YearEndProcessInfo,System.Threading.CancellationToken)">
            <summary>
            Registers a <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> entry to the database
            </summary>
            <param name="entry">A <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instance</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndProcessInfoRepository.FindAllByClientTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instances for a clientId and a tax year
            </summary>
            <param name="clientId">The Client Id to lookup</param>
            <param name="taxYear">The Tax Year to lookup</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndProcessInfoRepository.FindAllByCorrelationIdAndEventType(System.Guid,TaxHub.Common.Enums.YearEndProcessEventType,System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instances for a correlationId
            </summary>
            <param name="correlationId">The correlationId</param>
            <param name="eventType">The eventType</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessInfo"/> instances</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndAgencyRepository">
            <summary>
            Base interface for the <see cref="T:TaxHub.Models.YearEnd.YearEndAgency" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndAgencyRepository.FindByAgencyIdAndTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find the YEAgency by YEAgency Id and tax year
            </summary>
            <param name="yeAgencyId">The yeAgencyId</param>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndTaxFileRequest" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndAgencyRepository.FindOneByAgencyIdAndTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find the YEAgency by YEAgency Id and tax year
            </summary>
            <param name="yeAgencyId">The yeAgencyId</param>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndAgency" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndAgencyRepository.FindAllByAgencies(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find all ye agency metadata matching the given year and payees
            </summary>
            <param name="agencies">The payees</param>
            <param name="year">The year</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Collection of ye agency metadata</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndAgencyRepository.FindOneByUltiProAgencyAndTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the one by UltiPro agency and tax year.
            </summary>
            <param name="ultiProAgency">The UltiPro agency.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Year End Agency</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndAgencyRepository.FindAllThatGeneratesRW(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all ye agency flagged to generate RW record.
            </summary>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Sequence of ye agency.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYEProcessingRepository">
            <inheritdoc />
            <summary>
            The YEProcessingRepository interface.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYEProcessingRepository.FindOne(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds an existing YEProcessing.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The YEProcessing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYEProcessingRepository.EnsureCollection(System.Boolean)">
            <summary>
            Ensure Collection and Index creation
            </summary>
            <param name="withDrop">Determines whether we drop the existing collection and recreate</param>
            <returns>Task</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.ISessionLockRepository">
            <summary>
            Interface SessionLockRepository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ISessionLockRepository.ClearSessionLockByLockSuffix(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Clears session lock by given session Id
            </summary>
            <param name="lockSuffix">lock Suffix </param>
            <param name="sessionId">session id </param>
            <param name="cancellationToken">cancellation token </param>
            <returns>count of cleared locks</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndTaxFileRepository">
            <summary>
            Base interface for the <see cref="T:TaxHub.Models.YearEnd.YearEndTaxFile" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxFileRepository.FindByProcessInfo(System.String,System.Int32,TaxHub.Common.Enums.YearEndTaxFileStatus,System.Threading.CancellationToken)">
            <summary>
            Find the Year end w2 file information
            </summary>
            <param name="processorId">The processorId</param>
            <param name="taxYear">The tax year</param>
            <param name="status">The instance status</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndTaxFileRequest" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxFileRepository.FindAllByTaxFileRequestId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find the tax file by the tax file request id
            </summary>
            <param name="taxFileRequestId">The tax file request id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndTaxFileRequest" /> instance</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndTaxFileRequestRepository">
            <summary>
            Base interface for the <see cref="T:TaxHub.Models.YearEnd.YearEndTaxFileRequest" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxFileRequestRepository.FindByProcessInfo(System.String,System.Int32,TaxHub.Common.Enums.YearEndTaxFileStatus,System.Threading.CancellationToken)">
            <summary>
            Find the Year end w2 file information
            </summary>
            <param name="processorId">The processorId</param>
            <param name="taxYear">The tax year</param>
            <param name="status">The instance status</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndTaxFileRequest" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxFileRequestRepository.ClientFilesInStatus(System.String,System.Int32,TaxHub.Common.Enums.YearEndTaxFileRequestStatus,System.Threading.CancellationToken)">
            <summary>
            Retrieves tax file request about a client and tax year in a particular status
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax Year</param>
            <param name="status">The file request status</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of file requests</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxFileRequestRepository.FindByStatus(TaxHub.Common.Enums.YearEndTaxFileRequestStatus,System.Threading.CancellationToken)">
            <summary>
            Retrieves all tax file requests by status
            </summary>
            <param name="status">The tax file request status</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns the TaxFileRequests and its children</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxFileRequestRepository.ClientFilesInStatus(System.Collections.Generic.List{System.String},System.Int32,TaxHub.Common.Enums.YearEndTaxFileRequestStatus,System.Threading.CancellationToken)">
            <summary>
            ClientFilesInStatus
            </summary>
            <param name="clientIds">clientIds</param>
            <param name="taxYear">taxYear</param>
            <param name="status">YearEndTaxFileRequestStatus</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>Result of ClientFilesInStatus</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndPostRARepository">
            <summary>
            Base interface for the <see cref="T:TaxHub.Models.YearEnd.YearEndPostRAInfo" /> aggregare
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRARepository.FindByProcessInfo(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Find POST RA information
            </summary>
            <param name="processorId">The processorId</param>
            <param name="taxYear">The tax year</param>
            <param name="status">The instance status</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndPostRAInfo" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRARepository.FindNextBatchNo(System.Threading.CancellationToken)">
            <summary>
            Finds the next available batch no to assign to the <see cref="T:TaxHub.Models.YearEnd.YearEndPostRAInfo" /> instance
            </summary>
            <param name="cancellationToken">The cancellation tokens</param>
            <returns>An integer with the next batch number or zero in case of an error</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndPostRERepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRERepository.FindByProcessInfo(System.String,System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by process information
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="yeAgency">The yeAgency</param>
            <param name="status">The status</param>
            <param name="cancellationToken">The cancelation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRERepository.FindByProcessInfo(System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by process information
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="ingestionId">The ingestion Id</param>
            <param name="status">The status</param>
            <param name="cancellationToken">The cancelation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRERepository.FindById(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by RAID and REID
            </summary>
            <param name="raId">The posted RAID</param>
            <param name="reId">The posted REID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRERepository.FindByIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Returns a list of Post RE Details
            </summary>
            <param name="ids">The list of ids to fetch</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An enumerable of YearEndPostREInfos</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRERepository.FindOneByAgency(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by agency Id, client Id and tax year
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="agency">The agency Id</param>
            <param name="cancellationToken">The cancelation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRERepository.FindOneByClientId(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by agency Id, client Id and tax year
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancelation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRERepository.FindAllByClientAndYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by client id and tax year.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRERepository.FindAll(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostREInfo" /> by client id, year and agency.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="agency">The agency.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> </returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndPostRORepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndPostROInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRORepository.FindAllEntriesForEmployee(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all posted optional wages from the employee infor
            </summary>
            <param name="reId">The posted REID</param>
            <param name="socialSecurityNumber">The SSN</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostROInfo" /> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRORepository.FindAllEntriesForEmployee(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves all posted optional wages from the employee infor by RE ID and RW ID
            </summary>
            <param name="reId">The posted REID</param>
            <param name="rwId">The posted RWID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostROInfo" /> instances</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndPostRTRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndPostRTInfo" /> aggregate
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndPostRURepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndPostRUInfo" /> aggregate
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndPostRVRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndRVInfo" /> aggregate
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndPostRWRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRWRepository.FindAllEntriesForEmployee(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Find all the POSTed RW Entries for an employee by REID and SSN
            </summary>
            <param name="reId">The POSTed REID</param>
            <param name="socialSecurityNumber">The SSN</param>
            <param name="cancellationToken">The cancelllation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo" /> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRWRepository.FindAllEntriesForEmployee(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find all the POSTed RW Entries for an employee by REID
            </summary>
            <param name="reId">The POSTed REID</param>
            <param name="cancellationToken">The cancelllation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo" /> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRWRepository.FindAllNonDuplicateEntriesForEmployee(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Find all the Non duplicate POSTed RW Entries for an employee by REID and SSN
            </summary>
            <param name="reId">The POSTed REID</param>
            <param name="socialSecurityNumber">The SSN</param>
            <param name="cancellationToken">The cancelllation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostRWInfo" /> instances</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndRARepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRARepository.FindByProcessInfo(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo" />
            </summary>
            <param name="processorId">The processor Id</param>
            <param name="taxYear">The Tax Year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo" /></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRARepository.FindAll(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Finds all instances of <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo" /> by their id.
            </summary>
            <param name="raIds">The ra ids.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo" /> </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRARepository.FindAll(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the YearEndRAInfo's for a specific federal and non-federal file.
            </summary>
            <param name="federalFileName">The full federal file name.</param>
            <param name="fileName">The full file name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRARepository.FindAll(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the YearEndRAInfo's for a specific file.
            </summary>
            <param name="fileName">The full file name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRARepository.FindAll(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Finds all by file names.
            </summary>
            <param name="fileNames">The file names.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of <see cref="T:TaxHub.Models.YearEnd.YearEndRAInfo"/></returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndRERepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRERepository.FindByProcessInfo(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" />
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The Tax Year</param>
            <param name="cancellationToken">The cancellation Token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRERepository.FindFederalByProcessInfo(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" />
            </summary>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRERepository.FindByProcessInfo(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> by process info.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="agency">The agency.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRERepository.FindAllByClientAndYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> by process info.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRERepository.FindOneByClientAndYearAndYeAgency(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the Re info record based on client id, year and yeAgency
            </summary>
            <param name="clientId"> The Client id</param>
            <param name="taxYear">Tax Year</param>
            <param name="yeAgency">Ye Agency</param>
            <param name="cancellationToken">The cancellation Token</param>
            <returns>Matching Re Cord</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRERepository.FindAllByClientAndYearAndYeAgency(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> by client id, tax year and ye agency
            </summary>
            <param name="clientId">The Client Id</param>
            <param name="taxYear">The Tax Year</param>
            <param name="yeAgency">The Year end Agency</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndREInfo" /> </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRERepository.FindAllByRaIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Finds all RE records for the provided RA IDs.
            </summary>
            <param name="raIds">List of RA ids.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of matching YearEndREInfos.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRERepository.FindAll(System.Int32,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets all RE records given an agency and a tax year.
            </summary>
            <param name="taxYear">The tax year.</param>
            <param name="agency">The agency.</param>
            <param name="pagedDataParameters">The paged data parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndRFRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndRFInfo" /> aggregate
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndRORepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndROInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRORepository.FindOne(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds one RO record by RA/RE/RW id (IX_RA_RE_RW)
            </summary>
            <param name="raId">The RA identifier.</param>
            <param name="reId">The RE identifier.</param>
            <param name="rwId">The RW identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The RO record.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRORepository.GetEmployeeOptionalWages(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndROInfo" /> with the employee optional wages
            </summary>
            <param name="reId">The POSTed REID</param>
            <param name="ssn">The employee SSN</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndROInfo" /> type</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRORepository.GetAllEmployeeOptionalWages(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds an enumerable of instances of <see cref="T:TaxHub.Models.YearEnd.YearEndROInfo" /> with the employee optional wages
            </summary>
            <param name="reId">The POSTed REID</param>
            <param name="ssn">The employee SSN</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndROInfo" /> type</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndRSRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRSRepository.GetEmployeesToProcess(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a HashSet with all the employee SSNs having state wages to be processed
            </summary>
            <param name="reId">The REID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A HashSet with the SSNs of the employees to process</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRSRepository.GetEmployeeStateWages(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo" /> instances for an employee
            </summary>
            <param name="reId">The REID</param>
            <param name="ssn">The employee ssn</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo" /></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRSRepository.GetAllEmployeeStateWages(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo" /> instances for an employee
            </summary>
            <param name="reId">The REID</param>
            <param name="rwId">The RWID</param>
            <param name="ssn">The employee ssn</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo" /></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRSRepository.GetEmployeeStateWage(System.Int32,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo" /> for an employee, state and local code
            </summary>
            <param name="reId">The REID</param>
            <param name="ssn">The employee ssn</param>
            <param name="stateCode">The state code</param>
            <param name="localCode">The local code</param>
            <param name="workLocation">The work location</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndRSInfo" /></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRSRepository.FindAll(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all RS records given an ReId, RwId and a social security number.
            </summary>
            <param name="reId">The re id.</param>
            <param name="rwId">The rw id.</param>
            <param name="ssn">The social security number.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRSRepository.FindAllByREID(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all RS records given an ReId
            </summary>
            <param name="reId">The RE Id</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRSRepository.FindAllEmployeesByIds(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a collection of unique SSNs based on the respective RS Ids.
            </summary>
            <param name="rsIds">The collection of RS Ids.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A hash set with the results</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndRTRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndRTInfo" /> aggregate
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndRURepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndRUInfo" /> aggregate
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndRVRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndRVInfo" /> aggregate
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndRWRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRWRepository.FindAll(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" />
            </summary>
            <param name="reId">The RE id.</param>
            <param name="ssn">The social security number.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The year end RW record.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRWRepository.GetEmployeesToProcess(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a HashSet with the employees to process under the specific REID
            </summary>
            <param name="reId">The REID</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A HashSet with the SSNs</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRWRepository.GetEmployeeFederalWages(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an instance of <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> with the employee federal wages
            </summary>
            <param name="reId">The REID</param>
            <param name="ssn">The employee ssn</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRWRepository.GetAllEmployeeFederalWages(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an enumerable of instances of <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> with the employee federal wages
            </summary>
            <param name="reId">The REID</param>
            <param name="ssn">The employee ssn</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRWRepository.FindAll(System.Int32,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all instances of <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> for the provided parameters.
            </summary>
            <remarks>Useful when querying for a specific employee by name when they all an SSN of all 0's</remarks>
            <param name="reId">The REID.</param>
            <param name="firstName">The employee first name.</param>
            <param name="lastName">The employee last name.</param>
            <param name="middleName">The employee middle name.</param>
            <param name="suffix">The employee suffix.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of YearEndRwInfo</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndRWRepository.FindAll(System.Int32,System.String,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Retrieves all instances of <see cref="T:TaxHub.Models.YearEnd.YearEndRWInfo" /> for the provided parameters.
            </summary>
            <param name="reId">The REID.</param>
            <param name="firstName">The employee first name.</param>
            <param name="lastName">The employee last name.</param>
            <param name="middleName">The employee middle name.</param>
            <param name="pagedDataParameters">The paged data parameters</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of YearEndRwInfo</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndTaxProcessingRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndProcessing" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxProcessingRepository.FindPostInPhase(System.String,System.Int32,TaxHub.Common.Enums.YearEndPhase,System.Threading.CancellationToken)">
            <summary>
            Retrieves information about a POST in phase 6
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="phase">The phase we are looking up</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndProcessing" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxProcessingRepository.FindByProcessInfo(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves information about the initiated POST process
            </summary>
            <param name="processorId">The processor Id</param>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndProcessing" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxProcessingRepository.FindByClientIdTaxYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves information about a client and taxyear
            </summary>
            <param name="clientId">The client Id</param>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.YearEndProcessing" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxProcessingRepository.DeleteSessionLock(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a YE Lock Session
            </summary>
            <param name="sessionId">The session Id</param>
            <param name="clientId">The client Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxProcessingRepository.LockOneClient(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Locks the requested client(s)
            </summary>
            <param name="sessionId">The session Id</param>
            <param name="clientId">The client Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if lock succeeds</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxProcessingRepository.CheckClientFamilyAtPhaseOrGreater(System.String,System.Int32,System.Boolean,TaxHub.Models.YearEndPostType,TaxHub.Common.Enums.YearEndPhase,System.Threading.CancellationToken)">
            <summary>
            Verifies if all clients in the relationship are ready for post
            </summary>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="isPostingCpFamily">The flag for when posting a common pay client family together.</param>
            <param name="yearEndPostType">The year end post type.</param>
            <param name="phase">The phase.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of Client Ids that are not in a Phase that is ready for post</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxProcessingRepository.RollBackPost(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Rolls back post data for a client for a particular tax year.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="taxYear">The tax year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if ready, otherwise false</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxProcessingRepository.FindAllByTaxYear(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find all instances of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessing"/> by tax year
            </summary>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An enumeration of <see cref="T:TaxHub.Models.YearEnd.YearEndProcessing"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndTaxProcessingRepository.UnbalancedFederalTotals``1(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find the totals of Federal Wages and Taxes in QRF and RW tables.
            </summary>
            <typeparam name="T">The return instance</typeparam>
            <param name="clientId">The client id</param>
            <param name="taxYear">The tax year</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>An instance of T with the amounts populated</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IInboundFileRepository">
            <summary>
            Interface for InboundFileRepository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IInboundFileRepository.FindFirstByFileNameAndFileTypeAndAutoImportedAsync(System.String,TaxHub.Models.InboundFileType,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method returs the first inboundFile with the matching name and type:
            For manually imported (autoImported=false) files, will return the first if multiple with the same name.
            For auto-imported files will return the one if exist (There is a partial unique index on fileName + autoImported where autoImported = true) 
            </summary>
            <param name="inboundFileName">The inbound file name</param>
            <param name="inboundFileType">The inbound file type</param>
            <param name="autoImported">The autoImported flag</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The first inbound file that matches the search</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IInboundFileRepository.FindAllAutoImportedByFileNames(System.Collections.Generic.IEnumerable{System.String},TaxHub.Models.InboundFileType,System.Threading.CancellationToken)">
            <summary>
            Finds all RTS files given a list of file names
            </summary>
            <param name="fileNames">An IEnum of file names</param>
            <param name="inboundFileType">The inbound file type</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The RTS inbound files.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IHolidayRepository">
            <summary>
            The holiday repository definition.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IHolidayRepository.IsHoliday(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Returns a task to see if the date passed is a holiday
            </summary>
            <param name="systemUtcDate">System Utc Date</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns a task to see if the date passed is a holiday</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IHolidayRepository.FindOneByHolidayDate(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Find holiday object by holiday date.
            </summary>
            <param name="holidayDate">The holiday date.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Holiday object</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPenaltyInterestRepository">
            <summary>
            The Penalty and Interest Repo
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPenaltyInterestRepository.Create(System.Collections.Generic.IEnumerable{TaxHub.Models.PenaltyInterest},System.Threading.CancellationToken)">
            <summary>
            Creates all Penalty Interest records along with their respective details.
            </summary>
            <param name="penaltyInterest">The collection of the Penalty Interest.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPenaltyInterestRepository.FindAllByOperationId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns list of PrintableDocuments with given check ID
            </summary>
            <param name="operationId">Operation Id to search for</param>
            <param name="cancellationToken">Cancelation token</param>
            <returns>Matching PenaltyInterest collection, null otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPenaltyInterestRepository.FindOneByEntryId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find by EntryId
            </summary>
            <param name="entryId">Entry Id to search for</param>
            <param name="cancellationToken">Cancelation token</param>
            <returns>Matching PenaltyInterest collection, null otherwise</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPenaltyInterestRepository.FindOneByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns list of PrintableDocuments with given check ID
            </summary>
            <param name="liabilityId">Liability Id to search for</param>
            <param name="cancellationToken">Cancelation token</param>
            <returns>Matching PenaltyInterest collection</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPenaltyInterestRepository.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Returns the count based on filters
            </summary>
            <param name="filterParams">The filter parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A long</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPenaltyInterestRepository.GetPITypeTotals(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Returns the PIType grouped as well as their total penalty and interest amount
            </summary>
            <param name="pageParams"> Page Params</param>
            <param name="cancellationToken"> Cancellation Token</param>
            <returns>List of PenaltyInterestsTypesTotals</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IQuarterEndRepository">
            <summary>
            A repository to retrieve Quarter End data.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterEndRepository.GetEmployeeCountByPostQeId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the employee count by POST_QE_ID
            </summary>
            <param name="postQeId">The POST_QE_ID.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The count of the employees for the <paramref name="postQeId"/>.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterEndRepository.GetAgencyCountByLedgerId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the agency count by LEDGER_ID
            </summary>
            <param name="ledgerId">The LEDGER_ID.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The count of the Agencies for the <paramref name="ledgerId"/>.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterEndRepository.GetAgencyCountByPostQeId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the agency count by POST_QE_ID
            </summary>
            <param name="postQeId">The POST_QE_ID.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The count of the Agencies for the <paramref name="postQeId"/>.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterEndRepository.GetQEPhases``1(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get QE Phases
            </summary>
            <param name="year">The year</param>
            <param name="quarter">The Quarter</param>
            <param name="cancellationToken">The cancellationToken</param>
            <returns>The number of clients for each phase</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterEndRepository.GetQVRStatuses``1(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get QVR Statuses
            </summary>
            <param name="year">The year</param>
            <param name="quarter">The Quarter</param>
            <param name="cancellationToken">The cancellationToken</param>
            <returns>The number of postQE clients that are in QVR status</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterEndRepository.GetQEPackageStatuses``1(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get QE Package Statuses
            </summary>
            <param name="year">The year</param>
            <param name="quarter">The Quarter</param>
            <param name="cancellationToken">The cancellationToken</param>
            <returns>The number of postQE clients that are in package Generation status</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IFilingCollectorGroupRepository">
            <summary>
            Class for FilingCollectorGroup repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IFilingCollectorGroupRepository.FindByMainPayee(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds a list of FilingCollectorGroups based on the main payee
            </summary>
            <param name="mainPayeeId">the main payee id</param>
            <param name="cancellationToken">the cancellation token</param>
            <returns>a FilingCollectorGroup with the given mainPayeeId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IFilingCollectorGroupRepository.FindOne(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds an FilingCollectorGroup based on the main payee and local payee
            </summary>
            <param name="mainPayeeId">the main payee id</param>
            /// <param name="localPayeeId">the local payee id</param>
            <param name="cancellationToken">the cancellation token</param>
            <returns>a FilingCollectorGroup with the given mainPayeeId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IFilingCollectorGroupRepository.FindOneByLocalPayeeId(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds one Collector by LocalPayeeId.
            </summary>
            <param name="localPayeeId">The LocalPayeeId.</param>
            <param name="cancellationToken">The CancellationToken.</param>
            <returns>The FilingCollectorGroup.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.DepositScheduleRepository">
            <summary>
            DepositScheduleRepository
            </summary>
            <seealso cref="T:TaxHub.CoreServices.DataAccess.DepositScheduleRepository" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.DepositScheduleRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IDepositScheduleDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.DepositScheduleRepository" /> class.
            </summary>
            <param name="contextFactory">The Depsoit Schedule context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.DepositScheduleRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.DepositScheduleRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.DepositScheduleRepository.FindOne(System.String,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.DepositScheduleRepository.FindAllByScheduleId(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.DepositScheduleRepository.FindAllByScheduleIdAndYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.DepositScheduleRepository.Contains(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.DepositScheduleRepository.ContainsByExp(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.DepositSchedule,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.DepositScheduleRepository.FindOneByScheduleIdAndDateBetweenFromAndToDate(System.String,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.DepositScheduleRepository.FindByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.DepositSchedule,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.DepositScheduleRepository.Update(System.Guid,TaxHub.Models.DepositSchedule,System.Threading.CancellationToken)">
            <summary>
            Updates the Entity.
            </summary>
            <param name="id">The identifier.</param>
            <param name="updatedEntity">The updated entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true when the update was done</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.DepositScheduleRepository.GetHolidays(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.ICheckRepository">
            <summary>
            Data access layer to Check aggregate.
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.ISimpleRepository`2" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ICheckRepository.DeleteByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.Check,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Delete Check aggregates and all Check Distribution child aggregates for the expression.
            </summary>
            <param name="expression">A function to test each element for a condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ICheckRepository.FindByCheckId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find Check aggregate by check identifier
            </summary>
            <param name="checkId">The check identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The check</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ICheckRepository.FindAllByBulkCheckId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find all checks by bulk check identifier
            </summary>
            <param name="bulkCheckId">The bulk check identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>List of <see cref="T:TaxHub.Models.Check"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ICheckRepository.FindAllInfosByBulkCheckId(System.Int32,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all checks by bulk check identifier (do NOT include distribution)
            </summary>
            <param name="bulkCheckId">The bulk check identifier</param>
            <param name="pageParams">The paging parameters.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>List of <see cref="T:TaxHub.Models.Check"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ICheckRepository.FindAllByUsgBankAccountId(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all the checks by USG Bank Account identifier
            </summary>
            <param name="usgBankAccountId">The usg Bank Account Id</param>
            <param name="pageParams">The page paramters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The checks that belongs to the usg Bank Account Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ICheckRepository.GetExportedChecks(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all valid and reconciled paginated
            </summary>
            <param name="pageParams">page params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>A file info collection</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IClientDraftRepository">
            <summary>
            Interface for ClientDraft Repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientDraftRepository.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the clientId.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns an instance or null, if not found.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientDraftRepository.FindAll(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the clientId.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="pageParams">pageParams</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns an instance or null, if not found.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientDraftRepository.FindByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
             Method searches for a clientDraft by client id.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="cancellationToken">The cancellationToken</param>
            <returns>Returns list of clientDraft records for the client.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IClientNoteRepository">
            <summary>
            Contract for ClientNote repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientNoteRepository.GetLatestNoteByClientIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns the latest note added for the given parameters
            </summary>
            <param name="clientId">The clientid</param>
            <param name="payeeId">The payeeId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the latest note</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientNoteRepository.GetAllNotesByClientIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method returns all the notes for the given parameters 
            </summary>
            <param name="clientId">The clientid</param>
            <param name="payeeId">The payeeId</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the all the notes</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientNoteRepository.FindAllByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all the notes by client Id
            </summary>
            <param name="clientId">The Client Id</param>
            <param name="cancellationToken"> The cancellation token</param>
            <returns>The notes</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IClientParentChildRepository">
            <summary>
            Contract for Client parent/child relation Repo
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindAllByParentClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by client id.
            </summary>
            <param name="parentClientId">The client id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of Client Agency records for the client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindAllChildrenClientIdsByParentClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for all children client Ids by parent clientId.
            </summary>
            <param name="parentClientId">The client id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of children client ids for the client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindOneByChildClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by client id.
            </summary>
            <param name="childClientId">The client id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of Client Agency records for the client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindAllByChildClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all relationships by Child Client Id
            </summary>
            <param name="childClientId">The child client identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of relationships.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindAllMultiFeinsByTenant``1(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all FEINs that are in more than 1 client per tenant
            </summary>
            <param name="tenantId">Tenant Id to search. Null will return all tenants</param>
            <param name="cancellationToken">Cancellation Token</param>
            <typeparam name="T"></typeparam>
            <returns>List of Feins by Tenant</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindAllMultiFeins``1(System.Threading.CancellationToken)">
            <summary>
            Finds all FEINs that are in more than 1 client per tenant
            </summary>
            <param name="cancellationToken">Cancellation Token</param>
            <typeparam name="T"></typeparam>
            <returns>List of Feins by Tenant</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindAllMultiFeinClientsByTenant``1(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all Clients and agency counts for each fein by tenant
            </summary>
            <param name="tenantId">Tenant Id</param>
            <param name="fein">Client TIN</param>
            <param name="cancellationToken">Cancellation Token</param>
            <typeparam name="T"></typeparam>
            <returns>List of Clients order by Agency Count and alphabetical</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindOneByChildAndPayee(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by client id.
            </summary>
            <param name="childClientId">The client id.</param>
            <param name="payeeId">The Payee Id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns Client parent child record set up for multifein.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindOneByParentAndPayee(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by client id.
            </summary>
            <param name="parentClientId">The client id.</param>
            <param name="payeeId">The Payee Id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns Client parent child record set up for multifein.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindOneByParentAndChildAndPayee(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by client id.
            </summary>
            <param name="parentClientId">The parent client id.</param>
            <param name="childClientId">The child client id.</param>
            <param name="payeeId">The Payee Id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns Client parent child record set up for multifein.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindOneByParentOrChild(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by client id.
            </summary>
            <param name="clientId">The parent client id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns Client parent child record set up for multifein.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindOneByParentOrChildAndPayee(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by client id.
            </summary>
            <param name="clientId">The parent client id.</param>
            <param name="agencyId">The Payee Id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns Client parent child record set up for multifein.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindAllByParentIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by client id.
            </summary>
            <param name="parentClientId">The parent client id.</param>
            <param name="payeeId">The Payee Id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns Client parent child record set up for multifein.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.ContainsAnyRecordsForTenant(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method Checks if tenant has any records
            </summary>
            <param name="tenantId">The Tenant Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns boolean value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.FindByTenant(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method Returns All Common Pay Records for the passed in tenantId.  This method doesn't distinguish between common pay and multi-fein tenants.
            </summary>
            <param name="tenantId">The Tenant Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns Client parent child record set up for multifein.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.IsMultiFeinsByClient(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns true or false if client id a multifein
            </summary>
            <param name="clientId">The client Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns boolean value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.IsCommonPayByClient(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns true or false if client id a commonpay
            </summary>
            <param name="clientId">The client Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Returns boolean value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientParentChildRepository.GetPayeeToYeAgencyMapByClient(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets Payee to YeAgency map for all mapeed payees of passed in client
            </summary>
            <param name="clientId"> The client Id</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns> Dictionary of mapping</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IClientPayrollRepository">
            <summary>
            Contract for Client Payroll repo
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientPayrollRepository.FindAllByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a import client by import client id.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of import client records for the client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientPayrollRepository.FindOneByClientIdPayrollId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a import client by import client id.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="payrollId">The payroll code.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a Import Client object or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientPayrollRepository.FindOneByPayrollUnitId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method searches for a import client by import client id.
            </summary>
            <param name="payrollUnitId">The payroll code.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a Import Client object or null, if not found.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPayeeEfileInfoRepository">
            <summary>
            Class for PayeeEfileInfo repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPayeeEfileInfoRepository.FindOne(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds an PayeeEfileInfo based on the payeeID and fieldName
            </summary>
            <param name="payeeId">the id</param>
            <param name="fieldName">the field name token</param>
            <param name="cancellationToken">the cancellation token</param>
            <returns>an AgencyAch with the given agencyId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPayeeEfileInfoRepository.Update(TaxHub.Models.PayeeEfileInfo,System.Threading.CancellationToken)">
            <summary>
            Updates a PayeeEfileInfo
            </summary>
            <param name="updatedEntity">the entity that was modified</param>
            <param name="cancellationToken">the cancellation token</param>
            <returns>whether the changes were successfully applied</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IMappedTaxPayRepository">
            <summary>
            Class for MappedTaxPay repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IMappedTaxPayRepository.FindAll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all MapppedTaxItems by the specified tenantId and perControl.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payrollInstanceId">The payroll instance identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>MappedTaxPays in the specified year.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IMappedTaxPayRepository.FindAllPeriodicPayroll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all payroll MapppedTaxItems by payroll instance identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payrollInstanceId">The payroll instance identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>MappedTaxPays in the specified year.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IMappedTaxPayRepository.FindAllPeriodicNonPayroll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all non payroll MapppedTaxItems by periodic tax processing identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched MappedTaxPays.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IMappedTaxPayRepository.FindAllPeriodic(System.Guid,System.Guid,System.Boolean,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all non payroll MappedTaxItems by periodic tax processing identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="isPayroll">Denotes payroll vs nonpayroll.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched MappedTaxPays.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IMappedTaxPayRepository.FindAllGetOnlyIdAndTenantId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve the Id and TenantIds of MappedTaxPay by PeriodicTaxProcessingId
            </summary>
            <param name="tenantId">The tenant Id.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing Id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The matched MappedTaxPays.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPayTrackingRepository">
            <summary>
            TrackedPayRepository Repository.  Stores pay ids that were processed during periodic processing.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPayTrackingRepository.CountByPayrollInstanceId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns the count of tracked pays for the given payroll instance
            </summary>
            <param name="tenantId">The Tenant ID</param>
            <param name="payrollInstanceId">The payroll instance id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of pays tracked for the given payrollInstanceId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPayTrackingRepository.GetValidationSummaryFromExcludedPays(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds the payroll validation summary from excluded pays.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns validation summary</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPayTrackingRepository.FindAllGetOnlyIdAndTenantId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve the Id and TenantIds of Paytracking by PeriodicTaxProcessingId
            </summary>
            <param name="tenantId">The tenant Id.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing Id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The matched PayTrackings.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPayTrackingRepository.DeleteById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete PayTracking by it's Id.
            </summary>
            <param name="id">The PayTracking's Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Result</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IClientAgencyRepository">
            <summary>
            Contract for Client Agency Repo
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientAgencyRepository.FindByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by client id.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of Client Agency records for the client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientAgencyRepository.FindOneByClientAgencyId(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by agency id.
            </summary>
            <param name="clientAgencytId">The Client Agency.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a Client Agency object or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientAgencyRepository.FindByClientIdPayeeId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Method searches for a Client Agency by client id and payeeId
            </summary>
            <param name="clientId">The client id.</param>
            <param name="payeeId">the payee id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a Client Agency object or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientAgencyRepository.FindByPayeeId(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Client Agency by payee id.
            </summary>
            <param name="payeeId">The payee id.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of Client Agency records for the payee.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientAgencyRepository.FindAllByClientFein``1(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the agencies for every client that has a fein that matches.
            </summary>
            <param name="payeeId">The agency code</param>
            <param name="fein">FEIN</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <typeparam name="T"></typeparam>
            <returns>List of Agencies</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientAgencyRepository.FindAllByLastChange(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
             <summary>
             Returns the elements that have any change after the given lastChange 
             </summary>
             <param name="lastChange">
             Base64 String representation of a byte[]. This value is same we have in table AgencyId.LastChange
             The type in SQL is RowVersion that maps to byte[] in .net.
            
             If no value is provided for this parameter then everything is returned. 
             </param>
             <param name="pagedDataParameters">the paged data parameters</param>
             <param name="cancellationToken">the cancellation token</param>
             <returns>Elements that have any modification after the lastChange parameter.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientAgencyRepository.FindByScheduleIds(System.String[],SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get client agencies by schedule identifiers.
            </summary>
            <param name="scheduleIds">The list of schedule identifiers.</param>
            <param name="pageParameters">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of client agencies.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IFederalElectronicTransferRepository">
            <summary>
            Data access layer to Federal Electronic Transfer aggregate.
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.ISimpleRepository`2" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IFederalElectronicTransferRepository.FindOneByExportedFileId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds a single Fed EFT based on the file request ID.
            </summary>
            <param name="fileId">File Request ID.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Returns a single transfer record.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IFederalElectronicTransferRepository.DeleteByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.FederalElectronicTransfer,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Delete Fed EFT aggregates and all Fed EFT Distribution child aggregates for the expression.
            </summary>
            <param name="expression">A function to test each element for a condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IFederalElectronicTransferRepository.FindOneById(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds a single Fed EFT by id.
            </summary>
            <param name="fedEftId">Federal eft id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A Fed EFT.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IFederalElectronicTransferRepository.Contains(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Check if the Fed EFT exists by id.
            </summary>
            <param name="fedEftId">Federal eft id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A Fed EFT.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IFederalElectronicTransferRepository.FindAllByExportedFileId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get Federal EFTs based on EFT File ID
            </summary>
            <param name="fileId"> EFT File ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>returns List of FederalElectronicTransfer objects</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IImportClientRepository">
            <summary>
            Contract for Import Client Repo
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IImportClientRepository.FindAllByClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a import client by import client id.
            </summary>
            <param name="clientId">The client id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of import client records for the client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IImportClientRepository.FindAllByImportClientId(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for all active import client by import client id.
            TODO AdamD This should be changed to findOne once ULTI-297261 has been played
            </summary>
            <param name="importClientId">The client id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of import client records for the client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IImportClientRepository.FindAllByCompanyId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method searches for a import client by import client id.
            </summary>
            <param name="companyId">The companyId of import client.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns list of import client records for the client.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IImportClientRepository.FindOneByClientIdAndImportClientId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a import client by import client id.
            </summary>
            <param name="clientId">The company identifier.</param>
            <param name="importClientId">The payroll code.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns a Import Client object or null, if not found.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IImportClientRepository.FindOneByPayrollUnitId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get's a Import Client Record by PayrollUnitId
            </summary>
            <param name="payrollUnitId">payrollUnitId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>return Import Client</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPayTrackingRepositoryTaxHub">
            <summary>
            PayTracking Repository for TaxHub Collection
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPayTrackingRepositoryTaxHub.FindAll(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all the PayTrackings given the tenant and periodic tax processing
            </summary>
            <param name="tenantId">Guid</param>
            <param name="periodicTaxProcessingId">Guid</param>
            <param name="pageParams">PagedDataParameters</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPayTrackingRepositoryTaxHub.Delete(TaxHub.Models.PayTracking,System.Threading.CancellationToken)">
            <summary>
            Deletes a PayTracking
            </summary>
            <param name="item">PayTracking</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPayTrackingRepositoryTaxHub.BulkCreate(System.Collections.Generic.IEnumerable{TaxHub.Models.PayTracking},MongoDB.Driver.WriteConcern,System.Threading.CancellationToken)">
            <summary>
            Method creates multiple aggregates in the system. It performs bulk operation boosting the performance.
            </summary>
            <param name="items">The aggregates.</param>
            <param name="writeConcern">The write concern.</param>
            <param name="cancellationToken">Cancellation token</param>
            <remarks>This method is intended for a limited use due to complexity of handling errors multiple
            that might be resulted from multiple operation failures. Consider the error handling before using this method.</remarks>
            <remarks>Do not pass an empty array.</remarks>
            <remarks>Do not pass more than 1000 elements.</remarks>
            <returns>Returns a boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPayTrackingRepositoryTaxHub.Dispose">
            <summary>
            Method disposes any resources used by the class.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository">
            <summary>
            Class for PeriodictTaxProcessing mongoDB repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindOnePayrollByPayrollInstance(System.Guid,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Finds the one payroll by payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="isPayroll">Determines if the payroll is standard (true) or nonstandard (false)</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched periodic tax processing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindAllPayrollByPayrollInstance(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the one payroll by payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All matched periodic tax processing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindOneNonPayrollByPayrollInstance(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the one non payroll by payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched periodic tax processing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindAllNonPayrollByPayrollInstance(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the one non payroll by payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All matched periodic tax processing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindOneNonPayrollInstanceAndProcessingStatus(System.Guid,System.String,System.String,TaxHub.Models.ProcessingStatus,System.Threading.CancellationToken)">
            <summary>
            Get periodic tax processing that is non payroll by processing status.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The perControl.</param>
            <param name="processingStatus">The processing status.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched periodic tax processing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindOneNonPayrollInstanceAndProcessingStatusMappingOrFailed(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the one non payroll instance and processing status mapping or failed.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched periodic tax processing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindLastNonPayrollInstance(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the last non payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The matched periodic tax processing.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindLastByPayrollInstance(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the last non payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The per control.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The matched periodic tax processing.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindAllIncomplete(System.DateTime,System.Guid[],SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all payrolls by expression.
            </summary>
            <param name="maxDateTime">The max DateTime to limit the amount of incomplete periodic tax processings.</param>
            <param name="tenantIds">The list of tenant ids.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The matched periodic tax processing.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.CountAllIncomplete(System.DateTime,System.Guid[],System.Threading.CancellationToken)">
            <summary>
            Finds all payrolls by expression.
            </summary>
            <param name="maxDateTime">The max DateTime to limit the amount of incomplete periodic tax processings.</param>
            <param name="tenantIds">The list of tenant ids.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The matched periodic tax processing.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindAllByProcessingStatus(TaxHub.Models.ProcessingStatus,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all PeriodicTaxProcessings matching the given processing status
            </summary>
            <param name="processingStatus">The processing status</param>
            <param name="pageParams">The page parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of PeriodicTaxProcessings</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindOneFailed(System.Guid,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Finds one PeriodicTaxProcessing in processing status MappingFailed or Failed considering a sort definition.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The period control.</param>
            <param name="isPayroll">The isPayroll flag.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched PeriodicTaxProcessing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindAllWithMinId(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all with identifier greater than the given value.
            </summary>
            <param name="minId">The minimum identifier.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matched PeriodicTaxProcessing.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindAllByTenantPayGroupPerControl(System.Guid,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all PeriodicTaxProcessing
            </summary>
            <param name="tenantId">The tenant ID.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The Percontrol.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All PeriodicTaxProcessings.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.CountByTenantPayGroupPerControl(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Counts all PeriodicTaxProcessings
            </summary>
            <param name="tenantId">The tenant ID.</param>
            <param name="payGroup">The pay group.</param>
            <param name="perControl">The Percontrol.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Count of all PeriodicTaxProcessings.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindAllAfterDate(System.DateTime,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all periodic tax processings created after given date.
            </summary>
            <param name="dateTime">The minimum date time.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns periodic tax processings created after given date time.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxProcessingRepository.FindAllBetweenPerControlsGetOnlyIdAndPerControl(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all PeriodicTaxProcessing
            </summary>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="tenantId">The tenant Id.</param>
            <param name="minimumPerControl">The minimum perControl.</param>
            <param name="maximumPerControl">The maximum perControl.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All PeriodicTaxProcessings.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.PaymentWithCreditReductionInfo">
            <summary>
            Class to represent info from repo
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.PaymentWithCreditReductionInfo.PaymentId">
            <summary>
            The payment identifier
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.DataAccess.PaymentWithCreditReductionInfo.CreditTrackingId">
            <summary>
            The credit tracking identifier
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IAlertRepository">
            <summary>
            Interface for AlertRepository
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IInputTaxInstanceRepository">
            <summary>
            Input tax instance repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IInputTaxInstanceRepository.FindByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find a liability by its liability identifier
            </summary>
            <param name="liabilityId">The liability identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task that results to a liability</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IInputTaxInstanceRepository.Count(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get the count of the input tax instance
            </summary>
            <param name="pageParams">The paged parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns> A task that returns the count</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IInputTaxInstanceRepository.GetTotalTaxSumOfInputInstances(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get the sum of the total tax of all input tax instances
            </summary>
            <param name="pageParams">The paged parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task that returns the total tax of all the input tax instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IInputTaxInstanceRepository.FindAllByPayrollCode(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Find all Input Tax Instances by payrollCode (Import_Client_Id)
            </summary>
            <param name="companyId">The company identifier.</param>
            <param name="payrollCode">The payroll code</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task that results to a collection of <see cref="T:TaxHub.Models.InputTaxInstance" /></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IInputTaxInstanceRepository.FindOthersByImportClientAndCheckDate(System.Guid,System.String,System.DateTime,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the Input Tax Instances by import client and check date that are not the excluded Payroll Id.
            </summary>
            <param name="companyId">The company identifier.</param>
            <param name="importClient">The import client.</param>
            <param name="checkDate">The check date.</param>
            <param name="excludedPayrollId">The excluded payroll identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that results to a collection of <see cref="T:TaxHub.Models.InputTaxInstance" /></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IInputTaxInstanceRepository.HasPayrollForClient(System.String,System.Threading.CancellationToken)">
            <summary>
            Determine if Company Has an Input Tax Instance 
            </summary>
            <param name="clientId">The client Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task that returns true if the company has an InputTaxInstance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IInputTaxInstanceRepository.FindOnebyCheckDateAndId(System.DateTime,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Determine if Company Has an Input Tax Instance 
            </summary>
            <param name="checkdate">The checkdate</param>
            <param name="id">The id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task that returns true if the company has an InputTaxInstance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IInputTaxInstanceRepository.FindAll(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.InputTaxInstance,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Find all Input Tax Instances that comply with a certain condition
            </summary>
            <param name="expression">Expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task that results to a collection of <see cref="T:TaxHub.Models.InputTaxInstance"/></returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.ICompanyRepository">
            <summary>
            Interface for Company Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ICompanyRepository.FindOneByTenantIdAndCoId(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the one by coid and tenantid.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="coId">The coid.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ICompanyRepository.FindAllByTenantIdAndCoIds(System.Guid,System.String[],System.Threading.CancellationToken)">
            <summary>
            Finds all companies for the corresponding coIds and tenant identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="coIds">The list of coIds.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ICompanyRepository.FindAllComponentCompanies(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find all companies whose legal entity has the given company Id.
            </summary>
            <param name="leCompanyId">The Legal Entity's Company Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The component companies.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ICompanyRepository.FindAllLegalUSEntities(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary> 
            Finds all companies that are legal entities 
            </summary> 
            <param name="pagedDataParameters"> The pagination parameters</param> 
            <param name="cancellationToken">The cancellation token.</param> 
            <returns>The companies that are legal entities</returns> 
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPreparerCheckRepository">
            <summary>
            The Preparer check repository intreface
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPreparerCheckRepository.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Method finds the total amount of matching items
            </summary>
            <param name="filterParams">The filterParameters for the count</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of matching items</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPreparerCheckRepository.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the clientId.
            </summary>
            <param name="preparerCheckId">The preparer check identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns an instance or null, if not found.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPreparerCheckRepository.FindOneByPreparerCheckId(System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the clientId.
            </summary>
            <param name="preparerCheckId">The preparer check identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns an instance or null, if not found.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPreparerCheckRepository.FindAllByStatus(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets a list of preparer checks by status
            </summary>
            <param name="status">status</param>
            <param name="pageParams">Page parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of clients corresponding to tenant ID and page parameters</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPreparerRepository">
            <summary>
            Class for TaxDisbursementAccount Repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPreparerRepository.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the clientId.
            </summary>
            <param name="preparerId">The client identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns an instance or null, if not found.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPreparerRepository.FindAllByStatus(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all Preparers by Status
            </summary>
            <param name="status">status to find by</param>
            <param name="pageParams">the pagination parameters</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>List of all the Preparers</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPreparerRepository.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the count of preparers by filter.
            </summary>
            <param name="filterParams">The filter to get the count of prepares that match the filter.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Number of matching preparers.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPrintableDocumentRepository">
            <summary>
            The printable document repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPrintableDocumentRepository.Count(SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Method finds the total amount of matching items
            </summary>
            <param name="filterParams">Filter parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of matching items</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPrintableDocumentRepository.FindAllByCheckId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a list of printable documents with given check ID
            </summary>
            <param name="checkId">Chekc id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of matching printable documents</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPrintableDocumentRepository.FindByIds(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Method finds a list of printable documents that match given a list of ids
            </summary>
            <param name="ids">The list of ids of printable documents to fetch</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of matching printable documents</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPrintableDocumentRepository.FindReadyAndNonMatchingIds(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Method finds a list of ready printable documents that do not match given a list of ids
            </summary>
            <param name="ids">The list of ids of printable documents to fetch</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of matching items</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPrintableDocumentRepository.FindAllByFormDocumentId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns a list of printable documents with given form document ID
            </summary>
            <param name="formDocumentId">Form DocumentId</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of matching printable documents</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPrintFileRequestRepository">
            <summary>
            Blue print of PrintFileRequestRepository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPrintFileRequestRepository.EnsureCollection(System.Boolean)">
            <summary>
            Make sure the collection has indexes
            </summary>
            <param name="withDrop">withDrop</param>
            <returns>task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPrintFileRequestRepository.FindAllByBatchId(System.Guid,TaxHub.Common.Enums.PrintFileRequestStatus,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all Staged PrintFiles by batchId.
            </summary>
            <param name="batchId">The batch identifier.</param>
            <param name="printFileRequestStatus">The status of the document</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A collection of Staged Print Files.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IProcessingTaxInstanceRepository">
            <summary>
            Contract for ProcessingTaxInstance repository
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IStateElectronicTransferRepository">
            <summary>
            Data access layer to State Electronic Transfer aggregate
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.ISimpleRepository`2" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IStateElectronicTransferRepository.FindOneByExportedFileId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds a single State EFT based on the file request ID.
            </summary>
            <param name="fileId">File Request ID.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Returns a single transfer record.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IStateElectronicTransferRepository.FindAllByBulkEftId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all State EFTs based on the Bulk EFT ID.
            </summary>
            <param name="bulkEftId">Bulk EFT ID.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Returns a list of transfer records.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IStateElectronicTransferRepository.FindAllInfosByBulkEftId(System.Int32,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all State EFTs based on the Bulk EFT ID (does NOT include distribution)
            </summary>
            <param name="bulkEftId">Bulk EFT ID.</param>
            <param name="pageParams">Bulk EFT ID.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Returns a list of transfer records.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IStateElectronicTransferRepository.DeleteByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.StateElectronicTransfer,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Delete State EFT aggregates and all State EFT Distribution child aggregates for the expression.
            </summary>
            <param name="expression">A function to test each element for a condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IStateElectronicTransferRepository.FindOneById(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find the state eft by int id
            </summary>
            <param name="eftStateId">The id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>State electronic transfer</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IStateElectronicTransferRepository.FindAllByExportedFileId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get State EFTs based on EFT File ID
            </summary>
            <param name="fileId"> EFT File ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>returns List of StateElectronicTransfer objects</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IStateElectronicTransferRepository.FindOneByGuidId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find the state EFT by its guid ID
            </summary>
            <param name="guidId">THe Guid Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>State electronic transfer</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IStateElectronicTransferRepository.GetLastBatchNoByDate(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Get next batch number for state efts.
            </summary>
            <param name="date">The date.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Batch number.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IAchFileRepository">
            <summary>
            Blue print of PrintFileRequestRepository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAchFileRepository.FindByFileInfoId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the by file request identifier.
            </summary>
            <param name="fileInfoId">The file request identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>AchFile</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IUltiproTaxCodeMappingRepository">
            <summary>
            Interface for UltiproTaxCodeMappingCache repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IUltiproTaxCodeMappingRepository.GetUltiProToUteMap(System.Threading.CancellationToken)">
            <summary>
            Gets the UltiProToUTE mappings
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns>UltiProToUTE mappings</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IUltiproTaxCodeMappingRepository.GetImportCodes(System.Threading.CancellationToken)">
            <summary>
            Get records from import_code table
            </summary>
            <param name="cancellationToken">ct</param>
            <returns>Returns an <see cref="T:TaxHub.CoreServices.Application.Results.ImportCodeResult"/>.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IUltiproTaxCodeMappingRepository.GetUteTaxCode(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the UteTaxCode from the taxId
            </summary>
            <param name="taxId">taxId to find UteTaxCode</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>Returns a UteTaxCode.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IAgencyAchRepository">
            <summary>
            Class for AgencyAch repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyAchRepository.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds an AgencyAch based on the agencyId
            </summary>
            <param name="agencyId">the id</param>
            <param name="cancellationToken">the cancellation token</param>
            <returns>an AgencyAch with the given agencyId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyAchRepository.FindAllByRoutingNumber(System.String,System.Threading.CancellationToken)">
            <summary>
            Find all AgencyAch by RoutingNumber
            </summary>
            <param name="routingNumber">Routing Number</param>
            <param name="cancellationToken">Cancelation token</param>
            <returns>IEnumerable of AgencyAch</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IDepositScheduleRepository">
            <summary>
            IScheduleRepository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.ISimpleRepository`2" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IDepositScheduleRepository.FindAllByScheduleId(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a IEnumerable collection of Depsoit Schedules
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Enumerable Collection</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IDepositScheduleRepository.FindOne(System.String,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets a deposit schedule
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="fromDate">fromDate</param>
            <param name="toDate">toDate</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Returns DepositSchedule</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IDepositScheduleRepository.GetHolidays(System.Int32)">
            <summary>
            Gets the Holiday for a given year
            </summary>
            <param name="year">year</param>
            <returns>Returns a List</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IDepositScheduleRepository.FindAllByScheduleIdAndYear(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets Deposit Schedule By ScheduleId and Year
            </summary>
            <param name="scheduleId">scheduleId</param>
            <param name="year">year</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Returns a IEnumerable collection</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IDepositScheduleRepository.FindByExpression(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.DepositSchedule,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets Deposit Schedule By expression
            </summary>
            <param name="expression">expresion</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Returns a IEnumerable collection</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IDepositScheduleRepository.ContainsByExp(System.Linq.Expressions.Expression{System.Func{TaxHub.Models.DepositSchedule,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            returns a bool value if data exists mathcing the expression
            </summary>
            <param name="expression">expression</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>retunrs a boolean value</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IDepositScheduleRepository.FindOneByScheduleIdAndDateBetweenFromAndToDate(System.String,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Get deposit schedule by scheduleId and date between from and to date.
            </summary>
            <param name="scheduleId">The schedule identifier.</param>
            <param name="date">The requested date</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>returns a deposit schedule</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IEmployeePayrollRepository">
            <summary>
            Represents repository interface for EmployeePayrollDbContext.
            </summary>
            <seealso>
                <cref>TaxHub.Common.DataAccess.IRepository{TaxHub.Models.Employee, System.Int32}</cref>
            </seealso>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IEmployeePayrollRepository.FindAllByPayrollId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all employees by payroll identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Employees with the given PayrollId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IEmployeePayrollRepository.FindOneByEmployeeId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all employees by payroll identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Employees with the given PayrollId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IEmployeePayrollRepository.FindOne(System.Int32,System.String,System.Guid,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an employee by its unique index
            </summary>
            <param name="payrollId">The payroll identifier</param>
            <param name="eeid">The employee id number</param>
            <param name="tenantId">The tenant identifier</param>
            <param name="entityCode">The entity code</param>
            <param name="stateCode">The state code</param>
            <param name="localCode">The local code</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The employee payroll instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IEmployeePayrollRepository.BulkCreate(System.Collections.Generic.ICollection{TaxHub.Models.EmployeePayroll},System.Threading.CancellationToken)">
            <summary>
            Inserts in bulk the collection of EmployeePayroll objects.
            </summary>
            <param name="employeePayrolls">The employee payrolls.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An object which contains a list of the inserted records and a list of the existing records.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IEmployeeQuarterlyRepository">
            <summary>
            Represents repository interface for EmployeeQuarterlyDbContext.
            </summary>
            <seealso>
                <cref>TaxHub.Common.DataAccess.ISimpleRepository{TaxHub.Models.Employee, System.Int32}</cref>
            </seealso>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IEmployeeQuarterlyRepository.FindAllByQuarterlyId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all employees by quarterly tax instance identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Employees with the given QuaterlyId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IEmployeeQuarterlyRepository.FindAllByTenantId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all by tenant identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Employees with the given TenantId</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IEmployeeQuarterlyRepository.FindOneByEmployeeId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds one employees by unique employee identifer.
            </summary>
            <param name="employeeId">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Employees with the given PayrollId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IEmployeeQuarterlyRepository.FindOneByEmployeeIdQuarterlyTaxProcessingIdStateIdLocalIdAndEntityId(System.String,System.Guid,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds one employees by unique employee identifer.
            </summary>
            <param name="employeeId">The identifier.</param>
            <param name="quarterlyTaxProcessingId">The quarterly tax processing id.</param>
            <param name="stateCode">The State Code.</param>
            <param name="localCode">The Local code.</param>
            <param name="entityCode">The entity Code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Employees with the given PayrollId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IEmployeeQuarterlyRepository.FindOneBySsnEntityStateLocalEmployeeCode(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds one employees by unique employee identifer.
            </summary>
            <param name="qeId">The QE ID</param>
            <param name="ssn">The SSN</param>
            <param name="entityCode">The entity Code.</param>
            <param name="stateCode">The State Code.</param>
            <param name="localCode">The Local code.</param>
            <param name="employeeCode">The employee code. This parameter is optional. If not present it will have "" by default</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Employees with the given PayrollId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IEmployeeQuarterlyRepository.FindOneByTenantIdQuarterlyTaxProcessingId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds one employees by unique employee identifer.
            </summary>
            <param name="tenantId">The identifier.</param>
            <param name="quarterlyTaxProcessingId">The quarterly tax processing id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Employees with the given PayrollId.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IEmployeeQuarterlyRepository.FindAllByQuarterlyIdAndEntityCode(System.Int32,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all employees by quarterly tax instance identifier considering the paged data parameters.
            </summary>
            <param name="quarterlyId">The QE identifer.</param>
            <param name="entityCode">The entityCode.</param>
            <param name="pageParams">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The employees with the given quarterly identifer.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.ILiabilityRepository">
            <summary>
            Class for Liability repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ILiabilityRepository.FindByPeriodicTaxInstanceId(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the Liability by periodic tax instance identifier.
            </summary>
            <param name="tenantId">The periodic tax instance identifier.</param>
            <param name="periodicTaxInstanceId">The periodic tax instance identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of all Payments that are associated with the give PeriodicTaxInstance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ILiabilityRepository.FindAllByOriginTypeCreationDate(TaxHub.Common.Enums.LiabilityOriginType,System.DateTime,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Find all liablities by origin type and creation utc date. Used for migration
            </summary>
            <param name="originType">Origin type</param>
            <param name="creationUtcDate"> Creation date </param>
            <param name="pageParams"> page params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns> List of matching liabilities</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ILiabilityRepository.FindOneByCashMgmtLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            FindOneByCashMgmtLiabilityId.
            </summary>
            <param name="cashMgmtLiabilityId">Cash Management Liability Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the liability by the cash management liability id.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ILiabilityRepository.FindOneByOriginTypeAndReferenceId(TaxHub.Common.Enums.LiabilityOriginType,System.Int32,System.Threading.CancellationToken)">
            <summary>
            FindOneByCashMgmtLiabilityId.
            </summary>
            <param name="originType">Origin Type Id.</param>
            <param name="referenceId">Reference Id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the liability by the cash management liability id.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IAgencyRepository">
            <summary>
            IAgencyRepository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.ISimpleRepository`2" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyRepository.Contains(System.String,System.Threading.CancellationToken)">
            <summary>
            Method checks if repository contains an aggregate with specified aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns boolean value indicating a success.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyRepository.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns an instance or null, if not found.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyRepository.FindAllMatching(System.String,System.String,System.Boolean,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets a list of agencies/payees that match the provided agency state and payee patterns
            </summary>
            <param name="agencyState">The 2-letter state code</param>
            <param name="payeePattern">The patterns to search for</param>
            <param name="activeOnly">A flag indicating whether or not only active agencies should be returned</param>
            <param name="pageParams">The paging parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of matching agencies/payees</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyRepository.FindAllMatching(TaxHub.Common.Models.AgencyAuthority,System.Boolean,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets a list of agencies/payees that match the provided authority federal/state/local
            </summary>
            <param name="authority">federal/state/local</param>
            <param name="activeOnly">A flag indicating whether or not only active agencies should be returned</param>
            <param name="pageParams">The paging parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of matching agencies/payees</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyRepository.GetUteToUltiProMapping``1(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the mapping between Ute to Ultipro Agencies 
            </summary>
            <param name="pageParams">Tha paging parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of the mappings between Ute Agency to UltiPro tax code</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyRepository.FindAllByIds(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get all agencies by ids
            </summary>
            <param name="payeeIds">The list of payee ids.</param>
            <param name="includeCombinePayee">Wether or not to include combine payee.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>List of agencies</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyRepository.FindAllCombinedAgencies(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the combined agencies based on Payee Id
            </summary>
            <param name="payeeId">Payee Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Gets the combined agencies based on Payee Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyRepository.FindAllCombinedAgencies(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the combined agencies based on Payee Ids
            </summary>
            <param name="payeeIds">Payee Ids</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Gets the combined agencies based on Payee Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyRepository.FindAllByPayeeIds(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets all agencies based on payee Id
            </summary>
            <param name="payeeIds">Payee Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Gets all agencies based on payee Id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyRepository.FindAllByCorrespondingTaxId(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all with the given correspondingTaxId
            </summary>
            <param name="correspondingTaxId">The Corresponding Tax ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>All of the agencies with the corresponding tax id</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IAgencyRepository.FindAllByCountyCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all agencies by county code
            </summary>
            <param name="countyCode">The county code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All of the agencies with the corresponding county code.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IClientRepository">
            <summary>
            Interface for Client repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientRepository.FindAllByFein(System.String,System.Threading.CancellationToken)">
            <summary>
            Find all by fein.
            </summary>
            <param name="fein"> fein of the company</param>
            <param name="cancellationToken"> The Cancellation token</param>
            <returns> List of PTM Companies</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientRepository.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the clientId.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns an instance or null, if not found.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientRepository.FindOne(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the clientId.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns an instance or null, if not found.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientRepository.FindAllByClientIds(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Finds all clients related to the active payroll code given.
            TODO AdamD This should be removed once ULTI-297261 has been played and find one method should be used instead
            </summary>
            <param name="clientIds">The payrollCode.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientRepository.FindOneByCompanyId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get all the clients by processor Id
            </summary>
            <param name="companyId"> The SPS Company Id</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns> List of PTM Companies</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientRepository.FindOneClientIdInfo(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Find client id info by tenant info and reporting company code
            </summary>
            <param name="ultiProClientId">The tenant's UltiProClientId</param>
            <param name="clientAccessKey">The tenant's clientAccessKey</param>
            <param name="reportingCompanyCode">The reporting company code is the prefix to the client id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The client</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientRepository.FindAllByTenantId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets a list of clients based on the tenant ID
            </summary>
            <param name="tenantId">Tenant ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of clients corresponding to tenant ID and page parameters</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientRepository.FindAllContainsCompanyCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all the clients by Company Id
            </summary>
            <param name="companyCode"> The Company code from SPS</param>
            <param name="cancellationToken"> The Cancellation Token</param>
            <returns>UTE Company</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientRepository.FindOneActiveClientWithTenantId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            asdf
            </summary>
            <param name="activeTenantId">The Active tenantId</param>
            <param name="cancellationToken">The Cancellation Token</param>
            <returns>asdf</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IClientRepository.FindAllMatching(System.Guid,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            This method returns a list of Clients matching a given search pattern.
            The pattern is matched against the ClientId and LegalName fields.
            If the pattern is a valid Guid, it will be matched against the aggregate Id field.
            If tenantId is not empty, it will also be included in the query filter.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="pattern">The search pattern.</param>
            <param name="top">The max number of results to display.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of matching clients.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IQuarterlyTaxInstanceRepository">
            <summary>
            Repository for Import_QE table
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterlyTaxInstanceRepository.FindOneByClientId(System.String,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            Checks if a quarterly instance already imported.
            </summary>
            <param name="clientId"> clint code</param>
            <param name="quarter"> Quarter </param>
            <param name="year"> Year </param>
            <param name="token"> Cancellation token</param>
            <returns> Matching Qaurterly instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterlyTaxInstanceRepository.FindAllByClientId(System.String,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            Finds all quarterly instances already imported.
            </summary>
            <param name="clientId"> clint code</param>
            <param name="quarter"> Quarter </param>
            <param name="year"> Year </param>
            <param name="token"> Cancellation token</param>
            <returns> Matching Qaurterly instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterlyTaxInstanceRepository.FindOneByTenantId(System.Guid,System.Int16,System.Int16,System.Threading.CancellationToken)">
            <summary>
            Checks if a quarterly instance already imported.
            </summary>
            <param name="tenantId">Tenant id.</param>
            <param name="quarter"> Quarter </param>
            <param name="year"> Year </param>
            <param name="token"> Cancellation token</param>
            <returns> Matching Qaurterly instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterlyTaxInstanceRepository.FindOneByTenantIdAndIsPost(System.Guid,System.Int16,System.Int16,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if the quarterly instance for this tenant and period already posted.
            </summary>
            <param name="tenantId">Tenant id.</param>
            <param name="quarter"> Quarter </param>
            <param name="year"> Year </param>
            <param name="isPost">"Yes" or "No"</param>
            <param name="token"> Cancellation token</param>
            <returns> Matching Qaurterly instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterlyTaxInstanceRepository.FindOneByQuarterlyTaxProcessingId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find quarterly tax instance by quarterly tax processing id.
            </summary>
            <param name="tenantId">The TenantId.</param>
            <param name="quarterlyTaxProcessingId">The quarterly taxprocessingid.</param>
            <param name="token">The token.</param>
            <returns>Returns Quarterly taxInstance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterlyTaxInstanceRepository.FindOneByQuarterlyTaxProcessingIdAndClientcode(System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Find quarterly tax instance by quarterly tax processing id.
            </summary>
            <param name="tenantId">The TenantId.</param>
            <param name="quarterlyTaxProcessingId">The quarterly taxprocessingid.</param>
            <param name="payrollCode">The payroll code.</param>
            <param name="token">The token.</param>
            <returns>Returns Quarterly taxInstance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterlyTaxInstanceRepository.FindAllByQuarterlyTaxProcessingId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find quarterly tax instance by quarterly tax processing id.
            </summary>
            <param name="tenantId">The TenantId.</param>
            <param name="quarterlyTaxProcessingId">The quarterly taxprocessingid.</param>
            <param name="token">The token.</param>
            <returns>Returns Quarterly taxInstance.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterlyTaxInstanceRepository.FindAllByValidStatus(System.Guid,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all QuarterlyQuarterlyTaxInstances paged based on tenant identifier and valid status identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="quarter">The Quarter.</param>
            <param name="year">The Year.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of QuarterlyQuarterlyTaxInstances.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IQuarterlyTaxInstanceRepository.FindAllByVoidStatus(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all QuarterlyQuarterlyTaxInstance's paged based on tenant identifier and valid status identifier.
            </summary>
            <param name="page">The page.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of QuarterlyQuarterlyTaxInstances.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.INamedTaxRepresentativeRepository">
            <summary>
            Class for Tenant repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.INamedTaxRepresentativeRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a single instance based on ntrid.
            </summary>
            <param name="ntrId">The NTRId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.INamedTaxRepresentativeRepository.FindOneByName(System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds a single instance based on ntrid.
            </summary>
            <param name="name">The NTRId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.INamedTaxRepresentativeRepository.Insert(TaxHub.Models.NamedTaxRepresentative,System.Threading.CancellationToken)">
            <summary>
            Method finds a single instance based on ntrid.
            </summary>
            <param name="ntrInsertCommand">The New NTR to create</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.INamedTaxRepresentativeRepository.Update(TaxHub.Models.NamedTaxRepresentative,System.Threading.CancellationToken)">
            <summary>
            Updates the NTR
            </summary>
            <param name="updatedEntity">The NTR to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.INamedTaxRepresentativeRepository.FindOneByTenantId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find one by tenant Id
            </summary>
            <param name="tenantId">Tenant Id</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>The found named tax representative</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository">
            <summary>
            Class for PeriodictTaxUnit repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository.FindAll(System.Guid,TaxHub.Models.TaxUnit,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds all by taxId, and year where sequence is less than taxUnit sequence for a given company.
            </summary>
            <param name="companyId">The company identifier.</param>
            <param name="taxUnit">The tax unit.</param>
            <param name="year">The year.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns an IEnumerable containing the aggregates.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository.FindOne(System.String,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds periodic tax instance by payroll code, periodic tax processing identifier, combined transaction type and isPayroll
            </summary>
            <param name="payrollCode">The payroll code.</param>
            <param name="periodicTaxProcessingId">The PeriodicTaxProcessing identifier.</param>
            <param name="isPayroll">The is payroll value.</param>
            <param name="combinedTransactionType">The combined transaction type.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>periodic tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository.FindAll(System.String,System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Finds periodic tax instance by payroll code, periodic tax processing identifier, combined transaction type and isPayroll
            </summary>
            <param name="payrollCode">The payroll code.</param>
            <param name="periodicTaxProcessingId">The PeriodicTaxProcessing identifier.</param>
            <param name="isPayroll">The is payroll value.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>periodic tax instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository.FindByLiabilityId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the periodic tax instance by liability identifier.
            </summary>
            <param name="liabilityId">The liability identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>periodic tax instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository.FindAllByProcessingDate(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Find all by processing date
            </summary>
            <param name="processingDate">Date to filter by</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task that results to a collection of <see cref="T:TaxHub.Models.PeriodicTaxInstance"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository.FindOneByPayrollCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds one periodic tax instance by client identifier
            </summary>
            <param name="clientId">The client identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task that results to a <see cref="T:TaxHub.Models.PeriodicTaxInstance"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository.FindAllByPayrollCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds all periodic tax instances by client identifier
            </summary>
            <param name="clientId">The client identifier</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task that results to a <see cref="T:TaxHub.Models.PeriodicTaxInstance"/></returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository.GetPeriodicTaxInstancesExtended``1(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the periodic tax instances detail.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of the periodic tax instances detail</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository.GetPeriodicTaxInstancesExtendedExceptions(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the periodic tax instances detail.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="periodicTaxProcessingId">The periodic tax processing identifier.</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of the periodic tax instances detail</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository.FindAllByPayrollInstanceId(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all periodic tax instances by payroll instance.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payrollInstanceId">The payroll instance identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A list of Periodic Tax Instances with the given Payroll Instance Ids.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository.FindAllCompanyIds(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Finds all existing company identifiers by periodic tax processing identifier and isPayroll.
            </summary>
            <param name="periodicTaxProcessingId">The periodicTaxProcessing identifier.</param>
            <param name="isPayroll">The is payroll value.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Guid list of company identifiers.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPeriodicTaxInstanceRepository.HasPayrollForClient(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all periodic tax instance by companyId
            </summary>
            <param name="clientId">The company Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns true if there are periodic tax instances for this companyId</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IScheduleRepository">
            <summary>
            IScheduleRepository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.ISimpleRepository`2" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IScheduleRepository.Contains(System.String,System.Threading.CancellationToken)">
            <summary>
            Method checks if repository contains an aggregate with specified aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns boolean value indicating a success.
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IScheduleRepository.FindOne(System.String,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns an instance or null, if not found.
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.ICollectionDetailRepository">
            <summary>
            Class for Collection Repository
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ICollectionDetailRepository.GetDetailsExtended``1(System.Guid,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get relevant data for the collection Id. This data is used for the FTR integration.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="collectionId">The collection Id</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Data related with the collection id provided
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ICollectionDetailRepository.GetFtr``1(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get relevant data for Ftr report (Publication)
            </summary>
            <param name="collectionId">The collection Id</param>
            <param name="pagedDataParameters">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Data related with the collection id provided
            </returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IYearEndPostRSRepository">
            <summary>
            Base interface for <see cref="T:TaxHub.Models.YearEnd.YearEndPostRSInfo" /> aggregate
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRSRepository.FindAllEntriesForEmployee(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all posted state wages for the employee
            </summary>
            <param name="reId">The posted REID</param>
            <param name="socialSecurityNumber">The employye SSN</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostRSInfo" /> instances</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IYearEndPostRSRepository.FindAllNonDuplicateEntriesForEmployee(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all non duplicate posted state wages for the employee
            </summary>
            <param name="reId">The posted REID</param>
            <param name="socialSecurityNumber">The employye SSN</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A collection of <see cref="T:TaxHub.Models.YearEnd.YearEndPostRSInfo" /> instances</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.ScheduleRepository">
            <summary>
            The schedule repository
            </summary>
            <seealso>
                <cref>SqlServerSimpleRepository{Models.Schedule, System.String}</cref>
            </seealso>
            <seealso cref="T:TaxHub.CoreServices.DataAccess.IScheduleRepository" />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ScheduleRepository.#ctor(TaxHub.CoreServices.DataAccess.SqlDbStore.DbContexts.IScheduleDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.DataAccess.ScheduleRepository" /> class.
            </summary>
            <param name="contextFactory">The Schedule context factory.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ScheduleRepository.Contains(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ScheduleRepository.FindOne(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ScheduleRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ScheduleRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ScheduleRepository.Contains(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.ITenantRepository">
            <summary>
            Class for Tenant repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ITenantRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on tenantId and aggregateId.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>       
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ITenantRepository.Count(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method finds the total amount of matching items
            </summary>
            <param name="pageParams">Paged Parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of matching items</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ITenantRepository.FindByArNumber(System.String,System.Threading.CancellationToken)">
            <summary>
            Check by AR Number
            </summary>
            <param name="arNumber"> The AR Number</param>
            <param name="cancellationToken"> The Cancellation token</param>
            <returns> Tenant </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ITenantRepository.FindAllByArNumber(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets Tenants by AR Number
            </summary>
            <param name="arNumber"> The AR Number</param>
            <param name="cancellationToken"> The Cancellation token</param>
            <returns> Tenant list </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ITenantRepository.FindByMasterCompanyId(System.String,System.Threading.CancellationToken)">
            <summary>
            Check by AR Number
            </summary>
            <param name="masterCompanyId"> The master company identifier.</param>
            <param name="cancellationToken"> The Cancellation token</param>
            <returns> Tenant </returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ITenantRepository.FindOneByAlias(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Tenant by its Alias.
            </summary>
            <param name="tenantAlias">The tenant alias.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a Tenant object or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ITenantRepository.FindByClientAccessKey(System.String,System.Threading.CancellationToken)">
            <summary>
            Method searches for a Tenant by its client Access Key.
            </summary>
            <param name="clientAccessKey">The client Access Key.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a Tenant object or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ITenantRepository.FindAllTenantsWithDedFilters(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method finds all the tenants that have ded filters created (DedFiltersCreated = true)
            </summary>
            <param name="pageParams">The page parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns a list of tenants that have Ded filters</returns>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.ITenantRepository.FindUsgTenant(System.Threading.CancellationToken)">
            <summary>
            Gets the USG Tenant
            </summary>
            <param name="cancellationToken">cancellation token</param>
            <returns>USG tenant</returns>
        </member>
        <member name="T:TaxHub.CoreServices.DataAccess.IPtmRepository">
            <summary>
            Interface for ptm repository.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.DataAccess.IPtmRepository.GetTaxId(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get taxId for a given taxCode and processorId.
            </summary>
            <param name="taxCode">The PTM tax code.</param>
            <param name="processorId">The PTM processor identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The taxId, null if not found.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Banking.PaymentTenantProductInfoUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.tenant.product-info-updated" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.PaymentTenantProductInfoUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ITenantService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.Banking.PaymentTenantProductInfoUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="tenantService">Service that handles tenant information</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.PaymentTenantProductInfoUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'payment.tenant.product-info-updated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxCreditRequestMatchingMessageSubscriber">
            <summary>
            Subscriber for tax.credit-request.matching event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxCreditRequestMatchingMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService)">
            <summary>
            Class to subscribe to event tax.credit-request.matching.
            </summary>
            <param name="logger">The logger.</param>
            <param name="creditApplicationService">The creditApplicationService</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxCreditRequestMatchingMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Consume the event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>True if the event is consumed correctly. False in any other case.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxCreditRequestCreatedMessageSubscriber">
            <summary>
            Subscriber for tax.credit-request.created event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxCreditRequestCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService)">
            <summary>
            Class to subscribe to event tax.credit-request.created.
            </summary>
            <param name="logger">The logger.</param>
            <param name="creditApplicationService">The creditApplicationService</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxCreditRequestCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Consume the event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>True if the event is consumed correctly. False in any other case.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentCreditTrackingCreatedMessageSubscriber">
            <summary>
            Subscriber for tax.payment.credit-tracking-created event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentCreditTrackingCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration,TaxHub.CoreServices.Application.Banking.IPaymentCreditLiabilityRefundService)">
            <summary>
            Class to subscribe to event tax.payment.credit-tracking-created
            </summary>
            <param name="logger">The logger</param>
            <param name="featureToggleConfiguration">The feature toggle</param>
            <param name="paymentCreditLiabilityRefundService">The payment liability refund service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentCreditTrackingCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Consume the event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>True if event is consumed correctly. False in any other case</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentFalloutResolvedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.payment.fallout-resolved" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentFalloutResolvedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentFalloutResolvedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentFalloutResolvedMessageSubscriber"/> class.
            </summary>
            <param name="creditApplicationService">The credit application service</param>
            <param name="logger">The logger</param>
            <param name="featureToggleConfiguration">The feature toggle</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentStatusUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.payment.legacy-updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentStatusUpdatedMessageSubscriber.PaymentLegacyUpdatedEventName">
            <summary>
            payment legacy updated event name
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentStatusUpdatedMessageSubscriber.PaymentUpdatedEventName">
            <summary>
            payment updated event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentStatusUpdatedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentStatusUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="creditApplicationService">The credit application service</param>
            <param name="logger">The logger</param>
            <param name="featureToggleConfiguration">The feature toggle</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentLegacyUnSentMessageSubscriber">
            <summary>
            Subscriber to start credit application process for payment unsent
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentUnSentMessageSubscriber">
            <summary>
            Subscriber to start credit application process for payment unsent
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentCreditTransactionCreatedMessageSubscriber">
            <summary>
            Subscriber for tax.payment.credit-tracking-created event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentCreditTransactionCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration,TaxHub.CoreServices.Application.Banking.IPaymentCreditLiabilityRefundService)">
            <summary>
            Class to subscribe to event tax.payment.credit-transaction-created
            </summary>
            <param name="logger">The logger</param>
            <param name="featureToggleConfiguration">The feature toggle</param>
            <param name="paymentCreditLiabilityRefundService">The payment liability refund service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPaymentCreditTransactionCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Consume the event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>True if event is consumed correctly. False in any other case</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPayrollAssemblyRequestedMessageSubscriber">
            <summary>
            Subscriber to start the credit application for a given  payroll (input/import) once we receive the assembly requested event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPayrollAssemblyRequestedMessageSubscriber.#ctor(TaxHub.Common.Configuration.IFeatureToggleConfiguration,TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Class to subscribe to event tax.inputtaxinstance.legacy-assembly-status-updated and event tax.periodictaxinstance.legacy-assemblyrequested in order to enforce credit application for entire negative payrolls.
            </summary>
            <param name="featureToggleConfiguration"> The feature toggle configuration.</param>
            <param name="creditApplicationService"> The credit application service.</param>
            <param name="logger">The applogger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxPayrollAssemblyRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Consume the event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>True if the event is consumed correctly. False in any other case.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxLiabilityCashMgmtLiabilityIdUpdatedMessageSubscriber">
            <summary>
            Subscriber to start the credit application for a payroll once we receive the cash managment liability Id.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxLiabilityCashMgmtLiabilityIdUpdatedMessageSubscriber.#ctor(TaxHub.Common.Configuration.IFeatureToggleConfiguration,TaxHub.CoreServices.Application.Banking.CreditApplication.ICreditApplicationService,TaxHub.CoreServices.Application.IPaymentService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Class to subscribe to event tax.liability.cash-mgmt-liability-id-updated in order to enforce credit application for entire negative payrolls.
            </summary>
            <param name="featureToggleConfiguration"> The feature toggle configuration.</param>
            <param name="creditApplicationService"> The credit application service.</param>
            <param name="paymentService">The payment service</param>
            <param name="logger">The applogger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Banking.CreditApplication.TaxLiabilityCashMgmtLiabilityIdUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Consume the event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>True if the event is consumed correctly. False in any other case.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Filing.TaxFilingRequestLegacyCreatedMessageSubscriber">
            <summary>
            A subscriber for the tax.filing-request.submit-request.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Filing.TaxFilingRequestLegacyCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Filing.Services.IFilingService,TaxHub.CoreServices.Acl.Filing.IFilingRequestModelMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.Filing.TaxFilingRequestLegacyCreatedMessageSubscriber" /> class.
            </summary>
            <param name="logger">The logger</param>
            <param name="filingService">The filingService service</param>
            <param name="mapper">The filing request mapper</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Filing.TaxFilingRequestLegacyCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxFilingRequestLegacyCreatedEvent)">
            <summary>
            Process the Filing Request Model Legacy Created, this basically kicksoff the eFile generation
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <param name="details">The event details.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Filing.TaxEFilingEFileGeneratedMessageSubscriber">
            <summary>
            Subscriber that receives "tax.efiling-service.efile-generated" event and adds a record into EFiling table.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Filing.TaxEFilingEFileGeneratedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Filing.IEFilingService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.Filing.TaxEFilingEFileGeneratedMessageSubscriber"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="eFilingService">The e filing service.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Post_Quarter_Phase.QuarterEndDevPhaseChangeSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.ye-processing.file-included" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.Post_Quarter_Phase.QuarterEndDevPhaseChangeSubscriber.logger">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Post_Quarter_Phase.QuarterEndDevPhaseChangeSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IQuarterEndPhaseService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.Post_Quarter_Phase.QuarterEndDevPhaseChangeSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="quarterEndPhaseService">The IqePhaseService</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Post_Quarter_Phase.QuarterEndDevPhaseChangeSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Quarter_End_Phase.DevSupportQuarterEndPhaseUpdateCommand)">
            <summary>
            Method consumes the 'tax.qe-processing.phase-updated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="updateRequest">The QePhaseUpdateRequest details</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxClientAgencyImportRequestCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.queue.client-agency-events-queue" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxClientAgencyImportRequestCreatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxClientAgencyImportRequestCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IClientAgencyImportService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxClientAgencyImportRequestCreatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="clientAgencyImportService">ClientAgencyImportService</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxClientAgencyImportRequestCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.ClientAgencyImport.ClientAgencyImportRequest)">
            <summary>
            Method consumes the 'tax.clientagencyimportrequest.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="clientAgencyImportRequest">The client agency Import Request</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndMultiClientParentBalanceMessageSubscriber">
            <summary>
            Subscriber to handle a YE post details
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndMultiClientParentBalanceMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndMultiClientParentBalanceMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Application.YearEnd.IYearEndREService,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService,TaxHub.CoreServices.Application.YearEnd.IYearEndStagingREService)">
            <summary>
            The constructor of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndMultiClientParentBalanceMessageSubscriber" /> instance
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="messageHub">An implementation of the <see cref="T:TaxHub.Messaging.IMessageHub" /> interface</param>
            <param name="yearEndREService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndREService" /> interface</param>
            <param name="yearEndTaxProcessingService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService" /> interface</param>
            <param name="yearEndStagingREService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndStagingREService" /> interface</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndMultiClientParentBalanceMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearEndPostRequestedEvent)">
            <summary>
            Method consumes the tax.year-end-post.requested event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">An instance of the deserialized event payload</param>
            <returns>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndMultiClientParentBalanceMessageSubscriber.LogError(System.Guid,System.String,System.Object[])">
            <summary>
            Logs error when Year End failed to post. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="properties">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record failures.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndMultiClientParentBalanceMessageSubscriber.LogError(System.Guid,System.Exception,System.String,System.Object[])">
            <summary>
            Logs error when Year End failed to post. Needed to bind metrics to record.
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="exception">The exception that occured.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="properties">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record failures.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndMultiClientParentBalanceMessageSubscriber.ValidateEventDetails(TaxHub.Models.Events.TaxYearEndPostRequestedEvent,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Validates the input <see cref="T:TaxHub.Models.Events.TaxYearEndPostRequestedEvent" /> instance.
            </summary>
            <param name="details">The <see cref="T:TaxHub.Models.Events.TaxYearEndPostRequestedEvent" /> instance to be validated</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <returns>True if all validations pass, False if there is at least one failure</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.IngestPriorQuarter.TaxPriorQuarterQrfProcessingStartedSubscriber">
            <inheritdoc />
            <summary>
            This class provides subscriber functionality for the "tax.prior-quarter-qrf-processing.processing-started" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.IngestPriorQuarter.TaxPriorQuarterQrfProcessingStartedSubscriber.#ctor(TaxHub.CoreServices.Application.IngestPriorQuarter.IPriorQuarterQrfProcessingService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.IngestPriorQuarter.TaxPriorQuarterQrfProcessingStartedSubscriber" /> class.
            </summary>
            <param name="priorQuarterQrfProcessingService">The prior quarter QRF processing service.</param>
            <param name="appLogger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.IngestPriorQuarter.TaxPriorQuarterQrfProcessingStartedSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.IngestPriorQuarter.PriorQuarterQrfProcessingStartedEvent)">
            <summary>
            Method consumes the "tax.prior-quarter-qrf-processing.processing-started" event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <param name="typedDetails">The typed details.</param>
            <returns>Returns a boolean indicating if the event has been consumed.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPaymentCreditTrackingVoidingMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.payment.credit-tracking-voiding" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPaymentCreditTrackingVoidingMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPaymentCreditTrackingVoidingMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPaymentCreditTrackingVoidingMessageSubscriber"/> class.
            </summary>
            <param name="logger">Logger</param>
            <param name="paymentService">payment service</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPaymentVoidedForPostPayrollReverseMessageSubscriber">
            <summary>
            Class provides reverse post payroll functionality for "tax.payment.voided" event.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPaymentVoidedForPostPayrollReverseMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPaymentVoidedForPostPayrollReverseMessageSubscriber.#ctor(TaxHub.CoreServices.Application.Banking.IPostPayrollReverseService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPaymentVoidedForPostPayrollReverseMessageSubscriber"/> class.
            </summary>
            <param name="postPayrollReverseService">PostPayrollReverse Service</param>
            <param name="featureToggleConfiguration">The feature toggle configuration</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPublishEventPromisesMessageSubscriber">
            <summary>
            Class provides subscriber functionality for payment.domain-event-outbox.publish-scheduled event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPublishEventPromisesMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IDomainEventOutboxService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPublishEventPromisesMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="domainEventOutboxService">The service to dispatch all event promises.</param>
            <param name="featureToggleConfiguration">The feature toggle configuration.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPublishEventPromisesMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the payment.domain-event-outbox.publish-scheduled event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxProcessZeroEftMessageSubscriber">
            <summary>
            Class provides subscriber functionality for tax.queue.electronic-file-transfer-queue event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxProcessZeroEftMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IExportStateZeroEftService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxProcessZeroEftMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="exportStateZeroEftService">The export state zero eft service.</param>
            <param name="featureToggleConfiguration">The feature toggle configuration.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxProcessZeroEftMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the payment.scheduler-service.process-zero-eft-scheduled event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYEExpeditedFileIngestionRequestedMessageSubscriber">
            <inheritdoc />
            <summary>
            Class provides subscriber functionality for "tax.ye-ingestion-service.expedited-file-ingestion-requested" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYEExpeditedFileIngestionRequestedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.IYEIngestionService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYEExpeditedFileIngestionRequestedMessageSubscriber" /> class.
            </summary>
            <param name="yeIngestionService">The ye file ingestion service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYEExpeditedFileIngestionRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.YearEnd.YEExpeditedFileIngestionRequested)">
            <summary>
            Method consumes the "tax.ye-ingestion-service.expedited-file-ingestion-requested" event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">The typed details.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYEFileIngestionRequestedMessageSubscriber">
            <inheritdoc />
            <summary>
            Class provides subscriber functionality for "tax.ye-ingestion-service.file-ingestion-requested" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYEFileIngestionRequestedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.IYEIngestionService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYEFileIngestionRequestedMessageSubscriber" /> class.
            </summary>
            <param name="yeIngestionService">The ye ingestion service </param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYEFileIngestionRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.YearEnd.YEFileIngestionRequested)">
            <summary>
            Method consumes the "tax.ye-ingestion-service.file-ingestion-requested" event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">The typed details.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxClientAgencyUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.client-agency.updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxClientAgencyUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxClientAgencyUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxClientAgencyUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="paymentService">The payment service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxClientAgencyUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxClientAgencyUpdatedEvent)">
            <summary>
            Method consumes the 'tax.client-agency.updated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="taxClientAgencyUpdatedEvent">The client agency updated event</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxClientAgencyCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.client-agency.created" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxClientAgencyCreatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxClientAgencyCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxClientCreatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="paymentService">The payment service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxClientAgencyCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.ClientAgency)">
            <summary>
            Method consumes the 'tax.client-agency.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="clientAgency">The client agency</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYEProcessingEfw2OutputCompletedSubscriber">
            <inheritdoc />
            <summary>
            This class provides subscriber functionality for the <see cref="F:TaxHub.Models.Events.YearEnd.YearEndEfw2OutputCompletedEvent.EventName"/> event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYEProcessingEfw2OutputCompletedSubscriber.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfFileProcessingService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYEProcessingEfw2OutputCompletedSubscriber"/> class.
            </summary>
            <param name="yeQrfFileProcessingService">The YE QRF file processing service.</param>
            <param name="appLogger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYEProcessingEfw2OutputCompletedSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.YearEnd.YearEndEfw2OutputCompletedEvent)">
            <summary>
            Method consumes the <see cref="F:TaxHub.Models.Events.YearEnd.YearEndEfw2OutputCompletedEvent.EventName"/> event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <param name="typedDetails">The typed details.</param>
            <returns>Returns a boolean indicating if the event has been consumed.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYEProcessingFileRejectedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.ye-processing.file-rejected" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYEProcessingFileRejectedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYEProcessingFileRejectedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.IYEFileStorageService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYEProcessingFileRejectedMessageSubscriber"/> class.
            </summary>
            <param name="yeFileStorageService">The inbound file service</param>
            <param name="logger">application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYEProcessingFileRejectedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.YearEnd.YEProcessingFileRejectedEvent)">
            <summary>
            Method consumes the 'tax.ye-processing.file-included' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="yeProcessingFileRejectedEvent">The InboundFileRejectedEvent</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndFileNotificationSubscriber">
            <inheritdoc />
            <summary>
            Class provides subscriber functionality for "payment.scheduler-service.download-ye-files-scheduled" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndFileNotificationSubscriber.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.IYEIngestionService,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndFileNotificationSubscriber" /> class.
            </summary>
            <param name="yeIngestionService">The ye ingestion service.</param>
            <param name="appLogger">The application logger.</param>
            <param name="featureToggleConfiguration">The feature toggle configuration.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndFileNotificationSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Consumes event that schedules a download receivable file iteration.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackCompletedEventMessageSubscriber">
            <summary>
            Consumes TaxYearEndPostRollbackCompletedEvent
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackCompletedEventMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackCompletedEventMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IYearlyTaxInstanceService)">
            <summary>
            The constructor of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackCompletedEventMessageSubscriber" /> instance
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="yearlyTaxInstanceService">An imlementation of the <see cref="T:TaxHub.CoreServices.Application.IYearlyTaxInstanceService" /> interface</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackCompletedEventMessageSubscriber.ValidateEventDetails(TaxHub.Models.Events.TaxYearEndPostRollbackCompletedEvent,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Validates the input <see cref="T:TaxHub.Models.Events.TaxYearEndPostRollbackCompletedEvent" /> instance.
            </summary>
            <param name="details">The <see cref="T:TaxHub.Models.Events.TaxYearEndPostRollbackCompletedEvent" /> instance to be validated</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <returns>True if all validations pass, False if there is at least one failure</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackCompletedEventMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearEndPostRollbackCompletedEvent)">
            <summary>
            Method consumes the tax.year-end-post.completed event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">An instance of the deserialized event payload</param>
            <returns>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackMultiFeinRequestedMessageSubscriber">
            <summary>
            Subscriber to consume TaxYearEndPostMultiFeinRollbackRequested Event
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackMultiFeinRequestedMessageSubscriber.EventName">
            <summary>
            MultiFein RollBack Event Name 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackMultiFeinRequestedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService)">
            <summary>
            Constructor of TaxYearEndPostMultiFeinRollbackMessageSubscriber
            </summary>
            <param name="logger">IAppLogger</param>
            <param name="yearEndProcessingService">IYearEndTaxProcessingService</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackMultiFeinRequestedMessageSubscriber.ValidateEventInfo(TaxHub.Models.Events.TaxYearEndPostRollbackMultiFeinRequestedEvent,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Validates the TaxYearEndPostRollbackMultiFeinRequestedEvent
            </summary>
            <param name="typedDetails">TaxYearEndPostRollbackMultiFeinRequestedEvent</param>
            <param name="correlatedLogger">IAppLogger</param>
            <returns>Validated Event Details</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackMultiFeinRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearEndPostRollbackMultiFeinRequestedEvent)">
            <summary>
            Method to Consume tax.year-end-post-multifein-rollback.requested Event
            </summary>
            <param name="eventName">eventName</param>
            <param name="eventData">DomainEventData</param>
            <param name="typedDetails">TaxYearEndPostRollbackMultiFeinRequestedEvent</param>
            <returns>If subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackCommonPayRequestedMessageSubscriber">
            <summary>
            Subscriber to consume TaxYearEndPostCommonPayRollbackRequested Event
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackCommonPayRequestedMessageSubscriber.EventName">
            <summary>
            MultiFein RollBack Event Name 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackCommonPayRequestedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService)">
            <summary>
            Constructor of TaxYearEndPostRollbackCommonPayRequestedMessageSubscriber
            </summary>
            <param name="logger">IAppLogger</param>
            <param name="yearEndProcessingService">IYearEndTaxProcessingService</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackCommonPayRequestedMessageSubscriber.ValidateEventInfo(TaxHub.Models.Events.TaxYearEndPostRollbackCommonPayRequestedEvent,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Validates the TaxYearEndPostRollbackCommonPayRequestedEvent
            </summary>
            <param name="typedDetails">TaxYearEndPostRollbackMultiFeinRequestedEvent</param>
            <param name="correlatedLogger">IAppLogger</param>
            <returns>Validated Event Details</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackCommonPayRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearEndPostRollbackCommonPayRequestedEvent)">
            <summary>
            Method to Consume tax.year-end-post-commonpay-rollback.requested Event
            </summary>
            <param name="eventName">eventName</param>
            <param name="eventData">DomainEventData</param>
            <param name="typedDetails">TaxYearEndPostRollbackMultiFeinRequestedEvent</param>
            <returns>If subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYeW3CompletedMessageSubscriber">
            <summary>
            Message Subscriber for <see cref="F:TaxHub.CoreServices.Messaging.TaxYeW3CompletedMessageSubscriber.EventName"/> events. />
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYeW3CompletedMessageSubscriber.EventName">
            <summary>Event name indicating W3 request completed subscriber listens to.</summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYeW3CompletedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndFileInfoService,TaxHub.CommonServices.FileManagement.Application.IFileService)">
            <summary>
            Initializes an instance of <see cref="T:TaxHub.CoreServices.Messaging.TaxYeW3CompletedMessageSubscriber"/>
            </summary>
            <param name="logger">The application logger.</param>
            <param name="yearEndFileInfoService">The YeFileInfo Service</param>
            <param name="fileService">The file Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYeW3CompletedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Inserts a record to YeFileInfo for the YE Customer package when they are completed.
            </summary>
            <param name="eventName">The Event name.</param>
            <param name="eventData">The Event Data.</param>
            <returns>Returns true when successful, false otherwise.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.YearEndRWEmployeeNameUpdateRequestedMessageSubscriber">
            <inheritdoc />
            <summary>
            Class provides subscriber functionality for "tax.inboundfile.status-updated" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.YearEndRWEmployeeNameUpdateRequestedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.IYearEndIngestionMigrationService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.YearEndRWEmployeeNameUpdateRequestedMessageSubscriber" /> class.
            </summary>
            <param name="yearEndIngestionMigrationService">The year end ingestion service </param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.YearEndRWEmployeeNameUpdateRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.YearEnd.YearEndUpdateRWNamesRequestedEvent)">
            <summary>
            Method consumes tax.year-end-rw.employeename-update-requested event
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">The typed details.</param>
            <returns>True if the event was consumed successfully, false otherwise</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.YEQrfEmployeeParsingCompletedMessageSubscriber">
            <inheritdoc />
            <summary>
            Class provides subscriber functionality for "tax.inboundfile.status-updated" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.YEQrfEmployeeParsingCompletedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.YearEndIngestion.Qrf.IYEQrfFileProcessingService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.YEQrfEmployeeParsingCompletedMessageSubscriber" /> class.
            </summary>
            <param name="qrfFileProcessingService">The qrf file processing service </param>
            <param name="appLogger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.YEQrfEmployeeParsingCompletedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.YearEnd.TaxYEQrfEmployeeParsingCompletedEvent)">
            <summary>
            Method consumes the 'tax.ye-qrf-file-processing-service.employee-parsing-completed' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">The typed details.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPenaltyInterestLiabilityUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.penaltyinterest.liability-updated" event.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" /> 
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPenaltyInterestLiabilityUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPenaltyInterestLiabilityUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ILiabilityService)">
            <summary>
            constructor
            </summary>
            <param name="logger">logger</param>
            <param name="liabilityService">Liability Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPenaltyInterestLiabilityUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxPenaltyInterestLiabilityUpdatedEvent)">
            <summary>
            Method consumes the tax.penaltyinterest.liability-updated. event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="pniLiabilityUpdatedEvent">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportGenerateMessageSubscriber">
            <summary>
            Message subscriber for <see cref="F:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportGenerateMessageSubscriber.EventManualName"/>
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportGenerateMessageSubscriber.EventManualName">
            <summary> event name for manual QVR </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportGenerateMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportService)">
            <summary>
            Creates an instance of <see cref="T:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportGenerateMessageSubscriber"></see>/>
            </summary>
            <param name="logger">Application Logger.</param>
            <param name="qvrReportService">The QVR service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportGenerateMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportRequestedMessageSubscriber">
            <summary>
            Message subscriber for <see cref="F:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportRequestedMessageSubscriber.EventRequestName"/>, <see cref="F:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportRequestedMessageSubscriber.EventCloseLedgerName"/>,
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportRequestedMessageSubscriber.EventRequestName">
            <summary> event name for manual QVR </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportRequestedMessageSubscriber.EventCloseLedgerName">
            <summary> event name for close ledger automatic QVR </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportRequestedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportService,TaxHub.CoreServices.Application.Quarterly_Variance_Report.IQuarterlyVarianceReportMetricsService)">
            <summary>
            Creates an instance of <see cref="T:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportRequestedMessageSubscriber"></see>/>
            </summary>
            <param name="logger">Application Logger.</param>
            <param name="qvrReportService">The QVR service.</param>
            <param name="metricsService">The QVR Appmetrics service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.TaxQuarterlyVarianceReportRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.QuarterlyVarianceReportServiceSelfHealMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Shared.Services.Application.ISelfHealingService{TaxHub.CoreServices.Application.Quarterly_Variance_Report.QuarterlyVarianceReportService})">
            <summary>
            Creates an instance of <see cref="T:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.QuarterlyVarianceReportServiceSelfHealMessageSubscriber"></see>/>
            </summary>
            <param name="logger">The logger.</param>
            <param name="service">The self healing service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.Quarterly_Variance_Report.QuarterlyVarianceReportServiceSelfHealMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxRtsFileProcessingServiceRetryRequestedMessageSubscriber">
            <inheritdoc />
            <summary>
            Class provides subscriber functionality for "tax.rts-file-processing-service.retry-requested" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxRtsFileProcessingServiceRetryRequestedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.QuarterEndIngestion.IRtsFileProcessingService,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxRtsFileProcessingServiceRetryRequestedMessageSubscriber" /> class.
            </summary>
            <param name="rtsFileProcessingService">The rts file processing service.</param>
            <param name="metricsBuilder">The metric builder</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxRtsFileProcessingServiceRetryRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxRtsFileProcessingServiceRetryRequestedEvent)">
            <summary>
            Method consumes the 'tax.rts-file-processing-service.retry-requested' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">The typed details.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxCheckRequestExportedMessageSubscriber">
            <summary>
            Tax check request exported message subscriber
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxCheckRequestExportedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCheckRequestExportedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ICheckService)">
            <summary>
            The subscriber constructor.
            </summary>
            <param name="logger">Application Logger</param>
            <param name="checkService">Service that handles check information</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentLiabilityCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.liability.created" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentLiabilityCreatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentLiabilityCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ILiabilityService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentLiabilityCreatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="liabilityService">liability service</param>
            <param name="featureToggleConfiguration">feature toogle configuration</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentLiabilityCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'payment.liability.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.EftDistributionExportVoidedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.state-electronic-transfer.distribution-export-voided"  and "tax.federal-electronic-transfer.distribution-export-voided" events.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.EftDistributionExportVoidedMessageSubscriber.StateDistributionEventName">
            <summary>
            tax.state-electronic-transfer.distribution-export-voided
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.EftDistributionExportVoidedMessageSubscriber.FederalDistributionEventName">
            <summary>
            tax.federal-electronic-transfer.distribution-export-voided
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.EftDistributionExportVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService)">
            <summary>
            Constructor
            </summary>
            <param name="appLogger">The application logger</param>
            <param name="paymentService">The payment service</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.InitializeTenantsDataCenterRequestedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.tenant-dcenvironment.initialize-requested" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.InitializeTenantsDataCenterRequestedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.InitializeTenantsDataCenterRequestedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IInitializeTenantDataCenterService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.InitializeTenantsDataCenterRequestedMessageSubscriber"/> class.
            </summary>
            <param name="initializeTenantDataCenterService">The initialize Tenant Data Center Service.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.InitializeTenantsDataCenterRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.periodic-tax-processing.replay-requested' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentAppliedCreditMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.payment.applied-credit" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentAppliedCreditMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentAppliedCreditMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="domainService"> Domain Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentAppliedCreditMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.payment.applied-credit' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentBankTransactionReconcileStatusChangedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.bank-transaction.reconciled" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentBankTransactionReconcileStatusChangedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ICheckService,TaxHub.CommonServices.FileManagement.Application.IFileService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentBankTransactionReconcileStatusChangedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="checkService">application check service</param>
            <param name="fileService">application payment service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentBankTransactionReconcileStatusChangedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,SmartHub.Models.Events.BankTransactionReconcileStatusChangedEvent)">
            <summary>
            Method consumes the 'payment.bank-transaction.reconciled' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="details">The typed data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentCompanyProductAddedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.company.products-activated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentCompanyProductAddedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentCompanyProductAddedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.ICompanyService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentCompanyProductAddedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="clientService">Service that processes create client</param>
            <param name="companyService">The company service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentCompanyProductAddedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'payment.company.products-activated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PackageGenerationRequestFileGeneratedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.package-generation-request.persisted" event.
            Receives a remote identifier for the file in ObjectStorage and write it to a <see cref="T:TaxHub.CommonServices.FileManagement.Models.FileInfo"/> store.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PackageGenerationRequestFileGeneratedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PackageGenerationRequestFileGeneratedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CommonServices.FileManagement.Application.IFileService,TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentCompanyProductUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="fileService">An instance of <see cref="T:TaxHub.CommonServices.FileManagement.Application.IFileService"/></param>
            <param name="fileServiceConfiguration">An instance of <see cref="T:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration"/></param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PackageGenerationRequestFileGeneratedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the "tax.package-generation-request.persisted" event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentCompanyProductUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.company.product-updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentCompanyProductUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentCompanyProductUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.ICompanyService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentCompanyProductUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="clientService">Service that processes create client</param>
            <param name="companyService">The company service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentCompanyProductUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'payment.company.products-activated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentCompanyCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.company.created" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentCompanyCreatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentCompanyCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ICompanyService,TaxHub.CoreServices.Application.ITenantService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentCompanyCreatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="companyService">Service that processes create company to replicate all hub company data</param>
            <param name="tenantService">Tenant Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentCompanyCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.CompanyCreateEvent)">
            <summary>
            Method consumes the 'payment.company.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="companyCreateEventDetails">Hub view of company</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentCompanyUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.company.updated" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentCompanyUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ICompanyService,TaxHub.CoreServices.Application.ITenantService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentCompanyUpdatedMessageSubscriber" /> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="companyService">The company service.</param>
            <param name="tenantService">Tenant Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentCompanyUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.CompanyUpdatedEvent)">
            <summary>
            Method consumes the 'payment.company.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="details">Company updated event details</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentLiabilityCollectionIdUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for events that affect the liability's collection Id.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentLiabilityCollectionIdUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ILiabilityService,TaxHub.CoreServices.Application.IPeriodicTaxInstanceService,TaxHub.CoreServices.Application.IInputTaxInstanceService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentLiabilityCollectionIdUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="liabilityService">Service that will prepare a liability before posting to smarthub</param>
            <param name="periodicTaxInstanceService">Service for periodit tax instance (IMPORT_PAYROLL)</param>
            <param name="inputTaxInstanceService">Service for input tax instance</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentLiabilityCollectionIdUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the payment.liability.assignment events.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentLiabilityStatusUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.liability.status-updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentLiabilityStatusUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentLiabilityStatusUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ILiabilityService,TaxHub.CoreServices.Application.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentLiabilityStatusUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="liabilityService">liability service</param>
            <param name="paymentService">payment service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentLiabilityStatusUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'payment.liability.status-updated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentPayAcknowlegedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.pay.observed" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentPayAcknowlegedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentPayAcknowlegedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPayProcessingService,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentPayAcknowlegedMessageSubscriber"/> class.
            </summary>
            <param name="logger">The application logger</param>
            <param name="payProcessingService">The pay processing service.</param>
            <param name="applicationMetricsBuilder">The application metrics builder.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentPayAcknowlegedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentPayAcknowlegedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.CoreServices.Acl.Payment.PayView)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentPayrollInstanceClosedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.payrollinstance.closed" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentPayrollInstanceClosedMessageSubscriber.EventName">
            <summary>
            The original event name
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentPayrollInstanceClosedMessageSubscriber.ProcessedEventName">
            <summary>
            The processed event name
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentPayrollInstanceClosedMessageSubscriber.RetryEventName">
            <summary>
            The retry event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentPayrollInstanceClosedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IPayrollProcessingService,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentPayrollInstanceClosedMessageSubscriber" /> class.
            </summary>
            <param name="payrollProcessingService">Service that processes periodic tax data for a given payroll</param>
            <param name="logger">The logger</param>
            <param name="applicationMetricsBuilder">The application metrics builder.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentPayrollInstanceClosedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.PaymentPayrollInstanceClosedEvent)">
            <summary>
            Method consumes the 'payment.payrollinstance.closed' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">The typed event details.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentPayrollUnitCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.payrollunit.created" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentPayrollUnitCreatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentPayrollUnitCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ITenantService,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.IClientPayrollService,TaxHub.CoreServices.Application.ICompanyService,TaxHub.Messaging.IMessageHub)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentPayrollUnitCreatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="tenantService">The tenant service.</param>
            <param name="clientService">Service that handles client payrollunit information</param>
            <param name="clientPayrollService"> Client Payroll Service</param>
            <param name="companyService"> Company Service</param>
            <param name="messageHub"> Message Hub</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentPayrollUnitCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'payment.payrollunit.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentPayrollUnitSyncedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.payrollunit.synced" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentPayrollUnitSyncedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentPayrollUnitSyncedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ITenantService,TaxHub.CoreServices.Application.IClientPayrollService,TaxHub.CoreServices.Acl.Payment.IHubPayrollUnitServiceAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentPayrollUnitSyncedMessageSubscriber" /> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="tenantService">The tenant service.</param>
            <param name="clientPayrollService"> Client Payroll service</param>
            <param name="hubPayrollUnitServiceAdapter">The hub payroll unit service adapter.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentPayrollUnitSyncedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'payment.payrollunit.synced' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentTenantIntegrationUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.tenant.integration-updated".
            </summary>
            <seealso cref="T:TaxHub.Models.TenantIntegrationUpdatedEventData" />
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentTenantIntegrationUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentTenantIntegrationUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ITenantManagementService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentTenantIntegrationUpdatedMessageSubscriber" /> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="tenantManagementService">The tenant management service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentTenantIntegrationUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.TenantIntegrationUpdatedEventData)">
            <summary>
            Method consumes the 'payment.tenant.integration-updated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="tenantIntegrationUpdatedEventData">The tenant integration updated event data.</param>
            <returns>
            Returns boolean value if event has been consumed (handled).
            </returns>
            <remarks>
            IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.
            </remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxAchFileVoidedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.ach-file.voided" event.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxAchFileVoidedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxAchFileVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IFederalElectronicTransferService,TaxHub.CoreServices.Application.IStateElectronicTransferService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxAchFileVoidedMessageSubscriber"/> class.
            </summary>
            <param name="appLogger">The application logger.</param>
            <param name="federalEftService">The federal eft service.</param>
            <param name="stateEftService">The state eft service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxAchFileVoidedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the tax.ach-file.voided.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxCheckLegacyFileInfoIdUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.check.legacy-fileinfoid-updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxCheckLegacyFileInfoIdUpdatedMessageSubscriber.EventName">
            <summary>
            eventName
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCheckLegacyFileInfoIdUpdatedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IPrintableDocumentService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor
            </summary>
            <param name="documentService">The document service</param>
            <param name="logger">The logger</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxCheckDistributionVoidedMessageSubscriber">
            <summary>
            Tax check voided message subscriber
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxCheckDistributionVoidedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCheckDistributionVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxCheckDistributionVoidedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="paymentService">Service that handles payment information</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxCheckExportedMessageSubscriber">
            <summary>
            Tax check exproted message subscriber
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxCheckExportedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCheckExportedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ICheckService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxCheckExportedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="checkService">Service that handles check information</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCheckExportedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxCheckServiceExportedEvent)">
            <summary>
            Consume tax.check.exported event
            <remarks>This consumer deals with the export of a bulk check. It will attempt
            to export all of the children checks of the bulk check</remarks>
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="taxCheckServiceExportedEvent">The event model</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentTenantCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.tenant.updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentTenantCreatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentTenantCreatedMessageSubscriber.TaxFilingEnabled">
            <summary>
            product name - should be moved to an enum somewhere else
            This will change to tax_filing when Pascal Casing is changed.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentTenantCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ITenantService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentTenantCreatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="tenantService">Service that handles tenant information</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentTenantCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'payment.tenant.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentTenantCreatedMessageSubscriberBase">
            <summary>
            Base class for tenant subscriber
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentTenantCreatedMessageSubscriberBase.ExtractDictionary(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Extracts object to Distionary
            </summary>
            <param name="dictionary"> Event Details as disctionary</param>
            <param name="field"> Field Name to check </param>
            <param name="eventData">The Event Data</param>
            <returns> Dictionary </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentTenantCreatedMessageSubscriberBase.ConvertMarketType(System.String)">
            <summary>
            Converts string to MarketType
            </summary>
            <param name="marketType">A string representing a MarketType.</param>
            <returns>The MarketType.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentTenantCreatedMessageSubscriberBase.ConvertTenantType(System.Int64)">
            <summary>
            Converts string to TenantType enum
            </summary>
            <param name="type">A string representing a Tenant Type</param>
            <returns>The MarketType.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentUccTenantUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.tenant.ucc-tenant-updated".
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentUccTenantUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentUccTenantUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ITenantService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentUccTenantUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="tenantService">Service that handles tenant information</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentUccTenantUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'payment.tenant.ucc-tenant-updated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountMessageSubscriberBase">
            <summary>
            Base Class for USG Bank Account Event Handling
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountMessageSubscriberBase.#ctor(TaxHub.CoreServices.Application.IPreparerService,TaxHub.CoreServices.Application.IPreparerCheckService,TaxHub.CoreServices.Application.IAlertService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            The base constructor
            </summary>
            <param name="preparerService">The preparer service</param>
            <param name="preparerCheckService">The preparer check service</param>
            <param name="alertService">The alert service</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountMessageSubscriberBase.CreateAlert(System.String,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Created an alert
            </summary>
            <param name="logErrorMessage">A message to log if the alert creation fails</param>
            <param name="eventData">The event data</param>
            <returns>A Task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountMessageSubscriberBase.SynchronizePreparerUsgEftBankInformation(TaxHub.Models.Preparer,TaxHub.Models.Commands.PreparerTaxEftAccountCommand,System.Guid,System.Guid,System.String)">
            <summary>
            Synchs the USG and UTE EFT Bank Information
            </summary>
            <param name="preparer">The preparer</param>
            <param name="updateCommand">The update command</param>
            <param name="correlationId">The correlation Id</param>
            <param name="userId">The User Id</param>
            <param name="userDescription">The User description</param>
            <returns>The result of the opration</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountMessageSubscriberBase.SynchronizePreparerCheckUsgEftBankInformation(TaxHub.Models.PreparerCheck,TaxHub.Models.Commands.PreparerCheckTaxEftAccountCommand,System.Guid,System.Guid,System.String)">
            <summary>
            Synchs the USG and UTE EFT Bank Information
            </summary>
            <param name="preparerCheck">The preparer check</param>
            <param name="updateCommand">The update command</param>
            <param name="correlationId">The correlation id</param>
            <param name="userId">The user id</param>
            <param name="userDescription">The user description</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountMessageSubscriberBase.SynchronizePreparerCheckUsgCheckBankInformation(TaxHub.Models.PreparerCheck,TaxHub.Models.Commands.PreparerCheckTaxCheckAccountCommand,System.Guid,System.Guid,System.String)">
            <summary>
            Synchs the USG and UTE Tax Check Bank Information
            </summary>
            <param name="preparerCheck">The preparer check</param>
            <param name="updateCommand">The update command</param>
            <param name="correlationId">The correlation id</param>
            <param name="userId">The user id</param>
            <param name="userDescription">The user description</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountObservedMessageSubscriber">
            <summary>
            The USG Bank Account observed message subscriber
            The message handler will only updated the secure information
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountObservedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountObservedMessageSubscriber.QueueName">
            <summary>
            The queue name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountObservedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IPreparerService,TaxHub.CoreServices.Application.IPreparerCheckService,TaxHub.CoreServices.Application.IAlertService,TaxHub.CoreServices.Acl.Payment.IUsgBankAccountCommandMapper,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountObservedMessageSubscriber"/> class.
            </summary>
            <param name="alertService">The Alert Service</param>
            <param name="commandMapper">The USG Bank Account Command Mapper</param>
            <param name="logger">application logger</param>
            <param name="preparerService">The preparer service</param>
            <param name="preparerCheckService">The preparer check service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountObservedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'payment.usg-bank-account.observed' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountObservedMessageSubscriber.ValidateACHOriginatingDFINumber(System.String)">
            <summary>
            This will validate that the originating DFI # is a string of ints of length 8
            </summary>
            <param name="originatingDfiNumber">The originating DFI # string to verify</param>
            <returns>true if validation passes, false otherwise</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountUpdatedMessageSubscriber">
            <summary>
            The USG Bank Account updated message subscriber
            The message handler will only updated the non-masked information
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountUpdatedMessageSubscriber.QueueName">
            <summary>
            The queue name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountUpdatedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IPreparerService,TaxHub.CoreServices.Application.IPreparerCheckService,TaxHub.CoreServices.Application.IAlertService,TaxHub.CoreServices.Acl.Payment.IUsgBankAccountCommandMapper,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.PaymentUsgBankAccountUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="alertService">The Alert Service</param>
            <param name="commandMapper">The USG Bank Account Command Mapper</param>
            <param name="logger">application logger</param>
            <param name="preparerService">The preparer service</param>
            <param name="preparerCheckService">The preparer check service</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxCheckNftUnassignedMessageSubscriber">
            <summary>
            Tax check voided message subscriber
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxCheckNftUnassignedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCheckNftUnassignedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ICheckService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxCheckNftUnassignedMessageSubscriber"/> class.
            </summary>
            <param name="logger">Application logger</param>
            <param name="checkService">Service that handles check information</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxCheckNftUnexportedMessageSubscriber">
            <summary>
            Tax check voided message subscriber
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxCheckNftUnexportedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCheckNftUnexportedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ICheckService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxCheckNftUnexportedMessageSubscriber"/> class.
            </summary>
            <param name="logger">Application logger</param>
            <param name="checkService">Service that handles check information</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxCheckStatusChangedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.federal-electronic-transfer.unexported" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxCheckStatusChangedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCheckStatusChangedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ICheckService)">
            <summary>
            Constructor
            </summary>
            <param name="appLogger">The application logger</param>
            <param name="checkService">The federal electronic transfer service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCheckStatusChangedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxCheckReconciledEvent)">
            <summary>
            The consume event
            </summary>
            <param name="eventName">Event Name</param>
            <param name="eventData">Event Data</param>
            <param name="taxCheckReconciledEvent">The model event data</param>
            <returns>True if it was succesfully consumed</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxCheckServiceVoidedMessageSubscriber">
            <summary>
            Tax check voided message subscriber
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxCheckServiceVoidedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCheckServiceVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ICheckService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxCheckServiceVoidedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="checkService">Service that handles check information</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxCheckVoidedMessageSubscriber">
            <summary>
            Tax check voided message subscriber
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxCheckVoidedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCheckVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ICheckService,TaxHub.CoreServices.Application.IPrintableDocumentService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxCheckVoidedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="checkService">Service that handles check information</param>
            <param name="documentService">PrintableDocument service</param>
            <param name="featureToggleConfiguration">The feature toggle configuration</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxClientCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.client-agency.created" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxClientCreatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxClientCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IClientAgencyService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxClientCreatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="clientAgencyService">Service that handles tenant information</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxClientCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Client)">
            <summary>
            Method consumes the 'tax.client-agency.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="client">The client</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxCompanyServiceCompanySyncCompletedMessageSubscriber">
            <summary>
            Subscriber for "tax.company-service.company-sync-completed" message
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxCompanyServiceCompanySyncCompletedMessageSubscriber.EventName">
            <summary>
            The event name.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCompanyServiceCompanySyncCompletedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IClientPayrollService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxCompanyServiceCompanySyncCompletedMessageSubscriber" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="clientPayrollService">The client payroll service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxCompanyServiceCompanySyncCompletedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Invokes PayrollUnit sync for synced Companies
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxEftExportedMessageSubscriber">
            <summary>
            Class provides functionality for tax eft exported event raised in PTM.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxEftExportedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IAchFileService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxEftExportedMessageSubscriber"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="achFileService">The ach file service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxEftExportedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Commands.AchFileCreateCommand)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxFedEftWiredEventMessageSubscriber">
            <summary>
            Subscriber that handles tax.federal-electronic-transfer.wired event
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxFedEftWiredEventMessageSubscriber.EventName">
            <summary>
            Event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFedEftWiredEventMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxFedEftWiredEventMessageSubscriber"/> class.
            </summary>
            <param name="logger">logger</param>
            <param name="paymentService">Payment service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFedEftWiredEventMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxFederalElectronicTransferWiredEvent)">
            <summary>
            Consume event
            </summary>
            <param name="eventName">event name</param>
            <param name="eventData">event data</param>
            <param name="typedDetails">typed event data details</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxFedEftVoidedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.fedeft-service.voided" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxFedEftVoidedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFedEftVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IFederalElectronicTransferService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxFedEftVoidedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="federalElectronicTransferService">Service that handles federal eft information</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxFederalElectronicTransferDistributionVoidedMessageSubscriber">
            <summary>
            Tax state eft distribution voided message subscriber
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxFederalElectronicTransferDistributionVoidedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFederalElectronicTransferDistributionVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxFederalElectronicTransferDistributionVoidedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="paymentService">Service that handles payment information</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxFederalElectronicTransferReconcileStatusChangedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.federal-electronic-transfer.unexported" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxFederalElectronicTransferReconcileStatusChangedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFederalElectronicTransferReconcileStatusChangedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IFederalElectronicTransferService)">
            <summary>
            Constructor
            </summary>
            <param name="appLogger">The application logger</param>
            <param name="federalElectronicTransferService">The federal electronic transfer service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFederalElectronicTransferReconcileStatusChangedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxFederalElectronicTransferReconciledEvent)">
            <summary>
            The consume event
            </summary>
            <param name="eventName">Event Name</param>
            <param name="eventData">Event Data</param>
            <param name="taxFederalElectronicTransferReconciledEvent">The model event data</param>
            <returns>True if it was succesfully consumed</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxFederalElectronicTransferUnexportedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.federal-electronic-transfer.unexported" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxFederalElectronicTransferUnexportedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFederalElectronicTransferUnexportedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IFederalElectronicTransferService)">
            <summary>
            Constructor
            </summary>
            <param name="appLogger">The application logger</param>
            <param name="federalElectronicTransferService">The federal electronic transfer service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFederalElectronicTransferUnexportedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxFederalElectronicTransferUnexportedEvent)">
            <summary>
            The consume event
            </summary>
            <param name="eventName">Event Name</param>
            <param name="eventData">Event Data</param>
            <param name="taxFederalElectronicTransferUnexportedEvent">The model event data</param>
            <returns>True if it was succesfully consumed</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxFileGeneratedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.file.generated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxFileGeneratedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFileGeneratedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CommonServices.FileManagement.Application.IFileService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxFileGeneratedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="fileService">file service</param>
            <param name="featureToggleConfiguration">config for feature toggles</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFileGeneratedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'payment.file.generated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFileGeneratedMessageSubscriber.ShouldFileTypeBeTransmittedToUdes(TaxHub.CommonServices.FileManagement.Models.FileType)">
            <summary>
            Determines whether a file should be transmitted to udes based on the file type
            </summary>
            <param name="fileType">The file type</param>
            <returns>true if the file of that type should be transmitted to UDES, otherwise false</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxFileReconciledMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.federal-electronic-transfer.unexported" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxFileReconciledMessageSubscriber.EventName">
            <summary>
            Event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFileReconciledMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IFederalElectronicTransferService,TaxHub.CoreServices.Application.IStateElectronicTransferService)">
            <summary>
            Constructor
            </summary>
            <param name="appLogger">The application logger</param>
            <param name="federalEftService">The federal electronic transfer service</param>
            <param name="stateEftService">The state electronic transfer service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFileReconciledMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.CommonServices.FileManagement.Events.TaxFileReconciledEvent)">
            <summary>
            The consume event
            </summary>
            <param name="eventName">Event Name</param>
            <param name="eventData">Event Data</param>
            <param name="taxFileReconciledEvent">The model event data</param>
            <returns>True if it was succesfully consumed</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxFileVoidedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.file.voided" event.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxFileVoidedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFileVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IAchFileService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxFileVoidedMessageSubscriber"/> class.
            </summary>
            <param name="appLogger">The application logger.</param>
            <param name="achFileService">The ach file service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFileVoidedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the tax.file.voided.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxFormDocumentLegacyDeletedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.form-document.legacy-deleted" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxFormDocumentLegacyDeletedMessageSubscriber.EventName">
            <summary>
            The event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFormDocumentLegacyDeletedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CommonServices.FileManagement.Application.IFileService,TaxHub.CoreServices.Application.IPrintableDocumentService)">
            <summary>
            Constructor
            </summary>
            <param name="logger">The logger</param>
            <param name="fileService">An instance of the <see cref="T:TaxHub.CommonServices.FileManagement.Application.IFileService"/></param>
            <param name="documentService">Printable Document service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFormDocumentLegacyDeletedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxFormDocumentLegacyDeletedEvent)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxFormDocumentLegacyCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.form-document.legacy-created" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxFormDocumentLegacyCreatedMessageSubscriber.EventName">
            <summary>
            The event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFormDocumentLegacyCreatedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IPrintableDocumentService,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="documentService">The document service</param>
            <param name="logger">THe logger</param>
            <param name="featureToggleConfiguration">The feature toggle config</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxFormDocumentLegacyCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxFormDocumentLegacyCreatedEvent)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPaymentCompanyIdUpdateMessageSubscriber">
            <summary>
            Payment CompanyId Update Message Subscriber
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPaymentCompanyIdUpdateMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPaymentCompanyIdUpdateMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPaymentCompanyIdUpdateMessageSubscriber"/> class.
            </summary>
            <param name="logger">Logger</param>
            <param name="paymentService">Payment Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPaymentCompanyIdUpdateMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Checks the Event and Consumes
            </summary>
            <param name="eventName">Event Name</param>
            <param name="eventData">Event Data</param>
            <returns>Returns Boolean Value</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxLiabilityCashMgmtLiabilityIdUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.liability.cash-mgmt-liability-id-updated" event.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" /> 
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxLiabilityCashMgmtLiabilityIdUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxLiabilityCashMgmtLiabilityIdUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPenaltyInterestService)">
            <summary>
            constructor
            </summary>
            <param name="logger">logger</param>
            <param name="penaltyInterestService">Penalty Interest Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxLiabilityCashMgmtLiabilityIdUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxLiabilityCashMgmtLiabilityIdUpdatedEvent)">
            <summary>
            Method consumestax.liability.cash-mgmt-liability-id-updated event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="cashMgmtLiabilityIdEvent">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxLiabilityStatusUpdatedMessageSubscriber">
            <summary>
            Subscriber to the tax.liability.cashmgmt-status-updated event
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxLiabilityStatusUpdatedMessageSubscriber.EventName">
            <summary>
            Event name 
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxLiabilityStatusUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPenaltyInterestService)">
            <summary>
            Constructor for subscriber
            </summary>
            <param name="logger"> A logger</param>
            <param name="penaltyInterestService"> The penalty interest service </param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxLiabilityStatusUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
             Consumer for tax.liability.cashmgmt-status-updated event
            </summary>
            <param name="eventName"> The name of the event</param>
            <param name="eventData"> The details of the event</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPayTrackingMigrationRequestedMessageSubscriber">
            <summary>
            Subscriber for the tax.pay-tracking-migration-service.pay-tracking-migration-requested event
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPayTrackingMigrationRequestedMessageSubscriber.EventName">
            <summary>
            The event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPayTrackingMigrationRequestedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IPayTrackingMigrationService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Default constructor for the subscriber
            </summary>
            <param name="payTrackingMigrationService">The PayTracking migration service</param>
            <param name="appLogger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPayTrackingMigrationRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.pay-tracking-migration-service.pay-tracking-migration-requested' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxMappedTaxPayInvalidTypesMigrationRequestedMessageSubscriber">
            <summary>
            Subscriber for the tax.mapped-tax-pay-migration-service.mapped-tax-pay-invalid-types-migration-requested event
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxMappedTaxPayInvalidTypesMigrationRequestedMessageSubscriber.EventName">
            <summary>
            The event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxMappedTaxPayInvalidTypesMigrationRequestedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IMappedTaxPayMigrationService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Default constructor for the subscriber
            </summary>
            <param name="mappedTaxPayMigrationService">The MappedTaxPay migration service</param>
            <param name="appLogger">The logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxMappedTaxPayInvalidTypesMigrationRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.mapped-tax-pay-migration-service.mapped-tax-pay-invalid-types-migration-requested' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPaymentCreditTrackingVoidedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.payment.credit-tracking-voided" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPaymentCreditTrackingVoidedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPaymentCreditTrackingVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPaymentCreditTrackingVoidedMessageSubscriber"/> class.
            </summary>
            <param name="logger">Logger</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxInputTaxInstanceAssemblyStatusUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.inputtaxinstance.assembly-status-updated" and "tax.inputtaxinstance.legacy-assembly-status-updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxInputTaxInstanceAssemblyStatusUpdatedMessageSubscriber.EventName">
            <summary>
            Event name
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxInputTaxInstanceAssemblyStatusUpdatedMessageSubscriber.LegacyEventName">
            <summary>
            Legacy event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxInputTaxInstanceAssemblyStatusUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ILiabilityService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxInputTaxInstanceAssemblyStatusUpdatedMessageSubscriber"/> class
            </summary>
            <param name="logger">Application logger</param>
            <param name="liabilityService">Service to prepare a liability before posting to SmartHub</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxInputTaxInstanceAssemblyStatusUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Consume "tax.inputtaxinstance.assembly-status-updated" and "tax.inputtaxinstance.legacy-assembly-status-updated" events.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">Aggregated data describing the event.</param>
            <returns>True if processed successfully. False otherwise.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPaymentLegacyUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.payment.legacy-updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPaymentLegacyUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPaymentLegacyUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ILiabilityService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPaymentLegacyUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">Logger</param>
            <param name="liabilityService">liabilityService</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPaymentLegacyCheckDateNextBusinessDayUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.payment.legacy-check-date-next-business-day-updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPaymentLegacyCheckDateNextBusinessDayUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPaymentLegacyCheckDateNextBusinessDayUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ILiabilityService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPaymentLegacyCheckDateNextBusinessDayUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">Logger</param>
            <param name="liabilityService">liabilityService</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPaymentDueDateLegacyUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.payment.due-date-legacy-updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPaymentDueDateLegacyUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPaymentDueDateLegacyUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ILiabilityService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPaymentDueDateLegacyUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">Logger</param>
            <param name="liabilityService">liabilityService</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPaymentUnexportedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.payment.unexported" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPaymentUnexportedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPaymentUnexportedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPaymentUnexportedMessageSubscriber"/> class.
            </summary>
            <param name="logger">Logger</param>
            <param name="paymentService">Payment Service</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPayrollUnitServiceCreateDelayedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.payrollunit-clientService.create-delayed" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPayrollUnitServiceCreateDelayedMessageSubscriber.EventName">
            <summary>
            The delayed event name
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPayrollUnitServiceCreateDelayedMessageSubscriber.RetryDelays">
            <summary>
            The retry delays
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPayrollUnitServiceCreateDelayedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ITenantService,TaxHub.CoreServices.Application.IClientService,TaxHub.CoreServices.Application.IClientPayrollService,TaxHub.CoreServices.Application.ICompanyService,TaxHub.Messaging.IMessageHub)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPayrollUnitServiceCreateDelayedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="tenantService">The tenant service.</param>
            <param name="clientService">Service that handles client payrollunit information</param>
            <param name="clientPayrollService">The client payroll service</param>
            <param name="companyService"> Company Service</param>
            <param name="messageHub"> Message Hub</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPayrollUnitServiceCreateDelayedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxPayrollUnitServiceCreateDelayedEvent)">
            <summary>
            Method consumes the 'payment.payrollunit.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="details">The details</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPenaltyInterestCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.penaltyinterest.created" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPenaltyInterestCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPenaltyInterestService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPenaltyInterestCreatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="penaltyInterestService">The service in charge of processing a print request</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPenaltyInterestCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.penaltyinterest.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPrintFileRequestBatchDocumentCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.printfilerequest.batch-document-created" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPrintFileRequestBatchDocumentCreatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>tax.printfilerequest.batch-document-created
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPrintFileRequestBatchDocumentCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPrintFileRequestService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPrintFileRequestBatchDocumentCreatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="printFileRequestService">The service in charge of processing a print request</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPrintFileRequestBatchDocumentCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.printfilerequest.batch-document-created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxLiabilityCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.liability.created" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxLiabilityCreatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxLiabilityCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Configuration.IFeatureToggleConfiguration,TaxHub.CoreServices.Application.IPenaltyInterestService,TaxHub.CoreServices.Application.Banking.IPaymentCreditLiabilityRefundService,TaxHub.CoreServices.Application.Banking.IQeNetPaymentVoidedLiabilityRefundService)">
            <summary>
            constructor
            </summary>
            <param name="logger">logger</param>
            <param name="featureToggleConfiguration">The feature toggle configuration</param>
            <param name="penaltyInterestService">The penalty interest service</param>
            <param name="paymentCreditLiabilityRefundService">The payment liability refund service</param>
            <param name="qeNetPaymentVoidedLiabilityRefundService">The payment voided liability refund service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxLiabilityCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Liability)">
            <summary>
            Method consumes the tax.liability.created event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="liability">liability created</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPenaltyInterestUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.penaltyinterest.status-updated" event.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" /> 
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPenaltyInterestUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPenaltyInterestUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ILiabilityService)">
            <summary>
            constructor
            </summary>
            <param name="logger">logger</param>
            <param name="liabilityService">Liability Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPenaltyInterestUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxPenaltyInterestStatusUpdatedEvent)">
            <summary>
            Method consumes the tax.penaltyinterest.status-updated. event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="statusUpdatedEvent">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPrintFileRequestServiceAllocatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.printfilerequest.created" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPrintFileRequestServiceAllocatedMessageSubscriber.EventName">
            <summary>
            Event Name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPrintFileRequestServiceAllocatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPrintFileRequestService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPrintFileRequestServiceAllocatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="printFileRequestService">The service in charge of processing a print request</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPrintFileRequestServiceAllocatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.printfilerequest.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPrintFileRequestUpdatedBatchStatusMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.printfilerequest.batch-document-status-updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPrintFileRequestUpdatedBatchStatusMessageSubscriber.EventName">
            <summary>
            event name
            </summary>tax.printfilerequest.batch-document-status-updated
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPrintFileRequestUpdatedBatchStatusMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPrintFileRequestService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPrintFileRequestUpdatedBatchStatusMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="printFileRequestService">A printfilerequestservice instance</param>
            <param name="featureToggleConfiguration">config for feature toggles</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPrintFileRequestUpdatedBatchStatusMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.printfilerequest.batch-document-status-updated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPrintFileRequestUpdatedSortingInfoMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.printfilerequest.staged-print-file-sorting-info-updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPrintFileRequestUpdatedSortingInfoMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPrintFileRequestUpdatedSortingInfoMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPrintableDocumentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPrintFileRequestUpdatedSortingInfoMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="documentService">printable document service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPrintFileRequestUpdatedSortingInfoMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.printfilerequest.staged-print-file-sorting-info-updated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxQuarterEndServiceLedgerDeletedMessageSubscriber">
            <inheritdoc />
            <summary>
            Class provides subscriber functionality for "tax.quarter-end-service.legacy-ledger-deleted" event.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxQuarterEndServiceLedgerDeletedMessageSubscriber.EventName">
            <summary>
            Event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxQuarterEndServiceLedgerDeletedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxQuarterEndServiceLedgerDeletedMessageSubscriber"/> class.
            </summary>
            <param name="logger">The application logge.r</param>
            <param name="paymentService">The payment service.</param>
            <param name="featureToggle">The feature toggle configuration</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxQuarterEndServiceLedgerDeletedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <inheritdoc cref="M:TaxHub.Messaging.ISimpleMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)"/>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingPayrollValidationSummaryChangedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.periodic-tax-processing-service.validation-summary-changed" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingPayrollValidationSummaryChangedMessageSubscriber.TaxPeriodicTaxProcessingValidataionSummaryChangedEvent">
            <summary>
            The tax periodic tax processing validataion summary changed event
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingPayrollValidationSummaryChangedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IAlertService,TaxHub.Common.Configuration.IFeatureToggleConfiguration,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingPayrollValidationSummaryChangedMessageSubscriber"/> class.
            </summary>
            <param name="alertService">The alert service.</param>
            <param name="featureToggleConfiguration">The feature toggle configuration.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceValidationSummaryAddedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.periodic-tax-processing.periodic-tax-instance-validation-summary-added" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceValidationSummaryAddedMessageSubscriber.TaxPeriodicTaxInstanceValidationSummaryAddedEvent">
            <summary>
            The tax periodic tax instance validation summary added event
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceValidationSummaryAddedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IAlertService,TaxHub.Common.Configuration.IFeatureToggleConfiguration,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceValidationSummaryAddedMessageSubscriber"/> class.
            </summary>
            <param name="alertService">The alert service.</param>
            <param name="featureToggleConfiguration">The feature toggle configuration.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingQuarterEndPostedMetricsMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.quarterlytaxprocessing-service.quarter-end-posted" event to record metrics on.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingQuarterEndPostedMetricsMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingQuarterEndPostedMetricsMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ITaxQuarterlyTaxProcessingMetricsService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingQuarterEndPostedMetricsMessageSubscriber"/> class.
            </summary>
            <param name="logger">An instance of <see cref="T:TaxHub.Common.Logging.IAppLogger"/>.</param>
            <param name="quarterlyTaxProcessingMetricsService">An instance of <see cref="T:TaxHub.CoreServices.Application.ITaxQuarterlyTaxProcessingMetricsService"/>.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingQuarterEndPostedMetricsMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Processes an event.
            </summary>
            <param name="eventName">An event name.</param>
            <param name="eventData">The event data.</param>
            <returns><value>true</value> if processing completed successfully. <value>false</value> if it failed.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingLedgerClosedMetricsMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.quarterlytaxprocessing-service.ledger-closed" event to record metrics on.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingLedgerClosedMetricsMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingLedgerClosedMetricsMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ITaxQuarterlyTaxProcessingMetricsService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingLedgerClosedMetricsMessageSubscriber"/> class.
            </summary>
            <param name="logger">An instance of <see cref="T:TaxHub.Common.Logging.IAppLogger"/>.</param>
            <param name="quarterlyTaxProcessingMetricsService">An instance of <see cref="T:TaxHub.CoreServices.Application.ITaxQuarterlyTaxProcessingMetricsService"/>.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingLedgerClosedMetricsMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Processes an event.
            </summary>
            <param name="eventName">An event name.</param>
            <param name="eventData">The event data.</param>
            <returns><value>true</value> if processing completed successfully. <value>false</value> if it failed.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingQuarterEndPhaseAndStatusMetricsMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "payment.scheduler-service.qe-processing-scheduled" event to record metrics on.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingQuarterEndPhaseAndStatusMetricsMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingQuarterEndPhaseAndStatusMetricsMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ITaxQuarterlyTaxProcessingMetricsService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingQuarterEndPhaseAndStatusMetricsMessageSubscriber"/> class.
            </summary>
            <param name="logger">An instance of <see cref="T:TaxHub.Common.Logging.IAppLogger"/>.</param>
            <param name="quarterlyTaxProcessingMetricsService">An instance of <see cref="T:TaxHub.CoreServices.Application.ITaxQuarterlyTaxProcessingMetricsService"/>.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingQuarterEndPhaseAndStatusMetricsMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            ConsumeEvent
            </summary>
            <param name="eventName">eventName</param>
            <param name="eventData">eventData</param>
            <returns>data</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxReplayPayMappingRequestedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for tax.replay-payroll-service.replay-pay-mapping-requested event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxReplayPayMappingRequestedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IReplayPayrollService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxReplayPayrollServiceReplayPayrollRequestedMessageSubscriber"/> class.
            </summary>
            <param name="replayPayrollService">The Replay Payroll Service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxReplayPayMappingRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.ReplayPayMappingRequestedEvent)">
            <summary>
            Method consumes the tax.replay-payroll-service.replay-pay-mapping-requested event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="payload">The replay pay mapping event payload.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxReplayPayrollServiceReplayPayrollRequestedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.replay-payroll-service.replay-payroll-requested" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxReplayPayrollServiceReplayPayrollRequestedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxReplayPayrollServiceReplayPayrollRequestedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IReplayPayrollService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxReplayPayrollServiceReplayPayrollRequestedMessageSubscriber"/> class.
            </summary>
            <param name="replayPayrollService">The Replay Payroll Service.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxReplayPayrollServiceReplayPayrollRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.periodic-tax-processing.replay-requested' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingLedgerClosedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.quarterlytaxprocessing-service.ledger-closed" event.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingLedgerClosedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingLedgerClosedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxQuarterlyTaxProcessingLedgerClosedMessageSubscriber"/> class.
            </summary>
            <param name="logger">Logger</param>
            <param name="paymentService">Payment Service</param>
            <param name="featureToggle">The feature toggle configuration</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPaymentVoidedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.payment.voided" event.
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPaymentVoidedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPaymentVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Banking.IPaymentVoidedLiabilityRefundService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPaymentVoidedMessageSubscriber"/> class.
            </summary>
            <param name="logger">Logger</param>
            <param name="paymentVoidedLiabilityRefundService">Payment Voided Liability Refund Service</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceAssemblyRequestedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.periodictaxinstance.assemblyrequested" and "tax.periodictaxinstance.legacy-assemblyrequested" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceAssemblyRequestedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceAssemblyRequestedMessageSubscriber.LegacyEventName">
            <summary>
            Legacy event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceAssemblyRequestedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ILiabilityService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceAssemblyRequestedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="liabilityService">Service that will prepare a liability before posting to smarthub</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceAssemblyRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.periodictaxinstance.assemblyrequested' and 'tax.periodictaxinstance.legacy-assemblyrequested' events.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceCreateFinalizedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.periodictaxinstance.created" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceCreateFinalizedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceCreateFinalizedMessageSubscriber" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="domainService">The domain service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceCreateFinalizedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.payrolltaxinstance.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingMetadataReceivedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "txm.periodic-tax-processing.metadata-received" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingMetadataReceivedMessageSubscriber.PaymentPeriodicTaxProcessingMetadataReceived">
            <summary>
            event name for metadata received
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingMetadataReceivedMessageSubscriber.TaxPeriodicTaxProcessingMetadataReceivedRetry">
            <summary>
            event name for metadata receved and retry
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingMetadataReceivedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.INonPayrollProcessingService,TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingMetadataReceivedMessageSubscriber"/> class.
            </summary>
            <param name="nonPayrollProcessingService">The non payroll processing service.</param>
            <param name="logger">Application logger</param>
            <param name="applicationMetricsBuilder">The application metrics builder.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingMetadataReceivedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxPeriodicTaxProcessingMetadataReceivedEvent)">
            <summary>
            Method consumes the 'txm.periodic-tax-processing.metadata-received' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">The typed details.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceDeletedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.periodictaxinstance.deleted" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceDeletedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceDeletedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.IEmployeePayrollService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceDeletedMessageSubscriber"/> class.
            </summary>
            <param name="employeePayrollService">The employee payroll service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPeriodicTaxInstanceDeletedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.payrolltaxinstance.deleted' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.periodic-tax-processing.created" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingCreatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingCreatedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.INonPayrollProcessingService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingCreatedMessageSubscriber"/> class.
            </summary>
            <param name="nonPayrollProcessingService">The non payroll processing service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPeriodicTaxProcessingCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.periodic-tax-processing.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.SystemCommandCoreSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.system-command.issued" event.
            </summary>
            <seealso cref="T:TaxHub.Messaging.SysCommandSubscriberBase" />
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.SystemCommandCoreSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.SystemCommandCoreSubscriber"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="domainService">The domain service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.SystemCommandCoreSubscriber.ProcessLocalCommands(System.String,TaxHub.Common.EventStore.DomainEventData,System.Boolean@)">
            <summary>
            Method processes local commands known to particular service.
            </summary>
            <param name="commandName">The command name. This is different from the eventName.</param>
            <param name="eventData">The event data.</param>
            <param name="knownCommand">Method must return boolean indicator whether command is known as a local command.</param>
            <returns>
            Returns boolean value if event has been successfully consumed (handled).
            </returns>
            <remarks>
            IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.
            </remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxPrintFileRequestStagedFileStatusUpdatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.printfilerequest.staged-print-file-status-updated" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxPrintFileRequestStagedFileStatusUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPrintFileRequestStagedFileStatusUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPrintableDocumentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxPrintFileRequestStagedFileStatusUpdatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="printableDocumentService">The printable document service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxPrintFileRequestStagedFileStatusUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.printfilerequest.staged-print-file-status-updated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxQEFileImportMessageSubscriber">
            <inheritdoc />
            <summary>
            Class provides subscriber functionality for "payment.scheduler-service.download-rts-file-scheduled" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxQEFileImportMessageSubscriber.#ctor(TaxHub.CoreServices.Application.QuarterEndIngestion.IQEFileStorageService,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder,TaxHub.Common.Configuration.IFeatureToggleConfiguration,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor
            </summary>
            <param name="rtsFileStorageService">The rts file storage service</param>
            <param name="featureToggleConfiguration">The feature toggle configuration</param>
            <param name="metricsBuilder">The metric builder</param>
            <param name="appLogger">The app logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxQEFileImportMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <inheritdoc />
            <summary>
            Consumes event that schedules a download receivable file interation
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.InboundFileStatusUpdatedMessageSubscriber">
            <inheritdoc />
            <summary>
            Class provides subscriber functionality for "tax.inboundfile.status-updated" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.InboundFileStatusUpdatedMessageSubscriber.#ctor(TaxHub.CoreServices.Application.QuarterEndIngestion.IRtsFileProcessingService,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.InboundFileStatusUpdatedMessageSubscriber" /> class.
            </summary>
            <param name="rtsFileProcessingService">The rts file processing service.</param>
            <param name="metricsBuilder">The metric builder</param>
            <param name="appLogger">The application logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.InboundFileStatusUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.InboundFileStatusUpdatedEvent)">
            <summary>
            Method consumes the 'tax.inboundfile.status-updated' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">The typed details.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxStateEftVoidedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.stateeft-service.voided" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxStateEftVoidedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxStateEftVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IStateElectronicTransferService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxStateEftVoidedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="stateElectronicTransferService">Service that handles federal eft information</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferDistributionVoidedMessageSubscriber">
            <summary>
            Tax state eft distribution voided message subscriber
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferDistributionVoidedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferDistributionVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferDistributionVoidedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="paymentService">Service that handles payment information</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferReconcileStatusChangedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.federal-electronic-transfer.unexported" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferReconcileStatusChangedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferReconcileStatusChangedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IStateElectronicTransferService)">
            <summary>
            Constructor
            </summary>
            <param name="appLogger">The application logger</param>
            <param name="stateElectronicTransferService">The federal electronic transfer service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferReconcileStatusChangedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxStateElectronicTransferReconciledEvent)">
            <summary>
            The consume event
            </summary>
            <param name="eventName">Event Name</param>
            <param name="eventData">Event Data</param>
            <param name="taxStateElectronicTransferReconciledEvent">The model event data</param>
            <returns>True if it was succesfully consumed</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferUnexportedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.state-electronic-transfer.unexported" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferUnexportedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferUnexportedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IStateElectronicTransferService)">
            <summary>
            Constructor
            </summary>
            <param name="appLogger">The application logger</param>
            <param name="stateElectronicTransferService">The state electronic transfer service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferUnexportedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxStateElectronicTransferUnexportedEvent)">
            <summary>
            The consume event
            </summary>
            <param name="eventName">Event Name</param>
            <param name="eventData">Event Data</param>
            <param name="taxStateElectronicTransferUnexportedEvent">The model event data</param>
            <returns>True if it was succesfully consumed</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferVoidedMessageSubscriber">
            <summary>
            Tax check voided message subscriber
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferVoidedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferVoidedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IStateElectronicTransferService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxStateElectronicTransferVoidedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="stateElectronicTransferService">Service that handles state eft information</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxTenantServiceTenantSyncCompletedMessageSubscriber">
            <summary>
            Subscriber for "tax.tenant-service.tenant-sync-completed" message
            </summary>
            <seealso cref="T:TaxHub.Messaging.ISimpleMessageSubscriber" />
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxTenantServiceTenantSyncCompletedMessageSubscriber.EventName">
            <summary>
            The event name.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxTenantServiceTenantSyncCompletedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.ICompanyService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxTenantServiceTenantSyncCompletedMessageSubscriber" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="companyService">The tenant service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxTenantServiceTenantSyncCompletedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Invokes Company sync for synced Tenant
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it should return true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYeProcessingStatusUpdatedMessageSubscriber">
            <summary>
            Subscriber to handle ye processing status updated.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYeProcessingStatusUpdatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYeProcessingStatusUpdatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService)">
            <summary>
            The constructor of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYeProcessingStatusUpdatedMessageSubscriber" /> instance
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="yeProcessingService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEndIngestion.IYEProcessingService" /> interface</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYeProcessingStatusUpdatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.YearEnd.YeProcessingStatusUpdatedEvent)">
            <summary>
            Method to consume the 'tax.ye-processing.status-updated' event
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="detailsObject">The event typed details.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndIngestionCompletedMessageSubscriber">
            <summary>
            Subscriber to handle Ingestion completed event and register ingestion files
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndIngestionCompletedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndIngestionCompletedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndAutoPostService,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService,TaxHub.CoreServices.Application.IClientParentChildService,TaxHub.Messaging.IMessageHub)">
            <summary>
            The constructor of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndIngestionCompletedMessageSubscriber" /> instance
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="yearEndAutoPostService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndAutoPostService" /> interface</param>
            <param name="yearEndTaxProcessingService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService" /> interface</param>
            <param name="clientParentChildService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.IClientParentChildService" /> interface</param>
            <param name="messageHub">The message hub</param>
            <remarks>We do not want to execute retry if we fail registration.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndIngestionCompletedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearEndIngestionFilesEvent)">
            <summary>
            Method to consume the 'tax.ye-processing-service.import-completed' event
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="detailsObject">The event typed details.</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndIngestionCompletedMessageSubscriber.ValidateEventInfo(TaxHub.Models.Events.TaxYearEndIngestionFilesEvent,System.Guid)">
            <summary>
            Validates the input of the event payload as Dictioary.
            </summary>
            <param name="detailsObject">The typed event details</param>
            <param name="correlationId">The correlation Id</param>
            <returns>True if all validations pass, False if there is at least one failure</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndIngestionResumedMessageSubscriber">
            <summary>
            Subscriber to handle Ingestion completed event and invalidate ingestion files
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndIngestionResumedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndIngestionResumedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndStagingREService)">
            <summary>
            The constructor of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndIngestionResumedMessageSubscriber" /> instance
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="yearEndStagingREService">An imlementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndStagingREService" /> interface</param>
            <remarks>We do not want to execute retry if we fail registration.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndIngestionResumedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method to consume the 'tax.ye-processing-service.import-resumed' event
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndIngestionResumedMessageSubscriber.ValidateEventInfo(System.Collections.Generic.IDictionary{System.String,System.Object},System.Guid)">
            <summary>
            Validates the input of the event payload as Dictioary.
            </summary>
            <param name="detailsObject">The event payload as Dictionary</param>
            <param name="correlationId">The correlation Id</param>
            <returns>True if all validations pass, False if there is at least one failure</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndPostCompletedMessageSubscriber">
            <summary>
            Subscriber to handle a YE post completed details
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndPostCompletedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostCompletedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService)">
            <summary>
            The constructor of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndPostCompletedMessageSubscriber" /> instance
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="yearEndProcessingService">An imlementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService" /> interface</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostCompletedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearEndPostCompletedEvent)">
            <summary>
            Method consumes the tax.year-end-post.completed event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">An instance of the deserialized event payload</param>
            <returns>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostCompletedMessageSubscriber.ValidateEventDetails(TaxHub.Models.Events.TaxYearEndPostCompletedEvent,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Validates the input <see cref="T:TaxHub.Models.Events.TaxYearEndPostCompletedEvent" /> instance.
            </summary>
            <param name="details">The <see cref="T:TaxHub.Models.Events.TaxYearEndPostCompletedEvent" /> instance to be validated</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <returns>True if all validations pass, False if there is at least one failure</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndFileInfoExportedSubscriber">
            <summary>
            Subscriber for a Year End File being downloaded
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndFileInfoExportedSubscriber.EventName">
            <summary>
            The name of the event when a YE File is exported.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndFileInfoExportedSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndFileInfoService)">
            <summary>
            Initializes a new instance of <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndFileInfoExportedSubscriber"/>
            </summary>
            <param name="logger">The application logger</param>
            <param name="yearEndFileInfoService">The year end FileInfo Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndFileInfoExportedSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearEndFileInfoLegacyExportedEvent)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackMessageSubscriber">
            <summary>
            Subscriber to handle a YE post Rollback
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService)">
            <summary>
            The constructor of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackMessageSubscriber" /> instance
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="yearEndProcessingService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService" /> interface</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRollbackMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearEndPostRollbackRequestedEvent)">
            <summary>
            Method consumes the tax.year-end-post-rollback.requested event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">An instance of the deserialized event payload</param>
            <returns>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYeCustomerPackageCompletedMessageSubscriber">
            <summary>
            Message Subscriber for <see cref="F:TaxHub.CoreServices.Messaging.TaxYeCustomerPackageCompletedMessageSubscriber.EventPackageCompletedName"/> events. />
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYeCustomerPackageCompletedMessageSubscriber.EventPackageCompletedName">
            <summary>Event name indicating package request completed subscriber listens to.</summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYeCustomerPackageCompletedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndFileInfoService)">
            <summary>
            Initializes an instance of <see cref="T:TaxHub.CoreServices.Messaging.TaxYeCustomerPackageCompletedMessageSubscriber"/>
            </summary>
            <param name="logger">The application logger.</param>
            <param name="yearEndFileInfoService">The YeFileInfo Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYeCustomerPackageCompletedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Inserts a record to YeFileInfo for the YE Customer package when they are completed.
            </summary>
            <param name="eventName">The Event name.</param>
            <param name="eventData">The Event Data.</param>
            <returns>Returns true when successful, false otherwise.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndProcessInfoCreatedMessageSubscriber">
            <summary>
            Subscriber to Register all Year End business related events.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndProcessInfoCreatedMessageSubscriber.EventName">
            <summary>
            Event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndProcessInfoCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndProcessInfoService)">
            <summary>
            The constructor of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndProcessInfoCreatedMessageSubscriber" /> instance
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="yearEndProcessInfoService">An imlementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndProcessInfoService" /> interface</param>
            <remarks>We do not want to execute retry if we fail registration.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndProcessInfoCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method to consume the 'tax.year-end-process-info-service.requested' event
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndProcessInfoCreatedMessageSubscriber.CreateCommand(System.Collections.Generic.IDictionary{System.String,System.Object},System.Guid)">
            <summary>
            Create a <see cref="T:TaxHub.Models.Commands.YearEndProcessInfoCreateCommand" /> instance from the Dictionary with the event payload.
            </summary>
            <param name="detailsObject">The event payload as Dictionary</param>
            <param name="correlationId">The event data correlation Id</param>
            <returns>A <see cref="T:TaxHub.Models.Commands.YearEndProcessInfoCreateCommand" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndProcessInfoCreatedMessageSubscriber.ValidateEventInfo(System.Collections.Generic.IDictionary{System.String,System.Object},System.Guid)">
            <summary>
            Validates the input of the event payload as Dictioary.
            </summary>
            <param name="detailsObject">The event payload as Dictionary</param>
            <param name="correlationId">The correlation Id</param>
            <returns>True if all validations pass, False if there is at least one failure</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileExportedMessageSubscriber">
            <summary>
            Subscriber for a Year End File being downloaded
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileExportedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileExportedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileExportedMessageSubscriber"/> class.
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="yearEndTaxFileRequestService">The Tax File Request Service</param>
            /// <param name="yearEndTaxFileService">The Tax File Service</param>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearlyVarianceCompletedMessageSubscriber">
            <summary>
            Message Subscriber for <see cref="F:TaxHub.CoreServices.Messaging.TaxYearlyVarianceCompletedMessageSubscriber.EventYvrCompletedName"/> events. />
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearlyVarianceCompletedMessageSubscriber.EventYvrCompletedName">
            <summary>
            Event name indicating the Yearly Variance Report is completed.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearlyVarianceCompletedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndFileInfoService)">
            <summary>
            Initializes an instance of <see cref="T:TaxHub.CoreServices.Messaging.TaxYearlyVarianceCompletedMessageSubscriber"/>
            </summary>
            <param name="logger">The application logger</param>
            <param name="yearEndFileInfoService">The year end FileInfo Service.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearlyVarianceCompletedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Inserts a record to YeFileInfo for the YVR when they are completed.
            </summary>
            <param name="eventName">The Event name.</param>
            <param name="eventData">The Event Data.</param>
            <returns>Returns true when successful, false otherwise.</returns>
            <inheritdoc cref="T:TaxHub.Messaging.ISimpleMessageSubscriber"/>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearlyTaxInstanceServiceParentAggregationRequestedMessageSubscriber">
            <summary>
            Subscriber to handle a YE Parent Aggregation Requested Message
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearlyTaxInstanceServiceParentAggregationRequestedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.IYearlyTaxInstanceService,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileProcessingService,TaxHub.Messaging.IMessageHub,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService)">
            <summary>
            The constructor of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndPostCompletedMessageSubscriber" /> instance
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="yearlyTaxInstanceService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.IYearlyTaxInstanceService" /> interface</param>
            <param name="yearEndTaxFileProcessingService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileProcessingService" /> interface</param>
            <param name="messageHub">An <see cref="T:TaxHub.Messaging.IMessageHub" /> implementation</param>
            <param name="yearEndTaxProcessingService">An <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService" /> implementation</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearlyTaxInstanceServiceParentAggregationRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearlyTaxInstanceParentAggregationRequestedEvent)">
            <summary>
            Method consumes the tax.year-end-post.completed event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">An instance of the deserialized event payload</param>
            <returns>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearlyTaxInstanceServiceParentAggregationRequestedMessageSubscriber.ValidateEventDetails(TaxHub.Models.Events.TaxYearlyTaxInstanceParentAggregationRequestedEvent,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Validates the input <see cref="T:TaxHub.Models.Events.TaxYearEndPostCompletedEvent" /> instance.
            </summary>
            <param name="details">The <see cref="T:TaxHub.Models.Events.TaxYearEndPostCompletedEvent" /> instance to be validated</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <returns>True if all validations pass, False if there is at least one failure</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.year-end-tax-file.created" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService,TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGeneratorFactoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="taxFileService">The tax file service</param>
            <param name="taxFileRequestService">The tax file request service</param>
            <param name="taxFileFactoryService">The tax file generator factory service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.YearEnd.YearEndTaxFile)">
            <summary>
            Method consumes the 'tax.year-end-tax-file.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="taxFile">The tax file instance</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.HandleCompletedRequest(System.Int32,System.Guid)">
            <summary>
            Logs when the year end tax file request was successfully completed.
            </summary>
            <param name="id">The year end tax file request Id.</param>
            <param name="correlationId">The correlation Id.</param>
            <remarks>IMPORTANT: Needed to bind metrics to when request is completed successfully</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.CreateInstanceOfYETaxFileGeneratedCommand(System.Guid,System.String,System.String,TaxHub.Common.Enums.YearEndTaxFileStatus,System.Guid,System.Guid,System.DateTime)">
            <summary>
            Returns a new Instance of a YearEndTaxFileGeneratedCommand
            </summary>
            <param name="fileInfoId">The tax file fileinfoid</param>
            <param name="fileName">The tax file name</param>
            <param name="filePath">The tax file path</param>
            <param name="status">The file status</param>
            <param name="summmaryFileInfoId">The summary fileinfoid</param>
            <param name="exceptionFileInfoId">The exception fileinfoid</param>
            <param name="generatedUtcDt">The UTC generated timestamp </param>
            <returns>Instance of YearEndTaxFileGeneratedCommand</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.LegacyHandleFileGenerationResult(TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGenerator,TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Tuple{TaxHub.Common.Runtime.OperationResult,TaxHub.Models.Dto.YearEndGeneratedTaxFileGroup},System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Handles legacy calls made to non refactored code
            </summary>
            <param name="concreteFileGenerator">The concrete ITaxFileGenerator</param>
            <param name="taxFileRequest">The tax file request</param>
            <param name="fileGenerationResult">The file generation result</param>
            <param name="taxFileId">The Tax File Id</param>
            <param name="correlationId">The Correlation id</param>
            <param name="eventDataParams">The Event data params</param>
            <returns>A Bool with the result of the handling of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.HandleFileGenerationResult(TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGenerator,TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Tuple{TaxHub.Common.Runtime.OperationResult,TaxHub.Models.Dto.YearEndGeneratedTaxFileGroup},System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Handles the File Generation Result, calls the refactored code
            </summary>
            <param name="concreteFileGenerator">The concrete ITaxFileGenerator</param>
            <param name="taxFileRequest">The tax file request</param>
            <param name="fileGenerationResult">The year end file generation result</param>
            <param name="correlationId">The Correlation id</param>
            <param name="eventDataParams">The Event data params</param>
            <returns>A Bool with the result of the handling of the operation</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.CreateInstanceOfTaxFile(System.Int32,System.Guid,TaxHub.Common.Enums.YearEndTaxFileType)">
            <summary>
            Creates a new instance of a Year End Tax File
            </summary>
            <param name="taxFileRequestId">The tax file request id</param>
            <param name="fileInfoId">The FileInfoId</param>
            <param name="fileType">The YearEndTaxFileType</param>
            <returns>A YearEndTaxFile instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.LegacySaveFileGroupToRemoteStorage(TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGenerator,TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Int32,TaxHub.Models.Dto.YearEndGeneratedTaxFileGroup,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Saves the file group to object storage
            </summary>
            <param name="taxFileGenerator">The concrete tax file generator</param>
            <param name="taxFileRequest">The tax file request</param>
            <param name="taxFileId">The tax file id</param>
            <param name="fileGroup">The YearEndTaxFileGroup</param>
            <param name="correlationId">The correlaiton id</param>
            <param name="eventDataParams">The event data params</param>
            <returns>
            Item1 - An Operation result
            item2 - FileInfoId for the main tax file
            Item3 - FileInfoId for the a binary tax file (PDF/Subreports)
            Item4 - FileInfoId for the summary file
            Item5 - FileInfoId for the exception file
            </returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.SaveFileToRemoteStorage(TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGenerator,TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Int32,TaxHub.Common.Enums.YearEndTaxFileType,System.String,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Saves a text file to object storage
            </summary>
            <param name="taxFileGenerator">The tax file generator</param>
            <param name="taxFileRequest">The tax file request</param>
            <param name="taxFileId">The tax file id</param>
            <param name="taxFileType">The tax file type</param>
            <param name="filePath">The file path</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data params</param>
            <returns>A bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.SaveFileToRemoteStorage(TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGenerator,TaxHub.Models.YearEnd.YearEndTaxFileRequest,System.Int32,TaxHub.Common.Enums.YearEndTaxFileType,System.Byte[],System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Saves a binary file to object storage
            </summary>
            <param name="taxFileGenerator">The tax file generator</param>
            <param name="taxFileRequest">The tax file request</param>
            <param name="taxFileId">The tax file id</param>
            <param name="taxFileType">The tax file type</param>
            <param name="fileContents">The file contents</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data params</param>
            <returns>A bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.SaveFileToRemoteStorage(TaxHub.CoreServices.Application.YearEnd.Process.ITaxFileGenerator,TaxHub.Models.YearEnd.YearEndTaxFileRequest,TaxHub.Models.Dto.YearEndGeneratedTaxFile,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Saves a binary file to object storage
            </summary>
            <param name="taxFileGenerator">The tax file generator</param>
            <param name="taxFileRequest">The tax file request</param>
            <param name="taxFile">The generated tax file.</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data params</param>
            <returns>A bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.HandleIgnoredRequest(TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.YearEnd.YearEndTaxFile)">
            <summary>
            Logs when the event is ignored due to unsupported file type
            </summary>
            <param name="eventData">The event data.</param>
            <param name="taxFile">The YE tax file.</param>
            <remarks>IMPORTANT: Needed to bind metrics to when event is ignored.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.HandleFailedRequest(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Marks and process a failed file, try to mark it as failed and
            write to logger and (future) custom log
            </summary>
            <param name="taxFileId">The aggregate id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data params</param>
            <returns>a task</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber.HandleFailedRequest(TaxHub.Models.YearEnd.YearEndTaxFile,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Handles failure for a tax file request
            </summary>
            <param name="taxFile">The tax file</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data params</param>
            <returns>A task</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearlyVarianceReportPersistedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.year-end-variance-report.persisted" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearlyVarianceReportPersistedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearlyVarianceReportPersistedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CommonServices.FileManagement.Application.IFileService,TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearlyVarianceReportPersistedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="fileService">An instance of <see cref="T:TaxHub.CommonServices.FileManagement.Application.IFileService"/></param>
            <param name="fileServiceConfiguration">An instance of <see cref="T:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration"/></param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearlyVarianceReportPersistedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.year-end-variance-report.persisted' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYEProcessingCreatedMessageSubscriber">
            <inheritdoc />
            <summary>
            Class provides subscriber functionality for "tax.ye-processing.created" event.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYEProcessingCreatedMessageSubscriber.YEProcessingCreatedEventName">
            <summary>
            The YEProcessing created event name.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYEProcessingCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEndIngestion.IYEIngestionService,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxClientCreatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="yeIngestionService">Service that handles tenant information</param>
            <param name="metricsBuilder">The application metrics builder</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYEProcessingCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.YearEndIngestion.YEProcessing)">
            <summary>
            Method consumes the 'tax.ye-processing.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">The YEProcessing</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndPostRequestedMessageSubscriber">
            <summary>
            Subscriber to handle a YE post details
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndPostRequestedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRequestedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService)">
            <summary>
            The constructor of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndPostRequestedMessageSubscriber" /> instance
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="yearEndProcessingService">An implementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndTaxProcessingService" /> interface</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearEndPostRequestedEvent)">
            <summary>
            Method consumes the tax.year-end-post.requested event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="typedDetails">An instance of the deserialized event payload</param>
            <returns>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRequestedMessageSubscriber.LogError(System.Guid,System.String,System.Object[])">
            <summary>
            Logs error when Year End failed to post. 
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="properties">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record failures.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRequestedMessageSubscriber.LogError(System.Guid,System.Exception,System.String,System.Object[])">
            <summary>
            Logs error when Year End failed to post. Needed to bind metrics to record.
            </summary>
            <param name="correlationId">The correlation Id.</param>
            <param name="exception">The exception that occured.</param>
            <param name="messageTemplate">The message Template.</param>
            <param name="properties">The list of properties to include in the message.</param>
            <remarks>IMPORTANT: Needed to bind metrics to record failures.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostRequestedMessageSubscriber.ValidateEventDetails(TaxHub.Models.Events.TaxYearEndPostRequestedEvent,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Validates the input <see cref="T:TaxHub.Models.Events.TaxYearEndPostRequestedEvent" /> instance.
            </summary>
            <param name="details">The <see cref="T:TaxHub.Models.Events.TaxYearEndPostRequestedEvent" /> instance to be validated</param>
            <param name="correlatedLogger">The correlated logger.</param>
            <returns>True if all validations pass, False if there is at least one failure</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndPostROCreatedMessageSubscriber">
            <summary>
            Subscriber to handle RO Record duplication and RO Ingestion update with POST RO Info
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndPostROCreatedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostROCreatedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndPostROService,TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService,TaxHub.CoreServices.Application.YearEnd.IYearEndROService)">
            <summary>
            The contructor of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndPostROCreatedMessageSubscriber" /> instance
            </summary>
            <param name="logger">An imlementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="yearEndPostROService">An imlementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostROService" /> interface</param>
            <param name="yearEndPostREService">An imlementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndPostREService" /> interface</param>
            <param name="yearEndROService">An imlementation of the <see cref="T:TaxHub.CoreServices.Application.YearEnd.IYearEndROService" /> interface</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostROCreatedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes the 'tax.year-end-post-ro.created' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostROCreatedMessageSubscriber.CreateCommand(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a <see cref="T:TaxHub.Models.YearEnd.Commands.YearEndPostRODuplicateUpdateCommand" /> instance from the Dictionary with the event payload.
            </summary>
            <param name="detailsObject">The event payload as Dictionary</param>
            <returns>A <see cref="T:TaxHub.Models.YearEnd.Commands.YearEndPostRODuplicateUpdateCommand" /> instance</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndPostROCreatedMessageSubscriber.ValidateEventInfo(System.Collections.Generic.IDictionary{System.String,System.Object},System.Guid)">
            <summary>
            Validates the input of the event payload as Dictioary.
            </summary>
            <param name="detailsObject">The event payload as Dictionary</param>
            <param name="correlationId">The correlation Id</param>
            <returns>True if all validations pass, False if there is at least one failure</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYEProcessingFileIncludedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for "tax.ye-processing.file-included" event.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYEProcessingFileIncludedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEndIngestion.IYEIngestionService,TaxHub.CoreServices.Application.Metrics.IApplicationMetricsBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYEProcessingFileIncludedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="yeIngestionService">Service that handles ye file storage</param>
            <param name="metricsBuilder">The application metrics builder</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYEProcessingFileIncludedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.YearEnd.YEProcessingFileIncludedEvent)">
            <summary>
            Method consumes the 'tax.ye-processing.file-included' event.
            </summary>
            <param name="eventName">The event name</param>
            <param name="eventData">The event data</param>
            <param name="yeProcessingFileIncludedEvent">The YEProcessingFileIncludedEvent</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileGeneratedMessageSubscriber">
            <summary>
            Subscriber to handle a Year End Tax File request tax.year-end-tax-file.generated
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileGeneratedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileGeneratedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileService,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileCreatedMessageSubscriber"/> class.
            </summary>
            <param name="logger">application logger</param>
            <param name="taxFileService">The tax file service</param>
            <param name="taxFileRequestService">The tax file request service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileGeneratedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearEndTaxFileGeneratedEvent)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileGeneratedMessageSubscriber.CalculateTaxFileRequestStatus(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Calcualtes the TaxFileRequestStatus based on the 
            status' of the associated tax files
            </summary>
            <param name="hasGeneratingFiles">Indicates that one or more files are still generating</param>
            <param name="hasSavedFiles">Indicates that one or more files were saved</param>
            <param name="hasSavedWithErrorsFiles">Indicates that one or more files with errors were saved</param>
            <param name="hasFailedFiles">Indicates that one or more files have failed</param>
            <param name="hasUnknownFiles">Indicated that one or more files are in an unknown status</param>
            <returns>The YearEndTAxFileStatus</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileGeneratedMessageSubscriber.HandleFailedRequest(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Marks mark it as failed and
            write to logger and (future) custom log
            </summary>
            <param name="aggregateId">The aggregate id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data params</param>
            <returns>a task</returns>,cd
        </member>
        <member name="T:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileRequestLegacyRequestedMessageSubscriber">
            <summary>
            Subscriber to handle a Year End Tax File request
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileRequestLegacyRequestedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileRequestLegacyRequestedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.CoreServices.Application.YearEnd.IYearEndTaxFileRequestService)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileRequestLegacyRequestedMessageSubscriber"/> class.
            </summary>
            <param name="logger">An implementation of the <see cref="T:TaxHub.Common.Logging.IAppLogger" /> interface</param>
            <param name="yearEndTaxFileRequestService">The Tax File Request Service</param>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileRequestLegacyRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearEndTaxFileRequestLegacyRequestedEvent)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileRequestLegacyRequestedMessageSubscriber.VerifyEventDetails(TaxHub.Common.EventStore.DomainEventData,TaxHub.Models.Events.TaxYearEndTaxFileRequestLegacyRequestedEvent)">
            <summary>
            Verifies the validity of the event details
            </summary>
            <param name="eventData">The event data</param>
            <param name="eventDetails">The event details</param>
            <returns>A flag indicating the validity of the data</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Messaging.TaxYearEndTaxFileRequestLegacyRequestedMessageSubscriber.HandleFailedRequest(System.Int32,System.Guid,TaxHub.Shared.Services.EventDataParams)">
            <summary>
            Marks and process a failed request
            </summary>
            <param name="aggregateId">The aggregate id</param>
            <param name="correlationId">The correlation id</param>
            <param name="eventDataParams">The event data params</param>
            <returns>a task</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Models.YearEnd.YearEndAppliedForValidation">
            <summary>
            Model class for AppliedFor YE Processing validation
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.YearEnd.YearEndAppliedForValidation.ClientId">
            <summary>
            Gets or sets the client id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.YearEnd.YearEndAppliedForValidation.YeAgency">
            <summary>
            Gets or sets the YE Agency.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.YearEnd.YearEndAppliedForValidation.PayeeId">
            <summary>
            Gets or sets the local payee id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.YearEnd.YearEndAppliedForValidation.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.YearEnd.YearEndAppliedForValidation.MiddleName">
            <summary>
            Gets or sets the middle name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.YearEnd.YearEndAppliedForValidation.LastName">
            <summary>
            Gets os sets the last name.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.YearEnd.YearEndAppliedForValidation.SocialSecurityNumber">
            <summary>
            Gets or sets the social security number.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Models.YearEnd.BulkOperationResult`1">
            <summary>
            Represents a Bulk Operation result.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:TaxHub.CoreServices.Models.YearEnd.BulkOperationResult`1.Affected">
            <summary>
            List of items successfully updated.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.YearEnd.BulkOperationResult`1.NotAffected">
            <summary>
            List of items that failed to update.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Models.YearEnd.BulkOperationResult`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.YearEnd.BulkOperationResult`1.ResultCode">
            <summary>
            The operation result code.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Models.Quarterly_Variance_Report.ClientParentChildPhaseModel">
            <summary>
            A model to hold clients and their phase data in a parent child relationship.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.ClientParentChildPhaseModel.ClientId">
            <summary>
            Client Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.ClientParentChildPhaseModel.Phase">
            <summary>
            The phase the client is in.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.ClientParentChildPhaseModel.IsInPhaseList">
            <summary>
            Denotes if the client is in one of the phases it is expected to be in.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.ClientParentChildPhaseModel.IsParent">
            <summary>
            Denotes if the client is Parent or not.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Models.Quarterly_Variance_Report.ClientType">
            <summary>
            Enum for the type of client.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Models.Quarterly_Variance_Report.ClientType.Standard">
            <summary>
            Standard Client
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Models.Quarterly_Variance_Report.ClientType.MultiFein">
            <summary>
            MultiFein Family
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Models.Quarterly_Variance_Report.ClientType.CommonPay">
            <summary>
            CommonPay Family
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand">
            <summary>
            Command to create a Quarterly Variance Report
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand.Id">
            <summary>
            The request Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand.LedgerId">
            <summary>
            The LegerId.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand.ClientId">
            <summary>
            The client Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand.InputUser">
            <summary>
            The User
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand.Year">
            <summary>
            The Year.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand.Quarter">
            <summary>
            The Quarter.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand.TimeZoneName">
            <summary>
            The tenant TimeZoneName
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand.TimeZoneUtcOffset">
            <summary>
            The tenant TimeZone Utc Offset in minutes
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.Commands.QuarterlyVarianceReportCreateCommand.AutoGenerateFamilyMembers">
            <summary>
            CP / MF family generation
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyLedger">
            <summary>
            A close ledger instance
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyLedger.InitializeNew(TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyLedger)">
            <summary>
            Initializes default values for the <see cref="T:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyLedger"/>
            </summary>
            <param name="ledger">The Quarterly ledger model</param>
            <returns>The new model.</returns>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyLedger.ClientId">
            <summary>
            The ClientId.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyLedger.Year">
            <summary>
            The Year
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyLedger.Quarter">
            <summary>
            The Quarter
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyLedger.Status">
            <summary>
            The status
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyLedger.InputUser">
            <summary>
            The User
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyLedger.ModifyUser">
            <summary>
            The update user
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest">
            <summary>
            A QVR instance
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.InitializeNew(TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest)">
            <summary>
            Initializes default values for the <see cref="T:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest"/>
            </summary>
            <param name="varianceReportRequestRequest">The Quarterly variance report model</param>
            <returns>The new model.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.IsCompleted">
            <summary>
            check if status is completed or failed
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.IsInProgress">
            <summary>
            check if status is InProgress or Persisted
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.MarkFailed">
            <summary>
            Sets the status to failed.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.MarkCompleted(System.Guid)">
            <summary>
            Sets the status to completed.
            </summary>
            <param name="fileInfoId">The file info id for the generated report.</param>
        </member>
        <member name="M:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.MarkInProgress">
            <summary>
            Sets the status to in progress.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.SetStatus(TaxHub.Common.Enums.Quarterly_Variance_Report.QuarterlyVarianceReportStatus)">
            <summary>
            Sets the status to the <paramref name="newStatus"/>
            </summary>
            <param name="newStatus">The new status.</param>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.ClientId">
            <summary>
            The ClientId.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.LedgerId">
            <summary>
            The LegerId.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.Year">
            <summary>
            The Year
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.Quarter">
            <summary>
            The Quarter
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.InputUser">
            <summary>
            The User
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.FileInfoId">
            <summary>
            The FileInfoId
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.Status">
            <summary>
            The QVR status
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.ConcurrencyKey">
            <summary>
            Key to prevent multiple requests to be scheduled concurrently
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportRequest.CompletedUtcDt">
            <summary>
            Timestamp of when the QVR was completed.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportUpdatedEvent">
            <summary>
            The tax.client-payroll.client-updated event details.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportUpdatedEvent.EventName">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportUpdatedEvent.Status">
            <summary>
            The Status of the aggregate.
            </summary>
            <value>
            The Client Id.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportUpdatedEvent.FileInfoId">
            <summary>
            The FileInfoId
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportUpdatedEvent.CompletedUtcDt">
            <summary>
            Timestamp of when the QVR was completed.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QvrGenerationClientList.CanGenerateQvr">
            <summary>
            Determines if a QVR should be generated for the client set.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QvrGenerationClientList.IneligibleClients">
            <summary>
            A list of clients in an incorrect state for QVR generation.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QvrGenerationClientList.EligibleClients">
            <summary>
            A list of clients in the correct state for QVR generation.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QvrGenerationClientList.ClientType">
            <summary>
            The type of client.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportServiceSelfHealingIssueTypes">
            <summary>
            An enum denoting the type of issue found
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportServiceSelfHealingIssueTypes.FailedEventReplay">
            <summary>
            A FailedToConsume event
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Models.Quarterly_Variance_Report.QuarterlyVarianceReportServiceSelfHealingIssueTypes.StuckQvrRequestFail">
            <summary>
            Requests stuck in an active state for a long period of time.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.CoreServicesApiStartup">
            <summary>
            Class provides an integration point between the Api services and its TaxHub Apphost.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.CoreServicesApiStartup.Description">
            <summary>
            Gets the description of the service.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.CoreServicesApiStartup.ConfigurationFileName">
            <summary>
            Gets the configuration file name.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesApiStartup.GetApiEndpointsScope">
            <summary>
            Get the api endpoints scope
            </summary>
            <returns>List of assemblies that represents the api endpoint scope.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesApiStartup.StartInternalServicesAsync(Microsoft.Practices.Unity.IUnityContainer,System.Threading.CancellationToken)">
            <summary>
            Called by App Host to asynchronously start internal services for the application.
            </summary>
            <remarks>Only StartInternalServices or StartInternalServicesAsync method should actually do the work, not both.</remarks>
            <param name="container">The Unity Container</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns async task.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesApiStartup.InitializeMessageSubscribers(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initialize all event subscribers
            </summary>
            <param name="container">Unity container</param>
        </member>
        <member name="T:TaxHub.CoreServices.CoreServicesStartupBase">
            <summary>
            Base class for service startup classes.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.CoreServicesStartupBase.Description">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.CoreServices.CoreServicesStartupBase.ConfigurationFileName">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesStartupBase.InitializeUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesStartupBase.InitializeEventStoreUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesStartupBase.CoreServicesInitializeUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initialize unity container
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesStartupBase.ResolveUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesStartupBase.StartInternalServices(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesStartupBase.StartInternalServicesAsync(Microsoft.Practices.Unity.IUnityContainer,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesStartupBase.StopApplication(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesStartupBase.GetApiEndpointsScope">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesStartupBase.InitializeMessageSubscribers(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CoreServices.CoreServicesDepStartup">
            <summary>
            This class is responsible for starting up the DEP (Distributed Event Processing)
            services as a ISmartApplication as part of the TaxHub Apphost.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.CoreServicesDepStartup.ConfigurationFileName">
            <summary>
            Gets the configuration file name.
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesDepStartup.InitializeMessageSubscribers(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initialize all event subscribers
            </summary>
            <param name="container">Unity container</param>
        </member>
        <member name="M:TaxHub.CoreServices.CoreServicesDepStartup.StartInternalServicesAsync(Microsoft.Practices.Unity.IUnityContainer,System.Threading.CancellationToken)">
            <summary>
            Called by App Host to asynchronously start internal services for the application.
            </summary>
            <remarks>Only StartInternalServices or StartInternalServicesAsync method should actually do the work, not both.</remarks>
            <param name="container">The Unity Container</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns async task.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.Events.TaxClientServicePayrollUnitsSyncCompletedEvent">
            <summary>
            The tax.client-service.payrollunits-sync-completed event details.
            </summary>
        </member>
        <member name="F:TaxHub.CoreServices.Events.TaxQuarterlyVarianceReportRequestedEvent.EventName">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Events.TaxQuarterlyVarianceReportRequestedEvent.LedgerId">
            <summary>
            The LegerId.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Events.TaxQuarterlyVarianceReportRequestedEvent.ClientId">
            <summary>
            The Client Id
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Events.TaxQuarterlyVarianceReportRequestedEvent.Year">
            <summary>
            The Year.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Events.TaxQuarterlyVarianceReportRequestedEvent.Quarter">
            <summary>
            The Quarter.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Events.TaxQuarterlyVarianceReportRequestedEvent.FileInfoId">
            <summary>
            The FileInfoId.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Events.TaxQuarterlyVarianceReportRequestedEvent.TimeZoneName">
            <summary>
            The tenant TimeZoneName
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Events.TaxQuarterlyVarianceReportRequestedEvent.TimeZoneUtcOffset">
            <summary>
            The tenant TimeZone Utc Offset in minutes
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.Events.TaxQuarterlyVarianceReportRequestedEvent.AutoGenerateFamilyMembers">
            <summary>
            If <value>true</value> it will auto generate all clients part of the relationship if Common Pay, and only the parent if the specified <see cref="P:TaxHub.CoreServices.Events.TaxQuarterlyVarianceReportRequestedEvent.LedgerId"/> belongs to a child. This flag has no effect on a standard client.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Events.TaxCompanyServiceCompaniesSyncCompletedEvent">
            <summary>
            The tax.company-service.companies-sync-completed event details.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Events.TaxTenantServiceTenantSyncCompletedEvent">
            <summary>
            The tax.tenant-service.tenant-sync-completed event details.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.Events.Quarterly_Variance_Report.QuarterlyVarianceReportSelfHealEvent">
            <summary>
            The tax.quarterly-variance-report.self-heal event details.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.ServiceMocks.MockSmartHubTenantController">
            <summary>
            Dummy local controller to replace Smarthub calls in functional tests
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.ServiceMocks.MockSmartHubTenantController.Get(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns specific tenant by its tenantId.
            </summary>
            <param name="tenantId">The tenantId (GUID).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns the HTTP message with tenant data.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.ServiceMocks.TenantBankAccountDefaults">
            <summary>
            TenantBankAccountDefaults class that is used by the adapter in PTM
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.ServiceMocks.TenantBankingData">
            <summary>
            Banking data stored within a tenant
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.UsgBankAccountId">
            <summary>
            Gets or sets the tenant's default collection USG bank account Id.
            </summary>
            <value>
            The usg bank account identifier.
            </value>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.UsgTaxCollectionBankAccountId">
            <summary>
            Gets or sets the tenant's default tax collection USG bank account Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.UsgGarnishmentsCollectionBankAccountId">
            <summary>
            Gets or sets the tenant's default garnishments collection USG bank account Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.UsgDdDisbursementBankAccountId">
            <summary>
            Gets or sets the tenant's direct deposit disbursement USG bank account Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.UsgTaxEftDisbursementBankAccountId">
            <summary>
            Gets or sets the tenant's tax direct deposit disbursement USG bank account Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.UsgGarnishmentsEftDisbursementBankAccountId">
            <summary>
            Gets or sets the tenant's garnishment direct deposit disbursement USG bank account Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.UsgCheckDisbursementBankAccountId">
            <summary>
            Gets or sets the tenant's check disbursement USG bank account Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.UsgTaxCheckDisbursementBankAccountId">
            <summary>
            Gets or sets the tenant's tax check disbursement USG bank account Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.UsgGarnishmentsCheckDisbursementBankAccountId">
            <summary>
            Gets or sets the tenant's garnishments check disbursement USG bank account Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.CustomerBankAccountId">
            <summary>
            Gets or sets the tenant's default customer bank account Id.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.CustomerTaxBankAccountId">
            <summary>
            Gets or sets the tenant's default customer tax bank account Id.
            This is the account that we collect tax funds from.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.CustomerGarnishmentsBankAccountId">
            <summary>
            Gets or sets the tenant's default customer garnishment bank account Id.
            This is the account that we collect tax funds from.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.DefaultPaymentMethod">
            <summary>
            Gets or sets the default payment method used to send money from the customer bank to the USG bank for Employee Pay.
            </summary>
        </member>
        <member name="P:TaxHub.CoreServices.ServiceMocks.TenantBankingData.NetPayDraftDays">
            <summary>
            Gets or sets the default value of the draft days for the Netpay product: must be between 0 and 5. 
            This draft days determine the Collection Due Date based on the Pay Date.
            </summary>
        </member>
        <member name="T:TaxHub.CoreServices.ServiceMocks.MockSmartHubUsgBankController">
            <summary>
            Dummy local controller to replace Smarthub calls in functional tests
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.ServiceMocks.MockSmartHubUsgBankController.GetActiveAccountsWithPurpose(TaxHub.Models.BankAccountPurpose,System.Threading.CancellationToken)">
            <summary>
            Method returns all active USG bank accounts with the given purpose.
            </summary>
            <param name="purpose">The purpose to filter by.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All active USG bank account with the given purpose.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.ServiceMocks.MockSmartHubUsgBankController.Get(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns specific usg bank account by its id.
            </summary>
            <param name="bankId">The bank aggregate id (GUID).</param>
            <param name="bankAccountId">The bank account aggregate id (GUID).</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns the HTTP message with UsgBankAccount data.</returns>
            <response code="200">Success.</response>
            <response code="401">Authentication or application-level authorization failed.</response>
            <response code="403">Service-specific authorization failed.</response>
            <response code="404">The pay not found.</response>
        </member>
        <member name="M:TaxHub.CoreServices.ServiceMocks.MockSmartHubUsgBankController.GetBankIdByAccountId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the bank identifier by account identifier.
            </summary>
            <param name="bankAccountId">The bank account identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The BankId of the bank for this bank account.</returns>
        </member>
        <member name="M:TaxHub.CoreServices.ServiceMocks.MockSmartHubUsgBankController.Get(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns specific usg bank by its id.
            </summary>
            <param name="bankId">The bank aggregate id (GUID).</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the HTTP message with UsgBank data.</returns>
        </member>
        <member name="T:TaxHub.CoreServices.FSET.IA.AcknowledgmentService.AckResponseType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.FSET.IA.AcknowledgmentService.AckResponseType.AckResponseDetails">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.FSET.IA.SecureFileTransfer.WageResponseType">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.FSET.IA.SecureFileTransfer.WageResponseType.Status">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.FSET.IA.SecureFileTransfer.WageResponseType.ErrorID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.FSET.IA.SecureFileTransfer.WageResponseType.ErrorCode">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.FSET.IA.SecureFileTransfer.WageResponseType.ErrorMessage">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.FSET.IA.SecureFileTransfer.WageResponseType.TransmissionID">
            <remarks/>
        </member>
        <member name="P:TaxHub.CoreServices.FSET.IA.SecureFileTransfer.WageResponseType.TimeStamp">
            <remarks/>
        </member>
        <member name="T:TaxHub.CoreServices.SessionLockService">
            <summary>
            SessionLockService
            </summary>
        </member>
        <member name="M:TaxHub.CoreServices.SessionLockService.#ctor(TaxHub.CoreServices.DataAccess.ISessionLockRepository,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes the intance of SessionLockService class
            </summary>
            <param name="repository">repository</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:TaxHub.CoreServices.SessionLockService.ClearSessionLock(System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
    </members>
</doc>
