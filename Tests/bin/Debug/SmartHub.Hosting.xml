<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartHub.Hosting</name>
    </assembly>
    <members>
        <member name="T:SmartHub.Hosting.Annotations.EncryptedAttribute">
            <summary>
            The attributes denotes an property of a class encrypted at rest. This attribute is used specifically by event json schema generator.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AssemblyServiceDeclarationAttribute">
            <summary>
            The assembly attribute provides name of the service implemented by the assembly, and the name of team owner of this service. 
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Annotations.AssemblyServiceDeclarationAttribute.ServiceName">
            <summary>
            Gets or sets the service name implemented by assembly.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Annotations.AssemblyServiceDeclarationAttribute.TeamOwner">
            <summary>
            Gets or sets the team owning the service implementation.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.ObsoleteOnDateAttribute">
            <summary>
            The attributes denotes an obsolete property of a class. 
            This attribute differentiates from<see cref="T:System.ObsoleteAttribute"/> by providing the obsolete date in addition to the message.
             This attribute is used specifically by event json schema generator.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Annotations.ObsoleteOnDateAttribute.Message">
            <summary>
            Gets or sets the message explaining the reason for an element become obsolete.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Annotations.ObsoleteOnDateAttribute.OnDate">
            <summary>
            Gets or sets a date when an element becomes obsolete. 
            The datetime type if not supported as an attribute parameter, therefore the string type is used for this value. 
            The parameter must be either an empty string or valid date represented as a string, eg. 02/01/2018.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:SmartHub.Hosting.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:SmartHub.Hosting.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:SmartHub.Hosting.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:SmartHub.Hosting.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:SmartHub.Hosting.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:SmartHub.Hosting.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:SmartHub.Hosting.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:SmartHub.Hosting.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:SmartHub.Hosting.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:SmartHub.Hosting.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:SmartHub.Hosting.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:SmartHub.Hosting.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:SmartHub.Hosting.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:SmartHub.Hosting.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:SmartHub.Hosting.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:SmartHub.Hosting.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:SmartHub.Hosting.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:SmartHub.Hosting.Annotations.ValidatedNotNullAttribute">
            <summary>
            Used to tell code analysis that the parameter this is applied to is validated to
            not be null.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.CacheControl.ICacheControlPolicyFactory.CacheControlHeaderValue">
            <summary>
            Gets the cache control header value.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.CacheControl.SensitiveDataCacheControlPolicyFactory">
            <summary>
            Sensitive data cache-control policy factory. This is used by default in our app. To override use the AllowCachingCacheControlPolicy
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.CacheControl.SensitiveDataCacheControlPolicyFactory.CacheControlHeaderValue">
            <summary>
            Gets the cache control header value.
            </summary>
            <value>
            The cache control header value.
            </value>
        </member>
        <member name="T:SmartHub.Hosting.CacheControl.AllowCachingCacheControlPolicyFactory">
            <summary>
            Cache-control policy factory to explicity override the sensitive cache control policy
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.CacheControl.AllowCachingCacheControlPolicyFactory.CacheControlHeaderValue">
            <summary>
            Gets the cache control header value.
            </summary>
            <value>
            The cache control header value.
            </value>
        </member>
        <member name="T:SmartHub.Hosting.Extensions.IEnumerableExtensions">
            <summary>
            A class containing extensions for IEnumerable
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Extensions.IListExtensions">
            <summary>
            Provides extension methods to IList.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            In place shuffles the IList using a Fisher-Yates shuffle.
            </summary>
            <param name="list">The list to shuffle.</param>
            <returns>A reference to the list that was shuffled.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.HttpClientExtensions.EnsureCorrelationId(System.Net.Http.HttpClient,System.Guid)">
            <summary>
            Ensures provided correlation ID being added to the any HTTP request sent by given HTTP client. 
            </summary>
            <remarks>An empty correlation ID will be ignored.</remarks>
            <param name="client">HttpClient object.</param>
            <param name="correlationId">The correlation ID.</param>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.HttpClientExtensions.EnsureCorrelationId(System.Net.Http.HttpClient,System.Guid,System.String)">
            <summary>
            Ensures provided correlation ID being added to the any HTTP request sent by given HTTP client. 
            </summary>
            <remarks>An empty correlation ID will be ignored.</remarks>
            <param name="client">HttpClient object.</param>
            <param name="correlationId">The correlation ID.</param>
            <param name="format">The format should be used to output the correlation ID.</param>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.DictionaryExtensions.AddConditionally``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Predicate{``1})">
            <summary>
            Adds the value to the dictionary if value passes the passed in predicate
            </summary>
            <param name="dictionary">The dictionary</param>
            <param name="key">The key to add to the dictionary</param>
            <param name="value">The value to add to the dictionary</param>
            <param name="predicate">The function to evaluate if the key and value should be added.</param>
            <returns>True if the value was added to the dictionary</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.DictionaryExtensions.AddConditionally``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Func{``0,``1,System.Boolean})">
            <summary>
            Adds the value to the dictionary if the passed in func evaluates to true based on the key and value
            </summary>
            <param name="dictionary">The dictionary</param>
            <param name="key">The key to add to the dictionary</param>
            <param name="value">The value to add to the dictionary</param>
            <param name="predicate">The function to evaluate if the key and value should be added.</param>
            <returns>True if the value was added to the dictionary</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            If dictionary has key, returns value. Returns default otherwise.
            </summary>
            <typeparam name="TKey">Type of Key</typeparam>
            <typeparam name="TValue">Type of Value</typeparam>
            <param name="dictionary">Dictionary</param>
            <param name="key">Key</param>
            <param name="defaultValue">Default to return if key has no value.</param>
            <returns>Value of key or default</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.DictionaryExtensions.ContainsMatchingValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1,System.Boolean})">
            <summary>
            Indicates if dictionary has a value matching predicate at key.
            </summary>
            <typeparam name="TKey">Type of Key</typeparam>
            <typeparam name="TValue">Type of Value</typeparam>
            <param name="dictionary">Dictionary</param>
            <param name="key">Key</param>
            <param name="predicate">Check for value at key</param>
            <returns>bool</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.ExpandoObjectExtensions.Map``1(System.Dynamic.ExpandoObject)">
            <summary>
            Method maps <see cref="T:System.Dynamic.ExpandoObject"/> to a custom type.
            </summary>
            <typeparam name="T">Custom type</typeparam>
            <param name="source">The <see cref="T:System.Dynamic.ExpandoObject"/></param>
            <returns>Returns instance of type T</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.ExpandoObjectExtensions.Map``1(System.Dynamic.ExpandoObject,``0)">
            <summary>
            Method maps <see cref="T:System.Dynamic.ExpandoObject"/> to a custom type.
            </summary>
            <typeparam name="T">Custom type</typeparam>
            <param name="source">The <see cref="T:System.Dynamic.ExpandoObject"/></param>
            <param name="destination">An instance to map to.</param>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.GuidExtensions.ToBankReferenceNumber(System.Guid)">
            <summary>
            Converts a guid to a bank reference number, alphanumeric string without -.
            </summary>
            <param name="guid">The guid.</param>
            <returns>A bank reference number string.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.GuidExtensions.ToDashlessObjectId(System.Guid)">
            <summary>
            Converts a guid to a object id without any dashes. It accomplishes this by removing the first 8 numbers of the guid.
            If it is not an object Id, it will return a dashless guid.
            </summary>
            <param name="guid">The guid</param>
            <returns>A dashless object id string.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.GuidExtensions.ToObjectId(System.Guid)">
            <summary>
            Converts a guid to a object id with dashes. It accomplishes this by removing the first 9 characters (8 numbers and 1 dash) of the guid.
            If it is not an object Id, it will return a dashed guid string..
            </summary>
            <param name="guid">The guid</param>
            <returns>A dashless object id string.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.GuidExtensions.ToUuid16(System.Guid)">
            <summary>
            Converts to a 16 digit UUID.
            </summary>
            <param name="guid">The guid to create a 16 digit ID from</param>
            <returns>Returns a string representing a 16 digit UUID</returns>
            <remarks>Note, this is a much smaller space than represented by a GUID, but needed for some cases where the max is 16.</remarks>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.GuidExtensions.GetUlongFromFullGuidBytes(System.Byte[])">
            <summary>
            Method to map 16 bytes from GUID into 8 bytes to generate smaller key
            </summary>
            <param name="guidBytes">the guid bytes</param>
            <returns>an ulong that contains the information from the original bytes loss compressed</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.GuidExtensions.GetUlongFromObjectIdGuidBytes(System.Byte[])">
            <summary>
            Method to build 8 bytes unsigned long from the original bytes objectId
            </summary>
            <param name="guidBytes">the guid bytes</param>
            <returns>an ulong containing compress information from guid bytes</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.GuidExtensions.IsFullGuid(System.Byte[])">
            <summary>
            Method to know if a guid was generated from objectID or from Guid.NewGuid
            </summary>
            <param name="guidBytes">the bytes from the Guid</param>
            <returns>returns true if the guid has the first 4 bytes as 0 (probably from objectId)</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.GuidExtensions.ToUuid15(System.Guid)">
            <summary>
            Converts to a 15 digits alphanumeric character.
            
            For data content, the characters allowed are: 
            Uppercase Latin(unaccented) letters A through Z 
            Lowercase Latin(unaccented) letters a through z 
            Digits 0 through 9 
            Punctuation characters &amp; ' * @ : , $ = ! ` > - ( &lt; | # % . + ? " ) ; / _  
            </summary>
            <param name="guid">The guid to create a 15 digits alphanumeric character from</param>
            <returns>Returns a string representing a 15 digits alphanumeric character</returns>
            <remarks>Note, this is a much smaller (36^15) space than represented by a GUID (2^128), but needed for some cases where the max is 15.</remarks>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.IntExtensions.ToNextPowerOfTwo(System.Int32)">
            <summary>
            Round up n to nearest power of two.
            </summary>
            <param name="n">The number to round up to nearest power of two.</param>
            <returns>The nearest power of two.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.StringExtensions.ToMasked(System.String,System.Int32,System.Int32,System.Char)">
            <summary>
            Provides masked string for display or storage purposes.
            </summary>
            <param name="str">The string to mask.</param>
            <param name="keep">The number of characters from the end of the string to keep.</param>
            <param name="total">The total number of characters the masked result should have (inlcuding the *s).</param>
            <param name="character">The character to mask with</param>
            <returns>
            Returns string.
            </returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.ApiControllerExtensions.GetCorrelationId(System.Web.Http.ApiController)">
            <summary>
            Retrieves the System.Guid that has been assigned as the correlation ID associated with given request.
            </summary>
            <param name="controller">Given ApiController object.</param>
            <returns>Returns System.Guid.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.HttpRequestMessageExtensions.GetClientCorrelationId(System.Net.Http.HttpRequestMessage)">
            <summary>
            Retrieves the System.Guid that has been assigned as the correlation ID associated with given request by the client side. 
            The value will be returned if client assigned the ID, otherwise the Guid.Empty value will be returned.
            </summary>
            <param name="request">Given HttpRequestMessage object.</param>
            <returns>Returns System.Guid.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.HttpRequestMessageExtensions.GetRequestUriStringWithTrailingSlash(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the request URI string with trailing slash.
            </summary>
            <param name="request">The request.</param>
            <returns>A string representation of the request uri with a trailing slash.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.HttpRequestMessageExtensions.EnsureCorrelationId(System.Net.Http.HttpRequestMessage,System.Guid)">
            <summary>
            Ensures provided correlation ID being added to the HTTP request. 
            </summary>
            <remarks>An empty correlation ID will be ignored.</remarks>
            <param name="request">HttpRequestMessage object.</param>
            <param name="correlationId">The correlation ID.</param>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.HttpRequestMessageExtensions.EnsureCorrelationId(System.Net.Http.HttpRequestMessage,System.Guid,System.String)">
            <summary>
            Ensures provided correlation ID being added to the HTTP request. 
            </summary>
            <remarks>An empty correlation ID will be ignored.</remarks>
            <param name="request">HttpRequestMessage object.</param>
            <param name="correlationId">The correlation ID.</param>
            <param name="format">The format should be used to output the correlation ID.</param>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.HttpResponseMessageExtensions.AddCreatedLocation(System.Net.Http.HttpResponseMessage,System.Guid)">
            <summary>
            Method adds the Location header to the HTTP response that is required when new entity created (201 HTTP status).
            </summary>
            <param name="response">The HTTP response message object.</param>
            <param name="newId">The ID of the new entity.</param>
            <returns>Returns the HTTP response itself.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.HttpResponseMessageExtensions.AddCreatedLocation(System.Net.Http.HttpResponseMessage,System.String)">
            <summary>
            Method adds the Location header to the HTTP response that is required when new entity created (201 HTTP status).
            </summary>
            <param name="response">The HTTP response message object.</param>
            <param name="newId">The ID of the new entity.</param>
            <returns>Returns the HTTP response itself.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.HttpResponseMessageExtensions.GetLocationUri(System.Net.Http.HttpResponseMessage,System.String)">
            <summary>
            Gets the location URI.
            </summary>
            <param name="response">The response.</param>
            <param name="newId">The new identifier.</param>
            <returns>The location uri string.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.HttpResponseMessageExtensions.AddWarning(System.Net.Http.HttpResponseMessage,System.String)">
            <summary>
            Method adds the Warning header to the HTTP response.
            </summary>
            <param name="response">The HTTP response message object.</param>
            <param name="message">The warning message.</param>
            <returns>Returns the HTTP response itself.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Extensions.HttpResponseMessageExtensions.EnsureThrottlingSuccess(System.Net.Http.HttpResponseMessage)">
            <summary>
            Method ensures that request has not been throttled by the server. It throws <see cref="T:SmartHub.Hosting.Exceptions.HttpThrottlingException"/> if server responded with 429 status (TooManyRequests).
            </summary>
            <param name="response">The HTTP response message object.</param>
            <remarks>Method processes the Retry-After header if it was supplied, and includes into the exception.</remarks>
        </member>
        <member name="M:SmartHub.Hosting.Filters.HttpCacheControlAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartHub.Hosting.Filters.HttpCacheControlAttribute"/> class.
            Default constructor has no cache policy.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Filters.HttpCacheControlAttribute.#ctor(System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartHub.Hosting.Filters.HttpCacheControlAttribute"/> class.
            </summary>
            <param name="isPrivate">if set to <c>true</c> will include private in Cache-Control header.</param>
            <param name="maxAgeInSeconds">The maximum age in seconds.</param>
            <param name="mustRevalidate">if set to <c>true</c> will include must-revalidate in Cache-Control header.</param>
            <param name="noCache">if set to <c>true</c> will include no-cache in Cache-Control header.</param>
            <param name="noTransform">if set to <c>true</c> will include no-transform in Cache-Control header.</param>
            <param name="nostore">if set to <c>true</c> will include no-store in Cache-Control header.</param>
        </member>
        <member name="M:SmartHub.Hosting.Filters.HttpCacheControlAttribute.#ctor(System.Type)">
            <summary>
            Uses a factory type to provide the value.
            This type can read from config, etc.
            Must have a public parameterless method that return CacheControlHeaderValue
            </summary>
            <param name="cacheControlHeaderValueFactory">The type of the factory. 
            Any public method that returns CacheControlHeaderValue will be used.
            Type's constructor must be parameterless</param>
        </member>
        <member name="M:SmartHub.Hosting.Filters.HttpCacheControlAttribute.#ctor(SmartHub.Hosting.CacheControl.ICacheControlPolicyFactory)">
            <summary>
            Constructs the cache control given an ICacheControlPolicyFactory
            </summary>
            <param name="factory">The factory to create the cache control from</param>
        </member>
        <member name="T:SmartHub.Hosting.Filters.ConflictWhenBusinessRuleExceptionAttribute">
            <summary>
            This class provides an API controller method attribute that ensures Conflict 409 HTTP status being set when BusinessRuleException has occurred.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Filters.LinkHeaderHandler">
            <summary>
            Class provides custom link header functionality to the Web Api pipeline.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Filters.ForbiddenWhenAuthorizationExceptionAttribute">
            <summary>
            This class provides an API controller method attribute that ensures Forbidden HTTP status being set when AuthorizationException has occurred.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Filters.ValidateModelAttribute">
            <summary>
            This class provides an API controller method attribute that enables model validation as pre-requisite for the method.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Caching.CacheUtilizerServiceBase.#ctor(System.Int32,SmartHub.Hosting.Caching.IObjectCacheManager)">
            <summary>
            Initialize service.
            </summary>
            <param name="cacheDurationSeconds">Cache duration in seconds.</param>
            <param name="cacheManager">Cache manager.</param>
        </member>
        <member name="M:SmartHub.Hosting.Caching.CacheUtilizerServiceBase.GetCacheStatus">
            <summary>
            Method returns quick status snapshot of the cache instance.
            </summary>
            <returns>Returns a dynamic type containing the cache instance Name and Count of items within it.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.CacheUtilizerServiceBase.Dispose">
            <summary>
            Method disposes any resources used by the class.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Caching.ICacheUtilizer">
            <summary>
            The interface that should be implemented by the class utilizing the memory cache. 
            This interface allows resource monitoring within the application.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ICacheUtilizer.GetCacheStatus">
            <summary>
            Method returns quick status snapshot of the cache instance.
            </summary>
            <returns>Returns a dynamic type containing the cache instance Name, Duration (sec), and Count of items within it.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ICacheUtilizer.ClearCache">
            <summary>
            Method clears cache instance.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Caching.IObjectCacheManager">
            <summary>
            Interface implemented by object cache manager.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Caching.IObjectCacheManager.GetInstance(System.String)">
            <summary>
            Methods returns a named instance of <see cref="T:SmartHub.Hosting.Caching.ISystemObjectCache"/>. If instance does not exists, it will be created.
            </summary>
            <param name="name">Instance name.</param>
            <returns>Returns an instance of <see cref="T:SmartHub.Hosting.Caching.ISystemObjectCache"/>.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.IObjectCacheManager.ClearAll">
            <summary>
            Method clears all caches.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Caching.IObjectCacheManager.ClearItem(System.String,System.String)">
            <summary>
            Method clears an item by its key at specified cache instance.
            </summary>
            <param name="instanceName">The cache instance name.</param>
            <param name="key">The item key to clear.</param>
        </member>
        <member name="M:SmartHub.Hosting.Caching.IObjectCacheManager.ClearItem(System.String,System.String[])">
            <summary>
            Method clears an item by its key at specified cache instance.
            </summary>
            <param name="instanceName">The cache instance name.</param>
            <param name="keys">The item keys to clear.</param>
        </member>
        <member name="M:SmartHub.Hosting.Caching.IObjectCacheManager.ClearCacheInstance(System.String)">
            <summary>
            Method clears all items from a specific cache instance.
            </summary>
            <param name="instanceName">The name of the cache instance to clear.</param>
        </member>
        <member name="T:SmartHub.Hosting.Caching.ObjectCacheManager">
            <summary>
            The object cache manager.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ObjectCacheManager.GetInstance(System.String)">
            <summary>
            Methods returns a named instance of <see cref="T:SmartHub.Hosting.Caching.ISystemObjectCache"/>. If instance does not exists, it will be created.
            </summary>
            <param name="name">Instance name.</param>
            <returns>Returns an instance of <see cref="T:SmartHub.Hosting.Caching.ISystemObjectCache"/>.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ObjectCacheManager.ClearAll">
            <summary>
            Method clears all caches.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ObjectCacheManager.ClearCacheInstance(System.String)">
            <summary>
            Method clears all items from a specific cache instance.
            </summary>
            <param name="instanceName">The name of the cache instance to clear.</param>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ObjectCacheManager.ClearItem(System.String,System.String)">
            <summary>
            Method clears an item by its key at specified cache instance.
            </summary>
            <param name="instanceName">The cache instance name.</param>
            <param name="key">The item key to clear.</param>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ObjectCacheManager.ClearItem(System.String,System.String[])">
            <summary>
            Method clears an item by its key at specified cache instance.
            </summary>
            <param name="instanceName">The cache instance name.</param>
            <param name="keys">The item keys to clear.</param>
        </member>
        <member name="T:SmartHub.Hosting.Caching.ISystemObjectCache">
            <summary>
            Represents an object cache and provides the base methods and properties for accessing the object cache.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Caching.ISystemObjectCache.DefaultCacheCapabilities">
            <summary>
            Gets a description of the features that a cache implementation provides.
            </summary>
            <returns>A bitwise combination of flags that indicate the default capabilities of a cache implementation.</returns>
        </member>
        <member name="P:SmartHub.Hosting.Caching.ISystemObjectCache.Name">
            <summary>
            Gets the name of a specific System.Runtime.Caching.ObjectCache instance.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Caching.ISystemObjectCache.Item(System.String)">
            <summary>
            Gets or sets the default indexer for the System.Runtime.Caching.ObjectCache class.
            </summary>
            <param name="key">A unique identifier for a cache entry in the cache.</param>
            <returns>A key that serves as an indexer into the cache instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            When overridden in a derived class, creates a System.Runtime.Caching.CacheEntryChangeMonitor object 
            that can trigger events in response to changes to specified cache entries.
            </summary>
            <param name="keys">The unique identifiers for cache entries to monitor.</param>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>A change monitor that monitors cache entries in the cache.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.Contains(System.String,System.String)">
            <summary>Checks whether the cache entry already exists in the cache.</summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="regionName"> Optional. A named region in the cache where the cache can be found, if regions are implemented. The default value for the optional parameter is null. </param>
            <returns>true if the cache contains a cache entry with the same key value as key; otherwise, false.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.Add(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Inserts a cache entry into the cache without overwriting any existing cache entry.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire. This parameter is required when the Overload:System.Runtime.Caching.ObjectCache.Add method is called.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>true if insertion succeeded, or false if there is an already an entry in the cache that has the same key as key.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.Add(System.String,System.Object,System.TimeSpan,System.String)">
            <summary>
            Inserts a cache entry into the cache without overwriting any existing cache entry.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="slidingExpiration">The time span used to evict the cache entry.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>true if insertion succeeded, or false if there is an already an entry in the cache that has the same key as key.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Tries to insert a cache entry into the cache as a System.Runtime.Caching.CacheItem instance, and adds details about how the entry should be evicted.
            </summary>
            <param name="item">The object to add.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <returns>true if insertion succeeded, or false if there is an already an entry in the cache that has the same key as item.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.Add(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Inserts a cache entry into the cache, specifying information about how the entry will be evicted.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>true if the insertion try succeeds, or false if there is an already an entry in the cache with the same key as key.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Inserts a cache entry into the cache, by using a key, an object for the cache entry, an absolute expiration value, and an optional region to add the cache into.</summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>If a cache entry with the same key exists, the specified cache entry's value; otherwise, null.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.AddOrGetExisting(System.String,System.Object,System.TimeSpan,System.String)">
            <summary>
            Inserts a cache entry into the cache, by using a key, an object for the cache entry, an absolute expiration value, and an optional region to add the cache into.</summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="slidingExpiration">The time span used to evict the cache entry.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>If a cache entry with the same key exists, the specified cache entry's value; otherwise, null.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Inserts the specified System.Runtime.Caching.CacheItem object into the cache, specifying information about how the entry will be evicted.
            </summary>
            <param name="value">The object to insert.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <returns>If a cache entry with the same key exists, the specified cache entry; otherwise, null.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Inserts a cache entry into the cache, specifying a key and a value for the cache entry, and information about how the entry will be evicted.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>If a cache entry with the same key exists, the specified cache entry's value; otherwise, null.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.Get(System.String,System.String)">
            <summary>
            Gets the specified cache entry from the cache as an object.
            </summary>
            <param name="key">A unique identifier for the cache entry to get.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>The cache entry that is identified by key.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.GetCacheItem(System.String,System.String)">
            <summary>
            Gets the specified cache entry from the cache as a System.Runtime.Caching.CacheItem instance.
            </summary>
            <param name="key">A unique identifier for the cache entry to get.</param>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>The cache entry that is identified by key.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Inserts a cache entry into the cache, specifying time-based expiration details.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire.</param>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Inserts the cache entry into the cache as a System.Runtime.Caching.CacheItem instance, specifying information about how the entry will be evicted.
            </summary>
            <param name="item">The cache item to add.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Inserts a cache entry into the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Gets a set of cache entries that correspond to the specified keys.
            </summary>
            <param name="keys">A collection of unique identifiers for the cache entries to get.</param>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. 
            The default value for the optional parameter is null.</param>
            <returns>A dictionary of key/value pairs that represent cache entries.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.GetValues(System.String,System.String[])">
            <summary>
            Gets a set of cache entries that correspond to the specified keys.
            </summary>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
            <param name="keys">A collection of unique identifiers for the cache entries to get.</param>
            <returns>A dictionary of key/value pairs that represent cache entries.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.Remove(System.String,System.String)">
            <summary>
            Removes the cache entry from the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>An object that represents the value of the removed cache entry that was specified by the key, or null if the specified entry was not found.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.GetCount(System.String)">
            <summary>
            Gets the total number of cache entries in the cache.
            </summary>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>The number of cache entries in the cache. If regionName is not null, the count indicates the number of entries that are in the specified cache region.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.ISystemObjectCache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Caching.RuntimeObjectCache">
            <summary>
            Represents an object cache and provides the base methods and properties for accessing the object cache.
            </summary>
        </member>
        <member name="F:SmartHub.Hosting.Caching.RuntimeObjectCache.cache">
            <summary>
            cache readonly member.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Caching.RuntimeObjectCache.DefaultCacheCapabilities">
            <summary>
            Gets a description of the features that a cache implementation provides.
            </summary>
            <returns>A bitwise combination of flags that indicate the default capabilities of a cache implementation.</returns>
        </member>
        <member name="P:SmartHub.Hosting.Caching.RuntimeObjectCache.Name">
            <summary>
            Gets the name of a specific System.Runtime.Caching.ObjectCache instance.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Caching.RuntimeObjectCache.Item(System.String)">
            <summary>
            Gets or sets the default indexer for the System.Runtime.Caching.ObjectCache class.
            </summary>
            <param name="key">A unique identifier for a cache entry in the cache.</param>
            <returns>A key that serves as an indexer into the cache instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartHub.Hosting.Caching.RuntimeObjectCache"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a System.Runtime.Caching.CacheEntryChangeMonitor object that can trigger events in response to changes to specified cache entries.
            </summary>
            <param name="keys">The unique identifiers for cache entries to monitor.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>A change monitor that monitors cache entries in the cache.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Contains(System.String,System.String)">
            <summary>Checks whether the cache entry already exists in the cache.</summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="regionName"> Optional. A named region in the cache where the cache can be found, if regions are implemented. The default value for the optional parameter is null. </param>
            <returns>true if the cache contains a cache entry with the same key value as key; otherwise, false.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Add(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Inserts a cache entry into the cache without overwriting any existing cache entry.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire. This parameter is required when the Overload:System.Runtime.Caching.ObjectCache.Add method is called.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>true if insertion succeeded, or false if there is an already an entry in the cache that has the same key as key.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Add(System.String,System.Object,System.TimeSpan,System.String)">
            <summary>
            Inserts a cache entry into the cache without overwriting any existing cache entry.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="slidingExpiration">The time span used to evict the cache entry.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>true if insertion succeeded, or false if there is an already an entry in the cache that has the same key as key.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Tries to insert a cache entry into the cache as a System.Runtime.Caching.CacheItem instance, and adds details about how the entry should be evicted.
            </summary>
            <param name="item">The object to add.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <returns>true if insertion succeeded, or false if there is an already an entry in the cache that has the same key as item.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Add(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Inserts a cache entry into the cache, specifying information about how the entry will be evicted.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>true if the insertion try succeeds, or false if there is an already an entry in the cache with the same key as key.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Inserts a cache entry into the cache, by using a key, an object for the cache entry, an absolute expiration value, and an optional region to add the cache into.</summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>If a cache entry with the same key exists, the specified cache entry's value; otherwise, null.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.AddOrGetExisting(System.String,System.Object,System.TimeSpan,System.String)">
            <summary>
            Inserts a cache entry into the cache, by using a key, an object for the cache entry, an absolute expiration value, and an optional region to add the cache into.</summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="slidingExpiration">The time span used to evict the cache entry.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>If a cache entry with the same key exists, the specified cache entry's value; otherwise, null.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Inserts the specified System.Runtime.Caching.CacheItem object into the cache, specifying information about how the entry will be evicted.
            </summary>
            <param name="value">The object to insert.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <returns>If a cache entry with the same key exists, the specified cache entry; otherwise, null.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Inserts a cache entry into the cache, specifying a key and a value for the cache entry, and information about how the entry will be evicted.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>If a cache entry with the same key exists, the specified cache entry's value; otherwise, null.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Get(System.String,System.String)">
            <summary>
            Gets the specified cache entry from the cache as an object.
            </summary>
            <param name="key">A unique identifier for the cache entry to get.</param>
            <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>The cache entry that is identified by key.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.GetCacheItem(System.String,System.String)">
            <summary>
            Gets the specified cache entry from the cache as a System.Runtime.Caching.CacheItem instance.
            </summary>
            <param name="key">A unique identifier for the cache entry to get.</param>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>The cache entry that is identified by key.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Inserts a cache entry into the cache, specifying time-based expiration details.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire.</param>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Inserts the cache entry into the cache as a System.Runtime.Caching.CacheItem instance, specifying information about how the entry will be evicted.
            </summary>
            <param name="item">The cache item to add.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Inserts a cache entry into the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert.</param>
            <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Gets a set of cache entries that correspond to the specified keys.
            </summary>
            <param name="keys">A collection of unique identifiers for the cache entries to get.</param>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. 
            The default value for the optional parameter is null.</param>
            <returns>A dictionary of key/value pairs that represent cache entries.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.GetValues(System.String,System.String[])">
            <summary>
            Gets a set of cache entries that correspond to the specified keys.
            </summary>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
            <param name="keys">A collection of unique identifiers for the cache entries to get.</param>
            <returns>A dictionary of key/value pairs that represent cache entries.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Remove(System.String,System.String)">
            <summary>
            Removes the cache entry from the cache.
            </summary>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>An object that represents the value of the removed cache entry that was specified by the key, or null if the specified entry was not found.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.GetCount(System.String)">
            <summary>
            Gets the total number of cache entries in the cache.
            </summary>
            <param name="regionName">Optional. A named region in the cache where the cache keys in the keys parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
            <returns>The number of cache entries in the cache. If regionName is not null, the count indicates the number of entries that are in the specified cache region.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Dispose">
            <summary>
            Dispose of the cache.
            </summary>
            <remarks>This method shouldn't be called explicitly. Let the runtime dispose of the cache</remarks>
        </member>
        <member name="M:SmartHub.Hosting.Caching.RuntimeObjectCache.Dispose(System.Boolean)">
            <summary>
            Dispose of the cache.
            </summary>
            <param name="disposing">Is currently disposing.</param>
        </member>
        <member name="T:SmartHub.Hosting.Compression.BaseCompressor">
            <summary>
            Base compressor for compressing streams.
            </summary>C:\Users\lennyg\Downloads\SmartHub.Common.Compression\src\BaseCompressor.cs
            <remarks>
            Based on the work by: 
                Ben Foster (http://benfoster.io/blog/aspnet-web-api-compression)
                Kiran Challa (http://blogs.msdn.com/b/kiranchalla/archive/2012/09/04/handling-compression-accept-encoding-sample.aspx)
            </remarks>
        </member>
        <member name="P:SmartHub.Hosting.Compression.BaseCompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="M:SmartHub.Hosting.Compression.BaseCompressor.CreateCompressionStream(System.IO.Stream)">
            <summary>
            Creates the compression stream.
            </summary>
            <param name="output">The output stream.</param>
            <returns>The compressed stream.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Compression.BaseCompressor.CreateDecompressionStream(System.IO.Stream)">
            <summary>
            Creates the decompression stream.
            </summary>
            <param name="input">The input stream.</param>
            <returns>The decompressed stream.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Compression.BaseCompressor.Compress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compresses the specified source stream onto the destination stream.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns>An async Task.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Compression.BaseCompressor.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompresses the specified source stream onto the destination stream.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns>An async Task.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Compression.BaseCompressor.Pump(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the specified input stream onto the output stream.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <returns>An async Task.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Compression.ClientCompressionHandler">
            <summary>
            Message handler for handling gzip/deflate requests/responses on a <see cref="T:System.Net.Http.HttpClient"/>.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ClientCompressionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartHub.Hosting.Compression.ClientCompressionHandler" /> class.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ClientCompressionHandler.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartHub.Hosting.Compression.ClientCompressionHandler" /> class.
            </summary>
            <param name="contentSizeThreshold">The content size threshold before compressing.</param>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ClientCompressionHandler.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartHub.Hosting.Compression.ClientCompressionHandler" /> class.
            </summary>
            <param name="innerHandler">The inner handler.</param>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ClientCompressionHandler.#ctor(System.Net.Http.HttpMessageHandler,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartHub.Hosting.Compression.ClientCompressionHandler" /> class.
            </summary>
            <param name="innerHandler">The inner handler.</param>
            <param name="contentSizeThreshold">The content size threshold before compressing.</param>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ClientCompressionHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            send as an asynchronous operation.
            </summary>
            <param name="request">The HTTP request message to send to the server.</param>
            <param name="cancellationToken">A cancellation token to cancel operation.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />. The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ClientCompressionHandler.CompressRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            Compresses the content.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ClientCompressionHandler.DecompressResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
            Decompresses the response.
            </summary>
            <param name="response">The response.</param>
            <returns>An async Task.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Compression.CompressedContent">
            <summary>
            Represents compressed HTTP content.
            </summary>
        </member>
        <member name="F:SmartHub.Hosting.Compression.CompressedContent.originalContent">
            <summary>
            The original content
            </summary>
        </member>
        <member name="F:SmartHub.Hosting.Compression.CompressedContent.compressor">
            <summary>
            The compressor
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Compression.CompressedContent.#ctor(System.Net.Http.HttpContent,SmartHub.Hosting.Compression.ICompressor)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartHub.Hosting.Compression.CompressedContent"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="compressor">The compressor.</param>
        </member>
        <member name="M:SmartHub.Hosting.Compression.CompressedContent.TryComputeLength(System.Int64@)">
            <summary>
            Determines whether the HTTP content has a valid length in bytes.
            </summary>
            <param name="length">The length in bytes of the HTTP content.</param>
            <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="length" /> is a valid length; otherwise, false.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Compression.CompressedContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <summary>
            serialize to stream as an asynchronous operation.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="context">Information about the transport (channel binding token, for example). This parameter may be null.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Compression.CompressedContent.CopyHeaders">
            <summary>
            Adds the headers.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Compression.CompressedContent.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpContent" /> and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
        </member>
        <member name="T:SmartHub.Hosting.Compression.CompressionAttribute">
            <summary>
            Attribute describes the compression behavior for an ApiController or its method.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Compression.CompressionAttribute.CompressionBehavior">
            <summary>
            Gets or sets the compression behavior.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Compression.CompressionBehavior">
            <summary>
            Compression behavior enum.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Compression.CompressionHandlerBase">
            <summary>
            Abstract base for message handler for handling gzip/deflate requests/responses.
            </summary>
        </member>
        <member name="F:SmartHub.Hosting.Compression.CompressionHandlerBase.ContentSizeThreshold">
            <summary>
            The content size threshold before compressing.
            </summary>
        </member>
        <member name="F:SmartHub.Hosting.Compression.CompressionHandlerBase.ContentOperations">
            <summary>
            The HTTP content operations
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Compression.CompressionHandlerBase.Compressors">
            <summary>
            Gets the compressors.
            </summary>
            <value>The compressors.</value>
        </member>
        <member name="T:SmartHub.Hosting.Compression.DeflateCompressor">
            <summary>
            Compressor for handling <c>deflate</c> encodings.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Compression.DeflateCompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="M:SmartHub.Hosting.Compression.DeflateCompressor.CreateCompressionStream(System.IO.Stream)">
            <summary>
            Creates the compression stream.
            </summary>
            <param name="output">The output stream.</param>
            <returns>The compressed stream.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Compression.DeflateCompressor.CreateDecompressionStream(System.IO.Stream)">
            <summary>
            Creates the decompression stream.
            </summary>
            <param name="input">The input stream.</param>
            <returns>The decompressed stream.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Compression.GZipCompressor">
            <summary>
            Compressor for handling <c>gzip</c> encodings.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Compression.GZipCompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="M:SmartHub.Hosting.Compression.GZipCompressor.CreateCompressionStream(System.IO.Stream)">
            <summary>
            Creates the compression stream.
            </summary>
            <param name="output">The output stream.</param>
            <returns>The compressed stream.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Compression.GZipCompressor.CreateDecompressionStream(System.IO.Stream)">
            <summary>
            Creates the decompression stream.
            </summary>
            <param name="input">The input stream.</param>
            <returns>The decompressed stream.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Compression.HttpContentOperations">
            <summary>
            Helper methods for operating on <see cref="T:System.Net.Http.HttpContent"/> instances.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Compression.HttpContentOperations.DecompressContent(System.Net.Http.HttpContent,SmartHub.Hosting.Compression.ICompressor)">
            <summary>
            Decompresses the compressed HTTP content.
            </summary>
            <param name="compressedContent">The compressed HTTP content.</param>
            <param name="compressor">The compressor.</param>
            <returns>The decompressed content.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Compression.HttpContentOperations.CopyHeaders(System.Net.Http.HttpContent,System.Net.Http.HttpContent)">
            <summary>
            Copies the HTTP headers onto the new response.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:SmartHub.Hosting.Compression.ICompressor">
            <summary>
            Interface for stream compressors.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Compression.ICompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ICompressor.Compress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compresses the specified source stream onto the destination stream.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns>The compressed content length.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ICompressor.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompresses the specified source stream onto the destination stream.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns>An async Task.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Compression.ServerCompressionHandler">
            <summary>
            Message handler for handling gzip/deflate requests/responses.
            </summary>
            <remarks>This code is based on https://github.com/azzlack/Microsoft.AspNet.WebApi.MessageHandlers.Compression. </remarks>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ServerCompressionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SmartHub.Hosting.Compression.ServerCompressionHandler" /> class.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ServerCompressionHandler.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartHub.Hosting.Compression.ServerCompressionHandler" /> class.
            </summary>
            <param name="enableByDefault">Boolean indicator whether to enable compression by default.</param>
            <param name="contentSizeThreshold">The content size threshold before compressing.</param>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ServerCompressionHandler.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartHub.Hosting.Compression.ServerCompressionHandler" /> class.
            </summary>
            <param name="innerHandler">The inner handler.</param>
            <param name="enableByDefault">Boolean indicator whether to enable compression by default.</param>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ServerCompressionHandler.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SmartHub.Hosting.Compression.ServerCompressionHandler" /> class.
            </summary>
            <param name="innerHandler">The inner handler.</param>
            <param name="enableByDefault">Boolean indicator whether to enable compression by default.</param>
            <param name="contentSizeThreshold">The content size threshold before compressing.</param>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ServerCompressionHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            send as an asynchronous operation.
            </summary>
            <param name="request">The HTTP request message to send to the server.</param>
            <param name="cancellationToken">A cancellation token to cancel operation.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />. The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ServerCompressionHandler.CompressResponse(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)">
            <summary>
            Compresses the content.
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:SmartHub.Hosting.Compression.ServerCompressionHandler.DecompressRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            Decompresses the request.
            </summary>
            <param name="request">The request.</param>
            <returns>An async Task.</returns>
        </member>
        <member name="T:SmartHub.Hosting.DataAccess.DataConsistencyException">
            <summary>
            Class represents the data consistency error in the application.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.DataAccess.DataVersioningException">
            <summary>
            Class represents the versioning error in the application.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.DataAccess.DuplicateKeyException">
            <summary>
            Class represents the duplicated key or unique index error in the application.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.DuplicateKeyException.SetFailedIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Populates the exceptions data with the failed ids passed in.
            </summary>
            <param name="ids">The ids that failed to insert.</param>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.DuplicateKeyException.GetFailedIds">
            <summary>
            Gets the enumerable of failed ids for this exception.
            </summary>
            <returns>An enumerable of guids or null if the ids were never set.</returns>
        </member>
        <member name="P:SmartHub.Hosting.DataAccess.FilterParameters.Filters">
            <summary>
            Gets or sets the list of filters.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.DataAccess.PagedDataParameters.PageNumber">
            <summary>
            Page number. Starts with 1.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.DataAccess.PagedDataParameters.PageSize">
            <summary>
            Page size.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.DataAccess.PagedDataParameters.Sortings">
            <summary>
            Comma-separated list of sorting expressions in the form of: "attribute [ASC|DESC]".
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.PagedDataParameters.MapSortingField(System.String,System.String)">
            <summary>
            Method maps sorting field to another name alternatively used for sorting. Both names are case-sensitive.
            </summary>
            <param name="mapFromFieldName">The field name to map (from).</param>
            <param name="mapToFieldName">The field name to map to.</param>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.PagedDataParameters.ParseSortings(System.String)">
            <summary>
            Method parses sorting expression. It will ignore duplicate fields taking the 1st expression for a duplicate field.
            </summary>
            <param name="sortByExpression">Sorting expression as "field1 ASC, field2 ASC"</param>
        </member>
        <member name="P:SmartHub.Hosting.DataAccess.SortParameter.SortBy">
            <summary>
            Gets or sets a property to sort by.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.DataAccess.SortParameter.SortDirection">
            <summary>
            Gets or sets sorting direction.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.SortParameter.MapSortingField(System.String,System.String)">
            <summary>
            Method maps sorting field to another name alternatively used for sorting. Both names are case-sensitive.
            </summary>
            <param name="mapFromFieldName">The field name to map (from).</param>
            <param name="mapToFieldName">The field name to map to.</param>
        </member>
        <member name="T:SmartHub.Hosting.DataAccess.FilterCollection">
            <summary>
            Class represents a collection of filters supplied to the API call.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Default constructor.
            </summary>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.HasFilter(System.String)">
            <summary>
            Method returns boolean value whether or not filter with specified named exists in the collection. 
            </summary>
            <param name="filterName">The name of filter. Casing is ignored.</param>
            <returns>Returns boolean.</returns>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsDateTime(System.String,System.DateTime@)">
            <summary>
            Parses filter with given name as DateTime object. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsDecimal(System.String,System.Decimal@)">
            <summary>
            Parses filter with given name as Decimal object. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsDouble(System.String,System.Double@)">
            <summary>
            Parses filter with given name as Double object. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsFloat(System.String,System.Single@)">
            <summary>
            Parses filter with given name as Float object. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsGuid(System.String,System.Guid@)">
            <summary>
            Parses filter with given name as Guid object. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsInt16(System.String,System.Int16@)">
            <summary>
            Parses filter with given name as Int16 object. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsInt32(System.String,System.Int32@)">
            <summary>
            Parses filter with given name as Int32 object. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsInt64(System.String,System.Int64@)">
            <summary>
            Parses filter with given name as Int64 object. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsByte(System.String,System.Byte@)">
            <summary>
            Parses filter with given name as Byte object. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsBoolean(System.String,System.Boolean@)">
            <summary>
            Parses filter with given name as Boolean object. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsString(System.String,System.String@)">
            <summary>
            Parses filter with given name as String object. 
            Returns boolean indicator whether filter exists.
            </summary>
            <remarks>Empty string or white spaces are ignored.</remarks>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsString(System.String,System.Boolean,System.String@)">
            <summary>
            Parses filter with given name as String object. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="allowEmptyOrWhiteSpace">If true assumes no filter present if filter is an empty string or consists of white spaces.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsArray``1(System.String,``0[]@)">
            <summary>
            Parses filter with given name as an array of T type objects. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsArray(System.String,System.String[]@)">
            <summary>
            Parses filter with given name as an array of string objects. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="M:SmartHub.Hosting.DataAccess.FilterCollection.ParseAsEnumArray``1(System.String,``0[]@)">
            <summary>
            Parses filter with given name as an array of T Enum type objects. 
            Returns boolean indicator whether filter exists.
            </summary>
            <param name="filterName">The filter name. Casing is ignored.</param>
            <param name="value">The output parameter for parsed value.</param>
            <returns>Returns true if filter exists; otherwise false.</returns>
            <exception cref="T:System.FormatException">Throws exception if filter exists, but parsing fails.</exception>
        </member>
        <member name="T:SmartHub.Hosting.Formatters.PascalCasingExpandoObjectConverter">
            <summary>
            Converts an ExpandoObject to and from JSON using conversion from camelCasing to PascalCasing for naming convention.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Formatters.PascalCasingExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:SmartHub.Hosting.Formatters.PascalCasingExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Formatters.PascalCasingExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SmartHub.Hosting.Formatters.PascalCasingExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SmartHub.Hosting.Formatters.AvroMediaTypeFormatter`1">
            <summary>
            <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> class to handle Avro.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Formatters.AvroMediaTypeFormatter`1.#ctor">
            <summary>
            Gets the default media type for Avro, namely "application/avro".
            </summary>
            <value>Because <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> is mutable, the value returned will be a new instance every time.</value>
        </member>
        <member name="M:SmartHub.Hosting.Formatters.AvroMediaTypeFormatter`1.CanReadType(System.Type)">
            <summary>
            Determines whether this formatter can read objects of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be read.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be read, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Formatters.AvroMediaTypeFormatter`1.CanWriteType(System.Type)">
            <summary>
            Determines whether this formatter can write objects of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be written.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be written, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Formatters.AvroMediaTypeFormatter`1.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
            <summary>
            Called during deserialization to read an object of the specified <paramref name="type"/>
            from the specified <paramref name="readStream"/>.
            </summary>
            <param name="type">The type of object to read.</param>
            <param name="readStream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> for the content being written.</param>
            <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger"/> to log events to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> whose result will be the object instance that has been read.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Formatters.AvroMediaTypeFormatter`1.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
            <summary>
            Called during serialization to write an object of the specified <paramref name="type"/>
            to the specified <paramref name="writeStream"/>.
            </summary>
            <param name="type">The type of object to write.</param>
            <param name="value">The object to write.</param>
            <param name="writeStream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> for the content being written.</param>
            <param name="transportContext">The <see cref="T:System.Net.TransportContext"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will write the value to the stream.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Formatters.CustomAvroResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Hadoop.Avro.AvroPublicMemberContractResolver"/> class.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Formatters.CustomAvroResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Hadoop.Avro.AvroPublicMemberContractResolver"/> class.
            </summary>
            <param name="allowNullable">If set to <c>true</c>, null values are allowed.</param>
        </member>
        <member name="M:SmartHub.Hosting.Formatters.CustomAvroResolver.#ctor(System.Boolean,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Hadoop.Avro.AvroPublicMemberContractResolver"/> class.
            </summary>
            <param name="allowNullable">If set to <c>true</c>, null values are allowed.</param>
            <param name="knownTypes">If types list provided and not empty, adds them to all known types</param>
        </member>
        <member name="T:SmartHub.Hosting.Formatters.NonClosingDelegatingStream">
            <summary>
            Stream that doesn't close the inner stream when closed. This is to work around a limitation
            when reader is insisting of closing the inner stream.
            Implementations of  <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>
            should not close the input stream when reading or writing so hence this workaround.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Formatters.DelegatingStream">
            <summary>
            Stream that delegates to inner stream. 
            This is taken from System.Net.Http
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Handlers.ClientCorrelationHandler">
            <summary>
            Class represents the WebApi handler providing traces correlation between client and server.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Handlers.ClientCorrelationHandler.Propagate">
            <summary>
            Boolean value forces automatically propagate of the client correlation id to the request context. By default is true.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Handlers.ClientCorrelationHandler.InitializeIfEmpty">
            <summary>
            Boolean value ensures a correlation id is send within the response if client did not provide one upon request. By default is false.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Exceptions.AmbiguousResultException">
            <summary>
            Class represents ambiguous result exception.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Exceptions.ServiceResolutionException">
            <summary>
            Class represents business rule exception.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Exceptions.HttpThrottlingException">
            <summary>
            Class represents Http throttling exception.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Exceptions.HttpThrottlingException.RetryDelay">
            <summary>
            Gets or sets server retry-after instructions. This is set to Zero time span if server did not include specific header into the response.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Exceptions.ModelValidationException">
            <summary>
            Class represents model validation exception.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Exceptions.AuthorizationException">
            <summary>
            Class represents Authorization exception.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Exceptions.BusinessRuleException">
            <summary>
            Class represents business rule exception.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.ISmartStartup">
            <summary>
            The interface that must be implemented by a class providing an integration point between a common components and its host. 
            Allows to pre-register common dependencies or override default implementations before host provides them.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.ISmartStartup.PreInitializeUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Method is being called by host before any container registrations performed by host, and before host creates common infrastructure.
            </summary>
            <param name="container">The DI container.</param>
        </member>
        <member name="M:SmartHub.Hosting.ISmartStartup.ResolveUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Method is being called by host after container registrations performed allowing to resolve dependencies. 
            This method is being called before any <see cref="T:SmartHub.Hosting.ISmartApplication"/> are being setup. 
            </summary>
            <param name="container">The DI container.</param>
        </member>
        <member name="T:SmartHub.Hosting.ISmartApplication">
            <summary>
            The interface that must be implemented by a class providing an integration point between a service and its host.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.ISmartApplication.StartInternalServices(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Called by App Host to start internal services for the application.
            </summary>
            <remarks>Only StartInternalServices or StartInternalServicesAsync method should actually do the work, not both.</remarks>
            <param name="container">The Unity Container</param>
        </member>
        <member name="M:SmartHub.Hosting.ISmartApplication.StartInternalServicesAsync(Microsoft.Practices.Unity.IUnityContainer,System.Threading.CancellationToken)">
            <summary>
            Called by App Host to asynchronously start internal services for the application.
            </summary>
            <remarks>Only StartInternalServices or StartInternalServicesAsync method should actually do the work, not both.</remarks>
            <param name="container">The Unity Container</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns async task.</returns>
        </member>
        <member name="M:SmartHub.Hosting.ISmartApplication.StopApplication(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Called by App Host to stop the application.
            </summary>
            <param name="container">The Unity Container</param>
        </member>
        <member name="T:SmartHub.Hosting.TransparentSerializeContractResolver">
            <summary>
            This resolver ensures no change to the PropertyNames are being made even class has properties with JSON-related attributes overriding the names.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.EnforcedCamelCasePropertyNamesContractResolver">
            <summary>
            This resolver ensures no change to the CamelCasing PropertyNames are being made even class has properties with JSON-related attributes overriding the names.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.BulkCreateResult`1">
            <summary>
            Class represents the result of the repository BulkCreate operation.
            </summary>
            <typeparam name="T">The type of the object saved to the Repository.</typeparam>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.BulkCreateResult`1.Items">
            <summary>
            Gets or sets the instance of object requested to be created.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.BulkCreateResult`1.BulkException">
            <summary>
            Gets or sets the underlying exception for whole operation.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.BulkCreateResult`1.FullSuccess">
            <summary>
            Gets or sets the result for the item.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.BulkCreateResult`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.BulkCreateItemResult`1">
            <summary>
            Class represents the result of the repository BulkCreate operation.
            </summary>
            <typeparam name="T">The type of the object saved to the Repository.</typeparam>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.BulkCreateItemResult`1.Aggregate">
            <summary>
            Gets or sets the instance of aggregate requested to be created.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.BulkCreateItemResult`1.Result">
            <summary>
            Gets or sets the operation result.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.BulkCreateItemResult`1.ErrorMessage">
            <summary>
            Gets or sets the error message for the result, if applicable.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.BulkCreateItemResult`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.ByteArrayHttpResponseMessage">
            <summary>
            Class is used to create <see cref="T:System.Net.Http.HttpResponseMessage"/> from a byte array.
            </summary>
            <remarks>Constructor automatically creates content with all required headers.</remarks>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.CreateAggregateResult">
            <summary>
            Enumeration used to provide feedback from the create entry method.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult">
            <summary>
            Class which wraps the CreateAggregateResult with a message. Useful
            for sending warnings describing the the result.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult.#ctor">
            <summary>
            Default constructor with string.empty message.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult.#ctor(SmartHub.Hosting.Runtime.CreateAggregateResult,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="result">The CreateAggregateResult.</param>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult.SetResult(SmartHub.Hosting.Runtime.CreateAggregateResult,System.String,System.Object[])">
            <summary>
            Method sets result and message.
            </summary>
            <param name="result">The CreateAggregateResult.</param>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult.SetFailure(System.String,System.Object[])">
            <summary>
            Method sets "Failure" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult.SetPartialFailure(System.String,System.Object[])">
            <summary>
            Method sets "PartialFailure" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult.SetSuccess">
            <summary>
            Method sets "Success" result.
            </summary>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult.SetSuccess(System.String,System.Object[])">
            <summary>
            Method sets "Success" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult.SetAlreadyExists(System.String,System.Object[])">
            <summary>
            Method sets "AlreadyExists" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult`1">
            <summary>
            Class which wraps the CreateAggregateResult with a message. Useful
            for sending warnings describing the the result.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult`1.#ctor">
            <summary>
            Default constructor with string.empty message.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult`1.#ctor(SmartHub.Hosting.Runtime.CreateAggregateResult,`0,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="result">The CreateAggregateResult.</param>
            <param name="data">The data of type T.</param>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult`1.SetResult(SmartHub.Hosting.Runtime.CreateAggregateResult,System.String,System.Object[])">
            <summary>
            Method sets result and message.
            </summary>
            <param name="result">The CreateAggregateResult.</param>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult`1.SetFailure(System.String,System.Object[])">
            <summary>
            Method sets "Failure" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult`1.SetPartialFailure(System.String,System.Object[])">
            <summary>
            Method sets "PartialFailure" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult`1.SetSuccess">
            <summary>
            Method sets "Success" result.
            </summary>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult`1.SetSuccess(System.String,System.Object[])">
            <summary>
            Method sets "Success" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.CreateAggregateExtendedResult`1.SetAlreadyExists(System.String,System.Object[])">
            <summary>
            Method sets "AlreadyExists" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.Disposer">
            <summary>
            Class provides dispose helpers.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.Disposer.DisposeWithoutException(System.IDisposable)">
            <summary>
            Method invokes Dispose method on the target, and catches any exception thrown.
            </summary>
            <param name="target">The object to dispose.</param>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.IDomainService">
            <summary>
            Interface of a class that implements and/or provides access to domain level services.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.IDomainService.GetService``1">
            <summary>
            Get a service within the scope of the domain.
            </summary>
            <returns>Returns an instance of a service.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.DomainService">
            <summary>
            Class implements and/or provides access to domain level services.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.DomainService.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Class constructor.
            </summary>
            <param name="iocContainer">IoC container.</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.DomainService.GetService``1">
            <summary>
            Get a service within the scope of the domain.
            </summary>
            <returns>Returns an instance of a service This method always guarantees non-null instance if returned without exception.</returns>
            <exception cref="T:SmartHub.Hosting.Exceptions.ServiceResolutionException">Throws exception if instance cannot be resolved or found, including null-resolution.</exception>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.IHashProvider">
            <summary>
            Interface for a class that provides hash computing functionality.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.IHashProvider.ComputeHash(System.String)">
            <summary>
            Method computes hash for provided string value. String is assumed to contain UTF8 format. 
            If the assumption is inaccurate, convert string to an array of bytes and use a version of ComputeHash function that accepts byte array.
            </summary>
            <param name="value">The string value.</param>
            <returns>Returns hash as a string.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.IHashProvider.ComputeHash(System.Byte[])">
            <summary>
            Method computes hash for provided byte array value. 
            </summary>
            <param name="value">The byte array value.</param>
            <returns>Returns hash as a string.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.IHashProvider.ComputeHash(System.Object[])">
            <summary>
            Method computes hash for provided objects. It calls toString on each object and delegates. 
            Default Encoding is assumed to be UTF8 format. 
            </summary>
            <param name="values">The string value.</param>
            <returns>Returns hash as a string.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.IHashProvider.ComputeMd5FileHash(System.String)">
            <summary>
            Method computes MD5 hash for a given file.
            </summary>
            <param name="filePath">File path</param>
            <returns>Returns hash as a string.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.HashProvider">
            <summary>
            Class provides hash computing functionality.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HashProvider.ComputeHash(System.String)">
            <summary>
            Method computes hash for provided string value. String is assumed to contain UTF8 format. 
            If the assumption is inaccurate, convert string to an array of bytes and use a version of ComputeHash function that accepts byte array.
            </summary>
            <param name="value">The string value.</param>
            <returns>Returns hash as a string.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HashProvider.ComputeHash(System.Byte[])">
            <summary>
            Method computes hash for provided byte array value. 
            </summary>
            <param name="value">The byte array value.</param>
            <returns>Returns hash as a string.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HashProvider.ComputeMd5FileHash(System.String)">
            <summary>
            Method computes MD5 hash for a given file.
            </summary>
            <param name="filePath">File path</param>
            <returns>Returns hash as a string.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HashProvider.ComputeMd5FileByteHash(System.String)">
            <summary>
            Method computes MD5 hash for a given file.
            </summary>
            <param name="filePath">File path</param>
            <returns>Returns hash as a byte array.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HashProvider.ComputeMd5FileHash(System.IO.Stream)">
            <summary>
            Method computes MD5 hash for a given file stream.
            </summary>
            <param name="stream">The file stream</param>
            <returns>Returns hash as a string.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HashProvider.ComputeMd5FileByteHash(System.IO.Stream)">
            <summary>
            Method computes MD5 hash for a given file stream.
            </summary>
            <param name="stream">The file stream</param>
            <returns>Returns hash as a byte array.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HashProvider.ConvertHashToBytes(System.String)">
            <summary>
            Method converts string representation of an MD5 hash to a byte array representation.
            </summary>
            <param name="hash">The hash to convert.</param>
            <returns>Returns hash as a byte array.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HttpInternalDDI.HtmlDecode(System.String)">
            <summary>
            Decodes an HTML-encoded string and returns the decoded string.
            </summary>
            <param name="s">The HTML string to decode. </param>
            <returns>The decoded text.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HttpInternalDDI.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Decodes an HTML-encoded string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The HTML string to decode</param>
            <param name="output">The TextWriter output stream containing the decoded string. </param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HttpInternalDDI.HtmlEncode(System.String)">
            <summary>
            HTML-encodes a string and returns the encoded string.
            </summary>
            <param name="s">The text string to encode. </param>
            <returns>The HTML-encoded text.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HttpInternalDDI.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTML-encodes a string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The string to encode. </param>
            <param name="output">The TextWriter output stream containing the encoded string. </param>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.HubApiCompletionBase">
            <summary>
            /Class represents the result of HUB API call completion.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.HubApiCompletionBase.Status">
            <summary>
            Gets the result status.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.HubApiCompletionBase.Exception">
            <summary>
            Gets the exception occurred within the call, if any.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.HubApiCompletionBase.Retries">
            <summary>
            Gets the number of retries it took to complete the operation.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.HubApiCompletionBase.IntroducedDelayMsec">
            <summary>
            Gets or sets the total delay introduced by delaying subsequent retries.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.HubApiCompletionBase.Duration">
            <summary>
            Gets or sets the total number of milliseconds for the API operation.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.HubApiCompletion">
            <summary>
            /Class represents the result of HUB API call completion.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HubApiCompletion.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HubApiCompletion.#ctor(SmartHub.Hosting.Runtime.HubApiCompletionStatus)">
            <summary>
            Constructor that accepts a completion status.
            </summary>
            <param name="status">The completion status.</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HubApiCompletion.#ctor(System.Exception)">
            <summary>
            Constructor that accepts an exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HubApiCompletion.FromStatus(SmartHub.Hosting.Runtime.HubApiCompletionStatus)">
            <summary>
            Creates the HubApiCompletion object from completion status.
            </summary>
            <param name="status">The completion status.</param>
            <returns>Returns an instance of HubApiCompletion.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HubApiCompletion.FromError(System.Exception)">
            <summary>
            Creates the HubApiCompletion object from an exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>Returns an instance of HubApiCompletion.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HubApiCompletionExtensions.SetRetries(SmartHub.Hosting.Runtime.HubApiCompletion,System.Int32)">
            <summary>
            Method sets the number of retries.
            </summary>
            <param name="completion">The instance.</param>
            <param name="retries">The number of retries.</param>
            <returns>Returns the same instance of HubApiCompletion.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.HubApiCompletionExtensions.SetDuration(SmartHub.Hosting.Runtime.HubApiCompletion,System.Int32)">
            <summary>
            Method sets the API call duration.
            </summary>
            <param name="completion">The instance.</param>
            <param name="duration">The API call duration.</param>
            <returns>Returns the same instance of HubApiCompletion.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.HubApiCompletionStatus">
            <summary>
            The HUB API request completion status.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.AggregateActionResult.Result">
            <summary>
            A bool indicating whether or not it was successful
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.AggregateActionResult.Message">
            <summary>
            A message indicating why the result was succesful or a failure.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.MessagedResult`1">
            <summary>
            A wrapper class for returning a result with an attached message.
            The message is usually empty whenever the result is "successful"
            </summary>
            <typeparam name="T">The type of result to return</typeparam>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.MessagedResult`1.Result">
            <summary>
            Gets or sets the result
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.MessagedResult`1.Message">
            <summary>
            Gets or sets the message
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.MessagedResult`1.SetResult(`0)">
            <summary>
            Sets the result to the passed in parameter
            </summary>
            <param name="result">The result to set.</param>
            <returns>The same instance of the messaged result</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.MessagedResult`1.SetMessage(System.String)">
            <summary>
            Sets the message to the passed in parameter
            </summary>
            <param name="message">The message to set.</param>
            <returns>The same instance of the messaged result</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.RetryPolicy.RetryExceptionCondition">
            <summary>
            Retry condition when exception occur.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryExceptionCondition.IsMatch(System.Exception)">
            <summary>
            Method verifies whether condition matches for given exception.
            </summary>
            <param name="ex">Exception</param>
            <returns>Returns boolean indicator of a match.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryExceptionCondition.EvaluateDelay(System.Exception,System.TimeSpan)">
            <summary>
            Method evaluates the delay used by the RetryPolicy and allows to override it whether applicable. 
            </summary>
            <param name="ex">Exception</param>
            <param name="defaultDelay">The default delay used by the RetryPolicy.</param>
            <returns>Returns new or default delay as TimeSpan.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.RetryPolicy.RetryExceptionCondition`1">
            <summary>
            Retry condition when exception occur.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.RetryPolicy.RetryExceptionCondition`1.Condition">
            <summary>
            Gets the exception validation condition.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.RetryPolicy.RetryExceptionCondition`1.DelayEvaluator">
            <summary>
            Method overrides delay used by the RetryPolicy whether applicable. 
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryExceptionCondition`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Constructor.
            </summary>
            <param name="condition">Exception validation condition</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryExceptionCondition`1.#ctor(System.Func{`0,System.Boolean},System.Func{`0,System.TimeSpan,System.TimeSpan})">
            <summary>
            Constructor.
            </summary>
            <param name="condition">Exception validation condition</param>
            <param name="delayEvaluator">Overrides delay used by the RetryPolicy whether applicable. </param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryExceptionCondition`1.IsMatch(System.Exception)">
            <summary>
            Method verifies whether condition matches for given exception.
            </summary>
            <param name="ex">Exception</param>
            <returns>Returns boolean indicator of a match.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryExceptionCondition`1.EvaluateDelay(System.Exception,System.TimeSpan)">
            <summary>
            Method evaluates the delay used by the RetryPolicy and allows to override it whether applicable. 
            </summary>
            <param name="ex">Exception</param>
            <param name="defaultDelay">The default delay used by the RetryPolicy.</param>
            <returns>Returns new or default delay as TimeSpan.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.RetryPolicy.RetrySuccessCondition">
            <summary>
            Retry condition upon success that allows to verify return value and force retry.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.RetryPolicy.RetrySuccessCondition.Condition">
            <summary>
            Gets the return value validation condition.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetrySuccessCondition.#ctor(System.Func{System.Object,System.Boolean})">
            <summary>
            Constructor.
            </summary>
            <param name="condition">Exception return value condition</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetrySuccessCondition.IsMatch(System.Object)">
            <summary>
            Method verifies whether condition matches for given exception.
            </summary>
            <param name="returnValue">Return value</param>
            <returns>Returns boolean indicator of a match.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.RetryPolicy.IRetryDelay">
            <summary>
            Interface provides a logic producing delay for the retry.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.IRetryDelay.GetDelay">
            <summary>
            Method returns next delay.
            </summary>
            <returns>Returns the delay as TimeSpan.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.RetryPolicy.SimpleRetryDelay">
            <summary>
            Class provides a logic and metadata producing simple delay for the retry.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.SimpleRetryDelay.#ctor(System.TimeSpan)">
            <summary>
            Constructor that accepts delay as a TimeSpan.
            </summary>
            <param name="delay">The delay.</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.SimpleRetryDelay.#ctor(System.Int32)">
            <summary>
            Constructor that accepts delay in milliseconds.
            </summary>
            <param name="delay">The delay in milliseconds.</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.SimpleRetryDelay.GetDelay">
            <summary>
            Method returns next delay.
            </summary>
            <returns>Returns the delay as TimeSpan.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.RetryPolicy.RandomRetryDelay">
            <summary>
            Class provides a logic and metadata producing simple delay for the retry.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RandomRetryDelay.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that accepts delay in milliseconds.
            </summary>
            <param name="minDelay">The minimum delay in milliseconds.</param>
            <param name="maxDelay">The maximum delay in milliseconds.</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RandomRetryDelay.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructor that accepts delay as TimeSpan.
            </summary>
            <param name="minDelay">The minimum delay.</param>
            <param name="maxDelay">The maximum delay.</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RandomRetryDelay.GetDelay">
            <summary>
            Method returns next delay.
            </summary>
            <returns>Returns the delay as TimeSpan.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy">
            <summary>
            Class implements re-try policies for the application.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.RethrowOnPolicyFail">
            <summary>
            Gets or sets boolean indicator whether to re-throw an exception if policy fails (attempts exhausted or unhandled exception occurred).
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.RetryOn``1">
            <summary>
            Method defines an exception for retry policy. If exception of defined type occurs, the policy will re-try.
            </summary>
            <typeparam name="T">An exception type.</typeparam>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.RetryOn``1(System.Func{``0,System.Boolean})">
            <summary>
            Method defines an exception condition for retry policy. If exception of defined type occurs and condition matches, the policy will re-try.
            </summary>
            <typeparam name="T">An exception type.</typeparam>
            <param name="condition">Condition to retry.</param>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.RetryOn``1(System.Func{``0,System.Boolean},System.Func{``0,System.TimeSpan,System.TimeSpan})">
            <summary>
            Method defines an exception condition for retry policy. If exception of defined type occurs and condition matches, the policy will re-try.
            </summary>
            <typeparam name="T">An exception type.</typeparam>
            <param name="condition">Condition to retry.</param>
            <param name="delayEvaluator">Method evaluates the delay used by the RetryPolicy and allows to override it whether applicable.</param>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.RetryOn``1(System.Func{``0,System.TimeSpan,System.TimeSpan})">
            <summary>
            Method defines an exception condition for retry policy. If exception of defined type occurs and condition matches, the policy will re-try.
            </summary>
            <typeparam name="T">An exception type.</typeparam>
            <param name="delayEvaluator">Method evaluates the delay used by the RetryPolicy and allows to override it whether applicable.</param>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.RetryIf(System.Func{System.Object,System.Boolean})">
            <summary>
            Method defines a retry condition for return data validation. If policy executed without an exception, this method allows to validate return value to enforce another retry if necessary. 
            </summary>
            <remarks>This condition applies to function or task that returns an object, so this object can be validated before completing the retry policy.</remarks>
            <param name="condition">Condition to retry.</param>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.RetryIfNull">
            <summary>
            Method adds a retry condition in case the return data is null-value. If policy successfully executed, this method validates return value to ensure retry on null. 
            </summary>
            <remarks>This condition applies to function or task that returns an object, so this object can be validated before completing the retry policy.</remarks>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.AddAttempt">
            <summary>
            Method adds a retry attempt with 0 delay.
            </summary>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.AddAttempt(System.Int32)">
            <summary>
            Method adds a retry attempt with an optional delay.
            </summary>
            <param name="delay">Delay from a previous attempt in milliseconds.</param>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.AddAttempts(System.Int32[])">
            <summary>
            Method adds multiple retry attempts with an optional delay between each.
            </summary>
            <param name="delays">Delays from a previous attempt in milliseconds.</param>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.AddAttempt(System.TimeSpan)">
            <summary>
            Method adds a retry attempt with an optional delay.
            </summary>
            <param name="delay">Delay from a previous attempt in milliseconds.</param>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.AddAttempts(System.TimeSpan[])">
            <summary>
            Method adds multiple retry attempts with an optional delay between each.
            </summary>
            <param name="delays">Delays from a previous attempt in milliseconds.</param>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.AddAttempt(SmartHub.Hosting.Runtime.RetryPolicy.IRetryDelay)">
            <summary>
            Method adds a retry attempt with an optional delay.
            </summary>
            <param name="delay">Delay from a previous attempt.</param>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.AddAttempts(SmartHub.Hosting.Runtime.RetryPolicy.IRetryDelay[])">
            <summary>
            Method adds multiple retry attempts with an optional delay between each.
            </summary>
            <param name="delays">Delays from a previous attempt.</param>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.SetThrowOnPolicyFail(System.Boolean)">
            <summary>
            Method sets boolean indicator whether to re-throw an exception if policy fails (attempts exhausted or unhandled exception occurred).
            </summary>
            <param name="throwOnPolicyFail">The boolean value to set.</param>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.Reset">
            <summary>
            Method resets the retry policy to its original state allowing to redefine the policy.
            </summary>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.ClearConditions">
            <summary>
            Method clears the retry policy conditions.
            </summary>
            <returns>Returns RetryPolicy instance.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.Execute(System.Action,System.Threading.CancellationToken)">
            <summary>
            Method executes an action following current retry policy. 
            </summary>
            <remarks>Method may throw an occurred exception if it's not defined by the policy or number of allowed attempts has been exhausted and ThrowOnPolicyFail property is set to true. 
            All occurred exception will be wrapped into AggregateException object.</remarks>
            <param name="work">The action to execute.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>Returns an instance RetryResult if exception is not thrown.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.Execute``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Method executes a function returning TResult following current retry policy. 
            </summary>
            <remarks>Method may throw an occurred exception if it's not defined by the policy or number of allowed attempts has been exhausted and ThrowOnPolicyFail property is set to true. 
            All occurred exception will be wrapped into AggregateException object.</remarks>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="work">The function to execute.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>Returns an instance RetryResult, containing the returned data if exception is not thrown.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Method executes a Task following current retry policy. 
            </summary>
            <remarks>Method may throw an occurred exception if it's not defined by the policy or number of allowed attempts has been exhausted and ThrowOnPolicyFail property is set to true. 
            All occurred exception will be wrapped into AggregateException object.</remarks>
            <param name="work">The action to execute.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>Returns an instance RetryResult if exception is not thrown.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Method executes a Task returning TResult following current retry policy. 
            </summary>
            <remarks>Method may throw an occurred exception if it's not defined by the policy or number of allowed attempts has been exhausted and ThrowOnPolicyFail property is set to true. 
            All occurred exception will be wrapped into AggregateException object.</remarks>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="work">The function to execute.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>Returns an instance RetryResult containing the returned data if exception is not thrown.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetConstantRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy)">
            <summary>
            Method sets the "Constant" retry policy that retry 3 times without any delay between those. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetConstantRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy,System.TimeSpan,System.Int32)">
            <summary>
            Method sets the "Constant" retry policy that retry specified number of times with provided delay between those. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <param name="delay">The delay between subsequent retries, as a TimeSpan instance.</param>
            <param name="retryCount">The number of retries.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetConstantRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy,System.Int32,System.Int32)">
            <summary>
            Method sets the "Constant" retry policy that retry specified number of times with provided delay between those. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <param name="delay">The delay between subsequent retries, in milliseconds.</param>
            <param name="retryCount">The number of retries.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetExponentialIncreaseRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy)">
            <summary>
            Method sets the "Exponential Increase" retry policy that retry 3 times with exponentially increasing delay between those; delay starts at 15 milliseconds. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetExponentialIncreaseRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy,System.TimeSpan,System.Int32)">
            <summary>
            Method sets the "Exponential Increase" retry policy that retry specified number of times with exponentially increasing delay between those; delay starts at as provided. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <param name="delay">The first delay between retries, as a TimeSpan instance.</param>
            <param name="retryCount">The number of retries.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetExponentialIncreaseRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy,System.Int32,System.Int32)">
            <summary>
            Method sets the "Exponential Increase" retry policy that retry specified number of times with exponentially increasing delay between those; delay starts at as provided. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <param name="delay">The first delay between retries, in milliseconds.</param>
            <param name="retryCount">The number of retries.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetLinearIncreaseRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy)">
            <summary>
            Method sets the "Linear Increase" retry policy that retry 3 times linearly increasing delay between those; delay starts at and increasing by 5 milliseconds. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetLinearIncreaseRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy,System.TimeSpan,System.Int32)">
            <summary>
            Method sets the "Linear Increase" retry policy that retry specified number of times linearly increasing delay between those; delay starts at and increasing as provided. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <param name="increment">The first delay and increment between retries, as TimeSpan instance.</param>
            <param name="retryCount">The number of retries.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetLinearIncreaseRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy,System.Int32,System.Int32)">
            <summary>
            Method sets the "Linear Increase" retry policy that retry specified number of times linearly increasing delay between those; delay starts at and increasing as provided. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <param name="increment">The first delay and increment between retries, in milliseconds.</param>
            <param name="retryCount">The number of retries.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetAdaptiveIncreaseRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy)">
            <summary>
            Method sets the "Adaptive Increase" retry policy that combines "Constant" and "Exponential Increase" policies. 
            The policy retry 2 times immediately, and then 3 times with exponentially increasing delay between those, starting at 15 milliseconds. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetAdaptiveIncreaseRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy,System.Int32,System.TimeSpan,System.Int32)">
            <summary>
            Method sets the "Adaptive Increase" retry policy that combines "Constant" and "Exponential Increase" policies. 
            The policy retry specified number (immediateRetryCount) of times immediately, and then (delayedRetryCount) number of times with exponentially increasing delay between those, starting as provided. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <param name="immediateRetryCount">Number of immediate, constant retries.</param>
            <param name="delay">The first exponential delay between retries, as TimeSpan.</param>
            <param name="delayedRetryCount">The number of exponential retries.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetAdaptiveIncreaseRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method sets the "Adaptive Increase" retry policy that combines "Constant" and "Exponential Increase" policies. 
            The policy retry specified number (immediateRetryCount) of times immediately, and then (delayedRetryCount) number of times with exponentially increasing delay between those, starting as provided. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <param name="immediateRetryCount">Number of immediate, constant retries.</param>
            <param name="delay">The first exponential delay between retries, in milliseconds.</param>
            <param name="delayedRetryCount">The number of exponential retries.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetRandomRetryPolicy(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method sets the "Random" retry policy that retry with random delay generated between minDelay and maxDelay provided. 
            This policy will retry on any exception.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <param name="minDelay">Minimum delay between retries, in milliseconds.</param>
            <param name="maxDelay">Maximum delay between retries, in milliseconds.</param>
            <param name="retryCount">The number of retries.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.RetryOnAnyException(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy)">
            <summary>
            Method sets retry policy to retry on any exception type.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicyExtensions.SetRetryOnHttpException(SmartHub.Hosting.Runtime.RetryPolicy.RetryPolicy)">
            <summary>
            Method sets retry policy to retry on any exception type.
            </summary>
            <param name="policy">The policy to apply rules to.</param>
            <returns>Returns the RetryPolicy.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.RetryPolicy.RetryResult">
            <summary>
            Class represents the retry policy result for Action or Task.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.RetryPolicy.RetryResult.Attempts">
            <summary>
            Gets or sets the total number of attempts have been made, including the original attempt and all retries.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.RetryPolicy.RetryResult.IntroducedDelayMsec">
            <summary>
            Gets or sets the total delay introduced by delaying subsequent retries.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.RetryPolicy.RetryResult.Retries">
            <summary>
            Gets the number of retries that have been made.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.RetryPolicy.RetryResult.Succeeded">
            <summary>
            Gets the boolean indicator whether the execution is succeeded.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryResult.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.RetryPolicy.RetryResult`1">
            <summary>
            Class represents the retry policy result for Task or Function that returns data.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.RetryPolicy.RetryResult`1.ReturnValue">
            <summary>
            Gets or sets the return value.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.RetryPolicy.RetryResult`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.RetryPolicy.RetryCompletionStatus">
            <summary>
            Retry policy completion status.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.TemporaryFileHttpResponseMessage">
            <summary>
            Class is used to create <see cref="T:System.Net.Http.HttpResponseMessage"/> from <see cref="T:SmartHub.Hosting.Runtime.TemporaryStreamResult"/>.
            </summary>
            <remarks>Constructor automatically creates content with all required headers.</remarks>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.TemporaryStreamResult">
            <summary>
            Class represents the object store retrieval result.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.TemporaryStreamResult.ObjectStream">
            <summary>
            Gets or sets the stream containing the object.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.TemporaryStreamResult.IsFile">
            <summary>
            Gets or sets a boolean indicator whether object is saved locally as a temporary file due to its size.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.TemporaryStreamResult.IsDestroyed">
            <summary>
            Gets or sets a boolean indicator whether stream and file have been destroyed.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.TemporaryStreamResult.FilePath">
            <summary>
            Gets the file path to the temporary file in case it's been used.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.TemporaryStreamResult.FileInfo">
            <summary>
            Sets the fileinfo to the temporary file in case it's been used
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.TemporaryStreamResult.OriginalFileName">
            <summary>
            The original file name of the stream (does not necessarily have to match the name in the filePath)
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.TemporaryStreamResult.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.TemporaryStreamResult.DestroyResources">
            <summary>
            Closes and disposes the stream, and if it is a file stream then it deletes the file as well
            </summary>
            <returns>Returns a task.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.UnityResolver">
            <summary>
            Class serves as a unity container wrapper providing dependency resolving functionality to the application.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UnityResolver.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Default constructor.
            </summary>
            <param name="container">The unity container.</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UnityResolver.Dispose">
            <summary>
            Disposes any internal resources used by the class.
            </summary>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult">
            <summary>
            Class which wraps the UpdateAggregateResult with a message. Useful
            for sending warnings describing the the result.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult.#ctor">
            <summary>
            Default constructor with string.empty message.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult.#ctor(SmartHub.Hosting.Runtime.UpdateAggregateResult,System.String,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="result">The UpdateAggregateResult.</param>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult.SetResult(SmartHub.Hosting.Runtime.UpdateAggregateResult,System.String,System.Object[])">
            <summary>
            Method sets result and message.
            </summary>
            <param name="result">The UpdateAggregateResult.</param>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult.SetFailure(System.String,System.Object[])">
            <summary>
            Method sets "Failure" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult.SetPartialFailure(System.String,System.Object[])">
            <summary>
            Method sets "PartialFailure" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult.SetSuccess">
            <summary>
            Method sets "Success" result.
            </summary>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult.SetSuccess(System.String,System.Object[])">
            <summary>
            Method sets "Success" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult.SetConflict(System.String,System.Object[])">
            <summary>
            Method sets "Conflict" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult.SetNotFound">
            <summary>
            Method sets "NotFound" result.
            </summary>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.UpdateAggregateResult">
            <summary>
            Enumeration used to provide feedback from the update entry method.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateResultExtensions.IsRepoSucceeded(SmartHub.Hosting.Runtime.UpdateAggregateResult)">
            <summary>
            Method provides deterministic check whether status can be considered "successful"
            for the data repository portion. 
            Particularly Success and PartialFailure are considered to be successful for the data because PartialFailure
            is used when repository update has succeeded and event store or message queue failed.
            </summary>
            <remarks>Use this logic only when update has 2 parts - repository update and event store/message queue publishing.</remarks>
            <param name="result">The instance of the UpdateAggregateResult to evaluate.</param>
            <returns>Returns boolean indicator whether repository update portion succeeded.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult`1">
            <summary>
            Class which wraps the UpdateAggregateResult with a message. Useful
            for sending warnings describing the the result.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult`1.#ctor">
            <summary>
            Default constructor with string.empty message.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult`1.#ctor(SmartHub.Hosting.Runtime.UpdateAggregateResult,`0,System.String,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="result">The UpdateAggregateResult.</param>
            <param name="data">The data of type T.</param>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult`1.SetResult(SmartHub.Hosting.Runtime.UpdateAggregateResult,System.String,System.Object[])">
            <summary>
            Method sets result and message.
            </summary>
            <param name="result">The UpdateAggregateResult.</param>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult`1.SetFailure(System.String,System.Object[])">
            <summary>
            Method sets "Failure" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult`1.SetPartialFailure(System.String,System.Object[])">
            <summary>
            Method sets "PartialFailure" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult`1.SetSuccess">
            <summary>
            Method sets "Success" result.
            </summary>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult`1.SetSuccess(System.String,System.Object[])">
            <summary>
            Method sets "Success" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateExtendedResult`1.SetConflict(System.String,System.Object[])">
            <summary>
            Method sets "Conflict" result and message.
            </summary>
            <param name="message">The message to include.</param>
            <param name="messageParams">The optional message parameters.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Runtime.UpdateAggregateResultState`1">
            <summary>
            Class holds an aggregate update result from potentially repeatable operation. 
            </summary>
            <typeparam name="T">The aggregate type upon which the update was made.</typeparam>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.UpdateAggregateResultState`1.Result">
            <summary>
            The result of update operation. 
            <para>Success - successfully updated an aggregate, saved to the repository, and all events successfully sent to the event store and published on the queue.</para>
            <para>Failure - successfully updated an aggregate, but failed to save to the repository; in this case events won't be sent to the event store and published on the queue.</para>
            <para>Conflict - Indicates a generic error that has not caused an exception.</para>
            <para>PartialFailure - successfully updated an aggregate, saved to the repository, but events failed to be sent to the event store or published on the queue.</para>
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.UpdateAggregateResultState`1.UpdatedAggregate">
            <summary>
            An aggregate instance produced as a result of update. 
            This might be referenced to the same instance passed into the update function or another instance if aggregate was re-retrieved from the repository due to version collision.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.UpdateAggregateResultState`1.IsPassedIn">
            <summary>
            Boolean indicator whether the UpdatedAggregate points to the original aggregate instance passed into the update method.
            </summary>
        </member>
        <member name="P:SmartHub.Hosting.Runtime.UpdateAggregateResultState`1.Attempts">
            <summary>
            Gets or sets the number of update attempts that have been made.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateResultState`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateResultState`1.SetResult(SmartHub.Hosting.Runtime.UpdateAggregateResult)">
            <summary>
            Method sets result and message.
            </summary>
            <param name="result">The UpdateAggregateResult.</param>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateResultState`1.SetFailure">
            <summary>
            Method sets "Failure" result and message.
            </summary>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateResultState`1.SetPartialFailure">
            <summary>
            Method sets "PartialFailure" result and message.
            </summary>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateResultState`1.SetSuccess">
            <summary>
            Method sets "Success" result and message.
            </summary>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.Runtime.UpdateAggregateResultState`1.SetConflict">
            <summary>
            Method sets "Conflict" result and message.
            </summary>
            <returns>Returns the same instance to support fluent interface.</returns>
        </member>
        <member name="M:SmartHub.Hosting.SyncTask.Run(System.Action,System.Threading.CancellationToken)">
            <summary>
            Method executes an action unless cancellation is requested via token.
            </summary>
            <param name="stepAction">Action to execute.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:SmartHub.Hosting.SyncTask.Run``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Method executes a function unless cancellation is requested via token.
            </summary>
            <param name="stepFunc">Function to execute.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Returns a function return value</returns>
        </member>
        <member name="T:SmartHub.Hosting.ValueProviders.FilterParametersProvider">
            <summary>
            Class implements a value provider interface for the FilterParametersProvider. The data is being gathered from the query string parameters.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.ValueProviders.FilterParametersProvider.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Class constructor.
            </summary>
            <param name="queryStringParams">The query strings parameters.</param>
        </member>
        <member name="M:SmartHub.Hosting.ValueProviders.FilterParametersProvider.ContainsPrefix(System.String)">
            <summary>
            Method verifies if request contains specific prefix.
            </summary>
            <param name="prefix">The prefix to verify.</param>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:SmartHub.Hosting.ValueProviders.FilterParametersProvider.GetValue(System.String)">
            <summary>
            Method gets the value of FilterParameters.
            </summary>
            <param name="key">The key to use (this implementation ignores it).</param>
            <returns>Returns an instance of FilterParameters class.</returns>
        </member>
        <member name="T:SmartHub.Hosting.ValueProviders.FilterParametersProviderFactory">
            <summary>
            Class implements a value provider factory for the FilterParametersProvider.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.ValueProviders.FilterParametersProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Method returns the value provider for FilterParameters.
            </summary>
            <param name="actionContext">The Web API action context.</param>
            <returns>Returns an instance of FilterParametersProvider.</returns>
        </member>
        <member name="T:SmartHub.Hosting.ValueProviders.PagedDataParametersProvider">
            <summary>
            Class implements a value provider interface for the PagedDataParameters. The data is being gathered from the query string parameters, or default values are used in lack of data.
            </summary>
        </member>
        <member name="F:SmartHub.Hosting.ValueProviders.PagedDataParametersProvider.MaxApiPageSize">
            <summary>
            Gets or sets maximum page size allowed for API.
            </summary>
            <remarks>Value will be used for all API endpoints.</remarks>
        </member>
        <member name="M:SmartHub.Hosting.ValueProviders.PagedDataParametersProvider.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Class constructor.
            </summary>
            <param name="actionContext">Action context</param>
            <param name="queryStringParams">The query strings parameters.</param>
        </member>
        <member name="M:SmartHub.Hosting.ValueProviders.PagedDataParametersProvider.ContainsPrefix(System.String)">
            <summary>
            Method verifies if request contains specific prefix.
            </summary>
            <param name="prefix">The prefix to verify.</param>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:SmartHub.Hosting.ValueProviders.PagedDataParametersProvider.GetValue(System.String)">
            <summary>
            Method gets the value of PagedDataParameters.
            </summary>
            <param name="key">The key to use (this implementation ignores it).</param>
            <returns>Returns an instance of PagedDataParameters class.</returns>
        </member>
        <member name="T:SmartHub.Hosting.ValueProviders.PagedDataParametersProviderFactory">
            <summary>
            Class implements a value provider factory for the PagedDataParameters.
            </summary>
        </member>
        <member name="M:SmartHub.Hosting.ValueProviders.PagedDataParametersProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Method returns the value provider for PagedDataParameters.
            </summary>
            <param name="actionContext">The Web API action context.</param>
            <returns>Returns an instance of PagedDataParametersProvider.</returns>
        </member>
        <member name="T:SmartHub.Hosting.Convention">
            <summary>
            Provides methods for checking method arguments for validity and throwing localizable exceptions for invalid
            arguments or argument combinations.
            </summary>
            <remarks>The alternative names for this class were: Validator, Pact, Deal.</remarks>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNull(System.Object,System.String,System.String)">
            <summary>
            Checks the specified parameter to ensure it is not null and if so, throws an <see cref="T:ArgumentNullException"/>.
            </summary>
            <param name="value">The parameter value to compare with null.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message to pass to the exception.</param>
            <exception cref="T:ArgumentNullException">The parameter is null.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Checks the specified string to ensure it is not null or empty and if so, throws an <see cref="T:ArgumentNullException"/>.
            </summary>
            <param name="value">The parameter value to check.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message to pass to the exception.</param>
            <exception cref="T:ArgumentNullException">The parameter is null.</exception>
            <exception cref="T:ArgumentException">The parameter is an empty string or a string consisting of only whitespace.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNullOrWhitespace(System.String,System.String,System.String)">
            <summary>
            Checks the specified string to ensure it is not null, empty, or consists solely of whitespace and if so, throws an <see cref="T:ArgumentNullException"/>.
            </summary>
            <param name="value">The parameter value to check.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">Message to send in exception.</param>
            <exception cref="T:ArgumentNullException">The parameter is null.</exception>
            <exception cref="T:ArgumentException">The parameter is an empty string or a string consisting of only whitespace.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNullOrEmpty(System.Array,System.String)">
            <summary>
            Checks the specified array to ensure it is not null or empty and if so, throws an <see cref="T:ArgumentNullException"/>.
            </summary>
            <param name="array">The parameter value to check.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:ArgumentNullException">The parameter is null.</exception>
            <exception cref="T:ArgumentException">The parameter is an empty array.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNullOrEmpty(System.Collections.IList,System.String)">
            <summary>
            Checks the specified IList to ensure it is not null or empty and if so, throws an <see cref="T:ArgumentNullException"/>.
            </summary>
            <param name="list">The parameter value to check.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:ArgumentNullException">The parameter is null.</exception>
            <exception cref="T:ArgumentException">The parameter is an empty array.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfEmpty(System.Guid,System.String,System.String)">
            <summary>
            Checks the specified guid to ensure it is not empty and if so, throws an <see cref="T:ArgumentException"/>.
            </summary>
            <param name="guid">The parameter value to check.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">Optional custom error message.</param>
            <exception cref="T:ArgumentException">The parameter is an empty guid.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNullElement(System.Array,System.String)">
            <summary>
            Checks the specified array to ensure it does not contain any null references and if so,
            throws an <see cref="T:ArgumentException"/>.
            </summary>
            <remarks>
            If the value specified in the <paramref name="array"/> parameter is itself null, no check
            is performed. Use <see cref="M:ThrowIfNull"/> or <see cref="M:ThrowIfNullOrEmpty"/> if
            additional validation is needed.
            </remarks>
            <param name="array">The array to check. Only the first dimension is checked.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:ArgumentException">The array contains at least one null reference.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNullElement(System.Collections.IEnumerable,System.String)">
            <summary>
            Checks the specified collection to ensure it does not contain any null references and if so,
            throws an <see cref="T:ArgumentException"/>.
            </summary>
            <remarks>
            If the value specified in the <paramref name="collection"/> parameter is itself null, no check
            is performed. Use <see cref="M:ThrowIfNull"/> or <see cref="M:ThrowIfNullOrEmpty"/> if
            additional validation is needed.
            The collections non-generic enumerator will be used to enumerate the collection, even if the
            type implements IList.
            </remarks>
            <param name="collection">The collection to check.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:ArgumentException">The collection contains at least one null reference.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfPatternFails(System.String,System.String)">
            <summary>
            Matches the specified <paramref name="value"/> against a regular expression, <paramref name="regex"/>,
            and throws an <see cref="T:ArgumentException"/> if the pattern does not match.
            </summary>
            <remarks>
            If the value specified in the <paramref name="value"/> parameter is itself null, no check
            is performed. Use <see cref="M:ThrowIfNull"/> or <see cref="M:ThrowIfNullOrEmpty"/> if
            additional validation is needed.
            </remarks>
            <param name="value">The parameter, which is not checked if it's null.</param>
            <param name="regex">The regular expression pattern to match.</param>
            <exception cref="T:ArgumentException"><paramref name="value"/> does not match the regular expression.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfPatternFails(System.String,System.String,System.String)">
            <summary>
            Matches the specified <paramref name="value"/> against a regular expression, <paramref name="regex"/>,
            and throws an <see cref="T:ArgumentException"/> if the pattern does not match.
            </summary>
            <remarks>
            If the value specified in the <paramref name="value"/> parameter is itself null, no check
            is performed. Use <see cref="M:ThrowIfNull"/> or <see cref="M:ThrowIfNullOrEmpty"/> if
            additional validation is needed.
            </remarks>
            <param name="value">The parameter, which is not checked if it's null.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="regex">The regular expression pattern to match.</param>
            <exception cref="T:ArgumentException"><paramref name="value"/> does not match the regular expression.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfPatternFails(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Matches the specified <paramref name="value"/> against a regular expression, <paramref name="regex"/>,
            and throws an <see cref="T:ArgumentException"/> if the pattern does not match.
            </summary>
            <remarks>
            If the value specified in the <paramref name="value"/> parameter is itself null, no check
            is performed. Use <see cref="M:ThrowIfNull"/> or <see cref="M:ThrowIfNullOrEmpty"/> if
            additional validation is needed.
            </remarks>
            <param name="value">The parameter, which is not checked if it's null.</param>
            <param name="regex">The regular expression pattern to match.</param>
            <exception cref="T:ArgumentException"><paramref name="value"/> does not match the regular expression.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfPatternFails(System.String,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Matches the specified <paramref name="value"/> against a regular expression, <paramref name="regex"/>,
            and throws an <see cref="T:ArgumentException"/> if the pattern does not match.
            </summary>
            <remarks>
            If the value specified in the <paramref name="value"/> parameter is itself null, no check
            is performed. Use <see cref="M:ThrowIfNull"/> or <see cref="M:ThrowIfNullOrEmpty"/> if
            additional validation is needed.
            </remarks>
            <param name="value">The parameter, which is not checked if it's null.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="regex">The regular expression pattern to match.</param>
            <exception cref="T:ArgumentException"><paramref name="value"/> does not match the regular expression.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfOutOfRange(System.Enum,System.String)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is not
            a valid value within the specified range.
            </summary>
            <param name="value">The enum value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is not a valid enum value.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfOutOfRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is not
            a valid value within the specified range.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="min">The minimum allowable value (inclusive).</param>
            <param name="max">The maximum allowable value (inclusive).</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is not within the inclusive range.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfOutOfRange(System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is not
            a valid value within the specified range.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="min">The minimum allowable value (inclusive).</param>
            <param name="max">The maximum allowable value (inclusive).</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is not within the inclusive range.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfOutOfRange(System.Decimal,System.String,System.Decimal,System.Decimal)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is not
            a valid value within the specified range.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="min">The minimum allowable value (inclusive).</param>
            <param name="max">The maximum allowable value (inclusive).</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is not within the inclusive range.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfOutOfRange(System.Double,System.String,System.Double,System.Double)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is not
            a valid value within the specified range.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="min">The minimum allowable value (inclusive).</param>
            <param name="max">The maximum allowable value (inclusive).</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is not within the inclusive range.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfOutOfRange``1(``0,``0,``0)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is not
            a valid value within the specified range.
            </summary>
            <remarks>
            If the value specified in the <paramref name="value"/> parameter is a null reference, the check will not
            be performed. Use <see cref="M:ThrowIfNull"/> if additional validation is needed.
            </remarks>
            <param name="value">The parameter value to validate. If this value is null, no check is performed.</param>
            <param name="min">The minimum allowable value (inclusive).</param>
            <param name="max">The maximum allowable value (inclusive).</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is not within the inclusive range.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfOutOfRange``1(``0,System.String,``0,``0)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is not
            a valid value within the specified range.
            </summary>
            <remarks>
            If the value specified in the <paramref name="value"/> parameter is a null reference, the check will not
            be performed. Use <see cref="M:ThrowIfNull"/> if additional validation is needed.
            </remarks>
            <param name="value">The parameter value to validate. If this value is null, no check is performed.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="min">The minimum allowable value (inclusive).</param>
            <param name="max">The maximum allowable value (inclusive).</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is not within the inclusive range.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNegative(System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is less
            than zero.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is negative.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNegative(System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is less
            than zero.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is negative.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNegative(System.Decimal,System.String)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is less
            than zero.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is negative.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNegative(System.Double,System.String)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is less
            than zero.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is negative.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNegative(System.TimeSpan,System.String)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is less
            than zero.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is negative.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNegativeOrZero(System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is less
            than one.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is not greater than zero.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNegativeOrZero(System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is less
            than one.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is not greater than zero.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNegativeOrZero(System.Decimal,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is less
            than one.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is not greater than zero.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNegativeOrZero(System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is less
            than or equal to zero.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is not greater than zero.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfNegativeOrZero(System.TimeSpan,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> exception of the specified <paramref name="value"/> is less
            than or equal to zero.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:ArgumentOutOfRangeException"><paramref name="value"/> is not greater than zero.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfInvalidFileName(System.String,System.String)">
            <summary>
            Throws an <see cref="T:ArgumentException"/> if the specified <paramref name="fileName"/> contains
            characters that are invalid in a file name such as directory separators or other reserved characters.
            Throws a <see cref="T:PathTooLongException"/> if the file name is too long.
            </summary>
            <remarks>
            If the <paramref name="fileName"/> parameter is null, no checks will be performed. Use the
            <see cref="M:ThrowIfNull"/> if additional checks are necessary.
            </remarks>
            <param name="fileName">The file name to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:PathTooLongException">The file name contains too many characters.</exception>
            <exception cref="T:ArgumentException">The file name contains invalid characters.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfInvalidPath(System.String,System.String)">
            <summary>
            Throws an <see cref="T:ArgumentException"/> if the specified <paramref name="path"/> contains
            characters that are invalid in a path name such as directory separators or other reserved characters.
            Throws a <see cref="T:PathTooLongException"/> if the path is too long.
            </summary>
            <remarks>
            If the <paramref name="path"/> parameter is null, no checks will be performed. Use the
            <see cref="M:ThrowIfNull"/> if additional checks are necessary.
            </remarks>
            <param name="path">The path to validate.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:PathTooLongException">The path contains too many characters.</exception>
            <exception cref="T:ArgumentException">The path contains invalid characters.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfFileNotFound(System.String,System.String)">
            <summary>
            Throws a <see cref="T:FileNotFoundException"/> if the specified file does not exist on disk.
            </summary>
            <remarks>
            If the value specified in the <paramref name="fileName"/> parameter is itself null, no check
            is performed. Use <see cref="M:ThrowIfNull"/> or <see cref="M:ThrowIfNullOrEmpty"/> if
            additional validation is needed.
            </remarks>
            <param name="fileName">The path and file name to check the existence of.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:FileNotFoundException">The <paramref name="fileName"/> specified does not exist.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowIfDirectoryNotFound(System.String,System.String)">
            <summary>
            Throws a <see cref="T:DirectoryNotFoundException"/> if the specified file does not exist on disk.
            </summary>
            <remarks>
            If the value specified in the <paramref name="directory"/> parameter is itself null, no check
            is performed. Use <see cref="M:ThrowIfNull"/> or <see cref="M:ThrowIfNullOrEmpty"/> if
            additional validation is needed.
            </remarks>
            <param name="directory">The directory path to check the existence of.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:DirectoryNotFoundException">The <paramref name="directory"/> specified does not exist.</exception>
        </member>
        <member name="M:SmartHub.Hosting.Convention.ThrowArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            Throws a <see cref="T:ArgumentOutOfRangeException"/>
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SmartHub.Hosting.Convention.Require(System.Func{System.Boolean},System.String)">
            <summary>
            Asserts condition and throws an exception if the condition fails.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:SmartHub.Hosting.Convention.Require(System.Func{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts condition and throws an exception if the condition fails.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="format">The exception message template (format).</param>
            <param name="args">The exception message template arguments.</param>
        </member>
        <member name="M:SmartHub.Hosting.Convention.Require(System.Boolean,System.String)">
            <summary>
            Asserts condition and throws an exception if the condition fails.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:SmartHub.Hosting.Convention.Require(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts condition and throws an exception if the condition fails.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="format">The exception message template (format).</param>
            <param name="args">The exception message template arguments.</param>
        </member>
        <member name="M:SmartHub.Hosting.Convention.RequireAuthorization(System.Boolean,System.String)">
            <summary>
            Asserts condition and throws a Authorization exception if the condition fails.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:SmartHub.Hosting.Convention.RequireBusinessRule(System.Boolean,System.String)">
            <summary>
            Asserts condition and throws a BusinessRule exception if the condition fails.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:SmartHub.Hosting.WebConstants.MediaTypes">
            <summary>
            This class represents a couple of the possible media types used http headers in our application.
            Add more as needed.
            </summary>
        </member>
        <member name="F:System.IO.OverwriteAlgorithm.Quick">
            <summary>
            1 pass.
            This method will simply overwrite a file with zeros before deleting it.
            It is not secure and should only be used for unimportant files and for quick free space locks.
            </summary>
        </member>
        <member name="F:System.IO.OverwriteAlgorithm.Random">
            <summary>
            1 pass.
            This method will simply overwrite a file one time with random data before deleting it.
            It is not secure and should only be used for unimportant files.
            </summary>
        </member>
        <member name="F:System.IO.OverwriteAlgorithm.DoD3">
            <summary>
            3 passes.
            This method is based on the U.S. Department of Defense's standard 'National Industrial Security Program Operating Manual' (DoD 5220.22-M E).  
            It will overwrite a file 3 times.  This method offers medium security, use it only on files that do not contain sensitive information.
            </summary>
        </member>
        <member name="F:System.IO.OverwriteAlgorithm.DoD7">
            <summary>
            7 passes.
            This method is based on the U.S. Department of Defense's standard 'National Industrial Security Program Operating Manual' (US DoD 5220.22-M ECE).  
            It will overwrite a file 7 times.  This method incorporates the DoD-3 method.  It is secure and should be used for general files.
            </summary>
        </member>
        <member name="F:System.IO.OverwriteAlgorithm.Gutmann">
            <summary>
            35 passes.
            This method is based on Peter Gutmann's article 'Secure Deletion of Data From Magnetic and Solid-State Memory.'  
            The data will be overwritten 35 times using the patterns and methods described in the article.  
            While this method takes the longest amount of time, it is the most secure method available and should be used for all files that contain sensitive information.
            </summary>
        </member>
        <member name="M:System.IO.FileSecureEraseExtensions.EraseAsync(System.IO.DirectoryInfo,System.IO.OverwriteAlgorithm)">
            <summary>
            Method deletes directory, subdirectories and all the files under this directory previously overriding files data with dummy data.
            </summary>
            <param name="directory">The DirectoryInfo.</param>
            <param name="overwriteAlgorithm">Overwrite algorithm.</param>
            <returns>Task</returns>
        </member>
        <member name="M:System.IO.FileSecureEraseExtensions.EraseAsync(System.IO.FileInfo,System.IO.OverwriteAlgorithm)">
            <summary>
            Method erases file data previously overriding it with dummy data.
            </summary>
            <param name="file">The FileInfo.</param>
            <param name="overwriteAlgorithm">Overwrite algorithm.</param>
            <returns>Task</returns>
        </member>
        <member name="M:System.IO.FileSecureEraseExtensions.OverwriteFileQuick(System.IO.FileInfo)">
            <summary>
            Overwrite the file with zero bytes.
            </summary>
            <param name="file">The file.</param>
            <returns>Task</returns>
        </member>
        <member name="M:System.IO.FileSecureEraseExtensions.OverwriteFileRandom(System.IO.FileInfo)">
            <summary>
            Overwrite the file with random data.
            </summary>
            <param name="file">The file.</param>
            <returns>Task</returns>
        </member>
        <member name="M:System.IO.FileSecureEraseExtensions.OverwriteFileDoD3(System.IO.FileInfo)">
            <summary>
            Overwrite the file based on the U.S. Department of Defense's standard 'National Industrial Security Program Operating Manual' (DoD 5220.22-M E).
            </summary>
            <param name="file">The file.</param>
            <returns>Task</returns>
        </member>
        <member name="M:System.IO.FileSecureEraseExtensions.OverwriteFileDoD7(System.IO.FileInfo)">
            <summary>
            Overwrite the file based on the U.S. Department of Defense's standard 'National Industrial Security Program Operating Manual' (US DoD 5220.22-M ECE).
            </summary>
            <param name="file">The file.</param>
            <returns>Task</returns>
        </member>
        <member name="M:System.IO.FileSecureEraseExtensions.OverwriteFileGutmann(System.IO.FileInfo)">
            <summary>
            Overwrite the file based on the Peter Gutmann's algorithm.
            </summary>
            <param name="file">The file.</param>
            <returns>Task</returns>
        </member>
        <member name="M:System.Security.SecureStringExtensions.ReadAsString(System.Security.SecureString)">
            <summary>
            Method reads a string value from SecureString object as a String object.
            </summary>
            <param name="secureString">The SecureString object.</param>
            <returns>Returns a String object.</returns>
        </member>
        <member name="M:System.Security.SecureStringExtensions.WriteString(System.Security.SecureString,System.String)">
            <summary>
            Method writes a string value to the SecureString object.
            </summary>
            <param name="secureString">The SecureString object.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:System.DateTimeExtensions.ToUtcEpoch(System.DateTime)">
            <summary>
            Method converts DateTime instance to EPOCH (seconds) format that is the number of seconds elapsed since Jan 1, 1970.
            </summary>
            <param name="dt">An instance to convert.</param>
            <returns>Returns long value.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToUtcEpochMsec(System.DateTime)">
            <summary>
            Method converts DateTime instance to EPOCH (milliseconds) format that is the number of milliseconds elapsed since Jan 1, 1970.
            </summary>
            <param name="dt">An instance to convert.</param>
            <returns>Returns long value.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToUtcStartOfDay(System.DateTime)">
            <summary>
            Method converts the DateTime instance to the beginning of day (00:00:00-time).
            </summary>
            <param name="dt">An instance to convert.</param>
            <returns>DateTime instance</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToUtcEndOfDay(System.DateTime)">
            <summary>
            Method converts the DateTime instance to the end of day (23:59:59-time).
            </summary>
            <param name="dt">An instance to convert.</param>
            <returns>DateTime instance</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToStartOfMonth(System.DateTime)">
            <summary>
            Method converts the DateTime instance to the start of month.
            </summary>
            <param name="dt">An instance to convert.</param>
            <returns>DateTime instance</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToEndOfMonth(System.DateTime)">
            <summary>
            Method converts the DateTime instance to the last day of month.
            </summary>
            <param name="dt">An instance to convert.</param>
            <returns>DateTime instance</returns>
        </member>
        <member name="M:System.DateTimeExtensions.Between(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Method determines whether a DateTime instance is in between other 2 instances (begin/end).
            </summary>
            <param name="cur">The DateTime to compare.</param>
            <param name="begin">The begin date.</param>
            <param name="end">The end date.</param>
            <returns>Returns true if in between, otherwise false.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetSystemUtcDate(System.DateTime)">
            @func GetSystemUtcDate
            <summary>
            Method converts the date time value to the UTC equivalent of midnight ET on the current date in ET.
            It is important to understand that regardless of the timezone the server is, we care about the Date
            currently in ET.
            If it is currently 8/1/2015 3:40PM UTC, this method should return 8/1/2015 4:00AM UTC.
            If it is currently 8/1/2015 2:40AM UTC, this method should return 7/31/2015 4:00AM UTC.
            If it is currently 2/10/2015 2:40PM UTC, this method should return 2/10/2015 5:00AM UTC.
            If it is currently 2/10/2015 1:40AM UTC, this method should return 2/09/2015 5:00AM UTC.
            </summary>
            <param name="dt">The parameter value is ignored</param>
            <returns>Returns new instance of DateTime object</returns>
            <remarks>The input parameter is ignored and the date is taken as the current UtcNow. </remarks>
        </member>
        <member name="M:System.DateTimeExtensions.ToSystemDateTime(System.DateTime)">
            <summary>
            Method converts the date time value to a System date/time. The "Eastern Standard Time" is currently selected as system time zone.
            </summary>
            <remarks>This value is currently used by system processes that must have common US-based time zone.</remarks>
            <param name="dt">The date/time value</param>
            <returns>Returns new instance of DateTime object.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToSystemUtcDate(System.DateTime)">
            <summary>
            Method converts the date time value to the UTC equivalent of midnight ET.
            If you submit 8/1/2015 3:40PM, this method should return 8/1/2015 4:00AM.
            If you submit 2/10/2015 2:40AM, this method should return 2/10/2015 5:00AM.
            </summary>
            <param name="dt">The date/time value</param>
            <returns>Returns new instance of DateTime object</returns>
            <remarks>
            The time zone of the input date is ignored, and the input date is taken as representing a date in the system time (Eastern).
            This method is to be used for instance to process the dates coming from search query parameters (in case they have a timezone attached)
            </remarks>
        </member>
        <member name="M:System.DateTimeExtensions.IsMinValue(System.DateTime)">
            <summary>
            Determines if a given time represents an approximate minimum DateTime.
            </summary>
            <param name="time">The DateTime to check.</param>
            <returns>True if the time is likely a minimum DateTime, based on its year and month; otherwise, false.</returns>
            <remarks>This method is useful because DateTime.MinValue can be serialized with the offset of its originating system,
            so a consumer might not see a literal DateTime.MinValue equivalent. Dates that represent real values that fall in
            January of year 1 are unlikely.</remarks>
        </member>
        <member name="M:System.DateTimeExtensions.ToSystemUtcDateTime(System.DateTime)">
            <summary>
            Method converts the date time from Eastern to UTC.
            If you submit 2/1/2015 3:40PM, this method should return 2/1/2015 8:40PM.
            If you submit 8/1/2015 3:40PM, this method should return 8/1/2015 7:40PM.
            </summary>
            <param name="dt">The date/time value</param>
            <returns>Returns new instance of DateTime object</returns>
            <remarks>
            The time zone of the input date is ignored, and the input date is taken as representing a date in the system time (Eastern).
            </remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializerExtensions.Deserialize``1(Newtonsoft.Json.JsonSerializer,System.String)">
            <summary>
            Deserializes the Json structure contained by the specified string into an instance of the specified type.
            </summary>
            <param name="serializer">Serializer instance.</param>
            <param name="jsonData">The json string containing the object.</param>
            <returns>The instance of T being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializerExtensions.Deserialize(Newtonsoft.Json.JsonSerializer,System.String,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified string into an instance of the specified type.
            </summary>
            <param name="serializer">Serializer instance.</param>
            <param name="jsonData">The json string containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializerExtensions.Serialize``1(Newtonsoft.Json.JsonSerializer,``0)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and returns Json string. 
            </summary>
            <param name="serializer">Serializer instance.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <returns>Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializerExtensions.Serialize(Newtonsoft.Json.JsonSerializer,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and returns Json string. 
            </summary>
            <param name="serializer">Serializer instance.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <returns>Json string.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterTypeIfNot``2(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Register a type if not already registered.
            </summary>
            <typeparam name="TFrom">Type to be registered.</typeparam>
            <typeparam name="TTo">Registered type's concrete implementation type.</typeparam>
            <param name="unityContainer">The Unity container.</param>
            <returns>The Unity container.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterTypeIfNot(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type)">
            <summary>
            Register a type if not already registered.
            </summary>
            <param name="unityContainer">The Unity container.</param>
            <param name="from">Type to be registered.</param>
            <param name="to">Registered type's concrete implementation type.</param>
            <returns>The Unity container.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterTypeIfNot(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Register a type if not already registered.
            </summary>
            <param name="unityContainer">The Unity container.</param>
            <param name="from">Type to be registered.</param>
            <param name="to">Registered type's concrete implementation type.</param>
            <param name="lifetimeManager">Lifetime manager associated with registered type.</param>
            <returns>The Unity container.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterTypeIfNot``2(Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Register a type if not already registered.
            </summary>
            <typeparam name="TFrom">Type to be registered.</typeparam>
            <typeparam name="TTo">Registered type's concrete implementation type.</typeparam>
            <param name="unityContainer">The Unity container.</param>
            <param name="name">Name associated with registered type.</param>
            <returns>The Unity container.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterTypeIfNot``2(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Register a type if not already registered.
            </summary>
            <typeparam name="TFrom">Type to be registered.</typeparam>
            <typeparam name="TTo">Registered type's concrete implementation type.</typeparam>
            <param name="unityContainer">The Unity container.</param>
            <param name="lifetimeManager">Lifetime manager associated with registered type.</param>
            <returns>The Unity container.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterTypeIfNot``2(Microsoft.Practices.Unity.IUnityContainer,System.String,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Register a type if not already registered.
            </summary>
            <typeparam name="TFrom">Type to be registered.</typeparam>
            <typeparam name="TTo">Registered type's concrete implementation type.</typeparam>
            <param name="unityContainer">The Unity container.</param>
            <param name="name">Name associated with registered type.</param>
            <param name="lifetimeManager">Lifetime manager associated with registered type.</param>
            <returns>The Unity container.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstanceIfNot``1(Microsoft.Practices.Unity.IUnityContainer,``0)">
            <summary>
            Register existing instance if not already registered.
            </summary>
            <typeparam name="TInstance">Instance's type.</typeparam>
            <param name="unityContainer">The Unity container.</param>
            <param name="instance">Instance to register.</param>
            <returns>The Unity container.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstanceIfNot``1(Microsoft.Practices.Unity.IUnityContainer,System.String,``0)">
            <summary>
            Register existing instance if not already registered.
            </summary>
            <typeparam name="TInstance">Instance's type.</typeparam>
            <param name="unityContainer">The Unity container.</param>
            <param name="name">Name associated with registered type.</param>
            <param name="instance">Instance to register.</param>
            <returns>The Unity container.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstanceIfNot``1(Microsoft.Practices.Unity.IUnityContainer,System.String,``0,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Register existing instance if not already registered.
            </summary>
            <typeparam name="TInstance">Instance's type.</typeparam>
            <param name="unityContainer">The Unity container.</param>
            <param name="name">Name associated with registered type.</param>
            <param name="instance">Instance to register.</param>
            <param name="lifetimeManager">Lifetime manager associated with registered type.</param>
            <returns>The Unity container.</returns>
        </member>
    </members>
</doc>
