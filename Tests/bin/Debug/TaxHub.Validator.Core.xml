<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaxHub.Validator.Core</name>
    </assembly>
    <members>
        <member name="T:TaxHub.Validator.Core.Compiler.Compiler">
            <summary>
            Class creates a callable function that will run the validations and return the validation results
            </summary>
        </member>
        <member name="M:TaxHub.Validator.Core.Compiler.Compiler.Compile(System.Collections.Generic.List{TaxHub.Validator.Validations.Validation},TaxHub.Validator.Core.Compiler.CompilerContext)">
            <summary>
            Converts the provided validations and context into a callable function that can be used to run validations
            </summary>
            <param name="validations"></param>
            <param name="context"></param>
            <returns>The Callable lambda function</returns>
        </member>
        <member name="M:TaxHub.Validator.Core.Extensions.ValidationExtensions.GetTokenNames(TaxHub.Validator.Validations.Validation)">
            <summary>
            Get the names of all the tokens involved in the validations.
            Includes the tokens in the Validation text and in the message.
            </summary>
            <param name="validation">The validations</param>
            <returns>A list of token names, as writing in the text</returns>
        </member>
        <member name="T:TaxHub.Validator.Core.Lexer.ExecutableNodeWithParameters">
            <summary>
            Executable Node with Parameters
            </summary>
            <seealso cref="T:TaxHub.Validator.Core.Lexer.ExecutableNode" />
        </member>
        <member name="P:TaxHub.Validator.Core.Lexer.ExecutableNodeWithParameters.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="T:TaxHub.Validator.Core.Lexer.NodeParameterType">
            <summary>
            Represents the type of parameter in an Expression Executable Node.
            </summary>
        </member>
        <member name="T:TaxHub.Validator.Core.Parser.Parser">
            <summary>
            Parser class used the parse a lexeme graph and convert it into an executable lambda that handles running the validation
            </summary>
        </member>
        <member name="M:TaxHub.Validator.Core.Parser.Parser.Parse(System.Collections.Generic.LinkedList{TaxHub.Validator.Core.Lexer.ExecutableNode},TaxHub.Validator.Core.Compiler.CompilerContext)">
            <summary>
            Parse the lexeme Graph using the Compiler context and return an expression Lambda
            </summary>
            <param name="lexemeGraph"></param>
            <param name="context"></param>
            <returns>Expression that will run validations when run</returns>
        </member>
        <member name="M:TaxHub.Validator.Core.Parser.Parser.BuildStaticMethodCallExpressionAndParameters(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Builds an expression to call specified method with passed parameters.
            </summary>
            <returns>An expression.</returns>
        </member>
        <member name="T:TaxHub.Validator.Core.Parser.TemplateExecutionContext">
            <summary>
            Class containing all tokens for the current context
            </summary>
        </member>
        <member name="M:TaxHub.Validator.Core.Parser.TemplateExecutionContext.#ctor(System.Collections.Generic.Dictionary{System.String,TaxHub.TokenParser.Core.Tokens.IToken})">
            <summary>
            Constructor for the Template Execution Context.
            </summary>
            <param name="tokenList"></param>
        </member>
        <member name="M:TaxHub.Validator.Core.Parser.TemplateExecutionContext.ReplaceTokensInMessage(System.String)">
            <summary>
            Replaces tokens in the message by token values.
            </summary>
            <param name="message">Message containing tokens</param>
            <returns>Message with tokens replaced by token values</returns>
        </member>
        <member name="M:TaxHub.Validator.Core.Parser.TemplateExecutionContext.GetToken(System.String)">
            <summary>
            Retrieve a token from the current contex.
            </summary>
            <param name="name">The name of the token.</param>
            <returns><see cref="T:TaxHub.TokenParser.Core.Tokens.IToken"/></returns>
        </member>
        <member name="M:TaxHub.Validator.Core.Parser.ValidationResultAggregator.Aggregate(TaxHub.Validator.Validations.ValidatorResultSet[])">
            <summary>
            Aggregate all the ValidatorResultSets into a collection of ValidationResults that contain non-passing results.
            </summary>
            <param name="resultSets"></param>
            <returns></returns>
        </member>
        <member name="T:TaxHub.Validator.Core.Tokenizer.Tokenizer">
            <summary>
            Tokenizer Class that converts validations into a Linked List of Executable Nodes
            </summary>
        </member>
        <member name="F:TaxHub.Validator.Core.Tokenizer.Tokenizer.FIND_TOKEN_REGEX">
            <summary>
            Regex used to identify and extract tokens from the text
            </summary>
        </member>
        <member name="M:TaxHub.Validator.Core.Tokenizer.Tokenizer.GetTokenNames(System.String)">
            <summary>
            Gets the token names found in passed in validation text.
            </summary>
            <param name="validationText">Text to search</param>
            <returns>List of tokens names without {}</returns>
        </member>
        <member name="M:TaxHub.Validator.Core.Tokenizer.Tokenizer.Tokenize(System.Collections.Generic.List{TaxHub.Validator.Validations.Validation})">
            <summary>
            Converts the provided list of validations into a graph of executable nodes
            </summary>
            <param name="validations"></param>
            <returns>A Linked List of Executable nodes representing the validation</returns>
        </member>
        <member name="M:TaxHub.Validator.Core.Tokens.IRecordValidator.Validate(System.String,System.Collections.Generic.List{TaxHub.Validator.Validations.Validation},System.Collections.Generic.Dictionary{System.String,TaxHub.TokenParser.Core.Tokens.IToken})">
            <summary>
            Validate tokens.
            </summary>
            <param name="sectionName">The section name for the validation if any</param>
            <param name="validations">The validations to apply to token map.</param>
            <param name="replacements">A token map that resolves to functions that can evaluate them.</param>
            <returns></returns>
        </member>
    </members>
</doc>
