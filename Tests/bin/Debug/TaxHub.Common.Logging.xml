<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaxHub.Common.Logging</name>
    </assembly>
    <members>
        <member name="T:TaxHub.Common.Logging.ApplicationInformationEnricher">
            <summary>
            The application information enricher.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationInformationEnricher.Enrich(Serilog.Events.LogEvent,Serilog.Core.ILogEventPropertyFactory)">
            <summary>
            Enrich the log event.
            </summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
        </member>
        <member name="T:TaxHub.Common.Logging.IAppLogger">
            <summary>
            The logging API, used for writing log events.
            </summary>
            <example>
            IAppLogger log = ... 
            var thing = "World";
            log.Information("Hello, {Thing}!", thing);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.WithProperty(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Create a logger that enriches log events with provided properties.
            </summary>
            <param name="props">Properties that apply in the event.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.WithProperty(System.String,System.Object,System.Boolean)">
            <summary>
            Create a logger that enriches log events with the specified property.
            </summary>
            <param name="propertyName">The property Name. </param>
            <param name="value">The value.</param>
            <param name="destructureObjects">The destructure Objects.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.WithModule(System.String,System.String)">
            <summary>
            Create a logger that enriches log events with the module and submodule properties.
            </summary>
            <param name="moduleName">The module Name. </param>
            <param name="subModule">The submodule Name.</param>
            <returns>A logger that will enrich log events for the module and submodule properties.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.WithCorrelation(System.String)">
            <summary>
            Create a logger that enriches log events with the specified correlation id.
            </summary>
            <param name="correlationId">The correlation id. </param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.WithCorrelation(System.Guid)">
            <summary>
            Create a logger that enriches log events with the specified correlation id.
            </summary>
            <param name="correlationId">The correlation id. </param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.FromSource``1">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <typeparam name="TSource">Type generating log messages in the context.</typeparam>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.AsSensuAlert(TaxHub.Common.Logging.SensuAlertType)">
            <summary>
            Create a logger that marks log events as required to be sent to Sensu monitoring system.
            </summary>
            <param name="alertType">The application custom Sensu alert type.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.FromSource(System.Type)">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <param name="source">Type generating log messages in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Write(TaxHub.Common.Logging.LogEventLevel,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">The messageTemplate</param>
            <param name="propertyValues">The propertyValues</param>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Write(TaxHub.Common.Logging.LogEventLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.IsEnabled(TaxHub.Common.Logging.LogEventLevel)">
            <summary>
            Determine if events at the specified level will be passed through
            to the log sinks.
            </summary>
            <param name="level">Level to check.</param>
            <returns>True if the level is enabled; otherwise, false.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Verbose(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Debug(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="T:System.Diagnostics.Debug"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.UtcNow);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="T:System.Diagnostics.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Debug(System.Collections.Generic.IEnumerable{System.Exception},System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="T:System.Diagnostics.Debug"/> level and multiple associated exceptions.
            </summary>
            <param name="exceptions">Collection of exceptions related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Warning(System.Collections.Generic.IEnumerable{System.Exception},System.String,System.Object[])">
            <summary>
            Write a log event with the System.Diagnostics.Warning level and multiple associated exceptions.
            </summary>
            <param name="exceptions">Collection of exceptions related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Information(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Information(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Warning(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Warning(System.Exception)">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Error(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Error(System.Exception)">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Error(System.Collections.Generic.IEnumerable{System.Exception},System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Error"/> level and multiple associated exceptions.
            </summary>
            <param name="exceptions">Collection of exceptions related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error(exs, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Fatal(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Critical"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.IAppLogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Critical"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="T:TaxHub.Common.Logging.ApplicationLogger">
            <summary>
            An entry point for logging that can be easily referenced by different parts of an application.
            </summary>
            <example>
            IAppLogger log = ... 
            var thing = "World";
            log.Information("Hello, {Thing}!", thing);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.#ctor">
            <summary>
            NOTE: Do not use this constructor outside of application initialization. Creating a logger is an expensive operation and it should be done only once.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.WithProperty(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Create a logger that enriches log events with provided properties.
            </summary>
            <param name="props">Properties that apply in the event.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.WithProperty(System.String,System.Object,System.Boolean)">
            <summary>
            Create a logger that enriches log events with the specified property.
            </summary>
            <param name="propertyName">The property Name. </param>
            <param name="value">The value.</param>
            <param name="destructureObjects">The destructure Objects.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.WithModule(System.String,System.String)">
            <summary>
            Create a logger that enriches log events with the module and submodule properties.
            </summary>
            <param name="moduleName">The module Name. </param>
            <param name="subModule">The submodule Name.</param>
            <returns>A logger that will enrich log events for the module and submodule properties.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.WithCorrelation(System.String)">
            <summary>
            Create a logger that enriches log events with the specified correlation id.
            </summary>
            <param name="correlationId">The correlation id. </param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.WithCorrelation(System.Guid)">
            <summary>
            Create a logger that enriches log events with the specified correlation id.
            </summary>
            <param name="correlationId">The correlation id. </param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.FromSource``1">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <typeparam name="TSource">Type generating log messages in the context.</typeparam>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.FromSource(System.Type)">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <param name="source">Type generating log messages in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.AsSensuAlert(TaxHub.Common.Logging.SensuAlertType)">
            <summary>
            Create a logger that marks log events as required to be sent to Sensu monitoring system.
            </summary>
            <param name="alertType">The application custom Sensu alert type.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Write(TaxHub.Common.Logging.LogEventLevel,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">The messageTemplate</param>
            <param name="propertyValues">The propertyValues</param>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Write(TaxHub.Common.Logging.LogEventLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.IsEnabled(TaxHub.Common.Logging.LogEventLevel)">
            <summary>
            Determine if events at the specified level will be passed through
            to the log sinks.
            </summary>
            <param name="level">Level to check.</param>
            <returns>True if the level is enabled; otherwise, false.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Verbose(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Debug(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="T:System.Diagnostics.Debug"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="T:System.Diagnostics.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Debug(System.Collections.Generic.IEnumerable{System.Exception},System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="T:System.Diagnostics.Debug"/> level and multiple associated exceptions.
            </summary>
            <param name="exceptions">Collection of exceptions related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Information(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Information(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Warning(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Warning(System.Collections.Generic.IEnumerable{System.Exception},System.String,System.Object[])">
            <summary>
            Write a log event with the System.Diagnostics.Warning level and multiple associated exceptions.
            </summary>
            <param name="exceptions">Collection of exceptions related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Error(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Error(System.Collections.Generic.IEnumerable{System.Exception},System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Error"/> level and multiple associated exceptions.
            </summary>
            <param name="exceptions">Collection of exceptions related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error(exs, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Fatal(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Critical"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:TaxHub.Common.Logging.ApplicationLogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:TaxHub.Common.Logging.LogEventLevel.Critical"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="T:TaxHub.Common.Logging.LogEventLevel">
            <summary>
            Specifies the meaning and relative importance of a log event.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.LogEventLevel.Verbose">
            <summary>
            Anything and everything you might want to know about
            a running block of code.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.LogEventLevel.Information">
            <summary>
            The lifeblood of operational intelligence - things
            happen.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.LogEventLevel.Warning">
            <summary>
            Service is degraded or endangered.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.LogEventLevel.Error">
            <summary>
            Functionality is unavailable, invariants are broken
            or data is lost.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.LogEventLevel.Critical">
            <summary>
            If you have a pager, it goes off when one of these
            occurs.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Logging.FailoverLogger">
            <summary>
            Class is designed to log an error message into a file when main logger fails to start. 
            Use this class only within the application start to report startup failure.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Logging.FailoverLogger.TryWriteException(System.Exception)">
            <summary>
            Method attempts to write a log file with exception. It suppresses any exceptions encountered during the process.
            </summary>
            <param name="exception">The exception to write.</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.FailoverLogger.TryWriteException(System.Exception,System.String)">
            <summary>
            Method attempts to write a log file with exception and additional details which will be prepended to message.
            It suppresses any exceptions encountered during the process.
            </summary>
            <param name="exception">The exception to write.</param>
            <param name="additionalDetails">additional details which will be prepended to message</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="T:TaxHub.Common.Logging.LogInitializer">
            <summary>
            LogInitializer
            </summary>
        </member>
        <member name="M:TaxHub.Common.Logging.LogInitializer.Create">
            <summary>
            Create
            </summary>
            <returns>ILogger</returns>
        </member>
        <member name="T:TaxHub.Common.Logging.LogDestinations">
            <summary>
            Log Destinations
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.LogDestinations.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.LogDestinations.MongoDB">
            <summary>
            
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.LogDestinations.Console">
            <summary>
            
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.LogDestinations.File">
            <summary>
            
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.LogDestinations.Sensu">
            <summary>
            
            </summary>
        </member>
        <member name="T:TaxHub.Common.Logging.SensuAlert">
            <summary>
            Class represents the Sensu alert object.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.CommandName">
            <summary>
            Gets or sets the alert custom command. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.Handlers">
            <summary>
            Gets or sets the list of handlers for this alert. 
            </summary>
        </member>
        <member name="M:TaxHub.Common.Logging.SensuAlert.EnableMailerHandler(System.String)">
            <summary>
            Method enables mailer handler for this alert. 
            </summary>
            <param name="emailAddress">The email address to use.</param>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.Standalone">
            <summary>
            Gets or sets a boolean indicator whether the alert is standalone - must be true. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.MonitoringInterval">
            <summary>
            Gets or sets the alert monitoring interval. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.Occurrences">
            <summary>
            Gets or sets the number of occurrences. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.EscalationLevel">
            <summary>
            Gets or sets the alert escalation level - use "default". 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.Name">
            <summary>
            Gets or sets the custom name of the event (check type). 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.IssuedUtcDateTime">
            <summary>
            Gets or sets the date and time when alert is issued. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.ExecutedUtcDateTime">
            <summary>
            Gets or sets the date and time measurement is executed. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.Output">
            <summary>
            Gets or sets the alert output that is used for email subject. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.AlertStatus">
            <summary>
            Gets or sets the alert status: 0 = okay, 1 = warning, 2 = critical. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.CheckScriptDuration">
            <summary>
            Gets or sets the alert measurement duration - timeout on a check script (not used). 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.MailTo">
            <summary>
            Gets or sets the email address to send alert. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.SensuAlert.Refresh">
            <summary>
            Gets or sets the alert refresh threshold (use 0 for immediate email notification). 
            This is the number of alerts Sensu will wait to receive until it sends an email.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Logging.SensuAlertStatus">
            <summary>
            Represents the Sensu alert status (level).
            </summary>
        </member>
        <member name="T:TaxHub.Common.Logging.SensuAlertType">
            <summary>
            Represents the Sensu alert type known to support team.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.TestAlert">
            <summary>
            An alert used for testing.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.SecurityInfrastructure">
            <summary>
            Indicates an issue with security infrastructure, such as availability of Identity service, or key data.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.OutboundFiles">
            <summary>
            Indicates an issue with outbound files
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.MessagingInfrastructure">
            <summary>
            Indicates an issue with messaging infrastructure, such as connectivity issues, including stability, to the RabbitMQ.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.DataStoreInfrastructure">
            <summary>
            Indicates an issue with data store infrastructure, such as connectivity issues, including stability, to MongoDB or SQL.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.NonPayrollTaxProcessing">
            <summary>
            Indicates that not all pays are received while running non payroll process.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.PayrollProcessingTax">
            <summary>
            Indicates that not all pays are received while running payroll process.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.QuarterlyProcessingTax">
            <summary>
            Indicates that quarterly process failed.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.TaxCodeMapping">
            <summary>
            Indicates that we failed to load the tax code mappings.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.ReportingGatewayRequest">
            <summary>
            Indicates that there was an error when generating a report through the reporting gateway.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.YearlyProcessingTax">
            <summary>
            Indicates that yearly process failed.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.ExportZeroEftError">
            <summary>
            Indicates that export state zero eft process failed.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CollectionCreationOnImportErrorRefreshThreshold1">
            <summary>
            Indicates a collection request occurs for an import payroll, and it fails to create
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CollectionCreationOnImportErrorRefreshThreshold5">
            <summary>
            Indicates a collection request occurs for an import payroll, and it fails to create
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CollectionCreationOnInputErrorRefreshThreshold1">
            <summary>
            Indicates a collection request occurs for an input payroll, and it fails to create
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CollectionCreationOnInputErrorRefreshThreshold5">
            <summary>
            Indicates a collection request occurs for an input payroll, and it fails to create
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.RefundCreationWhenVoidErrorRefreshThreshold1">
            <summary>
            Indicates a refund fails to create when payment is voided
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.RefundCreationWhenVoidErrorRefreshThreshold5">
            <summary>
            Indicates a refund fails to create when payment is voided
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.RefundCreationWhenCreditAppliedErrorRefreshThreshold1">
            <summary>
            Indicates a refund fails to create when credit is applied
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.RefundCreationWhenCreditAppliedErrorRefreshThreshold5">
            <summary>
            Indicates a refund fails to create when credit is applied
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CheckFailedToGenerate">
            <summary>
            Indicates an export check process failed to generate a check
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CheckPDFFailedToGenerateRefreshThreshold1">
            <summary>
            Indicates a process failed to generate printable document when exporting a check
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CheckPDFFailedToGenerateRefreshThreshold5">
            <summary>
            Indicates a process failed to generate printable document when exporting a check
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.EftExportError">
            <summary>
            Indicates an EFT failed to export
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CreateZeroEftError">
            <summary>
            Indicates a Zero EFT failed to create
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CreditApplicationErrorOnPayrollAssembledRefreshThreshold5">
            <summary>
            Indicates a credit application fail to be ensured for a given payroll assembled event
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CreditApplicationErrorOnCashLiabilityUpdatedRefreshThreshold5">
            <summary>
            Indicates a credit application fail to be ensured for a cash Mgmt liability updated event
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CreditApplicationErrorOnPaymentUpdatedToValidRefreshThreshold5">
            <summary>
            Indicates a credit application fail to be ensured for a payment status updated to Valid event
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CreditRequestErrorStuckInProgressUpdatedRefreshThreshold5">
            <summary>
            Indicates a credit request failed and got stuck in progress
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CreditRequestErrorStuckInProgressUpdatedRefreshThreshold1">
            <summary>
            Indicates a credit request failed and got stuck in progress
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CreditApplicationErrorOnApplyCredit5">
            <summary>
            Indicates a credit application fail when applying credits
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CreditApplicationErrorOnReleaseCredit5">
            <summary>
            Indicates a credit application fail when releasing credits
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CreditApplicationErrorOnApplyCredit1">
            <summary>
            Indicates a credit application fail when applying credits
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.ObjectStoreError">
            <summary>
            Indicates a failure related to Object Storage
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CreditApplicationErrorOnRefundRequestThreshold5">
            <summary>
            Indicates a credit application refund request failed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.LiabilityRefundCreatedEventProcessingErrorThreshold5">
            <summary>
            Indicates failure during processing of refund created event
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CreditApplicationErrorOnReQueueCredit5">
            <summary>
            Indicates a credit application fail when re queuing credits
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.CreditApplicationErrorOnPaymentUnsentRefreshThreshold5">
            <summary>
            Indicates failure during credit application for payment unsent
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.TenantUpdateUsgBankAccount5">
            <summary>
            Indicates update tenant usg bank account id failed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuAlertType.TenantUpdateUsgBankAccount1">
            <summary>
            Indicates update tenant usg bank account id failed
            </summary>
        </member>
        <member name="T:TaxHub.Common.Logging.SensuClientAdapter">
            <summary>
            Class provides connectivity over TCP to the Sense client locally installed on a server.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Logging.SensuClientAdapter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Logging.SensuClientAdapter.SendAlert(TaxHub.Common.Logging.SensuAlert)">
            <summary>
            Method sends a Sensu alert.
            </summary>
            <remarks>The Sensu client can perform at 16ms per alert (~60 alerts/sec), keep this information designing the application.</remarks>
            <param name="alert">The alert.</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.SensuClientAdapter.ReconnectCallback(System.IAsyncResult)">
            <summary>
            Callback for reconnecting if we lose connection to
            sensu.
            </summary>
            <param name="ar">IAsyncResult</param>
        </member>
        <member name="M:TaxHub.Common.Logging.SensuClientAdapter.Dispose">
            <summary>
            Method disposes any resources used by the class.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Logging.SensuClientState">
            <summary>
            Sensu client state object used by an adapter.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Logging.SensuClientSink">
            <summary>
            Writes log events as documents to a Sensu local client.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuClientSink.SensuAlertTypePropertyName">
            <summary>
            The name of property used to indicate the Sensu Alert type.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuClientSink.DefaultBatchPostingLimit">
            <summary>
            A reasonable default for the number of events posted in each batch.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Logging.SensuClientSink.DefaultPeriod">
            <summary>
            A reasonable default time to wait between checking for event batches.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Logging.SensuClientSink.#ctor(System.String)">
            <summary>
            Construct a sink posting to the local Sensu client.
            </summary>
            <param name="sensuAlertsEmailAddress">The Sensu alerts email notification address.</param>
        </member>
        <member name="M:TaxHub.Common.Logging.SensuClientSink.#ctor(System.Int32,System.TimeSpan,System.String)">
            <summary>
            Construct a sink posting to the local Sensu client.
            </summary>
            <param name="batchPostingLimit">The maximum number of events to post in a single batch.</param>
            <param name="period">The time to wait between checking for event batches.</param>
            <param name="sensuAlertsEmailAddress">The Sensu alerts email notification address.</param>
        </member>
        <member name="M:TaxHub.Common.Logging.SensuClientSink.EmitBatch(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})">
            <summary>
            Emit a batch of log events, running to completion synchronously.
            </summary>
            <param name="events">The events to emit.</param>
            <remarks>Override either <see cref="M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatch(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})"/> or <see cref="M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatchAsync(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})"/>,
            not both.</remarks>
        </member>
        <member name="M:TaxHub.Common.Logging.SensuClientSink.EmitLogEvent(Serilog.Events.LogEvent)">
            <summary>
            Emit a log event.
            </summary>
            <param name="evt">The event to emit.</param>
        </member>
        <member name="T:TaxHub.Common.Logging.ExecutionTimer">
            <summary>
            Class to log execution time
            </summary>
        </member>
        <member name="M:TaxHub.Common.Logging.ExecutionTimer.Track(TaxHub.Common.Logging.IAppLogger,System.String)">
            <summary>
            Start tracking the running time
            </summary>
            <param name="logger">The logger</param>
            <param name="callerName">The member name using the time tracker</param>
            <returns>A new timer that will log ellapsed time upon diposing</returns>
        </member>
        <member name="M:TaxHub.Common.Logging.ExecutionTimer.Dispose">
            <summary>
            Stop the clock and log the elapsed time
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntryBase.EventId">
            <summary>
            Gets or sets the Event Id. This is globally unique value that can be provided by the client or would be generated by the system.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntryBase.EventType">
            <summary>
            Gets or sets the Event Type - an integer. Currently restricted to values defined by System.Diagnostics.TraceEventType. 
            <para>
            <list type="System.Diagnostics.TraceEventType">
                <para>Critical = 1</para>
                <para>Error = 2</para>
                <para>Warning = 4</para>
                <para>Information = 8</para>
                <para>Verbose = 16</para>
                <para>Start = 256</para>
                <para>Stop = 512</para>
                <para>Suspend = 1024</para>
                <para>Resume = 2048</para>
                <para>Transfer = 4096</para>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntryBase.CreatedDateTime">
            <summary>
            Gets or sets the date and time when event has occurred.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntryInfo.TraceName">
            <summary>
            Gets or sets the Trace Name.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntryInfo.Source">
            <summary>
            Gets or sets the Trace Source.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntryInfo.ProcessId">
            <summary>
            Gets or sets the Process Id where an event has occurred (recommended).
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntryInfo.ProcessName">
            <summary>
            Gets or sets the Process Name where an event has occurred (optional).
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntryInfo.ThreadId">
            <summary>
            Gets or sets the Thread Id where an event has occurred (recommended).
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntryInfo.ComputerName">
            <summary>
            Gets or sets the Computer Name where an event has occurred.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntryInfo.Message">
            <summary>
            Gets or sets a Descriptive Message for the event.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntryInfo.Category">
            <summary>
            Gets or sets a descriptive Category for the event.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntryInfo.AppEventId">
            <summary>
            Gets or sets an application-defined numeric identifier for the event.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntry.DetailMessage">
            <summary>
            Gets or sets a Detailed Message for the event.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntry.Correlation">
            <summary>
            Gets or sets the Event correlation information used for correlating multiple activities as a single process.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceEntry.Data">
            <summary>
            Gets or sets additional data associated with the event.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Logging.TraceEntry.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Logging.TraceEntry.Init">
            <summary>
            Initialize internal objects.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceCorrelation.ActivityId">
            <summary>
            Gets or sets a current activity identifier for the event.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceCorrelation.RelatedActivityId">
            <summary>
            Gets or sets an related activity identifier for the event.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceDataItem.Name">
            <summary>
            Gets or sets an optional name for the data item content.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Logging.TraceDataItem.Content">
            <summary>
            Gets or sets the content for the data item.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Logging.WebApiExceptionLogger">
            <summary>
            Logs all HTT
            </summary>
            <seealso cref="T:System.Web.Http.ExceptionHandling.IExceptionLogger" />
        </member>
        <member name="M:TaxHub.Common.Logging.WebApiExceptionLogger.#ctor(TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Logging.WebApiExceptionLogger"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
    </members>
</doc>
