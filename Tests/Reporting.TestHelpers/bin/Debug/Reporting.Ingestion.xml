<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Reporting.Ingestion</name>
    </assembly>
    <members>
        <member name="T:Reporting.Ingestion.Application.ArchivableEventModifier.IArchivableEventModifierService">
            <summary>
            Provides functionality to replay events from event archive
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.ArchivableEventModifier.IArchivableEventModifierService.ModifyEventPayloadForArchive(TaxHub.Messaging.Serialization.InboundDomainEventData)">
            <summary>
            Modifies an event payload prior to saving it to the event archive
            </summary>
            <param name="eventData">The bounded context</param>
            <returns>True if all updates succeed, otherwise false</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.ArchivableEventModifier.ArchivableEventModifierServiceFactory">
            <summary>
            Reporting Service Factory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.ArchivableEventModifier.ArchivableEventModifierServiceFactory.CreateArchivableEventModifierService(System.String)">
            <summary>
            Creates the appropriate instance of IArchivableEventModifierService based on the eventName
            </summary>
            <param name="eventName">The event name</param>
            <returns>An instance that implements IArchivableEventModifierService</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.ArchivableEventModifier.UnmodifiedEventService">
            <summary>
            Leaves the event data as-in (unmodified)
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Application.ArchivableEventModifier.PaymentPayObservedModifierService">
            <summary>
            Modifies the payment.pay.observed event prior to it being archived
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Application.CompanyReportingService">
            <summary>
            Service for company reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.CompanyReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.CompanyReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.CompanyTaxAgencyReportingService">
            <summary>
            Service for CompanyTaxAgency reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.CompanyTaxAgencyReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyTaxAgencyReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.CompanyTaxAgencyReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventValidatorService.ValidateEvents(System.String,System.DateTime,System.DateTime,System.Guid)">
            <summary>
            Validate the events in the collection for the specified date range.
            </summary>
            <param name="collectionName">CollectionName</param>
            <param name="startTime">startTime</param>
            <param name="endTime">endTime</param>
            <param name="correlationId">correlationId</param>
            <returns>
            void
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventValidatorService.SendOutOfSequenceEventToFailedToConsume(System.String,System.Guid,System.Guid)">
            <summary>
            Check if any events are out of sequence for a given aggregate.
            </summary>
            <param name="collectionName">collectionName</param>
            <param name="aggregateId">aggregateId</param>
            <param name="correlationId">correlationId</param>
            <returns>
            Returns the first event out of sequence.
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.NettedCollectionReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.INettedCollectionReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.NettedCollectionReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.TaxScheduleReportingService">
            <summary>
            Service for TaxSchedule reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxScheduleReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxScheduleReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.TaxScheduleReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.UnhandledReplayService">
            <summary>
            Service to replay events from UnhandledEvents collection.
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.IUnhandledReplayService" />
        </member>
        <member name="M:Reporting.Ingestion.Application.UnhandledReplayService.#ctor(TaxHub.Common.Logging.IAppLogger,Reporting.Ingestion.DataAccess.IUnhandledEventRepository,Microsoft.Practices.Unity.IUnityContainer,Reporting.Ingestion.Application.IEventArchiveReplayService)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.UnhandledReplayService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="unhandledEventRepository">The repo.</param>
            <param name="container">The dependency injection container.</param>
            <param name="eventArchiveReplayService">EventArchiveReplayService</param>
        </member>
        <member name="M:Reporting.Ingestion.Application.UnhandledReplayService.ReplayUnhandledEvents(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Replay items in unhandled events.
            </summary>
            <param name="correlationId">correlationId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>
            Replay results.
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.UnhandledReplayService.CreateReportingReplayService(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Creates an instance of IReportingAggregateReplayService based on the event aggregate (boundad context.aggregate name)
            </summary>
            <param name="eventData">The event data</param>
            <returns>An instance of IReportingAggregateReplayService</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.FailedToConsumeReplayService">
            <summary>
            Service to replay events from FailedToConsumeEvents collection and to clean up this collection.
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.IFailedToConsumeReplayService" />
        </member>
        <member name="M:Reporting.Ingestion.Application.FailedToConsumeReplayService.#ctor(Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.EventStore.IEventStoreRepository,Microsoft.Practices.Unity.IUnityContainer,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Messaging.IMessageHub)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.FailedToConsumeReplayService"/> class.
            </summary>
            <param name="eventArchiver">The event archiver.</param>
            <param name="logger">The logger.</param>
            <param name="eventStoreRepo">The event store repo.</param>
            <param name="container">The container.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="messageHub">The message hub.</param>
        </member>
        <member name="M:Reporting.Ingestion.Application.FailedToConsumeReplayService.ReplayFailedToConsumeEvents(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Replay items in failed to consume events.
            </summary>
            <param name="correlationId">correlationId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>
            Replay results.
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.FailedToConsumeReplayService.CreateReportingReplayService(System.String,System.String)">
            <summary>
            Wrapper function over the static ReportingServiceFactory.CreateReportingReplayService for unit test mocking purposes
            </summary>
            <param name="boundedContext">The bounded context</param>
            <param name="aggregateName">The aggregate name</param>
            <returns>An instance of IReportingAggregateReplayService</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.IEventValidatorService.PublishValidateCollectionEvents(System.Guid)">
            <summary>
            Publish a tax.service.validate-collection-events for each collection reported on.
            </summary>
            <param name="correlationId">CorrelationId</param>
            <returns>true</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.IEventValidatorService.ValidateEvents(System.String,System.DateTime,System.DateTime,System.Guid)">
            <summary>
            Validate the events in the collection for the specified date range.
            </summary>
            <param name="collectionName">CollectionName</param>
            <param name="startTime">startTime</param>
            <param name="endTime">endTime</param>
            <param name="correlationId">correlationId</param>
            <returns>void</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.IEventValidatorService.SendOutOfSequenceEventToFailedToConsume(System.String,System.Guid,System.Guid)">
            <summary>
            Check if any events are out of sequence for a given aggregate.
            </summary>
            <param name="collectionName">collectionName</param>
            <param name="aggregateId">aggregateId</param>
            <param name="correlationId">correlationId</param>
            <returns>Returns the first event out of sequence.</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.ReportRequestReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IReportRequestReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.ReportRequestReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.IUnhandledReplayService">
            <summary>
            Service to replay unhandled events.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.IUnhandledReplayService.ReplayUnhandledEvents(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Replay items in unhandled events.
            </summary>
            <param name="correlationId">correlationId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Replay results.</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.YEProcessingReportService">
            <summary>
            Service for ye processingreporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.YEProcessingReportService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IYEProcessingReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.YEProcessingReportService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.TaxLiabilityReportService">
            <summary>
            Service for tax liabilities reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxLiabilityReportService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxLiabilityReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.TaxLiabilityReportService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.GarnishmentPayrollInstanceReportService">
            <summary>
            Garnishment payroll instance service
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.GarnishmentPayrollInstanceReportService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IGarnishmentPayrollInstanceReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.GarnishmentPayrollInstanceReportService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archiver.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.GarnishmentLiabilityReportService">
            <summary>
            Service for pay garnishment reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.GarnishmentLiabilityReportService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IGarnishmentLiabilityReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.GarnishmentLiabilityReportService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archiver.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.GarnishmentPayrollInstanceService">
            <summary>
            Service to process for Garnishment Payroll Instance AP
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.IGarnishmentPayrollInstanceService" />
        </member>
        <member name="M:Reporting.Ingestion.Application.GarnishmentPayrollInstanceService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IGarnishmentPayrollInstanceReportingRepository,Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollUnitReportingRepository,Reporting.Ingestion.DataAccess.SqlDataStore.IGarnishmentLiabilityReportingRepository,Reporting.Ingestion.DataAccess.SqlDataStore.IPayGarnishmentReportingRepository,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.GarnishmentPayrollInstanceService" /> class
            The Repos are wrapped by IReadOnlyObject so that the conneciton string will have a ReadOnly intent,
            which will use the secondary SQL server nodes, which is the same ones used by the Reporting.Gateway service
            </summary>
            <param name="garnishmentPayrollInstanceRepo">The garnishment payroll instance repo.</param>
            <param name="payrollUnitRepo">The payroll unit repo.</param>
            <param name="garnishmentLiabilityRepo">The garnishmentLiability repo.</param>
            /// <param name="garnishmentRepo">The garnishment repo.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.IFailedToConsumeReplayService">
            <summary>
            Service to replay failed to consume events.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.IFailedToConsumeReplayService.ReplayFailedToConsumeEvents(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Replay items in failed to consume events.
            </summary>
            <param name="correlationId">correlationId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Replay results.</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.IGarnishmentPayrollInstanceService">
            <summary>
            Provides functionality to garnishment payroll instance
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.IGarnishmentPayrollInstanceService.GetGarnishmentPayrollInstanceIngestionStatus(System.Guid)">
            <summary>
            Gets the payroll instance response.
            </summary>
            <param name="payrollInstanceId">The payroll instance identifier.</param>
            <returns>
            List of payroll instance response
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.IGarnishmentPayrollInstanceService.GetListOfPayrollUnitsForPayrollInstance(System.Guid)">
            <summary>
            Gets the list of payroll units for the payroll instance.
            </summary>
            <param name="payrollInstanceId">The payroll instance identifier.</param>
            <returns>
            List of payroll units
            </returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.IImportRawEventsReportingService">
            <summary>
            Import raw events reporting application service.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.IImportRawEventsReportingService.ImportData(System.String,System.Collections.Generic.List{System.String},System.Guid,System.Threading.CancellationToken)">
            <summary>
            ImportData from TaxHub RawEvents
            </summary>
            <param name="connectionString">The connectionString.</param>
            <param name="filter">The filters.</param>
            <param name="correlationId">The correlation ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.IImportRawEventsReportingService.ImportSspData(System.String,System.Collections.Generic.List{System.String},System.Guid,System.Threading.CancellationToken)">
            <summary>
            Import RawEvents from SSP
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="filter">The filters.</param>
            <param name="correlationId">The correlation ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns> bool</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.EFilingAcknowledgmentReportingService">
            <summary>
            Service for EFilingAcknowledgment
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.EFilingAcknowledgmentReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IEFilingAcknowledgmentReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.EFilingAcknowledgmentReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archiver.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.IReportingAggregateReplayService">
            <summary>
            Reporting service to update
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.IReportingAggregateReplayService.ProcessReplay(System.Guid,System.String,System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Process the specified event data.
            </summary>
            <param name="aggregateId">Aggregate id to replay.</param>
            <param name="collectionName">Collection name to retrieve the aggregate.</param>
            <param name="correlationId">CorrelationId to be used for logging.</param>
            <param name="overWrite">Overwrite aggregate.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if update successful; otherwise, false</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.IReportingAggregateReplayService.CanAggregateModelHandleEvent(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Checks if the aggregate model has code that can handle ingesting the event
            </summary>
            <param name="eventData">The event</param>
            <returns>True if the aggregate model has code to handle this particular event</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.PayrollInstanceReportService">
            <summary>
            Service for payroll instance reporting service
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.PayrollInstanceReportService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollInstanceReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.PayrollInstanceReportService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.PayrollPaymentReportingService">
            <summary>
            Service for Payroll Payment reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.PayrollPaymentReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollPaymentReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.PayrollPaymentReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.PaymentFileRequestReportingService">
            <summary> 
            Service for Payment File Request  
            </summary> 
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" /> 
        </member>
        <member name="M:Reporting.Ingestion.Application.PaymentFileRequestReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IPaymentFileRequestReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary> 
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.PaymentFileRequestReportingService" /> class. 
            </summary> 
            <param name="repository">repository</param> 
            <param name="eventArchiver">The event archive repository.</param> 
            <param name="ingestionConfiguration">The ingestion configuration.</param> 
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.TaxAgencyReportingService">
            <summary>
            Service for pay garnishment reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxAgencyReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAgencyReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.TaxAgencyReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.PayGarnishmentReportingService">
            <summary>
            Service for pay garnishment reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.PayGarnishmentReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IPayGarnishmentReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.PayGarnishmentReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.TaxAgencyTransactionReportingService">
            <summary>
            Service for Customer Bank Account reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxAgencyTransactionReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAgencyTransactionReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.TaxAgencyTransactionReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.CustomerBankAccountReportingService">
            <summary>
            Service for Customer Bank Account reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.CustomerBankAccountReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ICustomerBankAccountReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.UsgBankAccountReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archiver.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.EventArchiveReplayService">
            <summary>
            Provides functionality to replay events from event archive
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Application.EventArchiveReplayService.UnsupportedReplayFromArchiveAggregates">
            <summary>
            The list of aggregates that are ingestable but not replayable
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchiveReplayService.#ctor(Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore,TaxHub.Common.Logging.IAppLogger,Microsoft.Practices.Unity.IUnityContainer,TaxHub.Messaging.IMessageHub,Reporting.Ingestion.Application.IEventValidatorService)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.EventArchiveReplayService"/> class.
            </summary>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="logger">The logger.</param>
            <param name="container">The container.</param>
            <param name="messageHub">Hub for sending messages.</param>
            <param name="eventValidatorService">EventValidatorService</param>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchiveReplayService.ReplayArchivedEvents(Reporting.Ingestion.Models.EventArchiveReplayRequest,System.Threading.CancellationToken)">
            <summary>
            This method will replay events from Reporting Event Archive based on parameters
            </summary>
            <param name="request">The request parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The status of the request</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchiveReplayService.ProcessAggregateId(System.Guid,System.Guid,Reporting.Ingestion.Application.IReportingAggregateReplayService,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchiveReplayService.CreateReportingReplayService(System.String,System.String)">
            <summary>
            Wrapper function over the static ReportingServiceFactory.CreateReportingReplayService for unit test mocking purposes
            </summary>
            <param name="boundedContext">The bounded context</param>
            <param name="aggregateName">The aggregate name</param>
            <returns>An instance of IReportingAggregateSaveService</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchiveReplayService.RequestReplayArchivedEvents(Reporting.Ingestion.Models.RequestReplayCommand,System.Guid,System.Guid)">
            <summary>
            Creates an event requesting the replay of archived events
            </summary>
            <param name="request">The request parameters</param>
            <param name="correlationId">The correlationId</param>
            <param name="userId">The userId</param>
            <returns>The status of the request</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchiveReplayService.GetSupportedReplayAggregates(System.Threading.CancellationToken)">
            <summary>
            Gets the list of supported aggregates to replay
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns a list of supported aggregates to replay</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.IEventArchiveReplayService">
            <summary>
            Provides functionality to replay events from event archive
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.IEventArchiveReplayService.ReplayArchivedEvents(Reporting.Ingestion.Models.EventArchiveReplayRequest,System.Threading.CancellationToken)">
            <summary>
            Replays the archived events from a particular archived collection
            </summary>
            <param name="request">Replay request</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Replay results.</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.IEventArchiveReplayService.RequestReplayArchivedEvents(Reporting.Ingestion.Models.RequestReplayCommand,System.Guid,System.Guid)">
            <summary>
            Creates an event requesting the replay of archived events
            </summary>
            <param name="request">The request parameters</param>
            <param name="correlationId">The correlationId</param>
            <param name="userId">The userId</param>
            <returns>The status of the request</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.IEventArchiveReplayService.GetSupportedReplayAggregates(System.Threading.CancellationToken)">
            <summary>
            Gets the list of supported aggregates to replay
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Returns a list of supported aggregates to replay</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.IEventArchiveReplayService.PublishReplayRequest(System.String,System.String,System.Collections.Generic.List{System.Guid},System.DateTime,System.DateTime,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Publish replay request.
            </summary>
            <param name="boundedCountext">boundedCountext</param>
            <param name="aggregateName">aggregateName</param>
            <param name="aggregateIds">aggregateIds</param>
            <param name="minValue">The minimum datetime to replay</param>
            <param name="maxValue">The maximum datetime to replay</param>
            <param name="correlationId">correlationId</param>  
            <param name="cancellationToken">cancellationToken</param>
            <returns>EventArchiveReplayRequestResult</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.IEventArchiveReplayService.ProcessAggregateId(System.Guid,System.Guid,Reporting.Ingestion.Application.IReportingAggregateReplayService,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Replay the specified aggregate.  If fails it will send to FailedToConsume.
            </summary>
            <param name="aggregateId">AggregateId</param>
            <param name="correlationId">CorrelationId</param>
            <param name="reportingService">ReplayService</param>
            <param name="collectionName">Collection Name</param>
            <param name="overwrite">Overwrite</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>ProcessReplayResult</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.ImportRawEventsReportingService">
            <summary>
            ImportRawEventsReportingService
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.ImportRawEventsReportingService.#ctor(TaxHub.Common.Logging.IAppLogger,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.DataAccess.EventArchive.ITaxEventStoreRepository,Reporting.Ingestion.DataAccess.EventArchive.IPaymentEventStoreRepository)">
            <summary>
            ImportRawEventsReportingService
            </summary>
            <param name="logger">logger</param>
            <param name="eventArchiver">eventArchiver</param>
            <param name="eventStoreRepository">eventStoreRepository</param>
            <param name="paymentEventStoreRepository">paymentEventStoreRepository</param>
        </member>
        <member name="M:Reporting.Ingestion.Application.ImportRawEventsReportingService.ImportData(System.String,System.Collections.Generic.List{System.String},System.Guid,System.Threading.CancellationToken)">
            <summary>
            Import TaxHub RawEvents Data
            </summary>
            <param name="connectionString">The connectionString.</param>
            <param name="filters">The list of filters.</param>
            <param name="correlationId">The correlation ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.ImportRawEventsReportingService.ImportSspData(System.String,System.Collections.Generic.List{System.String},System.Guid,System.Threading.CancellationToken)">
            <summary>
            Import SSP RawEvents data
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="filters">The list of filters.</param>
            <param name="correlationId">The correlation ID.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns> bool</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxCodeMappingReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxCodeMappingReportingRepository,Reporting.Ingestion.DataAccess.SqlDataStore.ITaxCodeReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.TaxCodeMappingReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="taxCodeRepository">taxCodeRepository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.UnknownReportingAggregateService">
            <summary>
            Unknown Aggregate Service
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.UnknownReportingAggregateService.#ctor(Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.UnknownReportingAggregateService"/> class.
            </summary>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">The logger.</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.Bai2BankTransactionReportingService">
            <summary>
            Service for Bai2 bank transaction reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.Bai2BankTransactionReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IBai2BankTransactionReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.Bai2BankTransactionReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archiver.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.BankTransactionReportingService">
            <summary>
            Service for Bank transaction reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.BankTransactionReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IBankTransactionReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.BankTransactionReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archiver.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.CompanyTaxReportingService">
            <summary>
            Service for CompanyTax reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.CompanyTaxReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyTaxReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.CompanyTaxReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.EventReplayService">
            <summary>
            Handles the processing of event replay requests.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventReplayService.#ctor(TaxHub.Messaging.IMessageHub,Reporting.Ingestion.Configuration.IEventReplayConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.EventReplayService"/> class.
            </summary>
            <param name="messageHub">Hub for sending messages.</param>
            <param name="configuration">Configuration for the event replay feature.</param>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventReplayService.SendReplayRequest(Reporting.Ingestion.Models.EventsToReplay,System.Guid,System.Guid,System.DateTime,System.DateTime)">
            <summary>
            Sends messages to replay the given events.
            </summary>
            <param name="eventsToReplay">Which events to replay.</param>
            <param name="correlationId">Correlation id</param>
            <param name="userId">User id</param>
            <param name="dateRangeFrom">Start of the replay time range</param>
            <param name="dateRangeTo">End of the replay time range</param>
            <returns>True if the messages are sent successfully. False if there is a conflict.</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.GeneralLedgerAccountReportingService">
            <summary>
            Service for General Ledger Account reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.GeneralLedgerAccountReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IGeneralLedgerAccountReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.JournalEntryReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="M:Reporting.Ingestion.Application.IEventReplayService.SendReplayRequest(Reporting.Ingestion.Models.EventsToReplay,System.Guid,System.Guid,System.DateTime,System.DateTime)">
            <summary>
            Sends messages to replay the given events.
            </summary>
            <param name="eventsToReplay">Which events to replay.</param>
            <param name="correlationId">Correlation id</param>
            <param name="userId">User id</param>
            <param name="dateRangeFrom">Start of the replay time range</param>
            <param name="dateRangeTo">End of the replay time range</param>
            <returns>True if the messages are sent successfully. False if there is a conflict.</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.IReportingAggregateSaveService">
            <summary>
            Reporting service to update
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.IReportingAggregateSaveService.Process(TaxHub.Messaging.Serialization.InboundDomainEventData,System.Threading.CancellationToken)">
            <summary>
            Updates the specified event data.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if update successful; otherwise, false</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.IReportingAggregateSaveService.ProcessReplay(System.Guid,System.String,System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Process the specified event data.
            </summary>
            <param name="aggregateId">Aggregate Id to replay.</param>
            <param name="collectionName">Collection name for replay.</param>
            <param name="correlationId">CorrelationId to be used for logging.</param>
            <param name="overWrite">Overwrite aggregate.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if update successful; otherwise, false</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.IReportingAggregateServiceBase`1">
            <summary>
            IReportingAggregateServiceBase
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
        </member>
        <member name="M:Reporting.Ingestion.Application.IReportingAggregateServiceBase`1.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            FindOne
            </summary>
            <param name="id">id</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>LiabilityCollectionRpt</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.JournalEntryReportingService">
            <summary>
            Service for Journal Entry reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.JournalEntryReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IJournalEntryReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.JournalEntryReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.LiabilityCollectionReportingService">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.LiabilityCollectionReportingService"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.LiabilityCollectionReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ILiabilityCollectionReportRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            d
            </summary>
            <param name="repository">d</param>
            <param name="eventArchiver">The event archiver.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">d</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.LiabilityReportingService">
            <summary>
            Service for Liability reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.LiabilityReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ILiabilityReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.LiabilityReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.PayReportingService">
            <summary>
            Service for Pay reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.PayReport" />
        </member>
        <member name="M:Reporting.Ingestion.Application.PayReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IPayReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.PayReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.PayrollUnitReportingService">
            <summary>
            Service for Payroll unit reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.PayrollUnitReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollUnitReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.PayrollUnitReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1">
            <summary>
            Abstract class from which all reporting services must derived from.
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="F:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1.#ctor(TaxHub.Common.DataAccess.IRepository{`0,System.Guid},Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" /> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">The logger.</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="P:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1.Repository">
            <summary>
            Gets the repository.
            </summary>
            <value>
            The repository.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1.CanAggregateModelHandleEvent(TaxHub.Common.EventStore.DomainEventData)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>aggregate</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1.FindOne(System.Collections.Generic.List{TaxHub.Messaging.Serialization.InboundDomainEventData},System.Threading.CancellationToken)">
            <summary>
            Retrieve items using the event data.
            </summary>
            <param name="eventsData">List of InboundDomainEventData</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Aggregate</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1.ProcessReplay(System.Guid,System.String,System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1.Process(TaxHub.Messaging.Serialization.InboundDomainEventData,System.Threading.CancellationToken)">
            <summary>
            Process the specified event data.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if update successful; otherwise, false</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1.PostIngestionHandler(TaxHub.Messaging.Serialization.InboundDomainEventData)">
            <summary>
            Posts the ingestion handler.
            </summary>
            <param name="eventData">The event data.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1.IsCreatedEvent(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Determines whether [is created event] [the specified event data].
            </summary>
            <param name="eventData">The event data.</param>
            <returns>
              <c>true</c> if [is created event] [the specified event data]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1.RetrieveRepoDataForSpecificEvents(System.Collections.Generic.List{TaxHub.Messaging.Serialization.InboundDomainEventData},`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the repo data for all events.
            </summary>
            <param name="eventsData">The events data.</param>
            <param name="repoData">The repo data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Entity</returns>
        </member>
        <member name="T:Reporting.Ingestion.Application.TaxCodeReportingService">
            <summary>
            Service for tax code reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxCodeReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxCodeReportingRepository,Reporting.Ingestion.DataAccess.SqlDataStore.ITaxCodeMappingReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.TaxCodeReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="taxCodeMappingRepository">taxCodeMappingRepository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxCodeReportingService.FindOne(System.Collections.Generic.List{TaxHub.Messaging.Serialization.InboundDomainEventData},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.Application.TaxPayrollImportReportingService">
            <summary>
            Service for tax payroll import reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxPayrollImportReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollImportReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.TaxPayrollImportReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxPayrollImportReportingService.RetrieveRepoDataForSpecificEvents(System.Collections.Generic.List{TaxHub.Messaging.Serialization.InboundDomainEventData},Reporting.Ingestion.Models.TaxPayrollImportReportEntity,System.Threading.CancellationToken)">
            <summary>
            Retrieves the repo data for all events.
            </summary>
            <param name="eventsData">The events data.</param>
            <param name="repoData">The repo data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Entity
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxPayrollImportReportingService.FindOne(System.Collections.Generic.List{TaxHub.Messaging.Serialization.InboundDomainEventData},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.Application.TaxPayrollInputReportingService">
            <summary>
            Service for tax payroll import reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxPayrollInputReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollInputReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.TaxPayrollImportReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxPayrollInputReportingService.IsCreatedEvent(TaxHub.Common.EventStore.DomainEventData)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.Application.TaxPayrollInputReportingService.FindOne(System.Collections.Generic.List{TaxHub.Messaging.Serialization.InboundDomainEventData},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.Application.TenantReportingService">
            <summary>
            Service for Tenant reporting
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.TenantReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITenantReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.TenantReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.UsgBankAccountReportingService">
            <summary>
            Service for Usg Bank Account reporting
            </summary>
            <seealso cref="T:Reporting.Ingestion.Application.ReportingAggregateServiceBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Application.UsgBankAccountReportingService.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IUsgBankAccountReportingRepository,Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory,Reporting.Ingestion.DataAccess.IUnhandledEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Application.UsgBankAccountReportingService" /> class.
            </summary>
            <param name="repository">repository</param>
            <param name="eventArchiver">The event archive repository.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <param name="logger">logger</param>
            <param name="metricsFactory">The metrics factory</param>
            <param name="unhandledEventRepository">The unhandled event repository</param>
        </member>
        <member name="T:Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver">
            <summary>
            Contract for Aggregate event archiver.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver.GetCollectionName(TaxHub.Messaging.Serialization.InboundDomainEventData)">
            <summary>
            Gets the name of the collection.
            </summary>
            <param name="eventData">The event data.</param>
            <returns>Collection name</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver.GetCollectionName(System.String,System.String,System.Boolean)">
            <summary>
            Builds the event archive collection name
            </summary>
            <param name="boundedContext">The bounded context name</param>
            <param name="aggregateName">The aggregate name</param>
            <param name="isAggregateEvent">If true, the event is an aggregate event, if false, then it is a system or non-aggregate event</param>
            <returns>The event archive collection name</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver.TryToSaveToEventArchive(System.String,TaxHub.Messaging.Serialization.InboundDomainEventData,System.Threading.CancellationToken)">
            <summary>
            Archives the specified event data.
            Aggregate events that have non-empty Guid would go to collections that end with '_ae' (Aggregate Events).
            Aggregate events that have an empty Guild would go to collection that end with '_se' (System Events).
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="eventData">The event data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns true if event was successful archived; otherwise, false</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver.GetAggregateEventsToProcess(System.String,System.Guid,System.Int32)">
            <summary>
            Gets the aggregate events to process.
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="aggregateId">The aggregate identifier.</param>
            <param name="fromSequenceNumber">From sequence number.</param>
            <returns>List of events to process.</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver.ApplyToEach(System.String,System.Func{TaxHub.Messaging.Serialization.InboundDomainEventData,System.Threading.Tasks.Task},SmartHub.Hosting.DataAccess.FilterParameters,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Applies an action to each event returned from the filters in filter params.
            </summary>
            <param name="collectionName">The specific event archive collection to query.</param>
            <param name="action">The action to apply to each aggregate.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="correlationId">The correlation Id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver.FindAll(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events by page parameters.
            </summary>
            <param name="collectionName">The collection name to retrieve events from.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:Reporting.Ingestion.Application.EventArchive.IAggregateEventArchiver.DeleteFromFailedToConsume(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes multiple events from FailedToConsume for an aggregate, up to the maxSequenceNumber
            </summary>
            <param name="aggregateId">The aggregateId to delete events for</param>
            <param name="maxSequenceNumber">The maximum sequence number that events wlll be deleted for</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The delete operation result</returns>
        </member>
        <member name="T:Reporting.Ingestion.Configuration.ParsedEventName">
            <summary>
            An object representing an event name parsed.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Configuration.EventReplayConfiguration">
            <summary>
            Configuration for the event replay feature.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Configuration.IEventReplayConfiguration">
            <summary>
            The configuration for the event replay feature.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Configuration.IEventReplayConfiguration.RateLimitSeconds">
            <summary>
            How long to wait for rate-limiting the call to initial load.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Configuration.IReportingIngestionConfiguration">
            <summary>
            The configuration for reporting ingestion.
            </summary>
            <seealso cref="T:TaxHub.Configuration.IConfigSection" />
        </member>
        <member name="P:Reporting.Ingestion.Configuration.IReportingIngestionConfiguration.ObservedEvents">
            <summary>
            Gets or sets the observed events.
            </summary>
            <value>
            The observed events.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Configuration.IReportingIngestionConfiguration.ObservedArchivedEvents">
            <summary>
            Gets or sets the observed archived events.
            Some events needs to be archived even if they are observed events.
            </summary>
            <value>
            The observed archived events.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Configuration.IReportingIngestionConfiguration.IgnoredEvents">
            <summary>
            Gets or sets the ignored events.
            </summary>
            <value>
            The ignored events.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Configuration.ReportingIngestionConfiguration">
            <summary>
            Implementation for Report Ingestion Configuration
            </summary>
            <seealso cref="T:Reporting.Ingestion.Configuration.IReportingIngestionConfiguration" />
        </member>
        <member name="M:Reporting.Ingestion.Configuration.ReportingIngestionConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Configuration.ReportingIngestionConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Configuration.ReportingIngestionConfiguration.ObservedEvents">
            <summary>
            Gets or sets the observed events.
            </summary>
            <value>
            The observed events.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Configuration.ReportingIngestionConfiguration.ObservedArchivedEvents">
            <summary>
            Gets or sets the observed archived events.
            Some events needs to be archived even if they are observed events.
            </summary>
            <value>
            The observed archived events.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Configuration.ReportingIngestionConfiguration.IgnoredEvents">
            <summary>
            Gets or sets the ignored events.
            </summary>
            <value>
            The ignored events.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Configuration.ReportingIngestionConfiguration.ConfigurationRefreshed(TaxHub.Configuration.IConfigSection)">
            <summary>
            This method is called when the configuration changes.
            </summary>
            <param name="section">Configuration Section containing the new values.</param>
        </member>
        <member name="T:Reporting.Ingestion.Configuration.EventNameHelperEx">
            <summary>
            Convert Event Name to Collection Name
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Configuration.EventNameHelperEx.IsIgnoredEvent(System.String,Reporting.Ingestion.Configuration.IReportingIngestionConfiguration)">
            <summary>
            Is ignored event
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="ingestionConfiguration">The ingestion configuration.</param>
            <returns>
            true if the event needs to be ignored; otherwise, false.
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.Configuration.EventNameHelperEx.EventStartsWith(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Determents whether list has an item that begins with the text.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="list">The list.</param>
            <returns>true if the event starts with any item from the list; otherwise, false.</returns>
        </member>
        <member name="M:Reporting.Ingestion.Configuration.EventNameHelperEx.EventEndsWith(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Determents whether list has an item that ends with the text.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="list">The list.</param>
            <returns>true if the event ends with any item from the list; otherwise, false.</returns>
        </member>
        <member name="T:Reporting.Ingestion.Controllers.ReportingIngestionServiceV2Controller">
            <summary>
            Web API endpoint(s) for the reporting system.
            </summary>
            <seealso cref="T:System.Web.Http.ApiController" />
        </member>
        <member name="M:Reporting.Ingestion.Controllers.ReportingIngestionServiceV2Controller.#ctor(Reporting.Ingestion.Application.IGarnishmentPayrollInstanceService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Controllers.ReportingIngestionServiceV2Controller"/> class.
            </summary>
            <param name="garnishmentPayrollInstanceService">The garnishment payroll instance service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Reporting.Ingestion.Controllers.ReportingIngestionServiceV2Controller.GarnishmentPayrollInstance(System.Guid)">
            <summary>
            Garnishments the payroll instance.
            </summary>
            <param name="id">The identifier.</param>
            <returns>
            HttpStatus 200 (OK) and payload if the liabilities for that payroll instance have been assembled;
            otherwise, returns HttpStatus 204 (No-Content).
            </returns>
        </member>
        <member name="T:Reporting.Ingestion.Controllers.ReportIngestionAdminController">
            <summary>
            Web API endpoint(s) for replaying events for the reporting system.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Controllers.ReportIngestionAdminController.#ctor(Reporting.Ingestion.Application.IEventReplayService,Reporting.Ingestion.Application.IEventArchiveReplayService,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Controllers.ReportIngestionAdminController"/> class.
            </summary>
            <param name="eventReplayService">The event replay service.</param>
            <param name="eventArchiveReplayService">The event archive replay service.</param>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:Reporting.Ingestion.Controllers.ReportIngestionAdminController.InitialLoad(Reporting.Ingestion.Models.EventReplayRequest)">
            <summary>
            Replays certain event scopes.
            </summary>
            <param name="eventReplayRequest">The specific scopes to replay.</param>
            <returns>An HTTP Response.</returns>
            <response code="202">Success.</response>
            <response code="409">Replay recently triggered..</response>
        </member>
        <member name="M:Reporting.Ingestion.Controllers.ReportIngestionAdminController.ReplayFromArchive(Reporting.Ingestion.Models.RequestReplayCommand,System.Threading.CancellationToken)">
            <summary>
            Replays events from the event archive.
            </summary>
            <param name="eventArchiveReplayRequest">The details on which events to replay.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An HTTP Response.</returns>
            <response code="202">Success.</response>
            <response code="400">Bad request - the event archive replay request data is incomplete or invalid</response>
        </member>
        <member name="M:Reporting.Ingestion.Controllers.ReportIngestionAdminController.GetSupportedReplayAggregates(System.Threading.CancellationToken)">
            <summary>
            Method returns the list of supported aggregates to replay
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns a list of supported aggregates to replay.</returns>
            <response code="200">Success.</response>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.EventArchive.AggregateEventArchiver">
            <summary>
            Aggregate Event Archive
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.AggregateEventArchiver.#ctor(Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore,TaxHub.Common.Logging.IAppLogger,SmartHub.Metrics.IAppMetricsFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.EventArchive.AggregateEventArchiver"/> class.
            </summary>
            <param name="eventArchiveRepository">The event archive repository.</param>
            <param name="logger">The logger.</param>
            <param name="metricsFactory">The metrics factory</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.AggregateEventArchiver.GetCollectionName(TaxHub.Messaging.Serialization.InboundDomainEventData)">
            <summary>
            Gets the name of the collection.
            </summary>
            <param name="eventData">The event data.</param>
            <returns>Collection Name</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.AggregateEventArchiver.GetAggregateEventsToProcess(System.String,System.Guid,System.Int32)">
            <summary>
            Gets the aggregate events to process.
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="aggregateId">The aggregate identifier.</param>
            <param name="fromSequenceNumber">From sequence number.</param>
            <returns>List of events to process.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.AggregateEventArchiver.TryToSaveToEventArchive(System.String,TaxHub.Messaging.Serialization.InboundDomainEventData,System.Threading.CancellationToken)">
            <summary>
            Archives the specified event data.
            Aggregate events that have non-empty Guid would go to collections that end with '_ae' (Aggregate Events).
            Aggregate events that have an empty Guild would go to collection that end with '_se' (System Events).
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="eventData">The event data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns true if event was successful archived; otherwise, false</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.AggregateEventArchiver.ApplyToEach(System.String,System.Func{TaxHub.Messaging.Serialization.InboundDomainEventData,System.Threading.Tasks.Task},SmartHub.Hosting.DataAccess.FilterParameters,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Applies an action to each event returned from the filters in filter params.
            </summary>
            <param name="collectionName">The specific event archive collection to query.</param>
            <param name="action">The action to apply to each aggregate.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="correlationId">The correlation Id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.AggregateEventArchiver.FindAll(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events by page parameters.
            </summary>
            <param name="collectionName">The collection name to retrieve events from.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.AggregateEventArchiver.DeleteFromFailedToConsume(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.EventArchive.ITaxEventStoreRepository">
            <summary>
            Tax Event Store Repo
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.ITaxEventStoreRepository.SetConnectionString(System.String,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Set connection string of Tax event store repository.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.ITaxEventStoreRepository.FindAll(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events by page parameters.
            </summary>
            <param name="filter">The filter.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.EventArchive.TaxEventStoreRepository">
            <summary>
            TaxEventStoreRepository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.TaxEventStoreRepository.SetConnectionString(System.String,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Set connection string of TaxHub event store repository.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.TaxEventStoreRepository.FindAll(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events based on page parameters.
            </summary>
            <param name="filter">The filter.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.EventArchive.TaxMongoDbEventStoreRepository">
            <summary>
            TaxMongoDbEventStoreRepository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.TaxMongoDbEventStoreRepository.#ctor(System.String,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            TaxMongoDbEventStoreRepository
            </summary>
            <param name="connectionString">The connectionString</param>
            <param name="logger">The logger</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.EventArchive.IPaymentEventStoreRepository">
            <summary>
            Payment event store repo.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IPaymentEventStoreRepository.SetConnectionString(System.String,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Set connection string of payment event store repository.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IPaymentEventStoreRepository.FindAllGreaterThanId(System.Guid,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and page parameters.
            </summary>
            <param name="id">The Last Id.</param>
            <param name="filter">The filter.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.EventArchive.PaymentEventStoreRepository">
            <summary>
            PaymentEventStoreRepository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.PaymentEventStoreRepository.SetConnectionString(System.String,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Set connection string of payment event store repository.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.PaymentEventStoreRepository.FindAllGreaterThanId(System.Guid,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events based on page parameters.
            </summary>
            <param name="lastId">The Last Id.</param>
            <param name="filter">The filter.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.EventArchive.SspMongoDbEventStoreRepository">
            <summary>
            SspMongoDbEventStoreRepository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.SspMongoDbEventStoreRepository.#ctor(System.String,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            SspMongoDbEventStoreRepository
            </summary>
            <param name="connectionString">The connectionString</param>
            <param name="logger">The logger</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore">
            <summary>
            The interface implemented by a class providing storage facility for the Reporting Event Archive Store.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.FindOne(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>DomainEventData</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.FindAggregateEvents(System.String,System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the aggregate events.
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="aggregateId">The aggregate identifier.</param>
            <param name="savedSequenceNumber">The saved sequence number.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            List of DomainEventData for specific aggregate.
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.Save(System.String,TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Saves the specified item.
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.Update(System.String,TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Updates an event in specified collection.
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="item">The item to update.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Success flag.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.Delete(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a event from specified collection by its ID
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.DeleteMany(System.String,MongoDB.Driver.FilterDefinition{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Method deletes a event from specified collection by its ID
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="filter">The filter used to find the data to delete.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns DeleteResult.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.ApplyToEach(System.String,System.Func{TaxHub.Messaging.Serialization.InboundDomainEventData,System.Threading.Tasks.Task},SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Applies an action to each event returned from the filters in filter params.
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="action">The action to apply to each aggregate.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.CreateMissingCollectionIndexes(MongoDB.Driver.ListCollectionsOptions,System.Threading.CancellationToken)">
            <summary>
            Loops through all the collections in the repo that match the <paramref name="listCollectionsOptions"/> and checks if they have an index. If not, it creates the indices.  
            </summary>
            <param name="listCollectionsOptions">Options for a list collections operation.  Can be used to filter.  Passing null will result in all collection.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.CreateTimeToLiveCollectionIndexes(MongoDB.Driver.ListCollectionsOptions,System.Threading.CancellationToken)">
            <summary>
            Loops through all the collections in the repo that match the <paramref name="listCollectionsOptions"/> and checks if they have a TTL index. If not, it creates the indices.  
            </summary>
            <param name="listCollectionsOptions">Options for a list collections operation.  Can be used to filter.  Passing null will result in all collection.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.FindAll(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events by page parameters.
            </summary>
            <param name="collectionName">The collection name to retrieve events from.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.FindAll(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,MongoDB.Driver.FilterDefinition{TaxHub.Messaging.Serialization.InboundDomainEventData},System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events by page parameters.
            </summary>
            <param name="collectionName">The collection name to retrieve events from.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.FindAllEventsSortedByEventId(System.String,System.Int32,System.Boolean,System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Retrieve events with the specified filters
            </summary>
            <param name="collectionName">collection name</param>
            <param name="limit">number of items to retrieve</param>
            <param name="excludeBody">exclude the body of event</param>
            <param name="eventIdGreaterThan">eventIdGreaterThan</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of InboundDomainEventData</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.IReportingEventArchiveStore.FindAll(System.String,System.DateTime,System.DateTime,System.Int32,System.Nullable{System.Guid},System.Nullable{System.Int32})">
            <summary>
            Returns events based on the parameters.  Sorted by utc and aggId ascending.
            </summary>
            <param name="collectionName">collectionName</param>
            <param name="minDate">minDate</param>
            <param name="maxDate">maxDate</param>
            <param name="limit">limit</param>
            <param name="afterAggregateId">afterAggregateId to filter aggIds for events with minDate.</param>
            <param name="sequenceNumber">seqNum.  Normally set to 1 during replay.</param>
            <returns>List of events.</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository">
            <summary>
            Repository for Event Archive store
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepositoryBase`2" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.AggregateCollectionNameSuffix">
            <summary>
            The suffix for the aggregate collections
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.SystemCollectionNameSuffix">
            <summary>
            The suffix for the system (non-aggregate) collections
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository" /> class.
            </summary>
            <param name="connectivityProvider">The connectivity provider.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.CreateMissingCollectionIndexes(MongoDB.Driver.ListCollectionsOptions,System.Threading.CancellationToken)">
            <summary>
            Loops through all the collections in the repo that match the <paramref name="listCollectionsOptions"/> and checks if they have an index. If not, it creates the indices.  
            </summary>
            <param name="listCollectionsOptions">Options for a list collections operation.  Can be used to filter.  Passing null will result in all collection.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.CreateTimeToLiveCollectionIndexes(MongoDB.Driver.ListCollectionsOptions,System.Threading.CancellationToken)">
            <summary>
            Loops through all the collections in the repo that match the <paramref name="listCollectionsOptions"/> and checks if they have a TTL index. If not, it creates the indices.  
            </summary>
            <param name="listCollectionsOptions">Options for a list collections operation.  Can be used to filter.  Passing null will result in all collection.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.EnsureCollection(System.String,System.Boolean)">
            <summary>
            Method optionally drops collection and recreates it with all required indexes.
            Default implementation ignores the recreation option as collection will be created on demand by MongoDB when data is being written.
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="withDrop">If true enforces dropping the collection.</param>
            <returns>void</returns>
            <remarks>
            This method is used by Data Seeder and tests. It must not be called from production code.
            </remarks>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.FindOne(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a incomplete (failed to queue) event by its id.
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.FindAggregateEvents(System.String,System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the aggregate events.
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="aggregateId">The aggregate identifier.</param>
            <param name="savedSequenceNumber">The saved sequence number.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            List of DomainEventData for specific aggregate.
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.Save(System.String,TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Saves the specified item.
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.Update(System.String,TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Updates an event in specified collection.
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="item">The item to update.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Success flag.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.Delete(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a event from specified collection by its ID
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.DeleteMany(System.String,MongoDB.Driver.FilterDefinition{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Method deletes a event from specified collection by its ID
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="filter">The filter used to find the data to delete.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.ApplyToEach(System.String,System.Func{TaxHub.Messaging.Serialization.InboundDomainEventData,System.Threading.Tasks.Task},SmartHub.Hosting.DataAccess.FilterParameters,System.Threading.CancellationToken)">
            <summary>
            Applies an action to each event returned from the filters in filter params.
            </summary>
            <param name="collectionName">The name of the specific event archive collection</param>
            <param name="action">The action to apply to each aggregate.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.BulkCreate(System.String,System.Collections.Generic.List{TaxHub.Messaging.Serialization.InboundDomainEventData},System.Threading.CancellationToken)">
            <summary>
            Method creates multiple aggregates in the system. It performs bulk operation boosting the performance.
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="events">The events.</param>
            <param name="cancellationToken">Cancellation token</param>
            <remarks>This method is intended for a limited use due to complexity of handling errors multiple
            that might be resulted from multiple operation failures. Consider the error handling before using this method.</remarks>
            <remarks>Do not pass an empty array.</remarks>
            <remarks>Do not pass more than 1000 elements.</remarks>
            <returns>Returns a boolean indicator of success.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.GetCollectionName(TaxHub.Messaging.Serialization.InboundDomainEventData)">
            <summary>
            Gets the name of the collection.
            </summary>
            <param name="eventData">The event data.</param>
            <returns>Collection Name</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.EventArchive.MongoDbEventArchiveStoreRepository.GetCollectionName(System.String,System.String,System.String)">
            <summary>
            Builds the event archive collection name
            </summary>
            <param name="boundedContext">The bounded context name</param>
            <param name="aggregateName">The aggregate name</param>
            <param name="suffix">The suffix</param>
            <returns>The event archive collection name</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingDbContext">
            <summary>
            Implementation of company tax agency reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingDbContext.CompanyTaxAgencyReportingDbContextFactory">
            <summary>
            CompanyTaxAgencyReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingDbContext.CompanyTaxAgencyReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingDbContext.CompanyTaxAgencyReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingRepository">
            <summary>
            Implementation for company tax setup repository
            </summary>
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyTaxAgencyReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyTaxAgencyReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxAgencyReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingRepository">
            <summary>
            Implementation for company tax setup repository
            </summary>
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyTaxReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyTaxReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingDbContext">
            <summary>
            Implementation of company tax setup reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingDbContext.CompanyTaxReportingDbContextFactory">
            <summary>
            CompanyTaxReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingDbContext.CompanyTaxReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyTaxReportingDbContext.CompanyTaxReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.AuditEntryMap">
            <summary>
            Mapping for CompanyTaxAgencyReportEntity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.AuditEntryMap.TableName">
            <summary>
            The List of properties that should be audited on the aggregate
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.AuditEntryMap.ParentPrimaryKeyColumnName">
            <summary>
            The List of properties that should be audited on the aggregate
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.AuditEntryMap.#ctor">
            <summary>
            CompanyTaxAgencyReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxAgencyAuditMap">
            <summary>
            Mapping for TaxAgencyReportEntity
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CompanyTaxAgencyAuditMap">
            <summary>
            Mapping for CompanyTaxAgencyReportEntity
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CompanyTaxAgencyReportMap">
            <summary>
            Mapping for CompanyTaxAgencyReportEntity
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CompanyTaxAgencyReportMap.#ctor">
            <summary>
            CompanyTaxAgencyReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CompanyTaxReportMap">
            <summary>
            Mapping for CompanyTax
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CompanyTaxReportMap.#ctor">
            <summary>
            CompanyTaxReportMap
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.IReportingEntityMap.TableName">
            <summary>
            Table name entity maps to.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CompanyTaxAgencyStatusLookupMap">
            <summary>
            CompanyTaxAgencyStatusLookupMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CompanyTaxAgencyStatusLookupMap.#ctor">
            <summary>
            CompanyTaxAgencyStatusLookupMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxScheduleReportMap.#ctor">
            <summary>
            TaxScheduleReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxAgencyTransactionAmountReportMap">
            <summary>
            TaxAgencyTransactionAmountReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxAgencyTransactionAmountReportMap.#ctor">
            <summary>
            TaxAgencyTransactionAmountReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayLiabilitiesReportMap">
            <summary>
            PayLiabilitiesReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayLiabilitiesReportMap.#ctor">
            <summary>
            PayLiabilitiesReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayActionsReportMap">
            <summary>
            PayActionsReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayActionsReportMap.#ctor">
            <summary>
            PayActionsReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.YEProcessingFilesReportMap">
            <summary>
            Mapping for YEProcessingFileReportEntity
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.YEProcessingFilesReportMap.#ctor">
            <summary>
            YEProcessingFilesReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.YEProcessingReportMap">
            <summary>
            Mapping for YEProcessingReportEntity
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.YEProcessingReportMap.#ctor">
            <summary>
            YEProcessingReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.GarnishmentPayrollInstanceReportMap">
            <summary>
            The GarnishmentPayrollInstanceReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.GarnishmentPayrollInstanceReportMap.#ctor">
            <summary>
            Default constructor for the GarnishmentPayrollInstanceReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.LiabilityPaymentsReportMap">
            <summary>
            LiabilityPaymentsReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.LiabilityPaymentsReportMap.#ctor">
            <summary>
            LiabilityPaymentsReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.EFilingAcknowledgmentReportMap">
            <summary>
            EFilingAcknowledgmentsReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.EFilingAcknowledgmentReportMap.#ctor">
            <summary>
            EFilingAcknowledgmentsReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.EFilingAcknowledgmentAlertReportMap">
            <summary>
            EFilingAcknowledgmentAlertsReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.EFilingAcknowledgmentAlertReportMap.#ctor">
            <summary>
            EFilingAcknowledgmentAlertsReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentLiabilitiesReportMap">
            <summary>
            PayGarnishmentLiabilitiesReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentLiabilitiesReportMap.#ctor">
            <summary>
            PayGarnishmentActionsReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentActionsReportMap">
            <summary>
            PayGarnishmentActionsReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentActionsReportMap.#ctor">
            <summary>
            PayGarnishmentActionsReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PaymentFileRequestPaymentsReportMap">
            <summary>
            PaymentFileRequestPaymentsReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PaymentFileRequestPaymentsReportMap.#ctor">
            <summary> 
            PaymentFileRequestReportMap 
            </summary> 
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PaymentFileRequestReportMap">
            <summary> 
            PaymentFileRequestReportMap 
            </summary> 
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PaymentFileRequestReportMap.#ctor">
            <summary> 
            PaymentFileRequestReportMap 
            </summary> 
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayrollInstanceReportMap">
            <summary>
            Mapping between object and db table
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayrollInstanceReportMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayrollInstanceReportMap"/> class.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayrollPaymentReportEntityMap">
            <summary>
            PayrollPaymentReportEntityMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayrollPaymentReportEntityMap.#ctor">
            <summary>
            PayrollPaymentReportEntityMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentDeductionReportMap">
            <summary>
            PayGarnishmentDeductionReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentDeductionReportMap.#ctor">
            <summary>
            PayGarnishmentDeductionReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentExceptionLookupMap">
            <summary>
            payGarnishmentExceptionsReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentExceptionLookupMap.#ctor">
            <summary>
            PayGarnishmentExceptionLookupMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentPayeeReportMap">
            <summary>
            PayGarnishmentPayeeReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentPayeeReportMap.#ctor">
            <summary>
            PayGarnishmentPayeeReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentEmployeeReportMap">
            <summary>
            PayGarnishmentEmployeeReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentEmployeeReportMap.#ctor">
            <summary>
            PayGarnishmentEmployeeReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentExceptionReportMap">
            <summary>
            payGarnishmentExceptionsReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentExceptionReportMap.#ctor">
            <summary>
            PayGarnishmentExceptionsReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxAgencyReportMap">
            <summary>
            TaxAgencyReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxAgencyReportMap.#ctor">
            <summary>
            PayGarnishmentsReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentReportMap">
            <summary>
            PayGarnishmentsReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayGarnishmentReportMap.#ctor">
            <summary>
            PayGarnishmentsReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayTaxesModelMap">
            <summary>
            Mapping for PayTaxes
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayTaxesModelMap.#ctor">
            <summary>
            PayTaxesModelMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxCodeMappingReportMap.#ctor">
            <summary>
            TaxCodeMappingReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxPaymentCreditReportMap">
            <summary>
            Mapping for TaxAmountReport
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxPaymentCreditReportMap.#ctor">
            <summary>
            TaxPaymentCreditReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CompanyProductReportMap">
            <summary>
            Mapping for CompanyProductReport
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CompanyProductReportMap.#ctor">
            <summary>
            TenantProductReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxAgencyTransactionReportMap">
            <summary>
            Mapping for TaxAgencyTransactionReportEntity
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxAgencyTransactionReportMap.#ctor">
            <summary>
            TaxAgencyTransactionReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.Bai2BankTransactionReportMap">
            <summary>
            Mapping for Bai2BankTransactionReport
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.Bai2BankTransactionReportMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CustomerBankAccountReportMap">
            <summary>
            Mapping for CustomerBankAccountReportEntity
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CustomerBankAccountReportMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayReportMap">
            <summary>
            Mapping for Pay
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayReportMap.#ctor">
            <summary>
            PayReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TenantStatusReportMap">
            <summary>
            Mapping for TenantReport
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TenantStatusReportMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TenantProductReportMap">
            <summary>
            Mapping for TenantReport
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TenantProductReportMap.#ctor">
            <summary>
            TenantProductReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.UsgBankAccountReportMap">
            <summary>
            Mapping for UsgBankAccountReport
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.UsgBankAccountReportMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.GeneralLedgerAccountReportMap">
            <summary>
            Mapping between object and db table
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.GeneralLedgerAccountReportMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.JournalEntryReportMap"/> class.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxAmountReportMap">
            <summary>
            Mapping for TaxAmountReport
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxAmountReportMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxCodeReportMap">
            <summary>
            Mapping for TaxCodeReportEntity
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxCodeReportMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxPayrollImportReportMap">
            <summary>
            Mapping for TaxPayrollImportReportEntity
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxPayrollImportReportMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxPayrollInputReportMap">
            <summary>
            Mapping for TaxPayrollImportReport
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TaxPayrollInputReportMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.BankTransactionReportMap">
            <summary>
            Mapping for BankTransactionReport
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.BankTransactionReportMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CompanyReportMap">
            <summary>
            Mapping for CompanyReport
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.CompanyReportMap.#ctor">
            <summary>
            CompanyReportMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.JournalEntryReportMap">
            <summary>
            Mapping between object and db table
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.JournalEntryReportMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.JournalEntryReportMap"/> class.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.LiabilityCollectionRptMap">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.LiabilityCollectionRptMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.LiabilityReportMap">
            <summary>
            LiabilityReportMap
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.LiabilityReportMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayrollUnitReportMap">
            <summary>
            Mapping for PayrollUnitReport
            </summary>
            <seealso cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.PayrollUnitReportMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TenantReportMap">
            <summary>
            Mapping for TenantReport
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EntityMappings.TenantReportMap.#ctor">
            <summary>
            LiabilityCollectionRptMap
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyTaxAgencyReportDbContextFactory">
            <summary>
            Definition for company tax agency repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyTaxAgencyReportingRepository">
            <summary>
            Definition for company tax agency repository
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyTaxReportingRepository">
            <summary>
            Definition for company tax setup repository
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyTaxReportDbContextFactory">
            <summary>
            Definition for company tax setup repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.INettedCollectionReportDbContextFactory">
            <summary>
            Definition for netted collection db context factory.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxScheduleReportDbContextFactory">
            <summary>
            Definition for Tax Schedule setup repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxScheduleReportingRepository">
            <summary>
            Definition for Tax Schedule setup repository
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.NettedCollectionReportDbContext">
            <summary>
            Implementation of NettedCollectionReportDbContext
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.NettedCollectionReportDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.NettedCollectionReportDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.NettedCollectionReportDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.NettedCollectionReportDbContext.NettedCollectionReportDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.NettedCollectionReportDbContext.NettedCollectionReportDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.NettedCollectionReportingRepository">
            <summary>
            NettedCollection Repository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.NettedCollectionReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.INettedCollectionReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.NettedCollectionReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.NettedCollectionReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.NettedCollectionReportingRepository.GetChildCollections(Reporting.Ingestion.Models.NettedCollectionReportEntity)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.AuditReportingRepository`1">
            <summary>
            Repository for Aggregates that have properties that are being audited (changes to those properties are recorded in an audit table)
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.AuditReportingRepository`1.Delete(`0,System.Threading.CancellationToken)">
            <summary>
            Deletes a audited record and it's audit entries.
            </summary>
            <param name="item">Parent record to delete.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Boolean. True if successful.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.AuditReportingRepository`1.Update(System.Guid,`0,System.Threading.CancellationToken)">
            <summary>
            Update an audited record and adds audit entries.
            </summary>
            <param name="id">Guid</param>
            <param name="updatedEntity">Parent record to be updated.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Boolean. True if successful.</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IReportRequestReportingDbContextFactory">
            <summary>
            Definition for tax amount repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportDbContext">
            <summary>
            Implementation of tax schedule setup reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportDbContext.TaxScheduleReportDbContextFactory">
            <summary>
            TaxScheduleReportDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportDbContext.TaxScheduleReportDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportDbContext.TaxScheduleReportDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportingRepository">
            <summary>
            Implementation for Tax Schedule repository
            </summary>
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxScheduleReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxScheduleReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxScheduleReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ReportRequestReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.ReportRequestReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ReportRequestReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.ReportRequestReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ReportRequestReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ReportRequestReportingDbContext.ReportRequestReportingDbContextFactory.Create">
            <summary>
            Creates the DB context
            </summary>
            <returns>The DB context</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ReportRequestReportingRepository.Delete(Reporting.Ingestion.Models.ReportRequestReportEntity,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if successful; otherwise, false</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IYEProcessingReportingRepository">
            <summary>
            Contract for ye processing report repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IYEProcessingReportDbContextFactory">
            <summary>
            Definition for pay repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ParentChildReportingRepository`1">
            <summary>
            Repository for Aggregates that have a parent.child relationship
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerGuidRepository`1" />
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.IYEProcessingReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ParentChildReportingRepository`1.GetChildCollections(`0)">
            <summary>
            Gets the list of child collections for the parent record
            </summary>
            <param name="item">Parent record to get the child collections from.</param>
            <returns>A list of child collections for the parent record</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ParentChildReportingRepository`1.Delete(`0,System.Threading.CancellationToken)">
            <summary>
            Deletes a parent record and it's child records.
            </summary>
            <param name="item">Parent record to delete.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Boolean. True if successful.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ParentChildReportingRepository`1.Update(System.Guid,`0,System.Threading.CancellationToken)">
            <summary>
            Update YEProcessingReportEntity Report.
            </summary>
            <param name="id">Guid</param>
            <param name="updatedEntity">Parent record to be updated.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Boolean. True if successful.</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingRepository">
            <summary>
            Repository for YeProcessing entity
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerGuidRepository`1" />
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.IYEProcessingReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IYEProcessingReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingRepository.GetChildCollections(Reporting.Ingestion.Models.YEProcessingReportEntity)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingDbContext">
            <summary>
            Db context for YeProcessing
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingDbContext.YEProcessingReportingDbContextFactory">
            <summary>
            YEProcessingReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.YEProcessingReportingDbContext.YEProcessingReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            YEProcessingReportingDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxLiabilityReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxLiabilityReportingDbContext.TaxLiabilityReportingDbContextFactory">
            <summary>
            TaxLiabilityReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxLiabilityReportingDbContext.TaxLiabilityReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            TaxAgencyReportDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxLiabilityReportingDbContext.TaxLiabilityReportingDbContextFactory.Create">
            <summary>
            Creates the DB context
            </summary>
            <returns>The DB context</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IEFilingAcknowledgmentReportDbContextFactory">
            <summary>
            IEFilingAcknowledgmentReportDbContextFactory
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IEFilingAcknowledgmentReportingRepository">
            <summary>
            IEFilingAcknowledgmentReportRepository
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollInstanceReportDbContextFactory">
            <summary>
            Definition for payroll instance repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollInstanceReportingRepository">
            <summary>
            Contract for payroll instance report repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollPaymentReportingRepository">
            <summary>
            Contract for payroll payment report entity repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollPaymentReportEntityDbContextFactory">
            <summary>
            Definition for payroll payment repository db context factory
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPaymentFileRequestReportDbContextFactory">
            <summary> 
            IPaymentFileRequestReportDbContextFactory 
            </summary> 
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentPayrollInstanceReportingRepository">
            <summary>
            The GarnishmentPayrollInstanceyReportingRepository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentPayrollInstanceReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IGarnishmentPayrollInstanceReportingDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor for GarnishmentPayrollInstanceReportingRepository
            </summary>
            <param name="dbContextFactory">The DbContext factory</param>
            <param name="logger">A logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentPayrollInstanceReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <summary>
            Gets the aggregate set
            </summary>
            <param name="dbContext">The DBContext</param>
            <returns>A collection of GarnishmentPayrollInstanceReportEntity</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentPayrollInstanceReportingDbContext">
            <summary>
            The GarnishmentPayrollInstanceReportingDbContext
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentPayrollInstanceReportingDbContext.#ctor">
            <summary>
            Default constructor for GarnishmentPayrollInstanceReportingDbContext
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentPayrollInstanceReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for GarnishmentPayrollInstanceReportingDbContext
            </summary>
            <param name="connectionString">The connection string</param>
            <param name="recreate">If true, recreate</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentPayrollInstanceReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentPayrollInstanceReportingDbContext.GarnishmentPayrollInstanceReportingDbContextFactory">
            <summary>
            GarnishmentAccumFactReportDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentPayrollInstanceReportingDbContext.GarnishmentPayrollInstanceReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            GarnishmentPayrollInstanceReportingDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentPayrollInstanceReportingDbContext.GarnishmentPayrollInstanceReportingDbContextFactory.Create">
            <summary>
            Creates the DB context
            </summary>
            <returns>The DB context</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentLiabilityReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentLiabilityReportingDbContext.GarnishmentLiabilityReportingDbContextFactory">
            <summary>
            GarnishmentAccumFactReportDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentLiabilityReportingDbContext.GarnishmentLiabilityReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            TaxAgencyReportDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentLiabilityReportingDbContext.GarnishmentLiabilityReportingDbContextFactory.Create">
            <summary>
            Creates the DB context
            </summary>
            <returns>The DB context</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GarnishmentLiabilityReportingRepository.GetLiabilitiesForPayrollInstance(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IGarnishmentPayrollInstanceReportingRepository">
            <summary>
            Interface IGarnishmentPayrollInstanceReportingRepository
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IGarnishmentPayrollInstanceReportingDbContextFactory">
            <summary>
            Interface IGarnishmentPayrollInstanceReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.IGarnishmentLiabilityReportingRepository.GetLiabilitiesForPayrollInstance(System.Guid)">
            <summary>
            Gets the garnishment liabilities in a payroll instance.
            </summary>
            <param name="payrollInstanceId">The payroll instance identifier.</param>
            <returns>garnishment liabilities in a payroll instance</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPaymentFileRequestReportingRepository">
            <summary> 
            IPaymentFileRequestReportingRepository 
            </summary> 
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAgencyReportDbContextFactory">
            <summary>
            IPayGarnishmentReportDbContextFactory
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingDbContext">
            <summary>
            EFilingAcknowledgmentReportDbContext
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingDbContext.EFilingAcknowledgmentReportDbContextFactory">
            <summary>
            EFilingAcknowledgmentReportDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingDbContext.EFilingAcknowledgmentReportDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            EFilingAcknowledgmentReportDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingDbContext.EFilingAcknowledgmentReportDbContextFactory.Create">
            <summary>
            Creates the DB context
            </summary>
            <returns>The DB context</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingRepository">
            <summary>
            EFilingAcknowledgmentReportingRepository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IEFilingAcknowledgmentReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            EFilingAcknowledgmentReportRepository
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">IAppLogger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingRepository.Delete(Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if successful; otherwise, false</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.EFilingAcknowledgmentReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollInstanceReportingDbContext">
            <summary>
            PayrollInstanceReportingDbContext
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollInstanceReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollInstanceReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollInstanceReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollInstanceReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollInstanceReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollInstanceReportingDbContext.PayrollInstanceReportDbContextFactory">
            <summary>
            PayrollInstanceReportDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollInstanceReportingDbContext.PayrollInstanceReportDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            PayrollInstanceReportDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollInstanceReportingRepository">
            <summary>
            Implementation for payroll instance report repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerGuidRepository`1" />
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollInstanceReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollInstanceReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollInstanceReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollInstanceReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollInstanceReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportEntityRepository">
            <summary>
            PayrollPaymentReportEntityRepository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportEntityRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollPaymentReportEntityDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportEntityRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportEntityRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve one Payroll Payment Report
            </summary>
            <param name="id">Guid identifier</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>PayrollPaymentReportEntity</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportEntityRepository.Delete(Reporting.Ingestion.Models.PayrollPaymentReportEntity,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportEntityRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportingDbContext">
            <summary>
            PayrollPaymentReportingDbContext
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportingDbContext.PayrollPaymentReportingDbContextFactory">
            <summary>
            PaymentReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollPaymentReportingDbContext.PayrollPaymentReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            PaymentReportingDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportDbContext">
            <summary> 
            PaymentFileRequestReportDbContext 
            </summary> 
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportDbContext.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportDbContext"/> class. 
            </summary> 
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportDbContext.#ctor(System.String,System.Boolean)">
            <summary> 
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportDbContext"/> class. 
            </summary> 
            <param name="connectionString">The connection string.</param> 
            <param name="recreate">if set to <c>true</c> [recreate].</param> 
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc /> 
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportDbContext.PaymentFileRequestReportDbContextFactory">
            <summary> 
            PaymentFileRequestReportDbContextFactory 
            </summary> 
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportDbContext.PaymentFileRequestReportDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary> 
            PaymentFileRequestReportDbContextFactory 
            </summary> 
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param> 
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportDbContext.PaymentFileRequestReportDbContextFactory.Create">
            <summary> 
            Creates the DB context 
            </summary> 
            <returns>The DB context</returns> 
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportingRepository">
            <summary> 
            Implementation for PaymentFileRequestReportingRepository 
            </summary> 
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerGuidRepository`1" /> 
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportingRepository" /> 
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IPaymentFileRequestReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary> 
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportingRepository"/> class. 
            </summary> 
            <param name="dbContextFactory">dbContextFactory</param> 
            <param name="logger">logger</param> 
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportingRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve one PaymentFileRequest Report
            </summary>
            <param name="id">Guid identifier</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>PaymentFileRequestReportEntity</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportingRepository.Delete(Reporting.Ingestion.Models.PaymentFileRequestReportEntity,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PaymentFileRequestReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc /> 
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyReportingDbContext">
            <summary>
            PayGarnishmentReportDbContext
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyReportingDbContext.TaxAgencyReportDbContextFactory">
            <summary>
            GarnishmentAccumFactReportDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyReportingDbContext.TaxAgencyReportDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            TaxAgencyReportDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyReportingDbContext.TaxAgencyReportDbContextFactory.Create">
            <summary>
            Creates the DB context
            </summary>
            <returns>The DB context</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingDbContext">
            <summary>
            PayGarnishmentReportDbContext
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingDbContext.PayGarnishmentReportDbContextFactory">
            <summary>
            GarnishmentAccumFactReportDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingDbContext.PayGarnishmentReportDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            PayGarnishmentReportDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingDbContext.PayGarnishmentReportDbContextFactory.Create">
            <summary>
            Creates the DB context
            </summary>
            <returns>The DB context</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingRepository">
            <summary>
            GarnishmentAccumFactReportRepository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IPayGarnishmentReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            PayGarnishmentReportRepository
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">IAppLogger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingRepository.Delete(Reporting.Ingestion.Models.PayGarnishmentReportEntity,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if successful; otherwise, false</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayGarnishmentReportingRepository.GetGarnishmentsForPayrollInstance(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayGarnishmentReportingRepository">
            <summary>
            IPayGarnishmentReportRepository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.IPayGarnishmentReportingRepository.GetGarnishmentsForPayrollInstance(System.Guid)">
            <summary>
            Gets the garnishments in a payroll instance.
            </summary>
            <param name="payrollInstanceId">The payroll instance identifier.</param>
            <returns>garnishments in a payroll instance</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayGarnishmentReportDbContextFactory">
            <summary>
            IPayGarnishmentReportDbContextFactory
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAgencyReportingRepository">
            <summary>
            ITaxAgencyReportingRepository
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyReportingRepository">
            <summary>
            GarnishmentAccumFactReportRepository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAgencyReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            PayGarnishmentReportRepository
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">IAppLogger</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingRepository">
            <summary>
            Implementation for Customer Bank Account repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerGuidRepository`1" />
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAgencyTransactionReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAgencyTransactionReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingDbContext">
            <summary>
            Implementation of Tax Payment reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingDbContext.TaxAgencyTransactionReportingDbContextFactory">
            <summary>
            TaxAgencyTransactionReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingDbContext.TaxAgencyTransactionReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxAgencyTransactionReportingDbContext.TaxAgencyTransactionReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.CustomerBankAccountReportingDbContext">
            <summary>
            Implementation of Customer Bank Account reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CustomerBankAccountReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CustomerBankAccountReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CustomerBankAccountReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CustomerBankAccountReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CustomerBankAccountReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.CustomerBankAccountReportingDbContext.CustomerBankAccountReportingDbContextFactory">
            <summary>
            CustomerBankAccountReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CustomerBankAccountReportingDbContext.CustomerBankAccountReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingDbContext.TenantReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.CustomerBankAccountReportingRepository">
            <summary>
            Implementation for Customer Bank Account repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerGuidRepository`1" />
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.ICustomerBankAccountReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CustomerBankAccountReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ICustomerBankAccountReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CustomerBankAccountReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IBai2BankTransactionReportDbContextFactory">
            <summary>
            Definition for bank transaction repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.Bai2BankTransactionReportDbContext">
            <summary>
            Impementation of bai2 bank transaction reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.Bai2BankTransactionReportDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.Bai2BankTransactionReportDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.Bai2BankTransactionReportDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.Bai2BankTransactionReportDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.Bai2BankTransactionReportDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.Bai2BankTransactionReportDbContext.Bai2BankTransactionReportingDbContextFactory">
            <summary>
            Impementation of bank transaction reporting db context factory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.Bai2BankTransactionReportDbContext.Bai2BankTransactionReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.Bai2BankTransactionReportDbContext.Bai2BankTransactionReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.Bai2BankTransactionReportingRepository">
            <summary>
            Imlimentation for bank transaction repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerGuidRepository`1" />
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.IBai2BankTransactionReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.Bai2BankTransactionReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IBai2BankTransactionReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.Bai2BankTransactionReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.GeneralLedgerAccountReportingDbContext">
            <summary>
            Db context for general ledger account
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GeneralLedgerAccountReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.GeneralLedgerAccountReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GeneralLedgerAccountReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.GeneralLedgerAccountReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GeneralLedgerAccountReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.GeneralLedgerAccountReportingDbContext.GeneralLedgerAccountReportingDbContextFactory">
            <summary>
            LiabilityReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GeneralLedgerAccountReportingDbContext.GeneralLedgerAccountReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            LiabilityCollectionReportingDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.GeneralLedgerAccountReportRepository">
            <summary>
            Implementation for genral ledger account report repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerGuidRepository`1" />
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.IJournalEntryReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GeneralLedgerAccountReportRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IGeneralLedgerAccountReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.GeneralLedgerAccountReportRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IBai2BankTransactionReportingRepository">
            <summary>
            Defenition for bai2 bank transaction repository
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAgencyTransactionReportDbContextFactory">
            <summary>
            Definition for Tax Payment repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ICustomerBankAccountReportDbContextFactory">
            <summary>
            Definition for Customer Bank Account repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAgencyTransactionReportingRepository">
            <summary>
            Definition for TaxAgencyTransactionReportEntity repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ICustomerBankAccountReportingRepository">
            <summary>
            Definition for Customer Bank Account repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayReportDbContextFactory">
            <summary>
            Definition for pay repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayReportingRepository">
            <summary>
            Contract for liablity report repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxCodeReportingRepository">
            <summary>
            Defenition for tax code repository
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IGeneralLedgerAccountReportDbContextFactory">
            <summary>
            Definition for general ledger account repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAmountReportDbContextFactory">
            <summary>
            Definition for tax amount repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAmountReportingRepository">
            <summary>
            Definition for tax amount import repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAmountReportingRepository.FindTaxAmountByIds(System.Guid,System.Int32,Reporting.Ingestion.Models.UteTaxDataSource,System.Threading.CancellationToken)">
            <summary>
            Finds the by ids.
            </summary>
            <param name="payrollId">The payroll identifier.</param>
            <param name="taxId">The tax identifier.</param>
            <param name="source">The source.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Tax amount in repository</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxAmountReportingRepository.FindTaxAmountsById(System.Guid,Reporting.Ingestion.Models.UteTaxDataSource)">
            <summary>
            Finds the tax amounts by identifier.
            </summary>
            <param name="payrollId">The payroll identifier.</param>
            <param name="source">The source.</param>
            <returns>Tax payroll in the repository</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxCodeReportDbContextFactory">
            <summary>
            Definition for tax code repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollImportReportDbContextFactory">
            <summary>
            Definition for tax payroll import repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollImportReportingRepository">
            <summary>
            Defenition for tax payroll import repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollImportReportingRepository.FindOne(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="includeChildItems">Whether or not to include the tax amounts.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollImportReportingRepository.FindOneWithSpecifiedTaxAmount(System.Guid,System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieve TaxPayroll with the specified tax amounts.
            </summary>
            <param name="taxPayrollId">taxPayrollId</param>
            <param name="taxIds">List of taxIds to retrieve.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>TaxPayrollImportReportEntity</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollImportReportingRepository.FindAllTaxAmounts(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve TaxPayroll with all the tax amounts.
            </summary>
            <param name="taxPayrollId">taxPayrollId</param>
            <param name="cancellationToken">cancellationToken</param>
            <returns>task</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollInputReportDbContextFactory">
            <summary>
            Definition for tax payroll input repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollInputReportingRepository">
            <summary>
            Definition for tax payroll import repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollInputReportingRepository.FindAllById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Return all records for a specific id.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollInputReportingRepository.FindOneWithSpecifiedTaxAmount(System.Guid,System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieve TaxPayroll with the specified tax amounts.
            </summary>
            <param name="taxPayrollId">taxPayrollId</param>
            <param name="taxIds">List of taxIds to retrieve.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>TaxPayrollInputReportEntity</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollInputReportingRepository.FindOne(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="includeChildItems">Whether or not to include the tax amounts.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IUsgBankAccountReportDbContextFactory">
            <summary>
            Definition for Usg Bank Account repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IUsgBankAccountReportingRepository">
            <summary>
            Definition for Usg Bank Account repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportingDbContext">
            <summary>
            Db context for Pay
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportingDbContext.PayReportingDbContextFactory">
            <summary>
            LiabilityReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportingDbContext.PayReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            PayReportingDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportRepository">
            <summary>
            Repository for Pay entity
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerGuidRepository`1" />
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IPayReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportRepository.GetChildCollections(Reporting.Ingestion.Models.PayReport)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayReportRepository.Update(System.Guid,Reporting.Ingestion.Models.PayReport,System.Threading.CancellationToken)">
            <summary>
            Update Pay Report.
            </summary>
            <param name="id">Guid</param>
            <param name="updatedEntity">Updated entity</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Boolean. True if successful.</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingDbContext">
            <summary>
            Impementation of payroll unit reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingDbContext.PayrollUnitReportingDbContextFactory">
            <summary>
            Implimentation of payroll unit db context factory.
            </summary>
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollUnitReportDbContextFactory" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingDbContext.PayrollUnitReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingDbContext.PayrollUnitReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportDbContext">
            <summary>
            Impementation of bank transaction reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportDbContext.BankTransactionReportingDbContextFactory">
            <summary>
            Impementation of bank transaction reporting db context factory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportDbContext.BankTransactionReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportDbContext.BankTransactionReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportingRepository">
            <summary>
            Imlimentation for bank transaction repository
            </summary>
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.IBankTransactionReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IBankTransactionReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.BankTransactionReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingDbContext">
            <summary>
            Impementation of company reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingDbContext.CompanyReportingDbContextFactory">
            <summary>
            CompanyReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingDbContext.CompanyReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingDbContext.CompanyReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingRepository">
            <summary>
            Implementation for company repository
            </summary>
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.CompanyReportingRepository.GetChildCollections(Reporting.Ingestion.Models.CompanyReport)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IBankTransactionReportDbContextFactory">
            <summary>
            Definition for bank transaction repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IBankTransactionReportingRepository">
            <summary>
            Defenition for bank transaction repository
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyReportDbContextFactory">
            <summary>
            Definition for company repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ICompanyReportingRepository">
            <summary>
            Definition for company repository
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IGeneralLedgerAccountReportingRepository">
            <summary>
            Contract for general ledger account report repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IJournalEntryReportDbContextFactory">
            <summary>
            Definition for journal entry repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IJournalEntryReportingRepository">
            <summary>
            Contract for journal entry report repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ILiabilityReportingRepository">
            <summary>
            Contract for liability report repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IRepository`2" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ILiabilityCollectionReportDbContextFactory">
            <summary>
            ILiablityCollectionReportDbContextFactory
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ILiabilityCollectionReportRepository">
            <summary>
            Represents a repository for Liability Collection.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ILiabilityReportDbContextFactory">
            <summary>
            Definition for liablity repository db context factory
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollUnitReportingRepository">
            <summary>
            Definition for payroll unit repository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollUnitReportingRepository.GetPayrollUnits(System.Guid,System.String)">
            <summary>
            Gets the payroll units.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="payGroup">The pay group.</param>
            <returns>List of payroll units</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollUnitReportDbContextFactory">
            <summary>
            Definition for payroll unit repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITenantReportDbContextFactory">
            <summary>
            Definition for tenant repository db context factory
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory" />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITenantReportingRepository">
            <summary>
            Defenition for tenant repository
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.JournalEntryReportingDbContext">
            <summary>
            Db context for journal entry
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.JournalEntryReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.JournalEntryReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.JournalEntryReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.JournalEntryReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.JournalEntryReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.JournalEntryReportingDbContext.JournalEntryReportingDbContextFactory">
            <summary>
            LiabilityReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.JournalEntryReportingDbContext.JournalEntryReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            LiabilityCollectionReportingDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.JournalEntryReportRepository">
            <summary>
            Implementation for journal entry report repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerGuidRepository`1" />
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.IJournalEntryReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.JournalEntryReportRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IJournalEntryReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.JournalEntryReportRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityCollectionReportingDbContext">
            <summary>
            LiabilityCollectionReportingDbContext
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityCollectionReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityCollectionReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityCollectionReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityCollectionReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityCollectionReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityCollectionReportingDbContext.LiabilityCollectionReportingDbContextFactory">
            <summary>
            LiabilityReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityCollectionReportingDbContext.LiabilityCollectionReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            LiabilityCollectionReportingDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityCollectionReportRepository">
            <summary>
            LiabilityCollectionReportRepository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityCollectionReportRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ILiabilityCollectionReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            LiabilityCollectionReportRepository
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">IAppLogger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityCollectionReportRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityCollectionReportRepository.GetChildCollections(Reporting.Ingestion.Models.LiabilityCollectionReport)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportingDbContext">
            <summary>
            LiabilityReportingDbContext
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportingDbContext.LiabilityReportingDbContextFactory">
            <summary>
            LiabilityReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportingDbContext.LiabilityReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            LiabilityCollectionReportingDbContextFactory
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportRepository">
            <summary>
            LiabilityReportRepository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ILiabilityReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve one LiabilityPayments Report
            </summary>
            <param name="id">Guid identifier</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>LiabilityPaymentsReportEntity</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportRepository.Delete(Reporting.Ingestion.Models.LiabilityReport,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.LiabilityReportRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingRepository">
            <summary>
            Implementation for Payroll Unit repository
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IPayrollUnitReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.PayrollUnitReportingRepository.GetPayrollUnits(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeMappingReportDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeMappingReportDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeMappingReportDbContext.TaxCodeMappingReportDbContextFactory">
            <summary>
            Impementation of bank transaction reporting db context factory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeMappingReportDbContext.TaxCodeMappingReportDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportDbContext.TaxCodeReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeMappingReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxCodeMappingReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeMappingReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeMappingReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportDbContext">
            <summary>
            Impementation of tax code reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportDbContext.TaxCodeReportingDbContextFactory">
            <summary>
            Impementation of bank transaction reporting db context factory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportDbContext.TaxCodeReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportDbContext.TaxCodeReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportingRepository">
            <summary>
            Imlimentation for tax code repository
            </summary>
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxCodeReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxCodeReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxCodeReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportDbContext">
            <summary>
            Impementation of tax payroll import reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportDbContext.TaxPayrollImportReportingDbContextFactory">
            <summary>
            Impementation of bank transaction reporting db context factory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportDbContext.TaxPayrollImportReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportDbContext.TaxPayrollImportReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportingRepository">
            <summary>
            Implementation for tax payroll import repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerIntRepository`1" />
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollImportReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollImportReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportingRepository.Delete(Reporting.Ingestion.Models.TaxPayrollImportReportEntity,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportingRepository.Update(System.Guid,Reporting.Ingestion.Models.TaxPayrollImportReportEntity,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportingRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportingRepository.FindOne(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportingRepository.FindOneWithSpecifiedTaxAmount(System.Guid,System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportingRepository.FindAllTaxAmounts(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find All the taxAmounts that are related to a taxPayroll
            </summary>
            <param name="taxPayrollId">The taxPayrollId</param>
            <param name="cancellationToken">The cancellationToken</param>
            <returns>tax payroll</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportDbContext">
            <summary>
            Impementation of tax payroll input reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportDbContext.TaxPayrollInputReportingDbContextFactory">
            <summary>
            Implementation of bank transaction reporting db context factory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportDbContext.TaxPayrollInputReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollImportReportDbContext.TaxPayrollImportReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportingRepository">
            <summary>
            Implementation for tax payroll import repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerIntRepository`1" />
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollInputReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITaxPayrollInputReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportingRepository.Delete(Reporting.Ingestion.Models.TaxPayrollInputReportEntity,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if successful; otherwise, false</returns>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportingRepository.Update(System.Guid,Reporting.Ingestion.Models.TaxPayrollInputReportEntity,System.Threading.CancellationToken)">
            <summary>
            Updates the specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="updatedEntity">The updated entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if successful; otherwise, false</returns>
            <exception cref="T:System.Exception">Trying to update an entity that does not exist</exception>
            <exception cref="T:SmartHub.Hosting.DataAccess.DataVersioningException">The entity was modified by another user</exception>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportingRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds the one.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>TaxPayrollInputReportEntity</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportingRepository.FindOne(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportingRepository.FindAllById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Return all records for a specific id.
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TaxPayrollInputReportingRepository.FindOneWithSpecifiedTaxAmount(System.Guid,System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingDbContext">
            <summary>
            Impementation of tenant reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingDbContext.TenantReportingDbContextFactory">
            <summary>
            TenantReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingDbContext.TenantReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingDbContext.TenantReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingRepository">
            <summary>
            Implementation for Tenant repository
            </summary>
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.ITenantReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.ITenantReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingRepository.Update(System.Guid,Reporting.Ingestion.Models.TenantReport,System.Threading.CancellationToken)">
            <summary>
            Update Tenant report.
            </summary>
            <param name="id">Guid</param>
            <param name="updatedEntity">Updated entity</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Boolean. True if successful.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingRepository.Delete(Reporting.Ingestion.Models.TenantReport,System.Threading.CancellationToken)">
            <summary>
            Delete the tenant report.
            </summary>
            <param name="item">Tenant report to delete.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Boolean. True if successful.</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve one Tenant Report
            </summary>
            <param name="id">Guid identifier</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>TenantReport</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.UsgBankAccountReportingDbContext">
            <summary>
            Implementation of Usg Bank Account reporting db context
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextBase" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.UsgBankAccountReportingDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.UsgBankAccountReportingDbContext"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.UsgBankAccountReportingDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.UsgBankAccountReportingDbContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.UsgBankAccountReportingDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.UsgBankAccountReportingDbContext.UsgBankAccountReportingDbContextFactory">
            <summary>
            UsgBankAccountReportingDbContextFactory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.UsgBankAccountReportingDbContext.UsgBankAccountReportingDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingDbContext.TenantReportingDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">The database connectivity provider.</param>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.SqlDataStore.UsgBankAccountReportingRepository">
            <summary>
            Implementation for Usg Bank Account repository
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.SqlDataStore.SqlServerGuidRepository`1" />
            <seealso cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.IUsgBankAccountReportingRepository" />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.UsgBankAccountReportingRepository.#ctor(Reporting.Ingestion.DataAccess.SqlDataStore.IUsgBankAccountReportDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.DataAccess.SqlDataStore.TenantReportingRepository"/> class.
            </summary>
            <param name="dbContextFactory">dbContextFactory</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.SqlDataStore.UsgBankAccountReportingRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.IUnhandledEventRepository">
            <summary>
            Unhandled event repository interface.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.IUnhandledEventRepository.DropCollection">
            <summary>
            Drops the collection
            </summary>
            <returns>Nothing</returns>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.IUnhandledEventRepository.FindAllEventsSortedByEventId(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Finds all the events sorted by event Id
            </summary>
            <param name="limit">The page limit</param>
            <param name="eventIdGreaterThan">The lower limit Id</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A list of events</returns>
        </member>
        <member name="T:Reporting.Ingestion.DataAccess.MongoDb.MongoDbUnhandledEventRepository">
            <summary>
            A mongo repository for unhandled events
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.MongoDb.MongoDbUnhandledEventRepository.DropCollection">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.DataAccess.MongoDb.MongoDbUnhandledEventRepository.FindAllEventsSortedByEventId(System.Int32,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.ApplyEventFilterAttribute">
            <summary>
            ApplyEventFilterAttribute
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.ApplyEventFilterAttribute.#ctor(System.String,System.String)">
            <summary>
            ApplyEventFilterAttribute
            </summary>
            <param name="eventName">eventName</param>
            <param name="minVersion">The minimum version.</param>
        </member>
        <member name="P:Reporting.Ingestion.ApplyEventFilterAttribute.EventName">
            <summary>
            EventName
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.ApplyEventFilterAttribute.MinimumSchemaVersion">
            <summary>
            Gets or sets the minimum schema version.
            </summary>
            <value>
            The minimum schema version.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Events.ReplayUnhandledEvent">
            <summary>
            The tax.service.replay-unhandled event details.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Events.TaxServiceGarnishmentInformationForPublicationEvent">
            <summary>
            tax.service.garnishment-information-for-publication
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Events.ReplayFailedToConsumeEvent">
            <summary>
            The tax.service.replay-failed-to-consume event details.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Events.TaxServiceImportEvent">
            <summary>
            The tax.service.import-raw-events details.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceImportEvent.ApplicationType">
            <summary>
            Get or Set connection string.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceImportEvent.ConnectionString">
            <summary>
            Get or Set connection string
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceImportEvent.Filter">
            <summary>
            Get or Set Filter
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Events.TaxServiceImportSspRawEvents">
            <summary>
            The tax.service.import-raw-events details.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceImportSspRawEvents.ConnectionString">
            <summary>
            Get or Set connection string.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceImportSspRawEvents.Filter">
            <summary>
            Get or Set Filter
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Events.TaxServiceReplayArchiveCompletedEvent">
            <summary>
            The tax.service.replay-archive-completed event details.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveCompletedEvent.Request">
            <summary>
            The details of the request that was completed.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveCompletedEvent.NumberOfEventsReplayAttempted">
            <summary>
            The number of archived events that were attempted to replay
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveCompletedEvent.NumberOfEventsReplaySucceeded">
            <summary>
            The number of archived events that were replayed succesfully
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveCompletedEvent.NumberOfEventsReplayFailed">
            <summary>
            The number of archived events that failed to replay succesfully
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveCompletedEvent.NumberOfEventsNotFound">
            <summary>
            The number of aggregateIds not found during replay.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveCompletedEvent.NumberOfEventsSkipped">
            <summary>
            Number of events skipped.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveCompletedEvent.NumberOfEventsOutOfSequence">
            <summary>
            Number of events out of sequence.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Events.TaxServiceReplayArchiveRequestedEvent">
            <summary>
            The tax.service.replay-archive-requested event details.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveRequestedEvent.BoundedContext">
            <summary>
            Gets or sets the name of the replay bounded context.
            </summary>
            <value>
            The name of the replay bounded context.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveRequestedEvent.AggregateName">
            <summary>
            Gets or sets the name of the replay aggregate.
            </summary>
            <value>
            The name of the replay aggregate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveRequestedEvent.AggregateIds">
            <summary>
            A list of aggregate Ids to filter by
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveRequestedEvent.StartUtcDateTime">
            <summary>
            Gets or sets the start UTC date time.
            </summary>
            <value>
            The start UTC date time.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveRequestedEvent.EndUtcDateTime">
            <summary>
            Gets or sets the end UTC date time.
            </summary>
            <value>
            The end UTC date time.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveRequestedEvent.ReplayOnlyCreated">
            <summary>
            Gets or sets ReplayOnlyCreated.
            </summary>
            <value>
            Whether or not to replay only created events.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayArchiveRequestedEvent.Overwrite">
            <summary>
            Overwrite aggregate.
            </summary>
            <value>
            Whether or not to overwrite existing aggregate if sequence numbers match.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Events.TaxServiceReplayFailedToConsumeCompletedEvent">
            <summary>
            The tax.service.replay-archive-completed event details.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayFailedToConsumeCompletedEvent.NumberOfEventsReplayAttempted">
            <summary>
            The number of archived events that were attempted to replay
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayFailedToConsumeCompletedEvent.NumberOfEventsReplaySucceeded">
            <summary>
            The number of archived events that were replayed succesfully
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Events.TaxServiceReplayFailedToConsumeCompletedEvent.NumberOfEventsReplayFailed">
            <summary>
            The number of archived events that failed to replay succesfully
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.AuditedAggregateViewBase`1.PropertiesToAudit">
            <summary>
            The List of properties that should be audited on the aggregate
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.AuditedAggregateViewBase`1.GetPropertyValue(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Gets the string value of the property to store in the audit table
            </summary>
            <param name="property">The full property to get the value from (key: property name, value: property value)</param>
            <returns>A string representing the value of the property which will be stored in the audit table</returns>
        </member>
        <member name="P:Reporting.Ingestion.Models.AuditedAggregateViewBase`1.AuditEntries">
            <summary>
            The List of AuditEntries representing the changes to the aggregate that should be persisted in the audit table
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.AuditedAggregateViewBase`1.ApplyEvent(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            ApplyEvent
            </summary>
            <param name="eventData">eventData</param>
            <returns>Returns true if event successfully applied.</returns>
            <exception cref="T:System.Exception">Exception</exception>
        </member>
        <member name="M:Reporting.Ingestion.Models.AuditedAggregateViewBase`1.GetNewPropertyValuesForAudit(System.String)">
            <summary>
            Gets New Property Value from audit
            </summary>
            <param name="propertyToAudit">eventData</param>
            <returns>Returns string of property to Audit.</returns>
        </member>
        <member name="P:Reporting.Ingestion.Models.AuditEntry.AggregateId">
            <summary>
            The AggregateId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.AuditEntry.PropertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.AuditEntry.OldValue">
            <summary>
            The old value
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.AuditEntry.NewValue">
            <summary>
            The new value
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.AuditEntry.CreatedUtcDt">
            <summary>
            Gets or sets date and time when audit entry was created.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.AuditEntry.AppliedEventDateTime">
            <summary>
            Applied Event Date Time (the event Utc Timestamp)
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.AuditEntry.InMemory">
            <summary>
            If true, then the audit entry has not been persisted yet
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity">
            <summary>
            Company tax agency configuration (AGENCYID in PTM DB) report entity
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.TaxSchedulesLookupKey">
            <summary>
            The key for the tax schedule lookup in the cache
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.CompanyTaxAgencyStatusLookupKey">
            <summary>
            The key for the companytaxagency status lookup in the cache
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.CompanyTaxGuid">
            <summary>
            Gets or sets the company tax identifier.
            </summary>
            <value>
            The company tax identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.TaxAgencyId">
            <summary>
            Gets or sets the agency identifier.
            </summary>
            <value>
            The tax agency identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.TaxScheduleGuid">
            <summary>
            Gets or sets the schedule identifier.
            </summary>
            <value>
            The schedule identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.NextTaxScheduleGuid">
            <summary>
            Gets or sets the next schedule identifier.
            </summary>
            <value>
            The next schedule identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.CompanyTaxId">
            <summary>
            Gets or sets the CompanyTaxId
            </summary>
            <value>
            The CompanyTaxId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.TaxAgencyCode">
            <summary>
            Gets or sets the tax agency code.
            </summary>
            <value>
            The tax agency code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.TaxScheduleId">
            <summary>
            Gets or sets the tax schedule Id.
            </summary>
            <value>
            The tax schedule Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.NextTaxScheduleId">
            <summary>
            Gets or sets the next tax schedule Id.
            </summary>
            <value>
            The next tax schedule Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.NextTaxScheduleEffectiveDate">
            <summary>
            Gets or sets the NextTaxScheduleEffectiveDate.
            </summary>
            <value>
            The NextTaxScheduleEffectiveDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.TaxId">
            <summary>
            Gets or sets the TaxId for this company for this agency.
            </summary>
            <value>
            The TaxId for this company for this agency
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.StartDate">
            <summary>
            Gets or sets the StartDate.
            </summary>
            <value>
            The StartDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.TaxRate">
            <summary>
            Gets or sets the TaxRate.
            </summary>
            <value>
            The TaxRate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.NextTaxRate">
            <summary>
            Gets or sets the next TaxRate.
            </summary>
            <value>
            The next TaxRate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.NextTaxRateEffectiveDate">
            <summary>
            Gets or sets the next TaxRateEffectiveDate.
            </summary>
            <value>
            The next TaxRateEffectiveDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.InputDate">
            <summary>
            Gets or sets the InputDate.
            </summary>
            <value>
            The InputDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.BalanceOnly">
            <summary>
            Gets or sets the BalanceOnly.
            </summary>
            <value>
            The BalanceOnly.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.AccessCode">
            <summary>
            Gets or sets the AccessCode.
            </summary>
            <value>
            The AccessCode.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.ReceivedPOA">
            <summary>
            Gets or sets the ReceivedPOA.
            </summary>
            <value>
            The ReceivedPOA.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.IsDeleted">
            <summary>
            Gets or sets the IsDeleted.
            </summary>
            <value>
            The isDeleted.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.CompanyTaxAgencyReportEntity.GetNewPropertyValuesForAudit(System.String)">
            <summary>
            Gets New Property Value from audit
            </summary>
            <param name="propertyToAudit">eventData</param>
            <returns>Returns string of property to Audit.</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.CompanyTaxReportEntity">
            <summary>
            Company tax setup (Client in PTM DB) report entity
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.CompanyTaxReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.CompanyTaxReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.CompanyTaxReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.CompanyTaxReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.CompanyId">
            <summary>
            Gets or sets the company identifier.
            </summary>
            <value>
            The company identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.CompanyTaxId">
            <summary>
            Gets or sets the CompanyTaxId
            </summary>
            <value>
            The CompanyTaxId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            The Description.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.Fein">
            <summary>
            Gets or sets the fein.
            </summary>
            <value>
            The fein.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.LegalName">
            <summary>
            Gets or sets the LegalName.
            </summary>
            <value>
            The LegalName.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.StartingDate">
            <summary>
            Gets or sets the StartingDate.
            </summary>
            <value>
            The StartingDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.DbaName">
            <summary>
            Gets or sets the name of the dba.
            </summary>
            <value>
            The name of the dba.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.AddressLine1">
            <summary>
            Gets or sets the AddressLine1.
            </summary>
            <value>
            The AddressLine1.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.AddressLine2">
            <summary>
            Gets or sets the AddressLine2.
            </summary>
            <value>
            The AddressLine2.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.City">
            <summary>
            Gets or sets the City.
            </summary>
            <value>
            The City.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.State">
            <summary>
            Gets or sets the State.
            </summary>
            <value>
            The State.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.Zip">
            <summary>
            Gets or sets the Zip.
            </summary>
            <value>
            The Zip.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxReportEntity.LegacyCompanyStartDate">
            <summary>
            Gets or sets the LegacyCompanyStartDate.
            </summary>
            <value>
            The LegacyCompanyStartDate.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.LiabilityCollectionComment">
            <summary>
            A collection comment
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionComment.CommentId">
            <summary>
            CommentId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionComment.LiabilityCollectionId">
            <summary>
            LiabilityCollectionId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionComment.TenantId">
            <summary>
            TenantId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionComment.UserId">
            <summary>
            UserId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionComment.UserDescription">
            <summary>
            UserDescription
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionComment.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionComment.UtcDate">
            <summary>
            UtcDate
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionComment.LiabilityCollectionReportEntity">
            <summary>
            LiabilityCollectionReportEntity
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.LiabilityCollectionConfirmationInfo">
            <summary>
            A collection confirmation
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionConfirmationInfo.ConfirmationInfoId">
            <summary>
            ConfirmationInfoId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionConfirmationInfo.LiabilityCollectionId">
            <summary>
            LiabilityCollectionId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionConfirmationInfo.TenantId">
            <summary>
            TenantId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionConfirmationInfo.ConfirmationNumber">
            <summary>
            ConfirmationNumber
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionConfirmationInfo.ConfirmationAmount">
            <summary>
            ConfirmationAmount
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionConfirmationInfo.ProcessUtcDate">
            <summary>
            ProcessUtcDate
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionConfirmationInfo.UsgBankAccountId">
            <summary>
            UsgBankAccountId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionConfirmationInfo.LiabilityCollectionReportEntity">
            <summary>
            LiabilityCollectionReportEntity
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.NettedCollectionLiabilityCollectionId">
            <summary>
            LiabilityPayments Report Entity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionLiabilityCollectionId.NettedCollectionId">
            <summary>
            NettedCollectionId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionLiabilityCollectionId.CollectionId">
            <summary>
            CollectionId
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.NettedCollectionReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.NettedCollectionReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.NettedCollectionReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.NettedCollectionReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.AcknowledgementNumber">
            <summary>
            AcknowledgementNumber
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.ClearedByBank">
            <summary>
            ClearedByBank
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.FileGenerationAttempts">
            <summary>
            FileGenerationAttempts
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.CollectedAmount">
            <summary>
            CollectedAmount
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.CollectedCount">
            <summary>
            CollectedCount
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.TotalAmount">
            <summary>
            TotalAmount
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.TotalCount">
            <summary>
            TotalCount
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.PaymentMethod">
            <summary>
            PaymentMethod
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.UsgBankAccountId">
            <summary>
            UsgBankAccountId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.CustomerBankAccountId">
            <summary>
            CustomerBankAccountId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.PayUtcDate">
            <summary>
            Gets or sets the pay UTC date.
            </summary>
            <value>
            The pay UTC date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.DueUtcDate">
            <summary>
            DueDate
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.ProcessUtcDate">
            <summary>
            ProcessUtcDate
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.CollectedUtcDateTime">
            <summary>
            CollectedUtcDateTime
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.RequestedUtcDateTime">
            <summary>
            RequestedUtcDateTime
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.ClearedByBankUpdatedUtcDateTime">
            <summary>
            ClearedByBankUpdatedUtcDateTime
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.NettedCollectionLiabilityCollectionIds">
            <summary>
            NettedCollectionLiabilityCollectionIds
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.NettedCollectionReportEntity.UnderlyingCollectionIds">
            <summary>
            UnderlyingCollectionIds
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.CompanyTaxAgencyStatusLookup">
            <summary>
            CompanyTaxAgencyStatusLookup
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyStatusLookup.CompanyTaxAgencyStatusKey">
            <summary>
            Gets or sets the companytaxagency status key.
            </summary>
            <value>
            The companytaxagency status key.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyTaxAgencyStatusLookup.CompanyTaxAgencyStatusDescription">
            <summary>
            Gets or sets the companytaxagency status description.
            </summary>
            <value>
            The companytaxagency status description.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.ProductReportCollection.CreateProductReports(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a list of products from the event data.
            </summary>
            <param name="aggregateId">The aggregateId</param>
            <param name="eventDataDetails">The event data details.</param>
            <returns>List of products</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.ProductReportCollection.RemoveProductReport(System.Int16,System.DateTime,System.Boolean)">
            <summary>
            Remove product Report from DB
            </summary>
            <param name="productCode">Product Code record that needs to be removed.</param>
            <param name="effectiveUtcDateFrom">effective date record that needs to be removed.</param>
            <param name="isNewRecord">Boolean to check if its a new Record.</param>
            <returns>ProductReportCollection</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.ProductReportCollection.FindProductReport(System.Int16,System.DateTime)">
            <summary>
            Retrieves one product Report from collection
            </summary>
            <param name="productCode">Product Code record that needs to be removed.</param>
            <param name="effectiveUtcDateFrom">effective date record that needs to be removed.</param>
            <returns>ProductReport</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.ProductReportCollection.ProductReportExists(System.Int16,System.DateTime)">
            <summary>
            If Product Report exists in collection. True if it exists| False if it does not exist
            </summary>
            <param name="productCode">Product Code record that needs to be removed.</param>
            <param name="effectiveUtcDateFrom">effective date record that needs to be removed.</param>
            <returns>bool</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.ReportRequestReportEntity">
            <summary>
            Report request report entity.
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxAgencyTransactionAmountReportEntity">
            <summary>
            TaxAgencyTransactionAmountReportEntity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionAmountReportEntity.TransactionGuid">
            <summary>
            Gets or sets the TransactionGuid .
            </summary>
            <value>
            The TransactionGuid
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionAmountReportEntity.TaxId">
            <summary>
            Gets or sets the TaxId.
            </summary>
            <value>
            The TaxId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionAmountReportEntity.CheckDate">
            <summary>
            Gets or sets the CheckDate.
            </summary>
            <value>
            The CheckDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionAmountReportEntity.Amount">
            <summary>
            Gets or sets the Amount.
            </summary>
            <value>
            The Amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionAmountReportEntity.PayeeId">
            <summary>
            Gets or sets the PayeeId.
            </summary>
            <value>
            The PayeeId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionAmountReportEntity.TaxCode">
            <summary>
            Gets or sets the TaxCode.
            </summary>
            <value>
            The TaxCode.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionAmountReportEntity.TaxCodeUltiPro">
            <summary>
            Gets or sets the TaxCodeUltiPro.
            </summary>
            <value>
            The TaxCodeUltiPro.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionAmountReportEntity.IsTax">
            <summary>
            True if the amount is from a tax
            </summary>
            <value>
            True if IsTax
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountUltiTaxCode.TaxPayrollId">
            <summary>
            Gets or sets the payroll identifier.
            </summary>
            <value>
            The payroll identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountUltiTaxCode.TenantId">
            <summary>
            Gets or sets the tenant identifier.
            </summary>
            <value>
            The tenant identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountUltiTaxCode.TaxId">
            <summary>
            Gets or sets the tax identifier.
            </summary>
            <value>
            The tax identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountUltiTaxCode.UltiTaxCode">
            <summary>
            Gets or sets the tax code.
            </summary>
            <value>
            The tax code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountUltiTaxCode.TaxDataSource">
            <summary>
            Gets or sets the tax data source.
            </summary>
            <value>
            The tax data source.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxScheduleReportEntity">
            <summary>
            Tax Schedule (Schedule in PTM DB) report entity
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxScheduleReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxScheduleReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxScheduleReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxScheduleReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxScheduleReportEntity.TaxScheduleId">
            <summary>
            Gets or sets the TaxScheduleId
            </summary>
            <value>
            The CompanyTaxId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxScheduleReportEntity.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            The Description.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.YEProcessingFileReportEntity">
            <summary>
            YEProcessingFileReportEntity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingFileReportEntity.YEProcessingId">
            <summary>
            Gets or sets the YEProcessingFileId.
            </summary>
            <value>
            The YEProcessing Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingFileReportEntity.InboundFileTypeKey">
            <summary>
            Gets or sets the InboundFileTypeKey.
            </summary>
            <value>
            The InboundFileTypeKey.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingFileReportEntity.Agency">
            <summary>
            Gets or sets the Agency.
            </summary>
            <value>
            The Agency.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingFileReportEntity.UltiProAgency">
            <summary>
            Gets or sets the UltiProAgency.
            </summary>
            <value>
            The UltiProAgency.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingFileReportEntity.AgencyLocalityTypeKey">
            <summary>
            Gets or sets the AgencyLocalityTypeKey.
            </summary>
            <value>
            The AgencyLocalityTypeKey.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingFileReportEntity.YEFileStatusKey">
            <summary>
            Gets or sets the YEFileStatusKey.
            </summary>
            <value>
            The YEFileStatusKey.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingFileReportEntity.FileName">
            <summary>
            Gets or sets the FileName.
            </summary>
            <value>
            The FileName.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingFileReportEntity.DateTimeReceived">
            <summary>
            Gets or sets the DateTimeReceived.
            </summary>
            <value>
            The DateTimeReceived.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingFileReportEntity.FileManualVersion">
            <summary>
            Gets or sets the FileManualVersion.
            </summary>
            <value>
            The FileManualVersion.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingFileReportEntity.YEIngestionTypeKey">
            <summary>
            Gets or sets the YEIngestionTypeKey.
            </summary>
            <value>
            The YEIngestionTypeKey.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.YEProcessingReportEntity">
            <summary>
            Pay report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Models.YEProcessingReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.YEProcessingReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.YEProcessingReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.YEProcessingReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingReportEntity.YEProcessingStatusKey">
            <summary>
            Gets or sets the YEProcessingStatusKey.
            </summary>
            <value>
            TheYEProcessingStatusKey.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingReportEntity.TaxYear">
            <summary>
            Gets or sets the TaxYear
            </summary>
            <value>
            The TaxYear
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingReportEntity.ClientId">
            <summary>
            Gets or sets the ClientId
            </summary>
            <value>
            The ClientId
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.YEProcessingReportEntity.Files">
            <summary>
            Gets or sets Files.
            </summary>
            <value>
            The Files.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.YEProcessingReportEntity.ApplyCreateEvent(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            The created event
            </summary>
            <param name="eventData">The event data</param>
            <param name="eventDataDetails">The event data details</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.ReportingVersionTracker">
            <summary>
            Reporting Version Tracker
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.ReportingVersionTracker.MarkAsDeleted">
            <summary>
            Marks the taxAmount for removal.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.ReportingVersionTracker.ShouldBeDeleted">
            <summary>
            Returns whether or not the object should be deleted.
            </summary>
            <returns>Bool true if element should be deleted.</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.ReportingVersionTracker.ShouldBeAdded">
            <summary>
            Returns whether or not the object should be added.
            </summary>
            <returns>Bool true if element should be added.</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.AggregateViewBase`1">
            <summary>
            AggregateViewBase
            </summary>
            <typeparam name="TView"></typeparam>
        </member>
        <member name="P:Reporting.Ingestion.Models.AggregateViewBase`1.IsNewRecord">
            <summary>
            Specify if the aggregate needs to be Inserted or Updated in the database.  
            If true, the Insert needs to be done; otherwise, we need to Update.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.AggregateViewBase`1.DeleteEvent">
            <summary>
            Gets or sets a value indicating whether [delete event].
            </summary>
            <value>
              <c>true</c> if [delete event]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.AggregateViewBase`1.AppliedEventSequenceNumber">
            <summary>
            Applied Event Sequence Number
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.AggregateViewBase`1.AppliedEventDateTime">
            <summary>
            Applied Event Date Time
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.AggregateViewBase`1.Details">
            <summary>
            Gets or sets the details.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.AggregateViewBase`1.IsObservedEvent(System.String)">
            <summary>
            Determines whether [is observed event] [the specified event data].
            </summary>
            <param name="eventName">The event data.</param>
            <returns>
              <c>true</c> if [is observed event] [the specified event data]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.AggregateViewBase`1.ApplyFallbackEvent">
            <summary>
            Applies the fall-back event.
            </summary>
            <returns>Returns true if event successfully applied.</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.AggregateViewBase`1.ApplyEvent(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            ApplyEvent
            </summary>
            <param name="eventData">eventData</param>
            <returns>Returns true if event successfully applied.</returns>
            <exception cref="T:System.Exception">Exception</exception>
        </member>
        <member name="M:Reporting.Ingestion.Models.AggregateViewBase`1.GetValue``1(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="objectValue">The object value.</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.AggregateViewBase`1.GetNullableValue``1(System.Object)">
            <summary>
            Gets the value when the output type is nullable.
            </summary>
            <typeparam name="TType">The type of the type (must not be a nullable type).</typeparam>
            <param name="objectValue">The object value (could be null).</param>
            <returns>Converted value of nullable type</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.AggregateViewBase`1.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="objectValue">The object value.</param>
            <returns>Guid value</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.AggregateViewBase`1.GetValueOrDefault(System.Object,System.String)">
            <summary>
            Gets the value or default.
            </summary>
            <param name="objectValue">The object value.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            string value if possible to get value; otherwise, defaultValue.
            </returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.AggregateViewBase`1.GetValueOrDefault(System.Object,System.Int16)">
            <summary>
            Gets the value or default.
            </summary>
            <param name="objectValue">The object value.</param>
            <param name="defaultValue">The default value.</param>
            <returns>objectValue or defaultValue</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.AggregateViewBase`1.RaiseEvent(System.String,System.Object,System.String)">
            <summary>
            Raises the event.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="eventDataDetails">The event data details.</param>
            <param name="schemaVersion">The schema version.</param>
        </member>
        <member name="T:Reporting.Ingestion.Models.AppliedEventSequenceType">
            <summary>
            Enum for applied event sequence type
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.AppliedEventSequenceType.Ignore">
            <summary>
            The sequence number is less or equal to sequence of event that already was proccessed 
            so ignore the event.
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.AppliedEventSequenceType.StoreToStaging">
            <summary>
            The sequence number is larger than +1 of the sequence of event that already was proccessed, 
            store the event in staging to proccessed later.
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.AppliedEventSequenceType.ReadyToProccess">
            <summary>
            The sequence number is +1 of the sequence of event that laready was proccessed,
            proccess the event and check if there are any events in staging that need to be proccessed.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.Bai2BankTransactionReport">
            <summary>
            Bai2 bank transaction report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Models.Bai2BankTransactionReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.Bai2BankTransactionReport"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.Bai2BankTransactionReport.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.Bai2BankTransactionReport"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.BankAccountDayId">
            <summary>
            Gets or sets the bank account day identifier.
            </summary>
            <value>
            The bank account day identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.InboundFileId">
            <summary>
            Gets or sets the inbound file identifier.
            </summary>
            <value>
            The inbound file identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.UsgBankAccountId">
            <summary>
            Gets or sets the usg bank account identifier.
            </summary>
            <value>
            The usg bank account identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.CounterpartUsgBankAccountId">
            <summary>
            Gets or sets the counterpart usg bank account identifier.
            </summary>
            <value>
            The counterpart usg bank account identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.IsMatched">
            <summary>
            Gets or sets a value indicating whether this instance is matched.
            </summary>
            <value>
              <c>true</c> if this instance is matched; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.TransactionType">
            <summary>
            Gets or sets the type of the transaction.
            </summary>
            <value>
            The type of the transaction.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.IsDebit">
            <summary>
            Gets or sets a value indicating whether this instance is debit.
            </summary>
            <value>
              <c>true</c> if this instance is debit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
            <value>
            The amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.CurrencyCode">
            <summary>
            Gets or sets the currency code.
            </summary>
            <value>
            The currency code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.CustomerReferenceNumber">
            <summary>
            Gets or sets the customer reference number.
            </summary>
            <value>
            The customer reference number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.TransactionSysUtcDt">
            <summary>
            Gets or sets the transaction system UTC date time.
            </summary>
            <value>
            The transaction system UTC date time.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.TransactionReference">
            <summary>
            Gets or sets the transaction reference.
            </summary>
            <value>
            The transaction reference.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.Bai2BankTransactionReport.TransactionDescription">
            <summary>
            Gets or sets the transaction description.
            </summary>
            <value>
            The transaction description.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.BankTransactionReport">
            <summary>
            Bank transaction report entity
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.BankTransactionReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.BankTransactionReport"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.BankTransactionReport.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.BankTransactionReport"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.CollectionId">
            <summary>
            Gets or sets the collection identifier.
            </summary>
            <value>
            The collection identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.PayId">
            <summary>
            Gets or sets the pay identifier.
            </summary>
            <value>
            The pay identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.PaymentId">
            <summary>
            Gets or sets the payment identifier.
            </summary>
            <value>
            The payment identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.FileRequestId">
            <summary>
            Gets or sets the file request identifier.
            </summary>
            <value>
            The file request identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
            <value>
            The amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.CurrencyCode">
            <summary>
            Gets or sets the currency code.
            </summary>
            <value>
            The currency code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.CustomerBankAccountId">
            <summary>
            Gets or sets the customer bank account identifier.
            </summary>
            <value>
            The customer bank account identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.CbaRoutingNumber4">
            <summary>
            Gets or sets the customer bank account routing number4.
            </summary>
            <value>
            The customer bank account routing number4.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.CbaAccountNumber4">
            <summary>
            Gets or sets the customer bank account number4.
            </summary>
            <value>
            The customer bank account number4.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.UsgBankAccountId">
            <summary>
            Gets or sets the usg bank account identifier.
            </summary>
            <value>
            The usg bank account identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.UbaRoutingNumber4">
            <summary>
            Gets or sets the Usg bank account routing number4.
            </summary>
            <value>
            The Usg bank account routing number4.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.UbaAccountNumber4">
            <summary>
            Gets or sets the Usg bank account number4.
            </summary>
            <value>
            The Usg bank account number4.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.TransactionUtcDateTime">
            <summary>
            Gets or sets the transaction UTC date time.
            </summary>
            <value>
            The transaction UTC date time.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.CheckNumber">
            <summary>
            Gets or sets the check number.
            </summary>
            <value>
            The check number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.IsDebit">
            <summary>
            Gets or sets a value indicating whether this instance is debit.
            </summary>
            <value>
              <c>true</c> if this instance is debit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.PaymentMethod">
            <summary>
            Gets or sets the payment method.
            </summary>
            <value>
            The payment method.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.IsMatched">
            <summary>
            Gets or sets a value indicating whether this instance is matched.
            </summary>
            <value>
            <c>true</c> if this instance is matched; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.MatchedUtcDateTime">
            <summary>
            Gets or sets the matched UTC date time.
            </summary>
            <value>
            The matched UTC date time.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.Bai2BankTransactionMatchId">
            <summary>
            Gets or sets the bai2 bank transaction match identifier.
            </summary>
            <value>
            The bai2 bank transaction match identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.BankAccountDayMatchId">
            <summary>
            Gets or sets the bank account day match identifier.
            </summary>
            <value>
            The bank account day match identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.IsReconcilable">
            <summary>
            Gets or sets a value indicating whether this instance is reconcilable.
            </summary>
            <value>
            <c>true</c> if this instance is reconcilable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.IsCanceled">
            <summary>
            Gets or sets a value indicating whether this instance is canceled.
            </summary>
            <value>
            <c>true</c> if this instance is canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.ReferenceNumber">
            <summary>
            Gets or sets the reference number.
            </summary>
            <value>
            The reference number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.ConfirmationNumber">
            <summary>
            Gets or sets the confirmation number.
            </summary>
            <value>
            The confirmation number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.ItemNo">
            <summary>
            Gets or sets the item no.
            </summary>
            <value>
            The item no.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.GarnishmentId">
            <summary>
            Gets or sets the garnishment id.
            </summary>
            <value>
            The garnishment Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.BankTransactionReport.IsNetType">
            <summary>
            Gets or sets a value indicating whether this instance is Netted collection.
            </summary>
            <value>
            <c>true</c> if this instance is Netted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.CompanyReport">
            <summary>
            Company report entity
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.CompanyReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.CompanyReport"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.CompanyReport.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.CompanyReport"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyReport.LegalEntityCompanyId">
            <summary>
            Gets or sets the legal entity company identifier.
            </summary>
            <value>
            The legal entity company identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyReport.CoId">
            <summary>
            Gets or sets the client company identifier.
            </summary>
            <value>
            The client company identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyReport.Fein">
            <summary>
            Gets or sets the fein.
            </summary>
            <value>
            The fein.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyReport.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyReport.LegalName">
            <summary>
            Gets or sets the name of the legal.
            </summary>
            <value>
            The name of the legal.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyReport.DbaName">
            <summary>
            Gets or sets the name of the dba.
            </summary>
            <value>
            The name of the dba.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyReport.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyReport.IsLegalEntity">
            <summary>
            Gets or sets a value indicating whether this instance is legal entity.
            </summary>
            <value>
            <c>true</c> if this instance is legal entity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyReport.CompanyCode">
            <summary>
            Gets or sets the company code.
            </summary>
            <value>
            The company code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyReport.Name">
            <summary>
            Gets or sets the company Name.
            </summary>
            <value>
            The Name.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CompanyReport.Products">
            <summary>
            Gets or sets the products.
            </summary>
            <value>
            The products.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayRequest.Aggregate">
            <summary>
            A list of the aggregates to replay events for
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayRequest.AggregateIds">
            <summary>
            A list of aggregate Ids to filter by
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayRequest.EventDateRangeFrom">
            <summary>
            The start of the date range to replay (defaults to minimum value).
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayRequest.EventDateRangeTo">
            <summary>
            The end of the date range to replay (defaults to maximum value).
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayRequest.ReplayOnlyCreated">
            <summary>
            Whether or not to replay only created events
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayRequest.Overwrite">
            <summary>
            Whether or not to overwrite the aggregate if the sequence number matches.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayRequest.CorrelationId">
            <summary>
            Correlation id.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayActionsReportEntity">
            <summary>
            PayActionsReportEntity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayActionsReportEntity.ActionId">
            <summary>
            Gets or sets the ActionId.
            </summary>
            <value>
            The ActionId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayActionsReportEntity.PayId">
            <summary>
            Gets or sets the pay Id.
            </summary>
            <value>
            The pay Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayActionsReportEntity.PayUtcDate">
            <summary>
            Gets or sets the PayUtcDate.
            </summary>
            <value>
            The PayUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayActionsReportEntity.LiabilityId">
            <summary>
            Gets or sets the liability Id.
            </summary>
            <value>
            The liability Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayActionsReportEntity.FromState">
            <summary>
            Gets or sets the FromState.
            </summary>
            <value>
            The FromState.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayActionsReportEntity.ToState">
            <summary>
            Gets or sets the ToState.
            </summary>
            <value>
            The ToState.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayActionsReportEntity.Portion">
            <summary>
            Gets or sets the Portion.
            </summary>
            <value>
            The Portion.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayActionsReportEntity.ItemNo">
            <summary>
            Gets or sets the ItemNo.
            </summary>
            <value>
            The ItemNo.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayActionsReportEntity.ActionUtcDateTime">
            <summary>
            Gets or sets the ActionDateTime.
            </summary>
            <value>
            The ActionDateTime.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayActionsReportEntity.Amount">
            <summary>
            Gets or sets the Amount.
            </summary>
            <value>
            The Amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayActionsReportEntity.IsUndo">
            <summary>
            Gets or sets the IsUndo.
            </summary>
            <value>
            The IsUndo.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.GarnishmentPayrollInstanceResponseView">
            <summary>
            garnishment payroll instance response view
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.GarnishmentPayrollInstanceResponseView.PayrollUnits">
            <summary>
            The Payroll Units
            </summary>
            <value>
            The Payroll Units.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.GarnishmentPayrollInstanceResponseView.ExpectedGarnishmentCount">
            <summary>
            Gets or sets the ExpectedGarnishmentCount
            </summary>
            <value>
            The ExpectedGarnishmentCount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.GarnishmentPayrollInstanceResponseView.ActualGarnishmentCount">
            <summary>
            Gets or sets the ActualGarnishmentCount
            </summary>
            <value>
            The ActualGarnishmentCount.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayLiabilitiesReportEntity">
            <summary>
            PayLiabilitiesReportEntity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayLiabilitiesReportEntity.PayId">
            <summary>
            Gets or sets the pay Id.
            </summary>
            <value>
            The pay Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayLiabilitiesReportEntity.PayUtcDate">
            <summary>
            Gets or sets the PayUtcDate.
            </summary>
            <value>
            The PayUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayLiabilitiesReportEntity.LiabilityId">
            <summary>
            Gets or sets the LiabilityId.
            </summary>
            <value>
            The LiabilityId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayLiabilitiesReportEntity.ActionId">
            <summary>
            Gets or sets the ActionId.
            </summary>
            <value>
            The ActionId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayLiabilitiesReportEntity.Amount">
            <summary>
            Gets or sets the Amount.
            </summary>
            <value>
            The Amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayLiabilitiesReportEntity.IsActive">
            <summary>
            Keeps track whether the liability IsActive
            </summary>
            <value>
            True if IsActive
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayLiabilitiesReportEntity.IsRefund">
            <summary>
            True if the liability is a refund
            </summary>
            <value>
            True if IsRefund
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxLiabilityReportEntity">
            <summary>
            Tax liability report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.LiabilityId">
            <summary>
            The Id of the liability in the cash management/SPS system
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.CollectedFromTenantId">
            <summary>
            The TenantId that the liability is collected from. This will usually be the same as the TenantId
            If for some scenario (like penalties), the money is collected from a different tenant than the tenant making the payment, then TenantId != CollectedFromTenantId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.LegalEntityCompanyId">
            <summary>
            The Id of the company/legal entity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.CollectedFromCompanyId">
            <summary>
            The CompanyId that the liability is collected from. This will usually be the same as the LegalEntityCompanyId
            If for some scenario (like penalties), the money is collected from a different tenant than the tenant making the payment, then LegalEntityCompanyId != CollectedFromCompanyId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.CollectionId">
            <summary>
            The Id of the collection in cash management/SPS that the liability is assigned to
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.PayrollId">
            <summary>
            The Id of the payroll unit that this liability is for
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.CollectedFromPayrollId">
            <summary>
            The PayrollId (payroll unit) that the liability is collected from. This will usually be the same as the PayrollId
            If for some scenario (like penalties), the money is collected from a different tenant than the tenant making the payment, then PayrollId != CollectedFromPayrollId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.RunNumber">
            <summary>
            Gets or sets the run number, which is the equivalent of UltiPro's per-control.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.PayUtcDate">
            <summary>
            Gets or sets the pay date.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.TotalAmount">
            <summary>
            Gets or sets the total amount for the liability.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.RefundedPaymentPayUtcDate">
            <summary>
             RefundedPaymentPayUtcDate will be the same as PayUtcDate for all liabilities except those of origin type  “CreditAppliedRefund”
             In those cases, PayUtcDate will be the check date of the negative credit and RefundedPaymentPayUtcDate will be the check date of the positive payment
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.TaxLiabilityOriginType">
            <summary>
            Property for TaxLiabilityOriginType
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxLiabilityReportEntity.ReferenceId">
            <summary>
            - the PayrollId for Positive Liabilities
            - the PaymentId if a refund because a Payment Voided
            - the first CreditTracking Id if the Liability was a refund due to credits applied
            - the P I EntryId for P I Liabilities
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxLiabilityReportEntity.ApplyCreatedEvent(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            ApplyCreateEvent
            </summary>
            <param name="eventData">The IDictionary to copy of Garnishment Liability data.</param>
            <param name="eventDataDetails">The event data details</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.GarnishmentPayrollInstanceReportEntity">
            <summary>
            Garnishment payroll instance report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="P:Reporting.Ingestion.Models.GarnishmentPayrollInstanceReportEntity.PayCount">
            <summary>
            The number of Pays that are expected to be observed for the PayrollInstance.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.GarnishmentPayrollInstanceReportEntity.PayGroup">
            <summary>
            The PayGroup of the PayrollInstance.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.GarnishmentPayrollInstanceReportEntity.RunNumber">
            <summary>
            The RunNumber (RunNumber in UltiPro) of the PayrollInstance.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.GarnishmentPayrollInstanceReportEntity.GarnishmentPayrollInstanceReconciliationStatusKey">
            <summary>
            Gets or sets the GarnishmentPayrollInstanceReconciliationStatusKey.
            </summary>
            <value>
            The GarnishmentPayrollInstanceReconciliationStatusKey.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.GarnishmentPayrollInstanceReportEntity.PayrollClosedUtcDt">
            <summary>
            The Ultipro payroll closed date
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.GarnishmentPayrollInstanceReportEntity.ApplyCreateEvent(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            ApplyCreateEvent
            </summary>
            <param name="eventData">The IDictionary to copy of Garnishment Payroll Instance data.</param>
            <param name="eventDataDetails">The event data details.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.GarnishmentPayrollInstanceReportEntity.ApplyUpdatedEvent(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            ApplyUpdatedEvent
            </summary>
            <param name="eventData">The IDictionary to copy of Garnishment Payroll Instance data.</param>
            <param name="eventDataDetails">The event data details.</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.GarnishmentLiabilityReportEntity">
            <summary>
            Garnishment liability report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="P:Reporting.Ingestion.Models.GarnishmentLiabilityReportEntity.LiabilityId">
            <summary>
            Property for LiabilityId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.GarnishmentLiabilityReportEntity.PayrollInstanceId">
            <summary>
            Property for PayrollInstanceId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.GarnishmentLiabilityReportEntity.TotalCount">
            <summary>
            The total count of garnishments (not including ignored/excluded garnishments) in the liability
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.GarnishmentLiabilityReportEntity.GarnishmentLiabilityStatusKey">
            <summary>
            Gets or sets the GarnishmentLiabilityStatusKey.
            </summary>
            <value>
            The GarnishmentLiabilityStatusKey.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.GarnishmentLiabilityReportEntity.ApplyCreateEvent(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            ApplyCreateEvent
            </summary>
            <param name="eventData">The IDictionary to copy of Garnishment Liability data.</param>
            <param name="eventDataDetails">The event data details</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.GarnishmentLiabilityReportEntity.ApplyCreateEvent1_7(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            ApplyCreateEvent1_7
            </summary>
            <param name="eventData">The IDictionary to copy of Garnishment Liability data.</param>
            <param name="eventDataDetails">The event data details</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.GarnishmentLiabilityReportEntity.ApplyCreateEvent1_12(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            ApplyCreateEvent1_12
            </summary>
            <param name="eventData">The IDictionary to copy of Garnishment Liability data.</param>
            <param name="eventDataDetails">The event data details</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.GarnishmentLiabilityReportEntity.ApplyTypeUpdatedEvent(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            ApplyTypeUpdatedEvent
            </summary>
            <param name="eventData">The IDictionary to copy of Garnishment Liability data.</param>
            <param name="eventDataDetails">The event data details</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayGarnishmentLiabilitiesReportEntity">
            <summary>
            PayGarnishmentActionsReportEntity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentLiabilitiesReportEntity.PayUtcDate">
            <summary>
            Gets or sets the PayUtcDate.
            </summary>
            <value>
            The PayUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentLiabilitiesReportEntity.GarnishmentId">
            <summary>
            Gets or sets the garnishment Id.
            </summary>
            <value>
            The garnishment Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentLiabilitiesReportEntity.TenantId">
            <summary>
            Gets or sets the TenantId.
            </summary>
            <value>
            The TenantId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentLiabilitiesReportEntity.GarnishmentLiabilityId">
            <summary>
            Gets or sets the GarnishmentLiabilityId.
            </summary>
            <value>
            The GarnishmentLiabilityId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentLiabilitiesReportEntity.ActionId">
            <summary>
            Gets or sets the ActionId.
            </summary>
            <value>
            The ActionId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentLiabilitiesReportEntity.Refunded">
            <summary>
            Keeps track whether a refund liability/collection that the garnishment was assigned to was refunded/processed while the garnishment was assigned to it.
            </summary>
            <value>
            True if the garnishment liability/collection was refunded while the garnishment was still assigned to it.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentLiabilitiesReportEntity.Removed">
            <summary>
            Keeps track whether a garnishment was removed from a refund liability/collection
            </summary>
            <value>
            True if the garnishment was removed from the efund liability/collection
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayGarnishmentActionsReportEntity">
            <summary>
            PayGarnishmentActionsReportEntity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentActionsReportEntity.PayUtcDate">
            <summary>
            Gets or sets the PayUtcDate.
            </summary>
            <value>
            The PayUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentActionsReportEntity.GarnishmentId">
            <summary>
            Gets or sets the garnishment Id.
            </summary>
            <value>
            The garnishment Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentActionsReportEntity.ActionId">
            <summary>
            Gets or sets the ActionId.
            </summary>
            <value>
            The ActionId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentActionsReportEntity.ActionType">
            <summary>
            Gets or sets the ActionType.
            </summary>
            <value>
            The ActionType.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentActionsReportEntity.ActionUtcDateTime">
            <summary>
            Gets or sets the ActionDateTime.
            </summary>
            <value>
            The ActionDateTime.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentActionsReportEntity.BankClearedDate">
            <summary>
            Gets or sets the ActionEffectiveDateTime.
            </summary>
            <value>
            The ActionEffectiveDateTime.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentActionsReportEntity.PaymentLiabilityId">
            <summary>
            Gets or sets the paymentLiabilityId.
            </summary>
            <value>
            The paymentLiabilityId.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayGarnishmentExceptionLookup">
            <summary>
            PayGarnishmentExceptionReportEntity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentExceptionLookup.GarnishmentExceptionKey">
            <summary>
            Gets or sets the garnishment exception key.
            </summary>
            <value>
            The garnishment exception key.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentExceptionLookup.GarnishmentExceptionDescription">
            <summary>
            Gets or sets the garnishment exception description.
            </summary>
            <value>
            The garnishment exception description.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.EFilingAcknowledgmentAlertReportEntity">
            <summary>
            EFilingAcknowledgmentAlertnReportEntity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentAlertReportEntity.Id">
            <summary>
            Gets or sets id.
            </summary>       
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentAlertReportEntity.SubmissionId">
            <summary>
            Gets or sets Submission id.
            </summary>       
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentAlertReportEntity.DocumentId">
            <summary>
            Gets or sets document id.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentAlertReportEntity.Path">
            <summary>
            Get or sets path.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentAlertReportEntity.Type">
            <summary>
            Get or sets type
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentAlertReportEntity.Category">
            <summary>
            Gets or sets category.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentAlertReportEntity.Message">
            <summary>
            Get or sets massage.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentAlertReportEntity.RuleNumber">
            <summary>
            Gets or sets rule number.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentAlertReportEntity.Severity">
            <summary>
            Gets or sets severity.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentAlertReportEntity.DataValue">
            <summary>
            Gets or sets data value.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentAlertReportEntity.Explanation">
            <summary>
            Gets or sets explanation.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity">
            <summary>
            PayGarnishmentPayeeReportEntity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.PayUtcDate">
            <summary>
            Gets or sets the PayUtcDate.
            </summary>
            <value>
            The PayUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.GarnishmentId">
            <summary>
            Gets or sets the garnishment Id.
            </summary>
            <value>
            The garnishment Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.PayeeCode">
            <summary>
            Gets or sets the PayeeCode.
            </summary>
            <value>
            The PayeeCode.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.GarnishmentPayeeId">
            <summary>
            Gets or sets the GarnishmentPayeeId.
            </summary>
            <value>
            The GarnishmentPayeeId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.PayeeName">
            <summary>
            Gets or sets the PayeeName.
            </summary>
            <value>
            The PayeeName.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.AddressLine1">
            <summary>
            Gets or sets the AddressLine1.
            </summary>
            <value>
            The AddressLine1.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.AddressLine2">
            <summary>
            Gets or sets the AddressLine2.
            </summary>
            <value>
            The AddressLine2.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.City">
            <summary>
            Gets or sets the City.
            </summary>
            <value>
            The City.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.StateCode">
            <summary>
            Gets or sets the StateCode.
            </summary>
            <value>
            The StateCode.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.ZipCode">
            <summary>
            Gets or sets the ZipCode.
            </summary>
            <value>
            The ZipCode.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.BankAccountName">
            <summary>
            Gets or sets the BankAccountName.
            </summary>
            <value>
            The BankAccountName.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.BankAccountRoutingNumber">
            <summary>
            Gets or sets the BankAccountRoutingNumber.
            </summary>
            <value>
            The BankAccountRoutingNumber.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.BankAccountNumber">
            <summary>
            Gets or sets the BankAccountNumber.
            </summary>
            <value>
            The BankAccountNumber.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentPayeeReportEntity.PayGarnishmentReportEntity">
            <summary>
            Gets or sets the PayGarnishmentReportEntity.
            </summary>
            <value>
            The PayGarnishmentReportEntity.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayGarnishmentDeductionReportEntity">
            <summary>
            PayGarnishmentDeductionReportEntity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentDeductionReportEntity.PayUtcDate">
            <summary>
            Gets or sets the PayUtcDate.
            </summary>
            <value>
            The PayUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentDeductionReportEntity.GarnishmentId">
            <summary>
            Gets or sets the garnishment Id.
            </summary>
            <value>
            The garnishment Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentDeductionReportEntity.EmployeeGarnishmentDeductionId">
            <summary>
            Gets or sets the EmployeeGarnishmentDeductionId.
            </summary>
            <value>
            TheEmployeeGarnishmentDeductionId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentDeductionReportEntity.CaseNumber">
            <summary>
            Gets or sets the CaseNumber.
            </summary>
            <value>
            The CaseNumber.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentDeductionReportEntity.FipsCode">
            <summary>
            Gets or sets the fipsCode.
            </summary>
            <value>
            The fipsCode.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentDeductionReportEntity.MedIndicatorKey">
            <summary>
            Gets or sets the MedIndicatorKey.
            </summary>
            <value>
            The MedIndicatorKey.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentDeductionReportEntity.ChildSupportType">
            <summary>
            Gets or sets the ChildSupportType.
            </summary>
            <value>
            The ChildSupportType.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentDeductionReportEntity.Jurisdiction">
            <summary>
            Gets or sets the Jurisdiction.
            </summary>
            <value>
            The Jurisdiction.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentDeductionReportEntity.DeductionCode">
            <summary>
            Gets or sets the DeductionCode.
            </summary>
            <value>
            The DeductionCode.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentDeductionReportEntity.PayGarnishmentReportEntity">
            <summary>
            Gets or sets the PayGarnishmentReportEntity.
            </summary>
            <value>
            The PayGarnishmentReportEntity.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.LiabilityPaymentsReportEntity">
            <summary>
            LiabilityPayments Report Entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.LiabilityPaymentsReportEntity" />
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityPaymentsReportEntity.PaymentId">
            <summary>
            Gets or sets the Payment identifier.
            </summary>
            <value>
            The Payment identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityPaymentsReportEntity.PaymentLiabilityId">
            <summary>
            Gets or sets the PaymentLiabilityId 
            </summary>
            <value>
            The PaymentLiabilityId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityPaymentsReportEntity.LiabilityId">
            <summary>
            Gets or sets the LiabilityId 
            </summary>
            <value>
            The LiabilityId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityPaymentsReportEntity.LiabilityReport">
            <summary>
            LiabilityReport
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity">
            <summary>
            EFiling Acknowledgment report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.SubmissionId">
            <summary>
            Gets or sets Submission id.
            </summary>       
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.PayeeId">
            <summary>
            Gets or sets  payee id.
            </summary>       
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.Year">
            <summary>
            Gets or sets year.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.EndUtcDate">
            <summary>
            Get or sets End date.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.Efin">
            <summary>
            Gets or sets Efin.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.ClientName">
            <summary>
            Gets or sets Client name.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.Fein">
            <summary>
            Gets or sets fein.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.Ein">
            <summary>
            Gets or sets ein.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.GovernmentCode">
            <summary>
            Gets or sets government code.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.SubmissionType">
            <summary>
            Gets or sets submission type.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.SubmissionCategory">
            <summary>
            Gets or sets Submission Category
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.IsAccepted">
            <summary>
            Gets or sets isaccepted.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.ErrorCount">
            <summary>
            Gets or sets error count.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.WarningCount">
            <summary>
            Gets or sets Warning count.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.SubmissionUtcDate">
            <summary>
            Gets or sets Submission date
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.IsValid">
            <summary>
            Gets or sets is-valid.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.ResponseUtcDate">
            <summary>
            Gets or sets response date.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.ReceivedUtcDate">
            <summary>
            Gets or sets received date.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.ElectronicPostmarkUtcDate">
            <summary>
            Gets or sets electronic postmark date.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.EmbeddedCrc32Count">
            <summary>
            Gets or sets embeddedcrc32Count
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.ComputedCrc32Count">
            <summary>
            Gets or sets Computed crc 32 count.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.StatusUpdatedBy">
            <summary>
            Gets or sets the status updated by.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.EFilingAcknowledgmentAlertReports">
            <summary>
            Gets or sets EFilingAcknowledgmentAlertReports.
            </summary>
            <value>
            The EFilingAcknowledgmentAlertReports.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.EFilingAcknowledgmentReportEntity.ApplyCreateEvent(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            The garnishment created event
            </summary>
            <param name="eventData">The event data</param>
            <param name="eventDataDetails">The event data details</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.PaymentFileRequestPaymentsReportEntity">
            <summary>
            PaymentFileRequestPayments Report Entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.PaymentFileRequestPaymentsReportEntity" />
        </member>
        <member name="P:Reporting.Ingestion.Models.PaymentFileRequestPaymentsReportEntity.PaymentId">
            <summary>
            Gets or sets the Payment identifier.
            </summary>
            <value>
            The Payment identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PaymentFileRequestPaymentsReportEntity.PaymentFileRequestId">
            <summary>
            Gets or sets the PaymentFileRequestId 
            </summary>
            <value>
            The PaymentFileRequestId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PaymentFileRequestPaymentsReportEntity.PaymentFileRequestReportEntity">
            <summary>
            PaymentFileRequestReportEntity
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.PaymentFileRequestReportEntity">
            <summary> 
            PaymentFileRequestReportEntity 
            </summary> 
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" /> 
        </member>
        <member name="M:Reporting.Ingestion.Models.PaymentFileRequestReportEntity.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.PaymentFileRequestReportEntity"/> class. 
            </summary> 
        </member>
        <member name="M:Reporting.Ingestion.Models.PaymentFileRequestReportEntity.#ctor(System.Boolean)">
            <summary> 
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.PaymentFileRequestReportEntity"/> class. 
            </summary> 
            <param name="isNewRecord">True for Insert, false for Update</param> 
        </member>
        <member name="P:Reporting.Ingestion.Models.PaymentFileRequestReportEntity.FileRequestProcessingStatusKey">
            <summary> 
            Gets or sets the FileRequestProcessingStatusKey. 
            </summary> 
            <value> 
            The FileRequestProcessingStatusKey. 
            </value> 
        </member>
        <member name="P:Reporting.Ingestion.Models.PaymentFileRequestReportEntity.DryRun">
            <summary> 
            Gets or sets the DryRun. 
            </summary> 
            <value> 
            The DryRun. 
            </value> 
        </member>
        <member name="P:Reporting.Ingestion.Models.PaymentFileRequestReportEntity.IsImmediate">
            <summary> 
            Gets or sets the IsImmediate. 
            </summary> 
            <value> 
            The IsImmediate. 
            </value> 
        </member>
        <member name="P:Reporting.Ingestion.Models.PaymentFileRequestReportEntity.UsgBankAccountId">
            <summary> 
            Gets or sets the UsgBankAccountId. 
            </summary> 
            <value> 
            The UsgBankAccountId. 
            </value> 
        </member>
        <member name="P:Reporting.Ingestion.Models.PaymentFileRequestReportEntity.GeneratedUtcDateTime">
            <summary> 
            Gets or sets the GeneratedUtcDateTime. 
            </summary> 
            <value> 
            The GeneratedUtcDateTime. 
            </value> 
        </member>
        <member name="P:Reporting.Ingestion.Models.PaymentFileRequestReportEntity.InitiatedUtcDateTime">
            <summary> 
            Gets or sets the InitiatedUtcDateTime. 
            </summary> 
            <value> 
            The InitiatedUtcDateTime. 
            </value> 
        </member>
        <member name="P:Reporting.Ingestion.Models.PaymentFileRequestReportEntity.SentUtcDateTime">
            <summary> 
            Gets or sets the SentUtcDateTime. 
            </summary> 
            <value> 
            The SentUtcDateTime. 
            </value> 
        </member>
        <member name="P:Reporting.Ingestion.Models.PaymentFileRequestReportEntity.PaymentFileRequestPaymentsReportEntity">
            <summary>
            Gets or sets PaymentFileRequestPaymentsReportEntity.
            </summary>
            <value>
            The PaymentFileRequestPaymentsReportEntity.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.PaymentFileRequestReportEntity.ApplyIgnoredEvent(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Applies the ignored event.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="eventDataDetails">The event data details.</param>
            <returns> 
            Returns true if event successfully applied. 
            </returns> 
        </member>
        <member name="T:Reporting.Ingestion.Models.PayrollInstanceReportEntity">
            <summary>
            The PayRoll Instance Report Entity
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.PayrollInstanceReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.PayrollInstanceReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.PayrollInstanceReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.PayrollInstanceReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollInstanceReportEntity.TenantName">
            <summary>
            Gets or sets the TenantName.
            </summary>
            <value>
            The TenantName.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollInstanceReportEntity.RunNumber">
            <summary>
            Gets or sets the RunNumber.
            </summary>
            <value>
            The RunNumber.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollInstanceReportEntity.PayrollCloseDate">
            <summary>
            Gets or sets the payroll close date.
            </summary>
            <value>
            The payroll close date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollInstanceReportEntity.PayGroup">
            <summary>
            Gets or sets the pay group.
            </summary>
            <value>
            The pay group.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollInstanceReportEntity.PayrollType">
            <summary>
            Gets or sets the type of the payroll.
            </summary>
            <value>
            The type of the payroll.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollInstanceReportEntity.StartProcessAfterCloseUtcDt">
            <summary>
            The moment that the payroll started to be processed in SSP after it was closed in UltiPro
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollInstanceReportEntity.EndProcessAfterCloseUtcDt">
            <summary>
            The moment that the payroll finished processed in SSP after it was closed in UltiPro
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayrollPaymentReportEntity">
            <summary>
            Payroll payment report entity
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.PayrollPaymentReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.PayrollPaymentReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.PayrollPaymentReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.PayrollPaymentReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollPaymentReportEntity.Status">
            <summary>
            Gets or sets the status of the payment
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollPaymentReportEntity.PaymentType">
            <summary>
            Gets or sets the type of payment (Check, Direct Deposit)
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollPaymentReportEntity.ProcessUtcDate">
            <summary>
            Gets or sets the process date of the payment. 
            Payment Process Date - date a payment must be initiated in order to pay timely.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollPaymentReportEntity.DueUtcDate">
            <summary>
            Gets or sets the due date of the payment. 
            Payment Due Date – date the funds are due to the payee.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollPaymentReportEntity.UsgBankAccountId">
            <summary>
            Gets or sets the USG bank account id.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayrollUnitCompanyResponseView">
            <summary>
            Payroll Unit and Company response view
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollUnitCompanyResponseView.LegalCompanyId">
            <summary>
            Gets or sets the legal company identifier.
            </summary>
            <value>
            The legal company identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollUnitCompanyResponseView.PayrollUnitId">
            <summary>
            Gets or sets the payroll unit identifier.
            </summary>
            <value>
            The payroll unit identifier.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.ProcessReplayResult">
            <summary>
            Status of Replay
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.ProcessReplayResult.Success">
            <summary>
            The success
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.ProcessReplayResult.Skipped">
            <summary>
            The skipped
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.ProcessReplayResult.Failed">
            <summary>
            The failed
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.ProcessReplayResult.NotFound">
            <summary>
            The not found
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.ProcessReplayResult.OutOfSequence">
            <summary>
            The out of sequence
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxAgencyReportEntity">
            <summary>
            Pay Garnishment report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AuditedAggregateViewBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxAgencyReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxAgencyReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxAgencyReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxAgencyReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.TaxAgencyCode">
            <summary>
            Gets or sets the tax agency code.
            </summary>
            <value>
            The tax agency code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.TaxAgencyName">
            <summary>
            Gets or sets the tax agency name.
            </summary>
            <value>
            The tax agency name.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>
            The city.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.ZipCode">
            <summary>
            Gets or sets the zip code.
            </summary>
            <value>
            The zip code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.ContactTitle">
            <summary>
            Gets or sets the contact title.
            </summary>
            <value>
            The contact title.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.ContactFullName">
            <summary>
            Gets or sets the contact full name.
            </summary>
            <value>
            The contact full name.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.ContactPhoneNumber">
            <summary>
            Gets or sets the contact phone number.
            </summary>
            <value>
            The contact phone number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.ContactPhoneExtension">
            <summary>
            Gets or sets the contact phone extension.
            </summary>
            <value>
            The contact phone extension.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.ContactFaxNumber">
            <summary>
            Gets or sets the contact fax number.
            </summary>
            <value>
            The contact fax number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.ContactEmailAddress">
            <summary>
            Gets or sets the contact email address.
            </summary>
            <value>
            The contact email address.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.Url">
            <summary>
            Gets or sets the url.
            </summary>
            <value>
            The url.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.BankAccountNo">
            <summary>
            Gets or sets the bank account number.
            </summary>
            <value>
            The bank account number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.BankName">
            <summary>
            Gets or sets the city.
            </summary>
            <value>
            The city.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.BankBranch">
            <summary>
            Gets or sets the bank branch.
            </summary>
            <value>
            The bank branch.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.BankAddress">
            <summary>
            Gets or sets the bank address.
            </summary>
            <value>
            The bank address.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.BankCity">
            <summary>
            Gets or sets the bank city.
            </summary>
            <value>
            The bank city.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.BankState">
            <summary>
            Gets or sets the bank state.
            </summary>
            <value>
            The bank state.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.BankZipCode">
            <summary>
            Gets or sets the bank zip code.
            </summary>
            <value>
            The bank zip code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.BankPhoneNumber">
            <summary>
            Gets or sets the bank phone number.
            </summary>
            <value>
            The bank phone number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.BankAbaNo">
            <summary>
            Gets or sets the bank aba number.
            </summary>
            <value>
            The bank aba number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.ModifyBy">
            <summary>
            Gets or sets the modify by.
            </summary>
            <value>
            The modify by.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.AuthorityLevel">
            <summary>
            Gets or sets the authority level.
            </summary>
            <value>
            The authority level.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.UseFedRule">
            <summary>
            Gets or sets the use fed rule.
            </summary>
            <value>
            The use fed rule.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.SwitchDepFreq">
            <summary>
            Gets or sets the switch dep freq.
            </summary>
            <value>
            The switch dep freq.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.AutomaticPaid">
            <summary>
            Gets or sets the automatic paid.
            </summary>
            <value>
            The automatic paid.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.SortId">
            <summary>
            Gets or sets the sort id.
            </summary>
            <value>
            The sort id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.InputDate">
            <summary>
            Gets or sets the input date.
            </summary>
            <value>
            The input date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.InputUser">
            <summary>
            Gets or sets the input user.
            </summary>
            <value>
            The input user.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.ModifyDate">
            <summary>
            Gets or sets the modify date.
            </summary>
            <value>
            The modify date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.BankRoutingNo">
            <summary>
            Gets or sets the bank routing number.
            </summary>
            <value>
            The bank routing number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.TaxAgency2">
            <summary>
            Gets or sets the tax agency 2.
            </summary>
            <value>
            The tax agency 2.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.TaxAgency3">
            <summary>
            Gets or sets the tax agency 3.
            </summary>
            <value>
            The tax agency 3.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.TaxIdFormat">
            <summary>
            Gets or sets the tax id format.
            </summary>
            <value>
            The tax id format.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.ExcessWages">
            <summary>
            Gets or sets the excess wages.
            </summary>
            <value>
            The excess wages.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.WagesTaxId">
            <summary>
            Gets or sets the wages tax id.
            </summary>
            <value>
            The wages tax id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.CorrespondingTaxId">
            <summary>
            Gets or sets the corresponding tax id.
            </summary>
            <value>
            The corresponding tax id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.MagReqPaper">
            <summary>
            Gets or sets the mag req paper.
            </summary>
            <value>
            The mag req paper.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.MagMedia">
            <summary>
            Gets or sets the mag media.
            </summary>
            <value>
            The mag media.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.Rate">
            <summary>
            Gets or sets the rate.
            </summary>
            <value>
            The rate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.MagEmployeeTaxable">
            <summary>
            Gets or sets the mag employee taxable.
            </summary>
            <value>
            The mag employee taxable.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.PaperEmployeeTaxable">
            <summary>
            Gets or sets the paper employee taxable.
            </summary>
            <value>
            The paper employee taxable.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.QtrFreq">
            <summary>
            Gets or sets the qtr freq.
            </summary>
            <value>
            The qtr freq.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.DefaultTaxRate">
            <summary>
            Gets or sets the default tax rate.
            </summary>
            <value>
            The default tax rate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.CopyFromPayee">
            <summary>
            Gets or sets the copy from payee.
            </summary>
            <value>
            The copy from payee.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.W2ReqPaper">
            <summary>
            Gets or sets the w2 req paper.
            </summary>
            <value>
            The w2 req paper.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.BulkCheck">
            <summary>
            Gets or sets the bulk check.
            </summary>
            <value>
            The bulk check.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.AcceptAppliedFor">
            <summary>
            Gets or sets the accept applied for.
            </summary>
            <value>
            The accept applied for.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.CountyCode">
            <summary>
            Gets or sets the county code.
            </summary>
            <value>
            The county code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.CombineFilingMethodNoSui">
            <summary>
            Gets or sets the combine filling method no sui.
            </summary>
            <value>
            The combine filling method no sui.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.MagFilingMethod">
            <summary>
            Gets or sets the mag filing method.
            </summary>
            <value>
            The mag filing method.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.BulkEft">
            <summary>
            Gets or sets the bulk eft.
            </summary>
            <value>
            The bulk eft.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.CreditCarryAllowed">
            <summary>
            Gets or sets the credit carry allowed.
            </summary>
            <value>
            The credit carry allowed.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.PayeeState">
            <summary>
            Gets or sets the payee state.
            </summary>
            <value>
            The payee state.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.P_QE_Filing_Method">
            <summary>
            Gets or sets the P_QE_FilingMethod.
            </summary>
            <value>
            The P_QE_FilingMethod.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.P_WD_Filing_Method">
            <summary>
            Gets or sets the P_WD_Filing_Method.
            </summary>
            <value>
            The P_WD_Filing_Method.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.P_YE_Filing_Method">
            <summary>
            Gets or sets the P_YE_Filing_Method.
            </summary>
            <value>
            The P_YE_Filing_Method.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.P_W2_Filing_Method">
            <summary>
            Gets or sets the P_W2_Filing_Method.
            </summary>
            <value>
            The P_W2_Filing_Method.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.ReportingSortId">
            <summary>
            Gets or sets the reporting sort id.
            </summary>
            <value>
            The reporting sort id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyReportEntity.CreditCarryRule">
            <summary>
            Gets or sets the credit carry rule.
            </summary>
            <value>
            The credit carry rule.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxAgencyReportEntity.ApplyObservedEvent(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            The tax agency observed event.
            </summary>
            <param name="eventData">The event data</param>
            <param name="eventDataDetails">The event data details</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayGarnishmentReportEntity">
            <summary>
            Pay Garnishment report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="F:Reporting.Ingestion.Models.PayGarnishmentReportEntity.GarnishmentExceptionsLookupKey">
            <summary>
            The key for the garnishment exceptions lookup in the cache
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.PayGarnishmentReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.PayGarnishmentReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.PayGarnishmentReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.PayGarnishmentReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PayUtcDate">
            <summary>
            Gets or sets the payUtcDate.
            </summary>
            <value>
            The payUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PayId">
            <summary>
            Gets or sets the PayId.
            </summary>
            <value>
            The PayId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PayrollId">
            <summary>
            Gets or sets the PayrollId.
            </summary>
            <value>
            The PayrollId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PayrollInstanceId">
            <summary>
            Gets or sets the PayrollInstanceId.
            </summary>
            <value>
            The PayrollInstanceId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.GarnishmentTypeKey">
            <summary>
            Gets or sets the GarnishmentTypeKey.
            </summary>
            <value>
            The GarnishmentTypeKey.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.LegalEntityCompanyId">
            <summary>
            Gets or sets the LegalEntityCompanyId.
            </summary>
            <value>
            The LegalEntityCompanyId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.CompanyId">
            <summary>
            Gets or sets the CompanyId.
            </summary>
            <value>
            The CompanyId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PeriodStartUtcDate">
            <summary>
            Gets or sets the PeriodStartUtcDate.
            </summary>
            <value>
            The PeriodStartUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PeriodEndUtcDate">
            <summary>
            Gets or sets the PeriodStartUtcDate.
            </summary>
            <value>
            The PeriodStartUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.DueUtcDate">
            <summary>
            Gets or sets the DueUtcDate.
            </summary>
            <value>
            The DueUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.GarnishmentStatusKey">
            <summary>
            Gets or sets the GarnishmentStatusKey.
            </summary>
            <value>
            The GarnishmentStatusKey.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.WageEndUtcDate">
            <summary>
            Gets or sets the WageEndUtcDate.
            </summary>
            <value>
            The WageEndUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.GarnishmentAmount">
            <summary>
            Gets or sets the GarnishmentAmount.
            </summary>
            <value>
            The GarnishmentAmount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.GrossWages">
            <summary>
            Gets or sets the GrossWages.
            </summary>
            <value>
            The GrossWages.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.CheckAddModeKey">
            <summary>
            Gets or sets the CheckAddModeKey.
            </summary>
            <value>
            The CheckAddModeKey.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.GarnishmentPaymentTypeKey">
            <summary>
            Gets or sets the GarnishmentsPaymentTypeKey.
            </summary>
            <value>
            The GarnishmentsPaymentTypeKey.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.GarnishmentPayableStatusKey">
            <summary>
            Gets or sets the GarnishmentPayableStatusKey.
            </summary>
            <value>
            The GarnishmentPayableStatusKey.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.CheckNumber">
            <summary>
            Gets or sets the CheckNumber.
            </summary>
            <value>
            The CheckNumber.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.GarnishmentLiabilityId">
            <summary>
            Gets or sets the GarnishmentLiabilityId.
            </summary>
            <value>
            GarnishmentLiabilityId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PayGarnishmentEmployeeReportEntity">
            <summary>
            Gets or sets PayGarnishmentEmployeeReportEntity.
            </summary>
            <value>
            The PayGarnishmentEmployeeReportEntity.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PayGarnishmentDeductionReportEntity">
            <summary>
            Gets or sets PayGarnishmentDeductionReportEntity.
            </summary>
            <value>
            The PayGarnishmentDeductionReportEntity.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PayGarnishmentPayeeReportEntity">
            <summary>
            Gets or sets PayGarnishmentPayeeReportEntity.
            </summary>
            <value>
            The PayGarnishmentPayeeReportEntity.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PayGarnishmentExceptionReports">
            <summary>
            Gets or sets PayGarnishmentExceptionReports.
            </summary>
            <value>
            The PayGarnishmentExceptionReports.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PayGarnishmentActions">
            <summary>
            Gets or sets PayGarnishmentActionsReportEntity.
            </summary>
            <value>
            The PayGarnishmentActionsReportEntity.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PayGarnishmentLiabilities">
            <summary>
            Gets or sets PayGarnishmentLiabilitiesReportEntity.
            </summary>
            <value>
            The PayGarnishmentLiabilitiesReportEntity.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.GarnishmentExceptionList">
            <summary>
            Gets or sets the GarnishmentExceptionList.
            </summary>
            <value>
            The GarnishmentExceptionList.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.PaymentLiabilityId">
            <summary>
            Gets or sets the PaymentLiabilityId.
            </summary>
            <value>
            The PaymentLiabilityId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.RefundLiabilityId">
            <summary>
            Gets or sets the RefundLiabilityId.
            </summary>
            <value>
            RefundLiabilityId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.RecollectLiabilityId">
            <summary>
            Gets or sets the RecollectLiabilityId.
            </summary>
            <value>
            RecollectLiabilityId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.HasBeenPaid">
            <summary>
            Gets or sets the HasBeenPaid.
            </summary>
            <value>
            HasBeenPaid.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentReportEntity.GarnishmentActionReasonKey">
            <summary>
            Gets or sets the ActionReason.
            </summary>
            <value>
            The ActionReason.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.PayGarnishmentReportEntity.ApplyCreateEvent(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            The garnishment created event
            </summary>
            <param name="eventData">The event data</param>
            <param name="eventDataDetails">The event data details</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.PayGarnishmentReportEntity.MaskGarnishmentCaseNumber(System.String)">
            <summary>
            Mask the case number of garnishment if the case number length is 9 because there may be a chance that it could be SSN
            Otherwise just return the value.
            </summary>
            <param name="value">value</param>
            <returns>string</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity">
            <summary>
            EmployeePayDataGarnishmentReport
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.PayUtcDate">
            <summary>
            Gets or sets the PayUtcDate.
            </summary>
            <value>
            The PayUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.GarnishmentId">
            <summary>
            Gets or sets the garnishment Id.
            </summary>
            <value>
            The garnishment Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.EmployeeNumber">
            <summary>
            Gets or sets the EmployeeNumber.
            </summary>
            <value>
            The EmployeeNumber.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.FirstName">
            <summary>
            Gets or sets the FirstName.
            </summary>
            <value>
            The FirstName.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.LastName">
            <summary>
            Gets or sets the LastName.
            </summary>
            <value>
            The LastName.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.MiddleName">
            <summary>
            Gets or sets the MIddleName.
            </summary>
            <value>
            The MIddleName.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.AddressLine1">
            <summary>
            Gets or sets the AddressLine1.
            </summary>
            <value>
            The AddressLine1.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.AddressLine2">
            <summary>
            Gets or sets the AddressLine2.
            </summary>
            <value>
            The AddressLine2.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.City">
            <summary>
            Gets or sets the City.
            </summary>
            <value>
            The City.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.StateCode">
            <summary>
            Gets or sets the StateCode.
            </summary>
            <value>
            The StateCode.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.CountryCode">
            <summary>
            Gets or sets the CountryCode.
            </summary>
            <value>
            The CountryCode.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.ZipCode">
            <summary>
            Gets or sets the ZipCode.
            </summary>
            <value>
            The ZipCode.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.HomePhoneNumber">
            <summary>
            Gets or sets the home phone number.
            </summary>
            <value>
            The homePhoneNumber.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.SupportsOthersKey">
            <summary>
            Gets or sets the SupportsOthersKey.
            </summary>
            <value>
            The SupportsOthersKey.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.IsInArrearsKey">
            <summary>
            Gets or sets the is in arrears key.
            </summary>
            <value>
            The is in arrears key.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentEmployeeReportEntity.PayGarnishmentReportEntity">
            <summary>
            Gets or sets the PayGarnishmentReportEntity.
            </summary>
            <value>
            The PayGarnishmentReportEntity.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayGarnishmentExceptionReportEntity">
            <summary>
            PayGarnishmentExceptionReportEntity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentExceptionReportEntity.PayUtcDate">
            <summary>
            Gets or sets the payUtcDate.
            </summary>
            <value>
            The payUtcDate.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentExceptionReportEntity.GarnishmentId">
            <summary>
            Gets or sets the garnishment Id.
            </summary>
            <value>
            The garnishment Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentExceptionReportEntity.GarnishmentExceptionKey">
            <summary>
            Gets or sets the garnishment exception key.
            </summary>
            <value>
            The garnishment exception key.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayGarnishmentExceptionReportEntity.DateCleared">
            <summary>
            Gets or sets the DateCleared.
            </summary>
            <value>
            The DateCleared.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayTaxesModel.DuplicatedLineNumber">
            <summary>
            line Item Number
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeMappingReportEntity.UltiProTaxCode">
            <summary>
            Gets or sets the UltiProTaxCode
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeMappingReportEntity.ProcessingFrequency">
            <summary>
            Gets or sets the ProcessingFrequency
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeMappingReportEntity.UteTaxCode">
            <summary>
            Gets or sets the UteTaxCode
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeMappingReportEntity.TaxId">
            <summary>
            Gets or sets the TaxId
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.DefaultlTaxCodeSortIdCalculator">
            <summary>
            Class responsible for calculating Default Tax Code Sort Id.
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase" />    
        </member>
        <member name="M:Reporting.Ingestion.Models.DefaultlTaxCodeSortIdCalculator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.FederalTaxCodeSortIdCalculator"/> class.
            </summary>
            <param name="ultiProTaxCodeList">The UltiPro tax code list.</param>
            <param name="stateCode">The state code.</param>
        </member>
        <member name="M:Reporting.Ingestion.Models.DefaultlTaxCodeSortIdCalculator.GetSortIndex">
            <inheritdoc />>
        </member>
        <member name="T:Reporting.Ingestion.Models.FederalTaxCodeSortIdCalculator">
            <summary>
            Class responsible for calculating Federal Tax Code Sort Id.
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase" />
        </member>
        <member name="M:Reporting.Ingestion.Models.FederalTaxCodeSortIdCalculator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.FederalTaxCodeSortIdCalculator"/> class.
            </summary>
            <param name="ultiProTaxCodeList">The UltiPro tax code list.</param>
        </member>
        <member name="M:Reporting.Ingestion.Models.FederalTaxCodeSortIdCalculator.GetSortIndex">
            <inheritdoc />>
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity">
            <summary>
            Tax transaction report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="F:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.TransactionTypePayment">
            <summary>
            The payment transaction type string
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.TransactionTypeCredit">
            <summary>
            The credit transaction type string
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.TransactionType">
            <summary>
            Gets or sets the transaction type (Payment or Credit).
            </summary>
            <value>
            The transaction type (Payment or Credit).
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.TaxAgencyId">
            <summary>
            Gets or sets the agency transaction tax agency Id.
            </summary>
            <value>
            The agency transaction tax agency Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.LegalEntityCompanyId">
            <summary>
            Gets or sets the agency transaction legal entity company Id.
            </summary>
            <value>
            The agency transaction legal entity company Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.TransactionId">
            <summary>
            Gets or sets the PTM int transaction Id.
            </summary>
            <value>
            The PTM int transaction ID.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.PostPayrollId">
            <summary>
            Gets or sets the agency transaction post payroll Id (PTM int).
            </summary>
            <value>
            The agency transaction post payroll Id (PTM int).
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.PostPayrollGuid">
            <summary>
            Gets or sets the agency transaction post payroll Id.
            </summary>
            <value>
            The agency transaction post payroll Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.ProcessDate">
            <summary>
            Gets or sets the agency transaction process date.
            </summary>
            <value>
            The agency transaction process date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.BatchNo">
            <summary>
            Gets or sets the agency transaction batch number.
            </summary>
            <value>
            The agency transaction batch number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.DueDate">
            <summary>
            Gets or sets the agency transaction due date.
            </summary>
            <value>
            The agency transaction due date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.TransactionAmount">
            <summary>
            Gets or sets the agency transaction amount.
            </summary>
            <value>
            The agency transaction amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.TaxCode">
            <summary>
            Gets or sets the tax code.
            </summary>
            <value>
            The tax code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.CheckDate">
            <summary>
            Gets or sets the payment check date.
            </summary>
            <value>
            The agency transaction check date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.IsPaid">
            <summary>
            Gets or sets the agency transaction IsPaid.
            </summary>
            <value>
            The agency transaction IsPaid.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.IsSent">
            <summary>
            Gets or sets the agency transaction IsSent.
            </summary>
            <value>
            The agency transaction IsSent.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.TaxAgencyTransactionStatusKey">
            <summary>
            Gets or sets the agency transaction status.
            </summary>
            <value>
            The agency transaction status.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.InputUser">
            <summary>
            Gets or sets the agency transaction InputUser.
            </summary>
            <value>
            The agency transaction InputUser.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.ModifyBy">
            <summary>
            Gets or sets the agency transaction ModifyBy.
            </summary>
            <value>
            The agency transaction ModifyBy.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.AutomaticPaid">
            <summary>
            Gets or sets the agency transaction AutomaticPaid.
            </summary>
            <value>
            The agency transaction AutomaticPaid.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.Notes">
            <summary>
            Gets or sets the agency transaction Notes.
            </summary>
            <value>
            The agency transaction Notes.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.Prepaid">
            <summary>
            Gets or sets the agency transaction Prepaid.
            </summary>
            <value>
            The agency transaction Prepaid.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.New">
            <summary>
            Gets or sets the agency transaction New.
            </summary>
            <value>
            The agency transaction New.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.OutstandingAmount">
            <summary>
            Gets or sets the agency transaction OutstandingAmount.
            </summary>
            <value>
            The agency transaction OutstandingAmount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.CheckDateNextBusinessDay">
            <summary>
            Gets or sets the agency transaction CheckDateNextBusinessDay.
            </summary>
            <value>
            The agency transaction CheckDateNextBusinessDay.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.TransactionUId">
            <summary>
            Gets or sets the agency transaction TransactionUId.
            </summary>
            <value>
            The TransactionUId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.TaxAgencyTransactionAmounts">
            <summary>
            Gets or sets TaxAgencyTransactionAmountReportEntity.
            </summary>
            <value>
            The TaxAgencyTransactionAmountReportEntity.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.PaymentEftRequirement">
            <summary>
            Gets or sets the agency transaction PaymentEftRequirement.
            </summary>
            <value>
            The agency transaction PaymentEftRequirement.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.PaymentLiabilityId">
            <summary>
            Gets or sets the payment liability Id.
            </summary>
            <value>
            The payment liability Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.PaymentVoidLiabilityId">
            <summary>
            Gets or sets the agency transaction void liability Id.
            </summary>
            <value>
            The agency transaction void liability Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.PaymentIsExported">
            <summary>
            Gets or sets the PaymentIsExported.
            </summary>
            <value>
            The PaymentIsExported.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.PaymentIsReconciled">
            <summary>
            Gets or sets the PaymentIsReconciled.
            </summary>
            <value>
            The payment PaymentIsReconciled.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.PaymentType">
            <summary>
            Gets or sets the payment type.
            </summary>
            <value>
            The payment type.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.TransactionInitiatedUtcDateTime">
            <summary>
            Gets or sets the agency transaction InitiatedUtcDateTime.
            </summary>
            <value>
            The agency transaction InitiatedUtcDateTime.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.FileRequestId">
            <summary>
            Gets or sets the agency transaction FileRequestId.
            </summary>
            <value>
            The agency transaction FileRequestId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.WireId">
            <summary>
            Gets or sets the agency transaction WireId.
            </summary>
            <value>
            The agency transaction WireId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.Company_TaxId">
            <summary>
            Gets or sets the agency transaction Company_TaxId (the ClientId).
            </summary>
            <value>
            The agency transaction Company_TaxId (the ClientId).
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.ChildCompany_TaxId">
            <summary>
            Gets or sets the agency transaction ChildCompany_TaxId (the ChildClientId).
            </summary>
            <value>
            The agency transaction ChildCompany_TaxId (the ChildClientId).
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.PaymentTaxPaymentCredits">
            <summary>
            Gets or sets TaxPaymentCredits by the PaymentId FK.
            </summary>
            <value>
            The TaxPaymentCredits.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.CreditAgencyRefunded">
            <summary>
            Gets or sets the CreditAgencyRefunded.
            </summary>
            <value>
            The CreditAgencyRefunded.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.CreditUseWithinCheckDateQuarter">
            <summary>
            Gets or sets the CreditUseWithinCheckDateQuarter.
            </summary>
            <value>
            The CreditUseWithinCheckDateQuarter.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.GetTaxAgencyTransactionAmounts(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Gets the tax agency transaction amounts.
            </summary>
            <param name="eventDataDetails">The event data details.</param>
            <param name="ultiProTaxCodePropertyName">Name of the UltiProTaxCode property in a payload.
            Different events have different property names in their payloads.</param>
            <returns>List of TaxAgencyTransactionAmountReportEntity</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxAgencyTransactionReportEntity.GetPaymentTaxPaymentCredits(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets a list of TaxPaymentCreditReportEntity from the event.
            </summary>
            <param name="eventDataDetails">The event data details.</param>
            <returns>List of TaxPaymentCreditReportEntity</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.CustomerBankAccountReportEntity">
            <summary>
            Customer bank account report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Models.CustomerBankAccountReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.CustomerBankAccountReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.CustomerBankAccountReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.CustomerBankAccountReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.CustomerBankAccountReportEntity.AccountName">
            <summary>
            Gets or sets the name of the account.
            </summary>
            <value>
            The name of the account.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CustomerBankAccountReportEntity.AccountDescription">
            <summary>
            Gets or sets the account description.
            </summary>
            <value>
            The account description.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CustomerBankAccountReportEntity.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CustomerBankAccountReportEntity.RoutingNumber">
            <summary>
            Gets or sets the masked routing number4.
            </summary>
            <value>
            The masked routing number4.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CustomerBankAccountReportEntity.MaskedAccountNumber4">
            <summary>
            Gets or sets the masked account number4.
            </summary>
            <value>
            The masked account number4.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CustomerBankAccountReportEntity.BankAccountType">
            <summary>
            Gets or sets the type of the bank account.
            </summary>
            <value>
            The type of the bank account.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CustomerBankAccountReportEntity.BankName">
            <summary>
            Gets or sets the type of the bank name.
            </summary>
            <value>
            The bank name.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.CustomerBankAccountReportEntity.AccountActiveDateTime">
            <summary>
            Gets or sets the account active date time.
            </summary>
            <value>
            The account active date time.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.EventArchiveReplayResult">
            <summary>
            A DTO to represent the result of the action to replay archived aggregate events for a certain date range.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayResult.NumberOfEventsReplayAttempted">
            <summary>
            The number of archived events that were attempted to replay
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayResult.NumberOfEventsReplaySucceeded">
            <summary>
            The number of archived events that were replayed succesfully
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayResult.NumberOfEventsReplayFailed">
            <summary>
            The number of archived events that failed to replay succesfully
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayResult.NumberOfEventsNotFound">
            <summary>
            The number of aggregateIds not found during replay.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayResult.NumberOfEventsSkipped">
            <summary>
            Number of events skipped.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayResult.NumberOfEventsOutOfSequence">
            <summary>
            Number of events that were out of sequence.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayResult.ObservedEvents">
            <summary>
            Contains a list of observed events.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.EventArchiveReplayResult.AllReplayedEventsSucceeded">
            <summary>
            If all replayed events succeeded, then return true, otherwise return false
            </summary>
            <returns>If all replayed events succeeded, then return true, otherwise return false</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.EventArchiveReplayRequestAggregate">
            <summary>
            A DTO to represent the request to replay archived events for an aggregate.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayRequestAggregate.BoundedContext">
            <summary>
            The bounded context name (payment, tax)
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventArchiveReplayRequestAggregate.AggregateName">
            <summary>
            The aggregate name (collection, tenant)
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.RequestReplayCommand">
            <summary>
            A DTO to represent the request to replay archived aggregate events for a certain date range.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.RequestReplayCommand.Aggregates">
            <summary>
            A list of the aggregates to replay events for
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.RequestReplayCommand.AggregateIds">
            <summary>
            A list of aggregate Ids to filter by
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.RequestReplayCommand.EventDateRangeFrom">
            <summary>
            The start of the date range to replay (defaults to minimum value).
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.RequestReplayCommand.EventDateRangeTo">
            <summary>
            The end of the date range to replay (defaults to maximum value).
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.RequestReplayCommand.ReplayOnlyCreated">
            <summary>
            Whether or not to replay only created events
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.RequestReplayCommand.Overwrite">
            <summary>
            Whether or not to overwrite the aggregate if the sequence number matches.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.EventReplayRequest">
            <summary>
            A DTO to represent the request to replay events for a certain date range.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventReplayRequest.Scope">
            <summary>
            Designates which events to replay.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventReplayRequest.EventDateRangeFrom">
            <summary>
            The start of the date range to replay (defaults to minimum value).
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventReplayRequest.EventDateRangeTo">
            <summary>
            The end of the date range to replay (defaults to maximum value).
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.EventArchiveReplayRequestResult">
            <summary>
            The result after requesting events to be replayed from the archive.
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.EventArchiveReplayRequestResult.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.EventArchiveReplayRequestResult.Success">
            <summary>
            Replay requests were sent successfully
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.EventArchiveReplayRequestResult.Error">
            <summary>
            Something went wrong during the request
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.EventReplayResult">
            <summary>
            The result after attempting to apply an initial load.
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.EventReplayResult.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.EventReplayResult.Success">
            <summary>
            Replay requests were sent successfully
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.EventReplayResult.Error">
            <summary>
            Something went wrong during the request
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.EventReplayResult.AlreadyExists">
            <summary>
            There has been another request within the allowed threshold.
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.EventsToReplay">
            <summary>
            A DTO to designate which scopes to replay events for.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventsToReplay.TaxCodes">
            <summary>
            Should replay tax code events.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventsToReplay.TaxAgency">
            <summary>
            Should replay Tax Agency events.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.EventsToReplay.TaxCodeMappings">
            <summary>
            Should replay UTE Tax Code Mappings (UltiPro_TaxCode_Mapping)
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.GeneralLedgerAccountReport">
            <summary>
            General Ledger Account report entity
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.GeneralLedgerAccountReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.GeneralLedgerAccountReport"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.GeneralLedgerAccountReport.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.GeneralLedgerAccountReport"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, fasle for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.GeneralLedgerAccountReport.UsgBankAccountId">
            <summary>
            Gets or sets the usg bank account identifier.
            </summary>
            <value>
            The usg bank account identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.GeneralLedgerAccountReport.ParentAccountId">
            <summary>
            Gets or sets the parent account identifier.
            </summary>
            <value>
            The parent account identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.GeneralLedgerAccountReport.GlSegmentName">
            <summary>
            Gets or sets the name of the gl segment.
            </summary>
            <value>
            The name of the gl segment.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.GeneralLedgerAccountReport.GlSegment">
            <summary>
            Gets or sets the gl segment.
            </summary>
            <value>
            The gl segment.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.GeneralLedgerAccountReport.Classification">
            <summary>
            Gets or sets the classification.
            </summary>
            <value>
            The classification.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.GeneralLedgerAccountReport.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.GeneralLedgerAccountReport.ProductCode">
            <summary>
            Gets or sets the product code.
            </summary>
            <value>
            The product code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.GeneralLedgerAccountReport.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.JournalEntryReport">
            <summary>
            Journal entry report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Models.JournalEntryReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.JournalEntryReport"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.JournalEntryReport.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.JournalEntryReport"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, fasle for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.LiabilityId">
            <summary>
            Gets or sets the liability identifier.
            </summary>
            <value>
            The liability identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.TransactionType">
            <summary>
            Gets or sets the type of the transaction.
            </summary>
            <value>
            The type of the transaction.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
            <value>
            The amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.TransactionUtcDt">
            <summary>
            Gets or sets the transaction UTC dt.
            </summary>
            <value>
            The transaction UTC dt.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.Remark">
            <summary>
            Gets or sets the remark.
            </summary>
            <value>
            The remark.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.PostRef">
            <summary>
            Gets or sets the post reference.
            </summary>
            <value>
            The post reference.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.AccountNumber">
            <summary>
            Gets or sets the account number.
            </summary>
            <value>
            The account number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.AccountId">
            <summary>
            Gets or sets the account identifier.
            </summary>
            <value>
            The account identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.CompanyId">
            <summary>
            Gets or sets the company identifier.
            </summary>
            <value>
            The company identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.PayrollId">
            <summary>
            Gets or sets the payroll identifier.
            </summary>
            <value>
            The payroll identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.PayGroup">
            <summary>
            Gets or sets the pay group.
            </summary>
            <value>
            The pay group.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.CompanyCode">
            <summary>
            Gets or sets the company code.
            </summary>
            <value>
            The company code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.StateCode">
            <summary>
            Gets or sets the state code.
            </summary>
            <value>
            The state code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.AgencyCode">
            <summary>
            Gets or sets the agency code.
            </summary>
            <value>
            The agency code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.TenantAlias">
            <summary>
            Gets or sets the tenant alias.
            </summary>
            <value>
            The tenant alias.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.ProductCode">
            <summary>
            Gets or sets the product code.
            </summary>
            <value>
            The product code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.DocumentNumber">
            <summary>
            Gets or sets the document number.
            </summary>
            <value>
            The document number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.GlSegment">
            <summary>
            Gets or sets the gl segment.
            </summary>
            <value>
            The gl segment.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.Payee">
            <summary>
            Gets or sets the payee.
            </summary>
            <value>
            The payee.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.ClearedByBank">
            <summary>
            Gets or sets a value indicating whether [cleared by bank].
            </summary>
            <value>
              <c>true</c> if [cleared by bank]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.ClearedByBankUtcDateTime">
            <summary>
            Gets or sets the date cleared.
            </summary>
            <value>
            The date cleared.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.CreatedDate">
            <summary>
            Gets or sets the created date.
            </summary>
            <value>
            The created date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>
            The created by.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.JournalEntryReport.CreatedByUserId">
            <summary>
            Gets or sets the created by user identifier.
            </summary>
            <value>
            The created by user identifier.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.LiabilityCollectionReport">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.LiabilityCollectionReport"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.LiabilityCollectionReport.#ctor">
            <summary>
            LiabilityCollectionRpt
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.LiabilityCollectionReport.#ctor(System.Boolean)">
            <summary>
            LiabilityCollectionRpt
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.PaymentMethod">
            <summary>
            PaymentMethod
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.DueUtcDate">
            <summary>
            DueDate
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.ProcessUtcDate">
            <summary>
            ProcessUtcDate
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.CollectedUtcDateTime">
            <summary>
            CollectedUtcDateTime
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.TotalAmount">
            <summary>
            TotalAmount
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.CollectedAmount">
            <summary>
            CollectedAmount
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.TotalCount">
            <summary>
            TotalCount
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.CollectedCount">
            <summary>
            CollectedCount
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.ConfirmationNumber">
            <summary>
            Stores the latest ConfirmationNumber
            </summary>
            <remarks>
            Each Collection within a NettedCollection will share the same ConfirmationNumbers
            </remarks>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.AcknowledgementNumber">
            <summary>
            AcknowledgementNumber
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.CollectionType">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.UsgBankAccountId">
            <summary>
            UsgBankAccountId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.CustomerBankAccountId">
            <summary>
            CustomerBankAccountId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.PayUtcDate">
            <summary>
            Gets or sets the pay UTC date.
            </summary>
            <value>
            The pay UTC date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.User">
            <summary>
            Gets or sets the user
            </summary>
            <value>
            The User.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.UserId">
            <summary>
            Gets or sets the userId
            </summary>
            <value>
            The User Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.TimeStamp">
            <summary>
            Gets or sets the TimeStamp
            </summary>
            <value>
            The TimeStamp.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.NettedCollectionId">
            <summary>
            NettedCollectionId
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.LiabilityCollectionConfirmationInfos">
            <summary>
            LiabilityCollectionConfirmationInfos
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityCollectionReport.Comments">
            <summary>
            Comments
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.LiabilityCollectionReport.ApplyCreateEvent(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            ApplyCreateEvent
            </summary>
            <param name="eventData">The IDictionary to copy of Liability Collection data.</param>
            <param name="eventDataDetails">The event data details</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.LiabilityCollectionReport.UpdateCommonFields(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Sets the ExtraFields which are required
            </summary>
            <param name="eventData">eventData</param>
        </member>
        <member name="T:Reporting.Ingestion.Models.LiabilityReport">
            <summary>
            Liability report entity
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.LiabilityReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.LiabilityReport"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.LiabilityReport.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.LiabilityReport"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.LegalEntityCompanyId">
            <summary>
            Gets or sets the legal entity company identifier.
            </summary>
            <value>
            The legal entity company identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.CollectionId">
            <summary>
            Gets or sets the collection identifier.
            </summary>
            <value>
            The collection identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.PayrollId">
            <summary>
            Gets or sets the payroll identifier.
            </summary>
            <value>
            The payroll identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.PayUtcDate">
            <summary>
            Gets or sets the pay date.
            </summary>
            <value>
            The pay date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.PaymentDeliveryUtcDate">
            <summary>
            Gets or sets the payment delivery UTC date.
            </summary>
            <value>
            The payment delivery UTC date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.DdTotalAmount">
            <summary>
            Gets or sets the CheckTotalCount total amount.
            </summary>
            <value>
            The Direct deposit total amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.CheckTotalAmount">
            <summary>
            Gets or sets the check total amount.
            </summary>
            <value>
            The check total amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.TotalAmount">
            <summary>
            Gets or sets the total amount.
            </summary>
            <value>
            The total amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.DdAdjustedAmount">
            <summary>
            Gets or sets the check adjusted amount.
            </summary>
            <value>
            The direct deposit adjusted amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.DdTotalCount">
            <summary>
            Gets or sets the direct deposit total count.
            </summary>
            <value>
            The direct deposit total count.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.DdTotalItemsCount">
            <summary>
            Gets or sets the direct deposit total items count.
            </summary>
            <value>
            The direct deposit total items count.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.CheckTotalCount">
            <summary>
            Gets or sets the check total count.
            </summary>
            <value>
            The check total count.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.CheckAdjustedAmount">
            <summary>
            Gets or sets the check adjusted amount.
            </summary>
            <value>
            The check adjusted amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.TotalCount">
            <summary>
            Gets or sets the total count.
            </summary>
            <value>
            The total count.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.ProductCode">
            <summary>
            Gets or sets the product code.
            </summary>
            <value>
            The product code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.SourceCreatedByUserName">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>
            The created by.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.SourceCreatedByUserId">
            <summary>
            Gets or sets the created by user identifier.
            </summary>
            <value>
            The created by user identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.SourceCreatedUtcDate">
            <summary>
            Gets or sets the created date.
            </summary>
            <value>
            The created date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.SourceModifiedByUserName">
            <summary>
            Gets or sets the modified by.
            </summary>
            <value>
            The modified by.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.SourceModifiedByUserId">
            <summary>
            Gets or sets the modified by user identifier.
            </summary>
            <value>
            The modified by user identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.SourceModifiedUtcDate">
            <summary>
            Gets or sets the modified date.
            </summary>
            <value>
            The modified date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.RunNumber">
            <summary>
            Gets or sets the run number, which is the equivalent of UltiPro's per-control.
            </summary>
            <value>
            The run number, which is the equivalent of UltiPro's per-control.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.TotalItemsCount">
            <summary>
            Gets or sets the total item count.
            </summary>
            <value>
            The total item count.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.UndistributedTotalAmount">
            <summary>
            Gets or sets the undistributed total amount.
            </summary>
            <value>
            The undistributed total amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.UndistributedTotalCount">
            <summary>
            Gets or sets the undistributed total count.
            </summary>
            <value>
            The undistributed total count.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.LiabilityPaymentsReportEntities">
            <summary>
            Gets or sets PaymentFileRequestPaymentsReportEntity.
            </summary>
            <value>
            The PaymentFileRequestPaymentsReportEntity.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.LiabilityReport.PositiveLiabilityId">
            <summary>
            Gets or sets the PositiveLiabilityId.
            </summary>
            <value>
            The PositiveLiabilityId.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.LiabilityReport.ApplyCreateEventVersion1Point7AndBelow(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            ApplyCreateEvent for events of version lower than 1.7
            </summary>
            <param name="eventData">The IDictionary to copy of Liability Collection data.</param>
            <param name="eventDataDetails">The event data details</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.LiabilityReport.ApplyCreateEvent(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            ApplyCreateEvent
            </summary>
            <param name="eventData">The IDictionary to copy of Liability Collection data.</param>
            <param name="eventDataDetails">The event data details</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayReport">
            <summary>
            Pay report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Models.PayReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.PayReport"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.PayReport.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.PayReport"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.NetPayLiabilityId">
            <summary>
            Gets or sets the net pay liability identifier.
            </summary>
            <value>
            The net pay liability identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.EmployeeFirstName">
            <summary>
            Gets or sets the first name of the employee.
            </summary>
            <value>
            The first name of the employee.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.EmployeeLastName">
            <summary>
            Gets or sets the last name of the employee.
            </summary>
            <value>
            The last name of the employee.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.EmployeeMiddleName">
            <summary>
            Gets or sets the name of the employee middle.
            </summary>
            <value>
            The name of the employee middle.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.EmployeeNameSuffix">
            <summary>
            Gets or sets the employee name suffix.
            </summary>
            <value>
            The employee name suffix.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.EmployeeNumber">
            <summary>
            Gets or sets the employee number.
            </summary>
            <value>
            The employee number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.PayUtcDate">
            <summary>
            Gets or sets the pay UTC date.
            </summary>
            <value>
            The pay UTC date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.CheckNumber">
            <summary>
            Gets or sets the check number.
            </summary>
            <value>
            The check number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.NetAmount">
            <summary>
            Gets or sets the net amount.
            </summary>
            <value>
            The net amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.DirectDepositAmount">
            <summary>
            Gets or sets the direct deposit amount.
            </summary>
            <value>
            The direct deposit amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.CheckAmount">
            <summary>
            Gets or sets the check amount.
            </summary>
            <value>
            The check amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.CompanyId">
            <summary>
            Gets or sets the company identifier.
            </summary>
            <value>
            The company identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.PayrollId">
            <summary>
            Gets or sets the payroll identifier.
            </summary>
            <value>
            The payroll identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.ProcessingStatus">
            <summary>
            Gets or sets the processing status.
            </summary>
            <value>
            The processing status.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.PayrollInstanceId">
            <summary>
            Gets or sets the payroll instance identifier.
            </summary>
            <value>
            The payroll instance identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.ExceptionType">
            <summary>
            Gets or sets the type of the exception.
            </summary>
            <value>
            The type of the exception.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.CannotPay">
            <summary>
            Gets or sets a value indicating whether [cannot pay].
            </summary>
            <value>
              <c>true</c> if [cannot pay]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.PostedUtcDate">
            <summary>
            Gets or sets the posted UTC date.
            </summary>
            <value>
            The posted UTC date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.EmployeeId">
            <summary>
            Gets or sets the employee identifier.
            </summary>
            <value>
            The employee identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.PayActions">
            <summary>
            Gets or sets PayActionsReportEntity.
            </summary>
            <value>
            The PayActionsReportEntity.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayReport.PayLiabilities">
            <summary>
            Gets or sets PayLiabilities.
            </summary>
            <value>
            The PayLiabilities.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.PayReport.UpdatePayTaxesModel(TaxHub.Common.EventStore.DomainEventData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Update PayTaxes based on the event's payload.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="eventDataDetails">The event data details.</param>
        </member>
        <member name="T:Reporting.Ingestion.Models.PayrollUnitReport">
            <summary>
            Payroll unit report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Models.PayrollUnitReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.PayrollUnitReport"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.PayrollUnitReport.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TenantReport"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, fasle for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollUnitReport.LegalEntityCompanyId">
            <summary>
            Gets or sets the legal entity company identifier.
            </summary>
            <value>
            The legal entity company identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollUnitReport.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollUnitReport.PayrollCode">
            <summary>
            Gets or sets the payroll code.
            </summary>
            <value>
            The payroll code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.PayrollUnitReport.PayGroup">
            <summary>
            Gets or sets the pay group.
            </summary>
            <value>
            The pay group.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.LocalTaxCodeSortIdCalculator">
            <summary>
            Class responsible for calculating Local Tax Code Sort Id.
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase" />
        </member>
        <member name="M:Reporting.Ingestion.Models.LocalTaxCodeSortIdCalculator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.StateTaxCodeSortIdCalculator" /> class.
            </summary>
            <param name="ultiProTaxCodeList">The UltiPro tax code list.</param>
            <param name="stateCode">The other code.</param>
        </member>
        <member name="M:Reporting.Ingestion.Models.LocalTaxCodeSortIdCalculator.GetSortIndex">
            <inheritdoc />>
        </member>
        <member name="T:Reporting.Ingestion.Models.OtherTaxCodeSortIdCalculator">
            <summary>
            Class responsible for calculating Other Tax Code Sort Id.
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase" />
        </member>
        <member name="M:Reporting.Ingestion.Models.OtherTaxCodeSortIdCalculator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.StateTaxCodeSortIdCalculator" /> class.
            </summary>
            <param name="ultiProTaxCodeList">The UltiPro tax code list.</param>
            <param name="stateCode">The other code.</param>
        </member>
        <member name="M:Reporting.Ingestion.Models.OtherTaxCodeSortIdCalculator.GetSortIndex">
            <inheritdoc />>
        </member>
        <member name="T:Reporting.Ingestion.Models.StateTaxCodeSortIdCalculator">
            <summary>
            Class responsible for calculating State Tax Code Sort Id.
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase" />
        </member>
        <member name="M:Reporting.Ingestion.Models.StateTaxCodeSortIdCalculator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.StateTaxCodeSortIdCalculator" /> class.
            </summary>
            <param name="ultiProTaxCodeList">The UltiPro tax code list.</param>
            <param name="stateCode">The state code.</param>
        </member>
        <member name="M:Reporting.Ingestion.Models.StateTaxCodeSortIdCalculator.GetSortIndex">
            <inheritdoc />>
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase">
            <summary>
            Base class for calculating TaxCode Sort Id.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase.#ctor(System.Byte,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase" /> class.
            </summary>
            <param name="authorityCode">The authority code.</param>
            <param name="ultiProTaxCodeList">The UltiPro tax code list.</param>
            <param name="stateCode">The state code.</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase.AuthorityCode">
            <summary>
            Gets or sets the authority code.
            </summary>
            <value>
            The authority code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase.UltiProTaxCodeList">
            <summary>
            Gets or sets the UltiPro tax code list.
            </summary>
            <value>
            The UltiPro tax code list.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase.StateCode">
            <summary>
            Gets or sets the state code.
            </summary>
            <value>
            The state code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase.LocalCode">
            <summary>
            Gets or sets the local code.
            </summary>
            <value>
            The local code.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase.GetSortIndex">
            <summary>
            Get Sort Index.
            </summary>
            <returns> Sort Index</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase.CalculateSortId">
            <summary>
            Calculates the sort identifier.
            </summary>
            <returns>Calculated Sort Id</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxCodeSortIdCalculatorBase.FormatSortIndex(System.String)">
            <summary>
            Formats the index of the sort.
            </summary>
            <param name="sortIndex">Index of the sort.</param>
            <returns>Formated sort index</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxCodeSortIdFactory">
            <summary>
            TaxCode Sort Id Factory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxCodeSortIdFactory.CreateTaxCodeSortIdCalculator(System.String,System.String,System.String)">
            <summary>
            Creates the tax code sort identifier calculator.
            </summary>
            <param name="authorityLevel">The authority level.</param>
            <param name="ultiProTaxCodeList">The UltiPro tax code list.</param>
            <param name="stateCode">The state code.</param>
            <returns>
            TaxCode Sort Id Calculator instance
            </returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity">
            <summary>
            Tax payment credit report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity" />
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity.TaxPaymentId">
            <summary>
            Gets or sets the payment identifier.
            </summary>
            <value>
            The payment identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity.TaxCreditId">
            <summary>
            Gets or sets the credit identifier.
            </summary>
            <value>
            The payment identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity.TenantId">
            <summary>
            Gets or sets the tenant identifier.
            </summary>
            <value>
            The tenant identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity.LiabilityId">
            <summary>
            Gets or sets the liability Id.
            </summary>
            <value>
            The liability Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity.CreditEffectOnLiabilityKey">
            <summary>
            Gets or sets the CreditEffectOnLiabilityKey
            </summary>
            <value>
            The CreditEffectOnLiabilityKey
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity.CreditAmountApplied">
            <summary>
            Gets or sets the CreditAmountApplied.
            </summary>
            <value>
            The CreditAmountApplied
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity.TaxPaymentCreditStatusKey">
            <summary>
            Gets or sets the TaxPaymentCreditStatusKey
            </summary>
            <value>
            The TaxPaymentCreditStatusKey
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity.CreditTrackingId">
            <summary>
            Gets or sets the creditTrackingId
            </summary>
            <value>
            The creditTrackingId
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity.SessionId">
            <summary>
            Gets or sets the sessionId
            </summary>
            <value>
            The sessionId
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity.ReducedQeAdjLiabilityPaymentIdGUID">
            <summary>
            Gets or sets the creditTrackingId
            </summary>
            <value>
            The creditTrackingId
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPaymentCreditReportEntity.CheckDate">
            <summary>
            Gets or sets the CheckDate.
            </summary>
            <value>
            The CheckDate.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.ProductReport">
            <summary>
            Tax amount entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.ProductReport" />
        </member>
        <member name="P:Reporting.Ingestion.Models.ProductReport.ProductOwnerId">
            <summary>
            Gets or sets the tenant identifier.
            </summary>
            <value>
            The tenant identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.ProductReport.ProductCode">
            <summary>
            Gets or sets the product code 
            </summary>
            <value>
            The product code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.ProductReport.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.ProductReport.EffectiveUtcDateFrom">
            <summary>
            Gets or sets the EffectiveUtcDateFrom.
            </summary>
            <value>
            The EffectiveUtcDateFrom.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.ProductReport.EffectiveUtcDateTo">
            <summary>
            Gets or sets the EffectiveUtcDateTo.
            </summary>
            <value>
            The EffectiveUtcDateTo.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.ProductReport.ActivationStatus">
            <summary>
            Gets or sets ActivationStatus.
            </summary>
            <value>
            The ActivationStatus.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.ProductReport.CreateProductReport(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor to create ProductReport from product details
            </summary>
            <param name="aggregateId">The aggregate Id of event.</param>
            <param name="productDetails">Product details dictionary.</param>
            <returns>ProductReport</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.ProductReport.GetValue``1(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="objectValue">The object value.</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxAmountReport">
            <summary>
            Tax amount entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.TaxAmountReport" />
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxAmountReport.GetTaxId(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the tax identifier.
            </summary>
            <param name="eventDataDetails">The event data details.</param>
            <returns>Tax Id</returns>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountReport.TaxPayrollId">
            <summary>
            Gets or sets the payroll identifier.
            </summary>
            <value>
            The payroll identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountReport.TenantId">
            <summary>
            Gets or sets the tenant identifier.
            </summary>
            <value>
            The tenant identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountReport.TaxId">
            <summary>
            Gets or sets the tax identifier.
            </summary>
            <value>
            The tax identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountReport.UltiTaxCode">
            <summary>
            Gets or sets the tax code.
            </summary>
            <value>
            The tax code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountReport.CurrentAmount">
            <summary>
            Gets or sets the current amount.
            </summary>
            <value>
            The current amount.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountReport.TaxDataSource">
            <summary>
            Gets or sets the tax data source.
            </summary>
            <value>
            The tax data source.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountReport.PayUtcDate">
            <summary>
            Gets or sets the pay date.
            </summary>
            <value>
            The pay date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxAmountReport.TaxAmountUltiProTaxCodes">
            <summary>
            List of TaxAmountUltiProTaxCodes
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxCodeReportEntity">
            <summary>
            Tax code entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxCodeReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxCodeReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxCodeReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxCodeReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.TaxId">
            <summary>
            Gets or sets the tax identifier.
            </summary>
            <value>
            The tax identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.TaxGuid">
            <summary>
            Gets or sets the tax Guid.
            </summary>
            <value>
            The tax Guid.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.UteTaxCode">
            <summary>
            Gets or sets the Ute tax code.
            </summary>
            <value>
            The Ute tax code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.IsTax">
            <summary>
            Gets or sets a value indicating whether this instance is tax.
            </summary>
            <value>
              <c>true</c> if this instance is tax; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.AuthorityLevel">
            <summary>
            Gets or sets the authority level.
            </summary>
            <value>
            The authority level.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.StateCode">
            <summary>
            Gets or sets the state code.
            </summary>
            <value>
            The state code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.SupplementalCode">
            <summary>
            Gets or sets the supplemental code.
            </summary>
            <value>
            The supplemental code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.LocalCode">
            <summary>
            Gets or sets the local code.
            </summary>
            <value>
            The local code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.ActiveStatus">
            <summary>
            Gets or sets the active status.
            </summary>
            <value>
            The active status.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.TaxAgencyCode">
            <summary>
            Gets or sets the tax agency code.
            </summary>
            <value>
            The tax agency code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.TaxAgencyParentCode">
            <summary>
            Gets or sets the tax agency parent code.
            </summary>
            <value>
            The tax agency parent code.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.SortId">
            <summary>
            Gets or sets the sort identifier.
            </summary>
            <value>
            The sort identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.UltiProTaxCodeList">
            <summary>
            Gets or sets the UltiPro tax list.
            </summary>
            <value>
            The UltiPro tax list.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxCodeReportEntity.TaxAgencyId">
            <summary>
            Gets or sets the TaxAgencyId.
            </summary>
            <value>
            The TaxAgencyId.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.ActiveStatusEnum">
            <summary>
            TaxCode Active Status
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.ActiveStatusEnum.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.ActiveStatusEnum.Ignore">
            <summary>
            The ignore
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.ActiveStatusEnum.Inactive">
            <summary>
            The inactive
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.ActiveStatusEnum.Active">
            <summary>
            The active
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxPayrollImportReportEntity">
            <summary>
            Tax payroll import entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxPayrollImportReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxPayrollImportReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxPayrollImportReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxPayrollImportReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxPayrollInputReportEntity">
            <summary>
            Tax Payroll Input reporting entity
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxPayrollInputReportEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxPayrollInputReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxPayrollInputReportEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxPayrollInputReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxPayrollInputReportEntity.UpdateTaxAmounts(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Updates the existing tax amounts.
            </summary>
            <param name="details">Details</param>
        </member>
        <member name="T:Reporting.Ingestion.Models.TaxPayrollReportBase`1">
            <summary>
            Tax Payroll base
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxPayrollReportBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxPayrollInputReportEntity"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxPayrollReportBase`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TaxPayrollInputReportEntity"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPayrollReportBase`1.TaxPayrollId">
            <summary>
            Gets or sets the tax payroll identifier.
            </summary>
            <value>
            The tax payroll identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPayrollReportBase`1.TaxDataSource">
            <summary>
            Gets or sets the tax data source.
            </summary>
            <value>
            The tax data source.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPayrollReportBase`1.ActionDateTime">
            <summary>
            Gets or sets the import date time.
            </summary>
            <value>
            The import date time.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPayrollReportBase`1.LiabilityId">
            <summary>
            Gets or sets the liability identifier.
            </summary>
            <value>
            The liability identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPayrollReportBase`1.TaxAmounts">
            <summary>
            Gets or sets the tax amounts.
            </summary>
            <value>
            The tax amounts.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPayrollReportBase`1.PostPayrollId">
            <summary>
            Gets or sets the PostPayrollId.
            </summary>
            <value>
            The PostPayrollId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPayrollReportBase`1.PostPayrollGuid">
            <summary>
            Gets or sets the PostPayrollGUID.
            </summary>
            <value>
            The PostPayrollGUID.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPayrollReportBase`1.PayrollId">
            <summary>
            Gets or sets the payroll identifier.
            </summary>
            <value>
            The payroll identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPayrollReportBase`1.PayUtcDate">
            <summary>
            Gets or sets the pay date.
            </summary>
            <value>
            The pay date.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TaxPayrollReportBase`1.PayrollType">
            <summary>
            Gets or sets the payroll type.
            </summary>
            <value>
            The payroll type.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxPayrollReportBase`1.RaiseEvent(System.String,System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Reporting.Ingestion.Models.TaxPayrollReportBase`1.Delete">
            <inheritdoc />
        </member>
        <member name="T:Reporting.Ingestion.Models.TenantStatusReport">
            <summary>
            Tenant report entity
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantStatusReport.TenantId">
            <summary>
            Gets or sets the TenantId.
            </summary>
            <value>
            The TenantId.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantStatusReport.TenantStatusCode">
            <summary>
            Gets or sets the TenantStatusCode.
            </summary>
            <value>
            The TenantStatusCode.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantStatusReport.EffectiveUtcDateFrom">
            <summary>
            Gets or sets the EffectiveUtcDateFrom.
            </summary>
            <value>
            The EffectiveUtcDateFrom.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantStatusReport.EffectiveUtcDateTo">
            <summary>
            Gets or sets the EffectiveUtcDateTo.
            </summary>
            <value>
            The EffectiveUtcDateTo.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.TenantReport">
            <summary>
            Tenant report entity
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TenantReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TenantReport"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.TenantReport.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.TenantReport"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>
            The alias.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.MasterCompanyId">
            <summary>
            Gets or sets the master company identifier.
            </summary>
            <value>
            The master company identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.ArNumber">
            <summary>
            Gets or sets the AR number.
            </summary>
            <value>
            The AR number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.ClientAccessKey">
            <summary>
            Gets or sets the client access key.
            </summary>
            <value>
            The client access key.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.CustomerBankAccountId">
            <summary>
            Gets or sets the Customer Bank Account Id.
            </summary>
            <value>
            The Customer Bank Account Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.CustomerTaxBankAccountId">
            <summary>
            Gets or sets the Customer Tax Bank Account Id.
            </summary>
            <value>
            The Customer Tax Bank Account Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.CustomerGarnishmentsBankAccountId">
            <summary>
            Gets or sets the Customer Garnishments Bank Account Id.
            </summary>
            <value>
            The Customer Garnishments Bank Account Id.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.TenantStatus">
            <summary>
            Gets or sets the TenantStatus.
            </summary>
            <value>
            The Tenant Status.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.NetPayDraftDays">
            <summary>
            Gets or sets the net PayDraft Days.
            </summary>
            <value>
            the net PayDraft Days.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.DcEnvironmentName">
            <summary>
            Gets or sets the DcEnvironmentName.
            </summary>
            <value>
            The DcEnvironmentName
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.PodId">
            <summary>
            Gets or sets the PodId.
            </summary>
            <value>
            The PodId
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.SiteDbServerName">
            <summary>
            Gets or sets the SiteDbServerName.
            </summary>
            <value>
            The SiteDbServerName
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.MarketType">
            <summary>
            Gets or sets the MarketType.
            </summary>
            <value>
            The MarketType
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.HasNewHireReporting">
            <summary>
            Gets or sets the flag indicating whether the tenant has New Hire Reporting enabled.
            </summary>
            <value>
            The HasNewHireReporting
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.TenantReport.Products">
            <summary>
            Gets or sets the products.
            </summary>
            <value>
            The products.
            </value>
        </member>
        <member name="M:Reporting.Ingestion.Models.TenantReport.ToTenantStatus(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            To the tenant status.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="eventDataDetails">The event data details.</param>
            <returns>List of tenant status</returns>
        </member>
        <member name="M:Reporting.Ingestion.Models.TenantReport.UpdateProducts(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            To the tenant products.
            </summary>
            <param name="aggregateId">The aggregateId.</param>
            <param name="eventDataDetails">The event data details.</param>
        </member>
        <member name="M:Reporting.Ingestion.Models.TenantReport.SynchronizeProducts(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            To the tenant products.
            </summary>
            <param name="aggregateId">The aggregateId.</param>
            <param name="eventDataDetails">The event data details.</param>
        </member>
        <member name="T:Reporting.Ingestion.Models.UnReportedAggregate">
            <summary>
            Aggregate that not processed by reporting yet
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="T:Reporting.Ingestion.Models.UsgBankAccountReport">
            <summary>
            USG bank account report entity
            </summary>
            <seealso cref="T:Reporting.Ingestion.Models.AggregateViewBase`1" />
        </member>
        <member name="M:Reporting.Ingestion.Models.UsgBankAccountReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.UsgBankAccountReport"/> class.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Models.UsgBankAccountReport.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Models.UsgBankAccountReport"/> class.
            </summary>
            <param name="isNewRecord">True for Insert, false for Update</param>
        </member>
        <member name="P:Reporting.Ingestion.Models.UsgBankAccountReport.BankId">
            <summary>
            Gets or sets the bank identifier.
            </summary>
            <value>
            The bank identifier.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.UsgBankAccountReport.AccountName">
            <summary>
            Gets or sets the name of the account.
            </summary>
            <value>
            The name of the account.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.UsgBankAccountReport.RoutingNumber">
            <summary>
            Gets or sets the routing number.
            </summary>
            <value>
            The routing number.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.UsgBankAccountReport.MaskedAccountNumber4">
            <summary>
            Gets or sets the masked account number4.
            </summary>
            <value>
            The masked account number4.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.UsgBankAccountReport.AccountPurpose">
            <summary>
            Gets or sets the account purpose.
            </summary>
            <value>
            The account purpose.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.UsgBankAccountReport.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.UsgBankAccountReport.BankAccountType">
            <summary>
            Gets or sets the type of the bank account.
            </summary>
            <value>
            The type of the bank account.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.UsgBankAccountReport.IsDefault">
            <summary>
            Gets or sets a value indicating whether this instance is default.
            </summary>
            <value>
              <c>true</c> if this instance is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.Models.UsgBankAccountReport.UsgBankName">
            <summary>
            Gets or sets the type of the bank name.
            </summary>
            <value>
            The bank name.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.Models.UteTaxDataSource">
            <summary>
            Enumeration for Ute Tax data source
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.UteTaxDataSource.Import">
            <summary>
            The import
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Models.UteTaxDataSource.ManualInput">
            <summary>
            The manual input
            </summary>
        </member>
        <member name="T:Reporting.Ingestion.Messaging.TaxServiceReplayUnhandledMessageSubscriber">
            <summary>
            Class provides subscriber functionality for the replay unhandled events.
            </summary>    
        </member>
        <member name="F:Reporting.Ingestion.Messaging.TaxServiceReplayUnhandledMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.TaxServiceReplayUnhandledMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,Reporting.Ingestion.Application.IUnhandledReplayService)">
            <summary>
            Constructor for this class
            </summary>
            <param name="logger">A logger</param>
            <param name="unhandledReplayService">The unhandled replay service</param>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.TaxServiceReplayUnhandledMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,Reporting.Ingestion.Events.ReplayUnhandledEvent)">
            <summary>
            Method consumes the event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <param name="details">The typed data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:Reporting.Ingestion.Messaging.RawEventsToReportArchiveMessageSubscriber">
            <summary> 
            Import Raw Events message subscriber 
            </summary> 
        </member>
        <member name="F:Reporting.Ingestion.Messaging.RawEventsToReportArchiveMessageSubscriber.TaxHubEventName">
            <summary>
            TaxHub Event Name 
            </summary>
        </member>
        <member name="F:Reporting.Ingestion.Messaging.RawEventsToReportArchiveMessageSubscriber.SmartHubEventName">
            <summary>
            SmartHub Event Name
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.RawEventsToReportArchiveMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,Reporting.Ingestion.Application.IImportRawEventsReportingService)">
            <summary> 
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Messaging.RawEventsToReportArchiveMessageSubscriber" /> class. 
            </summary> 
            <param name="logger">The logger.</param>
            <param name="importService">The application service used to import the raw events data.</param> 
        </member>
        <member name="M:Reporting.Ingestion.Messaging.RawEventsToReportArchiveMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes an event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>
            Returns boolean value if event has been consumed (handled).
            </returns>
            <remarks>
            IMPORTANT NOTE: if subscriber is not interested in the event, it should return true to avoid misleading the message queue internal logic.
            </remarks>
        </member>
        <member name="T:Reporting.Ingestion.Messaging.TaxServiceReplayArchiveRequestedMessageSubscriber">
            <summary>
            Class provides subscriber functionality for the archive replay event.
            </summary>    
        </member>
        <member name="F:Reporting.Ingestion.Messaging.TaxServiceReplayArchiveRequestedMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.TaxServiceReplayArchiveRequestedMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,Reporting.Ingestion.Application.IEventArchiveReplayService)">
            <summary>
            Constructor for this class
            </summary>
            <param name="logger">A logger</param>
            <param name="messageHub">A message hub</param>
            <param name="eventArchiveReplayService">The event archive replay service</param>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.TaxServiceReplayArchiveRequestedMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,Reporting.Ingestion.Events.TaxServiceReplayArchiveRequestedEvent)">
            <summary>
            Method consumes the event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <param name="details">The typed data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:Reporting.Ingestion.Messaging.ReportingMessageSubscriber">
            <summary>
            Reporting message subscriber
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.ReportingMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,Microsoft.Practices.Unity.IUnityContainer,SmartHub.Metrics.IAppMetricsFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Messaging.ReportingMessageSubscriber" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="container">The container.</param>
            <param name="metricsFactory">The metrics factory</param>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.ReportingMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Method consumes an event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <returns>
            Returns boolean value if event has been consumed (handled).
            </returns>
            <remarks>
            IMPORTANT NOTE: if subscriber is not interested in the event, it should return true to avoid misleading the message queue internal logic.
            </remarks>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.ReportingMessageSubscriber.GetReportingService(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Gets the appropriate instance of IReportingAggregateSaveService for an event
            </summary>
            <param name="eventData">The event data</param>
            <returns>An appropriate instance of IReportingAggregateSaveService for an event</returns>
        </member>
        <member name="T:Reporting.Ingestion.Messaging.ReportingServiceFactory">
            <summary>
            Reporting Service Factory
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.ReportingServiceFactory.GetSupportedReportServices">
            <summary>
            Gets the dictionary of currently supported reporting aggregates
            </summary>
            <returns>A dictionary where the key is the aggregate (boundedContext.aggregate) and the value is a type of a class that will handle saving that aggregate</returns>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.ReportingServiceFactory.IsReportedAggregate(System.String,System.String)">
            <summary>
            Returns whether or not the agrgregate is supported.
            </summary>
            <param name="boundedContext">The bounded context.</param>
            <param name="aggregateName">The aggregate name.</param>
            <returns>Whether or not the agrgregate is supported.</returns>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.ReportingServiceFactory.CreateReportingService``1(TaxHub.Common.EventStore.DomainEventData,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Creates the reporting service.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="container">The container.</param>
            <returns>
            Reporting aggregate service.
            </returns>
            <exception cref="T:System.ApplicationException">Thrown if an aggregate is not known.</exception>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.ReportingServiceFactory.CreateReportingService``1(System.String,System.String,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Creates the reporting service.
            </summary>
            <param name="boundedContext">The bounded context.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="container">The container.</param>
            <returns>
            Reporting aggregate service.
            </returns>
            <exception cref="T:System.ApplicationException">Thrown if an aggregate is not known.</exception>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.ReportingServiceFactory.CreateReportingService``1(System.String,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Creates the reporting service.
            </summary>
            <param name="aggregateKey">boundedContext.aggregateName</param>
            <param name="container">The container.</param>
            <returns>
            Reporting aggregate service.
            </returns>
            <exception cref="T:System.ApplicationException">Thrown if an aggregate is not known.</exception>
        </member>
        <member name="T:Reporting.Ingestion.Messaging.SystemCommandReportingIngestionSubscriber">
            <summary>
            Class provides subscriber functionality for the system-command event.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.SystemCommandReportingIngestionSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="domainService">The domain service.</param>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.SystemCommandReportingIngestionSubscriber.ProcessLocalCommands(System.String,TaxHub.Common.EventStore.DomainEventData,System.Boolean@)">
            <summary>
            Method processes local commands known to particular service.
            </summary>
            <param name="commandName">The command name. This is different from the eventName.</param>
            <param name="eventData">The event data.</param>
            <param name="knownCommand">Method must return boolean indicator whether command is known as a local command.</param>
            <returns>
            Returns boolean value if event has been successfully consumed (handled).
            </returns>
            <remarks>
            IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.
            </remarks>
        </member>
        <member name="T:Reporting.Ingestion.Messaging.TaxServiceReplayFailedToConsumeMessageSubscriber">
            <summary>
            Class provides subscriber functionality for the replay failed to consume events.
            </summary>    
        </member>
        <member name="F:Reporting.Ingestion.Messaging.TaxServiceReplayFailedToConsumeMessageSubscriber.EventName">
            <summary>
            event name
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.TaxServiceReplayFailedToConsumeMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Messaging.IMessageHub,Reporting.Ingestion.Application.IFailedToConsumeReplayService)">
            <summary>
            Constructor for this class
            </summary>
            <param name="logger">A logger</param>
            <param name="messageHub">A message hub</param>
            <param name="failedToConsumeReplayService">The failed to consume replay service</param>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.TaxServiceReplayFailedToConsumeMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,Reporting.Ingestion.Events.ReplayFailedToConsumeEvent)">
            <summary>
            Method consumes the event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventData">The event data.</param>
            <param name="details">The typed data</param>
            <returns>Returns boolean value if event has been consumed (handled).</returns>
            <remarks>IMPORTANT NOTE: if subscriber is not interested in the event, it returns true to avoid misleading the message queue internal logic.</remarks>
        </member>
        <member name="T:Reporting.Ingestion.Messaging.TaxValidateCollectionEventsMessageSubscriber">
            <summary>
            Tax Validate
            </summary>
            <seealso cref="T:Reporting.Ingestion.Events.TaxValidateCollectionEvents" />
        </member>
        <member name="M:Reporting.Ingestion.Messaging.TaxValidateCollectionEventsMessageSubscriber.#ctor(TaxHub.Common.Logging.IAppLogger,Reporting.Ingestion.Application.IEventValidatorService)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.Messaging.TaxValidateCollectionEventsMessageSubscriber"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="eventValidatorService">The service to validate events.</param>
        </member>
        <member name="M:Reporting.Ingestion.Messaging.TaxValidateCollectionEventsMessageSubscriber.ConsumeEvent(System.String,TaxHub.Common.EventStore.DomainEventData,Reporting.Ingestion.Events.TaxValidateCollectionEvents)">
            <summary>
            Consumes the event.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="eventData">The event data.</param>
            <param name="details">The details.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:Reporting.Ingestion.ApplyEventFilter">
            <summary>
            Filter for apply events.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.ApplyEventFilter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Reporting.Ingestion.ApplyEventFilter" /> class.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="schemaVersion">The schema version.</param>
        </member>
        <member name="P:Reporting.Ingestion.ApplyEventFilter.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
            <value>
            The name of the event.
            </value>
        </member>
        <member name="P:Reporting.Ingestion.ApplyEventFilter.MinimumSchemaVersion">
            <summary>
            Gets or sets the minimum event schema version.
            </summary>
            <value>
            The maximum event schema version.
            </value>
        </member>
        <member name="T:Reporting.Ingestion.ApplyEventFilterCollection">
            <summary>
            Dictionary of ApplyEventFilter and MethodInfo to invoke
            </summary>
            <seealso cref="T:System.Collections.Generic.Dictionary`2" />
        </member>
        <member name="M:Reporting.Ingestion.ApplyEventFilterCollection.FindMethod(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Finds the method.
            </summary>
            <param name="eventData">The event data.</param>
            <returns>
            Method that satisfies the condition of event name and schema version.
            </returns>
        </member>
        <member name="T:Reporting.Ingestion.ObjectExtensions">
            <summary>
            GuidExtensions
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.ObjectExtensions.ObjectToString(System.Object)">
            <summary>
            ObjectToString
            </summary>
            <param name="item">item</param>
            <returns>string</returns>
        </member>
        <member name="M:Reporting.Ingestion.ObjectExtensions.ToGuid(System.Object)">
            <summary>
            ObjectToGuid
            </summary>
            <param name="item">item</param>
            <returns>Guid</returns>
        </member>
        <member name="M:Reporting.Ingestion.ObjectExtensions.ToGuid(System.Guid)">
            <summary>
            To the unique identifier.
            </summary>
            <param name="item">The item.</param>
            <returns>Same Guid item</returns>
        </member>
        <member name="M:Reporting.Ingestion.ObjectExtensions.ObjectToDateTime(System.Object)">
            <summary>
            ObjectToDateTime
            </summary>
            <param name="item">item</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Reporting.Ingestion.ObjectExtensions.ObjectToDecimal(System.Object)">
            <summary>
            ObjectToDecimal
            </summary>
            <param name="item">item</param>
            <returns>decimal</returns>
        </member>
        <member name="M:Reporting.Ingestion.ObjectExtensions.ObjectToInteger(System.Object)">
            <summary>
            ObjectToInteger
            </summary>
            <param name="item">item</param>
            <returns>int</returns>
        </member>
        <member name="T:Reporting.Ingestion.ReportingIngestionStartup">
            <summary>
            Class provides integration between Reporting Ingestion and app host.
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.ReportingIngestionStartup.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Reporting.Ingestion.ReportingIngestionStartup.ConfigurationFileName">
            <summary>
            Gets the name of the configuration file.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.ReportingIngestionStartup.InitializeUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initialize the Unity container
            </summary>
            <param name="container">Unity Container</param>
        </member>
        <member name="M:Reporting.Ingestion.ReportingIngestionStartup.InitializeMessageSubscribers(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initialize Message Subscribers
            </summary>
            <param name="container">Unity Container</param>
        </member>
        <member name="M:Reporting.Ingestion.ReportingIngestionStartup.StartInternalServices(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Starts services
            </summary>
            <param name="container">Unity Container</param>
        </member>
        <member name="M:Reporting.Ingestion.ReportingIngestionStartup.StartInternalServicesAsync(Microsoft.Practices.Unity.IUnityContainer,System.Threading.CancellationToken)">
            <summary>
            Called by App Host to asynchronously start internal services for the application.
            </summary>
            <remarks>Only StartInternalServices or StartInternalServicesAsync method should actually do the work, not both.</remarks>
            <param name="container">The Unity Container</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns async task.</returns>
        </member>
        <member name="M:Reporting.Ingestion.ReportingIngestionStartup.GetApiEndpointsScope">
            <summary>
            Gets API Endpoint
            </summary>
            <returns>Api endpoint</returns>
        </member>
        <member name="M:Reporting.Ingestion.ReportingIngestionStartup.StopApplication(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Stops the application 
            </summary>
            <param name="container">Unity Container</param>
        </member>
        <member name="T:Reporting.Ingestion.ReportingIngestionMigratorStartup">
            <summary>
            ReportingIngestionMigratorStartup
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.ReportingIngestionMigratorStartup.Init(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Init
            </summary>
            <param name="container">container</param>
        </member>
        <member name="T:Reporting.Ingestion.ReportingIngestionStartupBase">
            <summary>
            Class provides integration between Reporting Ingestion and App host.
            </summary>
        </member>
        <member name="M:Reporting.Ingestion.ReportingIngestionStartupBase.InitializeUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initialize the Unity container
            </summary>
            <param name="container">Unity Container</param>
        </member>
        <member name="M:Reporting.Ingestion.ReportingIngestionStartupBase.ResolveUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Method resolves essential types at the unity container.
            </summary>
            <param name="container">Unity container.</param>
        </member>
        <member name="M:Reporting.Ingestion.ReportingIngestionStartupBase.InitializeEventStoreUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Overrides the default event store unity initialization
            </summary>
            <param name="container">The unity container</param>
        </member>
    </members>
</doc>
