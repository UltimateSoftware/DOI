<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaxHub.Common</name>
    </assembly>
    <members>
        <member name="M:TaxHub.Common.BaseInfrastructureSetup.InitializeUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Method initializes Unity container with necessary ConfigStore related registrations.
            </summary>
            <param name="container">The unity container.</param>
        </member>
        <member name="M:TaxHub.Common.BaseInfrastructureSetup.ReadOnlyOverride(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.String)">
            <summary>
            Used to resolve services wrapped in IReadOnlyObject.
            Dependencies on IDatabaseConnectivityProvider will be overridden with ReadOnlyDbConnectivityProvider.
            </summary>
            <param name="container">The Unity Container.</param>
            <param name="typeToResult">The return type.</param>
            <param name="name">The name of the resolved type.</param>
            <returns>Returns an instance of type, typeToResult.</returns>
        </member>
        <member name="M:TaxHub.Common.BaseInfrastructureSetup.InitializeBaseInfrastructure(Microsoft.Practices.Unity.IUnityContainer,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Initialize base infrastructure components
            </summary>
            <param name="container">The unity container.</param>
            <param name="requiredConfigFiles">required config files</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.Common.BaseInfrastructureSetup.InitializeConfigurationForUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Registers all configuration objects as named instances.
            </summary>
            <param name="container">The <seealso cref="T:Microsoft.Practices.Unity.IUnityContainer"/> instance to use for registration.</param>
        </member>
        <member name="P:TaxHub.Common.ConfigStore.ConfigSection.Id">
            <summary>
            Gets or sets an identifier for the config section.
            </summary>
        </member>
        <member name="P:TaxHub.Common.ConfigStore.ConfigSection.SectionAlias">
            <summary>
            Gets or sets the section alias.
            </summary>
        </member>
        <member name="P:TaxHub.Common.ConfigStore.ConfigSection.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
        </member>
        <member name="M:TaxHub.Common.ConfigStore.ConfigSection.Merge(TaxHub.Common.ConfigStore.ConfigSection)">
            <summary>
            Merges settings from another section into settings in this class.
            </summary>
            <remarks>Method will raise an exception if duplicate key appears in the dictionary.</remarks>
            <param name="section">The section to merge.</param>
            <returns>Returns merged section.</returns>
        </member>
        <member name="P:TaxHub.Common.ConfigStore.ConfigSettings.Metadata">
            <summary>
            Gets or sets special metadata used by the settings dictionary.
            </summary>
        </member>
        <member name="M:TaxHub.Common.ConfigStore.ConfigSettings.Add(System.String,System.String)">
            <summary>
            Add a settings.
            </summary>
            <param name="key">The setting key.</param>
            <param name="value">The setting value.</param>
        </member>
        <member name="M:TaxHub.Common.ConfigStore.ConfigSettings.AddProtected(System.String,System.String)">
            <summary>
            Add a settings with protected (encrypted) storage.
            </summary>
            <param name="key">The setting key.</param>
            <param name="value">The setting value.</param>
        </member>
        <member name="M:TaxHub.Common.ConfigStore.ConfigSettings.AsDictionary">
            <summary>
            Returns this settings as a dictionary.
            </summary>
            <returns>Returns an instance of Dictionary.</returns>
        </member>
        <member name="M:TaxHub.Common.ConfigStore.ConfigSettings.GetUnprotectedOnly">
            <summary>
            Returns only unprotected settings.
            </summary>
            <returns>Returns an instance of Dictionary.</returns>
        </member>
        <member name="T:TaxHub.Common.Configuration.DataCenter">
            <summary>
            Supported Data Centers
            </summary>
        </member>
        <member name="T:TaxHub.Common.Configuration.DataCenterMapper">
            <summary>
            This mapper/translator provides one place for mapping to values that vary based on the datacenter.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataCenterMapper.ToDedSubscriberId(TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Mapping DataCenter to a DED subscriber Id for that Datacenter.
            </summary>
            <param name="dataCenter">The data center.</param>
            <returns>The subscriber Id name.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataCenterMapper.ToDedEmployeeSubscriptionId(TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Mapping DataCenter to a DED employee subscription Id for that Datacenter.
            </summary>
            <param name="dataCenter">The data center.</param>
            <returns> The Employee subscription Id name. </returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataCenterMapper.ToDedStatInfoSubscriptionId(TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Mapping DataCenter to a DED statinfo subscription Id  for that Datacenter.
            </summary>
            <param name="dataCenter">The data center.</param>
            <returns> The StatInfo subscription Id name. </returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataCenterMapper.ToDataCenter(System.String)">
            <summary>
            Mapping datacenter string to DataCenter enum.
            </summary>
            <param name="dataCenter">The data center.</param>
            <returns> The DataCenter enum. </returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataCenterMapper.ToHttpServiceKnownName(TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Mapping DataCenter to the known http service name.
            </summary>
            <param name="dataCenter">The data center.</param>
            <returns>Http service known name.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataCenterMapper.ToCredentialsResourceName(TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Mapping DataCenter to credentials resource json file name.
            </summary>
            <param name="dataCenter">The data center.</param>
            <returns>the credentials resource file name.</returns>
        </member>
        <member name="T:TaxHub.Common.Configuration.DataSyncMetadata">
            <summary>
            Class represents the data sync metadata.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.DataSyncMetadata.Id">
            <summary>
            Gets or sets the data sync identity.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.DataSyncMetadata.PodId">
            <summary>
            Gets or sets the Pod identity that DataSync instance is responsible for.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.DataSyncMetadata.IsActive">
            <summary>
            Gets or sets a boolean indicator whether the data sync is currently active.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Configuration.DataSyncId">
            <summary>
            Class represents Data Sync identity.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.DataSyncId.DcEnvironmentName">
            <summary>
            Gets or sets the datacenter environment name
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.DataSyncId.ShardName">
            <summary>
            Gets or sets the shard name within the datacenter environment.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Configuration.DataSyncMetadataService">
            <summary>
            The class providing service for the DataSyncMetadata.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataSyncMetadataService.#ctor(TaxHub.Common.Configuration.IDataSyncMetadataRepository)">
            <summary>
            Constructor that accepts DataSync metadata repository.
            </summary>
            <param name="repository">The repository to use.</param>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataSyncMetadataService.FindAll">
            <summary>
            Methods returns the list of DataSync metadata objects.
            </summary>
            <returns>Returns the IEnumerable of DataSyncMetadata objects.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataSyncMetadataService.FindOne(TaxHub.Common.Configuration.DataSyncId)">
            <summary>
            Methods returns single data sync metadata object.
            </summary>
            <param name="id">The DataSync identity (datacenter environment name and the shard name within the datacenter environment).</param>
            <returns>Returns the DataSyncMetadata object.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataSyncMetadataService.FindOne(System.String,System.String)">
            <summary>
            Methods returns single data sync metadata object.
            </summary>
            <param name="dcEnvironmentName">The datacenter environment name</param>
            <param name="shardName">The shard name within the datacenter environment.</param>
            <returns>Returns the DataSyncMetadata object.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataSyncMetadataService.Count">
            <summary>
            Method provides the total count of DataSync metadata objects.
            </summary>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataSyncMetadataService.Find(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method retrieves DataSync metadata objects for specific data center environment and POD.
            </summary>
            <param name="dcEnvironmentName">The data center environment name.</param>
            <param name="podId">The POD id (name).</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of <see cref="T:TaxHub.Common.Configuration.DataSyncMetadata"/> objects.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataSyncMetadataService.Save(TaxHub.Common.Configuration.DataSyncMetadata)">
            <summary>
            Method saves DataSync metadata to the store.
            </summary>
            <param name="item">The item to save.</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.DataSyncMetadataService.Save(System.Collections.Generic.IEnumerable{TaxHub.Common.Configuration.DataSyncMetadata})">
            <summary>
            Method saves DataSync metadata objects to the store.
            </summary>
            <param name="items">The item to save.</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.EFilingConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Configuration.EFilingConfiguration"/> class.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.EFilingConfiguration.IAFSETReceiveAcknowledgmentsBinding">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.EFilingConfiguration.IAFSETSubmitFilesBinding">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.EFilingConfiguration.IAFSETProcessType">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.EFilingConfiguration.IA2AApplicationSystemId">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.EFilingConfiguration.IA2AETIN">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.EFilingConfiguration.IA2ATestType">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.EFilingConfiguration.MaximumConcurrentEFilingRequests">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.Configuration.EFilingConfiguration.ConfigurationRefreshed(TaxHub.Configuration.IConfigSection)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.Configuration.HttpServiceConfiguration.#ctor">
            <summary>
                Constructs a http service configuration object.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Configuration.HttpServiceLocator">
            <summary>
            Class provides service discovery for remote services.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Configuration.HttpServiceLocator.ClearServiceCache">
            <summary>
            Clears the cache of the list of services.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Configuration.HttpServiceLocator.#ctor(TaxHub.Common.Configuration.IHttpServiceConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="httpServiceConfiguration">HTTP Service configuration object.</param>
        </member>
        <member name="M:TaxHub.Common.Configuration.HttpServiceLocator.FindService(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.Configuration.HttpServiceLocator.FindServiceUrl(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.Configuration.HttpServiceLocator.LookupServiceUrl(System.String)">
            <summary>
            Method provides discovery for given service name.
            </summary>
            <param name="serviceName">Service name. Use <see cref="T:TaxHub.Common.Configuration.HttpServiceKnownNames"/> for known names.</param>
            <returns>the Uri for the service.</returns>
        </member>
        <member name="P:TaxHub.Common.Configuration.WellKnownNameAttributeBase.Value">
            <summary>
            The Well Known Key
            </summary>
        </member>
        <member name="T:TaxHub.Common.Configuration.IModernUiConfiguration">
            <summary>
            This interface provides access to new UI configuration settings.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IModernUiConfiguration.ModernUiLoaderUrl">
            <summary>
            Gets the filing URL.
            </summary>
            <value>
            The filing URL.
            </value>
        </member>
        <member name="T:TaxHub.Common.Configuration.IEFilingConfiguration">
            <summary>
            This interfact provides access to EFiling configuration settings.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IEFilingConfiguration.IAFSETReceiveAcknowledgmentsBinding">
            <summary>
            The Binding configuration to be used with the IA FSET Acknowledgment Service.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IEFilingConfiguration.IAFSETSubmitFilesBinding">
            <summary>
            The Binding configuration to be used with the IA FSET File Submission Service.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IEFilingConfiguration.IAFSETProcessType">
            <summary>
            The Process Type to specify in the IA FSET submission file.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IEFilingConfiguration.IA2AApplicationSystemId">
            <summary>
            The Application System Id used to log into the IRS Transmission Service
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IEFilingConfiguration.IA2AETIN">
            <summary>
            The ETIN used to log into the IRS Transmission Service
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IEFilingConfiguration.IA2ATestType">
            <summary>
            The TestType used to log into the IRS Transmission Service
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IEFilingConfiguration.MaximumConcurrentEFilingRequests">
            <summary>
            The maximum amount of requests handled concurrently.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Configuration.IFeatureToggleConfiguration">
            <summary>
            Implementers provide access to a security settings object
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.TaxCollections">
            <summary>
            Gets the tax collection feature toggle
            </summary>
            <remarks>If true, the feature is enabled.</remarks>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.TransmitToUdes">
            <summary>
            Gets the Transmit To UDES feature Toggle
            </summary>
            <remarks>If true, tranmission to UDES is enabled.</remarks>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.IsAuthenticationEnabled">
            <summary>
            Gets the boolean indicator whether authentication is enabled.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.IsIdentityVersionV2Enabled">
            <summary>
            Gets boolean indicator whether v2 is enabled.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.ImportPayrollSplitPrepay">
            <summary>
            Get the boolean indicador whether the import payroll screen will allow the split prepay functionality
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.AreEntitlementsEnabled">
            <summary>
            Gets a value indicating whether entitlements are turned on.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableUserManagement">
            <summary>
            Defines whether the User Management features using Identity, will the be available
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.MigrateV2Users">
            <summary>
            Defines whether AlwaysRun7MigratingUteAccountsToSsp will be used or not
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UseImportPayrollReverseLiability">
            <summary>
            Feature Toggle related to ULTI-247172: Ability to Hide/Show 'Reverse Libility' button on PTM
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.QeProcessingEnabled">
            <summary>
            Feature Toggle related to ULTI-229762: Ability to Enable/Disable the consume of QE processing requested events
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableQeVarianceHandling">
            <summary>
            Feature Toggle related to epic ULTI-250769 Provide ability to process cash transactions for QE processing
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UseQeBankingUpdates">
            <summary>
            Feature Toggle related to epic ULTI-254523 Phase 2: Provide ability to process cash transactions for QE processing
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UseRefactoredApiEndpoints">
            <summary>
            Feature Toggle related to tech story ULTI-255260, API endpoint refactoring
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.QeReturnTracking">
            <summary>
            Feature Toggle that enables functionality needed for QE
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableUteVoidProcessing">
            <summary>
            Feature Toggle that enables Void Processing in UTE
            Related to all stories in TAXF-158
            ULTI-258540: Ability to void an EFT
            ULTI-256124: Void EFT / Check affects payment
            ULTI-258600: Bank transaction updated after voiding
            ULTI-260794: Create refund before payment is paid
            ULTI-257007: Void Bulk EFT/ Check affects child records
            ULTI-258599: Ledger updates after voiding an EFT file
            ULTI-256154: Functionality needed for the voiding of eft and check files in UTE
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.IsBalanceOnlyReportOnlyEnabled">
            <summary>
            Feature Toggle related to epic ULTI-234071 to enable balance only and report only tax processing
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.IsAutomaticPayrollCombineEnabled">
            <summary>
            Feature Toggle related to story ULTI-264468 to enable the automatic trigger of the payroll import combine process
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UseParentChildClientSetup">
            <summary>
            Allows use of parent child relationship of primary fein. ULTI-272329
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UsePeriodicImportValidation">
            <summary>
            Feature Toggle related to epic TAXF-22 Periodic Import Validations.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UsePSDocPrint">
            <summary>
            Feature Toggle related to Print Services Document Printing.
            Related to:
            ULTI-268711: Create UI for Print Files
            ULTI-268715: Add data to tables and save PDFs when Generate is selected on Check Printing Screen
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UseEfileSubmission">
            <summary>
            Feature Toggle related to EfileSubmission Page Filing > Efiling > EfileSubmission.
            Related to:
            TaxF-269 Support A2A Transmission method
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableWireFedeft">
            <summary>
            Feature Toggle related to updating FEDEFT transaction type from EFT to Wire and the consequences of this action
            Related to:
            ULTI-267524
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.ClientParentChildSetupHasPayrollsValidation">
            <summary>
            Feature Toggle to turn on payroll validations on common pay multifeiin setup .
            Related to:
            Jira ULTI-287555
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.ConsolidatedStateAch">
            <summary>
            Consolidate all State EFT payments (excluding Bulk EFTs) with the same settle date into a single ACH File
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnablePenaltyAndInterestFeature">
            <summary>
            Feature Toggle related to Penalty and Interest feature.
            Related to:
            ULTI-288070: New page to enter P and I - Part I UI Only
            ULTI-289846: New page to enter P and I - Part II Infrastructure
            ULTI-288089: List of P and I Entries
            ULTI-289866: P and I paid by USG, create corp tenant part I pre-base setup
            ULTI-289867: P and I paid by USG, create corp tenant part II base setup
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UploadRtsFileEnabled">
            <summary>
            Feature toggle to turn on Upload Rts File
            Related to:
            Jira ULTI-293601
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.PreFetchQvr">
            <summary>
            Feature toggle for QVR generation on ledger closed.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.Calculate941withTaxCodes">
            <summary>
            Feature toggle for calculating 941 model based on UteTaxCode vs Tax ID
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UseScheduleRFormFed941Efile">
            <summary>
            Feature toggle for generating the Schedule R form for the Fed941 form
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.YEProcessingEnabled">
            <summary>
            Feature toggle to turn on year end processing.
            Related to:
            Jira ULTI-308616
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UseGenerateDepositSchedule">
            <summary>
            Feature toggle for generating the DepositSchedule
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.AllowDuplicatedQEEmployeeRows">
            <summary>
            Feature toggle for allowing to have multiple rows in the Import_QE_Employee and Import_QE_EEMISC having the same SSN and TaxCode
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.HandleZeroSsnInRts">
            <summary>
            Feature toggle for handling the 0 SSN numbers in RTS processing.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableFed940EFilingTransmission">
            <summary>
            Feature toggle for A2A 940 Transmission.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.ClientParentChildQeProcessingGateValidation">
            <summary>
            Feature toggle for whether gates will be enforced in the QE process for MF/CP clients.
            Related to:
            ULTI-360411: Moving MF/CP Forward through QE Phases
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UltiProTaxCodeMappingConfiguration">
            <summary>
            Feature toggle to determine if we use the old mapping cache, the new service, or the old mapping cache with
            the new service running in the background for testing differences
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.PostQeAndCloseLedgerPagesModifyEnabled">
            <summary>
            Feature toggle for whether Post QE and Close Ledger modify buttons show up.
            Related to:
            ULTI-366454: Unlock Ability to Edit Post QE and Close Ledger
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.IsNotificationsServiceEnabled">
            <summary>
            Feature toggle for enabling notifications via OPP Notifications-as-a-Service API
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.AutoDetectChangesEnabledInPeriodicTaxInstanceRepository">
            <summary>
            Feature toggle for setting the Configuration.AutoDetectChangesEnabled flag of an Entity Framework Context object.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UseCustomFilingProcessor">
            <summary>
            Feature toggle to use new custom filing processor instead of legacy filing system
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UseCoreCredits">
            <summary>
            Feature toggle used to enable/disable credit processing from Legacy to UTE Core
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.UseUserSecurityInfoAsyncLocalStore">
            <summary>
            Feature toggle to control if we use the async local to store and keep the user description for the audits to use it
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableAutoVoidInactiveClientQeProcess">
            <summary>
            Feature toggle to allow automatically voiding the import_qe records and pushing client to phase 0 when posting
            non-active client
            Related:
            ULTI-363940: QE Data is Posting for Clients with an Inactive or Setup Status
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnablePriorQuarterQrfProcessing">
            <summary>
            Feature toggle to enable amendments processing
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableHistoricalPriorQuarterQrfProcessing">
            <summary>
            Feature toggle to enable amendments historical processing
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableUteEmployeePriorQuarterQrfProcessing">
            <summary>
            Feature toggle to enable amendments Ute employee processing
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableHistoricalEmployeePriorQuarterQrfProcessing">
            <summary>
            Feature toggle to enable amendments historical employee processing
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableQeCustomerPackageV2">
            <summary>
            Toggle to enable the new customer package functionality
            </summary>
            Related:
            ULTI-389450: Feature Toggle CustomerPackageV2
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableSuiRateIntegrationSetup">
            <summary>
            Toggle to enable SUI rate integration updates for customers to Ulti-Pro
            </summary>
            Related:
            ULTI-388686: Add "SUI Rate Integration" field to Customer UI and Tenant Table
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableUltimateCredits">
            <summary>
            Toggle to enable advance credits features that were not possible in the old credit application flow.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableCreditRequestFallback">
            <summary>
            Toggle to enable during the credit application step the creation of fallback credit request.
            We will use this toggle as a configuration in case the fallback enters in an infinite loop in order to be able to control it and avoid to many failed events.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableYeQrfToCsvIngestion">
            <summary>
            Toggle to enable 
            </summary>
            Related:
            ULTI-370787: Parse 611 Records for QRF Ingestion
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.ShowNewExportEftScreenFilters">
            <summary>
            Toggle to enable seing new filters on Export EFT screen
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableTransactionalOutbox">
            <summary>
            Toggle to enable transactional outbox.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableModernFilingUi">
            <summary>
            Gets a value indicating whether to show modern filing UI or not.
            </summary>
            <value>
              <c>true</c> to show modern filing UI in the PTM website; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableNewClientAgencyValidations">
            <summary>
            Toggle to enable New ClientAgency Validations
            </summary>
            Related:
            ULTI-354830: Agency UI and Validation Changes
        </member>
        <member name="P:TaxHub.Common.Configuration.IFeatureToggleConfiguration.EnableTenantUsgAccountSync">
            <summary>
            Toggle to enable Tenant Usg Account Sync
            </summary>
        </member>
        <member name="T:TaxHub.Common.Configuration.FeatureToggleConfiguration">
            <summary>
            An object to help retrieve and update security settings
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnableAutoVoidInactiveClientQeProcess">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnablePriorQuarterQrfProcessing">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnableHistoricalPriorQuarterQrfProcessing">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnableUteEmployeePriorQuarterQrfProcessing">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnableHistoricalEmployeePriorQuarterQrfProcessing">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnableQeCustomerPackageV2">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnableSuiRateIntegrationSetup">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnableCreditRequestFallback">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnableUltimateCredits">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnableYeQrfToCsvIngestion">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnableTransactionalOutbox">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnableNewClientAgencyValidations">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.FeatureToggleConfiguration.EnableTenantUsgAccountSync">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.Common.Configuration.HttpServiceKnownNames">
            <summary>
            This class encapsulates the list of known HTTP service names.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataRepository.FindAll(System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of DataSync metadata objects.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of DataSyncMetadata objects.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataRepository.FindOne(TaxHub.Common.Configuration.DataSyncId,System.Threading.CancellationToken)">
            <summary>
            Methods returns single data sync metadata object.
            </summary>
            <param name="id">The DataSync identity (datacenter environment name and the shard name within the datacenter environment).</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the DataSyncMetadata object.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataRepository.FindOne(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Methods returns single data sync metadata object.
            </summary>
            <param name="dcEnvironmentName">The datacenter environment name</param>
            <param name="shardName">The shard name within the datacenter environment.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the DataSyncMetadata object.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataRepository.Find(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method retrieves DataSync metadata objects for specific data center environment and POD.
            </summary>
            <param name="dcEnvironmentName">The data center environment name.</param>
            <param name="podId">The POD id (name).</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of <see cref="T:TaxHub.Common.Configuration.DataSyncMetadata"/> objects.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataRepository.FindIds(System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method retrieves DataSyncId objects for specific data center environment and POD.
            </summary>
            <param name="dcEnvironmentName">The data center environment name.</param>
            <param name="podId">The POD id (name).</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns the IEnumerable of <see cref="T:TaxHub.Common.Configuration.DataSyncId" /> objects.
            </returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataRepository.Count(System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of DataSync metadata objects.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataRepository.Save(TaxHub.Common.Configuration.DataSyncMetadata,System.Threading.CancellationToken)">
            <summary>
            Method saves DatSync metadat to the store.
            </summary>
            <param name="item">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataRepository.Save(System.Collections.Generic.IEnumerable{TaxHub.Common.Configuration.DataSyncMetadata},System.Threading.CancellationToken)">
            <summary>
            Method saves DataSync metadata objects to the store.
            </summary>
            <param name="items">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataService.FindAll">
            <summary>
            Methods returns the list of DataSync metadata objects.
            </summary>
            <returns>Returns the IEnumerable of DataSyncMetadata objects.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataService.FindOne(TaxHub.Common.Configuration.DataSyncId)">
            <summary>
            Methods returns single data sync metadata object. 
            </summary>
            <param name="id">The DataSync identity (datacenter environment name and the shard name within the datacenter environment).</param>
            <returns>Returns the DataSyncMetadata object.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataService.FindOne(System.String,System.String)">
            <summary>
            Methods returns single data sync metadata object. 
            </summary>
            <param name="dcEnvironmentName">The datacenter environment name</param>
            <param name="shardName">The shard name within the datacenter environment.</param>
            <returns>Returns the DataSyncMetadata object.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataService.Find(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Method retrieves DataSync metadata objects for specific data center environment and POD.
            </summary>
            <param name="dcEnvironmentName">The data center environment name.</param>
            <param name="podId">The POD id (name).</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of <see cref="T:TaxHub.Common.Configuration.DataSyncMetadata"/> objects.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataService.FindIds(System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method retrieves DataSyncId objects for specific data center environment and POD.
            </summary>
            <param name="dcEnvironmentName">The data center environment name.</param>
            <param name="podId">The POD id (name).</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns the IEnumerable of <see cref="T:TaxHub.Common.Configuration.DataSyncId" /> objects.
            </returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataService.Count">
            <summary>
            Method provides the total count of DataSync metadata objects.
            </summary>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataService.Save(TaxHub.Common.Configuration.DataSyncMetadata)">
            <summary>
            Method saves DataSync metadata to the store.
            </summary>
            <param name="item">The item to save.</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IDataSyncMetadataService.Save(System.Collections.Generic.IEnumerable{TaxHub.Common.Configuration.DataSyncMetadata})">
            <summary>
            Method saves DataSync metadata objects to the store.
            </summary>
            <param name="items">The item to save.</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.PaymentApiService">
            <summary>
            The URL for the Payment API Service
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.DedApiAtlService">
            <summary>
            The URL for the Ded API ATL Service
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.DedApiMiaService">
            <summary>
            The URL for the Ded API MIA Service
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.DedApiPhxService">
            <summary>
            The URL for the Ded API PHX Service
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.ObjectStoreService">
            <summary>
            The URL for the Object Store Service
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.SwiftStackAuthService">
            <summary>
            The URL for the Swift Stack Auth Service
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.TaxCoreApiService">
            <summary>
            The URL for the Tax Core API Service
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.UdesService">
            <summary>
            The URL for the UDES Service
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.TenantAliasMappingApiService">
            <summary>
            The URL for the tenant alias mapping API Service
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.PtmApiService">
            <summary> 
            The URL for the Ptm API service. This service was implemented as part of the story ULTI-264468 (combine payroll process automation) 
            </summary> 
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.MigrationCoreApiService">
            <summary>
            The migration core API service.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.PdfFormsGenerationService">
            <summary>
            The pdf forms service.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.ReportServerPath">
            <summary>
            The SSRS service path.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IHttpServiceConfiguration.PackageGenerationApiService">
            <summary>
            The ppackage generation service path.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Configuration.IHttpServiceLocator">
            <summary>
            Class provides service discovery for remote services.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Configuration.IHttpServiceLocator.FindService(System.String)">
            <summary>
            Method provides discovery for given service name.
            </summary>
            <param name="serviceName">Service name. Use <see cref="T:TaxHub.Common.Configuration.HttpServiceKnownNames"/> for known names.</param>
            <returns>Returns Uri containing URL or an null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.Configuration.IHttpServiceLocator.FindServiceUrl(System.String)">
            <summary>
            Method provides discovery for given service name.
            </summary>
            <param name="serviceName">Service name. Use <see cref="T:TaxHub.Common.Configuration.HttpServiceKnownNames"/> for known names.</param>
            <returns>Returns string containing URL or an empty string if not found.</returns>
        </member>
        <member name="T:TaxHub.Common.Configuration.IPdfServiceConfiguration">
            <summary>
            Configuration used to toggle Pdf operation iTextSharp and PDF Forms Engine
            </summary>
            <inheritdoc cref="T:TaxHub.Configuration.IConfigSection"/>
        </member>
        <member name="P:TaxHub.Common.Configuration.IPdfServiceConfiguration.PdfOperations">
            <summary>
            The type to handle pdf merging
            </summary>
        </member>
        <member name="T:TaxHub.Common.Configuration.IQvrServiceConfiguration">
            <summary>
            Configuration used for the QVR Service.
            </summary>
            <inheritdoc cref="T:TaxHub.Configuration.IConfigSection"/>
        </member>
        <member name="P:TaxHub.Common.Configuration.IQvrServiceConfiguration.QvrRequestExpirationTimeInMinutes">
            <summary>
            The time in minutes to determine when a QVR Request in an active status is considered expired.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Configuration.IReportServiceConfiguration">
            <summary>
            The SSRS configurations
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IReportServiceConfiguration.LocalReportServer">
            <summary>
            Boolean to determine if the SSRS server is running locally
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IReportServiceConfiguration.LegacyPtmSsrs">
            <summary>
            Report Server Url
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.IReportServiceConfiguration.SsrsReportPath">
            <summary>
            Path to find SSRS reports
            </summary>
        </member>
        <member name="T:TaxHub.Common.Configuration.ISystemConfiguration">
            <summary>
            This interface provides access to encryption configuration settings.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.ISystemConfiguration.HttpClientTimeoutSec">
            <summary>
            Gets default HttpClient timeout used within the system, in seconds.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.ISystemConfiguration.HostName">
            <summary>
            Gets network Host Name for current instance.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.ISystemConfiguration.Ipv4Address">
            <summary>
            Gets network local IP address.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.ISystemConfiguration.IsProductionMode">
            <summary>
            Gets the boolean indicator whether application is running in production mode.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.ISystemConfiguration.ActiveDataCenters">
            <summary>
            Gets a list of active data centers.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.ISystemConfiguration.MaxNumberOfMessageDeliveryAttempts">
            <summary>
            Gets the maximum number of message delivery attempts before message is being considered poisonous. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.ISystemConfiguration.MaxMessageConsumerRetryTimeSec">
            <summary>
            Gets the maximum number of seconds to retry consuming a message queue.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.ISystemConfiguration.AllowedDomains">
            <summary>
            The domains accepted for CORS.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.ISystemConfiguration.UltiproToUteCacheRefreshInSecs">
            <summary>
            The UltiproToUteCache refresh time in seconds
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.ISystemConfiguration.UltiproToUteCacheTimeoutInSecs">
            <summary>
            The UltiproToUteCache initial load timeout time in seconds
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.ISystemConfiguration.QeRtsSlaThresholdInMiliseconds">
            <summary>
            The RTS Processing SLA threshold
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.MetricsConfiguration.Uri">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.MetricsConfiguration.Database">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.MetricsConfiguration.Enabled">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.MetricsConfiguration.ReportingEnabled">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.MetricsConfiguration.DefaultContextLabel">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.MetricsConfiguration.EnvironmentType">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.MetricsConfiguration.ReportingIntervalSec">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.Configuration.MetricsConfiguration.ConfigurationRefreshed(TaxHub.Configuration.IConfigSection)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.Common.Configuration.PdfServiceConfiguration">
            <summary>
            Pdf Service Configuration.
            </summary>
            <seealso cref="T:TaxHub.Configuration.IConfigSection"/>
            <seealso cref="T:TaxHub.Common.Configuration.IPdfServiceConfiguration"/>
        </member>
        <member name="P:TaxHub.Common.Configuration.PdfServiceConfiguration.PdfOperations">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.Common.Configuration.QvrServiceConfiguration">
            <summary>
            QVR Service Configuration.
            </summary>
            <seealso cref="T:TaxHub.Configuration.IConfigSection"/>
            <seealso cref="T:TaxHub.Common.Configuration.IQvrServiceConfiguration"/>
        </member>
        <member name="P:TaxHub.Common.Configuration.QvrServiceConfiguration.QvrRequestExpirationTimeInMinutes">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.Common.Configuration.ReportServiceConfiguration">
            <inheritdoc cref="T:TaxHub.Common.Configuration.IReportServiceConfiguration" />
        </member>
        <member name="P:TaxHub.Common.Configuration.ReportServiceConfiguration.LocalReportServer">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.Common.Configuration.ReportServiceConfiguration.LegacyPtmSsrs">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.ReportServiceConfiguration.SsrsReportPath">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.Common.Configuration.SystemConfiguration">
            <summary>
            This class provides access to system configuration settings.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.SystemConfiguration.Settings">
            <summary>
            Gets the system settings.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.SystemConfiguration.HttpClientTimeoutSec">
            <inheritdoc />
        </member>
        <member name="F:TaxHub.Common.Configuration.SystemConfiguration.isInitialized">
            <summary>
            Gets boolean indicator whether system configuration is initialized.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Configuration.SystemConfiguration.HostName">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.SystemConfiguration.Ipv4Address">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.SystemConfiguration.MaxNumberOfMessageDeliveryAttempts">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.SystemConfiguration.MaxMessageConsumerRetryTimeSec">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.SystemConfiguration.IsProductionMode">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.SystemConfiguration.AllowedDomains">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.SystemConfiguration.UltiproToUteCacheRefreshInSecs">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.SystemConfiguration.UltiproToUteCacheTimeoutInSecs">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.SystemConfiguration.QeRtsSlaThresholdInMiliseconds">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.Common.Configuration.SystemConfiguration.ActiveDataCenters">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.Configuration.SystemConfiguration.#ctor">
            <summary>
            Constructs a system configuration object.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Configuration.UltiProTaxCodeMappingConfiguration">
            <summary>
            Enum used by feature toggle to determine if we use the old mapping cache, the new service, or the old mapping cache with
            the new service running in the background for testing differences
            </summary>
        </member>
        <member name="F:TaxHub.Common.Configuration.UltiProTaxCodeMappingConfiguration.OldServiceOnly">
            <summary>
            Only the old service is running
            </summary>
        </member>
        <member name="F:TaxHub.Common.Configuration.UltiProTaxCodeMappingConfiguration.OldServiceWithNewServiceInBackground">
            <summary>
            The old service is still what's used for the mapping, but the new service is running for comparison purposes
            </summary>
        </member>
        <member name="F:TaxHub.Common.Configuration.UltiProTaxCodeMappingConfiguration.NewServiceOnly">
            <summary>
            The new service is used for the mapping and the old service is not running
            </summary>
        </member>
        <member name="T:TaxHub.Common.DataAccess.DuplicateKeyException">
            <summary>
            Class represents the duplicated key or unique index error in the application.
            </summary>
        </member>
        <member name="M:TaxHub.Common.DataAccess.DuplicateKeyException.SetFailedIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Populates the exceptions data with the failed ids passed in.
            </summary>
            <param name="ids">The ids that failed to insert.</param>
        </member>
        <member name="M:TaxHub.Common.DataAccess.DuplicateKeyException.GetFailedIds">
            <summary>
            Gets the enumerable of failed ids for this exception.
            </summary>
            <returns>An enumerable of guids or null if the ids were never set.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.IBulkOperations`2.BulkCreate(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Bulk create entities.
            </summary>
            <param name="items">The list of entities</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>BulkCreateResults</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.IBulkOperations`2.BulkUpdate(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Bulk update entities.
            </summary>
            <param name="entitiesBatch">The list of entities</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="changesTracked">Indicate to track changes if applicable</param>
            <returns>bool</returns>
        </member>
        <member name="T:TaxHub.Common.DataAccess.IReadOnlyObject`1">
            <summary>
            Used to wrap objects with dependencies to IDatabaseConnectivityProvider and make it read-only.
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="T:TaxHub.Common.DataAccess.ReadOnlyObject`1">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.DataAccess.ReportingSqlServerHealthCheck.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Constructor.
            </summary>
            <param name="databaseConnectivityProvider">The database settings to use.</param>
            <param name="appLogger">The application logger.</param>
        </member>
        <member name="M:TaxHub.Common.DataAccess.PtmSqlServerDbHealthCheck.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Constructor.
            </summary>
            <param name="databaseConnectivityProvider">The database settings to use.</param>
            <param name="appLogger">The application logger.</param>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbHealthCheck.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Constructor.
            </summary>
            <param name="databaseConnectivityProvider">The database settings to use.</param>
        </member>
        <member name="T:TaxHub.Common.DataAccess.ReadOnlyDbConnectivityProvider">
            <summary>
            Decarates the database connectivity provider to changes the application intent to readonly.
            </summary>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ReadOnlyDbConnectivityProvider.GetDatabaseConnectionString(TaxHub.Common.DataAccess.DatabaseKind)">
            <summary>
            Retrieves the connection string based on the databse kind and sets the intent to read-only.
            </summary>
            <param name="kind">Enumeration for the database kind that is defined by the application use purpose</param>
            <returns>The connection string.</returns>
            <seealso cref="T:TaxHub.Common.DataAccess.IDatabaseConnectivityProvider"/>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ReadOnlyDbConnectivityProvider.IsSql(TaxHub.Common.DataAccess.DatabaseKind)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.Common.DataAccess.SqlDataStore.OracleConnectionStringBuilder">
            <summary>
            Oracle Connection string builder class
            </summary>
            <seealso cref="T:TaxHub.Common.DataAccess.IConnectionStringBuilder" />
        </member>
        <member name="M:TaxHub.Common.DataAccess.SqlDataStore.OracleConnectionStringBuilder.#ctor(TaxHub.Common.Security.ICredentialsProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.DataAccess.SqlDataStore.OracleConnectionStringBuilder"/> class.
            </summary>
            <param name="credentialsProvider">The credentials provider.</param>
        </member>
        <member name="M:TaxHub.Common.DataAccess.SqlDataStore.IDbContextFactory.Create">
            <summary>
            Create DbContext
            </summary>
            <returns>new DbContext instance</returns>
        </member>
        <member name="T:TaxHub.Common.DataAccess.SqlDataStore.DbContextConfiguration">
            <summary>
            Configuration to be applied to DBContext in order to include Retry strategy:
            https://entityframework.codeplex.com/wikipage?title=Connection+Resiliency+Spec
            https://msdn.microsoft.com/en-us/data/jj680699.aspx
            </summary>
        </member>
        <member name="M:TaxHub.Common.DataAccess.SqlDataStore.RetrySqlQueryExecutionStrategy.ShouldRetryOn(System.Exception)">
            <summary>
            Retry sql queries for the following failures:
            timeout
            transport fail
            could not open connection
            <remarks>List of SqlErrors: https://msdn.microsoft.com/en-us/library/cc645611.aspx </remarks>
            </summary>
            <param name="exception">Exception raised by EF</param>
            <returns>return whether to retry or not a query</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.SqlDataStore.SqlServerSimpleRepository`2.BulkUpdate(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.DataAccess.SqlDataStore.SqlServerSimpleRepository`2.FindAllByIds(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.DataAccess.SqlDataStore.SqlServerSimpleRepository`2.ApplyToEach(System.Func{`0,System.Threading.Tasks.Task},TaxHub.Common.EventStore.IAggregateSnapshotFilter,System.Threading.CancellationToken)">
            <summary>
            Applies an action to each aggregate returned from the filters in filter params.
            </summary>
            <param name="action">The action to apply to each aggregate.</param>
            <param name="filters">The filters to find aggregates by.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.SqlDataStore.SqlServerSimpleRepository`2.Dispose">
            <summary>
            Method disposes any resources used by the class.
            </summary>
        </member>
        <member name="T:TaxHub.Common.DataAccess.MongoDbStore.MongoExplainResult">
            <summary>
            The explain results present the query plans as a tree of stages. Each stage passes its results (i.e. documents or index keys) to the parent node. The leaf nodes access the collection or the indices. The internal nodes manipulate the documents or the index keys that result from the child nodes. 
            The root node is the final stage from which MongoDB derives the result set.
            For more info go to https://docs.mongodb.com/manual/reference/explain-results />
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.MongoDbStore.MongoExplainResult.QueryPlanner">
            <summary>
            queryPlanner information details the plan selected by the query optimizer.
            </summary>
        </member>
        <member name="T:TaxHub.Common.DataAccess.MongoDbStore.QueryPlanner">
            <summary>
            Contains information on the selection of the query plan by the query optimizer.
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.MongoDbStore.QueryPlanner.WinningPlan">
            <summary>
            A document that details the plan selected by the query optimizer. 
            MongoDB presents the plan as a tree of stages; i.e. a stage can have an inputStage or, if the stage has multiple child stages, inputStages.
            </summary>
        </member>
        <member name="T:TaxHub.Common.DataAccess.MongoDbStore.PlanStage">
            <summary>
            Represents a query stage.
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.MongoDbStore.PlanStage.Stage">
            <summary>
            The stage name
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.MongoDbStore.PlanStage.InputStage">
            <summary>
            A document that describes the child stage, which provides the documents or index keys to its parent. 
            The field is present if the parent stage has only one child.
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.MongoDbStore.PlanStage.InputStages">
            <summary>
            A document that describes the child stage, which provides the documents or index keys to its parent. 
            The field is present if the parent stage has only one child.
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.MongoDbStore.PlanStage.IndexName">
            <summary>
            The index name
            </summary>
        </member>
        <member name="T:TaxHub.Common.DataAccess.MongoDbStore.IMongoDbRepositoryMaintenance">
            <summary>
            Interface implemented by a repository to provide direct access to underlying store in order to maintain it.
            </summary>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.IMongoDbRepositoryMaintenance.GetDatabase">
            <summary>
            Returns the database object for custom operations.
            </summary>
            <returns>Returns IMongoDatabase type object.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.IMongoDbRepositoryMaintenance.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes. 
            </summary>
            <param name="withDrop">If true enforces dropping the collection.</param>
            <remarks>This method is used by Data Seeder and tests. It must not be called from production code.</remarks>
            <returns>Returns Task.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.IMongoDbRepositoryMaintenance.PingDatabase">
            <summary>
            Method pings database to quickly determine whether it's operational.
            </summary>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="T:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2">
            <summary>
            The basic MongoDB repository providing standard tenant-based CRUD operations for a generic entity/aggregate.
            </summary>
            <typeparam name="TSource">The generic entity/aggregate type.</typeparam>
            <typeparam name="TMongoDbId">The generic type used as an identifier for the entity/aggregate. Usually a Guid, but can be another type.</typeparam>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.#ctor(TaxHub.Common.DataAccess.IRepositorySettings,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor.
            </summary>
            <param name="settings">The database settings to use.</param>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.FindAll(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds all aggregate instances for particular tenantId.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method finds all aggregate instances for particular tenantId, but returns only part of it based on page parameters (page number, size, sorting order).
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="pageParams">The page parameters object.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            Method finds all aggregate instances for particular tenantId, but returns only part of it based on page parameters (page number, size, sorting order)
            and additional query, if supplied.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="pageParams">The page parameters object.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.Count(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns the total count of aggregates for particular tenantId.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a long value.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.Count(System.Guid,MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            Method returns the total count of aggregates for particular tenantId and additional query, if supplied.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a long value.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.FindOne(System.Guid,`1,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on tenantId and aggregateId.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.Delete(System.Guid,`1,System.Threading.CancellationToken)">
            <summary>
            Method deletes a single aggregate instance based on tenantId and aggregateId.
            It will use WriteConcern W1 by default.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.Delete(System.Guid,`1,MongoDB.Driver.WriteConcern,System.Threading.CancellationToken)">
            <summary>
            Method deletes a single aggregate instance based on tenantId and aggregateId.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="id">The aggregateId.</param>
            <param name="writeConcern">The WriteConcern to use for this operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.Update(System.Guid,`1,`0,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            Method validates versioning and would raise DataVersioningException if version does not match.
            It uses  Settings.DefaultWriteConcern by default.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The aggregate id.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.Update(System.Guid,`1,`0,MongoDB.Driver.WriteConcern,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            Method validates versioning and would raise DataVersioningException if version does not match.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The aggregate id.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="writeConcern">The WriteConcern to use for this operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.Update(System.Guid,`1,System.Int32,`0,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            Method validates versioning and would raise DataVersioningException if version does not match.
            It uses  Settings.DefaultWriteConcern by default.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The aggregate id.</param>
            <param name="expectedVersion">The expected version to update in the repository.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.Update(System.Guid,`1,System.Int32,`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            Method validates versioning and would raise DataVersioningException if version does not match; unless suppressException is true.
            It uses  Settings.DefaultWriteConcern by default.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The aggregate id.</param>
            <param name="expectedVersion">The expected version to update in the repository.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="suppressException">The boolean indicator to suppress versioning exception.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.Update(System.Guid,`1,System.Int32,`0,MongoDB.Driver.WriteConcern,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            Method validates versioning and would raise DataVersioningException if version does not match.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The aggregate id.</param>
            <param name="expectedVersion">The expected version to update in the repository.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="writeConcern">The WriteConcern to use for this operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.Update(System.Guid,`1,System.Int32,`0,System.Boolean,MongoDB.Driver.WriteConcern,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            Method validates versioning and would raise DataVersioningException if version does not match.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The aggregate id.</param>
            <param name="expectedVersion">The expected version to update in the repository.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="suppressException">The boolean indicator to suppress versioning exception.</param>
            <param name="writeConcern">The WriteConcern to use for this operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.Contains(System.Guid,`1,System.Threading.CancellationToken)">
            <summary>
            Method checks if repository contains an aggregate with specified aggregateId and tenantId.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.FindOneByExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Finds the one by expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.FindAllByExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds aggregates by expression.
            </summary>
            <param name="expression">A function to test each element for a condition.</param>
            <param name="pageParams">The paged data parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The matched elements.
            </returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepository`2.CountAllByExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Counts aggregates by expression.
            </summary>
            <param name="expression">A function to test each element for a condition.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The amount of aggregates which matched the expression.
            </returns>
        </member>
        <member name="T:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepositoryBase`2">
            <summary>
            The base class for data repository based on MongoDB. 
            Class provides common functionality such as holding the connection settings, creating collection object, and operation re-try.
            </summary>
            <typeparam name="TSource">The generic entity (aggregate) type used by the repository.</typeparam>
            <typeparam name="TMongoDbId">The generic type used as an identifier for the entity/aggregate. Usually a Guid, but can be another type.</typeparam>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepositoryBase`2.GetDatabase">
            <summary>
            Returns the database object for custom operations.
            </summary>
            <returns>Returns IMongoDatabase type object.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepositoryBase`2.GetDbCollection``1">
            <summary>
            Returns the collection of generic entity/aggregate type. 
            This collection allows partial data retrieval for mapping to a subset of the entity/aggregate defined for the repository.
            </summary>
            <typeparam name="T">The generic entity/aggregate type.</typeparam>
            <returns>Returns IMongoCollection type object.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepositoryBase`2.GetDbCollection">
            <summary>
            Returns the collection of entity/aggregate type defined for the repository.
            </summary>
            <returns>Returns IMongoCollection type object.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepositoryBase`2.PingDatabase">
            <summary>
            Method pings database to quickly determine whether it's operational.
            </summary>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="T:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepositorySettings">
            <summary>
            The class provides repository settings for MongoDB database. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepositorySettings.DatabaseName">
            <summary>
            Gets or sets the database name.
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepositorySettings.DefaultWriteConcern">
            <summary>
            Gets or sets the default WriteConcern for the repository.
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepositorySettings.CollectionName">
            <summary>
            Gets the collection name.
            </summary>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepositorySettings.#ctor(System.String,System.String,MongoDB.Driver.WriteConcern)">
            <summary>
            Class constructor.
            </summary>
            <param name="connectionString">The database connection string to use.</param>
            <param name="collectionName">The collection name to use.</param>
            <param name="defaultWriteConcern">Default WriteConcern to use.</param>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbRepositorySettings.#ctor(System.String,System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="connectionString">The database connection string to use.</param>
            <param name="collectionName">The collection name to use.</param>
        </member>
        <member name="T:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2">
            <summary>
            The MongoDB repository providing standard CRUD operations for a generic entity/aggregate.
            </summary>
            <typeparam name="TSource">The generic entity/aggregate type.</typeparam>
            <typeparam name="TMongoDbId">The generic type used as an identifier for the entity/aggregate. Usually a Guid, but can be another type.</typeparam>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.#ctor(TaxHub.Common.DataAccess.IRepositorySettings,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor.
            </summary>
            <param name="settings">The database settings to use.</param>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="E:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.OnBeforeConnection">
            <summary>
            The event that occurs before connecting to the database.
            </summary>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.GetDatabase">
            <summary>
            Returns the database object for custom operations.
            </summary>
            <returns>Returns IMongoDatabase type object.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Update(`1,`0,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            Method validates versioning and would raise DataVersioningException if version does not match.
            It uses  Settings.DefaultWriteConcern by default.
            </summary>
            <param name="id">The aggregate id.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Update(`1,`0,MongoDB.Driver.WriteConcern,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            Method validates versioning and would raise DataVersioningException if version does not match.
            </summary>
            <param name="id">The aggregate id.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="writeConcern">The WriteConcern to use for this operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Update(`1,System.Int32,`0,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            Method validates versioning and would raise DataVersioningException if version does not match.
            It uses  Settings.DefaultWriteConcern by default.
            </summary>
            <param name="id">The aggregate id.</param>
            <param name="expectedVersion">The expected version to update in the repository.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Update(`1,System.Int32,`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            Method validates versioning and would raise DataVersioningException if version does not match; unless suppressException is true.
            It uses  Settings.DefaultWriteConcern by default.
            </summary>
            <param name="id">The aggregate id.</param>
            <param name="expectedVersion">The expected version to update in the repository.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="suppressException">The boolean indicator to suppress versioning exception.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Update(`1,System.Int32,`0,MongoDB.Driver.WriteConcern,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            Method validates versioning and would raise DataVersioningException if version does not match.
            </summary>
            <param name="id">The aggregate id.</param>
            <param name="expectedVersion">The expected version to update in the repository.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="writeConcern">The WriteConcern to use for this operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Update(`0,MongoDB.Driver.FilterDefinition{`0},System.Boolean,MongoDB.Driver.WriteConcern,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository with pre-condition query. Method validates versioning and would raise DataVersioningException if version does not match.
            </summary>
            <param name="item">The aggregate to update to.</param>
            <param name="filter">The additional update pre-condition query.</param>
            <param name="suppressException">The boolean indicator to suppress versioning exception.</param>
            <param name="writeConcern">The WriteConcern to use for this operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
            <remarks>If query does not match the update will not be made, but exception won't be raised; use return value as an indicator of success.</remarks>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Create(`0,System.Threading.CancellationToken)">
            <summary>
            Creates new aggregates in the repository. It uses  Settings.DefaultWriteConcern by default.
            </summary>
            <param name="item">New aggregate to create.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Create(`0,MongoDB.Driver.WriteConcern,System.Threading.CancellationToken)">
            <summary>
            Creates new aggregates in the repository.
            </summary>
            <param name="item">New aggregate to create.</param>
            <param name="writeConcern">WriteConcern for this operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.FindAllByIds(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.FindAll(System.Threading.CancellationToken)">
            <summary>
            Method finds all aggregate instances for all tenants.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.FindAll(MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            Method finds all aggregate instances for all tenants filtered by query, if supplied.
            </summary>
            <param name="filter">Additional query to filter data.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method finds all aggregate instances for all tenants, but returns only part of it based on page parameters (page number, size, sorting order).
            </summary>
            <param name="pageParams">The page parameters object.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            Method finds all aggregate instances for all tenants, but returns only part of it based on page parameters (page number, size, sorting order)
            and additional query, if supplied.
            </summary>
            <param name="pageParams">The page parameters object.</param>
            <param name="filter">Additional query to filter data.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Count(System.Threading.CancellationToken)">
            <summary>
            Method returns the total count of aggregates for all tenants.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a long value.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Count(MongoDB.Driver.FilterDefinition{`0},System.Threading.CancellationToken)">
            <summary>
            Method returns the total count of aggregates for all tenants, filtered by additional query, if supplied.
            </summary>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a long value.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.FindOne(`1,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Delete(`1,System.Threading.CancellationToken)">
            <summary>
            Method deletes a single aggregate instance based on the aggregateId. It uses  Settings.DefaultWriteConcern by default.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Delete(`1,MongoDB.Driver.WriteConcern,System.Threading.CancellationToken)">
            <summary>
            Method deletes a single aggregate instance based on the aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="writeConcern">The WriteConcern to use for this operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Contains(`1,System.Threading.CancellationToken)">
            <summary>
            Method checks if repository contains an aggregate with specified aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.BulkCreate(System.Collections.Generic.IEnumerable{`0},MongoDB.Driver.WriteConcern,System.Threading.CancellationToken)">
            <summary>
            Method creates multiple aggregates in the system. It performs bulk operation boosting the performance.
            </summary>
            <param name="items">The aggregates.</param>
            <param name="writeConcern">The write concern.</param>
            <param name="cancellationToken">Cancellation token</param>
            <remarks>This method is intended for a limited use due to complexity of handling errors multiple
            that might be resulted from multiple operation failures. Consider the error handling before using this method.</remarks>
            <remarks>Do not pass an empty array.</remarks>
            <remarks>Do not pass more than 1000 elements.</remarks>
            <returns>Returns a boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops collection and recreates it with all required indexes.
            Default implementation ignores the recreation option as collection will be created on demand by MongoDB when data is being written.
            </summary>
            <param name="withDrop">If true enforces dropping the collection.</param>
            <remarks>This method is used by Data Seeder and tests. It must not be called from production code.</remarks>
            <returns>Returns Task.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.Dispose">
            <summary>
            Method disposes any resources used by the class.
            </summary>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.ApplyToEach(System.Func{`0,System.Threading.Tasks.Task},TaxHub.Common.EventStore.IAggregateSnapshotFilter,System.Threading.CancellationToken)">
            <summary>
            Applies an action to each aggregate returned from the filters in filter params.
            </summary>
            <param name="action">The action to apply to each aggregate.</param>
            <param name="filters">The filters to find aggregates by.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.MongoDbStore.MongoDbSimpleRepository`2.BulkUpdate(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.Common.DataAccess.IDatabaseConnectivityProvider">
            <summary>
            Interface implemented by the class providing connection strings to the database and serves as an abstraction layer for this information.
            </summary>
        </member>
        <member name="M:TaxHub.Common.DataAccess.IDatabaseConnectivityProvider.IsSql(TaxHub.Common.DataAccess.DatabaseKind)">
            <summary>
            Determine if the database is a SQL database.
            </summary>
            <param name="kind">Enumeration for the database kind that is defined by the application use purpose</param>
            <returns>True if the database is a SQL database.</returns>
        </member>
        <member name="T:TaxHub.Common.DataAccess.DatabaseKind">
            <summary>
            Enumeration for the database kind that is defined by the application use purpose: storing aggregates, events data, log data, etc.
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.IMongoDbCredentialsProvider.Enabled">
            <summary>
            Gets a boolean indicator whether credentials for MongoDB should be taken from Key Server instead of configured connection strings.
            </summary>
        </member>
        <member name="T:TaxHub.Common.DataAccess.RepositorySettings">
            <summary>
            The abstract class provides repository settings. 
            This provides an abstraction layer to the database regardless of the DB type (MongoDB, SqlServer, etc.).
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.RepositorySettings.ConnectionString">
            <summary>
            Gets or sets (protected only) the database connection string.
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.RepositorySettings.DatabaseType">
            <summary>
            Gets the database type: MongoDB, SqlServer, etc.
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.RepositorySettings.StorageName">
            <summary>
            Gets or sets the storage name. This property meaning is defined by implementation class and depends on the database type.
            </summary>
        </member>
        <member name="T:TaxHub.Common.DataAccess.IConnectionStringBuilder">
            <summary>
            Class to abstract building connection strings
            </summary>
        </member>
        <member name="M:TaxHub.Common.DataAccess.IConnectionStringBuilder.BuildConnectionString(System.String)">
            <summary>
            Builds a connection string
            </summary>
            <param name="connectionString">Basis for the internal connection string.</param>
            <returns>Connection string</returns>
        </member>
        <member name="T:TaxHub.Common.DataAccess.DbConnectivityProvider">
            <summary>
            Class provides connection strings to the database and serves as an abstraction layer for this information.
            </summary>
        </member>
        <member name="M:TaxHub.Common.DataAccess.DbConnectivityProvider.#ctor(TaxHub.Common.Security.KeyServer.IUteSqlDbCredentialsProvider,TaxHub.Common.Security.KeyServer.IReadOnlySqlDbCredentialsProvider,TaxHub.Common.DataAccess.IMongoDbCredentialsProvider,TaxHub.Common.Logging.IAppLogger,TaxHub.Common.DataAccess.IMongoDbCredentialsProvider,TaxHub.Common.Security.KeyServer.IAmendmentsSqlDbCredentialsProvider)">
            <summary>
            Default constructor.
            </summary>
            <param name="uteSqlDbCredentialsProvider">UltiPro Tax Engine SQL DB credentials provider</param>
            <param name="readOnlySqlDbCredentialsProvider">UltiPro Tax Engine Read Only SQL DB credentials provider</param>
            <param name="mongoDbCredentialsProvider">MongoDB credentials provider</param>
            <param name="logger">The logger.</param>
            <param name="mongoDbReportingCredentialsProvider">MongoDB reporting credentials provider</param>
            <param name="amendmentsSqlDbCredentialsProvider">Amendments SQL DB credentials provider</param>
        </member>
        <member name="M:TaxHub.Common.DataAccess.DbConnectivityProvider.GetDatabaseConnectionString(TaxHub.Common.DataAccess.DatabaseKind)">
            <summary>
            Method returns the requested database connection string.
            </summary>
            <param name="kind">The database kind.</param>
            <returns>Returns database connection string.</returns>
        </member>
        <member name="T:TaxHub.Common.DataAccess.IRepository`2">
            <summary>
            The interface implemented by repository providing standard CRUD operations for a generic entity/aggregate.
            This is an abstraction layer independent from the DB type.
            </summary>
            <typeparam name="TSource">The generic entity/aggregate type.</typeparam>
            <typeparam name="TDbId">The generic type used as an identifier for the entity/aggregate. Usually a Guid, but can be another type.</typeparam>
        </member>
        <member name="M:TaxHub.Common.DataAccess.IRepository`2.FindOne(System.Guid,`1,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on tenantId and aggregateId.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.IRepository`2.FindAll(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds all aggregate instances for particular tenantId.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.IRepository`2.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method finds all aggregate instances for particular tenantId, but returns only part of it based on page parameters (page number, size, sorting order).
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="pageParams">The page parameters object.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.IRepository`2.Count(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method returns the total count of aggregates for particular tenantId.
            </summary>
            <param name="tenantId">The tenantId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a long value.</returns>
            <returns>Returns a long value.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.IRepository`2.Update(System.Guid,`1,`0,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The aggregate id.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.IRepository`2.Update(System.Guid,`1,System.Int32,`0,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository. Method validates versioning and would raise DataVersioningException if version does not match.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The aggregate id.</param>
            <param name="expectedVersion">The expected version to update in the repository.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.IRepository`2.Contains(System.Guid,`1,System.Threading.CancellationToken)">
            <summary>
            Method checks if repository contains an aggregate with specified aggregateId and tenantId.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="T:TaxHub.Common.DataAccess.IRepositorySettings">
            <summary>
            Interface that repository settings class must implement. 
            This provides an abstraction layer to the database regardless of the DB type (MongoDB, SqlServer, etc.).
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.IRepositorySettings.StorageName">
            <summary>
            Gets or sets the storage name for the database name. This property meaning is defined by implementation class and depends on the database type.
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.IRepositorySettings.ConnectionString">
            <summary>
            Gets the database connection string.
            </summary>
        </member>
        <member name="P:TaxHub.Common.DataAccess.IRepositorySettings.DatabaseType">
            <summary>
            Gets the database type: MongoDB, SqlServer, etc.
            </summary>
        </member>
        <member name="T:TaxHub.Common.DataAccess.ISimpleRepository`2">
            <summary>
            The interface implemented by a repository providing standard tenant-based CRUD operations for a generic entity/aggregate.
            This is an abstraction layer independent from the DB type.
            </summary>
            <typeparam name="TSource">The generic entity/aggregate type.</typeparam>
            <typeparam name="TDbId">The generic type used as an identifier for the entity/aggregate. Usually a Guid, but can be another type.</typeparam>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ISimpleRepository`2.FindOne(`1,System.Threading.CancellationToken)">
            <summary>
            Method finds a single aggregate instance based on the aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ISimpleRepository`2.FindAllByIds(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            Method finds all aggregate instances based on the aggregate ids.
            </summary>
            <param name="ids">The aggregate ids.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ISimpleRepository`2.FindAll(System.Threading.CancellationToken)">
            <summary>
            Method finds all aggregate instances for all tenants.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ISimpleRepository`2.FindAll(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method finds all aggregate instances for all tenants, but returns only part of it based on page parameters (page number, size, sorting order).
            </summary>
            <param name="pageParams">The page parameters object.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns an IEnumerable containing the aggregates.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ISimpleRepository`2.Count(System.Threading.CancellationToken)">
            <summary>
            Method returns the total count of aggregates for all tenants.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a long value.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ISimpleRepository`2.Create(`0,System.Threading.CancellationToken)">
            <summary>
            Creates new aggregates in the repository.
            </summary>
            <param name="item">New aggregate to create.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ISimpleRepository`2.Update(`1,`0,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository.
            </summary>
            <param name="id">The aggregate id.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ISimpleRepository`2.Update(`1,System.Int32,`0,System.Threading.CancellationToken)">
            <summary>
            Updates an aggregates in the repository. Method validates versioning and will raise DataVersioningException if version does not match.
            </summary>
            <param name="id">The aggregate id.</param>
            <param name="expectedVersion">The expected version to update in the repository.</param>
            <param name="item">The aggregate to update to.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ISimpleRepository`2.Delete(`0,System.Threading.CancellationToken)">
            <summary>
            Method deletes a single aggregate instance making Concurrency Checks.
            </summary>
            <param name="item">The aggregate.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ISimpleRepository`2.Contains(`1,System.Threading.CancellationToken)">
            <summary>
            Method checks if repository contains an aggregate with specified aggregateId.
            </summary>
            <param name="id">The aggregateId.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean value indicating a success.</returns>
        </member>
        <member name="M:TaxHub.Common.DataAccess.ISimpleRepository`2.ApplyToEach(System.Func{`0,System.Threading.Tasks.Task},TaxHub.Common.EventStore.IAggregateSnapshotFilter,System.Threading.CancellationToken)">
            <summary>
            Applies action to each aggregate found after filtering.
            </summary>
            <param name="action">Action to apply.</param>
            <param name="filters">Filters that can be applied.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A Task</returns>
        </member>
        <member name="T:TaxHub.Common.EFInterceptors.IInterceptorRegistration">
            <summary>
            Interface defined to register globally the required entityFramework Interceptors.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EFInterceptors.IInterceptorRegistration.RegisterInterceptor">
            <summary>
            Registers the entity framework interceptors.
            </summary>
        </member>
        <member name="F:TaxHub.Common.EFInterceptors.UserAuditCommandInterceptor.userSecurityInfoAsyncLocalStore">
            <summary>
            The manager for user info in async local context.
            </summary>
        </member>
        <member name="T:TaxHub.Common.EFInterceptors.DoNotTrimAttribute">
            <summary>
            Custom attribute to exclude a field from being trimmed by the StringTrimmer interceptor
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.PrintFileRequestStatus">
            <summary>
            Represents different PrintFileRequest statuses
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PrintFileRequestStatus.Created">
            <summary>
            Created status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PrintFileRequestStatus.Sorted">
            <summary>
            Sorted status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PrintFileRequestStatus.Collated">
            <summary>
            Combined status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PrintFileRequestStatus.Sent">
            <summary>
            Printed status
            Successfully sent to Udes
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PrintFileRequestStatus.Failed">
            <summary>
            Failed status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PrintFileRequestStatus.Unknown">
            <summary>
            Unknown status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PrintFileRequestStatus.Success">
            <summary>
            Success status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PrintFileRequestStatus.Saved">
            <summary>
            Saved Status
            Successfully saved to Object store
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PrintFileRequestStatus.PartialFailure">
            <summary>
            Partial failure Status
            Some BatchDocument
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.PostPayrollType">
            <summary>
            PostPayroll Type enum
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PostPayrollType.Unknown">
            <summary>
            Unknown default value
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PostPayrollType.Regular">
            <summary>
            Regular Payment
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PostPayrollType.QuarterEndAdjustment">
            <summary>
            Quarter End Adjustment
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PostPayrollType.PeriodicAdjustment">
            <summary>
            Periodic Adjustment
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PostPayrollType.SuiCredit">
            <summary>
            SUI Credit
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PostPayrollType.AgencyCredit">
            <summary>
            Amendment
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PostPayrollType.OverpayRefund">
            <summary>
            Amendment
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.PostPayrollTypeExtensions">
            <summary>
            Extension functions for PostPayroll Type
            </summary>
        </member>
        <member name="M:TaxHub.Common.Enums.PostPayrollTypeExtensions.ToPostPayrollType(System.String)">
            <summary>
            Returns PostPayroll Type
            </summary>
            <param name="value">Value</param>
            <returns>Returns PostPayrollType</returns>
        </member>
        <member name="T:TaxHub.Common.Enums.CouponAgencyDeliverySetting">
            <summary>
            Describes the Coupon Agency Setting
             </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.CouponAgencyDeliverySetting.Electronic">
            <summary>
            Electronic delivery 
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.CouponAgencyDeliverySetting.MagMedia">
            <summary>
            MagMedia (magnetic media, floppy discs) delivery setting 
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.CouponAgencyDeliverySetting.Printed">
            <summary>
            Printed delivery 
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.DocumentFilingType">
            <summary>
            Describes the Document Filing Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentFilingType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentFilingType.Periodic">
            <summary>
            Periodic filing
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentFilingType.Quarterly">
            <summary>
            Quarterly filing
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentFilingType.Annual">
            <summary>
            Annual filing
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.DocumentPrintStatus">
            <summary>
            Describes the Document Print Status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentPrintStatus.Ready">
            <summary>
            Ready to be sent
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentPrintStatus.Sent">
            <summary>
            Sent to print services
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentPrintStatus.InProgress">
            <summary>
            Document In Progress to print services 
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentPrintStatus.ValidationsFailed">
            <summary>
            Document validations failed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentPrintStatus.ProcessFailed">
            <summary>
            Document process failed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentStatus.Valid">
            <summary>
            Valid printable document (non-voided) 
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentStatus.Void">
            <summary>
            Void
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.FileServiceDocumentType">
            <summary>
            Describes the Document Types used in FileService. />
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.DocumentType">
            <summary>
            Describes the Document Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentType.Check">
            <summary>
            Check document
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentType.Coupon">
            <summary>
            Coupon document
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentType.Return">
            <summary>
            Return document 
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentType.ZeroCoupon">
            <summary>
            ZeroCoupon document 
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentVerificationOutcome.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentVerificationOutcome.Success">
            <summary>
            Was successfull
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentVerificationOutcome.Failure">
            <summary>
            Failure
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentVerificationOutcome.Excluded">
            <summary>
            Excluded 
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.DocumentVerificationOutcome.PartialFailure">
            <summary>
            Partial Failure
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.FilingRequestStatus">
            <summary>
            Filing Status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.FilingRequestStatus.Requested">
            <summary>
            Filing has been requested
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.FilingRequestStatus.Failed">
            <summary>
            Filing process has failed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.FilingRequestStatus.InProgress">
            <summary>
            Filing is in progress
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.FilingRequestStatus.Completed">
            <summary>
            Filing has been completed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.FilingRequestStatus.CompletedWithErrors">
            <summary>
            Filing has been completed With Errors
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.FilingRequestType.AnnualRec">
            <summary>
            The annual rec filing
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.FilingRequestType.QuarterlyFiling">
            <summary>
            The quaterly filing 
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.FilingRequestType.PeriodicCoupons">
            <summary>
            The periodic coupons
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.LiabilityOriginType">
            <summary>
            Defines the market types
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LiabilityOriginType.Import">
            <summary>
            Combine process import payrolls - original tax owed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LiabilityOriginType.Input">
            <summary>
            Combine process input payrolls - original tax owed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LiabilityOriginType.PaymentVoidedRefund">
            <summary>
            A voided Payment which should result in a Refund
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LiabilityOriginType.CreditAppliedRefund">
            <summary>
            A credit has been applied to an existing Payment which should result in a Refund 
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LiabilityOriginType.CreditTransactionRefund">
            <summary>
            Credit transaction is created
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LiabilityOriginType.CreditTransactionRecollect">
            <summary>
            Credit transaction is voided
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LiabilityOriginType.QeNetPositivePaymentVoidedRefund">
            <summary>
            A QE-net positive payment voided which should result in refund
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LiabilityOriginType.PenaltyInterestOnUs">
            <summary>
            A Penalty or Interest on Us
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LiabilityOriginType.PenaltyInterestOffUs">
            <summary>
            A Penalty or Interest on the client (off Us) 
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.PackageType">
            <summary>
            An enum denoting the type of package to generate.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PackageType.Unknown">
            <summary>
            The default value, unspecified.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PackageType.LegacyQuarterEnd">
            <summary>
            Used to specify a Legacy Quarter End Package.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PackageType.LegacyYearEnd">
            <summary>
            Used to specify a Legacy Year End Package.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.PaymentType">
            <summary>
            Process Result enum
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PaymentType.Unknown">
            <summary>
            Unknown default value
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PaymentType.Regular">
            <summary>
            Regular Payment
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PaymentType.QuarterEndAdjustment">
            <summary>
            Quarter End Adjustment
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PaymentType.SuiCredit">
            <summary>
            SUI Credit
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PaymentType.PenaltyByUsg">
            <summary>
            Penalty paid by USG
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PaymentType.PenaltyByCustomer">
            <summary>
            Penalty paid by the customer
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PaymentType.InterestByUsg">
            <summary>
            Interest paid by Usg
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PaymentType.InterestByCustomer">
            <summary>
            Interest paid by Customer
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PaymentType.Amendment">
            <summary>
            Amendment
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PaymentType.AgencyCredit">
            <summary>
            Amendment
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PaymentType.OverpayRefund">
            <summary>
            Amendment
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.PaymentTypeExtension">
            <summary>
            Extension functions for Payment Type
            </summary>
        </member>
        <member name="M:TaxHub.Common.Enums.PaymentTypeExtension.IsPenaltyInterest(TaxHub.Common.Enums.PaymentType)">
            <summary>
            Returns true whether Payment Type is penalty/interest
            </summary>
            <param name="value">Value</param>
            <returns>Returns true whether Payment Type is penalty/interest</returns>
        </member>
        <member name="T:TaxHub.Common.Enums.PenaltyInterestStatus">
            <summary>
            Describes the available statuses for a Penalty and Interes operation.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PenaltyInterestStatus.Unknown">
            <summary>
            Penalty and Interest operation has unknown status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PenaltyInterestStatus.Created">
            <summary>
            Penalty and Interest operation was created
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PenaltyInterestStatus.Processed">
            <summary>
            Penalty and Interest operation was processed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PenaltyInterestStatus.Requested">
            <summary>
            Penalty and Interest liability was requested
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PenaltyInterestStatus.Assembled">
            <summary>
            Penalty and Interest liability was assembled
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PenaltyInterestStatus.Voided">
            <summary>
            Penalty and Interest operation was voided
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PenaltyInterestStatus.Failed">
            <summary>
            Penalty and Interest operation has failed
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.PenaltyInterestType">
            <summary>
            Describes the various PenaltyInterest types
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PenaltyInterestType.Unknown">
            <summary>
            Not known what entity is responsible for Penalty and Interest
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PenaltyInterestType.USG">
            <summary>
            USG Responsible
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.PenaltyInterestType.Customer">
            <summary>
            Customer Responsible
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndAgencyIngestionType.Normal">
            <summary>
            We will ingest files from this agency normally.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndAgencyIngestionType.Skip">
            <summary>
            The files from this agency will be uploaded to object store, but not processed (e.g. Puerto Rico MMREF).        
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndAgencyIngestionType.NonApplicable">
            <summary>
            Files for this agency will not be provided and this agency will be ignored for the purposes
            of file ingestion.
            </summary>        
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndAnnualRecClientProcessStatus.Successful">
            <summary>
            Successful processed Client's AR record.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndAnnualRecClientProcessStatus.SuccessfulWithErrors">
            <summary>
            Processed a client's AR record with some non-critical errors or validation failures.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndAnnualRecClientProcessStatus.Skipped">
            <summary>
            Client's AR record was skipped due to critical errors or validation failures.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndAnnualRecClientProcessStatus.Failed">
            <summary>
            Client's AR record process failed due to a hard fault/exceptions.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndCsvLineValidationResult.Unknown">
            <summary>
            The line validation has unknown status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndCsvLineValidationResult.Valid">
            <summary>
            The line validation was successful
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndCsvLineValidationResult.SkipLine">
            <summary>
            The line validation did not succeed, skip the line
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndCsvLineValidationResult.ContinueWithErrors">
            <summary>
            The line validation did not succeed, continue
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndCsvLineValidationResult.Invalid">
            <summary>
            The line validation did not success, stop process
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessingStatus.Unknown">
            <summary>
            The Client has unknown status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessingStatus.Ready">
            <summary>
            The Client  is ready to be processed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessingStatus.InProgress">
            <summary>
            The Client is in progress
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessingStatus.Completed">
            <summary>
            The Client processing was completed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessingStatus.Failed">
            <summary>
            The Client processing failed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessingStatus.Voided">
            <summary>
            The Client voided
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.YearEndProcessEventType">
            <summary>
            The Enum to declare the Event Type of the YearEndProcessInfo Entry
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessEventType.Error">
            <summary>
            Event Error
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessEventType.Information">
            <summary>
            Information
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.YearEndProcessStage">
            <summary>
            The enum to declare at what stage of the YE process the YearEndProcessInfo was created
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessStage.Ingestion">
            <summary>
            Ingestion
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessStage.IVR">
            <summary>
            IVR
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessStage.Post">
            <summary>
            Post
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessStage.FED">
            <summary>
            Generate Fed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndProcessStage.State">
            <summary>
            Generate State Local
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndPhaseStatus.Unknown">
            <summary>
            The file has unknown status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndPhaseStatus.Ready">
            <summary>
            The File generation is Ready
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndPhaseStatus.Requested">
            <summary>
            The process requested
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndPhaseStatus.InProgress">
            <summary>
            The Process is In Progress
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndPhaseStatus.Failed">
            <summary>
            The Process has Failed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndPhaseStatus.Completed">
            <summary>
            The Process is Completed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndStagingBehavior.IgnoreStaging">
            <summary>
            Do nothing there
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndStagingBehavior.Lookup">
            <summary>
            Look up there too
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndStagingBehavior.LookupExplicitly">
            <summary>
            Look up there Only
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileStatus.Unknown">
            <summary>
            The file has unknown status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileStatus.Generating">
            <summary>
            The File generation is In Progress
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileStatus.Completed">
            <summary>
            The file was generated and saved to
            object storage
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileStatus.Exported">
            <summary>
            The file was downloaded from object storage
            and exported
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileStatus.CompletedWithErrors">
            <summary>
            The file, with business errors, was generated and saved to
            object storage
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileStatus.Failed">
            <summary>
            The file generation failed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileStatus.Voided">
            <summary>
            The file generation voided
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.YearEndRecordType">
            <summary>
            The enum to declare what record type raised the YearEndProcessInfo event
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndRecordType.NA">
            <summary>
            Not Applicable Record Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndRecordType.RA">
            <summary>
            RA Record Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndRecordType.RE">
            <summary>
            RE Record Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndRecordType.RO">
            <summary>
            RO Record Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndRecordType.RW">
            <summary>
            RW Record Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndRecordType.RS">
            <summary>
            RS Record Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndRecordType.RT">
            <summary>
            RT Record Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndRecordType.RV">
            <summary>
            RV Record Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndRecordType.RU">
            <summary>
            RU Record Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndRecordType.RF">
            <summary>
            RF Record Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileType.Unknown">
            <summary>
            The file has unknown status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileType.Efw2File">
            <summary>
            The Efw2 File Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileType.Efw2SubReportFile">
            <summary>
            The Efw2 File Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileType.CsvFile">
            <summary>
            The CSV File Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileType.AnnualReconciliation">
            <summary>
            The Annual Reconciliation File Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileType.Transmittal">
            <summary>
            The Transmittal File Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileType.Summary">
            <summary>
            The Summary File Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileType.Exception">
            <summary>
            The Exception File Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileType.Q5QRF">
            <summary>
            The Exception File Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileType.YearVarianceReport">
            <summary>
            The Year Variance Report
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileType.CustomerPackage">
            <summary>
            The Customer Package
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileType.W3">
            <summary>
            The W3 File
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.Quarterly_Variance_Report.QuarterlyVarianceReportStatus">
            <summary>
            An enum denoting the current status of the QuarterlyVarianceReportRequest aggregate.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.Quarterly_Variance_Report.QuarterlyVarianceReportStatus.Unknown">
            <summary>
            The default value, unspecified. Should never be used.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.Quarterly_Variance_Report.QuarterlyVarianceReportStatus.Ready">
            <summary>
            Indicates a package has not yet been requested.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.Quarterly_Variance_Report.QuarterlyVarianceReportStatus.Requested">
            <summary>
            Indicates a package has been requested by a user.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.Quarterly_Variance_Report.QuarterlyVarianceReportStatus.InProgress">
            <summary>
            Indicates a package is currently being generated.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.Quarterly_Variance_Report.QuarterlyVarianceReportStatus.Completed">
            <summary>
            Indicates a package has been successfully generated.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.Quarterly_Variance_Report.QuarterlyVarianceReportStatus.Failed">
            <summary>
            Indicates a package failed to generate.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.Quarterly_Variance_Report.QuarterlyVarianceReportStatus.Persisted">
            <summary>
            Indicates a package has been generated and is ready to be linked to the data store via the FileService.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileRequestStatus.Unknown">
            <summary>
            The file has unknown status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileRequestStatus.Ready">
            <summary>
            The file request is ready to be processed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileRequestStatus.Requested">
            <summary>
            The File request has been requested
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileRequestStatus.InProgress">
            <summary>
            The File request is in progress
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileRequestStatus.Completed">
            <summary>
            The file was completed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileRequestStatus.CompletedWithErrors">
            <summary>
            The file was completed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileRequestStatus.Failed">
            <summary>
            The file request failed
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileRequestStatus.Voided">
            <summary>
            The file request voided
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.YearEndTaxFileRequestStatus.Exported">
            <summary>
            The file related to this request has been exported
            </summary>
        </member>
        <member name="T:TaxHub.Common.Enums.LegacyStatus">
            <summary>
            Status mapping
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LegacyStatus.Unknown">
            <summary>
            Unknown status, should not happen
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LegacyStatus.Check">
            <summary>
            Check status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LegacyStatus.Valid">
            <summary>
            Valid status
            </summary>
        </member>
        <member name="F:TaxHub.Common.Enums.LegacyStatus.Void">
            <summary>
            Void status
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.EventStoreDiagnosticsData.CreatedUtcDate">
            <summary>
            Gets or sets date and time when aggregate was created.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.EventStoreDiagnosticsData.UpdatedUtcDate">
            <summary>
            Gets or sets aggregate most recent update date and time.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.EventStoreDiagnosticsData.ExecutionUtcDate">
            <summary>
            Gets or sets last execution date and time.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.EventStoreDiagnosticsData.Version">
            <summary>
            Gets or sets current aggregate version (update sequence, not schema version).
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.EventStoreDiagnosticsData.Data">
            <summary>
            Gets or sets the diagnostics data.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStoreDiagnosticsData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStoreDiagnosticsData.MarkAsChanged">
            <summary>
            Method updates aggregate state management indicating it has changes and incrementing its version by 1.
            The version won't change if multiple updates are being made to the same state.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStoreDiagnosticsData.MarkAsPersisted">
            <summary>
            Method updates aggregate state management indicating that state has been persisted to the repository.
            This method MUST NOT BE USED from any code OTHER THAN REPOSITORIES. Using this method outside of repositories may lead to data corruption.
            </summary>
        </member>
        <member name="T:TaxHub.Common.EventStore.EventStoreDiagnosticsMongoDbRepository">
            <summary>
            The interface implemented by a class providing storage facility for the Event Store.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStoreDiagnosticsMongoDbRepository.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor accepting connectivity provider instance.
            </summary>
            <param name="connectivityProvider">The connectivity provider.</param>
            <param name="logger">The logger to use</param>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStoreDiagnosticsMongoDbRepository.GetDatabase">
            <summary>
            Method returns underlying database object for maintenance purposes.
            </summary>
            <returns>Returns IMongoDatabase object.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStoreDiagnosticsMongoDbRepository.Find(System.Threading.CancellationToken)">
            <summary>
            Method finds an event store diagnostics data.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.EventStoreDiagnosticsData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStoreDiagnosticsMongoDbRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes. 
            </summary>
            <param name="withDrop">If true enforces </param>
            <returns>Returns Task.</returns>
        </member>
        <member name="T:TaxHub.Common.EventStore.IEventStoreDiagnosticsRepository">
            <summary>
            The interface implemented by a class providing Event Store diagnostics storage.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreDiagnosticsRepository.Find(System.Threading.CancellationToken)">
            <summary>
            Method finds current event diagnostics.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.EventStoreDiagnosticsData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreDiagnosticsRepository.Save(TaxHub.Common.EventStore.EventStoreDiagnosticsData,System.Threading.CancellationToken)">
            <summary>
            Method saves diagnostics data to the store.
            </summary>
            <param name="item">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="T:TaxHub.Common.EventStore.IEventStoreRepository">
            <summary>
            The interface implemented by a class providing storage facility for the Event Store.
            </summary>
            <summary>
            The interface implemented by a class providing storage facility for the Event Store.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllFailedToConsumeGreaterThanTimeStampAndInEventNames(System.DateTime,System.String[],SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of failed events filtered by specific event name and page parameters.
            </summary>
            <param name="utcTimestamp">The UTC created timestamp</param>
            <param name="eventNames">The event names to find.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and page parameters.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,MongoDB.Driver.FilterDefinition{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and page parameters.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllFailedToConsume(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of failed events filtered by specific tenant and page parameters.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllFailedToConsume(System.Guid,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of failed events filtered by specific event name and page parameters.
            </summary>
            <param name="tenantId">The tenant ID</param>
            <param name="eventName">The event name.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllFailedToPublish(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of incomplete (failed to queue) events filtered by specific tenant and page parameters. 
            It returns only part of it based on page parameters (page number, size, sorting order) and additional query, if supplied.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllForAggregate(System.Guid,System.String,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="tenantId">The tenant ID</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.Count(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of events for specified tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.CountFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of failed events for specified tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.CountFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of incomplete (failed to queue) events for specified tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteFailedToPublish(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Deletes the failed to publish.
            </summary>
            <param name="ids">The ids.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if it deleted all.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds an event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindOneFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a failed event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindOneFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a incomplete (failed to queue) event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a failed event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteFailedToConsume(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Method deletes many failed event by its ids.
            </summary>
            <param name="ids">The event data ids.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteFailedToConsume(System.String,System.Threading.CancellationToken)">
            <summary>
            Method deletes a failed event by aggregate name.
            </summary>
            <param name="aggregateName">The event data aggregateName.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteFailedToConsume(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a failed event by aggregate name and aggregateId.
            </summary>
            <param name="aggregateName">The event data aggregateName.</param>
            <param name="aggregateId">Aggregate Id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a incomplete (failed to queue) event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteManyRawEvents(MongoDB.Driver.FilterDefinition{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Method deletes events based on a filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteManyFailedToPublish(MongoDB.Driver.FilterDefinition{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Method deletes events based on a filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteRawEvent(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a event from RawEvents by its ID
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteRawEvents(System.String,System.Threading.CancellationToken)">
            <summary>
            Method deletes all events from RawEvents that matches specified EventName.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns number of events deleted.
            </returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteFailedToConsumeEvents(System.String,System.Threading.CancellationToken)">
            <summary>
            Method deletes multiple events from FailedToConsumeEvents by its EventName.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns number of events deleted.
            </returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteFailedToConsumeEvents(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Method deletes multiple events from FailedToConsumeEvents by its EventName.
            </summary>
            <param name="eventName">List of event names to be deleted</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns number of events deleted.
            </returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.DeleteFailedToConsumeEvents(MongoDB.Driver.FilterDefinition{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Method deletes failed to consume events based on filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllForAggregate(System.Guid,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllForAggregate(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="aggregateName">The aggregate name.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllByEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific event Name.
            </summary>
            <param name="eventName">The aggregate name.</param>
            <param name="pageParams">Page data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllByEventNameandAggregateName(System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific event and aggregate Name.
            </summary>
            <param name="eventName">The aggregate name.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="pageParams">Page data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllByEventNameandAggregateName(System.String,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific event, aggregate name and filters event containing specified fieldName.
            </summary>
            <param name="eventName">The aggregate name.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="fieldName">The field name to check for existance.</param>
            <param name="pageParams">Page data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.Save(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method saves event data to the store.
            </summary>
            <param name="item">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.Update(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method updates event data to the store.
            </summary>
            <param name="item">The item to update.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.Save(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Method saves multiple event data items to the store.
            </summary>
            <param name="items">The items to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.SaveFailedToConsume(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method saves failed event data to the store. Use this strictly for failed events.
            </summary>
            <param name="item">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.SaveFailedToPublish(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method saves incomplete (failed to queue) event data to the store. Use this strictly for incomplete events.
            </summary>
            <param name="item">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllFailedToConsumeByEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific event name.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="pagedParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllFailedToConsumeByEventNames(System.Collections.Generic.IEnumerable{System.String},SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by a list event names.
            </summary>
            <param name="eventNames">The event name list</param>
            <param name="pagedParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllFailedToConsumeByPartialBeginningEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the list of events filtered by a partial match on the beginning of an event name.
            </summary>
            <param name="partialEventName">The partial event name.</param>
            <param name="pagedParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.RetrieveFailedDiagnostics(System.Threading.CancellationToken)">
            <summary>
            Methods returns the diagnostics information about failed events collections. It returns 2 counts - failed to published and consumed. 
            The counts are limited by 10, therefore if collection contains more than 10 events, it still returns value of 10.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns instance of <see cref="T:TaxHub.Common.EventStore.FailedDiagnosticsData"/>.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllFailedToPublishByPartialBeginningEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by a partial match on the beginning of an event name.
            </summary>
            <param name="partialEventName">The partial event name.</param>
            <param name="pagedParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.RetrieveFailedDetailedDiagnostics(System.Threading.CancellationToken)">
            <summary>
            Methods returns the diagnostics information about failed events collections. It returns 2 dictionaries - failed to published and consumed. 
            Each contains the list of event names with their total counts.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns instance of <see cref="T:TaxHub.Common.EventStore.FailedDiagnosticsDetailedData"/>.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllFailedToPublishByEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the list of failed to publish events filtered by specific event name.
            </summary>
            <param name="eventName">The event name</param>
            <param name="pagedParams">Paging Parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStoreRepository.FindAllEventIdsByEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Retrieve the list of event ids for the specified event name.
            </summary>
            <param name="eventName">event name to filter by</param>
            <param name="pagedParams">PagedParams</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of event ids</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.GetDatabase">
            <summary>
            Method returns underlying database object for maintenance purposes.
            </summary>
            <returns>Returns IMongoDatabase object.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and page parameters.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,MongoDB.Driver.FilterDefinition{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and page parameters.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllFailedToConsume(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and page parameters. 
            It returns only part of it based on page parameters (page number, size, sorting order) and additional query, if supplied.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllFailedToPublish(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of incomplete (failed to queue) events filtered by specific tenant and page parameters. 
            It returns only part of it based on page parameters (page number, size, sorting order) and additional query, if supplied.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAll(System.Guid,TaxHub.Common.EventStore.MongoDbEventStoreRepository.EventStoreDestination,SmartHub.Hosting.DataAccess.PagedDataParameters,MongoDB.Driver.FilterDefinition{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and page parameters. 
            It returns only part of it based on page parameters (page number, size, sorting order) and additional query, if supplied.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="destination">Destination part of the event store.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="filter">Additional query to filter data. NOTE: an additional filter for tenantId will be added as AND condition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.Count(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of events for specified tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.CountFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of failed events for specified tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.CountFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of incomplete (failed to queue) events for specified tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds an event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindOneFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a failed event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindOneFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a incomplete (failed to queue) event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.DeleteFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a failed event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.DeleteFailedToConsume(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Method deletes many failed event by its ids.
            </summary>
            <param name="ids">The event data ids.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.DeleteFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a incomplete (failed to queue) event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.DeleteRawEvent(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a event from RawEvents by its ID
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.DeleteRawEvents(System.String,System.Threading.CancellationToken)">
            <summary>
            Method deletes events from RawEvents by its EventName.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns number of events deleted.
            </returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.DeleteFailedToConsumeEvents(System.String,System.Threading.CancellationToken)">
            <summary>
            Method deletes multiple events from FailedToConsumeEvents by its EventName.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            Returns number of events deleted.
            </returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllForAggregateWithFilter(System.Guid,System.String,System.Guid,MongoDB.Driver.FilterDefinition{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="filter">The filter definition.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllForAggregate(System.Guid,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllForAggregate(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="aggregateName">The aggregate name.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllByEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllByEventNameandAggregateName(System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="pagedParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllByEventNameandAggregateName(System.String,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="aggregateName">The aggregate name.</param> 
            <param name="fieldName">The field Name to check for existance</param>
            <param name="pagedParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllFailedToConsumeByEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by event name.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="pagedParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllFailedToConsumeByEventNames(System.Collections.Generic.IEnumerable{System.String},SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by a list of event names.
            </summary>
            <param name="eventNames">The event name list.</param>
            <param name="pagedParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllFailedToConsumeByPartialBeginningEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by a partial match on the beginning of an event name.
            </summary>
            <param name="partialEventName">The partial event name.</param>
            <param name="pagedParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllFailedToPublishByPartialBeginningEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by a partial match on the beginning of an event name.
            </summary>
            <param name="partialEventName">The partial event name.</param>
            <param name="pagedParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.Save(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method saves event data to the store.
            </summary>
            <param name="item">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.Update(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method updates event data to the store.
            </summary>
            <param name="item">The item to update.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.SaveFailedToConsume(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method saves failed event data to the store. Use this strictly for failed events.
            </summary>
            <param name="item">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.SaveFailedToPublish(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method saves incomplete (failed to queue) event data to the store. Use this strictly for incomplete events.
            </summary>
            <param name="item">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.RetrieveFailedDiagnostics(System.Threading.CancellationToken)">
            <summary>
            Methods returns the diagnostics information about failed events collections. It returns 2 counts - failed to published and consumed. 
            The counts are limited by 10, therefore if collection contains more than 10 events, it still returns value of 10.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns instance of <see cref="T:TaxHub.Common.EventStore.FailedDiagnosticsData"/>.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.RetrieveFailedDetailedDiagnostics(System.Threading.CancellationToken)">
            <summary>
            Methods returns the diagnostics information about failed events collections. It returns 2 dictionaries - failed to published and consumed. 
            Each contains the list of event names with their total counts.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns instance of <see cref="T:TaxHub.Common.EventStore.FailedDiagnosticsDetailedData"/>.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.FindAllFailedToPublishByEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.EventStore.MongoDbEventStoreRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes. 
            </summary>
            <param name="withDrop">If true enforces </param>
            <returns>Returns Task.</returns>
        </member>
        <member name="T:TaxHub.Common.EventStore.SystemCommandIssuedEventData">
            <summary>
            The {boundedContext}.system-command.issued event. This event is not being saved to the Event Store.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.SystemCommandIssuedEventData.#ctor(System.String,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="boundedContext">The bounded context raising the event.</param>
            <param name="eventDetails">The event details.</param>
        </member>
        <member name="T:TaxHub.Common.EventStore.DomainCommunicationEventData">
            <summary>
            Domain event data for inter-domain communication only. This events are not being saved to the Event Store.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.DomainCommunicationEventData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.DomainCommunicationEventData.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.EventStore.DomainCommunicationEventData"/> class.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventDetails">The event name.</param>
            <returns>Returns instance of <see cref="T:TaxHub.Common.EventStore.DomainEventData" /></returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.DomainCommunicationEventData.#ctor(System.String)">
            <summary>
            Constructor that accepts event name.
            </summary>
            <param name="eventName">The event name.</param>
        </member>
        <member name="T:TaxHub.Common.EventStore.DomainEventAttribute">
            <summary>
            Attribute allows to define a domain event.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventAttribute.EventName">
            <summary>
            Gets or sets the domain event name. This name must follow the convention: "{domain}|{bounded-context}.{aggregate-name}.{what-happened-in-the-past-tense}".
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventAttribute.AckPublish">
            <summary>
            Gets or sets the boolean indicator whether the publish requires acknowledgement. 
            By default is false.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventAttribute.Encrypted">
            <summary>
            Gets or sets a boolean indicator whether the event has to be encrypted. 
            By default is false.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventAttribute.Compressed">
            <summary>
            Gets or sets a boolean indicator whether the event has to be compressed. 
            By default is false.
            </summary>
        </member>
        <member name="T:TaxHub.Common.EventStore.EventDetailsAttribute">
            <summary>
            Attribute allows to define a domain event details.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.EventDetailsAttribute.EventName">
            <summary>
            Gets or sets the domain event name. This name must follow the convention: "{domain}|{bounded-context}.{aggregate-name}.{what-happened-in-the-past-tense}".
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.EventDetailsAttribute.AckPublish">
            <summary>
            Gets or sets the boolean indicator whether the publish requires acknowledgement. 
            By default is false.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.EventDetailsAttribute.Encrypted">
            <summary>
            Gets or sets a boolean indicator whether the event has to be encrypted. 
            By default is false.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.EventDetailsAttribute.Compressed">
            <summary>
            Gets or sets a boolean indicator whether the event has to be compressed. 
            By default is false.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.EventDetailsAttribute.SchemaVersion">
            <summary>
            Gets or sets the event schema version.
            </summary>
        </member>
        <member name="T:TaxHub.Common.EventStore.EventStore">
            <summary>
            The class provides Event Store functionality.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.#ctor(TaxHub.Common.EventStore.IEventStoreRepository)">
            <summary>
            Constructor that accepts event store repository.
            </summary>
            <param name="repository">The repository to use.</param>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.Save(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method saves event data to the store.
            </summary>
            <param name="eventData">The data to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.Update(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method updates the event in the event store.
            </summary>
            <param name="eventData">The data to update.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.Save(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Method saves multiple events data to the store.
            </summary>
            <param name="eventsData">The data to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.SaveFailedToConsume(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method saves failed event data to the store. Use this strictly for failed events.
            </summary>
            <param name="eventData">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.SaveFailedToPublish(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method saves incomplete (failed to queue) event data to the store. Use this strictly for incomplete events.
            </summary>
            <param name="eventData">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.DeleteFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a failed event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.DeleteFailedToConsume(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Method deletes many failed event by its id.
            </summary>
            <param name="ids">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a count of the result of the operation.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.DeleteFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a incomplete (failed to queue) event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.DeleteFailedToPublish(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Method deletes a incomplete (failed to queue) event by its id.
            </summary>
            <param name="ids">The event data ids.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and page parameters.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindAllFailedToConsume(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of failed events filtered by specific tenant and page parameters.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindAllFailedToConsumeByEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific event name.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindAllFailedToConsumeByEventNames(System.Collections.Generic.IEnumerable{System.String},SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by a list of event names.
            </summary>
            <param name="eventNames">The event name list.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindAllFailedToConsumeByPartialBeginningEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by a partial match on the beginning of an event name.
            </summary>
            <param name="partialEventName">The partial event name.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindAllFailedToPublish(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of incomplete (failed to queue) events filtered by specific tenant and page parameters. 
            It returns only part of it based on page parameters (page number, size, sorting order) and additional query, if supplied.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindAllFailedToPublishByEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindAllForAggregate(System.Guid,System.String,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="tenantId">The tenant Id</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.Count(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of events for specified tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.CountFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of failed events for specified tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.CountFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of incomplete (failed to queue) events for specified tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds an event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindOneFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a failed event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindOneFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a incomplete (failed to queue) event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindAllForAggregate(System.Guid,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindAllForAggregate(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="aggregateName">The aggregate name.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindAllByEventNameandAggregateName(System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="pagedParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.FindAllByEventNameandAggregateName(System.String,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="fieldName">The field name to check for existance</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.DeleteRawEvent(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a event from RawEvents by its ID
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.RetrieveFailedDiagnostics(System.Threading.CancellationToken)">
            <summary>
            Methods returns the diagnostics information about failed events collections. It returns 2 counts - failed to published and consumed. 
            The counts are limited by 10, therefore if collection contains more than 10 events, it still returns value of 10.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns instance of <see cref="T:TaxHub.Common.EventStore.FailedDiagnosticsData"/>.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.RetrieveFailedDetailedDiagnostics(System.Threading.CancellationToken)">
            <summary>
            Methods returns the diagnostics information about failed events collections. It returns 2 dictionaries - failed to published and consumed. 
            Each contains the list of event names with their total counts.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns instance of <see cref="T:TaxHub.Common.EventStore.FailedDiagnosticsDetailedData"/>.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStore.DeleteManyFailedToConsumeEventsByEventNameForMigration(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.EventStore.EventStoreSetup.InitializeUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Method initializes Unity container with necessary event store related registrations.
            </summary>
            <param name="container">The unity container.</param>
        </member>
        <member name="P:TaxHub.Common.EventStore.IAggregateSnapshotFilter.TenantId">
            <summary>
            Gets or sets the tenantId message filter to apply; this is an optional parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.IAggregateSnapshotFilter.AggregateId">
            <summary>
            Gets or sets the aggregateId message filter to apply; this is an optional parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.IAggregateSnapshotFilter.StartUtcDateTime">
            <summary>
            Gets or sets the start date and time (in UTC) message filter to apply; this is an optional parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.IAggregateSnapshotFilter.EndUtcDateTime">
            <summary>
            Gets or sets the end date and time (in UTC) message filter to apply; this is an optional parameter.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.IAggregateSnapshotFilter.AdditionalFilters">
            <summary>
            Gets or sets additional filters specific to particular aggregate to apply; these are optional parameters.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.IAggregateSnapshotFilter.HasTenantId">
            <summary>
            Method evaluates an TenantId property and determines whether it's provided or not.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IAggregateSnapshotFilter.HasAggregateId">
            <summary>
            Method evaluates an AggregateId property and determines whether it's provided or not.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IAggregateSnapshotFilter.HasStartDate">
            <summary>
            Method evaluates an StartUtcDateTime property and determines whether it's provided or not.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IAggregateSnapshotFilter.HasEndDate">
            <summary>
            Method evaluates an StartUtcDateTime property and determines whether it's provided or not.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IAggregateSnapshotFilter.HasStartAndEndDates">
            <summary>
            Method evaluates an StartUtcDateTime property and determines whether it's provided or not.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="T:TaxHub.Common.EventStore.AggregateEvent">
            <summary>
            The delegate used to raise an aggregate event.
            </summary>
            <param name="sender">The sender of event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:TaxHub.Common.EventStore.AggregateEventArgs">
            <summary>
            The aggregate event arguments to use with AggregateEvent.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.AggregateEventArgs.EventData">
            <summary>
            Gets or sets the event data.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.AggregateEventArgs.#ctor(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Constructor that accepts event data.
            </summary>
            <param name="eventData">The event data.</param>
        </member>
        <member name="M:TaxHub.Common.EventStore.AggregateEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TaxHub.Common.EventStore.ApplicationEvent">
            <summary>
            The delegate used to raise an application domain event.
            </summary>
            <param name="sender">The sender of event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:TaxHub.Common.EventStore.ApplicationEventArgs">
            <summary>
            The aggregate event arguments to use with ApplicationEvent.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.ApplicationEventArgs.EventData">
            <summary>
            Gets or sets the event data.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.ApplicationEventArgs.#ctor(TaxHub.Common.EventStore.DomainEventData)">
            <summary>
            Constructor that accepts event data.
            </summary>
            <param name="eventData">The event data.</param>
        </member>
        <member name="M:TaxHub.Common.EventStore.ApplicationEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:TaxHub.Common.EventStore.DomainEventData">
            <summary>
            Domain event data. This is used for application and aggregate level of events.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.Id">
            <summary>
            Gets or sets an identifier for the event.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.EventName">
            <summary>
            Gets or sets the event name. This value must adhere to the following pattern: "{bounded-context}.{aggregate-name}.{event-name-in-past-tense}".
            </summary>
            <remarks>Any "observed" event will automatically trigger the "Ignore By Event Store" flag E.g. "payment.pay.observed"</remarks>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.TenantId">
            <summary>
            Gets or sets the tenant Id. Should be set for all events, except system events that have no association with particular tenant.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.AggregateId">
            <summary>
            Gets or sets the aggregate id. Should be set for all aggregate level events.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.AggregateName">
            <summary>
            Gets or sets the aggregate name (the full class name). Should be set for all aggregate level events.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.Details">
            <summary>
            Gets or sets the details of event. The structure depends on an event.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.UtcTimestamp">
            <summary>
            Gets or sets the UTC timestamp of the event.
            The property is writable for such cases when actual event time is slightly different from event data recording time.
            The property should not be modified outside of the context creating the event.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.EffectiveDatetime">
            <summary>
            Gets or sets the UTC timestamp when the event becomes effective.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.CorrelationId">
            <summary>
            Gets or sets the correlation id for the event. Must me set if available within the event context.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.AggregateVersion">
            <summary>
            Gets or sets the aggregate's version at the time an event occurred. Should be set for all aggregate level events.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.SchemaVersion">
            <summary>
            Gets or sets the event schema version at the time an event occurred.
            </summary>
            <remarks>This value is null by default: check before using it.</remarks>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.UserId">
            <summary>
            Gets or sets the UserId of the user executed a transaction causing the event.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.UserDescription">
            <summary>
            Gets or sets the user description of the user executed a transaction causing the event.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.SequenceNumber">
            <summary>
            Gets or sets the event order.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.IsInbound">
            <summary>
            Gets or sets the flag indicated the inbound event, that is an event coming from the MQ.
            This information does not persist, but used for internal logic, such as being ignored by the event store.
            </summary>
        </member>
        <member name="P:TaxHub.Common.EventStore.DomainEventData.IsHandled">
            <summary>
            Gets or sets the flag indicated whether the event has been already handled.
            This flag does not persist and being ignored by the event store.
            Messaging infrastructure does not require any behavior on this property by the subscribers.
            Subscribers may set this property and have their internal logic dealing with it.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.DomainEventData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.DomainEventData.#ctor(System.String)">
            <summary>
            Constructor that accepts event name.
            </summary>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:TaxHub.Common.EventStore.DomainEventData.#ctor(System.String,System.Object)">
            <summary>
            Constructor that accepts event name and details object.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventDetails">The event name.</param>
            <returns>Returns instance of <see cref="T:TaxHub.Common.EventStore.DomainEventData"/></returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.DomainEventData.ToString">
            <summary>
            Methods creates a string representation of event.
            </summary>
            <returns>Returns string.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.DomainEventData.IgnoreByEventStore">
            <summary>
            Method ensures the event won't be saved into Event Store while being published to the message hub.
            </summary>
            <remarks>Use this method wisely. It is intended for messages that should either not be stored at event store or being republished from another message queue.</remarks>
            <returns>Returns current instance.</returns>
        </member>
        <member name="T:TaxHub.Common.EventStore.IEventStore">
            <summary>
            The interface that should be implemented by a class providing Event Store functionality.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.Save(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method saves event data to the store.
            </summary>
            <param name="eventData">The data to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.Update(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method updates event data to the store.
            </summary>
            <param name="eventData">The data to update.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.Save(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Method saves multiple events data to the store.
            </summary>
            <param name="eventsData">The data to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.SaveFailedToConsume(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method saves failed event data to the store. Use this strictly for failed events.
            </summary>
            <param name="eventData">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.SaveFailedToPublish(TaxHub.Common.EventStore.DomainEventData,System.Threading.CancellationToken)">
            <summary>
            Method saves incomplete (failed to queue) event data to the store. Use this strictly for incomplete events.
            </summary>
            <param name="eventData">The item to save.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.DeleteFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a failed event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.DeleteFailedToConsume(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Method deletes many failed event by its ids.
            </summary>
            <param name="ids">The event data ids.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.DeleteFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a incomplete (failed to queue) event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.DeleteFailedToPublish(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Method deletes a incomplete (failed to queue) event by its id.
            </summary>
            <param name="ids">The event data ids.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.DeleteRawEvent(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a event from RawEvents collection by its ID
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.DeleteManyRawEventsForMigration(MongoDB.Driver.FilterDefinition{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Method deletes events based on a filter.  As the name implies this should only be used in migrations.
            </summary>
            <param name="filter">The filter.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.DeleteManyFailedToConsumeEventsByEventNameForMigration(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Method deletes events from FailedToConsumeEvents collection by a list of event names
            </summary>
            <param name="eventNamesToDelete">The collection containing the names of the events to delete</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The number of events deleted</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IEventStore.DeleteManyFailedToConsumeEventsForMigration(MongoDB.Driver.FilterDefinition{TaxHub.Common.EventStore.DomainEventData},System.Threading.CancellationToken)">
            <summary>
            Method deletes events based on a filter.  As the name implies this should only be used in migrations.
            </summary>
            <param name="filter">The filter.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="T:TaxHub.Common.EventStore.IQueryableEventStore">
            <summary>
            The interface that should be implemented by a class providing Event Store functionality.
            </summary>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAll(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and page parameters.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.Count(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of events for specified tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAllFailedToConsume(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of failed events filtered by specific tenant and page parameters.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAllFailedToConsume(System.Guid,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of failed events filtered by specific event name and page parameters.
            </summary>
            <param name="tenantId">The tenant ID</param>
            <param name="eventName">The event name.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAllForAggregate(System.Guid,System.String,System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="tenantId">The tenant ID</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.CountFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of failed events for specified tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAllFailedToPublish(System.Guid,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of incomplete (failed to queue) events filtered by specific tenant and page parameters. 
            It returns only part of it based on page parameters (page number, size, sorting order) and additional query, if supplied.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAllFailedToPublishByEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Finds all the failed to publish events filtered by an event name
            </summary>
            <param name="eventName">The event name</param>
            <param name="pageParams">The page parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.CountFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method provides the total count of incomplete (failed to queue) events for specified tenant.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns long number.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds an event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindOneFailedToConsume(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a failed event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindOneFailedToPublish(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method finds a incomplete (failed to queue) event by its id.
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns <see cref="T:TaxHub.Common.EventStore.DomainEventData"/> instance or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAllForAggregate(System.Guid,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAllForAggregate(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            NOTICE: THIS METHOD DOES NOT HAVE AN INDEX THAT SUPPORTS THIS OPERATION IN LARGE COLLECTIONS...
            </summary>
            <param name="aggregateName">The aggregate name.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.DeleteRawEvent(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method deletes a event from RawEvents collection by its ID
            </summary>
            <param name="id">The event data id.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAllByEventNameandAggregateName(System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="eventName">The aggregate id.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAllByEventNameandAggregateName(System.String,System.String,System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific tenant and aggregate.
            </summary>
            <param name="eventName">The aggregate id.</param>
            <param name="aggregateName">The aggregate name.</param>
            <param name="fieldName">The filter condition.</param>
            <param name="pageParams">The page parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAllFailedToConsumeByEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by specific event name.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="pageParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAllFailedToConsumeByEventNames(System.Collections.Generic.IEnumerable{System.String},SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Methods returns the list of events filtered by a list of event names.
            </summary>
            <param name="eventNames">List of event names.</param>
            <param name="pageParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.FindAllFailedToConsumeByPartialBeginningEventName(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Method returns the list of events filtered by a partial match on the beginning of an event name.
            </summary>
            <param name="partialEventName">The partial event name.</param>
            <param name="pagedParams">Paging Parameters.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns the IEnumerable of events.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.RetrieveFailedDiagnostics(System.Threading.CancellationToken)">
            <summary>
            Methods returns the diagnostics information about failed events collections. It returns 2 counts - failed to published and consumed. 
            The counts are limited by 10, therefore if collection contains more than 10 events, it still returns value of 10.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns instance of <see cref="T:TaxHub.Common.EventStore.FailedDiagnosticsData"/>.</returns>
        </member>
        <member name="M:TaxHub.Common.EventStore.IQueryableEventStore.RetrieveFailedDetailedDiagnostics(System.Threading.CancellationToken)">
            <summary>
            Methods returns the diagnostics information about failed events collections. It returns 2 dictionaries - failed to published and consumed. 
            Each contains the list of event names with their total counts.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns instance of <see cref="T:TaxHub.Common.EventStore.FailedDiagnosticsDetailedData"/>.</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.DecimalExtensions.RoundDecimalAwayFromZero(System.Decimal,System.Int32)">
            <summary>
            Rounds a decimal value to a specified number of fractional digits, and uses the AwayFromZero rounding convention for midpoint values.
            When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.
            </summary>
            <param name="input">The input decimal value.</param>
            <param name="precision">The number of digits following the decimal point.</param>
            <returns>A rounded decimal value.</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.DecimalExtensions.HasExtraDecimalPlaces(System.Decimal,System.Int32)">
            <summary>
            Determines whether the given decimal value has extra decimal places.
            This implementation uses the GetBits method to retrieve the component parts of a 32-bit signed integer array with four elements that contain the binary representation of the decimal value.
            The fourth element of the returned array contains the scale factor and sign which consists of the following parts:
            Bits 0 to 15, the lower word, are unused and must be zero.
            Bits 16 to 23 contain an exponent between 0 and 28, which indicates the power of 10 to divide the integer number.
            Bits 24 to 30 are unused and must be zero.
            Bit 31 contains the sign (0 = positive, 1 = negative).
            Using the BitConverter.GetBytes method the scale factor and sign value is then converted to an array of bytes with a length of four representing these parts.
            The order of bytes in the array returned by the GetBytes method depends on whether the computer architecture is little-endian or big-endian (endianness).
            Most common computers use little-endian format for byte ordering, therefore, it is expected to find the amount of decimal places (exponent) in the third element of the array.
            The sequence of the array is reversed if the byte order in which data is stored in the current computer is not little-endian.
            </summary>
            <param name="input">The input decimal value.</param>
            <param name="maxDecimalPlaces">The maximum number of decimal places.</param>
            <returns>A boolean indicating if the given decimal has more than maxDecimalPlaces.</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.DecimalExtensions.GetRoundedValue(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            Rounds a decimal value to a specified number of fractional digits, and uses the AwayFromZero rounding convention for midpoint values.
            When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.
            </summary>
            <param name="value">The input decimal value.</param>
            <param name="precision">The number of digits following the decimal point.</param>
            <returns>A rounded decimal value. Returns null if the value provided is null. Throws if the precision value provided is negative</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.HttpContentExtensions.GetContent``1(System.Net.Http.HttpContent)">
            <summary>
            Extract and deserialize http content data.
            </summary>
            <typeparam name="T">Expected to which data will be deserialized</typeparam>
            <param name="httpContent">The http content.</param>
            <returns>The deserialized content data.</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.StreamExtensions.CleanUp(System.IO.Stream,System.Boolean,TaxHub.Hosting.Extensions.OverwriteAlgorithm)">
            <summary>
            Handles cleaning up after a stream, and deletes the file if it is a <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="stream">The stream.</param>
            <param name="useSecureErase">Delete file using Secure Erase.</param>
            <param name="overwriteAlgorithm">The algorithm to use when <paramref name="useSecureErase"/> is <value>true</value>.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.TemporaryStreamResultExtensions.PopulateFromHttpRequest(TaxHub.Hosting.Runtime.TemporaryStreamResult,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Int64)">
            <summary>
            Populates the properties of a temporary file stream result
            from an HttpRequestMessage.
            </summary>
            <param name="streamResult">The TemporaryFileStreamResult.</param>
            <param name="request">The HTTP request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="tempFileStreamSizeByteLimit">Files greater than this will
            be temporarily persisted to disk. Default is 8mb.</param>
            <returns>Task</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.TExtensions.CloneObject``1(``0)">
            <summary>
                Clones a object via shallow copy
            </summary>
            <typeparam name="T">Object Type to Clone</typeparam>
            <param name="obj">Object to Clone</param>
            <returns>New Object reference</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.ConcurrentBagExtensions.Clear``1(System.Collections.Concurrent.ConcurrentBag{``0}@)">
            <summary>
            A helper method to clear a concurrent bag in a thread-safe manner. Due to extension methods not supporting by reference passing of "this", it can't be an extension method.
            </summary>
            <typeparam name="T">The type parameter of to be used for the bag.</typeparam>
            <param name="bag">The reference of the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> to clear.</param>
        </member>
        <member name="M:TaxHub.Common.Extensions.DataContextExtensions.WithIsolationLevel(System.Data.Entity.DbContext,System.Data.IsolationLevel)">
            <summary>
            Sets the isolation level for a given dbcontext.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns>The same DbContext.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">isolationLevel - null</exception>
        </member>
        <member name="M:TaxHub.Common.Extensions.ConfigSectionExtensions.SynchronizeConfigurationValues``1(``0,TaxHub.Configuration.IConfigSection)">
            <summary>
            Sets the properties on an existing configuration object based on the current configuration section values.
            </summary>
            <typeparam name="T">The type representing the configuration section.</typeparam>
            <param name="configObjectInstance">An instance of the specified <typeparamref name="T"/> to set the properties on.</param>
            <param name="configSection">The corresponding <see cref="T:TaxHub.Configuration.IConfigSection"/> for <paramref name="configObjectInstance"/> to read new values from.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.CommandExtensions.CopyPropertiesTo``2(``0,``1)">
            <summary>
            *****Let's not use this function unless you really need it****
            It is more expensive and when there are errors in the copying it's hard to detect
            what the problem is looking at the logs.
            Copies the properties to
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TU">The type of the u.</typeparam>
            <param name="source">The source.</param>
            <param name="dest">The dest.</param>
            <returns>dest</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.EnumerableExtentions.ToStringWithPrefixAndSeparator``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            To the string with prefix and separator.
            </summary>
            <param name="strings">The strings.</param>
            <param name="prefix">The prefix.</param>
            <param name="separator">The separator.</param>
            <returns>The string concatenating all strings with prefix and separated by separator.</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.EnumerableExtentions.ToStringWithSeparatorAndMaxLength``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String)">
            <summary>
            Concatenates the elements of the given collection using the specified separator and maximum length.
            </summary>
            <param name="collection">The collection of strings.</param>
            <param name="maxLength">The maximum length for the resulting string.</param>
            <param name="separator">The separator.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.EnumerableExtentions.CollectionEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Does and unsorted comparison bewteen lists: list1 and list2, using IEquatable comparison on each list member.
            Members must implement IEquatable and override GetHashCode and equals operator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list1">The list1.</param>
            <param name="list2">The list2.</param>
            <returns>True if both list are equal</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.ListExtensions.Shuffle``1(System.Collections.Generic.List{``0})">
            <summary>
            Fisher Yates shuffle
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">List</param>
        </member>
        <member name="M:TaxHub.Common.Extensions.ListExtensions.AddIfNotNull``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Add the value to the list if it's not null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The list.</param>
            <param name="value">The value.</param>
            <returns>true if added</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.ListExtensions.AddRangeIfNotNull``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Add the value to the list if it's not null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The list.</param>
            <param name="value">The value.</param>
            <returns>true if added</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.MongoExtensions.ToDynamic(MongoDB.Bson.BsonDocument)">
            <summary>
            Deserializes this bson doc to a .net dynamic object
            </summary>
            <param name="bson">Bson doc to convert to dynamic</param>
            <returns>Returns dynamic type object.</returns>
        </member>
        <member name="M:TaxHub.Common.Extensions.MongoExtensions.CreateAggregationPipeline(TaxHub.Common.Extensions.IMongoAggregationScript)">
            <summary>
            Method creates an aggregation pipeline from the JSON provided by T4 template class.
            </summary>
            <param name="script">The T4 template class representing Aggregation pipeline in a JSON format.</param>
            <returns>Returns an aggregation pipeline elements as IEnumerable of BsonDocuments.</returns>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.FileInformation">
            <summary>
            File information class.
            </summary>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.FileInformation.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.GlobalServices.FileInformation"/> class.
            </summary>
            <param name="fullName">The full path of the file.</param>
            <param name="name">The file name.</param>
            <param name="length">The file length.</param>
        </member>
        <member name="P:TaxHub.Common.GlobalServices.FileInformation.Name">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:TaxHub.Common.GlobalServices.FileInformation.FullName">
            <summary>
            Gets or sets the full path of the file.
            </summary>
        </member>
        <member name="P:TaxHub.Common.GlobalServices.FileInformation.Length">
            <summary>
            Gets or sets the size, in bytes, of the file.
            </summary>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient">
            <summary>
            Service client responsible for setting up subscribers, subscriptions,
            and event filters in DED.
            </summary>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory,TaxHub.Common.Security.KeyServer.IDedApiCredentialsProviderFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">Application logger.</param>
            <param name="clientFactory">HttpClient factor.</param>
            <param name="credentialsProviderFactory">The ded credentials provider factory.</param>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.CreateSubscriber(TaxHub.Common.GlobalServices.Ded.DedSubscriberRequest,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Creates a subscriber in DED.
            </summary>
            <param name="request">Subscriber request</param>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result of DED request, including DED provided id.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.GetSubscribers(System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Gets subscribers from DED.
            </summary>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Collection of DED Subscribers</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.DeleteSubscriber(System.Guid,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Deletes an subscriber from DED.
            </summary>
            <param name="subscriberId">Subscriber id.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Subscriber result</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.CreateSubscription(TaxHub.Common.GlobalServices.Ded.DedSubscriptionRequest,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Creates a subscription in DED.
            </summary>
            <param name="request">Subscription request</param>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Result of DED request, including DED provided id.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.GetSubscriptions(System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Gets subscriptions from DED.
            </summary>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Collection of DED Subscribers</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.UpdateSubscription(System.Guid,TaxHub.Common.GlobalServices.Ded.DedSubscriptionRequest,TaxHub.Common.Configuration.DataCenter,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Updates subscriptions from DED.
            </summary>
            <param name="subscriptionId">The subscription's id.</param>
            <param name="subscription">The subscription.</param>
            <param name="dataCenter">The data center.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Collection of DED Subscribers</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.DeleteSubscription(System.Guid,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Deletes an subscription from DED.
            </summary>
            <param name="subscriptionId">Subscription id.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Subscription result</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.CreateEventFilter(TaxHub.Common.GlobalServices.Ded.DedEventFilterRequest,System.Guid,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Creates an event filter in DED.
            </summary>
            <param name="request">Event filter request</param>
            <param name="subscriptionId">The ded subscription id.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Result of DED request, including DED provided id.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.GetEventFilters(System.Guid,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Gets event filters for a subscription from DED.
            </summary>
            <param name="subscriptionId">The ded subscription id.</param>
            <param name="correlationId">The correlation id.</param>
            /// <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Collection of DED Subscribers</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.DeleteEventFilter(System.Guid,System.Guid,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Deletes an event filter from DED.
            </summary>
            <param name="subscriptionId">Subscription id</param>
            <param name="eventId">Event filter id.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Event filter result</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.GetAuthHeader(TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Gets authentication header data from credentials provider.
            </summary>
            /// <param name="dataCenter">The data center.</param>
            <returns>AuthenticationHeaderValue</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.HandleRetryLogging``1(SmartHub.Hosting.Runtime.RetryPolicy.RetryResult{``0},System.Guid)">
            <summary>
            Logs any exceptions that occured during retry policy as debug.
            </summary>
            <typeparam name="T">The retry result value.</typeparam>
            <param name="retryResult">The retry result.</param>
            <param name="correlationId">The correlation id.</param>
            <remarks>
            We chose debug since since setting SetThrowOnPolicyFail to true
            will throw exceptions at the if none of the attempts were
            successful. If we call this, we expect that one attempt worked so
            debug is appropiate.
            </remarks>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedApiServiceClient.Dispose">
            <summary>
            Method disposes any resources used by the class.
            </summary>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.Ded.DedEventFilterResult">
            <summary>
            Holds data for a an event filter created in DED.
            </summary>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.Ded.DedSubscriberResult">
            <summary>
            Holds data for a subscriber created in DED.
            </summary>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfo">
            <summary>
            Holds data for a subscription created in DED.    
            </summary>
        </member>
        <member name="P:TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfo.Key">
            <summary>
            Datacenter Subscription Key. "dedAtlSubscriberId" or "dedAtlSubscriptionId" for example
            </summary>
        </member>
        <member name="P:TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfo.Value">
            <summary>
            Subscriber or Subscription ID for the appropriate datacenter key.
            </summary>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfoRepository.Update(TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfo,System.Threading.CancellationToken)">
            <summary>
            Method updates subscriber or subscription ID based on datacenter Key
            </summary>
            <param name="item">The item to update.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfoRepository.Delete(TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfo,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The DedSubscriptionInfo object that needs to be deleted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the objec it found and deleted, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfoRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes.
            </summary>
            <param name="withDrop">If true enforces </param>
            <returns>Returns Task.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedSubscriptionInfoService.SaveSubscriptionInfo(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Updates DED Subscription info if it exists already and creates it if it does not exist.
            </summary>
            <param name="key">Datacenter key to update or create</param>
            <param name="value">DED Subscription or Subscriber ID for the datacenter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Indication of Successful save.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedSubscriptionInfoService.GetSubscriptionInfo(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the subscription info for the datacenter key given.
            </summary>
            <param name="key">Datacenter subscriber key to find</param>
            /// <param name="cancellationToken">Cancellation token</param>
            <returns>The subscriber ID associated with that datacenter.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedSubscriptionInfoService.DeleteSubscriptionInfo(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes DED Subscription info if it exists.
            </summary>
            <param name="key">Datacenter subscriber key to delete</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if deletion happens successfully, otherwise false.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfoService.SaveSubscriptionInfo(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Updates DED Subscription info if it exists already and creates it if it does not exist.
            </summary>
            <param name="key">Datacenter key to update or create</param>
            <param name="value">DED Subscription or Subscriber ID for the datacenter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Success or failure.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfoService.GetSubscriptionInfo(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the subscription info for the datacenter key given.
            </summary>
            <param name="key">Datacenter subscriber key to find</param>
            /// <param name="cancellationToken">Cancellation token</param>
            <returns>The subscriber ID associated with that datacenter.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfoService.DeleteSubscriptionInfo(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the subscription info for the datacenter key given.
            </summary>
            <param name="key">Datacenter subscriber key to find</param>
            /// <param name="cancellationToken">Cancellation token</param>
            <returns>True if specified Subscription found and deleted, otherwise false.</returns>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.Ded.DedSubscriptionResult">
            <summary>
            Holds data for a subscription created in DED.    
            </summary>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedApiServiceClient.CreateSubscriber(TaxHub.Common.GlobalServices.Ded.DedSubscriberRequest,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Creates a subscriber in DED.
            </summary>
            <param name="request">Subscriber request</param>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Result of DED request, including DED provided id.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedApiServiceClient.GetSubscribers(System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Gets subscribers from DED.
            </summary>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Collection of DED Subscribers</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedApiServiceClient.DeleteSubscriber(System.Guid,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Deletes an subscriber from DED.
            </summary>
            <param name="subscriberId">Subscriber id.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Subscriber result</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedApiServiceClient.CreateSubscription(TaxHub.Common.GlobalServices.Ded.DedSubscriptionRequest,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Creates a subscription in DED.
            </summary>
            <param name="request">Subscription request</param>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Result of DED request, including DED provided id.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedApiServiceClient.UpdateSubscription(System.Guid,TaxHub.Common.GlobalServices.Ded.DedSubscriptionRequest,TaxHub.Common.Configuration.DataCenter,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Update subscription in DED.
            </summary>
            <param name="subscriptionId">The subscription's id.</param>
            <param name="subscription">The subscription.</param>
            <param name="dataCenter">The data center.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Collection of DED Subscribers</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedApiServiceClient.GetSubscriptions(System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Gets subscriptions from DED.
            </summary>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Collection of DED Subscribers</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedApiServiceClient.DeleteSubscription(System.Guid,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Deletes an subscription from DED.
            </summary>
            <param name="subscriptionId">Subscription id.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Subscription result</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedApiServiceClient.CreateEventFilter(TaxHub.Common.GlobalServices.Ded.DedEventFilterRequest,System.Guid,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Creates an event filter for a subscription in DED.
            </summary>
            <param name="request">Event filter request</param>
            <param name="subscriptionId">The ded subscription id.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Result of DED request, including DED provided id.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedApiServiceClient.GetEventFilters(System.Guid,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Gets event filters for a subscription from DED.
            </summary>
            <param name="subscriptionId">The ded subscription id.</param>
            <param name="correlationId">The correlationId</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Collection of DED Subscribers</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedApiServiceClient.DeleteEventFilter(System.Guid,System.Guid,System.Guid,TaxHub.Common.Configuration.DataCenter,System.Threading.CancellationToken)">
            <summary>
            Deletes an event filter from DED.
            </summary>
            <param name="subscriptionId">The ded subscription id.</param>
            <param name="eventId">Event filter id.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="dataCenter">The data center.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Event filter result</returns>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.Ded.IDedSubscriptionInfoRepository">
            <summary>
            The interface implemented by a class providing storage facility for the DED Subscription data.
            </summary>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedSubscriptionInfoRepository.EnsureCollection(System.Boolean)">
            <summary>
            Method optionally drops the collection and recreates it with all required indexes.
            </summary>
            <param name="withDrop">Drops the collection when True.</param>
            <returns>Returns a task representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.IDedSubscriptionInfoRepository.Update(TaxHub.Common.GlobalServices.Ded.DedSubscriptionInfo,System.Threading.CancellationToken)">
            <summary>
            Method updates subscriber or subscription ID based on datacenter Key
            </summary>
            <param name="item">The item to update.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.Ded.DedEventFilterRequest">
            <summary>
            Holds data for creating an event filter in DED.
            </summary>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedEventFilterRequest.#ctor">
            <summary>
            Creates a new instance of DedEventFilterRequest.
            </summary>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.Ded.DedSubscriberRequest">
            <summary>
            Holds data for creating a subscriber in DED.
            </summary>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.Ded.DedSubscriptionRequest">
            <summary>
            Holds data for creating a subscriber in DED.
            </summary>
        </member>
        <member name="P:TaxHub.Common.GlobalServices.Ded.DedSubscriptionRequest.Secret">
            <summary>
            Secret key sent to DED for HMAC.
            </summary>
            <remarks>
            Should not be saved to disk, we can lookup from key
            server if we need to resend. Uses BsonIgnore attribute.
            </remarks>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.Ded.DedSubscriptionRequest.#ctor">
            <summary>
            Creates a new instance of DedSubscriptionRequest.
            </summary>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.NetworkConnection">
            <summary>
            Class helps to manage network credentials accessing a network share.
            </summary>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.ODataServices.IODataCredentialsProvider.GetCredentials(System.String)">
            <summary>
            Gets the credentials by client access key.
            </summary>
            <param name="cak">The client access key.</param>
            <returns>Return ODataCredentials by cak</returns>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.UdesFileShareServiceClient">
            <summary>
            Class provides connectivity to the UDES service.
            </summary>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.UdesFileShareServiceClient.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.GlobalServices.IUdesFileShareCredentialsProvider,TaxHub.Common.Configuration.IFileManagementConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="credentialsProvider">The credentials provider.</param>
            <param name="fileManagementConfiguration">The system configuration.</param>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.UdesFileShareServiceClient.InitializeConnection">
            <summary>
            Method initializes connection to the UDES file share server using current configuration and credentials provider.
            </summary>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.UdesFileShareServiceClient.Save(System.String,System.String,System.IO.FileInfo,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method asynchronously creates an object at the UDES from given file.
            </summary>
            <param name="containerName">Container name.</param>
            <param name="objectName">The object name to create.</param>
            <param name="fileInfo">The file info object to create an object from.</param>
            <param name="correlationId">The correlationId associated with the process.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.UdesFileShareServiceClient.Save(System.String,System.String,System.IO.Stream,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method asynchronously creates an object at the UDES from given stream.
            </summary>
            <param name="containerName">Container name.</param>
            <param name="objectName">The object name to create.</param>
            <param name="stream">The stream to create a file from.</param>
            <param name="correlationId">The correlationId associated with the process.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.UdesFileShareServiceClient.Get(System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method asynchronously gets an object from the UDES by given name.
            </summary>
            <param name="containerName">Container name.</param>
            <param name="objectName">The object name to create.</param>
            <param name="correlationId">The correlationId associated with the process.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns Stream object.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.UdesFileShareServiceClient.GetList(System.String,System.Guid)">
            <summary>
            Method asynchronously gets the list of objects existing at the UDES.
            </summary>
            <param name="containerName">Container name.</param>
            <param name="correlationId">The correlationId associated with the process.</param>
            <returns>Returns dynamic type object.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.UdesFileShareServiceClient.GetList(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.GlobalServices.UdesFileShareServiceClient.Exists(System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method asynchronously checks if an object exists at the UDES.
            </summary>
            <param name="containerName">Container name.</param>
            <param name="objectName">The object name.</param>
            <param name="correlationId">The correlationId associated with the process.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.UdesFileShareServiceClient.Delete(System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.GlobalServices.UdesFileShareServiceClient.Dispose">
            <summary>
            Method disposes any resources used by the class.
            </summary>
        </member>
        <member name="T:TaxHub.Common.GlobalServices.HumanReadableCurrencyHelper">
            <summary>
            A static class to help transform a decimal number representing a currency 
            into a string that could be written onto a check.  It will be padded either
            on the left or the right with asterisks up to one hundred characters.
            </summary>
            <remarks>
            Original Source: http://www.blackbeltcoder.com/Articles/strings/converting-numbers-to-words
            </remarks>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.HumanReadableCurrencyHelper.Convert(System.Decimal,TaxHub.Common.GlobalServices.PadDirection,System.Int32)">
            <summary>
            Converts the specified number to a variable length character string representation
            that could be printed on a check.
            </summary>
            <param name="value">The number to convert</param>
            <param name="padDirection">Whether to pad the left or right side of the string with asterisks.</param>
            <param name="paddingLength">If the string representation is less than this number, it will be padded 
            with asterisks to this length.</param>
            <returns>A string representation of the specified number padded in the specified padding direction with asterisks
            up to 'paddingLength' characters.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.HumanReadableCurrencyHelper.ToHumanReadable(System.Decimal,TaxHub.Common.GlobalServices.PadDirection,System.Int32)">
            <summary>
            Converts this number to a variable length character string representation
            that could be printed on a check.
            </summary>
            <param name="value">The number to convert</param>
            <param name="padDirection">Whether to pad the left or right side of the string with asterisks.</param>
            <param name="paddingLength">If the string representation is less than this number, it will be padded 
            with asterisks to this length.</param>
            <returns>A string representation of the specified number padded in the specified padding direction with asterisks
            up to 'paddingLength' characters.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.HumanReadableCurrencyHelper.ToHumanReadable(System.Int32,TaxHub.Common.GlobalServices.PadDirection,System.Int32)">
            <summary>
            Converts this number to a variable length character string representation
            that could be printed on a check.
            </summary>
            <param name="value">The number to convert</param>
            <param name="padDirection">Whether to pad the left or right side of the string with asterisks.</param>
            <param name="paddingLength">If the string representation is less than this number, it will be padded 
            with asterisks to this length.</param>
            <returns>A string representation of the specified number padded in the specified padding direction with asterisks
            up to 'paddingLength' characters.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.IUdesServiceClient.Save(System.String,System.String,System.IO.FileInfo,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method asynchronously creates an object at the UDES from given file.
            </summary>
            <param name="containerName">Container name.</param>
            <param name="objectName">The object name to create.</param>
            <param name="fileInfo">The file info object to create an object from.</param>
            <param name="correlationId">The correlationId associated with the process.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.IUdesServiceClient.Save(System.String,System.String,System.IO.Stream,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method asynchronously creates an object at the UDES from given stream.
            </summary>
            <param name="containerName">Container name.</param>
            <param name="objectName">The object name to create.</param>
            <param name="stream">The stream to create a file from.</param>
            <param name="correlationId">The correlationId associated with the process.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.IUdesServiceClient.Get(System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method asynchronously gets an object from the UDES by given name.
            </summary>
            <param name="containerName">Container name.</param>
            <param name="objectName">The object name to create.</param>
            <param name="correlationId">The correlationId associated with the process.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns Stream object.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.IUdesServiceClient.GetList(System.String,System.Guid)">
            <summary>
            Method asynchronously gets the list of objects existing at the UDES.
            </summary>
            <param name="containerName">Container name.</param>
            <param name="correlationId">The correlationId associated with the process.</param>
            <returns>Returns dynamic type object.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.IUdesServiceClient.GetList(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Method asynchronously gets the information for the files existing at the UDES.
            </summary>
            <param name="containerName">The container name.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.IUdesServiceClient.Exists(System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method asynchronously deletes an object at the UDES.
            </summary>
            <param name="containerName">Container name.</param>
            <param name="objectName">The object name.</param>
            <param name="correlationId">The correlationId associated with the process.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.IUdesServiceClient.Delete(System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method asynchronously deletes an object at the UDES.
            </summary>
            <param name="containerName">Container name.</param>
            <param name="objectName">The object name.</param>
            <param name="correlationId">The correlationId associated with the process.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns boolean indicator of success.</returns>
        </member>
        <member name="M:TaxHub.Common.GlobalServices.IUdesServiceClient.Dispose">
            <summary>
            Method disposes any resources used by the class.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Helpers.AppMetricsTagHelper.WithTag(TaxHub.Common.Helpers.AppMetricsTagHelper.DynamicTags,System.String,System.String)">
            <summary>
            Return a new Instance of DynamicTags with the new tags.
            </summary>
            <param name="tags">THe tag object</param>
            <param name="key">The Key</param>
            <param name="value">The Value</param>
            <returns>A new instance of <see cref="T:TaxHub.Common.Helpers.AppMetricsTagHelper.DynamicTags"/>.</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.AppMetricsTagHelper.CopyTags(TaxHub.Common.Helpers.AppMetricsTagHelper.DynamicTags)">
            <summary>
            Return a new Instance of DynamicTags.
            </summary>
            <param name="tags">THe tag object</param>
            <returns>A new instance of <see cref="T:TaxHub.Common.Helpers.AppMetricsTagHelper.DynamicTags"/>.</returns>
        </member>
        <member name="T:TaxHub.Common.Helpers.IUserSecurityInfoAsyncLocalStore">
            <summary>
            Interface to define the IAsyncLocalContextStore
            </summary>
        </member>
        <member name="M:TaxHub.Common.Helpers.IUserSecurityInfoAsyncLocalStore.GetUserDescriptionFromAsyncLocal">
            <summary>
            Method to get the user description from the asyncLocal placeholder if it exists
            </summary>
            <returns>The user description.</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.IUserSecurityInfoAsyncLocalStore.SetUserDescriptionToAsyncLocal(System.String)">
            <summary>
            Method to store the user description on an AsyncLocal place holder.
            </summary>
            <param name="userDescription">The user description</param>
        </member>
        <member name="M:TaxHub.Common.Helpers.IUserSecurityInfoAsyncLocalStore.IsAsyncCaptureActive">
            <summary>
            Return a value indicating if the toggle for async capture is on/off
            </summary>
            <returns>The toggle value for UseUserSecurityInfoAsyncLocalStore</returns>
        </member>
        <member name="T:TaxHub.Common.Helpers.AggregateIdHelper">
            <summary>
            Helper functionality to convert from aggregate id of type int to Guid and vice versa. 
            </summary>
        </member>
        <member name="M:TaxHub.Common.Helpers.AggregateIdHelper.ConvertIdFromIntToGuid(System.Int32)">
            <summary>
            To the unique identifier.
            </summary>
            <param name="value">The value.</param>
            <returns>A guid based on an integer.</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.AggregateIdHelper.ConvertIdFromGuidToInt(System.Guid)">
            <summary>
            Converts the Guid representation of a number to an integer.
            </summary>
            <param name="value">The value.</param>
            <returns>The corresponding integer</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.DateTimeHelper.IsDateWithinMonthFollowingQuarterEnd(System.DateTime)">
            <summary>
            Method determines whether the provided date falls within the month following quarter end.
            </summary>
            <param name="date">The date in question.</param>
            <returns>Boolean value: true if provided date falls within the month following quarter end, false otherwise.</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.DateTimeHelper.GetFirstDateOfQuarter(System.Int32,System.Int32)">
            <summary>
            Gets First Date of the Quarter
            </summary>
            <param name="year">year</param>
            <param name="quarter">quarter</param>
            <returns>First Date of the Quarter if year and quarter parameters have valid values, otherwise DateTime.MinValue</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.DateTimeHelper.GetLastDateOfQuarter(System.Int32,System.Int32)">
            <summary>
            Gets Last Date of the Quarter
            </summary>
            <param name="year">year</param>
            <param name="quarter">quarter</param>
            <returns>Last Date of the Quarter if year and quarter parameters have valid values, otherwise DateTime.MinValue</returns>
        </member>
        <member name="T:TaxHub.Common.Helpers.RandomHelper">
            <summary> 
            Convenience class for dealing in thread safe randomness. 
            </summary> 
        </member>
        <member name="F:TaxHub.Common.Helpers.RandomHelper.Random">
            <summary> 
            GetS THREAD LOCAL INSTANCe of Random
            </summary> 
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.CreateRandom">
            <summary> 
            Factory for new instance of Random. The seed is derived from Guid.NewGuid(). 
            </summary>
            <returns>The newly created random instance</returns>
        </member>
        <member name="P:TaxHub.Common.Helpers.RandomHelper.Instance">
            <summary>
            Gets or sets the payroll instance identifier.
            </summary>
            <value>
            The payroll instance identifier.
            </value>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomPick``1(``0[])">
            <summary>
            Pick a random item out of an array of items
            </summary>
            <param name="values">array of items to choose</param>
            <typeparam name="T">Item T to return from array</typeparam>
            <returns>an item T out of the array</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomFrom``1(System.Collections.Generic.IList{``0})">
            <summary>
            Pick a random item out of an array of items
            </summary>
            <param name="collection">collection of items to choose</param>
            <typeparam name="T">Item T to return from array</typeparam>
            <returns>an item T out of the array</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomInt(System.Int32,System.Int32)">
            <summary>
            Generates a random int in between min and max value inclusive
            </summary>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns>generated value</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomShort(System.Int32,System.Int32)">
            <summary>
            Generates a random short in between min and max value inclusive
            </summary>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns>generated value</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomDecimal(System.Int32,System.Int32)">
            <summary>
            Generates a random decimal in between min and max value inclusive
            </summary>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns>generated value</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomDouble(System.Int32,System.Int32)">
            <summary>
            Generates a random double in between min and max value inclusive
            </summary>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns>generated value</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomBool">
            <summary>
            Generates a random bool
            </summary>
            <returns>generated bool</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomFein">
            <summary>
            Generates a random fein
            </summary>
            <returns>generated fein</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomSsn">
            <summary>
            Generates a random ssn
            </summary>
            <returns>generated ssn</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomPhone">
            <summary>
            Returns a random phone number
            </summary>
            <returns>Random phone number</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomDateTime(System.Boolean)">
            <summary>
            Generates a random date after 1/1/1900
            </summary>
            <param name="allowFutureDates">A <seealso cref="T:System.Boolean"/> value allowing future dates to be returned.</param>
            <returns>A random date</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomDateInPast(System.Int32,System.Int32)">
            <summary>
            Generates a random date after in the past with a range
            </summary>
            <param name="minDaysInPast">An <seealso cref="T:System.Int32"/> value representing the minimum number of days in the past to go back.</param>
            <param name="maxDaysInPast">An <seealso cref="T:System.Int32"/> value representing the maximum number of days in the past to go back.</param>
            <returns>A random date</returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.RandomHelper.RandomEnumValue``1">
            <summary>
            Returns a random enum value.
            </summary>
            <typeparam name="T">The enum type to select from.</typeparam>
            <returns>The selected enum value</returns>
        </member>
        <member name="T:TaxHub.Common.Helpers.StringHelper">
            <summary>
            String Helper Class
            </summary>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.FormatWithPadding(System.String,System.Int32,System.String,System.Int32,System.Char,System.String[])">
            <summary>
            Formats String
            </summary>
            <param name="part1">"part1"</param>
            <param name="part1Size">"part1Size"</param>
            <param name="part2">"part2"</param>
            <param name="part2Size">"part2Size"</param>
            <param name="padding">"padding"</param>
            <param name="toRemove">"toRemove"</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.FormatWithRightPaddingOnePart(System.String,System.Int32,System.Char)">
            <summary>
            Formats String
            </summary>
            <param name="part1">"part1"</param>
            <param name="part1Size">"part1Size"</param>
            <param name="padding">"padding"</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.FormatWithRightPaddingThreePart(System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Char)">
            <summary>
            Formats String
            </summary>
            <param name="part1">"part1"</param>
            <param name="part1Size">"part1Size"</param>
            <param name="part2">"part2"</param>
            <param name="part2Size">"part2Size"</param>
            <param name="part3">"part3"</param>
            <param name="part3Size">"part3Size"</param>
            <param name="padding">"padding"</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.FormatWithLeftPaddingThreePart(System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Char)">
            <summary>
            Formats String
            </summary>
            <param name="part1">"part1"</param>
            <param name="part1Size">"part1Size"</param>
            <param name="part2">"part2"</param>
            <param name="part2Size">"part2Size"</param>
            <param name="part3">"part3"</param>
            <param name="part3Size">"part3Size"</param>
            <param name="padding">"padding"</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.FormatWithLeftPaddingTwoPart(System.String,System.Int32,System.String,System.Int32,System.Char)">
            <summary>
            Formats String
            </summary>
            <param name="part1">"part1"</param>
            <param name="part1Size">"part1Size"</param>
            <param name="part2">"part2"</param>
            <param name="part2Size">"part2Size"</param>
            <param name="padding">"padding"</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.FormatWithLeftPaddingOnePart(System.String,System.Int32,System.Char)">
            <summary>
            Formats String
            </summary>
            <param name="part1">"part1"</param>
            <param name="part1Size">"part1Size"</param>
            <param name="padding">"padding"</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.FormatWithLeftAndRightPaddingTwoPart(System.String,System.Int32,System.Char,System.String,System.Int32,System.Char)">
            <summary>
            Formats String
            </summary>
            <param name="part1">"part1"</param>
            <param name="part1Size">"part1Size"</param>
            <param name="padding1">"padding"</param> 
            <param name="part2">"part2"</param>
            <param name="part2Size">"part2Size"</param>
            <param name="padding2">"padding"</param>        
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.FormatWithRightPaddingFourPart(System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Char)">
            <summary>
            Formats String
            </summary>
            <param name="part1">"part1"</param>
            <param name="part1Size">"part1Size"</param>
            <param name="part2">"part2"</param>
            <param name="part2Size">"part2Size"</param>
            <param name="part3">"part3"</param>
            <param name="part3Size">"part3Size"</param>
            <param name="part4">"part4"</param>
            <param name="part4Size">"part4Size"</param>
            <param name="padding">"padding"</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.FormatWithRightPaddingTwoPart(System.String,System.Int32,System.Char,System.String,System.Int32,System.Char)">
            <summary>
            Formats String
            </summary>
            <param name="part1">"part1"</param>
            <param name="part1Size">"part1Size"</param>
            <param name="padding1">"padding"</param> 
            <param name="part2">"part2"</param>
            <param name="part2Size">"part2Size"</param>
            <param name="padding2">"padding"</param>        
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.FormatWithRightPaddingFivePart(System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Char)">
            <summary>
            Formats String
            </summary>
            <param name="part1">"part1"</param>
            <param name="part1Size">"part1Size"</param>
            <param name="part2">"part2"</param>
            <param name="part2Size">"part2Size"</param>
            <param name="part3">"part3"</param>
            <param name="part3Size">"part3Size"</param>
            <param name="part4">"part4"</param>
            <param name="part4Size">"part4Size"</param>
            <param name="part5">"part5"</param>
            <param name="part5Size">"part5Size"</param> 
            <param name="padding">"padding"</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.ConvertDecimalToN13Format(System.Decimal)">
            <summary>
            Formats decimal to PTM data format N13.
            </summary>
            <param name="value">The decimal value to format</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.ConvertDecimalToN9Format(System.Decimal)">
            <summary>
            Formats decimal to PTM data format N9.
            </summary>
            <param name="value">The decimal value to format</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.ConvertDecimalToN7Format(System.Decimal)">
            <summary>
            Formats decimal to PTM data format N7.
            </summary>
            <param name="value">The decimal value to format</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.ConvertDecimalToN6Format(System.Decimal)">
            <summary>
            Formats decimal to PTM data format N6.
            </summary>
            <param name="value">The decimal value to format</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.ConvertDecimalToN6FormatFourImpliedDecimals(System.Decimal)">
            <summary>
            Formats decimal to PTM data format N6 with 4 implied decimals.
            </summary>
            <param name="value">The decimal value to format</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.ConvertDateToD8Format(System.DateTime)">
            <summary>
            Formats date to PTM data format D8.
            </summary>
            <param name="value">The date value to format</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.ConvertDateToD8FormatWithLength6(System.DateTime)">
            <summary>
            Formats date to PTM data format D8 with a lenght of 6 (TEMP).
            </summary>
            <param name="value">The date value to format</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.ConvertDecimalToMoneyFormat(System.Decimal,System.String)">
            <summary>
            Formats desimal in money format.
            </summary>
            <param name="amount">The amount o format</param>
            <param name="format">format</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.Merge(System.Int32,System.String,System.String)">
            <summary>
            Merges two string values.
            </summary>
            <param name="position">The non zero-based position to insert the value</param>
            <param name="value">The string value to be inserted</param>
            <param name="variant">The existing value</param>
            <returns> string </returns>
        </member>
        <member name="M:TaxHub.Common.Helpers.StringHelper.SplitOnCapitalLetter``1(``0)">
            <summary>
            Splits a string with spaces on capital letters
            </summary>
            <param name="value">The string being split</param>
            <returns>A split string</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthClaimsExtensions.GetSecurityClaims(TaxHub.Common.Security.OAuth.IOAuthClaims)">
            <summary>
            Convert deserialized claims dictionary into security claims. 
            </summary>
            <param name="claims">IOauthClaims instance</param>
            <returns>List of security claims</returns>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.EntitlementCollection">
            <summary>
            Class represents a collection of entitlements for a user.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.EntitlementIntegrationService.RetrieveUserEntitlements(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of user (account) entitlements from the identity server.
            </summary>
            <param name="tenantId">The tenant identifier under which the user (account) has been created.</param>
            <param name="userId">The user (account) identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A list of IdentityKey objects corresponding to the keys returned by the
            identity server, or null if the keys could not be retrieved.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IdentityAccountResponse">
            <summary>
            Response from Identity about Account info
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IdentityCache">
            <summary>
            A class that stores OAuth contexts for a limited time so the auth service doesn't need
            to retrieve authentication from the server repeatedly.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityCache.#ctor(TaxHub.Common.Security.Application.ISecurityConfiguration,SmartHub.Hosting.Caching.IObjectCacheManager)">
            <summary>
            Constructs an OAuthBearerCache
            </summary>
            <param name="cacheManager">The cache manager</param>
            <param name="securityConfig">A configuration object used to determine specific settings.</param>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityCache.GetClaims(TaxHub.Common.Security.OAuth.OAuthInboundContext)">
            <summary>
            Get the claims related to this context.
            </summary>
            <param name="context">The context to search for.</param>
            <returns>The related claims, or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityCache.InsertClaims(TaxHub.Common.Security.OAuth.OAuthInboundContext,TaxHub.Common.Security.OAuth.IOAuthClaims)">
            <summary>
            Inserts claims and relates them to a context.
            </summary>
            <param name="context">The context to relate.</param>
            <param name="claims">The claims associated to this context</param>
            <returns>True if the insert succeeded, false if the item already exists or
            the timeout is 0</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityCache.RemoveClaims(TaxHub.Common.Security.OAuth.OAuthInboundContext)">
            <summary>
            Removes the specified context from the cache
            </summary>
            <param name="context">The context to remove.</param>
            <returns>True if the context existed and was successfully removed, false otherwise.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityCache.GetEntitlements(System.Guid)">
            <summary>
            Get the entitlements related to this user.
            </summary>
            <param name="userId">The userId.</param>
            <returns>The related entitlements, or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityCache.InsertEntitlements(System.Guid,TaxHub.Common.Security.OAuth.EntitlementCollection)">
            <summary>
            Inserts entitlements and relates them to a user.
            </summary>
            <param name="userId">The userId.</param>
            <param name="entitlements">The entitlements associated to this user.</param>
            <returns>True if the insert succeeded, false if the item already exists.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityCache.RemoveEntitlements(System.Guid)">
            <summary>
            Removes the specified entitlements from the cache
            </summary>
            <param name="userId">The userId.</param>
            <returns>True if the entitlements existed and was successfully removed, false otherwise.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IIdentityEndpointsCache.GetEndpoints(System.String)">
            <summary>
            Gets the well known endpoints from the cache based on the token
            </summary>
            <param name="wellKnownUrl">The url to get endpoints for</param>
            <returns>IdentityEndpoints for the context.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IIdentityEndpointsCache.InsertEndpoints(System.String,TaxHub.Common.Security.OAuth.IdentityEndpoints)">
            <summary>
            Inserts the well known endpoints to the cache
            </summary>
            <param name="wellKnownUrl">The url to insert the endpoints for</param>
            <param name="endpoints">The well known urls to cache.</param>
            <returns>True if they were successfully inserted</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IIdentityEndpointsService.GetEndpoints(TaxHub.Common.Security.OAuth.OAuthContext,System.Threading.CancellationToken)">
            <summary>
            Gets thes the well known endpoints for a given context.
            </summary>
            <param name="context">The context to get the well known identity endpoints for</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The endpoints associated with this context</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IIdentityEndpointsService.GetEndpoints(System.Threading.CancellationToken)">
            <summary>
            Looks up the endpoints using the DiscoveryBaseUrl securityConfig value, based on the IsIdentityVersionV2Enabled toggle.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The endpoints associated with this context</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IIdentityEndpointsService.GetEndpoints(System.String,System.Threading.CancellationToken)">
            <summary>
            Looks up the endpoints for the given url
            </summary>
            <param name="url">The url to lookup endpoints for</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The endpoints associated with this context</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityEndpointsService.GetEndpoints(System.Threading.CancellationToken)">
            <summary>
            To be used only when no context is available yet, e.g. RetrieveOAuthClientContextViaClientCredentials, Login Page, etc
            </summary>
            <param name="cancellationToken">cancellationToken</param>
            <returns>Identity Endpoints</returns>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IdentityKey">
            <summary>
            An abstract class that represents an OpenId key for signing and verifying JWT tokens.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.IdentityKey.Algorithm">
            <summary>
            Gets the algorithm associated with this key.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.IdentityKey.KeyType">
            <summary>
            Gets the type of the key.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.IdentityKey.KeyId">
            <summary>
            Gets the key identifier.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityKey.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Security.OAuth.IdentityKey"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="keyType">Type of the key.</param>
            <param name="keyId">The key identifier.</param>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityKey.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies that the signedBytes were signed using this key.
            </summary>
            <param name="bytesToSign">The bytes to sign.</param>
            <param name="signedBytes">The signed bytes.</param>
            <returns>True if the bytesToSign were signed with this key.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IdentityKeyCache">
            <summary>
            A default implementation of IIDentityKeyCache.
            </summary>
            <seealso cref="T:TaxHub.Common.Security.OAuth.IIdentityKeyCache" />
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityKeyCache.#ctor(TaxHub.Common.Security.Application.ISecurityConfiguration,SmartHub.Hosting.Caching.IObjectCacheManager)">
            <summary>
            Constructs an IdentityKeyCache 
            </summary>
            <param name="securityConfig">A configuration object used to determine specific settings.</param>
            <param name="cacheManager">The cache manager</param>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityKeyCache.Get(TaxHub.Common.Security.OAuth.OAuthContext)">
            <summary>
            Gets the most recent list of identity keys retrieved from the server.
            </summary>
            <param name="context">The context to get the keys for</param>
            <returns>
            The IdentityKeys if they exists in the cache, or null if they do not.
            </returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityKeyCache.Add(TaxHub.Common.Security.OAuth.OAuthContext,System.Collections.Generic.List{TaxHub.Common.Security.OAuth.IdentityKey})">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IdentityKeyFactory">
            <summary>
            A default implementation of the IIdentityKeyFactory for Identity keys.
            </summary>
            <seealso cref="T:TaxHub.Common.Security.OAuth.IIdentityKeyFactory" />
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IdentityKeyFactory.Create(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates an IdentityKey from a JToken.
            </summary>
            <param name="creationData">The JToken containing the creation data for an IdentityKey.</param>
            <returns>
            An IdentityKey specified by the given JToken.
            </returns>
            <exception cref="T:System.ArgumentException">Unknown Key Type</exception>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IIdentityKeyCache">
            <summary>
            Implement this interface to provide a place to store IdentityKey objects
            for a period of time so retrieval doesn't have to take place multiple times.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IIdentityKeyCache.Get(TaxHub.Common.Security.OAuth.OAuthContext)">
            <summary>
            Gets the most recent list of identity keys retrieved from the server.
            </summary>
            <param name="context">The context to get keys from the cache.</param>
            <returns>The IdentityKeys if they exists in the cache, or null if they do not.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IIdentityKeyCache.Add(TaxHub.Common.Security.OAuth.OAuthContext,System.Collections.Generic.List{TaxHub.Common.Security.OAuth.IdentityKey})">
            <summary>
            Adds the keys to the cache.
            </summary>
            <param name="context">The context to add keys to the cache for.</param>
            <param name="keys">The keys to add to the cache.</param>
            <returns>true if the keys were added, false otherwise.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IIdentityKeyFactory">
            <summary>
            Implementors define behavior for creating IdentityKeys from JTokens.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IIdentityKeyFactory.Create(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates an IdentityKey from a JToken.
            </summary>
            <param name="creationData">The JToken containing the creation data for an IdentityKey.</param>
            <returns>An IdentityKey specified by the given JToken.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IOAuthAuthenticationService">
            <summary>
            A service that provides access to remote authentication capabilities like validating a token
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthAuthenticationService.RetrieveUserInfoClaims(TaxHub.Common.Security.OAuth.OAuthInboundContext,System.Threading.CancellationToken)">
            <summary>
            Retrieves the OAuth Claims from the UserInfo endpoint.
            </summary>
            <param name="context">The context to validate.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The claims related to the context or null if there is no relation</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthAuthenticationService.ValidateViaIntrospection(TaxHub.Common.Security.OAuth.OAuthInboundContext,System.Threading.CancellationToken)">
            <summary>
            Validates that the context is active without retrieving claims.
            </summary>
            <param name="context">The context to validate.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>An object that encapsulates the key/value pairs returned by the introspection
            endpoint in regards to the inbound context.  This will always contain the 'active' key
            which indicates whether the context is valid or not.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthAuthenticationService.ValidateViaJwtSignature(TaxHub.Common.Security.OAuth.OAuthInboundContext,System.Threading.CancellationToken)">
            <summary>
            Validates the OAuth inbound context's token using the JWT signature.
            </summary>
            <param name="context">The context to validate.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if the signature is valid, false otherwise.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthAuthenticationService.RetrieveOAuthClientContextViaClientCredentials(System.Threading.CancellationToken)">
            <summary>
            Retrieves the OAuthOutboundContext object by using a client credential grant type
            with an OAuth server. http://tools.ietf.org/html/rfc6749#section-4.4
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>An OAuthContext object that contains an auth token.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthAuthenticationService.RetrieveKeys(TaxHub.Common.Security.OAuth.OAuthInboundContext,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves the keys from the identity server.  These keys are used to sign 
            and verify JWT tokens.
            </summary>
            <param name="context">OAuthInboundContext</param>
            <param name="numRetries">The number of times to retry retrieving the keys before returning null.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A list of IdentityKey objects corresponding to the keys returned by the 
            identity server, or null if the keys could not be retrieved.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthAuthenticationService.RefreshTokensAsync(System.String,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Refreshes the OIDC tokens by using a refresh token grant type
            </summary>
            <param name="refreshToken">Refresh token</param>
            <param name="scope">OAUTH scopes of new token</param>
            <param name="correlationId">Correlation id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A token response</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthAuthenticationService.LogoutUserFromIdentity(System.String,TaxHub.Common.Security.OAuth.OAuthContext,System.Guid)">
            <summary>
            Logging out the user by using Identity EndSession endpoint and LogoutRedirectUri
            </summary>
            <param name="idToken">Id-token received at login time</param>
            <param name="oAuthContext">webAuthTokenProvider.Token to get the well known endpoints</param>
            <param name="correlationId">correlationId</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IOAuthBearerAuthenticationProvider">
            <summary>
            Provides verification of the identity of an OAuthContext
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthBearerAuthenticationProvider.ValidateIdentity(TaxHub.Common.Security.OAuth.OAuthInboundContext,System.Threading.CancellationToken)">
            <summary>
            Validates the given OAuthContext
            </summary>
            <param name="context">The context to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The Identity of the principal with which this context is associated.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IEntitlementCache">
            <summary>
            A cache that stores entitlements for a user.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IEntitlementCache.GetEntitlements(System.Guid)">
            <summary>
            Get the entitlements related to this user.
            </summary>
            <param name="userId">The userId.</param>
            <returns>The related entitlements, or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IEntitlementCache.InsertEntitlements(System.Guid,TaxHub.Common.Security.OAuth.EntitlementCollection)">
            <summary>
            Inserts entitlements and relates them to a user.
            </summary>
            <param name="userId">The userId.</param>
            <param name="entitlements">The entitlements associated to this user.</param>
            <returns>True if the insert succeeded, false if the item already exists.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IEntitlementCache.RemoveEntitlements(System.Guid)">
            <summary>
            Removes the specified entitlements from the cache
            </summary>
            <param name="userId">The userId.</param>
            <returns>True if the entitlements existed and was successfully removed, false otherwise.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IOAuthBearerCache">
            <summary>
            A cache that stores claims in relation to their OAuthContext
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthBearerCache.GetClaims(TaxHub.Common.Security.OAuth.OAuthInboundContext)">
            <summary>
            Get the claims related to this context.
            </summary>
            <param name="context">The context to search for.</param>
            <returns>The related claims, or null if not found.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthBearerCache.InsertClaims(TaxHub.Common.Security.OAuth.OAuthInboundContext,TaxHub.Common.Security.OAuth.IOAuthClaims)">
            <summary>
            Inserts claims and relates them to a context.
            </summary>
            <param name="context">The context to relate.</param>
            <param name="claims">The claims associated to this context</param>
            <returns>True if the insert succeeded, false if the item already exists.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthBearerCache.RemoveClaims(TaxHub.Common.Security.OAuth.OAuthInboundContext)">
            <summary>
            Removes the specified context from the cache
            </summary>
            <param name="context">The context to remove.</param>
            <returns>True if the context existed and was successfully removed, false otherwise.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IOAuthClaims">
            <summary>
            Implementers provide access to claims and the time they were created.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.IOAuthClaims.Claims">
            <summary>
            Gets the claims.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.IOAuthClaims.ConfirmedTime">
            <summary>
            Gets the last date and time claims were confirmed with Identity Server.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthClaims.RenewConfirmation">
            <summary>
            Renews confirmation for this instance, which extends the time until it expires
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.IOAuthOutboundContextProvider">
            <summary>
            Implementers of this interface provide access to an <see cref="T:TaxHub.Common.Security.OAuth.OAuthOutboundContext"/>
            that is guaranteed to not be expired.
            </summary>
            <remarks>
             If the token server is unavailable, or there is a problem with the client
              credentials, then HasToken will be false
            </remarks>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.IOAuthOutboundContextProvider.OutboundContext">
            <summary>
            Gets the current outbound context if the token is not expired.  Otherwise, it returns null.
            </summary>
            <value>
            The current outbound context if the token is not expired.  Otherwise, it returns null.
            </value>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.IOAuthOutboundContextProvider.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the provider which retrieves an initial token value.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task that completes when the token has been initialized.</returns>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.IOAuthOutboundContextProvider.IsAuthenticationEnabled">
            <summary>
            Gets a boolean indicator whether authentication is enabled
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.JwtExtensions.Base64Pad(System.String)">
            <summary>
            Pads a string with '=' until its length is a multiple of 4 as per the base64 encoding spec.
            </summary>
            <param name="p">The string to pad.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.JwtExtensions.Base64UrlDecode(System.String)">
            <summary>
            Decodes a string that is encoded in base 64 as per the JWT specification.
            </summary>
            <param name="input">The input string to decode</param>
            <returns>The base 64 string decoded into an array of bytes.</returns>
            <exception cref="T:System.Exception">Illegal base64url string!</exception>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.JwtExtensions.Base64UrlEncode(System.Byte[])">
            <summary>
            Encodes a byte array in base 64 as per the JWT specification.
            </summary>
            <param name="arg">The input byte array to encode</param>
            <returns>The base 64 url string decoded.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.JwtExtensions.IsSignatureValid(TaxHub.Common.Security.OAuth.OAuthToken,TaxHub.Common.Security.OAuth.IdentityKey)">
            <summary>
            Determines whether the token was signed by the given key.
            </summary>
            <param name="token">The token.</param>
            <param name="key">The key.</param>
            <returns>True if the token was signed by the key, false otherwise.</returns>
            <exception cref="T:SmartHub.Hosting.Exceptions.BusinessRuleException">Token must consist of 3 parts delimited by dots</exception>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthAuthenticationService.RetrieveUserInfoClaims(TaxHub.Common.Security.OAuth.OAuthInboundContext,System.Threading.CancellationToken)">
            <summary>
            Retrieves the OAuth Claims from the UserInfo endpoint.
            </summary>
            <param name="context">The context to validate.</param>
            <param name="cancellationToken">Cancellation tokekn</param>
            <returns>The claims related to the context or null if there is no related identity</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthAuthenticationService.ValidateViaIntrospection(TaxHub.Common.Security.OAuth.OAuthInboundContext,System.Threading.CancellationToken)">
            <summary>
            Validates that the context is good without retrieving claims.
            </summary>
            <param name="context">The context to validate.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if the context is valid, false otherwise</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthAuthenticationService.ValidateViaJwtSignature(TaxHub.Common.Security.OAuth.OAuthInboundContext,System.Threading.CancellationToken)">
            <summary>
            Validates the OAuth inbound context's token using the JWT signature.
            </summary>
            <param name="context">The context to validate.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if the signature is valid, false otherwise.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthAuthenticationService.RetrieveOAuthClientContextViaClientCredentials(System.Threading.CancellationToken)">
            <summary>
            Retrieves the OAuthClientContext object by using a client credential grant type
            with an OAuth server.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>An OAuthContext object that contains an auth token.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthAuthenticationService.RetrieveKeys(TaxHub.Common.Security.OAuth.OAuthInboundContext,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves the keys from the identity server.  These keys are used to sign and verify JWT tokens.
            </summary>
            <param name="context">OAuthInboundContext</param>
            <param name="numRetries">The number of times to retry retrieving the keys before returning null.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns> A list of IdentityKey objects corresponding to the keys returned by the
            identity server, or null if the keys could not be retrieved. </returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthAuthenticationService.LogoutUserFromIdentity(System.String,TaxHub.Common.Security.OAuth.OAuthContext,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthBearerAuthenticationProvider.ValidateIdentity(TaxHub.Common.Security.OAuth.OAuthInboundContext,System.Threading.CancellationToken)">
            <summary>
            Validates the given OAuthContext
            </summary>
            <param name="context">The context to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The Identity of the principal with which this context is associated or null if the context is invalid.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthBearerAuthenticationProvider.UpdateTenantClaimsAsync(TaxHub.Common.Security.OAuth.OAuthIntrospectionResult,TaxHub.Common.Security.OAuth.OAuthInboundContext,TaxHub.Common.Security.OAuth.IOAuthClaims,System.Threading.CancellationToken)">
            <summary>
            Sets the tenant_id claim if missing. It uses the tenant alias mapping service
            </summary>
            <param name="result">Result of calling ValidateViaIntrospection</param>
            <param name="context">Oauth context with tenant alias</param>
            <param name="claims">List of claims to modify</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task being awaited</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthBearerAuthenticationProvider.Dispose">
            <summary>
            Method disposes any resources used by the class.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.OAuthClaims">
            <summary>
            This class holds the claims returned by the OAuth provider
            as well as the time it was created
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthClaims.Claims">
            <summary>
            Gets the claims.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthClaims.ConfirmedTime">
            <summary>
            Gets the last date and time claims were confirmed with Identity Server.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthClaims.RenewConfirmation">
            <summary>
            Renews confirmation for this instance, which extends the time until it expires.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.OAuthContext">
            <summary>
            A base class for OAuth contexts that maintains certain shared information between
            a client context and a server context.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthContext.AccessToken">
            <summary>
            Gets the access token, which is a base 64 encoded JWS token that contains information
            about the OAuth client.
            </summary>
            <value>
            The access token, which is a base 64 encoded JWS token that contains information
            about the OAuth client.
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthContext.ExpiresTimeInSecondsFromEpoch">
            <summary>
            Gets the timeout value at which the access token expires.
            It is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time
            </summary>
            <value>
            The timeout value at which the access token expires.
            It is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthContext.Expires">
            <summary>
            Gets the time at which the access token expires.  It is derived from the <see cref="P:TaxHub.Common.Security.OAuth.OAuthContext.ExpiresTimeInSecondsFromEpoch"/> property.
            </summary>
            <value>
            The time at which the access token expires.
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthContext.IssuedTimeInSecondsFromEpoch">
            <summary>
            Gets the time at which the access token was issued.
            It is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time
            </summary>
            <value>
            The time at which the access token was issued.
            It is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthContext.Issuer">
            <summary>
            The "iss" (issuer) claim identifies the principal that issued the
            JWT.The processing of this claim is generally application specific.
            The "iss" value is a case-sensitive string containing a StringOrURI
            value. Use of this claim is OPTIONAL.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthContext.Subject">
            <summary>
            The "sub" (subject) claim identifies the principal that is the
            subject of the JWT.The claims in a JWT are normally statements
            about the subject.  The subject value MUST either be scoped to be
            locally unique in the context of the issuer or be globally unique.
            The processing of this claim is generally application specific.The
            "sub" value is a case-sensitive string containing a StringOrURI
            value.Use of this claim is OPTIONAL.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthContext.Audience">
            <summary>
            The "aud" (audience) claim identifies the recipients that the JWT is
            intended for.  Each principal intended to process the JWT MUST
            identify itself with a value in the audience claim.If the principal
            processing the claim does not identify itself with a value in the
            "aud" claim when this claim is present, then the JWT MUST be
            rejected.In the general case, the "aud" value is an array of case-
            sensitive strings, each containing a StringOrURI value.In the
            special case when the JWT has one audience, the "aud" value MAY be a
            single case-sensitive string containing a StringOrURI value.The
            interpretation of audience values is generally application specific.
            Use of this claim is OPTIONAL.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/> class.
            NOTE: This constructor should only be used for testing.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Security.OAuth.OAuthOutboundContext"/> class.
            </summary>
            <param name="accessToken">The access token string from which to build this context.  It should be a base64 encoded
            JWS token.</param>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthContext.ExpiresIn(System.TimeSpan)">
            <summary>
            Query whether the token will be expired at a given time from UTC Now
            </summary>
            <param name="timeSpan">This is added to UTC now and then the token is checked to see if
            it would be expired at the produced time.</param>
            <returns><c>true</c> if the token would be expired when the timespan elapses, or <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthContext.IsExpired">
            <summary>
            Gets a value indicating whether this instance is expired.
            </summary>
            <value>
            <c>true</c> if this instance is expired; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.OAuthInboundContext">
            <summary>
            This object represents an OAuth request coming in to our API.  These should be validated against the identity
            server to verify that they are still valid, not expired, have the correct scopes, and eventually permissions.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthInboundContext.IntrospectionResult">
            <summary>
            Gets the introspection result, if the context has been introspected.
            </summary>
            <value>
            The introspection result, or null if the context has never been introspected.
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthInboundContext.CorrelationId">
            <summary>
            Gets or sets correlation Id associated with current context.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult">
            <summary>
            This object represents a response sent from the identity server when an access token is
            introspected.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult.CorrespondingContext">
            <summary>
            Gets the context that was introspected to get this result.
            </summary>
            <value>
            The context that was introspected to get this result.
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult.Active">
            <summary>
            Gets a value indicating whether the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult.Scope">
            <summary>
            Gets the scope associated to the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/>.  Things like 'openid', 'spsTaxHub', etc.
            </summary>
            <value>
            The scope associated to the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/>.
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult.ExpiresAt">
            <summary>
            Gets the time at which the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/> expires.
            </summary>
            <value>
            The time at which the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/> expires.
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult.ExpiresTimeout">
            <summary>
            Gets the timeout value at which the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/> expires.
            It is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time
            </summary>
            <value>
            The timeout value at which the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/> expires.
            It is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult.Subject">
            <summary>
            Gets the subject for which the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/> is associated (i.e., a username, or client id)
            </summary>
            <value>
            The subject for which the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/> is associated (i.e., a username, or client id).
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult.UserId">
            <summary>
            Gets the user identifier of the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/>.
            </summary>
            <value>
            The user identifier of the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/>.
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult.ClientId">
            <summary>
            Gets the client identifier of the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/>.
            </summary>
            <value>
            The client identifier of the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/>.
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult.TokenScheme">
            <summary>
            Gets the scheme of the token associated to the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/> (i.e., Bearer)
            </summary>
            <value>
            The type of the token associated to the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/> (i.e., Bearer).
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult.TenantAlias">
            <summary>
            Gets the tenant alias of the token associated to the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/> (i.e., Bearer)
            </summary>
            <value>
            The tenant alias associated to the corresponding <see cref="T:TaxHub.Common.Security.OAuth.OAuthContext"/> (i.e., Bearer).
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult.IsServiceClient">
            <summary>
            Gets the is service client flag.
            Introspection of a token obtained using client credentials will result in the subject and clientId being the same
            </summary>
            <value>
            Returns true if the subject equals the client ID in the introspection result.
            </value>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},TaxHub.Common.Security.OAuth.OAuthContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Security.OAuth.OAuthIntrospectionResult"/> class.
            </summary>
            <param name="responseDictionary">The response dictionary containing all the key/value pairs returned by the introspection call.</param>
            <param name="correspondingContext">The corresponding context that the result is associated to.</param>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.OAuthOutboundContext">
            <summary>
            This object represents an outbound OAuth request that a client would send to our API.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.OAuthOutboundContextProvider">
            <summary>
            An implementation of the IAuthTokenProvider that provides OAuthOutboundContext objects.
            These objects contain an OAuth bearer access token and provide information about the
            token itself, such as when it expires.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthOutboundContextProvider.HasToken">
            <summary>
            Gets a value indicating whether this instance has a non-expired auth token or not.
            </summary>
            <value><c>true</c> if this instance has a non-expired auth token; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthOutboundContextProvider.IsAuthenticationEnabled">
            <summary>
            Gets a boolean indicator whether authentication is enabled
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthOutboundContextProvider.OutboundContext">
            <summary>
            Gets the current outbound context if the token was not expired on the last inspection.  Otherwise, it returns null.
            </summary>
            <value>The current outbound context if the token was not expired on the last inspection.  Otherwise, it returns null.</value>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.OAuthOutboundContextProvider.Token">
            <summary>
            Gets an authentication token that can be used to
            prove the identity of someone or something.
            </summary>
            <value>An OAuth Bearer Access Token that was not expired upon last inspection.</value>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthOutboundContextProvider.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the provider which retrieves an initial token value for the outbound context.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <remarks>Method is intended to be called by the application setup process.</remarks>
            <returns>A task that completes when the outbound context's token has been initialized.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthOutboundContextProvider.InspectTokenAsync">
            <summary>
            This contains the logic that is executed whenever the timer elapses (which by default is roughly once a minute).
            Token inspection consists of retrieving a token if one does not exist, checking if the token expires within
            the pre-expiration renewal time and renews it if it does, and finally, notifying the NOC if the current token
            is expired, but a new one cannot be retrieved for whatever reason.
            </summary>
            <returns>A task that completes when token inspection has finished.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthOutboundContextProvider.RefreshTokenAsync(System.Threading.CancellationToken)">
            <summary>
            Refreshing the token consists of using the IOAuthAuthenticationService to retrieve a new outbound context
            using the configured client credentials.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task that completes when the token has been refreshed.  This task will have a result of <c>true</c> if
            the token refresh was successful, otherwise it will have a result of <c>false</c></returns>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthOutboundContextProvider.CheckConnectivity">
            <summary>
            Checks the connectivity to whichever external system is providing the auth token.
            </summary>
            <returns> A task that completes when the connectivity check has completed.  The result will be <c>true</c>
            if there is connectivity; <c>false</c> otherwise.</returns>
            <remarks>This function should not be called from production code.  It is meant as a diagnostic tool.</remarks>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.OAuthOutboundContextProvider.Dispose">
            <summary>
            Method disposes any resources used by the class.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.OAuthToken">
            <summary>
            This class represents an authentication token that
            can be used for bearer authentication in an OAuth system.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.RsaIdentityKey">
            <summary>
            A class that represents an RSA key for signing and verifying JWT tokens.
            </summary>
            <seealso cref="T:TaxHub.Common.Security.OAuth.IdentityKey" />
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.RsaIdentityKey.Base64EncodedExponent">
            <summary>
            Gets the base64 encoded exponent (e) of the public key used to sign the JWT token.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.RsaIdentityKey.Base64EncodedModulus">
            <summary>
            Gets the base64 encoded modulus (n) of the public key used to sign the JWT token.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.RsaIdentityKey.Exponent">
            <summary>
            The decoded exponent (e) of the public key used to sign the JWT token.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.RsaIdentityKey.Modulus">
            <summary>
            The decoded modulus (n) of the public key used to sign the JWT token.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.RsaIdentityKey.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Security.OAuth.RsaIdentityKey"/> class.
            </summary>
            <param name="base64EncodedExponent">The base64 encoded exponent.</param>
            <param name="base64EncodedModulus">The base64 encoded modulus.</param>
            <param name="algorithm">The algorithm.</param>
            <param name="keyType">Type of the key.</param>
            <param name="keyId">The key identifier.</param>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.RsaIdentityKey.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies that the signedBytes were signed using this key.
            </summary>
            <param name="bytesToSign">The bytes to sign.</param>
            <param name="signedBytes">The signed bytes.</param>
            <returns>True if the bytesToSign were signed with this key.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.OAuth.TokenResponse">
            <summary>
            token endpoint response
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.TokenResponse.IdentityToken">
            <summary>
            identity token
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.TokenResponse.AccessToken">
            <summary>
            access token
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.TokenResponse.RefreshToken">
            <summary>
            refresh token
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.TokenResponse.TokenType">
            <summary>
            type of the token ???
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.TokenResponse.ExpiresIn">
            <summary>
            expires in value
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.TokenResponse.IsError">
            <summary>
            is in error state?
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.TokenResponse.SessionState">
            <summary>
            Session State
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.TokenResponse.Scope">
            <summary>
            User access Scope
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuth.TokenResponse.Error">
            <summary>
            error info
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.OAuth.TokenResponse.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:TaxHub.Common.Security.Handlers.UserInfoCaptureInAsyncLocalContextHandler">
            <summary>
            Class provides custom authentication functionality to the Web Api pipeline.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.Handlers.AuthenticationHandler">
            <summary>
            Class provides custom authentication functionality to the Web Api pipeline.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.KeyServer.AmendmentsSqlDbCredentialsProvider">
            <summary>
            Read Only Credentials Provider for UltiPro Tax Engine and Reporting SQL store
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.DedApiCredentialsProvider.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Security.KeyServer.IKeyServerAdapter,TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="keyServerAdapter">The Key server adapter.</param>
            <param name="dataCenter">The data center.</param>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.DedApiCredentialsProviderFactory.LoadCredentials(System.Threading.CancellationToken)">
            <summary>
            Loads the credentials for the active data centers.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.DedHmacConfigProvider.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Security.KeyServer.IKeyServerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Security.KeyServer.DedHmacConfigProvider"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="keyServerAdapter">The key server adapter.</param>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.DedHmacConfigProvider.LoadConfig(System.Threading.CancellationToken)">
            <summary>Loads the configuration.</summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task object.</returns>
            <exception cref="T:System.Exception">
            The DED HMAC Config cannot be loaded from the key server - the returned data is empty.
            or
            The DED HMAC Config cannot be loaded from the key server - the json contains an empty data.
            </exception>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.DedHmacConfigProvider.Clear(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Clears the config in local cache, optionally refreshes
            </summary>
            <param name="refresh">Parameter indicates if config should be refreshed right away.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task object.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.DedHmacConfigProvider.GetConfig(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method returns current config. It optionally loads config if they not already loaded.
            </summary>
            <param name="loadOnNone">Boolean flag that forces loading data if not existing already.
            NOTE: this process may raise an exception if loading process fails.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns DedHmacConfig</returns>        
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.DedHmacConfigProvider.GetConfig">
            <summary>
            Gets the current configuration.
            </summary>
            <returns>
            Returns DedHmacConfig
            </returns>        
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.DedHmacConfigProvider.HasConfig">
            <summary>
            Determines whether this instance has configuration.
            </summary>
            <returns>
            Returns boolean value.
            </returns>        
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.IDedApiCredentialsProviderFactory.GetProvider(TaxHub.Common.Configuration.DataCenter)">
            <summary>
            Gets the provider for the specified data center.
            </summary>
            <param name="dataCenter">The data center.</param>
            <returns>Returns the DED API credentials provider for the given data center.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.IDedApiCredentialsProviderFactory.LoadCredentials(System.Threading.CancellationToken)">
            <summary>
            Loads the credentials for the active data centers.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.IDedHmacConfigProvider.LoadConfig(System.Threading.CancellationToken)">
            <summary>
            Loads the configuration.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task object.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.IDedHmacConfigProvider.Clear(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Clears the config in local cache, optionally refreshes
            </summary>
            <param name="refresh">Parameter indicates if config should be refreshed right away.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task object.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.IDedHmacConfigProvider.GetConfig(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method returns current config. It optionally loads config if they not already loaded.
            </summary>
            <param name="loadOnNone">Boolean flag that forces loading data if not existing already. 
            NOTE: this process may raise an exception if loading process fails.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns DedHmacConfig</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.IDedHmacConfigProvider.GetConfig">
            <summary>
            Gets the current configuration.
            </summary>
            <returns>Returns DedHmacConfig</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.IDedHmacConfigProvider.HasConfig">
            <summary>
            Determines whether this instance has configuration.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.IdentityCredentialsProvider.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Security.KeyServer.IKeyServerAdapter,TaxHub.Common.Security.Application.ISecurityConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="keyServerAdapter">The Key server adapter.</param>
            <param name="securityConfiguration">The security configuration</param>
        </member>
        <member name="T:TaxHub.Common.Security.KeyServer.CredentialsProviderBase">
            <summary>
            This class is responsible for managing application credentials.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.KeyServer.CredentialsProviderBase.CredentialsResourceName">
            <summary>
            The credentials resource name used to retrieve the credentials file.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.CredentialsProviderBase.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Security.KeyServer.IKeyServerAdapter)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="keyServerAdapter">The Key server adapter.</param>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.CredentialsProviderBase.LoadCredentials(System.Threading.CancellationToken)">
            <summary>
            Method loads the credentials from the Key Server to the local cache.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns task object.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.CredentialsProviderBase.Clear(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Clears credentials in the local cache, and optionally refreshes them. 
            </summary>
            <param name="refresh">Parameter indicates if credentials should be refreshed right away.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a Task</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.CredentialsProviderBase.GetCredentials(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method returns current credentials. It optionally loads credentials if they not already loaded.
            </summary>
            <param name="loadOnNone">Boolean flag that forces loading data if not existing already. 
            NOTE: this process may raise an exception if loading process fails.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns UltiproCredentials.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.CredentialsProviderBase.GetCredentials">
            <summary>
            Method returns current credentials.
            </summary>
            <returns>Returns UltiproCredentials.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.CredentialsProviderBase.HasCredentials">
            <summary>
            Method returns boolean value whether the credentials exists in the local cache.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.KeyServer.DedHmacConfig">
            <summary>
            A config object for storing the DED HMAC Config.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.KeyServer.DedHmacConfig.Secret">
            <summary>
            Gets or sets the secret as a secure string.
            </summary>
            <value>
            The secret.
            </value>
        </member>
        <member name="T:TaxHub.Common.Security.KeyServer.IKeyServerAdapter">
            <summary>
            This class is responsible for retrieving data from the key server.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.IKeyServerAdapter.GetResources(System.Collections.Generic.IEnumerable{System.String},System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method loads the resources from the Key Server.
            </summary>
            <param name="resourcesRelativeUrl">The resources' names to load.</param>
            <param name="correlationId">Correlation Id to use</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns collection of resources.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.IKeyServerAdapter.GetResource(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method loads the resource from the Key Server.
            </summary>
            <param name="resourceRelativeUrl">The resource names to load.</param>
            <param name="correlationId">Correlation Id to use</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns resource..</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.IKeyServerAdapter.GetStringResource(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method loads the resource from the Key Server.
            </summary>
            <param name="resourceRelativeUrl">The resource names to load.</param>
            <param name="correlationId">Correlation Id to use</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns resource..</returns>
        </member>
        <member name="T:TaxHub.Common.Security.KeyServer.ISsrsReportViewerCredentialsProvider">
            <summary>
            Credentials provider for SSRS Report Viewer account
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.KeyServer.IUteSqlDbCredentialsProvider">
            <summary>
            Credentials provider for Ultipro Tax Engine SQL Database connection
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.KeyServer.KeyServerAdapter">
            <summary>
            This class is responsible for retrieving data from the key server.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.KeyServerAdapter.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Hosting.Runtime.ISimpleHttpClientFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="clientFactory">The HTTP Client factory.</param>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.KeyServerAdapter.GetResources(System.Collections.Generic.IEnumerable{System.String},System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method loads the resources from the Key Server.
            </summary>
            <param name="resourcesRelativeUrl">The resources' names to load.</param>
            <param name="correlationId">Correlation Id to use</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns collection of resources.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.KeyServerAdapter.GetResource(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method loads the resource from the Key Server.
            </summary>
            <param name="resourceRelativeUrl">The resource names to load.</param>
            <param name="correlationId">Correlation Id to use</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns resource..</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.KeyServerAdapter.GetStringResource(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Method loads the resource from the Key Server.
            </summary>
            <param name="resourceRelativeUrl">The resource names to load.</param>
            <param name="correlationId">Correlation Id to use</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns resource..</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.MongoDbReportingCredentialsProvider.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Security.KeyServer.IKeyServerAdapter,TaxHub.Common.Security.Application.ISecurityConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="keyServerAdapter">The Key server adapter.</param>
            <param name="securityConfiguration">Security configuration object</param>
        </member>
        <member name="P:TaxHub.Common.Security.KeyServer.MongoDbCredentialsProvider.Enabled">
            <summary>
            Gets a boolean indicator whether credentials for MongoDB should be taken from Key Server instead of configured connection strings.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.MongoDbCredentialsProvider.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Security.KeyServer.IKeyServerAdapter,TaxHub.Common.Security.Application.ISecurityConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="keyServerAdapter">The Key server adapter.</param>
            <param name="securityConfiguration">Security configuration object</param>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.MongoDbCredentialsProvider.LoadCredentials(System.Threading.CancellationToken)">
            <summary>
            Method loads the credentials from the Key Server to the local cache.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns task object.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.MongoDbCredentialsProvider.LoadMongoCredentials(System.Threading.CancellationToken)">
            <summary>
            Method loads the credentials from the Key Server to the local cache.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns task object.</returns>
        </member>
        <member name="P:TaxHub.Common.Security.KeyServer.ODataCredentialsProvider.Enabled">
            <summary>
            Gets a boolean indicator whether credentials for MongoDB should be taken from Key Server instead of configured connection strings.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.ODataCredentialsProvider.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Security.KeyServer.IKeyServerAdapter,TaxHub.Common.Security.Application.ISecurityConfiguration,TaxHub.Common.Configuration.IFeatureToggleConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="keyServerAdapter">The Key server adapter.</param>
            <param name="securityConfiguration">Security configuration object</param>
            <param name="featureToggleConfiguration">The feature toggle configuration.</param>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.ODataCredentialsProvider.LoadCredentials(System.Threading.CancellationToken)">
            <summary>
            Method loads the credentials from the Key Server to the local cache.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns task object.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.ODataCredentialsProvider.LoadODataCredentials(System.Threading.CancellationToken)">
            <summary>
            Method loads the credentials from the Key Server to the local cache.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns task object.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.RabbitMqCredentialsProvider.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Security.KeyServer.IKeyServerAdapter)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="keyServerAdapter">The Key server adapter.</param>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.RabbitMqPaymentCredentialsProvider.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Security.KeyServer.IKeyServerAdapter)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="keyServerAdapter">The Key server adapter.</param>
        </member>
        <member name="T:TaxHub.Common.Security.KeyServer.UdesFileShareCredentialsProvider">
            <summary>
            This class is responsible for managing application credentials for accessing UDES share server.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.KeyServer.UdesFileShareCredentialsProvider.CredentialsResourceName">
            <summary>
            This class is responsible for managing application credentials.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.KeyServer.UdesFileShareCredentialsProvider.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Security.KeyServer.IKeyServerAdapter)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="keyServerAdapter">The Key server adapter.</param>
        </member>
        <member name="T:TaxHub.Common.Security.KeyServer.ReadOnlySqlDbCredentialsProvider">
            <summary>
            Read Only Credentials Provider for UltiPro Tax Engine and Reporting SQL store
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.KeyServer.IInboundFilesYearEndCredentialsProvider">
            <summary>
            Credentials provider for inbound files year end.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.KeyServer.InboundFilesYearEndCredentialsProvider">
            <inheritdoc cref="T:TaxHub.Common.Security.KeyServer.IInboundFilesYearEndCredentialsProvider" />
            <summary>
            Credentials Provider for inbound files year end.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.KeyServer.UteSqlDbCredentialsProvider">
            <summary>
            Credentials Provider for UltiPro Tax Enfine SQL store
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.Application.ISecurityConfiguration">
            <summary>
                Implementers provide access to a security settings object
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.ISecurityConfiguration.SystemTenantId">
            <summary>
            TMS tenant Id for the application level. ie sps, txm
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.ISecurityConfiguration.Debug">
            <summary>
                Debug value
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.ISecurityConfiguration.Identity">
            <summary>
            Configuration for Identity
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.ISecurityConfiguration.SwiftStackAuthExpirationTimeInMinutes">
            <summary>
               Gets the value for the Expiration Time out for SwiftStack Auth
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.ISecurityConfiguration.SystemScope">
            <summary>
            Gets the basic authentication context scope for the application.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.Application.SecurityConfiguration">
            <summary>
            An object to help retrieve and update security settings
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.SecurityConfiguration.SystemScope">
            <summary>
            Gets the basic authentication context scope for the application.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.Application.SecurityConfiguration.#ctor">
            <summary>
            Constructs a security configuration object
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.Application.IdentityConfiguration">
            <summary>
            Used to store Identity Configuration
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.OAuthCacheTimeoutInSeconds">
            <summary>
            Gets the cache timeout in seconds.
            </summary>
            <returns>A task whose result is the cache timeout in seconds.</returns>
            <remarks>If any error occurs during retrieval of the timeout value,
            zero will be returned effectively turning off caching.</remarks>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.AccountEndpoint">
            <summary>
            The Uri for the Account Endpoint
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.OAuthClaimsTimeoutInSeconds">
            <summary>
            Gets the timeout while confirmed claims are considered to be valid by the service.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.IdentityKeyCacheTimeoutInSeconds">
            <summary>
            Gets the identity key cache timeout in seconds.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.TenantEndpoint">
            <summary>
            The Uri for the TenantEndpoint
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.IsJwtServerSideEnabled">
            <summary>
            Gets the boolean indicator whether JWT token validation is enabled on the server side.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.LogoutRedirectUri">
            <summary>
            Redirect URI after logging out.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.RedirectUri">
            <summary>
            Redirect Uri after login
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.Scope">
            <summary>
            Gets the OAuth Scope
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.EntitlementsEndpoint">
            <summary>
            Gets the Entitlements Endpoint Uri
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.DefaultIdentityDiscoveryBaseUrl">
            <summary>
            Gets the default url that will be used to lookup identity endpoints
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.DefaultIdentityV2DiscoveryBaseUrl">
            <summary>
            Gets the default url that will be used to lookup identity v2 endpoints
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.IdentityUserTenantAlias">
            <summary>
            Tax Tenant Alias
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.IdentityV2UserTenantAlias">
            <summary>
            Tax Tenant Alias for Identity V2
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.EntitlementsScopeName">
            <summary>
            Tax Entitlements Scope
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Application.IdentityConfiguration.SystemTenantId">
            <summary>
            TMS tenant Id for the application level. ie sps, txm
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.Application.SecurityServicesSetup.InitializeUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Method initializes Unity container with necessary Security Services related registrations.
            </summary>
            <param name="container">The unity container.</param>
        </member>
        <member name="M:TaxHub.Common.Security.Application.SecurityServicesSetup.InitializeConfigurationForUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Registers all configuration objects as named instances.
            </summary>
            <param name="container">The <seealso cref="T:Microsoft.Practices.Unity.IUnityContainer"/> instance to use for registration.</param>
        </member>
        <member name="M:TaxHub.Common.Security.Application.SecurityServicesSetup.InitializeSecurity(Microsoft.Practices.Unity.IUnityContainer,TaxHub.Configuration.IConfigProvider,System.Threading.CancellationToken)">
            <summary>
            Method initializes security infrastructure in the most appropriate order: EncryptionProviders, then SecurityConfiguration, then ClientAuthProvider.
            Alternatively, those methods can be called separately, one by one. DO NOT call all those methods and this together!
            </summary>
            <param name="container">The unity container.</param>
            <param name="configProvider">Configuration Provider</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Application.SecurityServicesSetup.InitializeEncryptionProviders(Microsoft.Practices.Unity.IUnityContainer,System.Threading.CancellationToken)">
            <summary>
            Method initializes encryption providers for the application.
            </summary>
            <param name="container">The unity container.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Application.SecurityServicesSetup.InitializeTestEncryptionProviders">
            <summary>
            Method initializes encryption providers for the application.
            </summary>
            <remarks>This method is used for testing only. DO NOT USE for production code!</remarks>
        </member>
        <member name="M:TaxHub.Common.Security.Application.SecurityServicesSetup.InitializeCredentials(Microsoft.Practices.Unity.IUnityContainer,System.Threading.CancellationToken)">
            <summary>
            Initializes the credentials from Key Server.
            </summary>
            <param name="container">The container where the security configuration is stored.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Application.SecurityServicesSetup.InitializeClientAuthProvider(Microsoft.Practices.Unity.IUnityContainer,System.Threading.CancellationToken)">
            <summary>
            Initializes the client authorization provider.  This sets up the provider to continuously
            try to maintain a valid token so that http clients can be created that will attach an
            auth header to outbound requests to the API.
            </summary>
            <param name="container">The container where the auth provider is stored.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.Application.ITenantAliasMappingCacheService">
            <summary>
            Cache service for storing tenant alias mapping.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.Application.ITenantAliasMappingCacheService.Get(System.String,System.String)">
            <summary>
            Gets the value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="regionName">Name of the region.</param>
            <returns>The value for the given key.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Application.ITenantAliasMappingCacheService.Add(System.String,System.Object,System.String)">
            <summary>
            Adds the specified value with the given key in the cache.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="regionName">Name of the region.</param>
            <returns>True if success.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.Application.TenantAliasMappingCacheService">
            <summary>
            Provides access to the application cache.
            </summary>
            <seealso cref="T:SmartHub.Hosting.Caching.CacheUtilizerServiceBase" />
        </member>
        <member name="M:TaxHub.Common.Security.Application.TenantAliasMappingCacheService.#ctor(SmartHub.Hosting.Caching.IObjectCacheManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Security.Application.TenantAliasMappingCacheService" /> class.
            </summary>
            <param name="cacheManager">The cache manager.</param>
        </member>
        <member name="M:TaxHub.Common.Security.Application.ITenantAliasMappingServiceAdapter.GetTenantIdForAlias(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Maps the alias to tenant identifier.
            </summary>
            <param name="tenantAlias">The tenant alias.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The identifier for the tenant with the given alias.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.Application.TenantAliasMappingServiceAdapter">
            <summary>
            This service adapter maps from tenant alias to tenant identifier.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.AuthToken">
            <summary>
            This class represents the basis of what a token needs
            to be able to provide authentication.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.AuthToken.Scheme">
            <summary>
            Gets the type (scheme) of the token (i.e., Bearer)
            </summary>
            <value>
            The type of the token.
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.AuthToken.Token">
            <summary>
            Gets the token, which is usually a long string of
            encoded characters that when decoded provides proof
            that the possessor is who they say they are.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="T:TaxHub.Common.Security.BasicAuth.BasicAuthenticationProvider">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.Common.Security.BasicAuth.BasicAuthenticationProvider.ValidateIdentity(TaxHub.Common.Security.BasicAuth.BasicAuthInboundContext)">
            <inheritdoc />
            <summary>
            Validates the given BasicAuthContext
            </summary>
            <param name="context">The context to validate</param>
            <returns>The Identity of the principal with which this context is associated or null if the context is invalid.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.BasicAuth.IBasicAuthenticationProvider">
            <summary>
            Provides verification of the identity of an BasicAuthContext
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.BasicAuth.IBasicAuthenticationProvider.ValidateIdentity(TaxHub.Common.Security.BasicAuth.BasicAuthInboundContext)">
            <summary>
            Validates the given BasicAuthContext
            </summary>
            <param name="context">The context to validate</param>
            <returns>The Identity of the principal with which this context is associated.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.BasicAuth.BasicAuthInboundContext">
            <summary>
            This object represents an BasicAuth request coming in to our API.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.BasicAuth.BasicAuthInboundContext.AccessToken">
            <summary>
            Gets the access token, which is a base 64 encoded username:password token that contains information about the client.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.BasicAuth.BasicAuthInboundContext.TargetScope">
            <summary>
            Gets the target scope that context belongs to.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.BasicAuth.BasicAuthInboundContext.CorrelationId">
            <summary>
            Gets or sets correlation Id associated with current context.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.BasicAuth.BasicAuthToken">
            <summary>
            This class represents an authentication token that can be used for basic authentication in an BasicAuth system.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.BasicCredentials">
            <summary>
            Class holds credentials basic user credentials.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.BasicCredentials.UserName">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.BasicCredentials.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.BasicCredentials.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.BasicCredentials.IsEmpty">
            <summary>
            Returns boolean indicator whether credentials are empty.
            </summary>
            <returns>Boolean indicator whether credentials are empty (true) or not (false).</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.AsymmetricEncryptionService.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Method encrypts the data using RSA algorithm and provided public key.
            </summary>
            <param name="clearData">The data to encrypt.</param>
            <param name="pemKey">The key in PEM format.</param>
            <returns>Returns an array with encrypted data.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.AsymmetricEncryptionService.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Method decrypts the data using RSA algorithm and provided private key.
            </summary>
            <param name="encryptedData">The data to decrypt.</param>
            <param name="pemKey">The key in PEM format.</param>
            <returns>Returns an array with clear data.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.HmacSha256HashProvider.#ctor(TaxHub.Common.Security.KeyServer.IDedHmacConfigProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Security.Encryption.HmacSha256HashProvider"/> class.
            </summary>
            <param name="hmacConfigProvider">The hmac configuration provider.</param>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.HmacSha256HashProvider.CalculateHmacSha256Hash(System.String)">
            <summary>
            Calculates the hmac sha256 hash.
            </summary>
            <param name="json">The json.</param>
            <returns>The byte array representation of the HMACSHA256 hash.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.HmacSha256HashProvider.AssertHmacSha256Hash(System.String,System.String)">
            <summary>
            Calculates the hmac sha256 hash and compares it to a master hash.
            </summary>
            <param name="json">The json.</param>
            <param name="masterHash">The master hash to compare to.</param>
            <returns>The boolean value indicating whether two hashes match.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.IAsymmetricEncryptionService.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Method encrypts the data using RSA algorithm and provided public key.
            </summary>
            <param name="rawData">The data to encrypt.</param>
            <param name="pemKey">The key in PEM format.</param>
            <returns>Returns an array with encrypted data.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.IAsymmetricEncryptionService.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Method decrypts the data using RSA algorithm and provided private key.
            </summary>
            <param name="encryptedData">The data to decrypt.</param>
            <param name="pemKey">The key in PEM format.</param>
            <returns>Returns an array with clear data.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.IHmacSha256HashProvider.CalculateHmacSha256Hash(System.String)">
            <summary>
            Calculates the hmac sha256 hash.
            </summary>
            <param name="json">The json.</param>
            <returns>The byte array representation of the HMACSHA256 hash.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.IHmacSha256HashProvider.AssertHmacSha256Hash(System.String,System.String)">
            <summary>
            Calculates the hmac sha256 hash and compares it to a master hash.
            </summary>
            <param name="json">The json.</param>
            <param name="masterHash">The master hash to compare to.</param>
            <returns>The boolean value indicating whether two hashes match.</returns>
        </member>
        <member name="P:TaxHub.Common.Security.Encryption.ISymmetricEncryptionService.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.ISymmetricEncryptionService.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Method encrypts the data using AES algorithm and CBC mode with provided encryption key.
            </summary>
            <remarks>The key must be 128 bit.</remarks>
            <param name="clearData">The data to encrypt.</param>
            <param name="key">The encryption key.</param>
            <returns>Returns an array with cipher.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.ISymmetricEncryptionService.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Method decrypts the data using AES algorithm and CBC mode with provided encryption key.
            </summary>
            <remarks>The key must be 128 bit.</remarks>
            <param name="encryptedData">The data to decrypt.</param>
            <param name="key">The encryption key.</param>
            <returns>Returns an array with clear data.</returns>
        </member>
        <member name="T:TaxHub.Common.Security.Encryption.MissingKeyException">
            <summary>
            Class represents missing encryption key exception.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Encryption.SymmetricAesCbcEncryptionService.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.SymmetricAesCbcEncryptionService.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Method encrypts the data using AES algorithm and CBC mode with provided encryption key.
            </summary>
            <remarks>The key must be 128 bit.</remarks>
            <param name="clearData">The data to encrypt.</param>
            <param name="key">The encryption key.</param>
            <returns>Returns an array with cipher.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.SymmetricAesCbcEncryptionService.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Method decrypts the data using AES algorithm and CBC mode with provided encryption key.
            </summary>
            <remarks>The key must be 128 bit.</remarks>
            <param name="encryptedData">The data to decrypt.</param>
            <param name="key">The encryption key.</param>
            <returns>Returns an array with clear data.</returns>
        </member>
        <member name="P:TaxHub.Common.Security.Encryption.SymmetricAesGcmEncryptionService.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.SymmetricAesGcmEncryptionService.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Method encrypts the data using AES algorithm and GCM mode with provided encryption key.
            </summary>
            <remarks>The key must be 128 bit.</remarks>
            <param name="clearData">The data to encrypt.</param>
            <param name="key">The encryption key.</param>
            <returns>Returns an array with cipher.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Encryption.SymmetricAesGcmEncryptionService.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Method decrypts the data using AES algorithm and CBC mode with provided encryption key.
            </summary>
            <remarks>The key must be 128 bit.</remarks>
            <param name="encryptedData">The data to decrypt.</param>
            <param name="key">The encryption key.</param>
            <returns>Returns an array with clear data.</returns>
            <exception cref="T:Org.BouncyCastle.Crypto.InvalidCipherTextException">throws  if encryptedData doesn't authenticate</exception>
        </member>
        <member name="M:TaxHub.Common.Security.Extensions.ApiControllerExtensions.GetUserPrincipal(System.Web.Http.ApiController)">
            <summary>
            Method retrieves the application UserPrincipal object associated with the controller.
            </summary>
            <param name="controller">The API controller.</param>
            <returns>Returns an instance of UserPrincipal.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Extensions.StringSecurityExtensions.ToSecureString(System.String)">
            <summary>
            Method creates new SecureString object from string value.
            </summary>
            <param name="secret">The secret string.</param>
            <returns>New SecureString object.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.Extensions.StringSecurityExtensions.Erase(System.String)">
            <summary>
            Method erases string by replacing all chars with 0-byte data to prevent sensitive data being left in the memory.
            </summary>
            <remarks>The length of the string won't be affected by this operation.</remarks>
            <param name="secret">The secret to erase.</param>
        </member>
        <member name="T:TaxHub.Common.Security.Filters.AncillaryEntitlementAttribute">
            <summary>
            This class provides an ancillary entitlement declaration attribute for Assemblies holding API controllers. 
            These entitlements do not provide any authorization, but rather declare an intent to use the entitlement within controllers or services.  
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Filters.AncillaryEntitlementAttribute.Entitlement">
            <summary>
            The entitlement.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.Filters.AncillaryEntitlementAttribute.#ctor(System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="entitlement">The list of entitlements.</param>
        </member>
        <member name="T:TaxHub.Common.Security.Filters.AuthorizeTenantApiRootAttribute">
            <summary>
            This class provides an API controller or its method attribute that checks proper permissions for accessing API root for specific tenant.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Filters.AuthorizeTenantApiRootAttribute.AccessMultipleTenantsEntitlement">
            <summary>
            Entitlement to allow access to multiple tenants. Defaults to "AccessMultipleTenants"
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.Filters.ClaimsAuthorizeAttribute">
            <summary>
            This class provides a claim-based authorization attribute for API controller or its method. 
            Multiple attributes can be used.
            </summary>
            <remarks>This attribute does not check for general user authorization. Use AuthorizeAttribute for that purpose.</remarks>
        </member>
        <member name="P:TaxHub.Common.Security.Filters.ClaimsAuthorizeAttribute.ClaimType">
            <summary>
            The type of the Claim.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.Filters.ClaimsAuthorizeAttribute.ClaimValue">
            <summary>
            The value of the Claim.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.Filters.ClaimsAuthorizeAttribute.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.Filters.ClaimsAuthorizeAttribute.#ctor(System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="claimType">The type of the Claim.</param>
        </member>
        <member name="M:TaxHub.Common.Security.Filters.ClaimsAuthorizeAttribute.#ctor(System.String,System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="claimType">The type of the Claim.</param>
            <param name="claimValue">The value of the Claim.</param>
        </member>
        <member name="T:TaxHub.Common.Security.Filters.NoEntitlementAuthorizeAttribute">
            <summary>
            This class provides an "ignore-like" attribute for entitlement-based authorization used on API controller or its method. 
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.Filters.NoEntitlementAuthorizeAttribute.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.Filters.EntitlementAuthorizeAttribute">
            <summary>
            This class provides a entitlement-based authorization attribute for API controller or its method. 
            </summary>
            <remarks>This attribute does not check for general user authorization. Use AuthorizeAttribute for that purpose.</remarks>
        </member>
        <member name="P:TaxHub.Common.Security.Filters.EntitlementAuthorizeAttribute.Entitlements">
            <summary>
            The list of the entitlements.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.Filters.EntitlementAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            Class constructor.
            </summary>
            <param name="entitlement">The list of entitlements.</param>
        </member>
        <member name="T:TaxHub.Common.Security.Filters.NonProductionUseAttribute">
            <summary>
            This class provides a authorization attribute for API controller or its method that asserts non-production environment when executes endpoint. 
            </summary>
            <remarks>This attribute does not check for general user authorization. Use AuthorizeAttribute for that purpose.</remarks>
        </member>
        <member name="M:TaxHub.Common.Security.Filters.NonProductionUseAttribute.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.IAuthTokenProvider">
            <summary>
            Implementers of this interface provide access to an
            authentication token.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.IAuthTokenProvider.Token">
            <summary>
            Gets an authentication token that can be used to
            prove the identity of someone or something.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.IAuthTokenProvider.HasToken">
            <summary>
            Gets a value indicating whether this instance has an auth token or not.
            </summary>
            <value>
              <c>true</c> if this instance has an auth token; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TaxHub.Common.Security.IAuthTokenProvider.IsAuthenticationEnabled">
            <summary>
            Gets a boolean indicator whether authentication is enabled
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.IAuthTokenProvider.ReinstateToken(System.String)">
            <summary>
            Method forces a token to be revoked from the current service instance, and new token to be requested.
            </summary>
            <param name="token">The failed authorization token to be revoked.</param>
            <returns>Returns boolean value indicating success.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.IAuthTokenProvider.CheckConnectivity">
            <summary>
            Checks the connectivity to whichever external system is providing the auth token.
            </summary>
            <returns>
            A task that completes when the connectivity check has completed.  The result will be <c>true</c>
            if there is connectivity; <c>false</c> otherwise.
            </returns>
            <remarks>
            This function should not be called from production code.  It is meant as a diagnostic tool.
            </remarks>
        </member>
        <member name="M:TaxHub.Common.Security.ICredentialsProvider.GetCredentials(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method returns current credentials. It optionally loads credentials if they not already loaded.
            </summary>
            <param name="loadOnNone">Boolean flag that forces loading data if not existing already. 
            NOTE: this process may raise an exception if loading process fails.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns UltiproCredentials.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.ICredentialsProvider.GetCredentials">
            <summary>
            Method returns current credentials.
            </summary>
            <returns>Returns UltiproCredentials.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.ILoadCredentials.LoadCredentials(System.Threading.CancellationToken)">
            <summary>
            Method loads the credentials from the Key Server to the local cache.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns task object.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.ILoadCredentials.HasCredentials">
            <summary>
            Method returns boolean value whether the credentials exists in the local cache.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.ILoadCredentials.Clear(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Clears credentials in the local cache, and optionally refreshes them. 
            </summary>
            <param name="refresh">Parameter indicates if credentials should be refreshed right away.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Returns a Task</returns>
        </member>
        <member name="T:TaxHub.Common.Security.OAuthStatus">
            <summary>
            Class contains the current OAuth service status.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuthStatus.HasToken">
            <summary>
            Gets or sets the boolean indicator whether service has a valid authentication token.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuthStatus.HasAuthServerConnectivity">
            <summary>
            Gets or sets the boolean indicator whether service has connectivity to remote Identity service.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.OAuthStatus.Enabled">
            <summary>
            Gets or sets the boolean indicator whether authentication service is currently enabled.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.OpenIdClaimTypes">
            <summary>
            Defines constants for known claim types used by the OAuth 2.0/OpenID Identity implementation.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.TaxHubClaimTypes">
            <summary>
            Defines constants for known claim types used by the SPS TaxHub on top of Identity implementation.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.TenantAliasMapping">
            <summary>
            Class represents the TaxHub Tenant lookup for resolving the Alias.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.TenantAliasMapping.TenantId">
            <summary>
            Gets or sets the tenant's Id
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.TenantAliasMapping.Alias">
            <summary>
            Gets or sets tenant Alias.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Security.UserPrincipal">
            <summary>
            Class represents the TaxHub user principal.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.UserPrincipal.UserName">
            <summary>
            Gets the username (preferred_username in OpenId universe). 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.UserPrincipal.Name">
            <summary>
            Gets the name (name in OpenId universe). 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.UserPrincipal.FirstName">
            <summary>
            Gets the first_name (first_name in OpenId universe). 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.UserPrincipal.LastName">
            <summary>
            Gets the last_name (last_name in OpenId universe). 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.UserPrincipal.IsUteServiceClient">
            <summary>
            Gets boolean indicator whether the user principal belongs to the UTE service client. 
            </summary>
            <remarks>Essentially this flag represents system user.</remarks>
        </member>
        <member name="P:TaxHub.Common.Security.UserPrincipal.UteTenantId">
            <summary>
            Gets the UTE tenant identifier. An Empty Guid indicates UTE system-wide tenant.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Security.UserPrincipal.UserId">
            <summary>
            Gets the user identifier. An Empty Guid indicates SPS service client (system user).
            </summary>
        </member>
        <member name="M:TaxHub.Common.Security.UserPrincipal.CreateAnonymous">
            <summary>
            Method used for testing and creates an anonymous user principal.
            </summary>
            <returns>Returns an instance of <see cref="T:TaxHub.Common.Security.UserPrincipal"/></returns>
        </member>
        <member name="M:TaxHub.Common.Security.UserPrincipal.CreateCheckPrintUserPrincipal">
            <summary>
            Method creates a user principal for CheckPrint service user.
            </summary>
            <returns>Returns an instance of <see cref="T:TaxHub.Common.Security.UserPrincipal"/></returns>
        </member>
        <member name="M:TaxHub.Common.Security.UserPrincipal.CreateInboundFilesYearEndUserPrincipal">
            <summary>
            Creates a user principal for inbound files year end service user.
            </summary>
            <returns>Returns an instance of <see cref="T:TaxHub.Common.Security.UserPrincipal"/>.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.UserPrincipal.GetUteServiceClientIdentityClaims(System.String)">
            <summary>
            Gets the claims for a UTE client service that is accessing the API
            </summary>
            <param name="subject">The subject to associate to these claims (expected to be the UTE clientId).</param>
            <returns>A dictionary of claims representing the default set for a client.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.UserPrincipal.GetServiceClientIdentityClaims(System.String,System.String,System.String)">
            <summary>
            Gets the claims for a service client that is accessing the API
            </summary>
            <param name="ta">The identity tenant that provided this client token.</param>
            <param name="clientId">The client ID.</param>
            <param name="subject">The subject to associate to these claims.</param>
            <returns>A dictionary of claims representing the default set for a service client.</returns>
        </member>
        <member name="M:TaxHub.Common.Security.UserPrincipal.ToDescription">
            <summary>
            Provides descriptive name of the user.
            </summary>
            <returns>Returns string</returns>
        </member>
        <member name="M:TaxHub.Common.Security.UserPrincipal.ToShortDescription">
            <summary>
            Provides descriptive name of the user that is less than or equal to length 254.  (modify_by max length)
            </summary>
            <returns>Returns description</returns>
        </member>
        <member name="P:TaxHub.Common.Security.UserPrincipal.Email">
            <summary>
            Gets the email (email in OpenId universe). 
            </summary>
        </member>
        <member name="T:TaxHub.Common.IO.DelegatingStream">
            <summary>
            Wraps an underlying <see cref="T:System.IO.Stream"/> instance.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:TaxHub.Common.IO.DelegatingStream.ownsStream">
            <summary>
            Indicates whether this instance owns the underlying stream, and 
            thus dispose of the stream when this instance is closed or disposed.
            </summary>
        </member>
        <member name="P:TaxHub.Common.IO.DelegatingStream.UnderlyingStream">
            <summary>
            Gets the underlying <see cref="T:System.IO.Stream"/> instance.
            </summary>
            <value>
            The underlying <see cref="T:System.IO.Stream"/> instance.
            </value>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.IO.DelegatingStream"/> class from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="underlyingStream">The stream to wrap.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="underlyingStream"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.IO.DelegatingStream"/> class from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="underlyingStream">The stream to wrap.</param>
            <param name="ownsStream">
            <para><see langword="true"/> if this object owns the wrapped stream, and should dispose
            of it when this instance is closed or disposed.</para>
            <para>-or-</para>
            <para><see langword="false"/> if this object should not dispose of the wrapped stream.</para>
            <para>The default value is <see langword="true"/>.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="underlyingStream"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:TaxHub.Common.IO.DelegatingStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.Common.IO.DelegatingStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.Common.IO.DelegatingStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.Common.IO.DelegatingStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.Common.IO.DelegatingStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.Close">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.EndRead(System.IAsyncResult)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.EndWrite(System.IAsyncResult)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.Common.IO.DelegatingStream.CanTimeout">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.ReadByte">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.Common.IO.DelegatingStream.ReadTimeout">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.WriteByte(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="P:TaxHub.Common.IO.DelegatingStream.WriteTimeout">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.Common.IO.DelegatingStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.Common.TransparentSerializeContractResolver">
            <summary>
            This resolver ensures no change to the PropertyNames are being made even class has properties with JSON-related attributes overriding the names.
            </summary>
        </member>
        <member name="T:TaxHub.Common.EnforcedCamelCasePropertyNamesContractResolver">
            <summary>
            This resolver ensures no change to the CamelCasing PropertyNames are being made even class has properties with JSON-related attributes overriding the names.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.FilingMetrics">
            <summary>
            The metrics API for efiling.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Metrics.IFilingMetrics.MetricTags">
            <summary>
            The metric tags posted that can further be chained
            </summary>
            <returns>
              DynamicTags to increment the metrics, or to add on more tags
            </returns>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.AsState(System.String)">
            <summary>
            Adds state tag to metric tags
            </summary>
            <param name="state">The two-letter state abbreviation</param>
            <returns>
              A new instance of an IFilingMetrics object tagged with state
            </returns>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.AsQuarterly">
            <summary>
            Adds quarterly tag to metric tags
            </summary>
            <returns>
              A new instance of an IFilingMetrics object tagged with quarterly type
            </returns>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.AsAnnual">
            <summary>
            Adds Annual tag to metric tags
            </summary>
            <returns>
              A new instance of an IFilingMetrics object tagged with annual type
            </returns>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.AsEFile">
            <summary>
            Adds efile tag to metric tags
            </summary>
            <returns>
              A new instance of an IFilingMetrics object tagged with efile type
            </returns>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.AsTaxFileType">
            <summary>
            Add tax file tag to generated files.
            </summary>
            <returns>
            A new instance of an IFilingMetrics object tagged with TaxFile type
            </returns>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.AsErrorFileType">
            <summary>
            Add error file tag to generated files.
            </summary>
            <returns>
            A new instance of an IFilingMetrics object tagged with ErrorFile type
            </returns>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.AsTransmittalFileType">
            <summary>
            Add Transmittal file tag to generated files.
            </summary>
            <returns>
            A new instance of an IFilingMetrics object tagged with TransmittalFile type
            </returns>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.AsOtherFileType">
            <summary>
            Add Other file tag to generated files.
            </summary>
            <returns>
            A new instance of an IFilingMetrics object tagged with OtherFile type
            </returns>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.FailedClientProcess">
            <summary>
            Increments client counter with failure status
            </summary>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.SkippedClientProcess">
            <summary>
            Increments client counter with skipped status
            </summary>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.SkippedClientProcess(System.Int32)">
            <summary>
            Increments client counter with skipped status
            </summary>
            <param name="skippedClientCount">The Amount of Clients skipped.</param>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.SucceededClientProcess">
            <summary>
            Increments client counter with success status
            </summary>
        </member>
        <member name="M:TaxHub.Common.Metrics.IFilingMetrics.GeneratedFile(System.Int64)">
            <summary>
            Increments file created counter.
            </summary>
            <param name="dataSize">The size of the created file.</param>
        </member>
        <member name="T:TaxHub.Common.Metrics.ITagsProvider">
            <summary>
            Provides a dynamic instance of metrics Tags 
            </summary>
        </member>
        <member name="M:TaxHub.Common.Metrics.ITagsProvider.GetTags(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation)">
            <summary>
            Rerieves an instance of <see cref="T:SmartHub.Metrics.Tags"/> based on the method invocation.
            </summary>
            <param name="methodInvocation">Method invcation data.</param>
            <returns>An instance of <see cref="T:SmartHub.Metrics.Tags"/></returns>
        </member>
        <member name="T:TaxHub.Common.Metrics.IValueRetriever`1">
            <summary>
            Interface used to retrieve metric value from a dynamic object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureHandler">
            <summary>
            This Base class is intended to work around an issue with Unity Container Policy injection where the same method handler is called multiple times before the actual method that has
            the attribute applied is called.
            The unit test MeasureTimeAttributePolicyInjectionTests worked fine without this base class, so it looks like there is an issue with our current container registration for which it was very
            difficult to figure out the root cause; most likely moving to Uniy 5 should resolve the problem.
            Having a concurrent dictionary with a key built with the method signature, order, and thread id will allow multiple calls and threads with the same handler to invoke the method and 
            apply the measurement only once.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureHistogramAttribute">
            <summary>
            Apply this attribute in order to count the method calls.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureHistogramHandler">
            <summary>
            App metric call handler used to record counter metrics.
            To be moved 
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureCallsHandler">
            <summary>
            App metric call handler used to record counter metrics.
            To be moved 
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureMeterAttribute">
            <summary>
            Apply this attribute in order to measure the duration of a method call.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureMeterHandler">
            <summary>
            App metric call handler used to record meter metrics.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureTimeDynamicTagsAttribute">
            <summary>
            Apply this attribute in order to measure the duration of a method call when the tags values are dynamic. 
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureTimeHandler">
            <summary>
            App metric call handler used to record timer metrics.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureCallsAttribute">
            <summary>
            Apply this attribute in order to count the method calls.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureTimeAttribute">
            <summary>
            Apply this attribute in order to measure the duration of a method call.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureValueGaugeAttribute">
            <summary>
            Apply this attribute in order to measure a method call using a gauge.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureValueGaugeHandler">
            <summary>
            App metric call handler used to record value gauge metrics.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Metrics.MeasureValueRecorderHandlerBase`1">
            <summary>
            App metric base handler used to record values.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Metrics.MeasureValueRecorderHandlerBase`1.RecordValue(`0)">
            <summary>
            Extension point to record the value in the metric.
            </summary>
            <param name="value">Value to record.</param>
        </member>
        <member name="T:TaxHub.Common.Models.AgencyAuthority">
            <summary>
            Agency Authority
            </summary>
        </member>
        <member name="T:TaxHub.Common.Models.AggregateValidationResult">
            <summary>
            Object used to return validation errors from the aggregates
            </summary>
        </member>
        <member name="F:TaxHub.Common.Models.AggregateValidationResult.IsValid">
            <summary>
            Gets or sets a boolean indicating if the result is valid.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Models.AggregateValidationResult.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Models.AggregateValidationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Models.AggregateValidationResult"/> class.
            </summary>
        </member>
        <member name="E:TaxHub.Common.Models.IAggregateBase.AggregateEvent">
            <summary>
            The aggregate event. It's being raised on aggregate changes when occur.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.IAggregateBase.SchemaVersion">
            <summary>
            Gets current aggregate schema version. By default is 1.0.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.IAggregateBase.CreatedUtcDt">
            <summary>
            Gets or sets date and time when aggregate was created. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.IAggregateBase.UpdatedUtcDt">
            <summary>
            Gets or sets aggregate most recent update date and time. 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.IAggregateBase.Version">
            <summary>
            Gets or sets current aggregate version (update sequence, not schema version).
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.IAggregateBase.EventSequenceNumber">
            <summary>
            Gets the current event sequence number to be used for ordering the events. 
            </summary>
        </member>
        <member name="M:TaxHub.Common.Models.IAggregateBase.GetId">
            <summary>
            Method provides generic way to obtain an aggregate ID encapsulating the logic of using aggregate specific property names.
            </summary>
            <returns>Returns The Id.</returns>
        </member>
        <member name="M:TaxHub.Common.Models.IAggregateBase.GetTenantId">
            <summary>
            Method provides generic way to obtain an aggregate TenantId encapsulating the logic whether aggregate is tenant-specific or not. An empty <see cref="T:System.Guid"/> is returned if aggregate is not tenant-specific.
            </summary>
            <returns>Returns a <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:TaxHub.Common.Models.IAggregateBase.MarkAsPersisted">
            <summary>
            Method updates aggregate state management indicating that state has been persisted to the repository. 
            This method MUST NOT BE USED from any code OTHER THAN REPOSITORIES. Using this method outside of repositories may lead to data corruption.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Models.IAggregateBase.HasChanges">
            <summary>
            Method determines whether or not an aggregate instance has any changes.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="T:TaxHub.Common.Models.IApplyEventSequenceNumber">
            <summary>
            Interface for Views with "Last Applied Event Sequence Number"
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.IApplyEventSequenceNumber.AppliedEventSequenceNumber">
            <summary>
            Gets or sets the last applied event sequence number.
            </summary>
            <value>
            The last applied event sequence number.
            </value>
        </member>
        <member name="T:TaxHub.Common.Models.InputTaxInstanceType">
            <summary>
            A class that represents the type of an Input Tax Instance
            </summary>
        </member>
        <member name="F:TaxHub.Common.Models.InputTaxInstanceType.Quarterly">
            <summary>
            Quarterly Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Models.InputTaxInstanceType.Amendment">
            <summary>
            Periodic Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Models.InputTaxInstanceType.Regular">
            <summary>
             Regular Type
            </summary>
        </member>
        <member name="F:TaxHub.Common.Models.InputTaxInstanceType.SuiCredit">
            <summary>
             SUI Credit
            </summary>
        </member>
        <member name="F:TaxHub.Common.Models.InputTaxInstanceType.AgencyCredit">
            <summary>
             Agency Credit
            </summary>
        </member>
        <member name="F:TaxHub.Common.Models.InputTaxInstanceType.OverpayRefund">
            <summary>
             Overpay Refund
            </summary>
        </member>
        <member name="T:TaxHub.Common.Models.ISnapshotable">
            <summary>
            Interface implemented by an aggregate that is capable of producing a snapshot
            </summary>
        </member>
        <member name="M:TaxHub.Common.Models.ISnapshotable.CreateSnapshot">
            <summary>
            Method produces a snapshot by raising an "*.observed" event.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Models.PagedList`1">
            <summary>
            This class adds paging metadata to a generic IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:TaxHub.Common.Models.PagedList`1.PageNumber">
            <summary>
            Gets or sets the PageNumber
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.PagedList`1.PageSize">
            <summary>
            Gets or sets the PageSize
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.PagedList`1.TotalCount">
            <summary>
            Gets or sets the Total count of elements.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.PagedList`1.Data">
            <summary>
            Gets or sets the paged data.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Models.Quarter">
            <summary>
            Represents a quarter of the year (Example Q1 2017 = 1/1/2017 to 4/12017)
            </summary>
            <summary>
            Represents a quarter of the year (Example Q1 2017 = 1/1/2017 to 4/12017)
            </summary>
        </member>
        <member name="M:TaxHub.Common.Models.Quarter.GetQuarter(System.DateTime)">
            <summary>
            Gets a quarter number (1 to 4) given a date
            </summary>
            <param name="date">A date</param>
            <returns>The quarter number (1 to 4) that the date belongs to</returns>
        </member>
        <member name="M:TaxHub.Common.Models.Quarter.GetNextQuarter">
            <summary>
            Gets the quarter following the current quarter
            </summary>
            <returns>A new quarter which is the one following the current one</returns>
        </member>
        <member name="M:TaxHub.Common.Models.Quarter.GetPreviousQuarter">
            <summary>
            Gets the quarter before the current quarter
            </summary>
            <returns>A new quarter which is the one that came before the current one</returns>
        </member>
        <member name="M:TaxHub.Common.Models.Quarter.FromPeriod(System.String)">
            <summary>
            Convert quarter period "12019" to quarter instance: 1st quarter year 2019
            </summary>
            <param name="quarterPeriod">The quarter period, ex: 12019</param>
            <returns>The quarter instance if valid</returns>
        </member>
        <member name="M:TaxHub.Common.Models.Quarter.Equals(System.Object)">
            <summary>
            Checks if 2 quarters are equal
            </summary>
            <param name="obj">The quarter to compare this quarter to</param>
            <returns>true if the 2 quarters are equal, otherwise false</returns>
        </member>
        <member name="M:TaxHub.Common.Models.Quarter.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates a new Quarter object
            </summary>
            <param name="startDate">The quarter start date</param>
            <param name="endDate">The quarter end date</param>
        </member>
        <member name="M:TaxHub.Common.Models.Quarter.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Quarter object
            </summary>
            <param name="quarterNumber">The quarter number (1 to 4)</param>
            <param name="year">The quarter year</param>
        </member>
        <member name="M:TaxHub.Common.Models.Quarter.#ctor(System.DateTime)">
            <summary>
            Creates a new Quarter object
            </summary>
            <param name="date">A date that the quarter will contain</param>
        </member>
        <member name="P:TaxHub.Common.Models.Quarter.StartDate">
            <summary>
            The start date
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.Quarter.EndDate">
            <summary>
             The end date
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.Quarter.QuarterNumber">
            <summary>
            The quarter number
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.Quarter.Year">
            <summary>
             The quarter year
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.Quarter.Period">
            <summary>
            Get quarter period.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Models.Entity`1.GetDomainEventData(System.String,System.Object)">
            <summary>
            Gets the domain event data.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="eventDataDetails">The event data details.</param>
            <returns>DomainEventData</returns>
        </member>
        <member name="M:TaxHub.Common.Models.Entity`1.ToMessageBody">
            <summary>
            Gets the clone of the aggregate base including the value of the relevant fields for the 
            current aggregate
            </summary>
            <returns>The aggregate clone.</returns>
        </member>
        <member name="M:TaxHub.Common.Models.Entity`1.Delete">
            <summary>
            Deletes this instance.
            </summary>
            <returns>Returns true if and only if this instance can be deleted.</returns>
        </member>
        <member name="T:TaxHub.Common.Models.ProcessingFrequency">
            <summary>
            Specifies the frequency of the tax process that we are running.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Models.ProcessingFrequency.Periodic">
            <summary>
            Periodic tax process.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Models.ProcessingFrequency.Quarterly">
            <summary>
            Quarterly tax process.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Models.ProcessingFrequency.Yearly">
            <summary>
            Yearly/YearEnd tax process.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Models.VersionTracker">
            <summary>
            Class provides basic properties such as aggregate version, created and updated date and time for all aggregates.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.VersionTracker.CreatedUtcDt">
            <summary>
            Gets or sets date and time when aggregate was created.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.VersionTracker.UpdatedUtcDt">
            <summary>
            Gets or sets aggregate most recent update date and time.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.VersionTracker.Version">
            <summary>
            Gets or sets current aggregate version (update sequence, not schema version).
            </summary>
        </member>
        <member name="P:TaxHub.Common.Models.VersionTracker.EventSequenceNumber">
            <summary>
            Gets the current event sequence number to be used for ordering the events.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Models.VersionTracker.MarkAsChanged">
            <summary>
            Method updates aggregate state management indicating it has changes and incrementing its version by 1.
            The version won't change if multiple updates are being made to the same state.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Models.VersionTracker.MarkAsPersisted">
            <summary>
            Method updates aggregate state management indicating that state has been persisted to the repository.
            This method MUST NOT BE USED from any code OTHER THAN REPOSITORIES. Using this method outside of repositories may lead to data corruption.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Models.VersionTracker.IncrementEventSequence">
            <summary>
            Method increments event sequencer. This method must be called before sending each event (only once per event).
            </summary>
        </member>
        <member name="M:TaxHub.Common.Models.VersionTracker.IsNew">
            <summary>
            Method determines whether or not an instance represents new aggregate.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Common.Models.VersionTracker.HasChanges">
            <summary>
            Method determines whether or not an aggregate instance has any changes.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="M:TaxHub.Common.Models.VersionTracker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Models.VersionTracker"/> class.
            Default constructor.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Models.VersionTracker.IsValidSchemaVersion(System.String)">
            <summary>
            Method validates format of schema version. Acceptable format is "{major}.{minor}", the minor version is optional. E.g.: 1.4, 3, 15.4566.
            </summary>
            <param name="schemaVersion">Schema version as a string.</param>
            <remarks>It is not recommended to use this method in production due to performance.
            Debug.Assert is the best way to validate format in development using debug mode.</remarks>
            <returns>Returns boolean value: true if valid, otherwise false.</returns>
        </member>
        <member name="T:TaxHub.Common.Runtime.DataEncryptionProviderFactory">
            <summary>
            The class serves instances of IDataEncryptionProvider for the application.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Runtime.DataEncryptionProviderFactory.Initialize(TaxHub.Common.Runtime.IDataEncryptionProvider)">
            <summary>
            Initializes the factory with IDataEncryptionProviders to use.
            </summary>
            <param name="defaultProvider">The instance of IDataEncryptionProvider that should be used by default.</param>
        </member>
        <member name="M:TaxHub.Common.Runtime.DataEncryptionProviderFactory.Create">
            <summary>
            Creates an instance of default IDataEncryptionProvider.
            </summary>
            <returns>Returns an instance of IDataEncryptionProvider.</returns>
        </member>
        <member name="M:TaxHub.Common.Runtime.DataEncryptionProviderFactory.IsInitialized">
            <summary>
            Method checks if the factory is already initialized.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="T:TaxHub.Common.Runtime.DelayProcess">
            <summary>
            Implements delay functionality
            </summary>
        </member>
        <member name="M:TaxHub.Common.Runtime.DelayProcess.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>
            This method produces a delay
            </summary>
            <param name="seconds">Delay in seconds</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:TaxHub.Common.Runtime.DomainServiceExtensions">
            <summary>
            Class implements and/or provides access to domain level services.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Runtime.DomainServiceExtensions.GetEventStore(TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Get the event store service.
            </summary>
            <param name="domainService">Domain service</param>
            <returns>Returns an instance of IEventStore.</returns>
        </member>
        <member name="M:TaxHub.Common.Runtime.DomainServiceExtensions.GetQueryableEventStore(TaxHub.Hosting.Runtime.IDomainService)">
            <summary>
            Get the queryable event store service.
            </summary>
            <param name="domainService">Domain service</param>
            <returns>Returns an instance of IEventStore.</returns>
        </member>
        <member name="T:TaxHub.Common.Runtime.HttpClientFactory">
            <summary>
            Class creates new instances of Http Client.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Runtime.HttpClientFactory.CreateAuthorizedHttpClient(System.Guid)">
            <summary>
            Creates an HttpClient that has the authorization header set.
            </summary>
            <param name="correlationId">The correlation Id to use for all Http Client requests.</param>
            <returns>Returns HttpClient object.</returns>
        </member>
        <member name="T:TaxHub.Common.Runtime.HttpClientSecurityInterceptor">
            <summary>
            Class intercepts the request from HTTP client and subsequent response, 
            and is responsible for providing authentication to the request as well as resolving authorization issues if such occur. 
            Despite handling HTTP 403 Forbidden response status the code utilizing the HTTP Client is responsible for handling 
            all appropriate HTTP statuses and exceptions.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Runtime.HttpClientSecurityInterceptor.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Handles HTTP request.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Return the response message.</returns>
        </member>
        <member name="T:TaxHub.Common.Runtime.HttpServiceClientFactory">
            <summary>
            Class creates new instances of Http Service Client. 
            The returned client already contains authorization, correlation and base service URI.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Runtime.HttpServiceClientFactory.#ctor(TaxHub.Hosting.Runtime.IHttpClientFactory,TaxHub.Common.Configuration.IHttpServiceLocator)">
            <summary>
            Class constructor.
            </summary>
            <param name="httpClientFactory">The http client factory to use.</param>
            <param name="serviceLocator">The HTTP service locator.</param>
        </member>
        <member name="M:TaxHub.Common.Runtime.HttpServiceClientFactory.CreateClient(System.String,System.Guid)">
            <summary>
            Creates an HttpClient for named service WITHOUT authorization header.
            </summary>
            <param name="serviceName">The service name. Use <see cref="T:TaxHub.Common.Configuration.HttpServiceKnownNames"/> for known names.</param>
            <param name="correlationId">The correlation Id to be used for requests.</param>
            <returns>Returns HttpClient object.</returns>
            <exception cref="T:System.Exception">An exception will be thrown if service not found in the HTTP service directory.</exception>
        </member>
        <member name="M:TaxHub.Common.Runtime.HttpServiceClientFactory.CreateAuthorizedClient(System.String,System.Guid)">
            <summary>
            Creates an HttpClient for named service that has the authorization header set.
            </summary>
            <param name="serviceName">The service name. Use <see cref="T:TaxHub.Common.Configuration.HttpServiceKnownNames"/> for known names.</param>
            <param name="correlationId">The correlation Id to be used for requests.</param>
            <returns>Returns HttpClient object.</returns>
            <exception cref="T:System.Exception">An exception will be thrown if service not found in the HTTP service directory.</exception>
        </member>
        <member name="T:TaxHub.Common.Runtime.MetricsTracking.ResponseSizeDelegatingHandler">
            <summary>
            Message handler used for gathering reponse size metrics.
            This needs to be moved to SmartHub nuget package.
            For now this is not used anywhere. 
            </summary>
        </member>
        <member name="M:TaxHub.Common.Runtime.MetricsTracking.ResponseSizeDelegatingHandler.#ctor(SmartHub.Metrics.IAppMetricsFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.Common.Runtime.MetricsTracking.ResponseSizeDelegatingHandler"/> class.
            </summary>
            <param name="metricsFactory">An instance of the AppMetricsFactory</param>
        </member>
        <member name="T:TaxHub.Common.Runtime.SmartHubServiceClientBase">
            <summary>
            Class provides connectivity to a HUB API service.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Runtime.SmartHubServiceClientBase.MaxMemoryStreamSize">
            <summary>
            Maximum memory size allowed to be used for storing streams retrieved from the APIs.
            Currently set to 16Mb.
            If object size exceeds allowed memory size a temporary file will be used instead.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Runtime.SmartHubServiceClientBase.#ctor(TaxHub.Common.Logging.IAppLogger,TaxHub.Common.Runtime.IHttpServiceClientFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
            <param name="httpClientFactory">The HttpClient factory.</param>
        </member>
        <member name="M:TaxHub.Common.Runtime.SmartHubServiceClientBase.#ctor(TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Constructor.
            </summary>
            <param name="logger">The application logger.</param>
        </member>
        <member name="M:TaxHub.Common.Runtime.SmartHubServiceClientBase.GetApiVersionUriPart">
            <summary>
            Returns the version number related part for the urls constructed using this class (by default the url from config contains the version)
            </summary>
            <returns>The version number related part for the url</returns>
        </member>
        <member name="M:TaxHub.Common.Runtime.SmartHubServiceClientBase.AssembleFinalApiUri(System.Net.Http.HttpClient)">
            <summary>
            Adds / if missing and adds the version for the domain api call
            </summary>
            <param name="client">HttpClient to which we add thje version information</param>
        </member>
        <member name="M:TaxHub.Common.Runtime.SmartHubServiceClientBase.InitializeClient(System.Guid)">
            <summary>
            Initializes client.
            </summary>
            <param name="correlationId">The correlationId associated with the process.</param>
            <returns>HttpClient - initialized client</returns>
        </member>
        <member name="M:TaxHub.Common.Runtime.SmartHubServiceClientBase.Dispose">
            <summary>
            Method disposes any resources used by the class.
            </summary>
        </member>
        <member name="T:TaxHub.Common.Runtime.IDelayProcess">
            <summary>
            This interface must be implemented by the class providing the delay functionality
            </summary>
        </member>
        <member name="M:TaxHub.Common.Runtime.IDelayProcess.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>
            This method produces a delay
            </summary>
            <param name="seconds">Delay in seconds</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:TaxHub.Common.Runtime.IHttpServiceClientFactory.CreateClient(System.String,System.Guid)">
            <summary>
            Creates an HttpClient for named service WITHOUT authorization header.
            </summary>
            <param name="serviceName">The service name. Use <see cref="T:TaxHub.Common.Configuration.HttpServiceKnownNames"/> for known names.</param>
            <param name="correlationId">The correlation Id to be used for requests.</param>
            <returns>Returns HttpClient object.</returns>
            <exception cref="T:System.Exception">An exception will be thrown if service not found in the HTTP service directory.</exception>
        </member>
        <member name="M:TaxHub.Common.Runtime.IHttpServiceClientFactory.CreateAuthorizedClient(System.String,System.Guid)">
            <summary>
            Creates an HttpClient for named service that has the authorization header set.
            </summary>
            <param name="serviceName">The service name. Use <see cref="T:TaxHub.Common.Configuration.HttpServiceKnownNames"/> for known names.</param>
            <param name="correlationId">The correlation Id to be used for requests.</param>
            <returns>Returns HttpClient object.</returns>
            <exception cref="T:System.Exception">An exception will be thrown if service not found in the HTTP service directory.</exception>
        </member>
        <member name="P:TaxHub.Common.Runtime.IVersionTracker.Version">
            <summary>
            Gets or sets aggregate's current version.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Runtime.IVersionTracker.MarkAsPersisted">
            <summary>
            Method updates aggregate state management indicating that state has been persisted to the repository. 
            This method MUST NOT BE USED from any code OTHER THAN REPOSITORIES. Using this method outside of repositories may lead to data corruption.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Runtime.IVersionTracker.HasChanges">
            <summary>
            Method returns boolean indicator whether it has any changes since last time it was retrieved from the repository or been saved to the repository.
            </summary>
            <returns>Returns boolean value.</returns>
        </member>
        <member name="T:TaxHub.Common.Runtime.IDataEncryptionProvider">
            <summary>
            The interface must be implemented by the class providing the data encryption service.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Runtime.IDataEncryptionProvider.Encrypt(System.Guid,System.Byte[])">
            <summary>
            Encrypts the data using particular encryption key. 
            </summary>
            <param name="keyId">The encryption key identifier.</param>
            <param name="clearData">The data to encrypt.</param>
            <returns>Returns a byte array.</returns>
        </member>
        <member name="M:TaxHub.Common.Runtime.IDataEncryptionProvider.Encrypt(System.Byte[],System.Guid@)">
            <summary>
            Encrypts the data using random encryption key and returns the key id. 
            </summary>
            <param name="clearData">The data to encrypt.</param>
            <param name="keyId">The encryption key identifier.</param>
            <returns>Returns a byte array.</returns>
        </member>
        <member name="M:TaxHub.Common.Runtime.IDataEncryptionProvider.Decrypt(System.Guid,System.Byte[])">
            <summary>
            Decrypts the data using particular encryption key. 
            </summary>
            <param name="keyId">The encryption key identifier.</param>
            <param name="encryptedData">The data to decrypt.</param>
            <returns>Returns a byte array.</returns>
        </member>
        <member name="T:TaxHub.Common.Runtime.UseAsEnumDefaultAttribute">
            <summary>
            This attribute is used to indicate which value of an enum
            should be used as default in generated switch statements
            </summary>
        </member>
        <member name="T:TaxHub.Common.Validations.CustomAnnualRecValidation">
            <summary>
            Defines user set a custom validation 
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.CustomAnnualRecValidation.Name">
            <summary>
            The name of the validation
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.CustomAnnualRecValidation.Modifiers">
            <summary>
            The : specified modifier of the validation
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.CustomAnnualRecValidation.Fatal">
            <summary>
            Whether the validation should halt a process.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.CustomAnnualRecValidation.IsSet">
            <summary>
            Returns True if Custom Validation is active.
            </summary>
            <returns>Bool</returns>
        </member>
        <member name="M:TaxHub.Common.Validations.CustomAnnualRecValidation.#ctor(System.String)">
            <summary>
            create an instance of a custom validation froma string.
            </summary>
            <param name="recValidationString">The annual rec custom validation string</param>
        </member>
        <member name="M:TaxHub.Common.Validations.CustomAnnualRecValidation.GetUnsetInstance(System.String)">
            <summary>
            Represents a validation that is not present or set.
            </summary>
            <param name="validationName">The name of the validation.</param>
            <returns>An Unset instance of the validation.</returns>
        </member>
        <member name="T:TaxHub.Common.Validations.TaxFileValidationResult">
            <summary>
            Defines document/file level rule violations for a generated tax file.
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.TaxFileValidationResult.TaxFileId">
            <summary>
            The non-GUID name used to identify this type of file
            i.e. "AR"  or "EFW2"
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.TaxFileValidationResult.PayeeID">
            <summary>
            The Payee associated with this TaxFile
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.TaxFileValidationResult.ErrorMessage">
            <summary>
            Message describing the failed validation
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.TaxFileValidationResult.CriticalError">
            <summary>
            Indicates a critical issue with the tax file.
            It should not be saved or submitted.
            </summary>
        </member>
        <member name="M:TaxHub.Common.Validations.IAnnualRecValidator.IsValidForAnnualRec">
            <summary>
            Validates that model has required fields set for Annual Reconciliation
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:TaxHub.Common.Validations.IAnnualRecValidator.GetRuleViolationsForAnnualRec">
            <summary>
            Validates that model has required fields set for Annual Reconciliation
            </summary>
            <returns>List of requirements that have not been met<see cref="T:TaxHub.Common.Validations.RuleValidationResult"/></returns>
        </member>
        <member name="T:TaxHub.Common.Validations.RuleValidationResult">
            <summary>
            Defines rule violation that model is comitting making it invalid.
            </summary>
        </member>
        <member name="F:TaxHub.Common.Validations.RuleValidationResult.StandardEmptyErrorMessage">
            <summary>
            Standard error message for a rule violation describing that the property being inspected in the model was null or empty
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.RuleValidationResult.PropertyName">
            <summary>
            returns property that failed validation name. If more than one it will return ass single string comma separated
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.RuleValidationResult.ErrorMessage">
            <summary>
            Message describing the failed validation
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.RuleValidationResult.ModelName">
            <summary>
            Name of the model
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.RuleValidationResult.CriticalError">
            <summary>
            Indicates whether the error is critical. If critical the line is sikpped
            </summary>
        </member>
        <member name="P:TaxHub.Common.Validations.RuleValidationResult.ModelIdValue">
            <summary>
            Unique ID used to identify the model, typically non-guid primary key that model relates to.
            i.e. for Agency Ach Model, the payee id can be used to identify the model
            </summary>
        </member>
        <member name="M:TaxHub.Common.Validations.RuleValidationResult.#ctor(System.String,System.String)">
            <summary>
            Constructor for RuleValidationResult
            </summary>
            <param name="errorMessage">Message describing the failed validation</param>
            <param name="propertyName">Name of property that failed validation</param>
        </member>
        <member name="M:TaxHub.Common.SyncTask.Run(System.Action,System.Threading.CancellationToken)">
            <summary>
            Method executes an action unless cancellation is requested via token.
            </summary>
            <param name="stepAction">Action to execute.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:TaxHub.Common.SyncTask.Run``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Method executes a function unless cancellation is requested via token.
            </summary>
            <param name="stepFunc">Function to execute.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Returns a function return value</returns>
        </member>
        <member name="T:TaxHub.Common.ValidationAttributes.AllowEmptyEmailAddressAttribute">
            <summary>
            For fields that need to either be a valid email address or an empty/null value.
            </summary>
            <seealso cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
        </member>
        <member name="M:TaxHub.Common.ValidationAttributes.AllowEmptyEmailAddressAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Returns Success if the value is a valid email address or null/empty string.
            </summary>
            <param name="value">The value.</param>
            <param name="validationContext">The validation context.</param>
            <returns>Success if the value is a valid email address or null/empty string.</returns>
        </member>
        <member name="M:TaxHub.Common.ValidationAttributes.AllowEmptyEmailAddressAttribute.IsValid(System.Object)">
            <summary>
            Returns true if the object is a valid email address or a null/empty string.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns true if the object is a valid email address or a null/empty string.</returns>
        </member>
        <member name="T:TaxHub.Common.ValidationAttributes.AlphaNumericRegexAttribute">
            <summary>
            Class provides Regex inspection with specifically designed REGEX to handle safe text.
            </summary>
        </member>
        <member name="M:TaxHub.Common.ValidationAttributes.AlphaNumericRegexAttribute.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="T:TaxHub.Common.ValidationAttributes.AntiXssInspectionAttribute">
            <summary>
            Class provides AntiXss validation support. The actual validation is based on MS AntiXssLibrary.
            </summary>
            <example>
            Usage examples:
            public class AModel
            {
                [AntiXss]
                public string Name { get; set; }
                [AntiXss(allowedStrings: "&lt;br /&gt;,&lt;p&gt;")]
                public string Description { get; set; }
                [AntiXss(allowedStrings: "&lt;br /&gt;", disallowedStrings:"/,#")]
                public string NoSlashesOrHashes { get; set; }
                [AntiXss(errorMessage: "This is a custom error message")]
                public string CustomErrorMessage { get; set; }
            }
            </example>
        </member>
        <member name="P:TaxHub.Common.ValidationAttributes.AntiXssInspectionAttribute.AllowedStrings">
            <summary>
            Gets or sets a comma separated string allowed characters or words.
            </summary>
        </member>
        <member name="P:TaxHub.Common.ValidationAttributes.AntiXssInspectionAttribute.DisallowedStrings">
            <summary>
            Gets or sets a comma separated string disallowed characters or words.
            </summary>
        </member>
        <member name="M:TaxHub.Common.ValidationAttributes.AntiXssInspectionAttribute.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="T:TaxHub.Common.ValidationAttributes.PhoneNumberRegexAttribute">
            <summary>
            Class provides Regex for loose phone number matching.
            </summary>
        </member>
        <member name="M:TaxHub.Common.ValidationAttributes.PhoneNumberRegexAttribute.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="T:TaxHub.Common.ValidationAttributes.SafeTextRegexAttribute">
            <summary>
            Class provides Regex inspection with specifically designed REGEX to handle safe text.
            </summary>
        </member>
        <member name="M:TaxHub.Common.ValidationAttributes.SafeTextRegexAttribute.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="T:TaxHub.Hosting.Caching.ICacheExtensions">
            <summary>
            Extension methods for <see cref="T:TaxHub.Hosting.Caching.ICache`1"/>
            </summary>
        </member>
        <member name="M:TaxHub.Hosting.Caching.ICacheExtensions.GetAsync``1(TaxHub.Hosting.Caching.ICache{``0},System.String,System.Func{System.Threading.Tasks.Task{``0}},TaxHub.Common.Logging.IAppLogger,System.Threading.CancellationToken)">
            <summary>
            Attempts to get an item from the cache. If the item is not found, the <c>get</c> function is used to 
            obtain the item and populate the cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheService">The cache.</param>
            <param name="key">The key.</param>
            <param name="get">The get function.</param>
            <param name="logger">Optional logger to log cache stats.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Cached value.</returns>
            <exception cref="T:System.ArgumentNullException">
            cache
            or
            get
            </exception>
        </member>
        <member name="M:System.Reflection.CustomAttributeProviderExtensions.DeclaresFilter(System.Reflection.ICustomAttributeProvider,System.String)">
            <summary>
            Returns true if the attribute is declared
            </summary>
            <param name="attributeProvider">provider to extend</param>
            <param name="attribute">attribute to check for</param>
            <returns>true if the attribute appears in the declaration</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeProviderExtensions.DeclaresEntitlements(System.Reflection.ICustomAttributeProvider,System.String[])">
            <summary>
            Check if the attribute provider enforce entitlements using EntitlementAuthorize attribute 
            </summary>
            <param name="attributeProvider">method or class declaring the attributes</param>
            <param name="entitlements">entitlements to check for in declaration</param>
            <returns>true if the exact set of entitlements is declared</returns>
        </member>
        <member name="M:System.Reflection.MemberInfoExtensions.IsMatch(System.Reflection.MethodInfo,System.String,System.Type[])">
            <summary>
            Predicate to match a method info based on method name and optionally on parameter's type definition. 
            </summary>
            <param name="methodInfo">method info to match. Required</param>
            <param name="methodName">Name of the method. Required</param>
            <param name="parameterTypes">Type of the parameters (in order). Optional</param>
            <returns>True if the name matches and parameters type (if provided)</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericDictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Tries to get the value and if not exists returns the default value 
            for the value type instead of throwing an exception
            </summary>
            <typeparam name="TK">Key type</typeparam>
            <typeparam name="TV">value type</typeparam>
            <param name="dictionary">dictionary to extend</param>
            <param name="key">Key to search</param>
            <param name="defaultValue">Default value. Optional</param>
            <returns>The value if exists, otherwise the default value</returns>
        </member>
    </members>
</doc>
