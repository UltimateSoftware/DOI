<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Albedo</name>
    </assembly>
    <members>
        <member name="T:Albedo.AssemblyElement">
            <summary>
            An <see cref="T:Albedo.IReflectionElement"/> representing an <see cref="P:Albedo.AssemblyElement.Assembly"/> which
            can be visited by an <see cref="T:Albedo.IReflectionVisitor`1"/> implementation.
            </summary>
        </member>
        <member name="P:Albedo.AssemblyElement.Assembly">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly"/> instance this element points to.
            </summary>
        </member>
        <member name="M:Albedo.AssemblyElement.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructs a new instance of the <see cref="T:Albedo.AssemblyElement"/> which represents
            the specified <see cref="P:Albedo.AssemblyElement.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="P:Albedo.AssemblyElement.Assembly"/> this element represents.</param>
        </member>
        <member name="M:Albedo.AssemblyElement.Accept``1(Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the provided <see cref="T:Albedo.IReflectionVisitor`1"/>, by calling the
            appropriate strongly-typed <see cref="M:Albedo.IReflectionVisitor`1.Visit(Albedo.AssemblyElement)"/>
            method on the visitor.
            </summary>
            <typeparam name="T">The type of observation or result which the
            <see cref="T:Albedo.IReflectionVisitor`1"/> instance produces when visiting nodes.</typeparam>
            <param name="visitor">The <see cref="T:Albedo.IReflectionVisitor`1"/> instance.</param>
            <returns>A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.</returns>
        </member>
        <member name="M:Albedo.AssemblyElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to
            this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this
            instance.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            Two instances of <see cref="T:Albedo.AssemblyElement" /> are considered to
            be equal if their <see cref="P:Albedo.AssemblyElement.Assembly" /> values are equal.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.AssemblyElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Albedo.AssemblyElement.ToString">
            <summary>
            Gets the string representation of the <see cref="P:Albedo.AssemblyElement.Assembly"/>
            suitable for development / debugging display purposes.
            </summary>
            <returns>The string representation of the contained
            <see cref="P:Albedo.AssemblyElement.Assembly"/></returns>
        </member>
        <member name="T:Albedo.CompositeReflectionElement">
            <summary>
            An implementation of a polymorphic <see cref="T:Albedo.IReflectionElement"/> 
            that composes other <see cref="T:Albedo.IReflectionElement"/> instances which
            can be visited by an <see cref="T:Albedo.IReflectionVisitor`1"/> instance.
            </summary>
        </member>
        <member name="M:Albedo.CompositeReflectionElement.#ctor(Albedo.IReflectionElement[])">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Albedo.CompositeReflectionElement"/> class.
            </summary>
            <param name="elements">
            The <see cref="T:Albedo.IReflectionElement"/> instances to compose.</param>
        </member>
        <member name="M:Albedo.CompositeReflectionElement.Accept``1(Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the <see cref="T:Albedo.IReflectionVisitor`1"/> visitor.
            </summary>
            <typeparam name="T">
            The type of observation(s) of the visitor.
            </typeparam>
            <param name="visitor">The visitor to accept.</param>
            <returns></returns>
        </member>
        <member name="M:Albedo.CompositeReflectionElement.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the supplied 
            <see cref="T:Albedo.IReflectionElement"/> instances.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the supplied <see cref="T:Albedo.IReflectionElement"/> 
            instances.
            </returns>
        </member>
        <member name="M:Albedo.CompositeReflectionElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to
            this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this
            instance.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            Two instances of <see cref="T:Albedo.CompositeReflectionElement" /> are
            considered to be equal if their <see cref="T:Albedo.IReflectionElement" /> 
            sequences are equal.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.CompositeReflectionElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Albedo.ConcreteElementConversions">
            <summary>
            Provides extension methods which convert from System.Reflection instances to
            their Albedo element counterparts.
            </summary>
        </member>
        <member name="M:Albedo.ConcreteElementConversions.ToElement(System.Reflection.Assembly)">
            <summary>
            Converts from an <see cref="T:System.Reflection.Assembly"/> to an <see cref="T:Albedo.AssemblyElement"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/></param>
            <returns>The <see cref="T:Albedo.AssemblyElement"/></returns>
        </member>
        <member name="M:Albedo.ConcreteElementConversions.ToElement(System.Reflection.ConstructorInfo)">
            <summary>
            Converts from an <see cref="T:System.Reflection.ConstructorInfo"/> to an <see cref="T:Albedo.ConstructorInfoElement"/>.
            </summary>
            <param name="constructorInfo">The <see cref="T:System.Reflection.ConstructorInfo"/></param>
            <returns>The <see cref="T:Albedo.ConstructorInfoElement"/></returns>
        </member>
        <member name="M:Albedo.ConcreteElementConversions.ToElement(System.Reflection.EventInfo)">
            <summary>
            Converts from an <see cref="T:System.Reflection.EventInfo"/> to an <see cref="T:Albedo.EventInfoElement"/>.
            </summary>
            <param name="eventInfo">The <see cref="T:System.Reflection.EventInfo"/></param>
            <returns>The <see cref="T:Albedo.EventInfoElement"/></returns>
        </member>
        <member name="M:Albedo.ConcreteElementConversions.ToElement(System.Reflection.FieldInfo)">
            <summary>
            Converts from an <see cref="T:System.Reflection.FieldInfo"/> to an <see cref="T:Albedo.FieldInfoElement"/>.
            </summary>
            <param name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/></param>
            <returns>The <see cref="T:Albedo.FieldInfoElement"/></returns>
        </member>
        <member name="M:Albedo.ConcreteElementConversions.ToElement(System.Reflection.LocalVariableInfo)">
            <summary>
            Converts from an <see cref="T:System.Reflection.LocalVariableInfo"/> to an <see cref="T:Albedo.LocalVariableInfoElement"/>.
            </summary>
            <param name="localVariableInfo">The <see cref="T:System.Reflection.LocalVariableInfo"/></param>
            <returns>The <see cref="T:Albedo.LocalVariableInfoElement"/></returns>
        </member>
        <member name="M:Albedo.ConcreteElementConversions.ToElement(System.Reflection.MethodInfo)">
            <summary>
            Converts from an <see cref="T:System.Reflection.MethodInfo"/> to an <see cref="T:Albedo.MethodInfoElement"/>.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/></param>
            <returns>The <see cref="T:Albedo.MethodInfoElement"/></returns>
        </member>
        <member name="M:Albedo.ConcreteElementConversions.ToElement(System.Reflection.ParameterInfo)">
            <summary>
            Converts from an <see cref="T:System.Reflection.ParameterInfo"/> to an <see cref="T:Albedo.ParameterInfoElement"/>.
            </summary>
            <param name="parameterInfo">The <see cref="T:System.Reflection.ParameterInfo"/></param>
            <returns>The <see cref="T:Albedo.ParameterInfoElement"/></returns>
        </member>
        <member name="M:Albedo.ConcreteElementConversions.ToElement(System.Reflection.PropertyInfo)">
            <summary>
            Converts from an <see cref="T:System.Reflection.PropertyInfo"/> to an <see cref="T:Albedo.PropertyInfoElement"/>.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns>The <see cref="T:Albedo.PropertyInfoElement"/></returns>
        </member>
        <member name="M:Albedo.ConcreteElementConversions.ToElement(System.Type)">
            <summary>
            Converts from an <see cref="T:System.Type"/> to an <see cref="T:Albedo.TypeElement"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/></param>
            <returns>The <see cref="T:Albedo.TypeElement"/></returns>
        </member>
        <member name="T:Albedo.ConstructorInfoElement">
            <summary>
            An <see cref="T:Albedo.IReflectionElement"/> representing a <see cref="P:Albedo.ConstructorInfoElement.ConstructorInfo"/> which
            can be visited by an <see cref="T:Albedo.IReflectionVisitor`1"/> implementation.
            </summary>
        </member>
        <member name="P:Albedo.ConstructorInfoElement.ConstructorInfo">
            <summary>
            Gets the <see cref="T:System.Reflection.ConstructorInfo"/> instance this element points to.
            </summary>
        </member>
        <member name="M:Albedo.ConstructorInfoElement.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Constructs a new instance of the <see cref="T:Albedo.ConstructorInfoElement"/> which represents
            the specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
            <param name="constructorInfo">The <see cref="T:System.Reflection.ConstructorInfo"/> this 
            element represents.</param>
        </member>
        <member name="M:Albedo.ConstructorInfoElement.Accept``1(Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the provided <see cref="T:Albedo.IReflectionVisitor`1"/>, by calling the
            appropriate strongly-typed <see cref="M:Albedo.IReflectionVisitor`1.Visit(Albedo.ConstructorInfoElement)"/>
            method on the visitor.
            </summary>
            <typeparam name="T">The type of observation or result which the
            <see cref="T:Albedo.IReflectionVisitor`1"/> instance produces when visiting nodes.</typeparam>
            <param name="visitor">The <see cref="T:Albedo.IReflectionVisitor`1"/> instance.</param>
            <returns>A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.</returns>
        </member>
        <member name="M:Albedo.ConstructorInfoElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to
            this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this
            instance.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            Two instances of <see cref="T:Albedo.ConstructorInfoElement" /> are 
            considered to be equal if their <see cref="T:Albedo.ConstructorInfoElement" />
            values are equal.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ConstructorInfoElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Albedo.ConstructorInfoElement.ToString">
            <summary>
            Gets the string representation of the <see cref="P:Albedo.ConstructorInfoElement.ConstructorInfo"/>
            suitable for development / debugging display purposes.
            </summary>
            <returns>The string representation of the contained
            <see cref="P:Albedo.ConstructorInfoElement.ConstructorInfo"/></returns>
        </member>
        <member name="T:Albedo.Constructors">
            <summary>
            Provides strongly-typed, refactoring-safe access to
            <see cref="T:System.Reflection.ConstructorInfo" /> instances.
            </summary>
            <remarks>
            <para>
            While you can use the standard Reflection API (such as
            <see cref="M:System.Type.GetConstructor(System.Type[])" />) to obtain a
            <see cref="T:System.Reflection.ConstructorInfo" /> instance, the problem is that it relies
            on identifying the constructor by parameter types. This isn't
            refactoring-safe, so if you change a constructor, your Reflection
            code may break. <strong>Constructors</strong> provides a
            strongly-typed, refactoring-safe alternative, utilizing LINQ expressions.
            </para>
            </remarks>
            <seealso cref="M:Albedo.Constructors.Select``1(System.Linq.Expressions.Expression{System.Func{``0}})" />
            <seealso cref="T:Albedo.Fields`1" />
            <seealso cref="T:Albedo.Properties`1" />
            <seealso cref="T:Albedo.Methods`1" />
        </member>
        <member name="M:Albedo.Constructors.Select``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Selects a <see cref="T:System.Reflection.ConstructorInfo" /> instance based on a
            strongly-typed, refactoring-safe LINQ expression.
            </summary>
            <typeparam name="T">
            The type containing the desired constructor.
            </typeparam>
            <param name="constructorSelector">
            A LINQ expression that identifies the desired constructor.
            </param>
            <returns>
            A <see cref="T:System.Reflection.ConstructorInfo" /> instance representing the
            constructor identified by <paramref name="constructorSelector" />.
            </returns>
            <remarks>
            <para>
            The Select method provides a strongly-typed, refactoring-safe way
            to get a <see cref="T:System.Reflection.ConstructorInfo" /> instance.
            </para>
            </remarks>
            <example>
            This example demonstrates how to use <see cref="T:Albedo.Constructors" />
            with LINQ method syntax. The <strong>Select</strong>
            method returns a <see cref="T:System.Reflection.ConstructorInfo" /> instance
            representing the <see cref="M:System.String.#ctor(System.Char[])" /> constructor of
            <see cref="T:System.String" />.
            <code>
            ConstructorInfo ci = Constructors.Select(() => new string(new char[0]));
            </code>
            </example>
            <seealso cref="T:Albedo.Constructors" />
        </member>
        <member name="T:Albedo.EventInfoElement">
            <summary>
            An <see cref="T:Albedo.IReflectionElement"/> representing a <see cref="P:Albedo.EventInfoElement.EventInfo"/> which
            can be visited by an <see cref="T:Albedo.IReflectionVisitor`1"/> implementation.
            </summary>
        </member>
        <member name="P:Albedo.EventInfoElement.EventInfo">
            <summary>
            Gets the <see cref="T:System.Reflection.EventInfo"/> instance this element represents.
            </summary>
        </member>
        <member name="M:Albedo.EventInfoElement.#ctor(System.Reflection.EventInfo)">
            <summary>
            Constructs a new instance of the <see cref="T:Albedo.EventInfoElement"/> which represents
            the specified <see cref="T:System.Reflection.EventInfo"/>.
            </summary>
            <param name="eventInfo">The <see cref="T:System.Reflection.EventInfo"/> this 
            element represents.</param>
        </member>
        <member name="M:Albedo.EventInfoElement.Accept``1(Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the provided <see cref="T:Albedo.IReflectionVisitor`1"/>, by calling the
            appropriate strongly-typed <see cref="M:Albedo.IReflectionVisitor`1.Visit(Albedo.EventInfoElement)"/>
            method on the visitor.
            </summary>
            <typeparam name="T">The type of observation or result which the
            <see cref="T:Albedo.IReflectionVisitor`1"/> instance produces when visiting nodes.</typeparam>
            <param name="visitor">The <see cref="T:Albedo.IReflectionVisitor`1"/> instance.</param>
            <returns>A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.</returns>
        </member>
        <member name="M:Albedo.EventInfoElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to
            this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this
            instance.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            Two instances of <see cref="T:Albedo.EventInfoElement" /> are 
            considered to be equal if their <see cref="P:Albedo.EventInfoElement.EventInfo" />
            values are equal.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.EventInfoElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Albedo.EventInfoElement.ToString">
            <summary>
            Gets the string representation of the <see cref="P:Albedo.EventInfoElement.EventInfo"/>
            suitable for development / debugging display purposes.
            </summary>
            <returns>The string representation of the contained
            <see cref="P:Albedo.EventInfoElement.EventInfo"/></returns>
        </member>
        <member name="T:Albedo.FieldInfoElement">
            <summary>
            An <see cref="T:Albedo.IReflectionElement"/> representing a <see cref="P:Albedo.FieldInfoElement.FieldInfo"/> which
            can be visited by an <see cref="T:Albedo.IReflectionVisitor`1"/> implementation.
            </summary>
        </member>
        <member name="P:Albedo.FieldInfoElement.FieldInfo">
            <summary>
            Gets the <see cref="T:System.Reflection.FieldInfo"/> instance this element points to.
            </summary>
        </member>
        <member name="M:Albedo.FieldInfoElement.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Constructs a new instance of the <see cref="T:Albedo.FieldInfoElement"/> which represents
            the specified <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
            <param name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> this 
            element represents.</param>
        </member>
        <member name="M:Albedo.FieldInfoElement.Accept``1(Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the provided <see cref="T:Albedo.IReflectionVisitor`1"/>, by calling the
            appropriate strongly-typed <see cref="M:Albedo.IReflectionVisitor`1.Visit(Albedo.FieldInfoElement)"/>
            method on the visitor.
            </summary>
            <typeparam name="T">The type of observation or result which the
            <see cref="T:Albedo.IReflectionVisitor`1"/> instance produces when visiting nodes.</typeparam>
            <param name="visitor">The <see cref="T:Albedo.IReflectionVisitor`1"/> instance.</param>
            <returns>A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.</returns>
        </member>
        <member name="M:Albedo.FieldInfoElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to
            this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this
            instance.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            Two instances of <see cref="T:Albedo.FieldInfoElement" /> are 
            considered to be equal if their <see cref="P:Albedo.FieldInfoElement.FieldInfo" />
            values are equal.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.FieldInfoElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Albedo.FieldInfoElement.ToString">
            <summary>
            Gets the string representation of the <see cref="P:Albedo.FieldInfoElement.FieldInfo"/>
            suitable for development / debugging display purposes.
            </summary>
            <returns>The string representation of the contained
            <see cref="P:Albedo.FieldInfoElement.FieldInfo"/></returns>
        </member>
        <member name="T:Albedo.Fields`1">
            <summary>
            Provides strongly-typed, refactoring-safe access to
            <see cref="T:System.Reflection.FieldInfo" /> instances.
            </summary>
            <typeparam name="T">The type containing the desired field.</typeparam>
            <remarks>
            <para>
            While you can use the standard Reflection API (such as
            <see cref="M:System.Type.GetField(System.String)" />) to obtain a
            <see cref="T:System.Reflection.FieldInfo" /> instance, the problem is that it relies on
            identifying the field by name, using a string. This isn't refactoring-
            safe, so if you change the field name, your Reflection code may break.
            <strong>Fields&lt;T&gt;</strong> provides a strongly-typed alternative,
            utilizing LINQ expressions.
            </para>
            </remarks>
            <seealso cref="M:Albedo.Fields`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
            <seealso cref="T:Albedo.Constructors"/>
            <seealso cref="T:Albedo.Properties`1" />
            <seealso cref="T:Albedo.Methods`1" />
            <seealso cref="T:Albedo.Fields" />
        </member>
        <member name="M:Albedo.Fields`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Selects a <see cref="T:System.Reflection.FieldInfo" /> instance based on a
            strongly-typed, refactoring-safe LINQ expression.
            </summary>
            <typeparam name="TField">The type of the desired field.</typeparam>
            <param name="fieldSelector">
            A LINQ expression that identifies the desired field.
            </param>
            <returns>
            A <see cref="T:System.Reflection.FieldInfo" /> instance representing the field
            identified by <paramref name="fieldSelector" />.
            </returns>
            <remarks>
            <para>
            The Select method provides a strongly-typed, refactoring-safe way
            to get a <see cref="T:System.Reflection.FieldInfo" /> instance. It supports both
            LINQ method syntax, as well as LINQ query syntax.
            </para>
            </remarks>
            <example>
            This example demonstrates how to use <see cref="T:Albedo.Fields`1" /> with
            LINQ method syntax. <strong>ClassWithFields</strong>
            is a custom class with a public field called <strong>Text</strong>.
            The <strong>Select</strong> method returns a
            <strong>FieldInfo</strong> instance representing the
            <strong>Text</strong> field.
            <code>
            FieldInfo fi = new Fields&lt;ClassWithFields&gt;().Select(v => v.Text);
            </code>
            This example demonstrates how to use <see cref="T:Albedo.Fields`1" /> with
            LINQ query syntax. <strong>ClassWithFields</strong> is a custom class
            with a public field called <strong>Text</strong>. The
            <strong>Select</strong> method returns a <strong>FieldInfo</strong>
            instance representing the <strong>Text</strong> field.
            <code>
            FieldInfo fi = from v in new Fields&lt;ClassWithFields&gt;()
                           select v.Text;
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fieldSelector" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The expression's body isn't a MemberExpression or it doesn't
            identify a field. The code block supplied should identify a field.
            Example: x => x.Bar.
            </exception>
            <seealso cref="T:Albedo.Fields`1" />
        </member>
        <member name="T:Albedo.Fields">
            <summary>
            Provides strongly-typed, refactoring-safe access to
            <see cref="T:System.Reflection.FieldInfo" /> instances.
            </summary>
            <remarks>
            <para>
            This class provides similar services to <see cref="T:Albedo.Fields`1" />, but
            for static fields.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.Fields.Select``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Selects a <see cref="T:System.Reflection.FieldInfo" /> instance based on a
            strongly-typed, refactoring-safe LINQ expression.
            </summary>
            <typeparam name="TField">The type of the desired field.</typeparam>
            <param name="fieldSelector">
            A LINQ expression that identifies the desired field.
            </param>
            <returns>
            A <see cref="T:System.Reflection.FieldInfo" /> instance representing the field
            identified by <paramref name="fieldSelector" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fieldSelector" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            The expression's body must be a MemberExpression. The code block supplied should identify a field.\nExample: () => Foo.Bar.;fieldSelector
            or
            The expression's body must identify a field, not a property or other member.;fieldSelector
            </exception>
        </member>
        <member name="T:Albedo.IReflectionElement">
            <summary>
            Represents a polymorphic reflection element, which can be visited
            by an <see cref="T:Albedo.IReflectionVisitor`1"/> implementation.
            </summary>
        </member>
        <member name="M:Albedo.IReflectionElement.Accept``1(Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the <see cref="T:Albedo.IReflectionVisitor`1"/> as per the 
            visitor pattern http://en.wikipedia.org/wiki/Visitor_pattern
            </summary>
            <typeparam name="T">The type of observation(s) of the visitor</typeparam>
            <param name="visitor">The visitor to accept</param>
            <returns></returns>
        </member>
        <member name="T:Albedo.IReflectionVisitor`1">
            <summary>
            Represents a Visitor which can visit <see cref="T:Albedo.IReflectionElement" />
            instances.
            </summary>
            <typeparam name="T">
            The type of observation or calculation the Visitor makes.
            </typeparam>
            <remarks>
            <para>
            <strong>Note to implementers:</strong>
            </para>
            <para>
            Prefer deriving from <see cref="T:Albedo.ReflectionVisitor`1" /> instead of
            directly implementing the <strong>IReflectionVisitor&lt;T&gt;</strong>
            interface. The reason for this is that future versions of Albedo may
            add more methods to the interface. This will be a breaking change, so
            will only happen on major releases, but still, deriving from the
            <strong>ReflectionVisitor&lt;T&gt;</strong> base class gives you a
            better chance that your implementation will be compatible across a
            major release.
            </para>
            </remarks>
        </member>
        <member name="P:Albedo.IReflectionVisitor`1.Value">
            <summary>
            Gets the observation or value produced by this Visitor instance.
            </summary>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.AssemblyElement[])">
            <summary>
            Allows an <see cref="T:Albedo.AssemblyElement"/> instances to be 'visited'.
            This method is called when the element 'accepts' this visitor instance.
            </summary>
            <param name="assemblyElements">
            The <see cref="T:Albedo.AssemblyElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.AssemblyElement)">
            <summary>
            Allows an <see cref="T:Albedo.AssemblyElement"/> to be 'visited'. This method is called when the
            element 'accepts' this visitor instance.
            </summary>
            <param name="assemblyElement">The <see cref="T:Albedo.AssemblyElement"/> being visited.</param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.TypeElement[])">
            <summary>
            Allows <see cref="T:Albedo.TypeElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="typeElements">
            The <see cref="T:Albedo.TypeElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.TypeElement)">
            <summary>
            Allows an <see cref="T:Albedo.TypeElement"/> to be 'visited'. This method is called when the
            element 'accepts' this visitor instance.
            </summary>
            <param name="typeElement">The <see cref="T:Albedo.TypeElement"/> being visited.</param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.FieldInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.FieldInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="fieldInfoElements">
            The <see cref="T:Albedo.FieldInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.ConstructorInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.ConstructorInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="constructorInfoElements">
            The <see cref="T:Albedo.ConstructorInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.PropertyInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.PropertyInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="propertyInfoElements">
            The <see cref="T:Albedo.PropertyInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.MethodInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.MethodInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="methodInfoElements">
            The <see cref="T:Albedo.MethodInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.EventInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.EventInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="eventInfoElements">
            The <see cref="T:Albedo.EventInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.FieldInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.FieldInfoElement"/> to be 'visited'. This method is called when the
            element 'accepts' this visitor instance.
            </summary>
            <param name="fieldInfoElement">The <see cref="T:Albedo.FieldInfoElement"/> being visited.</param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.ConstructorInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.ConstructorInfoElement"/> to be 'visited'. This method is called when the
            element 'accepts' this visitor instance.
            </summary>
            <param name="constructorInfoElement">The <see cref="T:Albedo.ConstructorInfoElement"/> being visited.</param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.PropertyInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.PropertyInfoElement"/> to be 'visited'. This method is called when the
            element 'accepts' this visitor instance.
            </summary>
            <param name="propertyInfoElement">The <see cref="T:Albedo.PropertyInfoElement"/> being visited.</param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.MethodInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.MethodInfoElement"/> to be 'visited'. This method is called when the
            element 'accepts' this visitor instance.
            </summary>
            <param name="methodInfoElement">The <see cref="T:Albedo.MethodInfoElement"/> being visited.</param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.EventInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.EventInfoElement"/> to be 'visited'. This method is called when the
            element 'accepts' this visitor instance.
            </summary>
            <param name="eventInfoElement">The <see cref="T:Albedo.EventInfoElement"/> being visited.</param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.ParameterInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.ParameterInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="parameterInfoElements">
            The <see cref="T:Albedo.ParameterInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.LocalVariableInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.LocalVariableInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="localVariableInfoElements">
            The <see cref="T:Albedo.LocalVariableInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.ParameterInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.ParameterInfoElement"/> to be 'visited'. This method is called when the
            element 'accepts' this visitor instance.
            </summary>
            <param name="parameterInfoElement">The <see cref="T:Albedo.ParameterInfoElement"/> being visited.</param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.IReflectionVisitor`1.Visit(Albedo.LocalVariableInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.LocalVariableInfoElement"/> to be 'visited'. This method is called when the
            element 'accepts' this visitor instance.
            </summary>
            <param name="localVariableInfoElement">The <see cref="T:Albedo.LocalVariableInfoElement"/> being visited.</param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="T:Albedo.LocalVariableInfoElement">
            <summary>
            An <see cref="T:Albedo.IReflectionElement"/> representing a <see cref="P:Albedo.LocalVariableInfoElement.LocalVariableInfo"/> which
            can be visited by an <see cref="T:Albedo.IReflectionVisitor`1"/> implementation.
            </summary>
        </member>
        <member name="P:Albedo.LocalVariableInfoElement.LocalVariableInfo">
            <summary>
            Gets the <see cref="T:System.Reflection.LocalVariableInfo"/> instance this element represents.
            </summary>
        </member>
        <member name="M:Albedo.LocalVariableInfoElement.#ctor(System.Reflection.LocalVariableInfo)">
            <summary>
            Constructs a new instance of the <see cref="T:Albedo.LocalVariableInfoElement"/> which represents
            the specified <see cref="T:System.Reflection.LocalVariableInfo"/>.
            </summary>
            <param name="localVariableInfo">The <see cref="T:System.Reflection.LocalVariableInfo"/> this 
            element represents.</param>
        </member>
        <member name="M:Albedo.LocalVariableInfoElement.Accept``1(Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the provided <see cref="T:Albedo.IReflectionVisitor`1"/>, by calling the
            appropriate strongly-typed <see cref="M:Albedo.IReflectionVisitor`1.Visit(Albedo.LocalVariableInfoElement)"/>
            method on the visitor.
            </summary>
            <typeparam name="T">The type of observation or result which the
            <see cref="T:Albedo.IReflectionVisitor`1"/> instance produces when visiting nodes.</typeparam>
            <param name="visitor">The <see cref="T:Albedo.IReflectionVisitor`1"/> instance.</param>
            <returns>A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.</returns>
        </member>
        <member name="M:Albedo.LocalVariableInfoElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to
            this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this
            instance.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            Two instances of <see cref="T:Albedo.LocalVariableInfoElement" /> are 
            considered to be equal if their <see cref="P:Albedo.LocalVariableInfoElement.LocalVariableInfo" />
            values are equal.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.LocalVariableInfoElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Albedo.LocalVariableInfoElement.ToString">
            <summary>
            Gets the string representation of the <see cref="P:Albedo.LocalVariableInfoElement.LocalVariableInfo"/>
            suitable for development / debugging display purposes.
            </summary>
            <returns>The string representation of the contained
            <see cref="P:Albedo.LocalVariableInfoElement.LocalVariableInfo"/></returns>
        </member>
        <member name="T:Albedo.MethodInfoElement">
            <summary>
            An <see cref="T:Albedo.IReflectionElement"/> representing a <see cref="P:Albedo.MethodInfoElement.MethodInfo"/> which
            can be visited by an <see cref="T:Albedo.IReflectionVisitor`1"/> implementation.
            </summary>
        </member>
        <member name="P:Albedo.MethodInfoElement.MethodInfo">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> instance this element points to.
            </summary>
        </member>
        <member name="M:Albedo.MethodInfoElement.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Constructs a new instance of the <see cref="T:Albedo.MethodInfoElement"/> which represents
            the specified <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> this 
            element represents.</param>
        </member>
        <member name="M:Albedo.MethodInfoElement.Accept``1(Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the provided <see cref="T:Albedo.IReflectionVisitor`1"/>, by calling the
            appropriate strongly-typed <see cref="M:Albedo.IReflectionVisitor`1.Visit(Albedo.MethodInfoElement)"/>
            method on the visitor.
            </summary>
            <typeparam name="T">The type of observation or result which the
            <see cref="T:Albedo.IReflectionVisitor`1"/> instance produces when visiting nodes.</typeparam>
            <param name="visitor">The <see cref="T:Albedo.IReflectionVisitor`1"/> instance.</param>
            <returns>A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.</returns>
        </member>
        <member name="M:Albedo.MethodInfoElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to
            this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this
            instance.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            Two instances of <see cref="T:Albedo.MethodInfoElement" /> are 
            considered to be equal if their <see cref="P:Albedo.MethodInfoElement.MethodInfo" />
            values are equal.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.MethodInfoElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Albedo.MethodInfoElement.ToString">
            <summary>
            Gets the string representation of the <see cref="P:Albedo.MethodInfoElement.MethodInfo"/>
            suitable for development / debugging display purposes.
            </summary>
            <returns>The string representation of the contained
            <see cref="P:Albedo.MethodInfoElement.MethodInfo"/></returns>
        </member>
        <member name="T:Albedo.Methods`1">
            <summary>
            Provides strongly-typed, refactoring-safe access to
            <see cref="T:System.Reflection.MethodInfo" /> instances.
            </summary>
            <typeparam name="T">
            The type containing the desired method.
            </typeparam>
            <remarks>
            <para>
            While you can use the standard Reflection API (such as
            <see cref="M:System.Type.GetMethod(System.String)" />) to obtain a
            <see cref="T:System.Reflection.MethodInfo" /> instance, the problem is that it relies on
            identifying the method by name, using a string. This isn't
            refactoring-safe, so if you change the method name, your Reflection
            code may break. <strong>Methods&lt;T&gt;</strong> provides a
            strongly-typed alternative, utilizing LINQ expressions.
            </para>
            </remarks>
            <seealso cref="M:Albedo.Methods`1.Select(System.Linq.Expressions.Expression{System.Action{`0}})" />
            <seealso cref="T:Albedo.Fields`1" />
            <seealso cref="T:Albedo.Constructors" />
            <seealso cref="T:Albedo.Properties`1" />
        </member>
        <member name="M:Albedo.Methods`1.Select(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Selects a <see cref="T:System.Reflection.MethodInfo" /> instance based on a
            strongly-typed, refactoring-safe LINQ expression.
            </summary>
            <param name="methodSelector">
            A LINQ expression that identifies the desired method.
            </param>
            <returns>
            A <see cref="T:System.Reflection.MethodInfo" /> instance representing the method
            identified by <paramref name="methodSelector" />.
            </returns>
            <remarks>
            <para>
            The Select method provides a strongly-typed, refactoring-safe way
            to get a <see cref="T:System.Reflection.MethodInfo" /> instance. It supports both
            LINQ method syntax, as well as LINQ query syntax.
            </para>
            </remarks>
            <example>
            This example demonstrates how to use <see cref="T:Albedo.Methods`1" />
            with LINQ method syntax. The <strong>Select</strong>
            method returns a <see cref="T:System.Reflection.MethodInfo" /> instance representing
            the <see cref="M:System.Version.ToString" /> method of
            <see cref="T:System.Version" />.
            <code>
            MethodInfo mi = new Methods&lt;Version&gt;().Select(v => v.ToString());
            </code>
            This example demonstrates how to use <see cref="T:Albedo.Methods`1" />
            with LINQ query syntax. The <strong>Select</strong>
            method returns a <strong>MethodInfo</strong> instance
            representing the <strong>ToString()</strong> method of
            <strong>Version</strong>.
            <code>
            MethodInfo mi = from v in new Methods&lt;Version&gt;()
                            select v.ToString();
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="methodSelector" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The expression's body isn't a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> or
            it doesn't identify a method. The code block supplied should
            identify a method.
            Example: x => x.Foo().
            </exception>
            <seealso cref="T:Albedo.Methods`1" />
        </member>
        <member name="M:Albedo.Methods`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Selects a <see cref="T:System.Reflection.MethodInfo" /> instance based on a
            strongly-typed, refactoring-safe LINQ expression.
            </summary>
            <param name="methodSelector">
            A LINQ expression that identifies the desired method.
            </param>
            <returns>
            A <see cref="T:System.Reflection.MethodInfo" /> instance representing the method
            identified by <paramref name="methodSelector" />.
            </returns>
            <remarks>
            <para>
            The Select method provides a strongly-typed, refactoring-safe way
            to get a <see cref="T:System.Reflection.MethodInfo" /> instance. It supports both
            LINQ method syntax, as well as LINQ query syntax.
            </para>
            </remarks>
            <example>
            This example demonstrates how to use <see cref="T:Albedo.Methods`1" />
            with LINQ method syntax. The <strong>Select</strong>
            method returns a <see cref="T:System.Reflection.MethodInfo" /> instance representing
            the <see cref="M:System.Version.ToString" /> method of
            <see cref="T:System.Version" />.
            <code>
            MethodInfo mi = new Methods&lt;Version&gt;().Select(v => v.ToString());
            </code>
            This example demonstrates how to use <see cref="T:Albedo.Methods`1" />
            with LINQ query syntax. The <strong>Select</strong>
            method returns a <strong>MethodInfo</strong> instance
            representing the <strong>ToString()</strong> method of
            <strong>Version</strong>.
            <code>
            MethodInfo mi = from v in new Methods&lt;Version&gt;()
                            select v.ToString();
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="methodSelector" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The expression's body isn't a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> or
            it doesn't identify a method. The code block supplied should
            identify a method.
            Example: x => x.Foo().
            </exception>
            <seealso cref="T:Albedo.Methods`1" />
        </member>
        <member name="T:Albedo.Methods">
            <summary>
            Provides strongly-typed, refactoring-safe access to
            <see cref="T:System.Reflection.MethodInfo" /> instances.
            </summary>
            <remarks>
            <para>
            This class provides similar services to <see cref="T:Albedo.Methods`1" />, but
            for static fields.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.Methods.Select(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Selects a <see cref="T:System.Reflection.MethodInfo" /> instance based on a
            strongly-typed, refactoring-safe LINQ expression.
            </summary>
            <param name="methodSelector">
            A LINQ expression that identifies the desired method.
            </param>
            <returns>
            A <see cref="T:System.Reflection.MethodInfo" /> instance representing the method
            identified by <paramref name="methodSelector" />.
            </returns>
            <remarks>
            <para>
            The Select method provides a strongly-typed, refactoring-safe way
            to get a <see cref="T:System.Reflection.MethodInfo" /> instance. It supports
            LINQ method syntax.
            </para>
            </remarks>
            <example>
            This example demonstrates how to use <see cref="T:Albedo.Methods" />
            with LINQ method syntax. The <strong>Select</strong>
            method returns a <see cref="T:System.Reflection.MethodInfo" /> instance representing
            the <see cref="M:System.Math.Abs(System.Int32)" /> method of
            <see cref="T:System.Math" />.
            <code>
            int dummy = 5;
            MethodInfo mi = new Methods.Select(() => Math.Abs(dummy));
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="methodSelector" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The expression's body isn't a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> or
            it doesn't identify a static method. The code block supplied should
            identify a static method.
            Example: () => Foo.Bar().
            where Bar is static method.
            </exception>
            <seealso cref="T:Albedo.Methods`1" />
        </member>
        <member name="T:Albedo.NullReflectionElement">
            <summary>
            An implementation of IReflectionElement that does nothing.
            </summary>
        </member>
        <member name="M:Albedo.NullReflectionElement.Accept``1(Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the <see cref="T:Albedo.IReflectionVisitor`1" /> as per the
            Visitor pattern http://en.wikipedia.org/wiki/Visitor_pattern.
            </summary>
            <typeparam name="T">
            The type of observation(s) the visitor might collect.
            </typeparam>
            <param name="visitor">The visitor to accept.</param>
            <returns><paramref name="visitor" /></returns>
            <remarks>
            <para>
            While <strong>NullReflection</strong> partakes in a Visitor
            hierarchy, this particular implementation follows the Null Object
            pattern, by doing nothing. The way it does nothing is by returning
            <paramref name="visitor" />.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.NullReflectionElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to
            this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this
            instance.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is
            another <see cref="T:Albedo.NullReflectionElement" />; otherwise,
            <see langword="false" />.
            </returns>
        </member>
        <member name="M:Albedo.NullReflectionElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Albedo.ParameterInfoElement">
            <summary>
            An <see cref="T:Albedo.IReflectionElement"/> representing a <see cref="P:Albedo.ParameterInfoElement.ParameterInfo"/> which
            can be visited by an <see cref="T:Albedo.IReflectionVisitor`1"/> implementation.
            </summary>
        </member>
        <member name="P:Albedo.ParameterInfoElement.ParameterInfo">
            <summary>
            Gets the <see cref="T:System.Reflection.ParameterInfo"/> instance this element represents.
            </summary>
        </member>
        <member name="M:Albedo.ParameterInfoElement.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Constructs a new instance of the <see cref="T:Albedo.ParameterInfoElement"/> which represents
            the specified <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameterInfo">The <see cref="T:System.Reflection.ParameterInfo"/> this 
            element represents.</param>
        </member>
        <member name="M:Albedo.ParameterInfoElement.Accept``1(Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the provided <see cref="T:Albedo.IReflectionVisitor`1"/>, by calling the
            appropriate strongly-typed <see cref="M:Albedo.IReflectionVisitor`1.Visit(Albedo.ParameterInfoElement)"/>
            method on the visitor.
            </summary>
            <typeparam name="T">The type of observation or result which the
            <see cref="T:Albedo.IReflectionVisitor`1"/> instance produces when visiting nodes.</typeparam>
            <param name="visitor">The <see cref="T:Albedo.IReflectionVisitor`1"/> instance.</param>
            <returns>A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.</returns>
        </member>
        <member name="M:Albedo.ParameterInfoElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to
            this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this
            instance.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            Two instances of <see cref="T:Albedo.ParameterInfoElement" /> are 
            considered to be equal if their <see cref="P:Albedo.ParameterInfoElement.ParameterInfo" />
            values are equal.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ParameterInfoElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Albedo.ParameterInfoElement.ToString">
            <summary>
            Gets the string representation of the <see cref="P:Albedo.ParameterInfoElement.ParameterInfo"/>
            suitable for development / debugging display purposes.
            </summary>
            <returns>The string representation of the contained
            <see cref="P:Albedo.ParameterInfoElement.ParameterInfo"/></returns>
        </member>
        <member name="T:Albedo.Properties`1">
            <summary>
            Provides strongly-typed, refactoring-safe access to
            <see cref="T:System.Reflection.PropertyInfo" /> instances.
            </summary>
            <typeparam name="T">
            The type containing the desired property.
            </typeparam>
            <remarks>
            <para>
            While you can use the standard Reflection API (such as
            <see cref="M:System.Type.GetProperty(System.String)" />) to obtain a
            <see cref="T:System.Reflection.PropertyInfo" /> instance, the problem is that it relies on
            identifying the property by name, using a string. This isn't
            refactoring-safe, so if you change the property name, your Reflection
            code may break. <strong>Properties&lt;T&gt;</strong> provides a
            strongly-typed alternative, utilizing LINQ expressions.
            </para>
            </remarks>
            <seealso cref="M:Albedo.Properties`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
            <seealso cref="T:Albedo.Fields`1" />
            <seealso cref="T:Albedo.Constructors" />
            <seealso cref="T:Albedo.Methods`1" />
        </member>
        <member name="M:Albedo.Properties`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Selects a <see cref="T:System.Reflection.PropertyInfo" /> instance based on a
            strongly-typed, refactoring-safe LINQ expression.
            </summary>
            <typeparam name="TProperty">
            The type of the desired property.
            </typeparam>
            <param name="propertySelector">
            A LINQ expression that identifies the desired field.
            </param>
            <returns>
            A <see cref="T:System.Reflection.PropertyInfo" /> instance representing the property
            identified by <paramref name="propertySelector" />.
            </returns>
            <remarks>
            <para>
            The Select method provides a strongly-typed, refactoring-safe way
            to get a <see cref="T:System.Reflection.PropertyInfo" /> instance. It supports both
            LINQ method syntax, as well as LINQ query syntax.
            </para>
            </remarks>
            <example>
            This example demonstrates how to use <see cref="T:Albedo.Properties`1" />
            with LINQ method syntax. The <strong>Select</strong>
            method returns a <see cref="T:System.Reflection.PropertyInfo" /> instance representing
            the <see cref="P:System.Version.Major" /> property of
            <see cref="T:System.Version" />.
            <code>
            PropertyInfo pi = new Properties&lt;Version&gt;().Select(v => v.Major);
            </code>
            This example demonstrates how to use <see cref="T:Albedo.Properties`1" />
            with LINQ query syntax. The <strong>Select</strong>
            method returns a <strong>PropertyInfo</strong> instance
            representing the <strong>Major</strong> property of
            <strong>Version</strong>.
            <code>
            PropertyInfo pi = from v in new Properties&lt;Version&gt;()
                              select v.Major;
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="propertySelector" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The expression's body isn't a MemberExpression or it doesn't
            identify a property. The code block supplied should identify a
            property.
            Example: x => x.Bar.
            </exception>
            <seealso cref="T:Albedo.Properties`1" />
        </member>
        <member name="T:Albedo.Properties">
            <summary>
            Provides strongly-typed, refactoring-safe access to
            <see cref="T:System.Reflection.PropertyInfo" /> instances.
            </summary>
            <remarks>
            <para>
            While you can use the standard Reflection API (such as
            <see cref="M:System.Type.GetProperty(System.String)" />) to obtain a
            <see cref="T:System.Reflection.PropertyInfo" /> instance, the problem is that it relies on
            identifying the property by name, using a string. This isn't
            refactoring-safe, so if you change the property name, your Reflection
            code may break. <strong>Properties</strong> provides a
            strongly-typed alternative, utilizing LINQ expressions.
            </para>
            </remarks>
            <seealso cref="T:Albedo.Fields" />
            <seealso cref="T:Albedo.Constructors" />
            <seealso cref="T:Albedo.Methods" />
        </member>
        <member name="M:Albedo.Properties.Select``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Selects a <see cref="T:System.Reflection.PropertyInfo" /> instance based on a
            strongly-typed, refactoring-safe LINQ expression.
            </summary>
            <param name="propertySelector">
            A LINQ expression that identifies the desired field.
            </param>
            <returns>
            A <see cref="T:System.Reflection.PropertyInfo" /> instance representing the property
            identified by <paramref name="propertySelector" />.
            </returns>
            <remarks>
            <para>
            The Select method provides a strongly-typed, refactoring-safe way
            to get a <see cref="T:System.Reflection.PropertyInfo" /> instance. It supports
            LINQ method syntax.
            </para>
            </remarks>
            <example>
            This example demonstrates how to use <see cref="T:Albedo.Properties" />
            with LINQ method syntax. The <strong>Select</strong>
            method returns a <see cref="T:System.Reflection.PropertyInfo" /> instance representing
            the <see cref="P:System.Console.BackgroundColor" /> property of
            <see cref="T:System.Console" />.
            <code>
            PropertyInfo pi = new Properties.Select(() => Console.BackgroundColor);
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="propertySelector" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The expression's body isn't a MemberExpression or it doesn't
            identify a property. The code block supplied should identify a
            property.
            Example: () => Foo.Bar.
            </exception>
            <seealso cref="T:Albedo.Properties`1" />
        </member>
        <member name="T:Albedo.PropertyInfoElement">
            <summary>
            An <see cref="T:Albedo.IReflectionElement"/> representing a <see cref="P:Albedo.PropertyInfoElement.PropertyInfo"/> which
            can be visited by an <see cref="T:Albedo.IReflectionVisitor`1"/> implementation.
            </summary>
        </member>
        <member name="P:Albedo.PropertyInfoElement.PropertyInfo">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> instance this element represents.
            </summary>
        </member>
        <member name="M:Albedo.PropertyInfoElement.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Constructs a new instance of the <see cref="T:Albedo.PropertyInfoElement"/> which represents
            the specified <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> this 
            element represents.</param>
        </member>
        <member name="M:Albedo.PropertyInfoElement.Accept``1(Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the provided <see cref="T:Albedo.IReflectionVisitor`1"/>, by calling the
            appropriate strongly-typed <see cref="M:Albedo.IReflectionVisitor`1.Visit(Albedo.PropertyInfoElement)"/>
            method on the visitor.
            </summary>
            <typeparam name="T">The type of observation or result which the
            <see cref="T:Albedo.IReflectionVisitor`1"/> instance produces when visiting nodes.</typeparam>
            <param name="visitor">The <see cref="T:Albedo.IReflectionVisitor`1"/> instance.</param>
            <returns>A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.</returns>
        </member>
        <member name="M:Albedo.PropertyInfoElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to
            this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this
            instance.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            Two instances of <see cref="T:Albedo.PropertyInfoElement" /> are 
            considered to be equal if their <see cref="P:Albedo.PropertyInfoElement.PropertyInfo" />
            values are equal.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.PropertyInfoElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Albedo.PropertyInfoElement.ToString">
            <summary>
            Gets the string representation of the <see cref="P:Albedo.PropertyInfoElement.PropertyInfo"/>
            suitable for development / debugging display purposes.
            </summary>
            <returns>The string representation of the contained
            <see cref="P:Albedo.PropertyInfoElement.PropertyInfo"/></returns>
        </member>
        <member name="T:Albedo.ReflectionElementEnvy">
            <summary>
            Contains extension methods for dealing with <see cref="T:Albedo.IReflectionElement"/>
            instances, both producing and consuming them.
            </summary>
        </member>
        <member name="M:Albedo.ReflectionElementEnvy.GetProperMethods(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets 'proper' methods from the <paramref name="type"/>; that is, methods excluding
            property accessors, and matching the provided <paramref name="bindingAttr"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> from which methods are selected</param>
            <param name="bindingAttr">The <see cref="T:System.Reflection.BindingFlags"/> used to determine which
            methods to return.</param>
            <returns>The sequence of <see cref="T:Albedo.IReflectionElement"/> instances representing
            the matching methods found on the <paramref name="type"/>.</returns>
        </member>
        <member name="M:Albedo.ReflectionElementEnvy.GetProperMethods(System.Type)">
            <summary>
            Gets 'proper' methods from the <paramref name="type"/>; that is, methods excluding
            property accessors. Public | Static | Instance methods are returned.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> from which methods are selected</param>
            <returns>The sequence of <see cref="T:Albedo.IReflectionElement"/> instances representing
            the public static or public instance methods on the <paramref name="type"/>.</returns>
        </member>
        <member name="M:Albedo.ReflectionElementEnvy.Accept``1(System.Collections.Generic.IEnumerable{Albedo.IReflectionElement},Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the <see cref="T:Albedo.IReflectionVisitor`1"/> visitor on each of the
            <paramref name="elements"/> in the sequence.
            </summary>
            <typeparam name="T">
            The type of observation or result which the <see cref="T:Albedo.IReflectionVisitor`1"/>
            instance produces when visiting nodes.
            </typeparam>
            <param name="elements">
            The sequence of <see cref="T:Albedo.IReflectionElement"/> instances upon which 
            the <see cref="M:Albedo.IReflectionElement.Accept``1(Albedo.IReflectionVisitor{``0})"/> method will be called.
            </param>
            <param name="visitor">The <see cref="T:Albedo.IReflectionVisitor`1"/> instance.</param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
        </member>
        <member name="M:Albedo.ReflectionElementEnvy.GetPropertiesAndFields(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the matching properties and fields from the <paramref name="type"/>, and
            returns them as a sequence of <see cref="T:Albedo.IReflectionElement"/> instances.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> which properties and fields are
            obtained from.</param>
            <param name="bindingAttr">The <see cref="T:System.Reflection.BindingFlags"/> used determine which
            properties and fields to get.</param>
            <returns>The sequence of <see cref="T:Albedo.IReflectionElement"/> instances representing
            the matching properties and fields from the <paramref name="type"/>.</returns>
        </member>
        <member name="M:Albedo.ReflectionElementEnvy.GetPublicPropertiesAndFields(System.Type)">
            <summary>
            Gets the public instance properties and fields from the <paramref name="type"/>,
            and returns them as a sequence of <see cref="T:Albedo.IReflectionElement"/> instances.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> which properties and fields are
            obtained from.</param>
            <returns>The sequence of <see cref="T:Albedo.IReflectionElement"/> instances representing
            the public instance properties and fields from the 
            <paramref name="type"/>.</returns>
        </member>
        <member name="T:Albedo.ReflectionVisitor`1">
            <summary>
            Represents a Visitor base class which can visit
            <see cref="T:Albedo.IReflectionElement" /> instances.
            </summary>
            <typeparam name="T">
            The type of observations or calculations the Visitor makes.
            </typeparam>
            <remarks>
            <para>
            Implementers should prefer deriving from this class instead of
            implementing <see cref="T:Albedo.IReflectionVisitor`1" /> directly. The reason
            for this is that future versions of Albedo may add more methods to the
            interface. This will be a breaking change, so will only happen on major
            releases, but still, deriving from the
            <strong>ReflectionVisitor&lt;T&gt;</strong> base class gives you a
            better chance that your implementation will be compatible across a
            major release.
            </para>
            <para>
            Consumers, on the other hand, should still rely on the
            <strong>IReflectionVisitor&lt;T&gt;</strong> interface.
            </para>
            </remarks>
        </member>
        <member name="P:Albedo.ReflectionVisitor`1.Value">
            <summary>
            Gets the observation or value produced by this instance.
            </summary>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.AssemblyElement[])">
            <summary>
            Allows an <see cref="T:Albedo.AssemblyElement"/> instances to be 'visited'.
            This method is called when the element 'accepts' this visitor instance.
            </summary>
            <param name="assemblyElements">
            The <see cref="T:Albedo.AssemblyElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
            <remarks>
            <para>
            This implementation relays each <see cref="T:Albedo.AssemblyElement"/> instance
            to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.AssemblyElement)"/>,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.AssemblyElement)">
            <summary>
            Allows an <see cref="T:Albedo.AssemblyElement"/> to be visited. 
            This method is called when the element accepts this visitor
            instance.
            </summary>
            <param name="assemblyElement">
            The <see cref="T:Albedo.AssemblyElement"/> being visited.
            </param>
            <returns>
            A <see cref="T:Albedo.IReflectionVisitor`1" /> instance which can be used
            to continue the visiting process with potentially updated
            observations.
            </returns>
            <remarks>
            <para>
            This implementation relays <see cref="T:Albedo.TypeElement"/> instances
            from <see cref="M:System.Reflection.Assembly.GetTypes"/>, to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.TypeElement[])"/>,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.TypeElement[])">
            <summary>
            Allows <see cref="T:Albedo.TypeElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="typeElements">
            The <see cref="T:Albedo.TypeElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
            <remarks>
            <para>
            This implementation relays each <see cref="T:Albedo.TypeElement"/> instance
            to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.TypeElement)"/>,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.TypeElement)">
            <summary>
            Allows an <see cref="T:Albedo.TypeElement"/> to be visited. This method is
            called when the element accepts this visitor instance.
            </summary>
            <param name="typeElement">
            The <see cref="T:Albedo.TypeElement"/> being visited.
            </param>
            <returns>
            A <see cref="T:Albedo.IReflectionVisitor`1" /> instance which can be used
            to continue the visiting process with potentially updated
            observations.
            </returns>
            <remarks>
            <para>
            This implementation relays <see cref="T:Albedo.FieldInfoElement"/>, <see cref="T:Albedo.ConstructorInfoElement"/>,
            <see cref="T:Albedo.PropertyInfoElement"/>, <see cref="T:Albedo.MethodInfoElement"/>, and 
            <see cref="T:Albedo.EventInfoElement"/> instances to corresponding Visit method.
            These semantic child elements are constructed from the <see cref="T:Albedo.TypeElement"/> parameter,
            and since this method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.FieldInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.FieldInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="fieldInfoElements">
            The <see cref="T:Albedo.FieldInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
            <remarks>
            <para>
            This implementation relays each <see cref="T:Albedo.FieldInfoElement"/> instance
            to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.FieldInfoElement)"/>,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.ConstructorInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.ConstructorInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="constructorInfoElements">
            The <see cref="T:Albedo.ConstructorInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
            <remarks>
            <para>
            This implementation relays each <see cref="T:Albedo.ConstructorInfoElement"/> instance
            to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.ConstructorInfoElement)"/>,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.PropertyInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.PropertyInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="propertyInfoElements">
            The <see cref="T:Albedo.PropertyInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
            <remarks>
            <para>
            This implementation relays each <see cref="T:Albedo.PropertyInfoElement"/> instance
            to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.PropertyInfoElement)"/>,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.MethodInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.MethodInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="methodInfoElements">
            The <see cref="T:Albedo.MethodInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
            <remarks>
            <para>
            This implementation relays each <see cref="T:Albedo.MethodInfoElement"/> instance
            to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.MethodInfoElement)"/>,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.EventInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.EventInfoElement" /> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="eventInfoElements">
            The <see cref="T:Albedo.EventInfoElement" /> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1" /> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
            <remarks>
            <para>
            This implementation relays each <see cref="T:Albedo.EventInfoElement"/> instance
            to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.EventInfoElement)"/>,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.FieldInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.FieldInfoElement"/> to be visited. 
            This method is called when the element accepts this visitor
            instance.
            </summary>
            <param name="fieldInfoElement">
            The <see cref="T:Albedo.FieldInfoElement"/> being visited.
            </param>
            <returns>
            A <see cref="T:Albedo.IReflectionVisitor`1" /> instance which can be used
            to continue the visiting process with potentially updated
            observations.
            </returns>
            <remarks>
            <para>
            This implementation simply returns
            <paramref name="fieldInfoElement" /> without doing anything,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.ConstructorInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.ConstructorInfoElement"/> to be visited. 
            This method is called when the element accepts this visitor
            instance.
            </summary>
            <param name="constructorInfoElement">
            The <see cref="T:Albedo.ConstructorInfoElement"/> being visited.
            </param>
            <returns>
            A <see cref="T:Albedo.IReflectionVisitor`1" /> instance which can be used
            to continue the visiting process with potentially updated
            observations.
            </returns>
            <remarks>
            <para>
            This implementation relays the <see cref="T:Albedo.ParameterInfoElement"/>
            and <see cref="T:Albedo.LocalVariableInfoElement"/> instances
            from the <see cref="T:Albedo.ConstructorInfoElement"/> parameter
            to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.ParameterInfoElement[])"/> and <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.LocalVariableInfoElement[])"/> ,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.PropertyInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.PropertyInfoElement"/> to be visited. 
            This method is called when the element accepts this visitor
            instance.
            </summary>
            <param name="propertyInfoElement">
            The <see cref="T:Albedo.PropertyInfoElement"/> being visited.
            </param>
            <returns>
            A <see cref="T:Albedo.IReflectionVisitor`1" /> instance which can be used
            to continue the visiting process with potentially updated
            observations.
            </returns>
            <remarks>
            <para>
            This implementation relays the two <see cref="T:Albedo.MethodInfoElement"/> instances
            from the getter and setter of the <see cref="T:Albedo.PropertyInfoElement"/> parameter,
            to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.MethodInfoElement)"/>,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.MethodInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.MethodInfoElement"/> to be visited. 
            This method is called when the element accepts this visitor
            instance.
            </summary>
            <param name="methodInfoElement">
            The <see cref="T:Albedo.MethodInfoElement"/> being visited.
            </param>
            <returns>
            A <see cref="T:Albedo.IReflectionVisitor`1" /> instance which can be used
            to continue the visiting process with potentially updated
            observations.
            </returns>
            <remarks>
            <para>
            This implementation relays the <see cref="T:Albedo.ParameterInfoElement"/>
            and <see cref="T:Albedo.LocalVariableInfoElement"/> instances
            from the <see cref="T:Albedo.MethodInfoElement"/> parameter
            to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.ParameterInfoElement[])"/> and <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.LocalVariableInfoElement[])"/> ,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.EventInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.EventInfoElement"/> to be visited. This method
            is called when the element accepts this visitor instance.
            </summary>
            <param name="eventInfoElement">
            The <see cref="T:Albedo.EventInfoElement"/> being visited.
            </param>
            <returns>
            A <see cref="T:Albedo.IReflectionVisitor`1" /> instance which can be used
            to continue the visiting process with potentially updated
            observations.
            </returns>
            <remarks>
            <para>
            This implementation simply returns
            <paramref name="eventInfoElement" /> without doing anything, but
            since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.ParameterInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.ParameterInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="parameterInfoElements">
            The <see cref="T:Albedo.ParameterInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
            <remarks>
            <para>
            This implementation relays each <see cref="T:Albedo.ParameterInfoElement"/> instance
            to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.ParameterInfoElement)"/>,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.LocalVariableInfoElement[])">
            <summary>
            Allows <see cref="T:Albedo.LocalVariableInfoElement"/> instances to be 'visited'.
            This method is called when the elements 'accepts' this visitor instance.
            </summary>
            <param name="localVariableInfoElements">
            The <see cref="T:Albedo.LocalVariableInfoElement"/> instances being visited.
            </param>
            <returns>
            A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.
            </returns>
            <remarks>
            <para>
            This implementation relays each <see cref="T:Albedo.LocalVariableInfoElement"/> instance
            to <see cref="M:Albedo.ReflectionVisitor`1.Visit(Albedo.LocalVariableInfoElement)"/>,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.ParameterInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.ParameterInfoElement"/> to be visited. 
            This method is called when the element accepts this visitor
            instance.
            </summary>
            <param name="parameterInfoElement">
            The <see cref="T:Albedo.ParameterInfoElement"/> being visited.
            </param>
            <returns>
            A <see cref="T:Albedo.IReflectionVisitor`1" /> instance which can be used
            to continue the visiting process with potentially updated
            observations.
            </returns>
            <remarks>
            <para>
            This implementation simply returns
            <paramref name="parameterInfoElement" /> without doing anything,
            but since the method is virtual, child classes can override it.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.ReflectionVisitor`1.Visit(Albedo.LocalVariableInfoElement)">
            <summary>
            Allows an <see cref="T:Albedo.LocalVariableInfoElement"/> to be visited. 
            This method is called when the element accepts this visitor
            instance.
            </summary>
            <param name="localVariableInfoElement">
            The <see cref="T:Albedo.LocalVariableInfoElement"/> being visited.
            </param>
            <returns>
            A <see cref="T:Albedo.IReflectionVisitor`1" /> instance which can be used
            to continue the visiting process with potentially updated
            observations.
            </returns>
            <remarks>
            <para>
            This implementation simply returns
            <paramref name="localVariableInfoElement" /> without doing
            anything, but since the method is virtual, child classes can
            override it.
            </para>
            </remarks>
        </member>
        <member name="T:Albedo.Refraction.AssemblyElementRefraction`1">
            <summary>
            Creates <see cref="T:Albedo.AssemblyElement" /> instances from a sequence of
            source objects.
            </summary>
            <typeparam name="T">The type of source objects.</typeparam>
            <seealso cref="M:Albedo.Refraction.AssemblyElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})" />
        </member>
        <member name="M:Albedo.Refraction.AssemblyElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates <see cref="T:Albedo.AssemblyElement" /> instances from a sequence of
            source objects.
            </summary>
            <param name="source">The source objects.</param>
            <returns>
            A sequence of <see cref="T:Albedo.AssemblyElement" /> instances created from
            a <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
            <remarks>
            <para>
            This method creates <see cref="T:Albedo.AssemblyElement" /> instances from
            all matching elements in <paramref name="source" />. An element is
            matching if it's an <see cref="T:System.Reflection.Assembly" /> instance, in which case
            a corresponding <strong>AssemblyElement</strong> is created and
            returned.
            </para>
            </remarks>
            <seealso cref="T:Albedo.Refraction.IReflectionElementRefraction`1" />
        </member>
        <member name="T:Albedo.Refraction.CompositeReflectionElementRefraction`1">
            <summary>
            Composes multiple <see cref="T:Albedo.Refraction.IReflectionElementRefraction`1" />
            instances, so that they look like a single instance of
            <strong>IReflectionElementRefraction&lt;T&gt;</strong>.
            </summary>
            <typeparam name="T">The type of source objects.</typeparam>
            <remarks>
            <para>
            This is a standard implementation of the Composite design pattern.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.Refraction.CompositeReflectionElementRefraction`1.#ctor(Albedo.Refraction.IReflectionElementRefraction{`0}[])">
            <summary>
            Initializes a new instance of the
            <see cref="T:Albedo.Refraction.CompositeReflectionElementRefraction`1"/> class.
            </summary>
            <param name="refractions">The refractions to compose.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="refractions" /> is null.
            </exception>
            <remarks>
            <para>
            After construction, the injected <paramref name="refractions" />
            are available by enumerating over the new instance.
            </para>
            </remarks>
            <seealso cref="M:Albedo.Refraction.CompositeReflectionElementRefraction`1.GetEnumerator" />
        </member>
        <member name="M:Albedo.Refraction.CompositeReflectionElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a sequence of <see cref="T:Albedo.IReflectionElement" /> instances
            from a sequence of source objects, but composing the result of
            invoking <strong>Refract</strong> on all composed refractions.
            </summary>
            <param name="source">The source object.</param>
            <returns>
            A a sequence of <see cref="T:Albedo.IReflectionElement" /> instances from a
            sequence of source objects, but composing the result of invoking 
            <strong>Refract</strong> on all composed refractions.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
        </member>
        <member name="M:Albedo.Refraction.CompositeReflectionElementRefraction`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the composed
            refractions.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that
            can be used to iterate through the composed refractions.
            </returns>
            <remarks>
            <para>
            The elements returned by this method are the refractions passed to
            the constructor when the instance was created.
            </para>
            </remarks>
            <seealso cref="M:Albedo.Refraction.CompositeReflectionElementRefraction`1.#ctor(Albedo.Refraction.IReflectionElementRefraction{`0}[])" />
        </member>
        <member name="T:Albedo.Refraction.ConstructorInfoElementRefraction`1">
            <summary>
            Creates <see cref="T:Albedo.ConstructorInfoElement" /> instances from a sequence
            of source objects.
            </summary>
            <typeparam name="T">The type of source objects.</typeparam>
            <seealso cref="M:Albedo.Refraction.ConstructorInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})" />
        </member>
        <member name="M:Albedo.Refraction.ConstructorInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates <see cref="T:Albedo.ConstructorInfoElement" /> instances from a
            sequence of source objects.
            </summary>
            <param name="source">The source objects.</param>
            <returns>
            A sequence of <see cref="T:Albedo.ConstructorInfoElement" /> instances
            created from <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
            <remarks>
            <para>
            This method creates <see cref="T:Albedo.ConstructorInfoElement" /> instances
            from all matching elements in <paramref name="source" />. An
            element is matching if it's a <see cref="T:System.Reflection.ConstructorInfo" />
            instance, in which case a corresponding
            <strong>ConstructorInfoElement</strong> is created and returned.
            </para>
            </remarks>
            <seealso cref="T:Albedo.Refraction.IReflectionElementRefraction`1" />
        </member>
        <member name="T:Albedo.Refraction.Conversions">
            <summary>
            Contains conversion methods to turn objects into
            <see cref="T:Albedo.IReflectionElement" /> instances.
            </summary>
        </member>
        <member name="M:Albedo.Refraction.Conversions.AsReflectionElement``1(``0)">
            <summary>
            Converts an object to an <see cref="T:Albedo.IReflectionElement" />
            instance. This method is guaranteed to always return a proper
            instance.
            </summary>
            <typeparam name="T">The type of the object to convert.</typeparam>
            <param name="source">The object to convert.</param>
            <returns>
            An <see cref="T:Albedo.IReflectionElement" /> instance that adapts
            <paramref name="source" />, if possibly; otherwise, a
            <see cref="T:Albedo.NullReflectionElement" />.
            </returns>
            <remarks>
            <para>
            This method is guaranteed to return an
            <see cref="T:Albedo.IReflectionElement" /> instance. However, if
            <paramref name="source" /> can't properly be adapted, a
            <see cref="T:Albedo.NullReflectionElement" /> is returned.
            </para>
            <para>
            For a stricter conversion, you can use
            <see cref="M:Albedo.Refraction.Conversions.ToReflectionElement``1(``0)" />.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
            <seealso cref="M:Albedo.Refraction.Conversions.ToReflectionElement``1(``0)" />
        </member>
        <member name="M:Albedo.Refraction.Conversions.ToReflectionElement``1(``0)">
            <summary>
            Converts an object to an <see cref="T:Albedo.IReflectionElement" />
            instance. This method is guaranteed to handle only proper
            Reflection objects.
            </summary>
            <typeparam name="T">The type of the object to convert.</typeparam>
            <param name="source">The object to convert.</param>
            <returns>
            An <see cref="T:Albedo.IReflectionElement" /> instance that adapts
            <paramref name="source" />, if possibly; otherwise, an
            <see cref="T:System.ArgumentException"/> is thrown.
            </returns>
            <remarks>
            <para>
            This method is guaranteed to only convert proper Reflection
            objects, such as <see cref="T:System.Reflection.ParameterInfo" />,
            <see cref="T:System.Reflection.PropertyInfo" />, <see cref="T:System.Type" />,
            <see cref="T:System.Reflection.Assembly" />, etc. If
            <paramref name="source" /> isn't such a proper Reflection object,
            an <see cref="T:System.ArgumentException" /> is thrown.
            </para>
            <para>
            For a weaker, but more robust conversion, you can use
            <see cref="M:Albedo.Refraction.Conversions.AsReflectionElement``1(``0)" />.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="source" /> isn't a proper Reflection object.
            </exception>
            <seealso cref="M:Albedo.Refraction.Conversions.AsReflectionElement``1(``0)" />
        </member>
        <member name="T:Albedo.Refraction.EventInfoElementRefraction`1">
            <summary>
            Creates <see cref="T:Albedo.EventInfoElement" /> instances from a sequence of
            source objects.
            </summary>
            <typeparam name="T">The type of source objects.</typeparam>
            <seealso cref="M:Albedo.Refraction.EventInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})" />
        </member>
        <member name="M:Albedo.Refraction.EventInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates <see cref="T:Albedo.EventInfoElement" /> instances from a sequence
            of source objects.
            </summary>
            <param name="source">The source objects.</param>
            <returns>
            A sequence of <see cref="T:Albedo.EventInfoElement" /> instances created
            from <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
            <remarks>
            <para>
            This method creates <see cref="T:Albedo.EventInfoElement" /> instances from
            all matching elements in <paramref name="source" />. An element is
            matching if it's an <see cref="T:System.Reflection.EventInfo" /> instance, in which
            case a corresponding <strong>EventInfoElement</strong> is created
            and returned.
            </para>
            </remarks>
            <seealso cref="T:Albedo.Refraction.IReflectionElementRefraction`1" />
        </member>
        <member name="T:Albedo.Refraction.FieldInfoElementRefraction`1">
            <summary>
            Creates <see cref="T:Albedo.FieldInfoElement" /> instances from a sequence of
            source objects.
            </summary>
            <typeparam name="T">The type of source objects.</typeparam>
            <seealso cref="M:Albedo.Refraction.FieldInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})" />
        </member>
        <member name="M:Albedo.Refraction.FieldInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates <see cref="T:Albedo.FieldInfoElement" /> instances from a sequence
            of source objects.
            </summary>
            <param name="source">The source objects.</param>
            <returns>
            A sequence of <see cref="T:Albedo.FieldInfoElement" /> instances created
            from <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
            <remarks>
            <para>
            This method creates <see cref="T:Albedo.FieldInfoElement" /> instances from
            all matching elements in <paramref name="source" />. An element is
            matching if it's a <see cref="T:System.Reflection.FieldInfo" /> instance, in which case
            a corresponding <strong>FieldInfoElement</strong> is created and
            returned.
            </para>
            </remarks>
            <seealso cref="T:Albedo.Refraction.IReflectionElementRefraction`1" />
        </member>
        <member name="T:Albedo.Refraction.IReflectionElementRefraction`1">
            <summary>
            Creates a sequence of <see cref="T:Albedo.IReflectionElement" /> instances from
            a sequence of source objects.
            </summary>
            <typeparam name="T">The type of source objects.</typeparam>
            <remarks>
            <para>
            The purpose of the
            <strong>IReflectionElementRefraction&lt;T&gt;</strong> interface is
            to enable clients to easily transform one or more source objects into
            <see cref="T:Albedo.IReflectionElement" /> instances. A common use case is to
            use implementations of this interface to transform one or more
            Reflection instances, such as
            <see cref="T:System.Reflection.PropertyInfo" /> or
            <see cref="T:System.Reflection.ParameterInfo" />, into their respective
            <strong>IReflectionElement</strong> Adapters. However, because of the
            existence of <see cref="T:Albedo.NullReflectionElement" />, an optional strategy
            might be to return a <strong>NullReflectionElement</strong> instance
            for any source object that doesn't have an appropriate
            <strong>IReflectionElement</strong> Adapter.
            </para>
            </remarks>
            <seealso cref="M:Albedo.Refraction.IReflectionElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})" />
        </member>
        <member name="M:Albedo.Refraction.IReflectionElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a sequence of <see cref="T:Albedo.IReflectionElement" /> instances
            from a sequence of source objects.
            </summary>
            <param name="source">The source objects.</param>
            <returns>
            A sequence of <see cref="T:Albedo.IReflectionElement" /> instances created
            from <paramref name="source" />.
            </returns>
            <remarks>
            <para>
            This method doesn't guarantee that the returned sequence has the
            same number of items as <paramref name="source" />; in fact, an
            implementation is allowed to return an empty sequence if no items
            in the input sequence could be refracted.
            </para>
            <para>
            Note to implementers:
            </para>
            <para>
            It's perfectly fine to return an empty sequence if no items in
            <paramref name="source" /> can be refracted. However,
            <see langword="null" /> is never considered an appropriate return
            value.
            </para>
            <para>
            Implementations are allowed to filter the input sequence, or even
            add new items in the output sequence.
            </para>
            </remarks>
            <seealso cref="T:Albedo.Refraction.IReflectionElementRefraction`1" />
        </member>
        <member name="T:Albedo.Refraction.LocalVariableInfoElementRefraction`1">
            <summary>
            Creates <see cref="T:Albedo.LocalVariableInfoElement" /> instances from a sequence of
            source objects.
            </summary>
            <typeparam name="T">The type of source objects.</typeparam>
            <seealso cref="M:Albedo.Refraction.LocalVariableInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})" />
        </member>
        <member name="M:Albedo.Refraction.LocalVariableInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates <see cref="T:Albedo.LocalVariableInfoElement" /> instances from a sequence of
            source objects.
            </summary>
            <param name="source">The source objects.</param>
            <returns>
            A sequence of <see cref="T:Albedo.LocalVariableInfoElement" /> instances created from
            a <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
            <remarks>
            <para>
            This method creates <see cref="T:Albedo.LocalVariableInfoElement" /> instances from
            all matching elements in <paramref name="source" />. An element is
            matching if it's an <see cref="T:System.Reflection.LocalVariableInfo" /> instance, in which case
            a corresponding <strong>LocalVariableInfoElement</strong> is created and
            returned.
            </para>
            </remarks>
            <seealso cref="T:Albedo.Refraction.IReflectionElementRefraction`1" />
        </member>
        <member name="T:Albedo.Refraction.MethodInfoElementRefraction`1">
            <summary>
            Creates <see cref="T:Albedo.MethodInfoElement" /> instances from a sequence of
            source objects.
            </summary>
            <typeparam name="T">The type of source objects.</typeparam>
            <seealso cref="M:Albedo.Refraction.MethodInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})" />
        </member>
        <member name="M:Albedo.Refraction.MethodInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates <see cref="T:Albedo.MethodInfoElement" /> instances from a sequence
            of source objects.
            </summary>
            <param name="source">The source objects.</param>
            <returns>
            A sequence of <see cref="T:Albedo.MethodInfoElement" /> instances created
            from <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
            <remarks>
            <para>
            This method creates <see cref="T:Albedo.MethodInfoElement" /> instances from
            all matching elements in <paramref name="source" />. An element is
            matching if it's an <see cref="T:System.Reflection.MethodInfo" /> instance, in which
            case a corresponding <strong>MethodInfoElement</strong> is created
            and returned.
            </para>
            </remarks>
            <seealso cref="T:Albedo.Refraction.IReflectionElementRefraction`1" />
        </member>
        <member name="T:Albedo.Refraction.ParameterInfoElementRefraction`1">
            <summary>
            Creates <see cref="T:Albedo.ParameterInfoElement" /> instances from a sequence of
            source objects.
            </summary>
            <typeparam name="T">The type of source objects.</typeparam>
            <seealso cref="M:Albedo.Refraction.ParameterInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})" />
        </member>
        <member name="M:Albedo.Refraction.ParameterInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates <see cref="T:Albedo.ParameterInfoElement" /> instances from a sequence
            of source objects.
            </summary>
            <param name="source">The source objects.</param>
            <returns>
            A sequence of <see cref="T:Albedo.ParameterInfoElement" /> instances created
            from <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
            <remarks>
            <para>
            This method creates <see cref="T:Albedo.ParameterInfoElement" /> instances from
            all matching elements in <paramref name="source" />. An element is
            matching if it's an <see cref="T:System.Reflection.ParameterInfo" /> instance, in which
            case a corresponding <strong>ParameterInfoElement</strong> is created
            and returned.
            </para>
            </remarks>
            <seealso cref="T:Albedo.Refraction.IReflectionElementRefraction`1" />
        </member>
        <member name="T:Albedo.Refraction.PropertyInfoElementRefraction`1">
            <summary>
            Creates <see cref="T:Albedo.PropertyInfoElement" /> instances from a sequence of
            source objects.
            </summary>
            <typeparam name="T">The type of source objects.</typeparam>
            <seealso cref="M:Albedo.Refraction.PropertyInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})" />
        </member>
        <member name="M:Albedo.Refraction.PropertyInfoElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates <see cref="T:Albedo.PropertyInfoElement" /> instances from a sequence
            of source objects.
            </summary>
            <param name="source">The source objects.</param>
            <returns>
            A sequence of <see cref="T:Albedo.PropertyInfoElement" /> instances created
            from <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
            <remarks>
            <para>
            This method creates <see cref="T:Albedo.PropertyInfoElement" /> instances from
            all matching elements in <paramref name="source" />. An element is
            matching if it's an <see cref="T:System.Reflection.PropertyInfo" /> instance, in which
            case a corresponding <strong>PropertyInfoElement</strong> is created
            and returned.
            </para>
            </remarks>
            <seealso cref="T:Albedo.Refraction.IReflectionElementRefraction`1" />
        </member>
        <member name="T:Albedo.Refraction.ReflectionElementRefraction`1">
            <summary>
            Filters a sequence of source objects, allowing only
            <see cref="T:Albedo.IReflectionElement" /> instances to pass through.
            </summary>
            <typeparam name="T">The type of source objects.</typeparam>
        </member>
        <member name="M:Albedo.Refraction.ReflectionElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Filters a sequence of source objects, allowing only
            <see cref="T:Albedo.IReflectionElement" /> instances to pass through.
            </summary>
            <param name="source">The source objects.</param>
            <returns>
            A sequence of only those elements of <paramref name="source" />
            that are already <see cref="T:Albedo.IReflectionElement" /> instances.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
        </member>
        <member name="T:Albedo.Refraction.TypeElementRefraction`1">
            <summary>
            Creates <see cref="T:Albedo.TypeElement" /> instances from a sequence of source
            objects.
            </summary>
            <typeparam name="T">The type of source objects.</typeparam>
            <seealso cref="M:Albedo.Refraction.TypeElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})" />
        </member>
        <member name="M:Albedo.Refraction.TypeElementRefraction`1.Refract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates <see cref="T:Albedo.TypeElement" /> instances from a sequence of
            source objects.
            </summary>
            <param name="source">The source objects.</param>
            <returns>
            A sequence of <see cref="T:Albedo.TypeElement" /> instances created from
            <paramref name="source" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
            <remarks>
            <para>
            This method creates <see cref="T:Albedo.TypeElement" /> instances from all
            matching elements in <paramref name="source" />. An element is
            matching if it's a <see cref="T:System.Type" /> instance, in which case a
            corresponding <strong>AssemblyElement</strong> is created and
            returned.
            </para>
            </remarks>
            <seealso cref="T:Albedo.Refraction.IReflectionElementRefraction`1" />
        </member>
        <member name="T:Albedo.TypeElement">
            <summary>
            An <see cref="T:Albedo.IReflectionElement"/> representing a <see cref="T:System.Type"/> which
            can be visited by an <see cref="T:Albedo.IReflectionVisitor`1"/> implementation.
            </summary>
        </member>
        <member name="P:Albedo.TypeElement.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> instance this element represents.
            </summary>
        </member>
        <member name="M:Albedo.TypeElement.#ctor(System.Type)">
            <summary>
            Constructs a new instance of the <see cref="T:Albedo.TypeElement"/> which represents
            the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> this element represents.</param>
        </member>
        <member name="M:Albedo.TypeElement.Accept``1(Albedo.IReflectionVisitor{``0})">
            <summary>
            Accepts the provided <see cref="T:Albedo.IReflectionVisitor`1"/>, by calling the
            appropriate strongly-typed <see cref="M:Albedo.IReflectionVisitor`1.Visit(Albedo.TypeElement)"/>
            method on the visitor.
            </summary>
            <typeparam name="T">The type of observation or result which the
            <see cref="T:Albedo.IReflectionVisitor`1"/> instance produces when visiting nodes.</typeparam>
            <param name="visitor">The <see cref="T:Albedo.IReflectionVisitor`1"/> instance.</param>
            <returns>A (potentially) new <see cref="T:Albedo.IReflectionVisitor`1"/> instance which can be
            used to continue the visiting process with potentially updated observations.</returns>
        </member>
        <member name="M:Albedo.TypeElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to
            this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this
            instance.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            Two instances of <see cref="T:Albedo.TypeElement" /> are considered to
            be equal if their <see cref="P:Albedo.TypeElement.Type" /> values are equal.
            </para>
            </remarks>
        </member>
        <member name="M:Albedo.TypeElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Albedo.TypeElement.ToString">
            <summary>
            Gets the string representation of the <see cref="P:Albedo.TypeElement.Type"/>
            suitable for development / debugging display purposes.
            </summary>
            <returns>The string representation of the contained
            <see cref="P:Albedo.TypeElement.Type"/></returns>
        </member>
        <member name="T:Albedo.ValueCollectingVisitor">
            <summary>
            Represents a Visitor which can visit <see cref="T:Albedo.IReflectionElement" /> instances,
            collecting values from <see cref="T:Albedo.PropertyInfoElement"/> or
            <see cref="T:Albedo.FieldInfoElement"/> instances.
            </summary>
        </member>
        <member name="M:Albedo.ValueCollectingVisitor.#ctor(System.Object,System.Object[])">
            <summary>
            Constructs a new instance of the <see cref="T:Albedo.EventInfoElement"/> which represents
            the specified <see cref="T:System.Reflection.EventInfo"/>.
            </summary>
            <param name="target">The target object instance, from which
            values will be collected</param>
            <param name="values">The existing/initial values from any previous collections
            </param>
        </member>
        <member name="P:Albedo.ValueCollectingVisitor.Value">
            <summary>
            Gets the observation or value produced by this instance; the actual values
            from the visited properties and fields.
            </summary>
        </member>
        <member name="P:Albedo.ValueCollectingVisitor.Target">
            <summary>
            Gets the target object that values are collected from.
            </summary>
        </member>
        <member name="M:Albedo.ValueCollectingVisitor.Visit(Albedo.AssemblyElement)">
            <summary>Visits the specified assembly element.</summary>
            <param name="assemblyElement">The assembly element.</param>
            <returns>Always throws.</returns>
            <exception cref="T:System.NotSupportedException">
            Collecting values from an entire assembly is not supported.
            ValueCollectingVisitor collect values from a single object (the
            'target'), and the values collected must correspond to fields or 
            properties on that object. Attempting to collect values from an
            entire Assembly is meaningless, because an Assembly normally 
            defines more than a single type. In the rare case where you have an
            assembly with only a single type, use the Visit(TypeElement)
            overload instead.
            </exception>
        </member>
        <member name="M:Albedo.ValueCollectingVisitor.Visit(Albedo.FieldInfoElement)">
            <summary>
            Visits the <see cref="T:Albedo.FieldInfoElement"/> and collects the value for this
            field from the <see cref="P:Albedo.ValueCollectingVisitor.Target"/> instance.
            </summary>
            <param name="fieldInfoElement">
            The <see cref="T:Albedo.FieldInfoElement"/> being visited.
            </param>
            <returns>
            A <see cref="T:Albedo.IReflectionVisitor`1" /> instance which can be used
            to continue the visiting process with potentially updated
            observations.
            </returns>
        </member>
        <member name="M:Albedo.ValueCollectingVisitor.Visit(Albedo.PropertyInfoElement)">
            <summary>
            Visits the <see cref="T:Albedo.FieldInfoElement"/> and collects the value for this
            field from the <see cref="P:Albedo.ValueCollectingVisitor.Target"/> instance.
            </summary>
            <param name="propertyInfoElement">
            The <see cref="T:Albedo.PropertyInfoElement"/> being visited.
            </param>
            <returns>
            A <see cref="T:Albedo.IReflectionVisitor`1" /> instance which can be used
            to continue the visiting process with potentially updated
            observations.
            </returns>
        </member>
    </members>
</doc>
