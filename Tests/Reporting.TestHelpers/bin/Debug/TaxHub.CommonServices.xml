<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaxHub.CommonServices</name>
    </assembly>
    <members>
        <member name="T:TaxHub.CommonServices.CommonServicesStartup">
            <summary>
            Base class for service startup classes.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.CommonServicesStartup.Description">
            <summary>
            Gets the description of the service.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.CommonServicesStartup.ConfigurationFileName">
            <summary>
            Gets the configuration file name.
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.CommonServicesStartup.InitializeUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CommonServices.CommonServicesStartup.CommonServicesInitializeUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initialize unity container
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:TaxHub.CommonServices.CommonServicesStartup.ResolveUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CommonServices.CommonServicesStartup.InitializeEventStoreUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.CommonServicesStartup.StartInternalServices(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.CommonServicesStartup.StartInternalServicesAsync(Microsoft.Practices.Unity.IUnityContainer,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.CommonServicesStartup.StopApplication(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.CommonServicesStartup.GetApiEndpointsScope">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CommonServices.CommonServicesStartup.InitializeMessageSubscribers(Microsoft.Practices.Unity.IUnityContainer)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CommonServices.CommonServicesStartup.InitializeConfigurationForUnityContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            New Config Sections that pertain only to CommonServices should be registered here.
            </summary>
            <param name="container">The unity container</param>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.FileManagementServicesExtensions">
            <summary>
            Extension methods to support <see cref="T:TaxHub.CommonServices.FileManagement.Application.FileService"/>.
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.FileManagementServicesExtensions.AddFileManagement(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Adds Sql Server Reporting Services registrations to Unity Container.
            </summary>
            <param name="container">The container.</param>
            <returns>The unity container.</returns>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration">
            <summary>
            This class provides access to system configuration settings.
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration"/> class.
            </summary>
            Note: Removing this constructor will cause an exception when starting up the project.
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.#ctor(TaxHub.ObjectStorage.Integration.ObjectStorageConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration"/> class.
            </summary>
            <param name="objectStorageConfiguration">Object storage configuration</param>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.IntermediaryFileObjectStorageExpirationDateTime">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.DefaultFileObjectStorageExpirationDateTime">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.EFormsOutputFileObjectStorageExpirationDateTime">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.FormsOutputFileObjectStorageExpirationDateTime">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.QuarterEndPackageFileObjectStorageExpirationDateTime">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.YearEndPackageFileObjectStorageExpirationDateTime">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.FedStateEftsFileObjectStorageExpirationDateTime">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.CheckFileObjectStorageExpirationDateTime">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.CheckReportFileObjectStorageExpirationDateTime">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.PosipayFileObjectStorageExpirationDateTime">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.ClientManageDocsFileObjectStorageExpirationDateTime">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.IntermediaryFileObjectStorageExpirationInMinutes">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.DefaultFileObjectStorageExpirationInMinutes">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.EFormsOutputFileObjectStorageExpirationInMinutes">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.FormsOutputFileObjectStorageExpirationInMinutes">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.CheckFileObjectStorageExpirationInMinutes">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.QuarterEndPackageFileObjectStorageExpirationInMinutes">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.YearEndPackageFileObjectStorageExpirationInMinutes">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.FedStateEftsFileObjectStorageExpirationInMinutes">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.CheckReportFileObjectStorageExpirationInMinutes">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.PosipayFileObjectStorageExpirationInMinutes">
            <inheritdoc />
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.ClientManageDocsFileObjectStorageExpirationInMinutes">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.FileServiceConfiguration.ConfigurationRefreshed(TaxHub.Configuration.IConfigSection)">
            <summary>
            This method is called when the configuration changes.
            </summary>
            <param name="section">Configuration Section containing the new values.</param>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration">
            <summary>
            This interface provides access to object storage configuration settings.
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.IntermediaryFileObjectStorageExpirationDateTime">
            <summary>
            Expiration date time for files that are stored in object storage temporarily
            </summary>
            <returns>Expiration date time</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.DefaultFileObjectStorageExpirationDateTime">
            <summary>
            Default expiration date time for files that are stored in object storage.
            </summary>
            <returns>Expiration date time</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.EFormsOutputFileObjectStorageExpirationDateTime">
            <summary>
            Expiration date time for electronic forms output files that are stored in object storage.
            </summary>
            <returns>Expiration date time</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.FormsOutputFileObjectStorageExpirationDateTime">
            <summary>
            Expiration date time for forms output files that are stored in object storage.
            </summary>
            <returns>Expiration date time</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.QuarterEndPackageFileObjectStorageExpirationDateTime">
            <summary>
            Expiration date time for quarter end package files that are stored in object storage.
            </summary>
            <returns>Expiration date time</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.YearEndPackageFileObjectStorageExpirationDateTime">
            <summary>
            Expiration date time for year end package files that are stored in object storage.
            </summary>
            <returns>Expiration date time</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.FedStateEftsFileObjectStorageExpirationDateTime">
            <summary>
            Expiration date time for federal and state EFT files that are stored in object storage.
            </summary>
            <returns>Expiration date time</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.CheckFileObjectStorageExpirationDateTime">
            <summary>
            Expiration date time for check files that are stored in object storage.
            </summary>
            <returns>Expiration date time</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.CheckReportFileObjectStorageExpirationDateTime">
            <summary>
            Expiration date time for check report files that are stored in object storage.
            </summary>
            <returns>Expiration date time</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.PosipayFileObjectStorageExpirationDateTime">
            <summary>
            Expiration date time for posipay files that are stored in object storage.
            </summary>
            <returns>Expiration date time</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.ClientManageDocsFileObjectStorageExpirationDateTime">
            <summary>
            Expiration date time for client manage document files that are stored in object storage.
            </summary>
            <returns>Expiration date time</returns>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.IntermediaryFileObjectStorageExpirationInMinutes">
            <summary>
            Expiration offset for files that are cached in object storage temporarily
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.DefaultFileObjectStorageExpirationInMinutes">
            <summary>
            Default expiration offset for files that are stored in object storage.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.EFormsOutputFileObjectStorageExpirationInMinutes">
            <summary>
            Expiration offset for electronic forms output files that are stored in object storage.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.FormsOutputFileObjectStorageExpirationInMinutes">
            <summary>
            Expiration offset for forms output files that are stored in object storage.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.CheckFileObjectStorageExpirationInMinutes">
            <summary>
            Expiration offset for check files that are stored in object storage.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.QuarterEndPackageFileObjectStorageExpirationInMinutes">
            <summary>
            Expiration offset for quarter end package files that are stored in object storage.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.YearEndPackageFileObjectStorageExpirationInMinutes">
            <summary>
            Expiration offset for year end package files that are stored in object storage.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.FedStateEftsFileObjectStorageExpirationInMinutes">
            <summary>
            Expiration offset for federal and state EFT files that are stored in object storage.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.CheckReportFileObjectStorageExpirationInMinutes">
            <summary>
            Expiration offset for check report files that are stored in object storage.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.PosipayFileObjectStorageExpirationInMinutes">
            <summary>
            Expiration offset for posipay files that are stored in object storage.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration.ClientManageDocsFileObjectStorageExpirationInMinutes">
            <summary>
            Expiration offset for check files that are stored in object storage.
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IPublishable.Publish(System.Collections.Generic.IEnumerable{TaxHub.Common.EventStore.DomainEventData})">
            <summary>
            This should delegate to MessageHub's Publish method
            </summary>
            <param name="domainEvents">list of domain events to be published</param>
            <returns>success flag</returns>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Application.FileService">
            <summary>
            Default concrete implementation of a dummy file service,
            using Object Storage as the infrastructure
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.#ctor(TaxHub.Hosting.Runtime.IHashProvider,TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoRepository,TaxHub.Common.Logging.IAppLogger,TaxHub.Hosting.Runtime.IDomainService,TaxHub.CommonServices.FileManagement.Application.IPublishable,TaxHub.CommonServices.FileManagement.Configuration.IFileServiceConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CommonServices.FileManagement.Application.FileService"/> class.
            </summary>
            <param name="hashProvider">Check sum hash provider</param>
            <param name="repository">File info repository</param>
            <param name="logger">App logger</param>
            <param name="domainService">Domain service</param>
            <param name="messageHub">message hub</param>
            <param name="fileServiceConfiguration">File service configuration</param>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.SaveFile(System.String,System.Web.HttpPostedFile,TaxHub.Common.Enums.FileServiceDocumentType,System.String,System.Guid,System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.SaveFile(System.String,System.Byte[],TaxHub.Common.Enums.FileServiceDocumentType,System.String,System.Guid,System.Nullable{System.Guid},System.Nullable{System.TimeSpan},System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.SaveFile(TaxHub.Hosting.Runtime.TemporaryStreamResult,TaxHub.CommonServices.FileManagement.Models.FileInfo,System.Guid,System.Guid,System.String,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new file
            </summary>
            <param name="temporaryStream">Stream with the file to be uploaded</param>
            <param name="fileInfo">PTM file details</param>
            <param name="correlationId">Correlation id for tracking</param>
            <param name="userId">user id</param>
            <param name="userDescription">user</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="timeout">timeout</param>
            <returns>A task result</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.GetExpirationDateFromDocumentType(System.String)">
            <summary>
            Calculates an expiration date from the given document type.
            </summary>
            <param name="documentType">The document type to choose from.</param>
            <returns>The retention period from the file's creation date.</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.LinkPreviouslyPersistedFileInternal(TaxHub.CommonServices.FileManagement.Models.FileInfo,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            An internal method to store a FileInfo record for the file stored in object storage.
            </summary>
            <param name="fileInfo">Represents the file stored in object storage.</param>
            <param name="correlationId">The correlation ID.</param>
            <param name="userId">The user ID.</param>
            <param name="userDescription">The user name</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of the file storage operation.</returns>
            <remarks>ULTI-358734: Internalized to separate concerns of idempotency. This method will throw an exception given the method is called with the same parameters to maintain current behavior.</remarks>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.LinkPreviouslyPersistedFile(TaxHub.CommonServices.FileManagement.Models.FileInfo,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find file info by Id
            </summary>
            <param name="id">identifier</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>File Info</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.FindByRemoteContainerAndRemoteIdentifier(System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.GetFileByFileInfoId(System.Guid,System.Int32,System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Method finds a single file instance based on its id and specify the maxMemoryStreamSize
            </summary>
            <param name="id">The file info id.</param>
            <param name="maxMemoryStreamSize">The max memory stream size</param>
            <param name="correlationId">Correlation id for tracking</param>
            <param name="timeout">timeout</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.GetFileByFileInfoId(System.Guid,System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Get file by file info id
            </summary>
            <param name="id">file info id</param>
            <param name="correlationId">correlation id</param>
            <param name="timeout">timeout</param>
            <returns>File result</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.GetByFileNameAndPath(System.String,System.String,System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Get file by name and path
            </summary>
            <param name="fileName">file name</param>
            <param name="filePath">file path</param>
            <param name="correlationId">correlation id</param>
            <param name="timeout">timeout</param>
            <returns>File reuslt</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.GetOneFileInfo(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Get one file info by file name and file path
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="filePath">file path</param>
            <param name="correlationId">correlation id</param>
            <param name="includeVoidedFiles">Should we include voided files in the search. False by default</param>
            <returns>
            One file info
            </returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.GetFilesInfo(System.String,System.Guid,System.Boolean)">
            <summary>
            Get file infos by file path
            </summary>
            <param name="filePath">file path</param>
            <param name="correlationId">correlation id</param>
            <param name="includeVoidedFiles">Should we include voided files. False by default</param>
            <returns>Collection of file infos</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.VoidFile(System.String,System.String,System.Guid,System.Guid,System.String,System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.VoidFile(System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.UpdateFileReconciled(System.Boolean,System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.DeleteFile(System.String,System.String,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.DeleteFile(System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.GetRemoteUploadFiles(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.GetSubFolders(System.String)">
            <summary>
            Get the subfolders for the given folder path
            </summary>
            <param name="folderPath">folder path</param>
            <returns>The subfolders for the given folder path</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.FileExists(System.String,System.String,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.TransmitToUdes(System.Guid,System.Guid,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Transmits the outbound file from the object store to udes.
            The method is written so that if it is invoked more than 1 time it does not fail, but instead returns an appropriate result.
            </summary>
            <param name="fileId">The identifier of the outboundFile.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="userDescription">The user's description.</param>
            <param name="filePath">The path where we store the file</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the process of transmitting the file finished correctly. False otherwise.</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.TransmitToUdes(System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Transmits the file from the object store to udes.
            The method is written so that if it is invoked more than 1 time it does not fail, but instead returns an appropriate result.
            </summary>
            <param name="fileId">The identifier of the file.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="userDescription">The user's description.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the process of transmitting the file finished correctly. False otherwise.</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.FileService.Update(System.Action{TaxHub.CommonServices.FileManagement.Models.FileInfo},System.Guid,TaxHub.CommonServices.FileManagement.Models.FileInfo,System.Guid,System.Guid,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="entity">The entity.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="userId">The user id.</param>
            <param name="userDescription">The user description.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Application.IFileService">
            <summary>
            Dummy file service useful for demonstrating other infrastructure file services
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.SaveFile(TaxHub.Hosting.Runtime.TemporaryStreamResult,TaxHub.CommonServices.FileManagement.Models.FileInfo,System.Guid,System.Guid,System.String,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new file
            </summary>
            <param name="temporaryStream">Stream with the file to be uploaded</param>
            <param name="fileInfo">PTM file details</param>
            <param name="correlationId">Correlation id for tracking</param>
            <param name="userId">user id</param>
            <param name="userDescription">user</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="timeout">timeout</param>
            <returns>A task result</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.SaveFile(System.String,System.Web.HttpPostedFile,TaxHub.Common.Enums.FileServiceDocumentType,System.String,System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new file
            </summary>
            <param name="fileName">local filename</param>
            <param name="postedFile">Http posted file</param>
            <param name="documentType">Doc_Name</param>
            <param name="filePath">virtual path to local folder</param>
            <param name="correlationid">correlation id for tracking</param>
            <param name="timeout">timeout</param>
            <returns>The result of saving the file</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.SaveFile(System.String,System.Byte[],TaxHub.Common.Enums.FileServiceDocumentType,System.String,System.Guid,System.Nullable{System.Guid},System.Nullable{System.TimeSpan},System.Guid,System.String)">
            <summary>
            Creates a new file
            </summary>
            <param name="fileName">local filename</param>
            <param name="content">File content</param>
            <param name="documentType">Doc_Name</param>
            <param name="filePath">virtual path to local folder</param>
            <param name="correlationid">correlation id for tracking</param>
            <param name="fileInfoId">Optional fileinfo Id if we want to force it.</param>
            <param name="timeout">timeout</param>
            <param name="userId">user id</param>
            <param name="userDescription">user description</param>
            <returns>The result of saving the file</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.GetFileByFileInfoId(System.Guid,System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Method finds a single file instance based on its id.
            </summary>
            <param name="id">The file info id.</param>
            <param name="correlationId">Correlation id for tracking</param>
            <param name="timeout">timeout</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.GetFileByFileInfoId(System.Guid,System.Int32,System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Method finds a single file instance based on its id.
            </summary>
            <param name="id">The file info id.</param>
            <param name="maxMemoryStreamSize">The max memory stream size</param>
            <param name="correlationId">Correlation id for tracking</param>
            <param name="timeout">timeout</param>
            <returns>Returns an instance or null, if not found.</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.GetByFileNameAndPath(System.String,System.String,System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Lookup a file by name and path
            </summary>
            <param name="fileName">file name</param>
            <param name="filePath">file path</param>
            <param name="correlationId">correlation id</param>
            <param name="timeout">timeout</param>
            <returns>Lookup a file by name and path</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.GetOneFileInfo(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Gets the one file information.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="filePath">The file path.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="includeVoidedFiles">if set to <c>true</c> [include voided files] in the search.</param>
            <returns>One file info.</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.GetFilesInfo(System.String,System.Guid,System.Boolean)">
            <summary>
            Get info for all files mapped to a local folder
            </summary>
            <param name="filePath">path to the local folder.</param>
            <param name="correlationId">Correlation id for tracking.</param>
            <param name="includeVoidedFiles">Should we include voided files. False by default</param>
            <returns>List of file info models</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.DeleteFile(System.String,System.String,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a file from Object Storage and FileInfo map store
            This operation performs a PHYSICAL DELETE. Use with Caution!
            </summary>
            <param name="filePath">local folder</param>
            <param name="fileName">file name</param>
            <param name="correlationId">correlation id</param>
            <param name="userId">The user id</param>
            <param name="userDescription">The user description.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The result of deleting the file</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.DeleteFile(System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a file from Object Storage and FileInfo map store
            This operation performs a PHYSICAL DELETE. Use with Caution!
            </summary>
            <param name="id">Unique identifier for file info</param>
            <param name="correlationId">correlation id</param>
            <param name="userId">The user id</param>
            <param name="userDescription">The user description.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The result of deleting the file</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.GetRemoteUploadFiles(System.String,System.Boolean)">
            <summary>
            Returns the list of files that are mapped to folder containers in the remote store. 
            </summary>
            <param name="filePath">Local Virtual Folder Path</param>
            <param name="includeVoidedFiles">Should we include voided files. False by default</param>
            <returns>The uploaded file</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.GetSubFolders(System.String)">
            <summary>
            Get the subfolders for the given folder path
            </summary>
            <param name="folderPath">folder path</param>
            <returns>The subfolders for the given folder path</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.FileExists(System.String,System.String,System.Guid)">
            <summary>
            Check if a file exists
            </summary>
            <param name="filePath">local folder</param>
            <param name="fileName">file name</param>
            <param name="correlationId">correlation id</param>
            <returns>true if the file exists, false otherwise</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.TransmitToUdes(System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Transmits the outbound file from the object store to udes. 
            The method is written so that if it is invoked more than 1 time it does not fail, but instead returns an appropriate result.
            </summary>
            <param name="fileId">The identifier of the outboundFile.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="userDescription">The user's description.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the process of transmitting the file finished correctly. False otherwise.</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.TransmitToUdes(System.Guid,System.Guid,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Transmits the outbound file from the object store to udes. 
            The method is written so that if it is invoked more than 1 time it does not fail, but instead returns an appropriate result.
            </summary>
            <param name="fileId">The identifier of the outboundFile.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="userDescription">The user's description.</param>
            <param name="filePath">The path where we declaratively store the file</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the process of transmitting the file finished correctly. False otherwise.</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.VoidFile(System.String,System.String,System.Guid,System.Guid,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Void File
            </summary>
            <param name="filePath">File Path</param>
            <param name="fileName">File Name</param>
            <param name="correlationId">correlation id</param>
            <param name="userId">user id</param>
            <param name="userDescription">user</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="includeVoidedFiles">Should we include voided files. False by default</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.VoidFile(System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Void File
            </summary>
            <param name="fileInfoId">File Id</param>
            <param name="correlationId">correlation id</param>
            <param name="userId">user id</param>
            <param name="userDescription">user</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.UpdateFileReconciled(System.Boolean,System.Guid,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Update to reflect if any transactions in the file have been reconciled/matched
            </summary>
            <param name="isMatched">Matched/unmatched</param>
            <param name="fileRequestId">File Request Id</param>
            <param name="correlationId">Correlation Id</param>
            <param name="userId">User Id</param>
            <param name="userDescription">User description</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>UpdateAggregateResultState</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.LinkPreviouslyPersistedFile(TaxHub.CommonServices.FileManagement.Models.FileInfo,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Links a file previously persisted to object storage to a record in the repository.
            </summary>
            <param name="fileInfo">The <see cref="T:TaxHub.CommonServices.FileManagement.Models.FileInfo"/> object to link.</param>
            <param name="correlationId">The correlationId</param>
            <param name="userId">The User Id</param>
            <param name="userDescription">The User Description</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The result of the file linking operation</returns>
            <remarks>ULTI-358734: Will do nothing if called with the same parameters more than once. And return success is true</remarks>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.FindOne(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find file info by Id
            </summary>
            <param name="id">identifier</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>File Info</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.Update(System.Action{TaxHub.CommonServices.FileManagement.Models.FileInfo},System.Guid,TaxHub.CommonServices.FileManagement.Models.FileInfo,System.Guid,System.Guid,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="commandAction">Action to take on the entity.</param>
            <param name="id">The id of the entity.</param>
            <param name="entity">The entity.</param>
            <param name="correlationId">The correlation id.</param>
            <param name="userId">The user id.</param>
            <param name="userDescription">The user description.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="retryCount">Times to retry the update.</param>
            <returns>
            The result of creating an instance of the aggregate
            </returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Application.IFileService.FindByRemoteContainerAndRemoteIdentifier(System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Find a file with the matching remote identifier and the remote container name.
            </summary>
            <param name="remoteIdentifier">The remote identifier.</param>
            <param name="remoteContainer">The remote container.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The matching file info</returns>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoDbContext">
            <summary>
            File info db context
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoDbContext"/> class.
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoDbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoDbContext"/> class.
            </summary>
            <param name="connectionString">connection string</param>
            <param name="recreate">recreate the database</param>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoDbContextFactory">
            <summary>
            PeriodicTaxInstanceDbContext factory
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoDbContextFactory.#ctor(TaxHub.Common.DataAccess.IDatabaseConnectivityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoDbContextFactory"/> class.
            </summary>
            <param name="databaseConnectivityProvider">DatabaseConnectivityProvider</param>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoDbContextFactory.Create">
            <inheritdoc></inheritdoc>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoMap">
            <summary>
            <see cref="T:TaxHub.CommonServices.FileManagement.Models.FileInfo"/> EF mapping
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository">
            <summary>
            File info repository
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository.#ctor(TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoDbContextFactory,TaxHub.Common.Logging.IAppLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository"/> class.
            </summary>
            <param name="fileInfoDbContextFactory">DBContext factory</param>
            <param name="logger">application logger</param>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository.FindByNameAndPath(System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository.FindByRemoteContainerAndRemoteIdentifier(System.String,System.Guid,System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository.ContainsByRemoteContainerAndRemoteIdentifier(System.String,System.Guid,System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository.FindById(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository.FindByPath(System.String,System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository.FindByPath(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository.FindLikePath(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository.FindOne(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc cref="M:TaxHub.Common.DataAccess.SqlDataStore.SqlServerGuidRepository`1.FindOne(System.Guid,System.Threading.CancellationToken)" />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository.GetAggregateSet(System.Data.Entity.DbContext)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.FileInfoRepository.FindAllValidAndReconciled(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoDbContextFactory">
            <summary>
            File info db context
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoDbContextFactory.Recreate">
            <summary>
            Gets or sets a value indicating whether recreate database
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoRepository">
            <summary>
            File info repository
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoRepository.FindByNameAndPath(System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Find all the file infos for the corresponding file name and file path
            </summary>
            <param name="fileName">file name</param>
            <param name="filePath">file path</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="includeVoidedFiles">Should we include voided files. False by default</param>
            <returns>The matching file info</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoRepository.FindById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Find all the file infos for the corresponding file name and file path
            </summary>
            <param name="id">file info id</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>The matching file info</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoRepository.FindByPath(System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Find all the file infos for the corresponding file path
            </summary>
            <param name="filePath">file path</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="includeVoidedFiles">Should we include voided files. False by default</param>
            <returns>The matching file info</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoRepository.FindByPath(System.String,SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Find all the file infos for the corresponding file path
            </summary>
            <param name="filePath">file path</param>
            <param name="pageParams">page params</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="includeVoidedFiles">Should we include voided files. False by default</param>
            <returns>The matching file info</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoRepository.FindLikePath(System.String,System.Threading.CancellationToken)">
            <summary>
            Find all the file infos for the corresponding file path
            </summary> 
            <param name="filePath">file path</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>The matching file info</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoRepository.FindAllValidAndReconciled(SmartHub.Hosting.DataAccess.PagedDataParameters,System.Threading.CancellationToken)">
            <summary>
            Get all files reconciled and not voided
            </summary>
            <param name="pageParams">page params</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>Returns a collection of fileinfo</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoRepository.FindByRemoteContainerAndRemoteIdentifier(System.String,System.Guid,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Find all the file infos for the corresponding remoteContainer and remoteIdentifier
            </summary>
            <param name="remoteContainer">The container name</param>
            <param name="remoteIdentifier">The remote Identifier id</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="includeVoidedFiles">Should we include voided files. False by default</param>
            <returns>The matching file info</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.DataAccess.IFileInfoRepository.ContainsByRemoteContainerAndRemoteIdentifier(System.String,System.Guid,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Checks if any file infos for the corresponding remoteContainer and remoteIdentifier exist
            </summary>
            <param name="remoteContainer">The container name</param>
            <param name="remoteIdentifier">The remote Identifier id</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="includeVoidedFiles">Should we include voided files. False by default</param>
            <returns><value>true</value> if the fileinfo exists already.</returns>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Events.TaxFileUpdatedEvent">
            <summary>
            The tax.file.updated event details.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileUpdatedEvent.FileId">
            <summary>
            Gets or sets the file Id of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileUpdatedEvent.FileType">
            <summary>
            Gets or sets the type of the file.
            </summary>
            <value>
            The type of the file.
            </value>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileUpdatedEvent.DocumentType">
            <summary>
            Gets or sets the type of the document.
            </summary>
            <value>
            The type of the file.
            </value>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileUpdatedEvent.FilePath">
            <summary>
            Gets or sets the file path
            <value>
            file path
            </value>
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Events.TaxFileDeletedEvent">
            <summary>
            The tax.file.deleted event details.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileDeletedEvent.Id">
            <summary>
            The id for the file that was deleted.
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Events.TaxFileGeneratedEvent">
            <summary>
            The tax.file.generated event details.
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Events.TaxFileGeneratedEvent.EventName">
            <summary>
            The event's name.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileGeneratedEvent.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileGeneratedEvent.GeneratedUtcDateTime">
            <summary>
            Sets the generated UTC date time.
            </summary>
            <value>
            The generated UTC date time.
            </value>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileGeneratedEvent.ProcessingStatus">
            <summary>
            Gets or sets the processing status.
            </summary>
            <value>
            The processing status.
            </value>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileGeneratedEvent.FileType">
            <summary>
            Gets or sets the type of the file.
            </summary>
            <value>
            The type of the file.
            </value>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileGeneratedEvent.RemoteIdentifier">
            <summary>
            The remote identifier used in object storage for the generated package.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileGeneratedEvent.RemoteContainer">
            <summary>
             The remote contianer used in object storage for the generated package.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileGeneratedEvent.Checksum">
            <summary>
             The MD5 hashset for the file generated.
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Events.TaxFileReconciledEvent">
            <summary>
             Some payments from this file has been reconsiled/ matched
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileReconciledEvent.FileId">
            <summary>
            The file request id 
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileReconciledEvent.IsReconciled">
            <summary>
             Are any of the payments reconciled form this file
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Events.TaxFileSentEvent">
            <summary>
            The tax.file.sent event details.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileSentEvent.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileSentEvent.SentUtcDateTime">
            <summary>
            Sets the sent UTC date time.
            </summary>
            <value>
            The sent UTC date time.
            </value>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileSentEvent.ProcessingStatus">
            <summary>
            Gets or sets the processing status.
            </summary>
            <value>
            The processing status.
            </value>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileSentEvent.FileType">
            <summary>
            Gets or sets the type of the file.
            </summary>
            <value>
            The type of the file.
            </value>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Events.TaxFileVoidedEvent">
            <summary>
            The tax.file.voided event details.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileVoidedEvent.FileId">
            <summary>
            Gets or sets the file Id of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileVoidedEvent.ProcessingStatus">
            <summary>
            Gets or sets the processing status.
            </summary>
            <value>
            The processing status.
            </value>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Events.TaxFileVoidedEvent.FileType">
            <summary>
            File Type
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Models.BankInstitution">
            <summary>
            Enumeration for the bank institution
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.BankInstitution.Unknown">
            <summary>
            Unknown bank institution
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.BankInstitution.JPMorganChase">
            <summary>
            JP Morgan Chase
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.BankInstitution.WellsFargo">
            <summary>
            Wells Fargo
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.BankInstitution.BankOfAmerica">
            <summary>
            Bank of America
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Models.FileInfo">
            <summary>
            File info model
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileInfo.SetFileGenerated">
            <summary>
            Sets the GeneratedUtcDateTime for the file, updates the status to generated,
            and raises the 'payment.file.generated' event.
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileInfo.SetFileSent">
            <summary>
            Sets the SentUtcDateTime for the file, and updates the status to Sent. Raises the event payment.file.sent
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileInfo.SetFileReconciled(System.Boolean)">
            <summary>
            Updates IsReconciled , sets the SentUtcDateTime for the file. Raises the event tax.file.reconciled
            </summary>
            <param name="isReconciled">Are any of the payments reconciled form this file</param>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileInfo.SetFileVoided">
            <summary>
            Sets the ProcessingStatus to Voided , updates the UpdatedUtcDt for the file, and raises the event payment.file.voided
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileInfo.DetermineUdesContainerPrefixByBankInstitution">
            <summary>
            Determine the Udes prefix base on the BankInstitution for the bank.
            </summary>
            <returns>The bank instituion folder prefix</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileInfo.DetermineUdesContainerName">
            <summary>
            Method returns UDES container name for this file.
            </summary>
            <returns>Returns a string.</returns>
            <exception cref="T:SmartHub.Hosting.Exceptions.BusinessRuleException">May throw an exception for unknown file type of file type not accepted by UDES.</exception>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileInfo.SetFilePath(System.String)">
            <summary>
            Set FilePath
            </summary>
            <param name="filePath">new file path</param>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileInfo.SetDocumentAndFileType(System.String,TaxHub.CommonServices.FileManagement.Models.FileType)">
            <summary>
            Sets the Document type and File type and updates the UpdateUtcDate.
            </summary>
            <param name="documentType">The document type to be used.</param>
            <param name="fileType">The filetype to be used.</param>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileInfo.#ctor">
            <summary>
            Create a new file info model
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.FileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.FilePath">
            <summary>
            File path
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.Size">
            <summary>
            File size
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.Hash">
            <summary>
            File hash
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.ExpirationDate">
            <summary>
            File expiration date. Defaults to DateTime.Max, this should be overriden.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.RemoteIdentifier">
            <summary>
            Remote identifier
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.RemoteContainer">
            <summary>
            Remote container
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.DocumentType">
            <summary>
            Document type
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.FileType">
            <summary>
            File Type
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.ProcessingStatus">
            <summary>
            Gets or sets the file processing status for this file.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.GeneratedUtcDateTime">
            <summary>
            Time that file was generated
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.SentUtcDateTime">
            <summary>
            Time that file was sent to UDES 
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.IsReconciled">
            <summary>
            Are any of the payments reconsiled form this file
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.BankInstitution">
            <summary>
            The Bank institution
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileInfo.DbBankInstitution">
            <summary>
            The Bank institution mapped from the Database
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Models.FileStatus">
            <summary>
            File Status enum
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileStatus.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileStatus.FailedToSend">
            <summary>
            Failed to Send
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileStatus.Generated">
            <summary>
            Generated
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileStatus.Initiated">
            <summary>
            Initiated
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileStatus.Sent">
            <summary>
            Sent
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileStatus.Voided">
            <summary>
            Voided 
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Models.FileType">
            <summary>
            File Type enum
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileType.AchRefund">
            <summary>
            Ach Refund
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileType.Nacha">
            <summary>
            NACHA (Direct Desposit)
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileType.PositivePay">
            <summary>
            Positive Pay
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileType.Check">
            <summary>
            Check
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileType.CheckReport">
            <summary>
            Check Report
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileType.PrintJobFile">
            <summary>
            Print Job File
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileType.Efw2File">
            <summary>
            Efw2 File
            </summary>
        </member>
        <member name="F:TaxHub.CommonServices.FileManagement.Models.FileType.CSVBulkFile">
            <summary>
            CSV bulk File
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Models.FileResult`1">
            <summary>
            Dummy file service operation result
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileResult`1.Success">
            <summary>
            True if operation was successful 
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileResult`1.Message">
            <summary>
            Operation result message. Useful in case of failures
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.FileResult`1.Data">
            <summary>
            result
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileResult`1.SetFailedResult(System.String)">
            <summary>
            Flag as failed and returns itself   
            </summary>
            <param name="message">Error message</param>
            <returns>Itself</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileResult`1.SetSuccess(System.String)">
            <summary>
            Flag as success and returns itself   
            </summary>
            <param name="message">message</param>
            <returns>Itself</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileResult`1.SetSuccess">
            <summary>
            Flag as success and returns itself and clears the message  
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.FileResult`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:TaxHub.CommonServices.FileManagement.Models.UploadFile">
            <summary>
            Upload file
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.FileManagement.Models.UploadFile.GetImageFile">
            <summary>
            Get the image file
            </summary>
            <returns>image file type</returns>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.AbbreviatedFileName">
            <summary>
            Returns a shorter version of the file name
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.FileIcon">
            <summary>
            File icon
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.Filepath">
            <summary>
            File path
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.LineNumber">
            <summary>
            Line number
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.CreationDate">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.FileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.FileLoc">
            <summary>
            File location
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.Size">
            <summary>
            Size ?
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.ActualSize">
            <summary>
            Actual size
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.Modified">
            <summary>
            Modified todo: datetime?
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.IsVoided">
            <summary>
             Is File Voided
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.Id">
            <summary>
            File Id
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.FileFormat">
            <summary>
            File Format
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.FileManagement.Models.UploadFile.IsReconciled">
            <summary>
            Have any payments, related to this file, been reconciled?
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.SqlReportingServices.Application.IRemoteReportServerConfiguration">
            <summary>
            An configuration object used for configuring a remote SSRS.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.SqlReportingServices.Application.IRemoteReportServerConfiguration.SsrsServiceUri">
            <summary>
            The service endpoint base uri.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.SqlReportingServices.Application.IRemoteReportServerConfiguration.ReportPath">
            <summary>
            The path of the endpoint.
            </summary>
        </member>
        <member name="P:TaxHub.CommonServices.SqlReportingServices.Application.IRemoteReportServerConfiguration.IsLocalReportServer">
            <summary>
            Denotes if the instance is local to the application.
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.SqlReportingServices.Application.IReportingService">
            <summary>
            Reporting service interface
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.Application.IReportingService.RenderContent(TaxHub.CommonServices.SqlReportingServices.Application.ReportRequest,System.Guid,System.Action{System.Byte[]},System.Threading.CancellationToken)">
            <summary>
            Receives a report request, invokes SSRS and conditionally saves the file.
            </summary>
            <param name="request">The Report request</param>
            <param name="correlationId">The correlation Id</param>
            <param name="contextAction">To Return bytes</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.Application.IReportingService.RenderContent(TaxHub.CommonServices.SqlReportingServices.Application.ReportRequest,System.Int32,System.Guid,System.Action{System.Byte[]},System.Threading.CancellationToken)">
            <summary>
            Receives a report request, invokes SSRS and conditionally saves the file.
            </summary>
            <param name="request">The Report request</param>
            <param name="minSizeInBytes">The minimum expected size for the request</param>
            <param name="correlationId">The correlation Id</param>
            <param name="contextAction">To Return bytes</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>True if success, False if error</returns>
        </member>
        <member name="T:TaxHub.CommonServices.SqlReportingServices.Application.ISsrsReportProvider">
            <summary>
            An instance of an SSRS Report Provider.
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.Application.ISsrsReportProvider.Render(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.Threading.CancellationToken)">
            <summary>
            Renders an SSRS Report to disk
            </summary>
            <param name="reportParameters">The parameters for the report</param>
            <param name="reportName">The name of the report</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>A task containing the path of a temporary file the report was rendered to on disk.</returns>
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.Application.ISsrsReportProvider.Render(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Renders an SSRS Report to a byte array
            </summary>
            <param name="reportParameters">The parameters for the report</param>
            <param name="reportName">The name of the report</param>
            <returns>A byte array containing the report was rendered.</returns>
        </member>
        <member name="T:TaxHub.CommonServices.SqlReportingServices.Application.ReportCredentials">
            <summary>
            Class required when running SSRS in non local mode
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.Application.ReportCredentials.#ctor(TaxHub.Common.Security.KeyServer.ISsrsReportViewerCredentialsCache)">
            <summary> 
            Initializes a new instance of the <see cref="T:TaxHub.CommonServices.SqlReportingServices.Application.ReportCredentials"/> class. 
            </summary> 
            <param name="ssrsReportViewerCredentialsCache">An instance of <see cref="T:TaxHub.Common.Security.KeyServer.ISsrsReportViewerCredentialsCache"/></param> 
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.Application.ReportingService.RenderContent(TaxHub.CommonServices.SqlReportingServices.Application.ReportRequest,System.Guid,System.Action{System.Byte[]},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.Application.ReportingService.RenderContent(TaxHub.CommonServices.SqlReportingServices.Application.ReportRequest,System.Int32,System.Guid,System.Action{System.Byte[]},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.Application.ReportingService.RenderReport(TaxHub.CommonServices.SqlReportingServices.Application.ReportRequest)">
            <summary>
            Render the report
            </summary>
            <param name="request">The request</param>
            <returns>The report in bytes</returns>
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.Application.ReportingService.SetReportViewer(TaxHub.CommonServices.SqlReportingServices.Application.ReportRequest)">
            <summary>
            Instantiates and configures <see cref="T:Microsoft.Reporting.WebForms.ReportViewer"/>
            </summary>
            <param name="request">The request</param>
            <returns>A new instance of report viewer</returns>
        </member>
        <member name="T:TaxHub.CommonServices.SqlReportingServices.Application.ReportRequest">
            <summary>
            The request object used to Submit a Report Request
            </summary>
        </member>
        <member name="T:TaxHub.CommonServices.SqlReportingServices.Application.SsrsRemoteReportProvider">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.Application.SsrsRemoteReportProvider.#ctor(TaxHub.CommonServices.SqlReportingServices.Application.ReportCredentials,TaxHub.CommonServices.SqlReportingServices.Application.IRemoteReportServerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TaxHub.CommonServices.SqlReportingServices.Application.SsrsRemoteReportProvider"/> class.
            
            </summary>
            <param name="reportCredentials">An instance of <see cref="T:TaxHub.CommonServices.SqlReportingServices.Application.ReportCredentials"/></param>
            <param name="remoteReportServerConfiguration">An instance of <see cref="T:TaxHub.CommonServices.SqlReportingServices.Application.IRemoteReportServerConfiguration"/></param>
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.Application.SsrsRemoteReportProvider.Render(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.Application.SsrsRemoteReportProvider.Render(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <inheritdoc />
        </member>
        <member name="T:TaxHub.CommonServices.SqlReportingServices.SqlReportingServicesExtensions">
            <summary>
            Extension methods to support SSRS.
            </summary>
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.SqlReportingServicesExtensions.AddSqlServerReportingServices(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Adds Sql Server Reporting Services registrations to Unity Container.
            </summary>
            <param name="container">The container.</param>
            <returns>The unity container.</returns>
        </member>
        <member name="M:TaxHub.CommonServices.SqlReportingServices.SqlReportingServicesExtensions.AddSqlServerReportingServices``1(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Adds Sql Server Reporting Services registrations to Unity Container.
            </summary>
            <typeparam name="TConfiguration">This is the configaration type parameter to register</typeparam>
            <param name="container">The container.</param>
            <returns>The unity container.</returns>
        </member>
    </members>
</doc>
